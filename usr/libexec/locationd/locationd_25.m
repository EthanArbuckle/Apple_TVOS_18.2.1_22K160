void sub_100C28600( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  sub_1011F6BE4(&a47);
  _Unwind_Resume(a1);
}

void sub_100C2863C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    v11 = "";
    __int16 v12 = 2082;
    v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTilesManager::deleteAgedDownloadItems, event:%{public, location:escape_only}s, be gin_mach:%{public}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, now_s:%{public}.09f}",  (uint8_t *)v9,  0x44u);
  }

uint64_t *sub_100C28770(double a1, uint64_t a2, uint64_t a3)
{
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472LL;
  v71[2] = sub_100C292C8;
  v71[3] = &unk_101862770;
  *(double *)&v71[4] = a1;
  v72[0] = mach_absolute_time();
  v72[1] = (uint64_t)v71;
  v5 = (void *)sub_1005B46E8(a3 + 184);
  uint64_t v6 = sub_100056FA8(a3 + 184);
  if (v5 == (void *)sub_100056FA8(a3 + 184))
  {
    int v7 = 0;
  }

  else
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t)v5;
      v9 = (void *)v5[1];
      __int16 v10 = v5;
      if (v9)
      {
        do
        {
          v5 = v9;
          v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          v5 = (void *)v10[2];
          BOOL v11 = *v5 == (void)v10;
          __int16 v10 = v5;
        }

        while (!v11);
      }

      uint64_t v12 = *(void *)(v8 + 80);
      double v13 = sub_100C0CC30(v12, a1);
      double v14 = sub_100C0CC24(v12, a1);
      double v15 = fabs(v13);
      BOOL v16 = v15 < *(double *)(a3 + 112) && v14 < *(double *)(a3 + 120);
      if (v16 && !sub_100C15770(v12))
      {
        if (v6 == sub_100056FA8(a3 + 184)
          || v6 != sub_100056FA8(a3 + 184) && v15 >= fabs(sub_100C0CC30(*(void *)(v6 + 80), a1)))
        {
          uint64_t v6 = v8;
        }
      }

      else
      {
        sub_100C0FD9C(v12);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101879158);
        }
        uint64_t v17 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v18 = sub_100DD8CC8(*(_DWORD *)(v12 + 48));
          double v19 = sub_1008ADB4C(v12 + 48);
          double v20 = sub_1008ADB70(v12 + 48);
          BOOL v21 = sub_100C15770(v12);
          uint64_t v22 = sub_100019240(a3 + 184);
          *(_DWORD *)buf = 136447235;
          v23 = "age";
          if (v21) {
            v23 = "corrupt";
          }
          *(void *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v19;
          *(_WORD *)&buf[22] = 2049;
          *(double *)&buf[24] = v20;
          __int16 v83 = 2082;
          v84 = v23;
          __int16 v85 = 2050;
          uint64_t v86 = v22 - 1;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu",  buf,  0x34u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          uint64_t v24 = qword_101934858;
          v25 = sub_100DD8CC8(*(_DWORD *)(v12 + 48));
          double v26 = sub_1008ADB4C(v12 + 48);
          double v27 = sub_1008ADB70(v12 + 48);
          BOOL v28 = sub_100C15770(v12);
          uint64_t v29 = sub_100019240(a3 + 184);
          *(_DWORD *)v77 = 136447235;
          v30 = "age";
          if (v28) {
            v30 = "corrupt";
          }
          *(void *)&v77[4] = v25;
          *(_WORD *)&v77[12] = 2049;
          *(double *)&v77[14] = v26;
          *(_WORD *)&v77[22] = 2049;
          *(double *)&v77[24] = v27;
          __int16 v78 = 2082;
          v79 = v30;
          __int16 v80 = 2050;
          uint64_t v81 = v29 - 1;
          LODWORD(v70) = 52;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu",  v77,  v70);
          v32 = (char *)v31;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)",  "%s\n",  v31);
          if (v32 != buf) {
            free(v32);
          }
        }

        sub_100602810((uint64_t **)(a3 + 184), v8);
        ++v7;
      }
    }

    while (v5 != (void *)sub_100056FA8(a3 + 184));
  }

  uint64_t v33 = v6;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (v33 != sub_100056FA8(a3 + 184) && sub_100019240(a3 + 184) > (unint64_t)*(unsigned int *)(a3 + 132))
  {
    v35 = *(unsigned int **)(v33 + 80);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    v36 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = sub_100019240(a3 + 184);
      (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v35 + 16LL))(buf, v35);
      if (buf[23] >= 0) {
        v38 = buf;
      }
      else {
        v38 = *(_BYTE **)buf;
      }
      *(_DWORD *)v77 = 134218242;
      *(void *)&v77[4] = v37;
      *(_WORD *)&v77[12] = 2080;
      *(void *)&v77[14] = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "TILE: deleteAgedTiles, too many tiles, %lu, tile, %s",  v77,  0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v56 = qword_101934838;
      uint64_t v57 = sub_100019240(a3 + 184);
      (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v35 + 16LL))(v77, v35);
      if (v77[23] >= 0) {
        v58 = v77;
      }
      else {
        v58 = *(_BYTE **)v77;
      }
      int v73 = 134218242;
      uint64_t v74 = v57;
      __int16 v75 = 2080;
      v76 = v58;
      LODWORD(v70) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  2LL,  "TILE: deleteAgedTiles, too many tiles, %lu, tile, %s",  &v73,  v70);
      v60 = v59;
      if ((v77[23] & 0x80000000) != 0) {
        operator delete(*(void **)v77);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)",  "%s\n",  v60);
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
      if (v60 != buf) {
        free(v60);
      }
    }

    if (sub_100C0CCC8((uint64_t)v35))
    {
      sub_100C0FD9C((uint64_t)v35);
      ++v7;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    v39 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      v40 = sub_100DD8CC8(v35[12]);
      double v41 = sub_1008ADB4C((uint64_t)(v35 + 12));
      double v42 = sub_1008ADB70((uint64_t)(v35 + 12));
      uint64_t v43 = sub_100019240(a3 + 184);
      *(_DWORD *)buf = 136446979;
      *(void *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2049;
      *(double *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&buf[24] = v42;
      __int16 v83 = 2050;
      v84 = (const char *)(v43 - 1);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      uint64_t v61 = qword_101934858;
      unsigned int v63 = v35[12];
      uint64_t v62 = (uint64_t)(v35 + 12);
      v64 = sub_100DD8CC8(v63);
      double v65 = sub_1008ADB4C(v62);
      double v66 = sub_1008ADB70(v62);
      uint64_t v67 = sub_100019240(a3 + 184);
      *(_DWORD *)v77 = 136446979;
      *(void *)&v77[4] = v64;
      *(_WORD *)&v77[12] = 2049;
      *(double *)&v77[14] = v65;
      *(_WORD *)&v77[22] = 2049;
      *(double *)&v77[24] = v66;
      __int16 v78 = 2050;
      v79 = (const char *)(v67 - 1);
      LODWORD(v70) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  0LL,  "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu",  v77,  v70);
      v69 = (char *)v68;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)",  "%s\n",  v68);
      if (v69 != buf) {
        free(v69);
      }
    }

    sub_100602810((uint64_t **)(a3 + 184), v33);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  v44 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = sub_100019240(a3 + 184);
    uint64_t v46 = a3 + 8;
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)&buf[8] = 2050;
    *(void *)&buf[10] = v45;
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v49 = qword_101934858;
    uint64_t v50 = sub_100019240(a3 + 184);
    uint64_t v53 = *(void *)(a3 + 8);
    uint64_t v52 = a3 + 8;
    uint64_t v51 = v53;
    *(_DWORD *)v77 = 67240707;
    *(_DWORD *)&v77[4] = v7;
    *(_WORD *)&v77[8] = 2050;
    *(void *)&v77[10] = v50;
    *(_WORD *)&v77[18] = 2081;
    *(void *)&v77[20] = v51;
    LODWORD(v70) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v49,  0LL,  "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s",  v77,  v70);
    v55 = (char *)v54;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)",  "%s\n",  v54);
    if (v55 != buf) {
      free(v55);
    }
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  v47 = (os_log_s *)p_vtable[263];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTilesManager::agedTileDeleter, deleted:%{private}u}",  buf,  0x18u);
  }

  return sub_1011F6BE4(v72);
}

void sub_100C2926C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100C292C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  int v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    BOOL v11 = "";
    __int16 v12 = 2082;
    double v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTilesManager::agedTileDeleter, event:%{public, location:escape_only}s, begin_mach :%{public}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, now_s:%{public}.09f}",  (uint8_t *)v9,  0x44u);
  }

unint64_t sub_100C293FC(double a1, uint64_t a2, uint64_t a3)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  v5 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    else {
      uint64_t v6 = *(void *)(a3 + 8);
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v17 = v6;
    __int16 v18 = 2048;
    uint64_t v19 = sub_100019240(a3 + 184);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "TILE: deleteAgedTiles, start, name, %s, size, %lu",  buf,  0x16u);
  }

  unint64_t result = sub_1002921D0(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v8 = qword_101934838;
    else {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    int v12 = 136315394;
    uint64_t v13 = v9;
    __int16 v14 = 2048;
    uint64_t v15 = sub_100019240(a3 + 184);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  2LL,  "TILE: deleteAgedTiles, start, name, %s, size, %lu",  (const char *)&v12,  22);
    BOOL v11 = (uint8_t *)v10;
    unint64_t result = sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::deleteAgedTilesForTilesSet(CLTilesSet &, CFAbsoluteTime)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  do
  {
    sub_100C28770(a1, result, a3);
    unint64_t result = sub_100019240(a3 + 184);
  }

  while (result > *(unsigned int *)(a3 + 132));
  return result;
}

uint64_t sub_100C29628(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_10126683C();
LABEL_5:
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      unsigned int v12 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "TileMgr, invalid tileType, %{public}d, #CloneMe",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      v10[0] = 67240192;
      v10[1] = v2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, invalid tileType, %{public}d, #CloneMe",  v10,  8);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLTilesSet &CLTilesManager::getTilesSet(CLTilesManager_Type::TileType)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      unsigned int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
    }

    uint64_t v6 = (os_log_s *)qword_101934838;
    if (os_signpost_enabled((os_log_t)qword_101934838))
    {
      *(_DWORD *)buf = 68289539;
      unsigned int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "false";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
    }

    int v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      unsigned int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "assert";
      __int16 v17 = 2081;
      __int16 v18 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm",  2628,  "getTilesSet");
  }

  unsigned int v2 = a2;
  uint64_t result = sub_100E79F88((void *)(a1 + 504), a2);
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

id sub_100C29A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  v5 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a2 + 8;
    *(_DWORD *)buf = 136315138;
    uint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "TILE: dispatch, deleteAgedTiles, for, %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v9 = a2 + 8;
    int v13 = 136315138;
    uint64_t v14 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: dispatch, deleteAgedTiles, for, %s",  (const char *)&v13);
    BOOL v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  int v7 = *(void **)(v4 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100C29C40;
  v12[3] = &unk_101830558;
  v12[4] = v4;
  v12[5] = a2;
  v12[6] = *(void *)(a1 + 40);
  return [v7 async:v12];
}

unint64_t sub_100C29C40(uint64_t a1)
{
  return sub_100C293FC(*(double *)(a1 + 48), a1, *(void *)(a1 + 40));
}

void sub_100C29C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  int v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(v5 + 128);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    BOOL v11 = "";
    __int16 v12 = 2082;
    int v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2049;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTilesManager::cancelAllDownloads, event:%{public, location:escape_only}s, begin_m ach:%{public}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, planned:%{private}lu}",  (uint8_t *)v9,  0x44u);
  }

void sub_100C29D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  int v7 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    BOOL v11 = "";
    __int16 v12 = 2082;
    int v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 1025;
    int v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLTilesManager::removeAllTiles, event:%{public, location:escape_only}s, begin_mach :%{public}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, type:%{private}d}",  (uint8_t *)v9,  0x40u);
  }

uint64_t sub_100C29EBC(uint64_t a1)
{
  unsigned int v2 = operator new(0x2C8uLL);
  uint64_t result = sub_100C22540((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A1EC0 = (uint64_t)v2;
  return result;
}

void sub_100C29EF4(_Unwind_Exception *a1)
{
}

BOOL sub_100C29F08(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v8 = sub_100C29628(a1, a3);
  uint64_t v61 = a1;
  unsigned int v60 = a3;
  sub_100C26E64(a1, 0, a3);
  else {
    uint64_t v9 = *(const char **)a2;
  }
  __int16 v10 = opendir(v9);
  if (v10)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    BOOL v11 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "TILE: listAvailableFiles, start",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      LOWORD(v76.st_dev) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: listAvailableFiles, start",  &v76,  2);
      uint64_t v56 = (std::string *)v55;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)",  "%s\n",  v55);
      if (v56 != &buf) {
        free(v56);
      }
    }

    __int16 v12 = readdir(v10);
    if (v12)
    {
      int v13 = 0;
      int v59 = 136446978;
      do
      {
        __int16 v14 = objc_autoreleasePoolPush();
        sub_100104050(__dst, v12->d_name, v12->d_namlen);
        else {
          size_t v15 = *(void *)(a2 + 8);
        }
        sub_1000392EC((uint64_t)&buf, v15 + 1);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (v15)
        {
          else {
            uint64_t v17 = *(const void **)a2;
          }
          memmove(p_buf, v17, v15);
        }

        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v15) = 47;
        if ((v67 & 0x80u) == 0) {
          __int16 v18 = __dst;
        }
        else {
          __int16 v18 = (void **)__dst[0];
        }
        if ((v67 & 0x80u) == 0) {
          std::string::size_type v19 = v67;
        }
        else {
          std::string::size_type v19 = (std::string::size_type)__dst[1];
        }
        __int16 v20 = std::string::append(&buf, (const std::string::value_type *)v18, v19);
        __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        int64_t cap = v20->__r_.__value_.__l.__cap_;
        *(_OWORD *)v64 = v21;
        v20->__r_.__value_.__l.__size_ = 0LL;
        v20->__r_.__value_.__l.__cap_ = 0LL;
        v20->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v22 = (const void **)sub_100C1001C();
        sub_10010B8E0((const void **)v64, v22, (uint64_t)&__p);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        v23 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = v64;
          if (cap < 0) {
            uint64_t v24 = (void **)v64[0];
          }
          int d_type = v12->d_type;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v24;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = d_type;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d",  (uint8_t *)&buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v37 = v64;
          if (cap < 0) {
            uint64_t v37 = (void **)v64[0];
          }
          gid_t v38 = v12->d_type;
          v76.st_dev = 67109634;
          *(_DWORD *)&v76.st_mode = v13;
          LOWORD(v76.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v76.st_ino + 2) = (__darwin_ino64_t)v37;
          HIWORD(v76.st_uid) = 1024;
          v76.st_gid = v38;
          LODWORD(v58) = 24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d",  &v76,  v58,  v59);
          v40 = (std::string *)v39;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)",  "%s\n",  v39);
          if (v40 != &buf) {
            free(v40);
          }
        }

        if (v12->d_type == 8 && sub_100C2BA70((uint64_t)__dst, (const void **)a2))
        {
          if (cap >= 0) {
            double v26 = v64;
          }
          else {
            double v26 = (void **)v64[0];
          }
          int v27 = stat((const char *)v26, &v76);
          if (v27)
          {
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101879158);
            }
            BOOL v28 = (os_log_s *)qword_101934858;
            if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
            {
              if ((v67 & 0x80u) == 0) {
                uint64_t v29 = __dst;
              }
              else {
                uint64_t v29 = (void **)__dst[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v27;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe",  (uint8_t *)&buf,  0x12u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101879158);
              }
              if ((v67 & 0x80u) == 0) {
                double v41 = __dst;
              }
              else {
                double v41 = (void **)__dst[0];
              }
              int v68 = 136446466;
              v69 = v41;
              __int16 v70 = 1026;
              LODWORD(v71) = v27;
              LODWORD(v58) = 18;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe",  &v68,  v58);
              uint64_t v43 = (std::string *)v42;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)",  "%s\n",  v42);
              if (v43 != &buf) {
                free(v43);
              }
            }
          }

          else if (sub_100C2BBC0(v61, v60, (char *)a2, (std::string::value_type *)__dst, a4))
          {
            uint64_t v31 = v30;
            double v32 = sub_100C0CC24(v30, a4);
            if (v32 > *(double *)(v8 + 120))
            {
              if (qword_101934850 != -1) {
                dispatch_once(&qword_101934850, &stru_101879158);
              }
              uint64_t v33 = (os_log_s *)qword_101934858;
              if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
              {
                v34 = sub_100DD8CC8(v60);
                v35 = v64;
                if (cap < 0) {
                  v35 = (void **)v64[0];
                }
                uint64_t v36 = *(void *)(v8 + 120);
                LODWORD(buf.__r_.__value_.__l.__data_) = v59;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
                *(double *)__int16 v78 = v32;
                *(_WORD *)&v78[8] = 2050;
                *(void *)&v78[10] = v36;
                _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "TILE: listAvailableFiles, %{public}s, deleting old tile %{public}s, tileDataAge, %{public}.1lf, %{public}.1lf",  (uint8_t *)&buf,  0x2Au);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_101934850 != -1) {
                  dispatch_once(&qword_101934850, &stru_101879158);
                }
                uint64_t v44 = qword_101934858;
                uint64_t v45 = sub_100DD8CC8(v60);
                uint64_t v46 = v64;
                if (cap < 0) {
                  uint64_t v46 = (void **)v64[0];
                }
                uint64_t v47 = *(void *)(v8 + 120);
                int v68 = v59;
                v69 = (void *)v45;
                __int16 v70 = 2082;
                v71 = v46;
                __int16 v72 = 2050;
                double v73 = v32;
                __int16 v74 = 2050;
                uint64_t v75 = v47;
                LODWORD(v58) = 42;
                _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v44,  0LL,  "TILE: listAvailableFiles, %{public}s, deleting old tile %{public}s, tileDataAge, %{public}.1lf, %{public}.1lf",  &v68,  v58);
                uint64_t v49 = (std::string *)v48;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)",  "%s\n",  v48);
                if (v49 != &buf) {
                  free(v49);
                }
              }

              sub_100C0FD9C(v31);
              std::string buf = *(std::string *)(v31 + 48);
              if (*(char *)(v31 + 95) < 0)
              {
                sub_1010DD48C(v78, *(void **)(v31 + 72), *(void *)(v31 + 80));
              }

              else
              {
                *(_OWORD *)__int16 v78 = *(_OWORD *)(v31 + 72);
                *(void *)&v78[16] = *(void *)(v31 + 88);
              }

              sub_100602D1C((uint64_t **)(v8 + 184), (unsigned int *)&buf);
              if ((v78[23] & 0x80000000) != 0) {
                operator delete(*(void **)v78);
              }
            }

            else
            {
              sub_100C2BF9C(v61, v31, v8, (uint64_t)"index", a4);
            }
          }
        }

        if (v63 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(cap) < 0) {
          operator delete(v64[0]);
        }
        objc_autoreleasePoolPop(v14);
        __int16 v12 = readdir(v10);
        ++v13;
      }

      while (v12);
    }

    closedir(v10);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v50 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "TILE: listAvailableFiles, end",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      LOWORD(v76.st_dev) = 0;
      LODWORD(v58) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: listAvailableFiles, end",  &v76,  v58);
      uint64_t v52 = (std::string *)v51;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)",  "%s\n",  v51);
LABEL_115:
      if (v52 != &buf) {
        free(v52);
      }
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v53 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "TileMgr, listAvailableFiles, can't open dir, %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      v76.st_dev = 136446210;
      *(void *)&v76.st_mode = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, listAvailableFiles, can't open dir, %{public}s",  &v76,  12);
      uint64_t v52 = (std::string *)v57;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)",  "%s\n",  v57);
      goto LABEL_115;
    }
  }

  return v10 != 0LL;
}

void sub_100C2AB08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100C2ABAC(id a1, const char *a2, unsigned int a3, BOOL a4)
{
  if (a4)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      size_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "TILE: convert to class B, first unlock, %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      int v12 = 136315138;
      int v13 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: convert to class B, first unlock, %s",  (const char *)&v12);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    sub_100C148A0(a2);
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    double v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      size_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "TILE: convert to class C, first unlock, %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      int v12 = 136315138;
      int v13 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: convert to class C, first unlock, %s",  (const char *)&v12);
      BOOL v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    sub_100C148A8(a2);
  }

  return 1;
}

uint64_t sub_100C2AEAC(uint64_t a1, uint64_t a2)
{
  return sub_100C2AEC0(a1, (std::string::size_type)"listerSetClass", a2, *(void *)(a1 + 32));
}

uint64_t sub_100C2AEC0(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  double v6 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v7 = *(void *)(a3 + 32);
    uint64_t v8 = a3 + 8;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v54 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s",  (uint8_t *)&buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v32 = *(void *)(a3 + 32);
    uint64_t v33 = a3 + 8;
    *(_DWORD *)__dst = 136315650;
    *(void *)&__dst[4] = a2;
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = v32;
    __int16 v51 = 2080;
    uint64_t v52 = v33;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s",  __dst,  32,  v41);
    v35 = (std::string *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)",  "%s\n",  v34);
    if (v35 != &buf) {
      free(v35);
    }
  }

  else {
    uint64_t v9 = *(const char **)(a3 + 32);
  }
  __int16 v10 = opendir(v9);
  if (v10)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    BOOL v11 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "TILE: listAvailableFilesByLister, start",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      *(_WORD *)__dst = 0;
      LODWORD(v40) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: listAvailableFilesByLister, start",  __dst,  v40);
      uint64_t v37 = (std::string *)v36;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)",  "%s\n",  v36);
      if (v37 != &buf) {
        free(v37);
      }
    }

    int v12 = readdir(v10);
    if (v12)
    {
      LODWORD(v13) = 0;
      char v14 = 1;
      do
      {
        sub_100104050(__dst, v12->d_name, v12->d_namlen);
        else {
          size_t v15 = *(void *)(a3 + 40);
        }
        sub_1000392EC((uint64_t)&buf, v15 + 1);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (v15)
        {
          else {
            uint64_t v17 = *(const void **)(a3 + 32);
          }
          memmove(p_buf, v17, v15);
        }

        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v15) = 47;
        if (v51 >= 0) {
          __int16 v18 = __dst;
        }
        else {
          __int16 v18 = *(const std::string::value_type **)__dst;
        }
        if (v51 >= 0) {
          std::string::size_type v19 = HIBYTE(v51);
        }
        else {
          std::string::size_type v19 = *(void *)&__dst[8];
        }
        __int16 v20 = std::string::append(&buf, v18, v19);
        __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        int64_t cap = v20->__r_.__value_.__l.__cap_;
        *(_OWORD *)__p = v21;
        v20->__r_.__value_.__l.__size_ = 0LL;
        v20->__r_.__value_.__l.__cap_ = 0LL;
        v20->__r_.__value_.__r.__words[0] = 0LL;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v22 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          v23 = __p;
          if (cap < 0) {
            v23 = (void **)__p[0];
          }
          int d_type = v12->d_type;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v23;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = d_type;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d",  (uint8_t *)&buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          double v26 = __p;
          if (cap < 0) {
            double v26 = (void **)__p[0];
          }
          int v27 = v12->d_type;
          v45[0] = 67109634;
          v45[1] = v13;
          __int16 v46 = 2080;
          uint64_t v47 = v26;
          __int16 v48 = 1024;
          int v49 = v27;
          LODWORD(v40) = 24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d",  v45,  v40,  (_DWORD)v41);
          uint64_t v29 = (std::string *)v28;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)",  "%s\n",  v28);
          if (v29 != &buf) {
            free(v29);
          }
        }

        if (v12->d_type == 8)
        {
          uint64_t v13 = (v13 + 1);
          if (sub_100C2BA70((uint64_t)__dst, (const void **)(a3 + 32)))
          {
            if (cap >= 0) {
              v25 = __p;
            }
            else {
              v25 = (void **)__p[0];
            }
            char v14 = (*(uint64_t (**)(uint64_t, void **, uint64_t, void))(a4 + 16))( a4,  v25,  v13,  *(unsigned __int8 *)(a3 + 178));
          }
        }

        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v51) < 0) {
          operator delete(*(void **)__dst);
        }
        int v12 = readdir(v10);
      }

      while (v12);
    }

    else
    {
      char v14 = 1;
    }

    closedir(v10);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v30 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe",  (uint8_t *)&buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = a2;
      *(_WORD *)&__dst[12] = 2082;
      *(void *)&__dst[14] = v9;
      LODWORD(v40) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe",  __dst,  v40);
      v39 = (std::string *)v38;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)",  "%s\n",  v38);
      if (v39 != &buf) {
        free(v39);
      }
    }

    char v14 = 0;
  }

  return v14 & 1;
}

void sub_100C2B6D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100C2B724(uint64_t *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 201))
  {
    unsigned int v2 = result;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100C2B7B4;
    v3[3] = &unk_101840280;
    v3[4] = v1;
    v3[5] = result[5];
    sub_100C217CC(v1, (uint64_t)"listAvailableFilesAllTypes", (uint64_t)v3);
    *(_BYTE *)(v1 + 201) = 1;
    return sub_100C26670(v1, *((double *)v2 + 5));
  }

  return result;
}

void sub_100C2B7B4(uint64_t a1, uint64_t a2)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  v3 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = sub_100DD8CC8(*(_DWORD *)(a2 + 4));
    *(_DWORD *)std::string buf = 136446466;
    char v14 = v4;
    __int16 v15 = 2050;
    uint64_t v16 = sub_100019240(a2 + 184);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "@TileEvent, %{public}s, indexed, %{public}lu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v5 = qword_101934858;
    double v6 = sub_100DD8CC8(*(_DWORD *)(a2 + 4));
    int v9 = 136446466;
    __int16 v10 = v6;
    __int16 v11 = 2050;
    uint64_t v12 = sub_100019240(a2 + 184);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v5,  1LL,  "@TileEvent, %{public}s, indexed, %{public}lu",  &v9,  22);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

uint64_t sub_100C2B9B8@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = sub_1000392EC((uint64_t)a3, v6 + v7);
  if (v6)
  {
    else {
      int v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }

  __int16 v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

BOOL sub_100C2BA70(uint64_t a1, const void **a2)
{
  unsigned __int16 v4 = sub_100C34BD0(a1);
  if (v4 < 0x100u) {
    return v4 != 0;
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = &v15;
  sub_1000392EC((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    size_t v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    else {
      uint64_t v8 = *a2;
    }
    memmove(v7, v8, v6);
  }

  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    __int16 v10 = (const std::string::value_type *)a1;
  }
  else {
    __int16 v10 = *(const std::string::value_type **)a1;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a1 + 8);
  }
  uint64_t v12 = std::string::append(&v15, v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    char v14 = __p;
  }
  else {
    char v14 = (void **)__p[0];
  }
  sub_100296964((const char *)v14);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100C2BB90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C2BBC0(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_10126699C();
    __break(1u);
LABEL_34:
    dispatch_once(&qword_101934850, &stru_101879158);
    goto LABEL_12;
  }

  uint64_t v5 = a4;
  size_t v6 = a3;
  unsigned int v7 = a2;
  uint64_t v11 = sub_100C29628(a1, a2);
  sub_100DD9668(v7, a1 + 472, &v31);
  if (v6[23] >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = *(char **)v6;
  }
  if (v5[23] >= 0) {
    __int128 v13 = v5;
  }
  else {
    __int128 v13 = *(std::string::value_type **)v5;
  }
  if ((sub_100C124C8(v31, v12, v13, v7, 1, a5) & 1) != 0)
  {
    *(_OWORD *)std::string buf = *((_OWORD *)v31 + 3);
    *(void *)&buf[16] = v31[8];
    if (*((char *)v31 + 95) < 0)
    {
      sub_1010DD48C(&__p, (void *)v31[9], v31[10]);
    }

    else
    {
      __int128 __p = *(_OWORD *)(v31 + 9);
      uint64_t v40 = v31[11];
    }

    std::string::size_type v19 = sub_100603294((uint64_t **)(v11 + 184), (unsigned int *)buf);
    __int16 v20 = v31;
    uint64_t v31 = 0LL;
    uint64_t v21 = *v19;
    *std::string::size_type v19 = (uint64_t)v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    uint64_t v22 = *(void *)(v11 + 304);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 32LL))(v22);
    }
    sub_1006025CC(v11 + 184, (unsigned int *)buf);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v18 = 1LL;
    goto LABEL_30;
  }

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934850 != -1) {
    goto LABEL_34;
  }
LABEL_12:
  char v14 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    std::string v15 = sub_100DD8CC8(v7);
    if (v6[23] >= 0) {
      uint64_t v16 = v6;
    }
    else {
      uint64_t v16 = *(char **)v6;
    }
    if (v5[23] >= 0) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = *(std::string::value_type **)v5;
    }
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v16;
    *(_WORD *)&buf[22] = 2082;
    *(void *)&__int128 __p = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    uint64_t v25 = qword_101934858;
    double v26 = sub_100DD8CC8(v7);
    if (v6[23] >= 0) {
      int v27 = v6;
    }
    else {
      int v27 = *(char **)v6;
    }
    if (v5[23] >= 0) {
      BOOL v28 = v5;
    }
    else {
      BOOL v28 = *(std::string::value_type **)v5;
    }
    int v32 = 136446722;
    uint64_t v33 = v26;
    __int16 v34 = 2082;
    v35 = v27;
    __int16 v36 = 2082;
    uint64_t v37 = v28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  0LL,  "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe",  &v32,  32);
    uint64_t v30 = (char *)v29;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<BOOL, CLTileFile *> CLTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::stri ng &, const std::string &, CFAbsoluteTime)",  "%s\n",  v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  uint64_t v18 = 0LL;
LABEL_30:
  v23 = v31;
  uint64_t v31 = 0LL;
  if (v23) {
    (*(void (**)(uint64_t *))(*v23 + 8))(v23);
  }
  return v18;
}

void sub_100C2BF44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8LL))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C2BF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  __int128 v61 = *(_OWORD *)(a2 + 48);
  uint64_t v62 = *(void *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1010DD48C(&v63, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }

  else
  {
    __int128 v63 = *(_OWORD *)(a2 + 72);
    uint64_t v64 = *(void *)(a2 + 88);
  }

  double v10 = *(double *)(a1 + 324);
  double v11 = *(double *)(a3 + 136);
  BOOL v12 = sub_100C148B0((double *)a2, a1 + 248, 30000.0);
  if (!*(_BYTE *)(a3 + 178))
  {
    int v14 = sub_100C11C74(a2);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    std::string v15 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(__p, a2);
      uint64_t v16 = v81 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v66 = 1024;
      LODWORD(v67) = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d",  buf,  0x12u);
      if (SHIBYTE(v81) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_58;
    }
    bzero(__p, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v17 = qword_101934838;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(buf, a2);
    if (v68 >= 0) {
      uint64_t v18 = buf;
    }
    else {
      uint64_t v18 = *(_BYTE **)buf;
    }
    int v74 = 136315394;
    uint64_t v75 = v18;
    __int16 v76 = 1024;
    LODWORD(v77) = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v17,  2LL,  "TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d",  (const char *)&v74,  18);
    __int16 v20 = v19;
    if (SHIBYTE(v68) < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)",  "%s\n",  v20);
    if (v20 == __p) {
      goto LABEL_58;
    }
LABEL_25:
    free(v20);
    goto LABEL_58;
  }

  if (!*(_BYTE *)(a1 + 200)) {
    goto LABEL_56;
  }
  if (*(_BYTE *)(a1 + 440))
  {
    BOOL v13 = 1;
LABEL_57:
    sub_100C145F0(a2, v13);
    goto LABEL_58;
  }

  if (fabs(a5 - v10 + 60.0) >= v11 || !v12)
  {
LABEL_56:
    BOOL v13 = *(unsigned __int8 *)(a1 + 200) != 0;
    goto LABEL_57;
  }

  char v22 = sub_100C11C74(a2);
  uint64_t v23 = a3 + 184;
  sub_100602F80(v23, (unsigned int *)&v61);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  uint64_t v24 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(__p, a2);
    int v25 = SHIBYTE(v81);
    double v26 = *(_BYTE **)__p;
    uint64_t v27 = sub_100603208(v23);
    BOOL v28 = __p;
    if (v25 < 0) {
      BOOL v28 = v26;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v28;
    __int16 v66 = 2048;
    double v67 = *(double *)&v27;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu",  buf,  0x16u);
    if (SHIBYTE(v81) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v46 = qword_101934838;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(buf, a2);
    int v47 = SHIBYTE(v68);
    __int16 v48 = *(_BYTE **)buf;
    uint64_t v49 = sub_100603208(v23);
    uint64_t v50 = buf;
    if (v47 < 0) {
      uint64_t v50 = v48;
    }
    int v74 = 136315394;
    uint64_t v75 = v50;
    __int16 v76 = 2048;
    uint64_t v77 = v49;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v46,  2LL,  "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu",  (const char *)&v74,  22);
    uint64_t v52 = v51;
    if (SHIBYTE(v68) < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)",  "%s\n",  v52);
    if (v52 != __p) {
      free(v52);
    }
  }

  if ((v22 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v29 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(__p, a2);
      int v30 = SHIBYTE(v81);
      uint64_t v31 = *(_BYTE **)__p;
      uint64_t v32 = sub_100603208(v23);
      uint64_t v33 = __p;
      if (v30 < 0) {
        uint64_t v33 = v31;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v33;
      __int16 v66 = 2048;
      double v67 = *(double *)&v32;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu",  buf,  0x16u);
      if (SHIBYTE(v81) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v53 = qword_101934838;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a2 + 16LL))(buf, a2);
      int v54 = SHIBYTE(v68);
      v55 = *(_BYTE **)buf;
      uint64_t v56 = sub_100603208(v23);
      uint64_t v57 = buf;
      if (v54 < 0) {
        uint64_t v57 = v55;
      }
      int v74 = 136315394;
      uint64_t v75 = v57;
      __int16 v76 = 2048;
      uint64_t v77 = v56;
      LODWORD(v60) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v53,  2LL,  "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu",  (const char *)&v74,  v60);
      int v59 = v58;
      if (SHIBYTE(v68) < 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)",  "%s\n",  v59);
      if (v59 != __p) {
        free(v59);
      }
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  __int16 v34 = (unsigned int *)(a2 + 48);
  v35 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v36 = sub_100DD8CC8(*v34);
    double v37 = sub_1008ADB4C((uint64_t)&v61);
    double v38 = sub_1008ADB70((uint64_t)&v61);
    uint64_t v39 = sub_100019240(v23);
    *(_DWORD *)__int128 __p = 136447235;
    *(void *)&__p[4] = v36;
    __int16 v79 = 2049;
    double v80 = v37;
    __int16 v81 = 2049;
    double v82 = v38;
    __int16 v83 = 2082;
    uint64_t v84 = a4;
    __int16 v85 = 2050;
    uint64_t v86 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, ",  __p,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v40 = qword_101934858;
    double v41 = sub_100DD8CC8(*v34);
    double v42 = sub_1008ADB4C((uint64_t)&v61);
    double v43 = sub_1008ADB70((uint64_t)&v61);
    uint64_t v44 = sub_100019240(v23);
    *(_DWORD *)std::string buf = 136447235;
    *(void *)&uint8_t buf[4] = v41;
    __int16 v66 = 2049;
    double v67 = v42;
    __int16 v68 = 2049;
    double v69 = v43;
    __int16 v70 = 2082;
    uint64_t v71 = a4;
    __int16 v72 = 2050;
    uint64_t v73 = v44;
    LODWORD(v60) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v40,  0LL,  "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, ",  buf,  v60,  v61,  v62);
    __int16 v20 = (char *)v45;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)",  "%s\n",  v45);
    if (v20 != __p) {
      goto LABEL_25;
    }
  }

void sub_100C2C8A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C2C930(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100C2C988;
  v5[3] = &unk_101830538;
  v5[4] = v2;
  v5[5] = a2;
  return [v3 async:v5];
}

void sub_100C2C988(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (*(double (**)(void))(**(void **)(v2 + 464) + 56LL))(*(void *)(v2 + 464));
  uint64_t v30 = v2;
  int v4 = *(int *)(v2 + 424) > 1 || *(_BYTE *)(v2 + 496) != 0;
  uint64_t v5 = *(void *)(a1 + 40) + 184LL;
  size_t v6 = (void *)sub_1005B46E8(v5);
  uint64_t v7 = sub_100056FA8(v5);
  if (v6 != (void *)v7)
  {
    uint64_t v8 = (void *)v7;
    char v29 = 0;
    do
    {
      int v9 = (std::string *)v6[10];
      BOOL v10 = sub_100C0CD30((uint64_t)v9, v4, v3, *(float *)(*(void *)(a1 + 40) + 128LL));
      BOOL v11 = sub_100C0D05C((uint64_t)v9, v4, *(float *)(*(void *)(a1 + 40) + 128LL), v3);
      BOOL v12 = sub_100603554(v30 + 112, (uint64_t)&v9[2]);
      if (sub_100C0CCC8((uint64_t)v9))
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        BOOL v13 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void ***__return_ptr, std::string *))(v9->__r_.__value_.__r.__words[0] + 16))( &v39,  v9);
          int v14 = (void **)&v39;
          if (SHIBYTE(v43) < 0) {
            int v14 = v39;
          }
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v10;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v11;
          HIWORD(buf) = 2080;
          __int16 v36 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s",  (uint8_t *)&buf,  0x18u);
          if (SHIBYTE(v43) < 0) {
            operator delete(v39);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v23 = qword_101934838;
          (*(void (**)(void **__return_ptr, std::string *))(v9->__r_.__value_.__r.__words[0] + 16))(__p, v9);
          uint64_t v24 = __p;
          if (v34 < 0) {
            uint64_t v24 = (void **)__p[0];
          }
          LODWORD(v39) = 67109634;
          HIDWORD(v39) = v10;
          __int16 v40 = 1024;
          BOOL v41 = v11;
          __int16 v42 = 2080;
          double v43 = v24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v23,  2LL,  "TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s",  &v39,  24,  v28);
          double v26 = v25;
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::refreshTilesDataIfNeeded()_block_invoke",  "%s\n",  v26);
        }

        if ((void *)(v30 + 120) == v12 && v10)
        {
          sub_100DD9668(*(_DWORD *)(*(void *)(a1 + 40) + 4LL), v30 + 472, &v39);
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          LOWORD(buf) = 0;
          BYTE2(buf) = 0;
          *((void *)&buf + 1) = 0xBFF0000000000000LL;
          CFAbsoluteTime v37 = Current;
          __int16 v38 = 1;
          LODWORD(v36) = 0;
          sub_100C0D048((uint64_t)v39, (uint64_t)v9);
          uint64_t v17 = v39;
          uint64_t v39 = 0LL;
          uint64_t v32 = (uint64_t)v17;
          sub_100C2CE58(v30, &v32, v9 + 2, &buf);
          uint64_t v18 = v32;
          uint64_t v32 = 0LL;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
          }
          std::string::size_type v19 = v39;
          uint64_t v39 = 0LL;
          if (v19) {
            (*((void (**)(void **))*v19 + 1))(v19);
          }
          char v29 = 1;
        }
      }

      __int16 v20 = (void *)v6[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          __int16 v20 = (void *)*v20;
        }

        while (v20);
      }

      else
      {
        do
        {
          uint64_t v21 = (void *)v6[2];
          BOOL v22 = *v21 == (void)v6;
          size_t v6 = v21;
        }

        while (!v22);
      }

      size_t v6 = v21;
    }

    while (v21 != v8);
    if ((v29 & 1) != 0)
    {
      uint64_t v27 = *(void **)(v30 + 40);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      v31[2] = sub_100C2D1F8;
      v31[3] = &unk_101830538;
      v31[4] = v30;
      *(double *)&v31[5] = v3;
      [v27 async:v31];
    }
  }

void sub_100C2CE10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a25) {
    (*(void (**)(uint64_t))(*(void *)a25 + 8LL))(a25);
  }
  uint64_t v27 = *(void *)(v25 - 144);
  *(void *)(v25 - 144) = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C2CE58(uint64_t a1, uint64_t *a2, std::string *a3, __int128 *a4)
{
  std::string v24 = *a3;
  if ((char)a3[1].__r_.__value_.__s.__size_ < 0)
  {
    sub_1010DD48C(&v25, a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_);
  }

  else
  {
    __int128 v25 = *(_OWORD *)&a3[1].__r_.__value_.__l.__data_;
    std::string::size_type cap = a3[1].__r_.__value_.__l.__cap_;
  }

  sub_100C30314(*a2, &v24);
  uint64_t v7 = *a2;
  __int128 v8 = *a4;
  __int128 v9 = a4[1];
  *(_WORD *)(v7 + 144) = *((_WORD *)a4 + 16);
  *(_OWORD *)(v7 + 112) = v8;
  *(_OWORD *)(v7 + 128) = v9;
  sub_100C0F25C(*a2, (uint64_t)&unk_10199AE08);
  BOOL v10 = (uint64_t **)(a1 + 112);
  if ((void *)(a1 + 120) != sub_100603554(a1 + 112, (uint64_t)&v24))
  {
    sub_101266B04(qword_101934830 == -1);
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm",  2161,  "addToDownloadList");
    __break(1u);
    goto LABEL_19;
  }

  if (qword_101934830 != -1) {
LABEL_19:
  }
    dispatch_once(&qword_101934830, &stru_101879178);
  BOOL v11 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 16LL))(__p);
    BOOL v12 = v36 >= 0 ? __p : (void **)__p[0];
    uint64_t v13 = *(void *)(a1 + 128);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v28 = 2048;
    uint64_t v29 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu",  buf,  0x16u);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v18 = qword_101934838;
    (*(void (**)(_BYTE *__return_ptr))(*(void *)*a2 + 16LL))(buf);
    if (v30 >= 0) {
      std::string::size_type v19 = buf;
    }
    else {
      std::string::size_type v19 = *(_BYTE **)buf;
    }
    uint64_t v20 = *(void *)(a1 + 128);
    int v31 = 136315394;
    uint64_t v32 = v19;
    __int16 v33 = 2048;
    uint64_t v34 = v20;
    LODWORD(v23) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v18,  2LL,  "TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu",  (const char *)&v31,  v23);
    BOOL v22 = v21;
    if (v30 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)",  "%s\n",  v22);
  }

  __p[0] = &v24;
  int v14 = sub_100603C2C(v10, (uint64_t)&v24, (uint64_t)&unk_1012CF090, (_OWORD **)__p);
  uint64_t v15 = *a2;
  *a2 = 0LL;
  uint64_t v16 = v14[10];
  v14[10] = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v25);
  }
  return 1LL;
}

void sub_100C2D1C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C2D1F8(uint64_t a1)
{
}

uint64_t sub_100C2D208(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(void **)(a1 + 112);
  double v3 = (void *)(a1 + 120);
  if (v2 == (void *)(a1 + 120)) {
    return 0LL;
  }
  LODWORD(v4) = 0;
  a2.n128_u64[0] = 136315906LL;
  __n128 v17 = a2;
  do
  {
    uint64_t v5 = sub_10096B584(v2[10]);
    BOOL v6 = sub_100C0DB30(v2[10]);
    uint64_t v4 = (v4 + v6);
    if (v6)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v7 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(void *)v2[10] + 16LL))(__p);
        __int128 v8 = __p;
        if (v24 < 0) {
          __int128 v8 = *(_BYTE **)__p;
        }
        *(_DWORD *)__int128 buf = v17.n128_u32[0];
        __int16 v28 = v8;
        __int16 v29 = 1024;
        int v30 = 1;
        __int16 v31 = 1024;
        int v32 = v4;
        __int16 v33 = 2048;
        uint64_t v34 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p",  buf,  0x22u);
        if (SHIBYTE(v24) < 0) {
          operator delete(*(void **)__p);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v12 = qword_101934838;
        (*(void (**)(void **__return_ptr))(*(void *)v2[10] + 16LL))(v18);
        uint64_t v13 = v18;
        if (v19 < 0) {
          uint64_t v13 = (void **)v18[0];
        }
        *(_DWORD *)__int128 __p = v17.n128_u32[0];
        *(void *)&__p[4] = v13;
        __int16 v21 = 1024;
        int v22 = 1;
        __int16 v23 = 1024;
        int v24 = v4;
        __int16 v25 = 2048;
        uint64_t v26 = v5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p",  __p,  34,  v17.n128_u32[0],  (const void *)v17.n128_u64[1]);
        uint64_t v15 = v14;
        if (v19 < 0) {
          operator delete(v18[0]);
        }
        sub_10029211C("Generic", 1LL, 0, 2LL, "unsigned int CLTilesManager::getNumOfActiveDownloads()", "%s\n", v15);
      }
    }

    __int128 v9 = (void *)v2[1];
    if (v9)
    {
      do
      {
        BOOL v10 = v9;
        __int128 v9 = (void *)*v9;
      }

      while (v9);
    }

    else
    {
      do
      {
        BOOL v10 = (void *)v2[2];
        BOOL v11 = *v10 == (void)v2;
        uint64_t v2 = v10;
      }

      while (!v11);
    }

    uint64_t v2 = v10;
  }

  while (v10 != v3);
  return v4;
}

uint64_t sub_100C2D4F8(_DWORD *a1, int a2)
{
  a1[12] += a2;
  return (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24LL))(a1);
}

void *sub_100C2D544(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 112);
  double v3 = (void *)(a1 + 120);
  if (v2 != (void *)(a1 + 120))
  {
    while (sub_10096B584(v2[10]) != a2)
    {
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          BOOL v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }

        while (!v7);
      }

      uint64_t v2 = v6;
      if (v6 == v3) {
        return v3;
      }
    }
  }

  return v2;
}

id *sub_100C2D5C8(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = sub_100C2D544(a1, a2);
  if ((void *)(a1 + 120) == v6 || (BOOL v7 = (unsigned int *)v6[10]) == 0LL)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "TileMgr, where did this download request come from?, download, %{public}p, #CloneMe",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      *(_DWORD *)__int128 __p = 134349056;
      *(void *)&__p[4] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, where did this download request come from?, download, %{public}p, #CloneMe",  __p,  12);
      int v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    uint64_t v8 = *(void *)(sub_10096B584(v6[10]) + 96);
    double v9 = (*(double (**)(void))(**(void **)(a1 + 464) + 56LL))(*(void *)(a1 + 464));
    double v10 = v9;
    uint64_t v11 = a1 + 472;
    if ((a3 & 1) != 0 || v8 == -1100) {
      sub_100BD8374(v11);
    }
    else {
      sub_100BD83A0(v11, v9);
    }
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v15 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v7 + 16LL))(__p, v7);
      int v16 = v55[9];
      __n128 v17 = *(_BYTE **)__p;
      uint64_t v18 = *(void *)(sub_10096B584((uint64_t)v7) + 96);
      int v19 = *(_DWORD *)(a1 + 424);
      uint64_t v20 = __p;
      if (v16 < 0) {
        uint64_t v20 = v17;
      }
      int v21 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)__int128 buf = 136316674;
      *(void *)&uint8_t buf[4] = v20;
      __int16 v61 = 1024;
      *(_DWORD *)uint64_t v62 = a3;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = v18;
      LOWORD(v63) = 1024;
      *(_DWORD *)((char *)&v63 + 2) = v8 == -1100;
      HIWORD(v63) = 1024;
      *(_DWORD *)uint64_t v64 = v19;
      *(_WORD *)&v64[4] = 1024;
      *(_DWORD *)double v65 = v21;
      *(_WORD *)&v65[4] = 1024;
      int v66 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, rea chability, %d, locked, %d, fileSize, %d",  buf,  0x30u);
      if ((v55[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v30 = qword_101934838;
      (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)v7 + 16LL))(&v48, v7);
      int v31 = v51;
      int v32 = (void **)v48;
      uint64_t v33 = *(void *)(sub_10096B584((uint64_t)v7) + 96);
      int v34 = *(_DWORD *)(a1 + 424);
      v35 = &v48;
      if (v31 < 0) {
        v35 = v32;
      }
      int v36 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)__int128 __p = 136316674;
      *(void *)&__p[4] = v35;
      __int16 v54 = 1024;
      *(_DWORD *)v55 = a3;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v33;
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = v8 == -1100;
      HIWORD(v56) = 1024;
      *(_DWORD *)uint64_t v57 = v34;
      *(_WORD *)&v57[4] = 1024;
      *(_DWORD *)v58 = v36;
      *(_WORD *)&v58[4] = 1024;
      int v59 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  2LL,  "TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, rea chability, %d, locked, %d, fileSize, %d",  __p,  48,  v47,  (_DWORD)v48,  v49,  v50,  LODWORD(v52[0]));
      __int16 v38 = v37;
      if (v51 < 0) {
        operator delete(v48);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)",  "%s\n",  v38);
      if (v38 != buf) {
        free(v38);
      }
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    int v22 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v23 = sub_100DD8CC8(v7[12]);
      double v24 = sub_1008ADB4C((uint64_t)(v7 + 12));
      double v25 = sub_1008ADB70((uint64_t)(v7 + 12));
      uint64_t v26 = *(void *)(sub_10096B584((uint64_t)v7) + 96);
      *(_DWORD *)__int128 buf = 136447235;
      *(void *)&uint8_t buf[4] = v23;
      __int16 v61 = 2049;
      *(double *)uint64_t v62 = v24;
      *(_WORD *)&v62[8] = 2049;
      double v63 = v25;
      *(_WORD *)uint64_t v64 = 1026;
      *(_DWORD *)&v64[2] = a3;
      *(_WORD *)double v65 = 1026;
      *(_DWORD *)&v65[2] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d",  buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      uint64_t v39 = qword_101934858;
      __int16 v40 = sub_100DD8CC8(v7[12]);
      double v41 = sub_1008ADB4C((uint64_t)(v7 + 12));
      double v42 = sub_1008ADB70((uint64_t)(v7 + 12));
      uint64_t v43 = *(void *)(sub_10096B584((uint64_t)v7) + 96);
      *(_DWORD *)__int128 __p = 136447235;
      *(void *)&__p[4] = v40;
      __int16 v54 = 2049;
      *(double *)v55 = v41;
      *(_WORD *)&v55[8] = 2049;
      double v56 = v42;
      *(_WORD *)uint64_t v57 = 1026;
      *(_DWORD *)&v57[2] = a3;
      *(_WORD *)v58 = 1026;
      *(_DWORD *)&v58[2] = v43;
      LODWORD(v46) = 44;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  0LL,  "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d",  __p,  v46);
      uint64_t v45 = (char *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    if (a3)
    {
      uint64_t v27 = sub_100C29628(a1, v7[12]);
      uint64_t v28 = v27 + 232;
      (*(void (**)(uint64_t))(*(void *)(v27 + 232) + 16LL))(v27 + 232);
      (*(void (**)(uint64_t))(*(void *)v28 + 24LL))(v28);
      (*(void (**)(uint64_t))(*(void *)v28 + 16LL))(v28);
      ++*(_DWORD *)(v27 + 284);
      (*(void (**)(uint64_t))(*(void *)(v27 + 232) + 24LL))(v27 + 232);
      sub_1010DDBC0(buf, "tileDownloadCompleted");
      sub_100987188(v27 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 424));
      if ((v62[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_100C2DDB8(a1, a2, a3, v10);
  }

  return sub_1001BA1BC(v52);
}

void sub_100C2DD1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, id a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
}

void sub_100C2DDB8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v9 = sub_100C2D544(a1, a2);
  if ((uint64_t *)(a1 + 120) == v9)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v15 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      *(_DWORD *)__int128 __p = 134349056;
      *(void *)&__p[4] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe",  __p,  12);
      __n128 v17 = (char *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

  else
  {
    double v10 = v9;
    uint64_t v11 = v9 + 4;
    uint64_t v12 = v9[10];
    if (v12)
    {
      v126 = (char *)(a1 + 112);
      uint64_t v13 = (unsigned int *)(v12 + 48);
      uint64_t v128 = sub_100C29628(a1, *(_DWORD *)(v12 + 48));
      int v124 = *(_DWORD *)(a1 + 424);
      if (*(void *)(a1 + 160) == a2)
      {
        uint64_t v14 = a1 + 136;
      }

      else
      {
        if (*(void *)(a1 + 192) != a2)
        {
          sub_101266CAC();
          __break(1u);
          goto LABEL_196;
        }

        uint64_t v14 = a1 + 168;
      }

      uint64_t v127 = v14;
      uint64_t v4 = *(void *)(sub_10096B584(v12) + 96);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v125 = (uint64_t)v11;
      int v21 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v12 + 16LL))(__p, v12);
        int v22 = __p[23];
        __int16 v23 = *(_BYTE **)__p;
        uint64_t v24 = *(void *)(sub_10096B584(v12) + 96);
        double v25 = __p;
        int v26 = *(_DWORD *)(a1 + 424);
        if (v22 < 0) {
          double v25 = v23;
        }
        *(_DWORD *)__int128 buf = 136316162;
        *(void *)&uint8_t buf[4] = v25;
        __int16 v150 = 1024;
        *(_DWORD *)v151 = a3;
        *(_WORD *)&v151[4] = 1024;
        *(_DWORD *)&v151[6] = v24;
        *(_WORD *)v152 = 1024;
        *(_DWORD *)&v152[2] = v4 == -1100;
        *(_WORD *)&v152[6] = 1024;
        *(_DWORD *)&v152[8] = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d , tileDoesNotExist, %d, reachability, %d",  buf,  0x24u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (!sub_1002921D0(115, 2))
      {
LABEL_30:
        *(_OWORD *)v132 = *(_OWORD *)v13;
        uint64_t v133 = *(void *)(v12 + 64);
        if (*(char *)(v12 + 95) < 0)
        {
          sub_1010DD48C(&v134, *(void **)(v12 + 72), *(void *)(v12 + 80));
        }

        else
        {
          __int128 v134 = *(_OWORD *)(v12 + 72);
          uint64_t v135 = *(void *)(v12 + 88);
        }

        p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
        if (sub_1008AD1E0((unsigned int *)v132))
        {
          if (qword_101934850 != -1)
          {
            dispatch_once(&qword_101934850, &stru_101879158);
            p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
          }

          uint64_t v28 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v29 = sub_100DD8CC8(*v13);
            double v30 = sub_1008ADB4C((uint64_t)v132);
            double v31 = sub_1008ADB70((uint64_t)v132);
            uint64_t v32 = sub_100019240(v128 + 184);
            *(_DWORD *)__int128 buf = 136446979;
            *(void *)&uint8_t buf[4] = v29;
            __int16 v150 = 2049;
            *(double *)v151 = v30;
            *(_WORD *)&v151[8] = 2049;
            *(double *)v152 = v31;
            *(_WORD *)&v152[8] = 2050;
            *(void *)&v152[10] = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101879158);
            }
            uint64_t v33 = qword_101934858;
            int v34 = sub_100DD8CC8(*v13);
            double v35 = sub_1008ADB4C((uint64_t)v132);
            double v36 = sub_1008ADB70((uint64_t)v132);
            uint64_t v37 = sub_100019240(v128 + 184);
            *(_DWORD *)__int128 __p = 136446979;
            *(void *)&__p[4] = v34;
            *(_WORD *)&_BYTE __p[12] = 2049;
            *(double *)&__p[14] = v35;
            *(_WORD *)&__p[22] = 2049;
            *(double *)v146 = v36;
            *(_WORD *)&v146[8] = 2050;
            *(void *)&v146[10] = v37;
            LODWORD(v122) = 42;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  0LL,  "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu",  __p,  v122);
            uint64_t v39 = (char *)v38;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v38);
            if (v39 != buf) {
              free(v39);
            }
            p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
          }
        }

        else
        {
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101879158);
          }
          __int16 v40 = (os_log_s *)qword_101934858;
          if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934850 != -1) {
              dispatch_once(&qword_101934850, &stru_101879158);
            }
            *(_WORD *)__int128 __p = 0;
            LODWORD(v122) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@TileError, DecompressionID",  __p,  v122);
            v109 = (char *)v108;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v108);
            if (v109 != buf) {
              free(v109);
            }
          }
        }

        BOOL v41 = sub_100C102DC(v12, a3, v4 == -1100, a4);
        uint64_t v42 = v128;
        char v131 = v41;
        (*(void (**)(uint64_t))(*(void *)a2 + 24LL))(a2);
        *(_BYTE *)(v127 + 8) = 0;
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v43 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v12 + 16LL))(__p, v12);
          uint64_t v44 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          int v45 = *(_DWORD *)(a1 + 424);
          int v46 = *(unsigned __int8 *)(a1 + 200);
          double v47 = a4 - *(double *)(v127 + 16);
          uint64_t v48 = *(void *)v127;
          int v49 = *(unsigned __int8 *)(a1 + 144);
          int v50 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)__int128 buf = 136316674;
          *(void *)&uint8_t buf[4] = v44;
          __int16 v150 = 1024;
          *(_DWORD *)v151 = v45;
          *(_WORD *)&v151[4] = 1024;
          *(_DWORD *)&v151[6] = v46;
          *(_WORD *)v152 = 2048;
          *(double *)&v152[2] = v47;
          *(_WORD *)&v152[10] = 2080;
          *(void *)&v152[12] = v48;
          __int16 v153 = 1024;
          int v154 = v49;
          __int16 v155 = 1024;
          int v156 = v50;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloa dState, %s, progress, s, %d, l, %d",  buf,  0x38u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v89 = qword_101934838;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v12 + 16LL))(v141, v12);
          if (v144 >= 0) {
            v90 = v141;
          }
          else {
            v90 = *(_BYTE **)v141;
          }
          int v91 = *(_DWORD *)(a1 + 424);
          int v92 = *(unsigned __int8 *)(a1 + 200);
          double v93 = a4 - *(double *)(v127 + 16);
          uint64_t v94 = *(void *)v127;
          int v95 = *(unsigned __int8 *)(a1 + 144);
          int v96 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)__int128 __p = 136316674;
          *(void *)&__p[4] = v90;
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = v91;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = v92;
          *(_WORD *)v146 = 2048;
          *(double *)&v146[2] = v93;
          *(_WORD *)&v146[10] = 2080;
          *(void *)&v146[12] = v94;
          *(_WORD *)&v146[20] = 1024;
          *(_DWORD *)&v146[22] = v95;
          __int16 v147 = 1024;
          int v148 = v96;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v89,  2LL,  "TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloa dState, %s, progress, s, %d, l, %d",  __p,  56,  v123,  *(double *)&v125,  v126,  v127,  v128);
          v98 = v97;
          if (v144 < 0) {
            operator delete(*(void **)v141);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v98);
          if (v98 != buf) {
            free(v98);
          }
        }

        sub_100C2F5DC(a1, v131, (_DWORD *)v12, v42);
        if (sub_100E575B0())
        {
          sub_1002A5370(buf);
          char v51 = (char *)(v12 + 8);
          sub_1002ACA84((uint64_t)buf, "gotTile", v51);
          sub_1002AB3FC((uint64_t)buf, "success", &v131);
          sub_1002AB3FC((uint64_t)buf, "protection", (_BYTE *)(a1 + 200));
          sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
          sub_1002A5590(buf);
        }

        if (!v131)
        {
          uint64_t v53 = *(void **)(a1 + 40);
          v130[0] = _NSConcreteStackBlock;
          v130[1] = 3221225472LL;
          v130[2] = sub_100C2FA08;
          v130[3] = &unk_101830538;
          v130[4] = a1;
          *(double *)&v130[5] = a4;
          [v53 async:v130];
LABEL_128:
          if (SHIBYTE(v135) < 0) {
            operator delete((void *)v134);
          }
          return;
        }

        uint64_t v52 = v10[10];
        v10[10] = 0LL;
        *(_OWORD *)__int128 __p = *(_OWORD *)(v52 + 48);
        *(void *)&__p[16] = *(void *)(v52 + 64);
        if (*(char *)(v52 + 95) < 0)
        {
          sub_1010DD48C(v146, *(void **)(v52 + 72), *(void *)(v52 + 80));
        }

        else
        {
          *(_OWORD *)v146 = *(_OWORD *)(v52 + 72);
          *(void *)&v146[16] = *(void *)(v52 + 88);
        }

        __int16 v54 = p_vtable;
        sub_1000087E8((uint64_t **)v126, v10);
        sub_1006035CC(v125);
        operator delete(v10);
        v55 = (uint64_t **)(v42 + 184);
        if (!sub_10060238C(v42 + 184, (unsigned int *)__p))
        {
LABEL_112:
          double v69 = sub_100603294(v55, (unsigned int *)__p);
          uint64_t v70 = *v69;
          uint64_t *v69 = v52;
          if (v70) {
            (*(void (**)(uint64_t))(*(void *)v70 + 8LL))(v70);
          }
          uint64_t v71 = sub_1006025CC((uint64_t)v55, (unsigned int *)__p);
          sub_100DD963C(v71, a4);
          uint64_t v72 = sub_1006025CC((uint64_t)v55, (unsigned int *)__p);
          sub_100C2BF9C(a1, v72, v42, (uint64_t)"download", a4);
          uint64_t v73 = sub_1006025CC((uint64_t)v55, (unsigned int *)__p);
          uint64_t v74 = *(void *)(v42 + 304);
          if (v74) {
            (*(void (**)(uint64_t))(*(void *)v74 + 32LL))(v74);
          }
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v75 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v73 + 16LL))(buf, v73);
            int v76 = v151[9];
            uint64_t v77 = *(_BYTE **)buf;
            uint64_t v78 = sub_100019240((uint64_t)v55);
            __int16 v79 = buf;
            if (v76 < 0) {
              __int16 v79 = v77;
            }
            *(_DWORD *)v141 = 136315394;
            *(void *)&v141[4] = v79;
            __int16 v142 = 2048;
            uint64_t v143 = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu",  v141,  0x16u);
            if ((v151[9] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101879178);
            }
            uint64_t v99 = qword_101934838;
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v73 + 16LL))(v141, v73);
            int v100 = v144;
            v101 = *(_BYTE **)v141;
            uint64_t v102 = sub_100019240((uint64_t)v55);
            v103 = v141;
            if (v100 < 0) {
              v103 = v101;
            }
            int v137 = 136315394;
            v138 = v103;
            __int16 v139 = 2048;
            uint64_t v140 = v102;
            LODWORD(v122) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v99,  2LL,  "TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu",  (const char *)&v137,  v122);
            v105 = v104;
            if (v144 < 0) {
              operator delete(*(void **)v141);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v105);
            if (v105 != buf) {
              free(v105);
            }
            uint64_t v42 = v128;
          }

          ++*(_DWORD *)(v42 + 288);
          if (v124 == 1) {
            ++*(_DWORD *)(v42 + 292);
          }
          sub_100C26670(a1, a4);
          double v80 = *(void **)(a1 + 40);
          v129[0] = _NSConcreteStackBlock;
          v129[1] = 3221225472LL;
          v129[2] = sub_100C2FA18;
          v129[3] = &unk_101830538;
          v129[4] = a1;
          *(double *)&v129[5] = a4;
          [v80 async:v129];
          if ((v146[23] & 0x80000000) != 0) {
            operator delete(*(void **)v146);
          }
          goto LABEL_128;
        }

        uint64_t v56 = sub_1006025CC(v42 + 184, (unsigned int *)__p);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v57 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v56 + 16LL))(buf, v56);
          v58 = v151[9] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v141 = 136315138;
          *(void *)&v141[4] = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, replacing from, %s",  v141,  0xCu);
          if ((v151[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v110 = qword_101934838;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v56 + 16LL))(v141, v56);
          if (v144 >= 0) {
            v111 = v141;
          }
          else {
            v111 = *(_BYTE **)v141;
          }
          int v137 = 136315138;
          v138 = v111;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v110,  2LL,  "TILE: tileDecompressionCompleted, replacing from, %s",  (const char *)&v137);
          v113 = v112;
          if (v144 < 0) {
            operator delete(*(void **)v141);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v113);
          if (v113 != buf) {
            free(v113);
          }
          uint64_t v42 = v128;
        }

        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        int v59 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v52 + 16LL))(buf, v52);
          uint64_t v60 = v151[9] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v141 = 136315138;
          *(void *)&v141[4] = v60;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEBUG,  "TILE: tileDecompressionCompleted, replacing to, %s",  v141,  0xCu);
          if ((v151[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v114 = qword_101934838;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v52 + 16LL))(v141, v52);
          if (v144 >= 0) {
            v115 = v141;
          }
          else {
            v115 = *(_BYTE **)v141;
          }
          int v137 = 136315138;
          v138 = v115;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v114,  2LL,  "TILE: tileDecompressionCompleted, replacing to, %s",  (const char *)&v137);
          v117 = v116;
          if (v144 < 0) {
            operator delete(*(void **)v141);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)",  "%s\n",  v117);
          if (v117 != buf) {
            free(v117);
          }
          uint64_t v42 = v128;
        }

        uint64_t v61 = *(unsigned __int8 *)(v56 + 31);
        if ((v61 & 0x80u) == 0LL) {
          uint64_t v62 = *(unsigned __int8 *)(v56 + 31);
        }
        else {
          uint64_t v62 = *(void *)(v56 + 16);
        }
        uint64_t v63 = *(unsigned __int8 *)(v52 + 31);
        int v64 = (char)v63;
        if ((v63 & 0x80u) != 0LL) {
          uint64_t v63 = *(void *)(v52 + 16);
        }
        if (v62 != v63) {
          goto LABEL_101;
        }
        double v65 = (const void **)(v56 + 8);
        if (v64 >= 0) {
          int v66 = (unsigned __int8 *)(v52 + 8);
        }
        else {
          int v66 = *(unsigned __int8 **)(v52 + 8);
        }
        if ((v61 & 0x80) != 0)
        {
          if (memcmp(*v65, v66, *(void *)(v56 + 16)))
          {
LABEL_101:
            sub_100C0FD9C(v56);
LABEL_111:
            sub_100602D1C(v55, (unsigned int *)__p);
            goto LABEL_112;
          }
        }

        else if (*(_BYTE *)(v56 + 31))
        {
          while (*(unsigned __int8 *)v65 == *v66)
          {
            double v65 = (const void **)((char *)v65 + 1);
            ++v66;
            if (!--v61) {
              goto LABEL_102;
            }
          }

          goto LABEL_101;
        }

void sub_100C2F4A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, void *a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_100C2F5CC(uint64_t a1)
{
}

void sub_100C2F5DC(uint64_t a1, char a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t)(a3 + 12);
  int v6 = a3[12];
  memset(&v27, 0, sizeof(v27));
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)double v25 = 0u;
  v23[0] = a2;
  int v24 = v6;
  std::string::operator=((std::string *)v25, (const std::string *)(a4 + 56));
  sub_1008AE164(v7, &buf);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(std::string *)&__p[1] = buf;
  sub_100C0FCEC((uint64_t)a3, &buf);
  std::string v27 = buf;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  uint64_t v8 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(void *)a3 + 16LL))(v28, a3);
    double v9 = v32 >= 0 ? v28 : *(_BYTE **)v28;
    double v10 = SHIBYTE(__p[0]) >= 0 ? v25 : (void **)v25[0];
    uint64_t v11 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    uint64_t v12 = (v27.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v27 : (std::string *)v27.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v23[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v24;
    __int16 v40 = 2080;
    BOOL v41 = v10;
    __int16 v42 = 2080;
    uint64_t v43 = v11;
    __int16 v44 = 2080;
    int v45 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilenam e, %s, absoluteLocalFilename, %s",  (uint8_t *)&buf,  0x36u);
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)v28);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v13 = qword_101934858;
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a3 + 16LL))(v21, a3);
    if (SHIBYTE(v22) >= 0) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = (void **)v21[0];
    }
    if (SHIBYTE(__p[0]) >= 0) {
      uint64_t v15 = v25;
    }
    else {
      uint64_t v15 = (void **)v25[0];
    }
    if (SHIBYTE(__p[3]) >= 0) {
      int v16 = &__p[1];
    }
    else {
      int v16 = (void **)__p[1];
    }
    if ((v27.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __n128 v17 = &v27;
    }
    else {
      __n128 v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v28 = 136316418;
    *(void *)&v28[4] = v14;
    __int16 v29 = 1024;
    int v30 = v23[0];
    __int16 v31 = 1024;
    int v32 = v24;
    __int16 v33 = 2080;
    int v34 = v15;
    __int16 v35 = 2080;
    double v36 = v16;
    __int16 v37 = 2080;
    __int16 v38 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v13,  1LL,  "TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilenam e, %s, absoluteLocalFilename, %s",  v28,  54,  v20,  (const char *)v21[0],  (const char *)v21[1],  v22);
    int v19 = v18;
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &)",  "%s\n",  (const char *)v19);
    if (v19 != &buf) {
      free(v19);
    }
  }

  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, _BYTE *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &buf,  v23,  0LL,  0xFFFFFFFFLL,  0LL);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v25[0]);
  }
}

void sub_100C2F9DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100C2FA08(uint64_t a1)
{
}

void sub_100C2FA18(uint64_t a1)
{
}

id *sub_100C2FA28(uint64_t a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  uint64_t v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 67109120;
    int v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "TILE: _tileDownloadCompleted, success, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    int v5 = *(unsigned __int8 *)(a1 + 56);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: _tileDownloadCompleted, success, %d",  v8);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return sub_100C2D5C8(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

void sub_100C2FBE8(uint64_t a1)
{
}

uint64_t sub_100C2FBF8(uint64_t a1, _DWORD *a2, double *a3, double *a4, uint64_t a5, _BYTE *a6, _BYTE *a7)
{
  if ((*a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101266E14();
    __break(1u);
LABEL_40:
    dispatch_once(&qword_101934830, &stru_101879178);
    goto LABEL_19;
  }

  uint64_t v7 = a1;
  *a7 = 0;
  if (*(_BYTE *)(a1 + 201))
  {
    sub_1008ACE9C((uint64_t)v41, a2);
    uint64_t v14 = sub_100C29628(v7, v41[0]);
    sub_100C11F48((uint64_t)v41, -1LL, *a3, *a4, *(double *)(v14 + 152), *(double *)(v14 + 160));
    if (sub_10060238C(v14 + 184, v41))
    {
      uint64_t v15 = sub_1006025CC(v14 + 184, v41);
      *a6 = sub_100C14E3C(v15, *(_BYTE *)(v7 + 200));
      if (sub_100C14E3C(v15, *(_BYTE *)(v7 + 200)))
      {
        double v16 = (*(double (**)(void))(**(void **)(v7 + 464) + 56LL))(*(void *)(v7 + 464));
        sub_100DD963C(v15, v16);
      }

      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      __n128 v17 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(std::stringbuf::string_type *__return_ptr, uint64_t))(*(void *)v15 + 16LL))(&__p, v15);
        uint64_t v18 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &__p
            : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        int v19 = *a6;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d",  (uint8_t *)buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v33 = qword_101934838;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v15 + 16LL))(v38, v15);
        if (v39 >= 0) {
          int v34 = v38;
        }
        else {
          int v34 = *(_BYTE **)v38;
        }
        int v35 = *a6;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 1;
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  2LL,  "TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d",  (const char *)&__p,  24,  *(_DWORD *)v38);
        __int16 v37 = v36;
        if (v39 < 0) {
          operator delete(*(void **)v38);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)",  "%s\n",  (const char *)v37);
        if (v37 != buf) {
          free(v37);
        }
      }

      sub_100C0FCEC(v15, buf);
      *(std::stringbuf::string_type *)a5 = buf[0];
    }

    else
    {
      *a6 = 0;
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      int v22 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        sub_1008AD840(v41, buf);
        __int16 v23 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
            ? buf
            : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "TILE: getTileFile, tileid, %s, not available",  (uint8_t *)&__p,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v29 = qword_101934838;
        sub_1008AD840(v41, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int16 v38 = 136315138;
        *(void *)&v38[4] = p_p;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  2LL,  "TILE: getTileFile, tileid, %s, not available",  v38);
        int v32 = v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)",  "%s\n",  (const char *)v32);
        if (v32 != buf) {
          free(v32);
        }
      }

      if ((void *)(v7 + 120) == sub_100603554(v7 + 112, (uint64_t)v41)
        || (buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v41,
            int v24 = sub_100603C2C((uint64_t **)(v7 + 112), (uint64_t)v41, (uint64_t)&unk_1012CF090, buf),
            sub_100C0CCC8(v24[10])))
      {
        uint64_t v15 = 0LL;
      }

      else
      {
        uint64_t v15 = 0LL;
        *a7 = 1;
      }
    }

    if (v43 < 0) {
      operator delete(v42);
    }
    return v15;
  }

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934830 != -1) {
    goto LABEL_40;
  }
LABEL_19:
  int v20 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *(unsigned __int8 *)(v7 + 200);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    unsigned int v26 = *(unsigned __int8 *)(v7 + 200);
    v41[0] = 67109120;
    v41[1] = v26;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d",  v41);
    uint64_t v28 = (std::stringbuf::string_type *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  return 0LL;
}

void sub_100C302C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C30314(uint64_t a1, const std::string *a2)
{
  uint64_t v6 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
  (*(void (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  __int128 v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  *(void *)(a1 + 64) = a2->__r_.__value_.__l.__cap_;
  *(_OWORD *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 72), a2 + 1);
  (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  return 1LL;
}

void sub_100C303A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100C303BC(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 178)) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = (*(double (**)(void))(**(void **)(v4 + 464) + 56LL))(*(void *)(v4 + 464))
  BOOL v6 = v5 < *(double *)(a2 + 136) && *(_BYTE *)(v4 + 440) == 0;
  uint64_t v136 = a2;
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  uint64_t v7 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(char *)(a2 + 31) >= 0 ? a2 + 8 : *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(v3 + 56);
    int v10 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v11 = sub_100019240(a2 + 184);
    uint64_t v12 = sub_100603208(a2 + 184);
    sub_100832C64(*(void *)(v3 + 48), (std::stringbuf::string_type *)__p);
    uint64_t v13 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)std::string buf = 136316930;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v152 = 2080;
    *(void *)&__int128 v153 = v9;
    WORD4(v153) = 1024;
    *(_DWORD *)((char *)&v153 + 1sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v10;
    HIWORD(v153) = 2048;
    *(double *)int v154 = v5;
    *(_WORD *)&v154[8] = 1024;
    BOOL v155 = v6;
    __int16 v156 = 2048;
    uint64_t v157 = v11;
    __int16 v158 = 2048;
    uint64_t v159 = v12;
    __int16 v160 = 2080;
    v161 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, size s, %lu, %lu, knownLocation, %s",  buf,  0x4Au);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v135 = qword_101934858;
    else {
      uint64_t v99 = *(void *)(a2 + 8);
    }
    uint64_t v100 = *(void *)(v3 + 56);
    int v101 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v102 = sub_100019240(a2 + 184);
    uint64_t v103 = sub_100603208(a2 + 184);
    sub_100832C64(*(void *)(v3 + 48), &v141);
    if ((v141.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      v104 = &v141;
    }
    else {
      v104 = (std::stringbuf::string_type *)v141.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::stringbuf::string_type __p = 136316930;
    *(void *)&__p[4] = v99;
    *(_WORD *)&_BYTE __p[12] = 2080;
    *(void *)&__p[14] = v100;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&_BYTE __p[24] = v101;
    *(_WORD *)&__p[28] = 2048;
    *(double *)uint64_t v143 = v5;
    *(_WORD *)&v143[8] = 1024;
    BOOL v144 = v6;
    __int16 v145 = 2048;
    uint64_t v146 = v102;
    __int16 v147 = 2048;
    uint64_t v148 = v103;
    __int16 v149 = 2080;
    __int16 v150 = v104;
    LODWORD(v126) = 74;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v135,  1LL,  "TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, size s, %lu, %lu, knownLocation, %s",  __p,  v126,  v127,  v128,  v130,  v131,  v132,  v133);
    v106 = v105;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v106);
    if (v106 != buf) {
      free(v106);
    }
  }

  i = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
  if (v6)
  {
    if (*(_BYTE *)(v3 + 64))
    {
      uint64_t v15 = a2 + 184;
      sub_100603264(a2 + 184);
      double v16 = (void *)sub_1005B46E8(a2 + 184);
      uint64_t v134 = sub_100056FA8(a2 + 184);
      if (v16 != (void *)v134)
      {
        uint64_t v17 = 0LL;
        uint64_t v18 = 0LL;
        uint64_t v129 = v3;
        while (1)
        {
          int v19 = (unsigned int *)v16[10];
          if (!v19) {
            break;
          }
          if (sub_100C0CCC8(v16[10]))
          {
            if (sub_100C148B0((double *)v19, *(void *)(v3 + 48), *(float *)(v136 + 144)))
            {
              if (!sub_100C11C74((uint64_t)v19))
              {
                if (qword_101934850 != -1) {
                  dispatch_once(&qword_101934850, &stru_101879158);
                }
                int v24 = (os_log_s *)qword_101934858;
                if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
                {
                  (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v19 + 16LL))(buf, v19);
                  uint64_t v25 = v4;
                  uint64_t v26 = v17;
                  uint64_t v27 = v18;
                  uint64_t v28 = i;
                  int v29 = SBYTE9(v153);
                  int v30 = *(_BYTE **)buf;
                  uint64_t v31 = sub_100603208(v15);
                  *(_DWORD *)std::stringbuf::string_type __p = 136380931;
                  int v32 = buf;
                  if (v29 < 0) {
                    int v32 = v30;
                  }
                  *(void *)&__p[4] = v32;
                  *(_WORD *)&_BYTE __p[12] = 2050;
                  *(void *)&__p[14] = v31;
                  _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe",  __p,  0x16u);
                  if (SBYTE9(v153) < 0) {
                    operator delete(*(void **)buf);
                  }
                  i = v28;
                  uint64_t v18 = v27;
                  uint64_t v17 = v26;
                  uint64_t v4 = v25;
                  uint64_t v3 = v129;
                }

                if (!sub_1002921D0(115, 0)) {
                  goto LABEL_31;
                }
                bzero(buf, 0x65CuLL);
                if (qword_101934850 != -1) {
                  dispatch_once(&qword_101934850, &stru_101879158);
                }
                uint64_t v33 = qword_101934858;
                (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v19 + 16LL))(__p, v19);
                uint64_t v34 = v17;
                int v35 = __p[23];
                double v36 = *(_BYTE **)__p;
                uint64_t v37 = sub_100603208(v15);
                LODWORD(v141.__r_.__value_.__l.__data_) = 136380931;
                __int16 v38 = __p;
                if (v35 < 0) {
                  __int16 v38 = v36;
                }
                *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
                WORD2(v141.__r_.__value_.__r.__words[1]) = 2050;
                *(std::string::size_type *)((char *)&v141.__r_.__value_.__r.__words[1] + 6) = v37;
                LODWORD(v126) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  16LL,  "TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe",  &v141,  v126);
                __int16 v40 = v39;
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v40);
                uint64_t v17 = v34;
                goto LABEL_74;
              }

              sub_100602F80(v15, v19 + 12);
              ++*(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL);
              uint64_t v18 = (v18 + 1);
            }

            else
            {
              if (!sub_100C145F0((uint64_t)v19, *(unsigned __int8 *)(v4 + 200)))
              {
                sub_100602F80(v15, v19 + 12);
                ++*(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL);
                if (qword_101934850 != -1) {
                  dispatch_once(&qword_101934850, &stru_101879158);
                }
                BOOL v41 = (os_log_s *)qword_101934858;
                if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
                {
                  (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v19 + 16LL))(buf, v19);
                  __int16 v42 = buf;
                  if (SBYTE9(v153) < 0) {
                    __int16 v42 = *(_BYTE **)buf;
                  }
                  *(_DWORD *)std::stringbuf::string_type __p = 136380675;
                  *(void *)&__p[4] = v42;
                  _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe",  __p,  0xCu);
                  if (SBYTE9(v153) < 0) {
                    operator delete(*(void **)buf);
                  }
                }

                if (!sub_1002921D0(115, 0)) {
                  goto LABEL_31;
                }
                bzero(buf, 0x65CuLL);
                if (qword_101934850 != -1) {
                  dispatch_once(&qword_101934850, &stru_101879158);
                }
                uint64_t v43 = qword_101934858;
                (*(void (**)(_BYTE *__return_ptr, unsigned int *))(*(void *)v19 + 16LL))(__p, v19);
                __int16 v44 = __p;
                if (__p[23] < 0) {
                  __int16 v44 = *(_BYTE **)__p;
                }
                LODWORD(v141.__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
                LODWORD(v126) = 12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v43,  16LL,  "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe",  &v141,  v126);
                __int16 v40 = v45;
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v40);
                goto LABEL_74;
              }

              uint64_t v17 = (v17 + 1);
            }
          }

void sub_100C31D4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, char *a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void **p_p, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  p_p = &__p;
  sub_100222DE8(&p_p);
  _Unwind_Resume(a1);
}

void sub_100C31DEC(uint64_t a1, std::string::size_type a2)
{
  if (*(void *)(a1 + 240))
  {
    if (*(double *)(a1 + 268) >= 0.0)
    {
      double v7 = vabdd_f64( (*(double (**)(void))(**(void **)(a1 + 464) + 56LL))(*(void *)(a1 + 464)),  *(double *)(a1 + 324));
      double v8 = *(double *)(a1 + 232);
      double v9 = v8 - v7 + 20.0;
      double v10 = v8 * 0.170000002;
      if (v9 > v10) {
        double v11 = v9;
      }
      else {
        double v11 = v10;
      }
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v12 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        sub_100832C64(a1 + 248, &__p);
        uint64_t v13 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &__p
            : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string buf = 136315906;
        std::string::size_type v28 = a2;
        __int16 v29 = 2048;
        double v30 = v7;
        __int16 v31 = 2048;
        double v32 = v11;
        __int16 v33 = 2080;
        uint64_t v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        uint64_t v16 = qword_101934838;
        sub_100832C64(a1 + 248, &v22);
        if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v17 = &v22;
        }
        else {
          uint64_t v17 = (std::stringbuf::string_type *)v22.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = a2;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v7;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        double v24 = v11;
        __int16 v25 = 2080;
        uint64_t v26 = v17;
        LODWORD(v2sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  2LL,  "TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s",  (const char *)&__p,  v20,  v21,  v22.__r_.__value_.__l.__data_);
        int v19 = v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::scheduleExpiredLocationTimer(const char *)",  "%s\n",  v19);
      }

      uint64_t v14 = *(void *)(a1 + 240);
      double v15 = (*(double (**)(void))(**(void **)(a1 + 464) + 56LL))(*(void *)(a1 + 464));
      sub_1006B6014(v14, v11 + v15);
    }

    else
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v3 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "TILE: scheduleExpiredLocationTimer, no valid location",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: scheduleExpiredLocationTimer, no valid location",  &__p,  2);
        double v5 = (uint8_t *)v4;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::scheduleExpiredLocationTimer(const char *)",  "%s\n",  v4);
        if (v5 != buf) {
          free(v5);
        }
      }
    }
  }

void sub_100C321F8(uint64_t a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  uint64_t v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)std::string buf = 67109120;
    int v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "TILE: onExpiredLocationTimerFired, isLocked, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    int v5 = *(unsigned __int8 *)(a1 + 200);
    v10[0] = 67109120;
    v10[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: onExpiredLocationTimerFired, isLocked, %d",  v10);
    double v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::onExpiredLocationTimerFired()", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  if (*(_BYTE *)(a1 + 200))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: onExpiredLocationTimerFired", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      LOWORD(v10[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: onExpiredLocationTimerFired",  v10,  2);
      double v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::onExpiredLocationTimerFired()", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    if (*(_BYTE *)(a1 + 200)) {
      sub_100C23E74(a1, (std::string::size_type)"onExpiredLocationTimerFired", a1 + 248, 0);
    }
  }

void sub_100C324F8(uint64_t a1, uint64_t a2)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  uint64_t v4 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: onPCTimerFired", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: onPCTimerFired",  v7,  2);
    BOOL v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::onPCTimerFired(CLPersistentTimer *)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (*(void *)(a1 + 240) == a2) {
    sub_100C321F8(a1);
  }
}

void sub_100C326A0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (!*(_BYTE *)(a1 + 201))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    __int16 v33 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      int v51 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)std::stringbuf::string_type __p = 67109120;
      *(_DWORD *)&__p[4] = v51;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d",  __p);
      uint64_t v53 = (char *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocation Provider_Type::NotificationData &)",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }

    if (*a3 == 5)
    {
      __int128 v35 = *(_OWORD *)a4;
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a1 + 248) = v35;
      __int128 v36 = *(_OWORD *)(a4 + 32);
      __int128 v37 = *(_OWORD *)(a4 + 48);
      __int128 v38 = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 328) = v38;
      *(_OWORD *)(a1 + 28sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v36;
      *(_OWORD *)(a1 + 296) = v37;
      __int128 v39 = *(_OWORD *)(a4 + 96);
      __int128 v40 = *(_OWORD *)(a4 + 112);
      __int128 v41 = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
      *(_OWORD *)(a1 + 36sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v40;
      *(_OWORD *)(a1 + 376) = v41;
      *(_OWORD *)(a1 + 344) = v39;
    }

    return;
  }

  if (*a3 != 5)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    __int16 v42 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v43 = *a3;
      __int16 v44 = sub_10100D9D8(*a3);
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v43;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "TILE: onLocationNotification, unknown notificaiton, %d, %s",  buf,  0x12u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v45 = qword_101934838;
    unsigned int v46 = *a3;
    uint64_t v47 = sub_10100D9D8(*a3);
    *(_DWORD *)std::stringbuf::string_type __p = 67109378;
    *(_DWORD *)&__p[4] = v46;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = v47;
    LODWORD(v61) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  2LL,  "TILE: onLocationNotification, unknown notificaiton, %d, %s",  __p,  v61);
    int v49 = (char *)v48;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationPr ovider_Type::NotificationData &)",  "%s\n",  v48);
LABEL_66:
    if (v49 != buf) {
      free(v49);
    }
    return;
  }

  if (*(_BYTE *)(a1 + 428))
  {
    double v7 = (*(double (**)(void))(**(void **)(a1 + 464) + 56LL))(*(void *)(a1 + 464));
    double v8 = *(double *)(a1 + 408);
    double v9 = (_OWORD *)(a1 + 248);
    double v10 = (double *)(a1 + 268);
    double v11 = *(double *)(a1 + 268);
    BOOL v12 = v11 > *(double *)(a4 + 20) && v11 > 100.0;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    uint64_t v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 408);
      uint64_t v14 = *(void *)(a1 + 416);
      sub_100832C64(a4, (std::stringbuf::string_type *)__p);
      uint64_t v16 = (v65 & 0x80000000LL) == 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)std::string buf = 134218755;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v14;
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocatio nProtectionCheckTimestamp, %.1f, leech location, %{private}s",  buf,  0x26u);
      if (SBYTE3(v65) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      uint64_t v54 = qword_101934838;
      uint64_t v56 = *(void *)(a1 + 408);
      uint64_t v55 = *(void *)(a1 + 416);
      sub_100832C64(a4, &v62);
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v57 = &v62;
      }
      else {
        uint64_t v57 = (std::stringbuf::string_type *)v62.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::stringbuf::string_type __p = 134218755;
      *(void *)&__p[4] = v56;
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = v12;
      __int16 v64 = 2048;
      uint64_t v65 = v55;
      __int16 v66 = 2081;
      uint64_t v67 = v57;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v54,  2LL,  "TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocatio nProtectionCheckTimestamp, %.1f, leech location, %{private}s",  __p,  38);
      int v59 = v58;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocation Provider_Type::NotificationData &)",  "%s\n",  v59);
      if (v59 != buf) {
        free(v59);
      }
    }

    __int128 v17 = *(_OWORD *)(a4 + 16);
    _OWORD *v9 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 264) = v17;
    __int128 v18 = *(_OWORD *)(a4 + 32);
    __int128 v19 = *(_OWORD *)(a4 + 48);
    __int128 v20 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 328) = v20;
    *(_OWORD *)(a1 + 28sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v18;
    *(_OWORD *)(a1 + 296) = v19;
    __int128 v21 = *(_OWORD *)(a4 + 96);
    __int128 v22 = *(_OWORD *)(a4 + 112);
    __int128 v23 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 36sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v22;
    *(_OWORD *)(a1 + 376) = v23;
    *(_OWORD *)(a1 + 344) = v21;
    int v24 = v7 - v8 >= 600.0 || v12;
    if (v24 == 1 && *v10 >= 0.0 && *v10 <= 5000.0)
    {
      *(void *)std::string buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100C33580;
      *(void *)&_BYTE buf[24] = &unk_101878F50;
      *(void *)&_BYTE buf[32] = a1;
      uint64_t v69 = a1 + 248;
      double v70 = v7;
      sub_100C217CC(a1, (uint64_t)"predownloadTilesForLocation", (uint64_t)buf);
      sub_100C24408(a1, v7);
      sub_100C32EF8((const char *)a1, a1 + 248);
      *(double *)(a1 + 408) = v7;
    }

    if (*(_BYTE *)(a1 + 200))
    {
      int v25 = v7 - *(double *)(a1 + 416) >= 330.0 || v12;
      if (v25 == 1)
      {
        __int128 v26 = *(_OWORD *)(a4 + 16);
        _OWORD *v9 = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 264) = v26;
        __int128 v27 = *(_OWORD *)(a4 + 32);
        __int128 v28 = *(_OWORD *)(a4 + 48);
        __int128 v29 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 328) = v29;
        *(_OWORD *)(a1 + 28sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v27;
        *(_OWORD *)(a1 + 296) = v28;
        __int128 v30 = *(_OWORD *)(a4 + 96);
        __int128 v31 = *(_OWORD *)(a4 + 112);
        __int128 v32 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 36sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v31;
        *(_OWORD *)(a1 + 376) = v32;
        *(_OWORD *)(a1 + 344) = v30;
        sub_100C23E74(a1, (std::string::size_type)"onLocationNotification", a1 + 248, 0);
        *(double *)(a1 + 416) = v7;
      }
    }

    return;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  uint64_t v50 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "TILE: onLocationNotification, ignore leech when LS off",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    *(_WORD *)std::stringbuf::string_type __p = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "TILE: onLocationNotification, ignore leech when LS off",  __p,  2);
    int v49 = (char *)v60;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationPr ovider_Type::NotificationData &)",  "%s\n",  v60);
    goto LABEL_66;
  }

void sub_100C32EF8(const char *a1, uint64_t a2)
{
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018791B8);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm";
      __int16 v16 = 1024;
      int v17 = 2700;
      __int16 v18 = 2080;
      __int128 v19 = "location.horizontalAccuracy > 0.0";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018791B8);
      }
      int v8 = 136315650;
      double v9 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesManager.mm";
      __int16 v10 = 1024;
      int v11 = 2700;
      __int16 v12 = 2080;
      uint64_t v13 = "location.horizontalAccuracy > 0.0";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assert Failed, %s, %d, %s",  (const char *)&v8,  28,  v7[0]);
      BOOL v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    sub_1002920DC();
  }

  v7[0] = (const char *)_NSConcreteStackBlock;
  v7[1] = (const char *)3221225472LL;
  v7[2] = (const char *)sub_100C336A8;
  v7[3] = (const char *)&unk_101840280;
  v7[4] = a1;
  v7[5] = (const char *)a2;
  sub_100C217CC((uint64_t)a1, (uint64_t)"updateTileLocationRelevancy", (uint64_t)v7);
}

void sub_100C33154(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 6)
  {
    int v8 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a1 + 424) = v8;
    if (v8 >= 1) {
      sub_100C24408(a1, v7);
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    double v9 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      int v10 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      int v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      int v11 = *a3;
      v14[0] = 67240192;
      v14[1] = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe",  v14,  8);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_T ype::NotificationData &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

uint64_t sub_100C3336C(void *a1)
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  uint64_t v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLTilesManager::shutdown", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: CLTilesManager::shutdown",  v9,  2);
    int v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLTilesManager::shutdown()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (a1[30])
  {
    sub_100C2424C((uint64_t)a1);
    uint64_t v3 = a1[30];
    if (v3)
    {
      uint64_t v4 = (void *)sub_1006B6010(v3);
      operator delete(v4);
    }

    a1[30] = 0LL;
  }

  sub_100C26B54((uint64_t)a1);
  uint64_t v5 = a1[24];
  a1[24] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t result = a1[20];
  a1[20] = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100C33558(id a1, void *a2)
{
  *((void *)a2 + 36) = 0LL;
}

void *sub_100C33560@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "https://cl3.apple.com/3/v2");
}

void *sub_100C33570@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "https://cl3.apple.com/2/v1");
}

void sub_100C33580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 1)
  {
    sub_1004F2598();
    int v6 = sub_1004F9AC8();
    int v5 = *(_DWORD *)(a2 + 4);
  }

  else
  {
    int v6 = 1;
  }

  if (v5 == 2)
  {
    sub_1004F2598();
    v6 &= sub_1004F9AC8();
    int v5 = *(_DWORD *)(a2 + 4);
  }

  if ((*(_DWORD *)(a2 + 148) & 0x80000000) == 0 && v5 != 9 && v6 != 0)
  {
    *(_WORD *)((char *)&v13 + 1) = 0;
    *((void *)&v13 + 1) = 0xBFF0000000000000LL;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    __int16 v16 = 1;
    int v14 = *(_DWORD *)(a2 + 148);
    LOBYTE(v13) = *(_BYTE *)(a2 + 177);
    unsigned int v8 = *(_DWORD *)(a2 + 4);
    uint64_t v9 = *(void *)(a1 + 40);
    double v10 = *(double *)(v9 + 4);
    double v11 = *(double *)(v9 + 12);
    sub_1010DDBC0(&__p, "");
    sub_100C190F8(v4, v8, -1LL, &__p, &v13, v10, v11, *(double *)(a1 + 48));
  }

void sub_100C3368C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C336A8(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    (*(void (**)(void))(**(void **)(v4 + 464) + 56LL))(*(void *)(v4 + 464));
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(double *)(v6 + 20) < 0.0 || vabdd_f64(v5, *(double *)(v6 + 76)) > 3600.0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      double v7 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: location not relevant", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        LOWORD(v80.__r_.__value_.__l.__data_) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: location not relevant",  &v80,  2);
        uint64_t v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke",  "%s\n",  v8);
LABEL_24:
        if (v9 != buf) {
          free(v9);
        }
        return;
      }

      return;
    }

    uint64_t v74 = (int *)(a2 + 4);
    sub_1008ACE9C((uint64_t)&v80, (_DWORD *)(a2 + 4));
    sub_100C11F48( (uint64_t)&v80,  -1LL,  *(double *)(*(void *)(a1 + 40) + 4LL),  *(double *)(*(void *)(a1 + 40) + 12LL),  *(double *)(a2 + 152),  *(double *)(a2 + 160));
    if (sub_1008AD1E0((unsigned int *)&v80))
    {
      uint64_t v16 = sub_1006025CC(a2 + 184, (unsigned int *)&v80);
      uint64_t v17 = v16;
      if (v16 && sub_100C14E3C(v16, *(_BYTE *)(v4 + 200)))
      {
        double v18 = (*(double (**)(void))(**(void **)(v4 + 464) + 56LL))(*(void *)(v4 + 464));
        int v19 = sub_100DD963C(v17, v18);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101879178);
        }
        __int128 v20 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          int v21 = *v74;
          sub_1008AD840((unsigned int *)&v80, &__p);
          __int128 v22 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
              ? &__p
              : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string buf = 67109634;
          *(_DWORD *)uint64_t v84 = v19;
          *(_WORD *)&v84[4] = 1024;
          *(_DWORD *)&v84[6] = (__int16)v21;
          __int16 v85 = 2080;
          int v86 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "TILE: updating mtime, %d, type, %d, tileid, %s",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101879178);
          }
          uint64_t v65 = qword_101934838;
          int v66 = *v74;
          sub_1008AD840((unsigned int *)&v80, &v79);
          if ((v79.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v67 = &v79;
          }
          else {
            uint64_t v67 = (std::stringbuf::string_type *)v79.__r_.__value_.__r.__words[0];
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (__int16)v66;
          HIWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
          __p.__r_.__value_.__l.__cap_ = (std::string::size_type)v67;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v65,  2LL,  "TILE: updating mtime, %d, type, %d, tileid, %s",  &__p,  24,  v71);
          uint64_t v69 = v68;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke",  "%s\n",  v69);
        }
      }

      int v23 = *v74;
      if (*v74 == 1)
      {
        unsigned int v24 = -18;
        p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
        uint64_t v72 = 67109634LL;
        while (1)
        {
          for (unsigned int i = -18; i != 19; ++i)
          {
            if (!(i | v24)) {
              continue;
            }
            std::stringbuf::string_type __p = v80;
            if (SHIBYTE(v82) < 0)
            {
              sub_1010DD48C(&v77, (void *)v81, *((unint64_t *)&v81 + 1));
            }

            else
            {
              __int128 v77 = v81;
              uint64_t v78 = v82;
            }

            double v27 = *(double *)(a2 + 160);
            float32_t v28 = *(double *)(a2 + 152);
            *(float *)&double v27 = v27;
            sub_1008AE784((uint64_t)&__p, v24, i, v28, *(float32x2_t *)&v27);
            if (sub_1008AD1E0((unsigned int *)&__p))
            {
              uint64_t v29 = sub_1006025CC(a2 + 184, (unsigned int *)&__p);
              uint64_t v30 = v29;
              double v31 = (*(double (**)(void))(**(void **)(v4 + 464) + 56LL))(*(void *)(v4 + 464));
              unsigned int v32 = sub_100DD963C(v30, v31);
              __int16 v33 = (os_log_s *)qword_101934838;
              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
              {
                int v34 = *v74;
                sub_1008AD840((unsigned int *)&__p, &v79);
                __int128 v35 = &v79;
                if ((v79.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  __int128 v35 = (std::stringbuf::string_type *)v79.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string buf = v72;
                *(_DWORD *)uint64_t v84 = v32;
                *(_WORD *)&v84[4] = 1024;
                *(_DWORD *)&v84[6] = (__int16)v34;
                __int16 v85 = 2080;
                int v86 = v35;
                _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s",  buf,  0x18u);
                p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_69;
              }
              bzero(buf, 0x65CuLL);
              uint64_t v36 = qword_101934838;
              int v37 = *v74;
              sub_1008AD840((unsigned int *)&__p, &v75);
              __int128 v38 = &v75;
              if ((v75.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                __int128 v38 = (std::stringbuf::string_type *)v75.__r_.__value_.__r.__words[0];
              }
              v79.__r_.__value_.__r.__words[0] = __PAIR64__(v32, v72);
              LOWORD(v79.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v79.__r_.__value_.__r.__words[1] + 2) = (__int16)v37;
              HIWORD(v79.__r_.__value_.__r.__words[1]) = 2080;
              v79.__r_.__value_.__l.__cap_ = (std::string::size_type)v38;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  2LL,  "TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s",  &v79,  24,  (const char *)v72);
              __int128 v40 = v39;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke",  "%s\n",  v40);
              p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
            }

            else
            {
              __int128 v41 = (os_log_s *)qword_101934838;
              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "Invalid dem neighbor tile id!",  buf,  2u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_69;
              }
              bzero(buf, 0x65CuLL);
              LOWORD(v79.__r_.__value_.__l.__data_) = 0;
              LODWORD(v7sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "Invalid dem neighbor tile id!",  &v79,  v70);
              __int128 v40 = (char *)v42;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke",  "%s\n",  v42);
            }

void sub_100C345EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C34680@<X0>(unsigned __int16 *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v33, (uint64_t)"", 0LL);
  double v5 = sub_10000CF44(v4, (uint64_t)"sw_cor, ", 8LL);
  uint64_t v6 = (void *)std::ostream::operator<<(v5, *a1);
  double v7 = sub_10000CF44(v6, (uint64_t)", ", 2LL);
  unsigned int v8 = (void *)std::ostream::operator<<(v7, a1[1]);
  uint64_t v9 = sub_10000CF44(v8, (uint64_t)", adamId, ", 10LL);
  double v10 = (void *)std::ostream::operator<<(v9, *((unsigned int *)a1 + 1));
  uint64_t v11 = sub_10000CF44(v10, (uint64_t)", radiusIns, ", 13LL);
  std::string::size_type v12 = (void *)std::ostream::operator<<(v11, *((unsigned __int8 *)a1 + 8));
  std::string::size_type v13 = sub_10000CF44(v12, (uint64_t)", rankIns, ", 11LL);
  std::string::size_type v14 = (void *)std::ostream::operator<<(v13, *((unsigned __int8 *)a1 + 9) >> 4);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)", rankUnIns, ", 13LL);
  uint64_t v16 = (void *)std::ostream::operator<<(v15, *((_BYTE *)a1 + 9) & 0xF);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)", age, ", 7LL);
  double v18 = (void *)std::ostream::operator<<(v17, a1[5] & 1);
  int v19 = sub_10000CF44(v18, (uint64_t)", ", 2LL);
  __int128 v20 = (void *)std::ostream::operator<<(v19, (a1[5] >> 1) & 1);
  int v21 = sub_10000CF44(v20, (uint64_t)", ", 2LL);
  __int128 v22 = (void *)std::ostream::operator<<(v21, (a1[5] >> 2) & 1);
  int v23 = sub_10000CF44(v22, (uint64_t)", ", 2LL);
  unsigned int v24 = (void *)std::ostream::operator<<(v23, (a1[5] >> 3) & 1);
  int v25 = sub_10000CF44(v24, (uint64_t)", touristApp, ", 14LL);
  __int128 v26 = (void *)std::ostream::operator<<(v25, (a1[5] >> 4) & 1);
  double v27 = sub_10000CF44(v26, (uint64_t)", marqueeApp, ", 14LL);
  uint64_t v28 = sub_1009831DC((uint64_t)a1);
  uint64_t v29 = (void *)std::ostream::operator<<(v27, v28);
  sub_10000CF44(v29, (uint64_t)"", 0LL);
  std::stringbuf::str(a2, &v34);
  *(void *)((char *)v32
  uint64_t v33 = v30;
  std::streambuf::~streambuf(&v34);
  return std::ios::~ios(&v35);
}

void sub_100C3489C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100C348B0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10199AF68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10199AF68))
  {
    qword_10199AF50 = 0LL;
    *(void *)algn_10199AF58 = 0LL;
    qword_10199AF60 = 0LL;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10199AF50, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199AF68);
  }

  if (qword_10199AF70 != -1) {
    dispatch_once(&qword_10199AF70, &stru_101879010);
  }
  return &qword_10199AF50;
}

void sub_100C34944(uint64_t a1)
{
  uint64_t v2 = sub_100C29628(a1, 9u);
  sub_100C22A00(a1, (std::string::size_type)&__str);
  int v3 = *(char *)(v2 + 79);
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __str.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v3 >= 0) {
    size_t v6 = *(unsigned __int8 *)(v2 + 79);
  }
  else {
    size_t v6 = *(void *)(v2 + 64);
  }
  if (v3 >= 0) {
    double v7 = (const void *)(v2 + 56);
  }
  else {
    double v7 = *(const void **)(v2 + 56);
  }
  if (v6 >= size) {
    size_t v8 = size;
  }
  else {
    size_t v8 = v6;
  }
  if (memcmp(p_str, v7, v8) || v6 != size)
  {
    std::string::operator=((std::string *)(v2 + 56), &__str);
    sub_100C26E64(a1, 1, 9u);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    double v10 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      else {
        uint64_t v11 = *(void *)(v2 + 56);
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      else {
        uint64_t v12 = *(void *)(v2 + 56);
      }
      int v16 = 136315138;
      uint64_t v17 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s",  (const char *)&v16);
      std::string::size_type v14 = (uint8_t *)v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManager::storeFrontDidChange()", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

void sub_100C34BA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C34BD0(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10199AE80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10199AE80))
  {
    sub_100C2B9B8("([0-9]{8})", (const void **)&unk_10199AE08, __p);
    sub_100BFA368((std::locale *)&unk_10199AE40, (uint64_t)__p, 0);
    if ((v35[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_100C34E18, &unk_10199AE40, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199AE80);
  }

  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  char v38 = 0;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  char v41 = 0;
  char v42 = 0;
  uint64_t v43 = 0LL;
  *(_OWORD *)std::stringbuf::string_type __p = 0u;
  memset(v35, 0, 25);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0LL) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)a1;
  }
  if ((v3 & 0x80u) != 0LL) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if ((sub_100BFFCB0(v4, v4 + v3, (uint64_t)__p, (uint64_t)&unk_10199AE40, 0) & 1) != 0)
  {
    int v5 = 0;
    int v6 = 1;
  }

  else
  {
    double v7 = sub_100C34E40();
    int v8 = *(char *)(a1 + 23);
    BOOL v9 = v8 < 0;
    if (v8 >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = *(void *)a1;
    }
    uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    if (v9) {
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v12 = *((char *)v7 + 23);
    BOOL v13 = v12 < 0;
    if (v12 >= 0) {
      std::string::size_type v14 = v7;
    }
    else {
      std::string::size_type v14 = (void *)*v7;
    }
    uint64_t v15 = *((unsigned __int8 *)v7 + 23);
    if (v13) {
      uint64_t v15 = v7[1];
    }
    uint64_t v16 = v10 - 1;
    uint64_t v17 = (char *)v14 - 1;
    while (v11 && v15)
    {
      int v18 = *(unsigned __int8 *)(v16 + v11);
      int v19 = v17[v15];
      --v11;
      --v15;
      if (v18 != v19) {
        goto LABEL_25;
      }
    }

    if (!v15)
    {
LABEL_42:
      int v6 = 0;
      int v5 = 0;
      goto LABEL_43;
    }

void sub_100C34DD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_10199AE80);
  _Unwind_Resume(a1);
}

void sub_100C34E18(std::locale *a1)
{
}

void *sub_100C34E40()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_10198FE58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_10198FE58))
  {
    sub_1010DDBC0(qword_10198FE40, ".ignore");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_10198FE40, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10198FE58);
  }

  return qword_10198FE40;
}

void sub_100C34EC0(_Unwind_Exception *a1)
{
}

void sub_100C34ED8(id a1)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign( (std::string *)&qword_10199AE88,  -[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p),  "stringByAppendingPathComponent:",  @"adsf"),  "UTF8String"));
}

void sub_100C34F58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C34F74(id a1)
{
}

void sub_100C34F88(id a1)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign( (std::string *)&qword_10199AED8,  -[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p),  "stringByAppendingPathComponent:",  @"tiles_hrse"),  "UTF8String"));
}

void sub_100C35008( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C35024(id a1)
{
}

void sub_100C35038(id a1)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign( (std::string *)&qword_10199AF28,  -[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p),  "stringByAppendingPathComponent:",  @"tiles_app_v2"),  "UTF8String"));
}

void sub_100C350B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C350D4(id a1)
{
}

void sub_100C350E8(id a1)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign( (std::string *)&qword_10199AF78,  -[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p),  "stringByAppendingPathComponent:",  @"tiles_preload_manifest"),  "UTF8String"));
}

void sub_100C35168( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C35184(id a1)
{
}

void sub_100C35198(id a1)
{
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign( (std::string *)&qword_10199AFC8,  -[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p),  "stringByAppendingPathComponent:",  @"tiles_transit_mac"),  "UTF8String"));
}

void sub_100C35218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C35234(id a1)
{
}

void sub_100C35248(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLTilesManager");
  sub_100C35310((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *int v8 = &off_1018790C0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C352E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C35310(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101879338;
  *(void *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100C353E4(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101879138);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        int v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101879138);
        }
        int v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        uint64_t v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>: :removeClient(int) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Ty pe::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100C35658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198FE60);
}

BOOL sub_100C3566C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v40 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          int v23 = (uint64_t *)v17;
        }
        else {
          int v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }

      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }

      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v42 = v25;
        uint64_t v33 = *(void *)(v25 + 56);
        char v34 = *a4;
        buf[0] = &v41;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v25 + 40), &v41, (uint64_t)&unk_1012CF090, buf) + 32) = v34;
        LOBYTE(buf[0]) = 0;
        *(_OWORD *)((char *)buf + 4) = 0u;
        memset((char *)&buf[2] + 4, 0, 32);
        memset((char *)&buf[6] + 4, 0, 28);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _DWORD **))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v35 = sub_100C38090((uint64_t)buf);
          sub_100C375D0((_BYTE *)a1, (uint64_t)&v40, (uint64_t)v42, v35);
        }

        if (SHIBYTE(buf[9]) < 0) {
          operator delete(buf[7]);
        }
        if (SHIBYTE(buf[6]) < 0) {
          operator delete(buf[4]);
        }
        if (SHIBYTE(buf[3]) < 0) {
          operator delete(buf[1]);
        }
        if (v33) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        *(void *)char v42 = a1 + 64;
        char v29 = byte_10198FE61;
        HIDWORD(v39) = v16;
        buf[0] = (_DWORD *)&v39 + 1;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, buf) + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v29;
        HIDWORD(v39) = *a3;
        buf[0] = (_DWORD *)&v39 + 1;
        uint64_t v30 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, buf);
        sub_1000F0D38(v30 + 8);
        char v31 = *a4;
        HIDWORD(v39) = *a3;
        buf[0] = (_DWORD *)&v39 + 1;
        int v32 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, buf);
        buf[0] = &v41;
        *((_BYTE *)sub_1004EF3D4(v32 + 5, &v41, (uint64_t)&unk_1012CF090, buf) + 32) = v31;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        LODWORD(buf[0]) = *a3;
        sub_10004A8FC((uint64_t **)(v40 + 40), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101879138);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (_DWORD *)(a1 + 8);
    LODWORD(buf[0]) = 136446466;
    *(_DWORD **)((char *)buf + 4) = v15;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879138);
    }
    uint64_t v36 = (void *)(a1 + 8);
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v36;
    __int16 v43 = 1026;
    int v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    char v38 = (char *)v37;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::reg isterForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTilesManager_Typ e::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, Registrati onInfo_T = char]",  "%s\n",  v37);
    return 0LL;
  }

  return result;
}

void sub_100C35B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_100C35B38(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v5;
    }
    else {
      BOOL v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879138);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101879138);
      }
      BOOL v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      int v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::c lientRegistered(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationDa ta_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100C35DB8(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101879138);
              }
              int v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101879138);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                char v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char , char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTilesManager_Type: :Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100C36140(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }

  while (*v11);
  if (v8 == v3) {
    return 0LL;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0LL;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0LL;
  }
  *(void *)a3 = *(void *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  return 1LL;
}

uint64_t sub_100C361EC(uint64_t a1, int *a2, uint64_t a3)
{
  int v10 = *a2;
  uint64_t v12 = &v10;
  uint64_t v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    int v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_100C36298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100C362AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v4,  a3,  a4,  0LL);
  if ((v6[59] & 0x80000000) != 0) {
    operator delete(*(void **)&v6[36]);
  }
  if ((v6[35] & 0x80000000) != 0) {
    operator delete(*(void **)&v6[12]);
  }
  if ((v6[11] & 0x80000000) != 0) {
    operator delete(*(void **)((char *)v5 + 4));
  }
}

void sub_100C36334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C36348(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879138);
    }
    __int128 v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(a1 + 8);
      id v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)int v66 = 0;
      *(_WORD *)&v66[4] = 2082;
      *(void *)&v66[6] = "";
      *(_WORD *)&v66[14] = 2082;
      *(void *)&v66[16] = "activity";
      __int16 v67 = 2082;
      uint64_t v68 = v12;
      __int16 v69 = 2050;
      uint64_t v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      uint64_t v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&v66[4], *(void **)&v66[12]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      sub_100C376AC(a3, buf);
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      __int16 v27 = *(std::__shared_weak_count **)&v66[4];
      if (*(void *)&v66[4])
      {
        int v28 = (unint64_t *)(*(void *)&v66[4] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    uint64_t v30 = sub_100C3709C(a3);
    if (a5 == -1)
    {
      sub_100C371F8((void *)a1, (int *)a2, v30);
    }

    else
    {
      uint64_t v31 = a1 + 88;
      uint64_t v32 = *(void *)(a1 + 88);
      if (!v32) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v32 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          __int16 v36 = (uint64_t *)v32;
        }
        else {
          __int16 v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = v32;
        }
        uint64_t v32 = *v36;
      }

      while (*v36);
      if (v33 == v31 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v63 = v33;
      unint64_t v37 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v38 = *a2;
      int v39 = (__n128 *)(a1 + 64);
      do
      {
        int v40 = *(_DWORD *)(v37 + 32);
        BOOL v41 = v40 < v38;
        if (v40 >= v38) {
          char v42 = (unint64_t *)v37;
        }
        else {
          char v42 = (unint64_t *)(v37 + 8);
        }
        if (!v41) {
          int v39 = (__n128 *)v37;
        }
        unint64_t v37 = *v42;
      }

      while (*v42);
      if (v39 == v15 || v38 < (signed __int32)v39[2].n128_u32[0])
      {
LABEL_59:
        std::stringbuf::string_type v62 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101879138);
        }
        __int16 v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          char v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            uint64_t v45 = v71;
          }
          else {
            uint64_t v45 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)int v66 = v44;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a5;
          *(_WORD *)&v66[14] = 2080;
          *(void *)&v66[16] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101879138);
          }
          double v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v61 >= 0) {
            uint64_t v48 = __p;
          }
          else {
            uint64_t v48 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v46;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v59);
          double v50 = v49;
          if (v61 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_ T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, Notificat ionInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v50);
        }

        goto LABEL_83;
      }

      std::stringbuf::string_type v62 = v39;
      if (v33 == v31) {
        goto LABEL_60;
      }
      uint64_t v53 = v39[3].n128_i64[0];
      unsigned int v51 = v39 + 3;
      BOOL v52 = (__n128 *)v53;
      if (!v53) {
        goto LABEL_60;
      }
      int v54 = *(_DWORD *)(v33 + 32);
      uint64_t v55 = v51;
      do
      {
        int v56 = v52[1].n128_i32[3];
        BOOL v57 = v56 < v54;
        if (v56 >= v54) {
          v58 = v52;
        }
        else {
          v58 = (__n128 *)&v52->n128_i8[8];
        }
        if (!v57) {
          uint64_t v55 = v52;
        }
        BOOL v52 = (__n128 *)v58->n128_u64[0];
      }

      while (v58->n128_u64[0]);
      sub_100C375D0((_BYTE *)a1, (uint64_t)&v63, (uint64_t)&v62, v30);
    }

void sub_100C36964( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100C369B0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879138);
    }
    unsigned __int8 v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      unint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101879138);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::l istClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879138);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101879138);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::l istClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::Noti ficationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    int v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      __int128 v11 = (void *)(a1 + 8);
      do
      {
        uint64_t v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101879138);
            }
            id v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              unint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101879138);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesMa nager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                uint64_t v12 = v18;
              }

              while (!v19);
            }

            uint64_t v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            int v10 = v26;
          }

          while (!v19);
        }

        int v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100C36F60(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C38030(a1);
  operator delete(v1);
}

id sub_100C36F74(uint64_t a1, int a2, void *a3)
{
  id result = sub_100C37914(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100C36FC0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C36FEC(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100C37018(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100C37044(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100C37070(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

CLCppContainer *sub_100C3709C(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = v2;
  *(void *)unsigned __int8 v2 = *(void *)a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1010DD48C(v2 + 8, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }

  if (*(char *)(a1 + 55) < 0)
  {
    sub_1010DD48C(v3 + 32, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    *((_OWORD *)v3 + 2) = *(_OWORD *)(a1 + 32);
    *((void *)v3 + 6) = *(void *)(a1 + 48);
  }

  uint64_t v4 = v3 + 56;
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1010DD48C(v4, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }

  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 56);
    *((void *)v3 + 9) = *(void *)(a1 + 72);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100C378B4;
  v6[3] = &unk_10181D3D0;
  v6[4] = v3;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v3,  v6,  0LL,  80LL);
}

void sub_100C371B4(_Unwind_Exception *a1)
{
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100C371F8(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        unsigned int v51 = v9;
        id v13 = sub_100C37914(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              double v50 = v19;
              sub_100C375D0(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              unsigned int v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                BOOL v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    BOOL v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      BOOL v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              double v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101879138);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                BOOL v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101879138);
                }
                uint64_t v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>: :invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTilesManager_Type ::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100C375D0(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100C37914(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    uint64_t v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void *sub_100C376AC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x68uLL);
  id result = sub_100C37704(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100C376F0(_Unwind_Exception *a1)
{
}

void *sub_100C37704(void *a1, uint64_t a2)
{
  a1[2] = 0LL;
  *a1 = off_1018792C8;
  a1[1] = 0LL;
  sub_100C377C4((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100C37750(_Unwind_Exception *a1)
{
}

void sub_100C37764(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018792C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C37778(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018792C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100C3779C(uint64_t a1)
{
}

_BYTE *sub_100C377C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1010DD48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }

  if (*(char *)(a3 + 55) < 0)
  {
    sub_1010DD48C((_BYTE *)(a2 + 32), *(void **)(a3 + 32), *(void *)(a3 + 40));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(a2 + 32) = v7;
  }

  id result = (_BYTE *)(a2 + 56);
  __int128 v9 = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(_OWORD *)id result = v9;
  return result;
}

void sub_100C37880(_Unwind_Exception *exception_object)
{
}

void sub_100C378B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    operator delete((void *)v1);
  }

id sub_100C37914(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100C37960(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100C37960(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101879308);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135024DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101879308);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101879308);
    }
    __int128 v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135024DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101879308);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  __int128 v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_100C37D0C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100C37D38(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100C37D38(a1, *a2);
    sub_100C37D38(a1, a2[1]);
    sub_1001B4C40(a2 + 5);
    operator delete(a2);
  }

uint64_t *sub_100C37D80(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  __int128 v7 = a1 + 1;
  __int128 v6 = a1[1];
  uint64_t v8 = a1 + 1;
  __int128 v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        __int128 v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        __int128 v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      __int128 v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = (uint64_t)(v12 + 5);
    v12[6] = (uint64_t)(v12 + 5);
    void v12[7] = 0LL;
    char v15 = 1;
    sub_1000085FC(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0LL;
    sub_100C37E68((uint64_t)v14, 0LL);
    return v12;
  }

  return (uint64_t *)v9;
}

void sub_100C37E68(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1001B4C40(v2 + 5);
    }
    operator delete(v2);
  }

uint64_t sub_100C37EAC(uint64_t *a1, void *a2)
{
  return sub_100C37EE4((uint64_t)a1, a1, a2);
}

uint64_t sub_100C37EE4(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    char v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8LL);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    uint64_t *v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0LL;
  }

  return result;
}

uint64_t sub_100C37F2C(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10000701C(v7, v9);
  }
  else {
    unint64_t v10 = 0LL;
  }
  __int16 v13 = v10;
  unint64_t v14 = &v10[24 * v4];
  int v16 = &v10[24 * v9];
  sub_1010DDBC0(v14, a2);
  char v15 = v14 + 24;
  sub_100013F10(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100014098((uint64_t)&v13);
  return v11;
}

void sub_100C3801C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100C38030(uint64_t a1)
{
  *(void *)a1 = off_101879338;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100C38090(uint64_t a1)
{
  id v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = v2;
  *(void *)id v2 = *(void *)a1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1010DD48C(v2 + 8, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
    *((void *)v2 + 3) = *(void *)(a1 + 24);
  }

  if (*(char *)(a1 + 55) < 0)
  {
    sub_1010DD48C(v3 + 32, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    *((_OWORD *)v3 + 2) = *(_OWORD *)(a1 + 32);
    *((void *)v3 + 6) = *(void *)(a1 + 48);
  }

  unint64_t v4 = v3 + 56;
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1010DD48C(v4, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }

  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)(a1 + 56);
    *((void *)v3 + 9) = *(void *)(a1 + 72);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100C381EC;
  v6[3] = &unk_10181D3D0;
  v6[4] = v3;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v3,  v6,  0LL,  80LL);
}

void sub_100C381A8(_Unwind_Exception *a1)
{
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100C381EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    operator delete((void *)v1);
  }

void sub_100C38260()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100C382C4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100C38338(_Unwind_Exception *a1)
{
}

uint64_t sub_100C38350()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199AE08, (void *)&_mh_execute_header);
}

uint64_t sub_100C38394(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100C383CC()
{
  return &qword_1019A1EC8;
}

void *sub_100C383D8()
{
  return &unk_10198FE62;
}

uint64_t sub_100C383E4(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101350280;
  *(_OWORD *)(a1 + 16) = xmmword_101350290;
  *(_OWORD *)(a1 + 32) = xmmword_1013502A0;
  *(_OWORD *)(a1 + 48) = xmmword_1013502B0;
  *(_OWORD *)(a1 + 64) = xmmword_1013502C0;
  *(_OWORD *)(a1 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = xmmword_1013502D0;
  *(_OWORD *)(a1 + 96) = xmmword_1013502E0;
  *(void *)&v3[0] = 0LL;
  sub_100C38510(a1 + 112, (unint64_t *)v3, 1LL);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  v3[0] = xmmword_1013502F0;
  v3[1] = unk_101350300;
  sub_100C38510(a1 + 192, (unint64_t *)v3, 4LL);
  *(_WORD *)(a1 + 232) = 257;
  return a1;
}

void sub_100C384E0(_Unwind_Exception *a1)
{
}

void *sub_100C38504()
{
  return &unk_10198FE66;
}

uint64_t sub_100C38510(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      sub_1005EDAF4(a1, a2, a2);
      ++a2;
      v5 -= 8LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100C38570(_Unwind_Exception *a1)
{
}

uint64_t sub_100C38584()
{
  qword_1019A1EC8 = 0x200000002LL;
  dword_1019A1ED0 = 2;
  byte_1019A1ED4 = 1;
  dword_1019A1ED8 = 10;
  qword_1019A1EE0 = 0x4082C00000000000LL;
  sub_100C383E4((uint64_t)&unk_1019A1EE8);
  return __cxa_atexit((void (*)(void *))sub_100C38394, &unk_1019A1EE8, (void *)&_mh_execute_header);
}

uint64_t sub_100C385FC(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48LL))(*(void *)(a3 + 48));
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void, _BYTE *, double))(**(void **)(a3 + 48) + 24LL))( *(void *)(a3 + 48),  v6,  a1);
    if (v6[208])
    {
      sub_100253308(*(void *)(a3 + 16));
      sub_100253308(*(void *)(a3 + 24));
      sub_100253308(*(void *)(a3 + 8));
      return sub_100253308(*(void *)(a3 + 64));
    }
  }

  return result;
}

uint64_t sub_100C386AC(double a1, uint64_t a2, void **a3)
{
  int v5 = v8[208];
  uint64_t result = (*(uint64_t (**)(void *, double))(*a3[1] + 48LL))(a3[1], a1);
  if (!v5)
  {
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v7 = a3 + 2;
    return (*(uint64_t (**)(void, double))(*(void *)*v7 + 48LL))(*v7, a1);
  }

  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(void *, double))(*a3[2] + 48LL))(a3[2], a1);
    if ((_DWORD)result)
    {
      uint64_t result = (*(uint64_t (**)(void *, double))(*a3[3] + 48LL))(a3[3], a1);
      if ((_DWORD)result)
      {
        uint64_t v7 = a3 + 8;
        return (*(uint64_t (**)(void, double))(*(void *)*v7 + 48LL))(*v7, a1);
      }
    }
  }

  return result;
}

float sub_100C38798(uint64_t a1, float a2)
{
  float v3 = *(float *)(a1 + 1364);
  float v4 = *(float *)(a1 + 1368);
  double v5 = a2;
  double v6 = *(float *)(a1 + 1384);
  double v7 = *(float *)(a1 + 1380);
  float v8 = (v7 - a2) / (v7 - v6);
  float v9 = sub_100D086F8(v8, *(float *)(a1 + 1372));
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_1018793A0);
  }
  float v10 = v4 * v9;
  uint64_t v11 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *(double *)(a1 + 120);
    double v13 = *(double *)(a1 + 128);
    *(_DWORD *)std::string buf = 134220032;
    double v39 = v12;
    __int16 v40 = 2048;
    double v41 = v13;
    __int16 v42 = 2048;
    double v43 = v5;
    __int16 v44 = 2048;
    double v45 = v7;
    __int16 v46 = 2048;
    double v47 = v6;
    __int16 v48 = 2048;
    double v49 = v4;
    __int16 v50 = 2048;
    double v51 = v13 - v12;
    __int16 v52 = 2048;
    double v53 = v3;
    __int16 v54 = 2048;
    double v55 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), % f, duration(s), %f, weight(kg), %f, METS, %f",  buf,  0x5Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    double v15 = *(double *)(a1 + 120);
    double v16 = *(double *)(a1 + 128);
    int v20 = 134220032;
    double v21 = v15;
    __int16 v22 = 2048;
    double v23 = v16;
    __int16 v24 = 2048;
    double v25 = v5;
    __int16 v26 = 2048;
    double v27 = v7;
    __int16 v28 = 2048;
    double v29 = v6;
    __int16 v30 = 2048;
    double v31 = v4;
    __int16 v32 = 2048;
    double v33 = v16 - v15;
    __int16 v34 = 2048;
    double v35 = v3;
    __int16 v36 = 2048;
    double v37 = v10;
    LODWORD(v19) = 92;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), % f, duration(s), %f, weight(kg), %f, METS, %f",  COERCE_DOUBLE(&v20),  v19);
    int v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static float CLNatalieCycleModel::computeHRMets(float, const CLNatalieModelInput &)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  return v10;
}

void sub_100C38A4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 1364);
  double v65 = *(double *)(a2 + 624);
  uint64_t v7 = *(void *)(a2 + 640);
  double v8 = *(double *)(a2 + 816);
  int v9 = *(_DWORD *)(a2 + 832);
  float v10 = *(double *)(a2 + 648);
  float v11 = *(double *)(a2 + 840);
  unsigned int v12 = *(_DWORD *)(a2 + 400);
  if (v10 <= 25.0)
  {
    float v15 = *(double *)(a2 + 648);
  }

  else
  {
    double v13 = *(double *)(a2 + 616);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    unint64_t v14 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218496;
      double v76 = v13;
      __int16 v77 = 2048;
      double v78 = v10;
      __int16 v79 = 2048;
      *(void *)std::stringbuf::string_type v80 = 0x4039000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_1018793A0);
      }
      int v67 = 134218496;
      double v68 = v13;
      __int16 v69 = 2048;
      double v70 = v10;
      __int16 v71 = 2048;
      *(void *)uint64_t v72 = 0x4039000000000000LL;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f",  COERCE_DOUBLE(&v67),  v61,  v63);
      __int16 v54 = (uint8_t *)v53;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v53);
      if (v54 != buf) {
        free(v54);
      }
    }

    float v15 = 25.0;
  }

  if (v11 > 5.0)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    double v16 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218496;
      double v76 = v8;
      __int16 v77 = 2048;
      double v78 = v11;
      __int16 v79 = 2048;
      *(void *)std::stringbuf::string_type v80 = 0x4014000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_1018793A0);
      }
      int v67 = 134218496;
      double v68 = v8;
      __int16 v69 = 2048;
      double v70 = v11;
      __int16 v71 = 2048;
      *(void *)uint64_t v72 = 0x4014000000000000LL;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f",  COERCE_DOUBLE(&v67),  v61,  v63);
      int v56 = (uint8_t *)v55;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v55);
      if (v56 != buf) {
        free(v56);
      }
    }

    float v11 = 5.0;
  }

  float v17 = 0.0;
  float v18 = 0.0;
  if (sub_1003DBFB4(a2))
  {
    float v19 = *(double *)(a2 + 560);
    float v18 = sub_100C38798(a2, v19);
  }

  if (*(double *)(a2 + 616) > 0.0)
  {
    float v20 = 0.0;
    if (v11 >= 0.0) {
      float v21 = v11;
    }
    else {
      float v21 = 0.0;
    }
    if (v21 > 5.0) {
      float v21 = 5.0;
    }
    if (v15 >= 0.0) {
      float v20 = v15;
    }
    if (v20 > 25.0) {
      float v20 = 25.0;
    }
    sub_100C39A28(v20, v21, *(float *)(a2 + 1364));
    float v17 = v22;
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    double v23 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      double v24 = *(double *)(a2 + 120);
      uint64_t v25 = *(void *)(a2 + 128);
      *(_DWORD *)std::string buf = 134218496;
      double v76 = v17;
      __int16 v77 = 2048;
      double v78 = v24;
      __int16 v79 = 2048;
      *(void *)std::stringbuf::string_type v80 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Cycle, metsWR,%f,startTime,%f,endTime,%f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_1018793A0);
      }
      double v57 = *(double *)(a2 + 120);
      uint64_t v58 = *(void *)(a2 + 128);
      int v67 = 134218496;
      double v68 = v17;
      __int16 v69 = 2048;
      double v70 = v57;
      __int16 v71 = 2048;
      *(void *)uint64_t v72 = v58;
      LODWORD(v61) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Cycle, metsWR,%f,startTime,%f,endTime,%f",  COERCE_DOUBLE(&v67),  v61,  v63);
      uint64_t v60 = (uint8_t *)v59;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v59);
      if (v60 != buf) {
        free(v60);
      }
    }
  }

  else {
    float v26 = 4.4021;
  }
  *(float *)a3 = v18;
  *(float *)(a3 + 4) = v17;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v17;
  *(void *)(a3 + 16) = 0x408CDDEA00000000LL;
  *(_DWORD *)(a3 + 24) = 3;
  *((float *)&v66 + 1) = v26;
  *(float *)(a3 + 28) = v26;
  *(void *)(a3 + 32) = 0x200000003LL;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_1018793A0);
  }
  double v27 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    double v28 = *(double *)(a2 + 120);
    double v29 = *(double *)(a2 + 128);
    *(_DWORD *)std::string buf = 134219776;
    double v76 = v28;
    __int16 v77 = 2048;
    double v78 = v29;
    __int16 v79 = 1024;
    *(_DWORD *)std::stringbuf::string_type v80 = v9;
    *(_WORD *)&v80[4] = 2048;
    *(double *)&v80[6] = v15;
    *(_WORD *)&v80[14] = 2048;
    *(double *)&v80[16] = v11;
    *(_WORD *)&v80[24] = 2048;
    *(double *)&v80[26] = v29 - v28;
    *(_WORD *)&v80[34] = 2048;
    double v81 = v6;
    *(_WORD *)uint64_t v82 = 2048;
    *(double *)&v82[2] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f",  buf,  0x4Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    double v41 = *(double *)(a2 + 120);
    double v42 = *(double *)(a2 + 128);
    int v67 = 134219776;
    double v68 = v41;
    __int16 v69 = 2048;
    double v70 = v42;
    __int16 v71 = 1024;
    *(_DWORD *)uint64_t v72 = v9;
    *(_WORD *)&v72[4] = 2048;
    *(double *)&v72[6] = v15;
    *(_WORD *)&v72[14] = 2048;
    *(double *)&v72[16] = v11;
    *(_WORD *)&v72[24] = 2048;
    *(double *)&v72[26] = v42 - v41;
    *(_WORD *)&v72[34] = 2048;
    double v73 = v6;
    *(_WORD *)uint64_t v74 = 2048;
    *(double *)&v74[2] = v17;
    LODWORD(v61) = 78;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f",  COERCE_DOUBLE(&v67),  v61,  LODWORD(v63),  v64,  v65,  v66);
    __int16 v44 = (uint8_t *)v43;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v43);
    if (v44 != buf) {
      free(v44);
    }
  }

  sub_100B6DBA8((double *)(a1 + 8), a2);
  unsigned int v30 = sub_1003DBFB4(a2);
  else {
    unsigned int v31 = 0;
  }
  uint64_t v32 = (8 * (v12 > 2)) | (4 * (*(double *)(a2 + 616) > 0.0)) | (2 * (*(_DWORD *)(a2 + 832) != 0)) | v31;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_1018793A0);
  }
  double v33 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v34 = v9;
    unsigned int v35 = v12;
    double v36 = *(double *)(a2 + 120);
    double v37 = *(double *)(a2 + 128);
    int v38 = sub_1003DBFB4(a2);
    BOOL v39 = *(double *)(a2 + 616) > 0.0;
    uint64_t v40 = *(void *)(a2 + 600);
    *(_DWORD *)std::string buf = 134220288;
    double v76 = v36;
    __int16 v77 = 2048;
    double v78 = v37;
    unsigned int v12 = v35;
    int v9 = v34;
    __int16 v79 = 1024;
    *(_DWORD *)std::stringbuf::string_type v80 = v32;
    *(_WORD *)&v80[4] = 1024;
    *(_DWORD *)&v80[6] = v34;
    *(_WORD *)&v80[10] = 2048;
    *(double *)&v80[12] = v15;
    *(_WORD *)&v80[20] = 2048;
    *(double *)&v80[22] = v11;
    *(_WORD *)&v80[30] = 1024;
    *(_DWORD *)&v80[32] = v38;
    LOWORD(v81) = 1024;
    *(_DWORD *)((char *)&v81 + 2) = v31;
    HIWORD(v81) = 1024;
    *(_DWORD *)uint64_t v82 = v39;
    *(_WORD *)&v82[4] = 2048;
    *(void *)&v82[6] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, h speed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f",  buf,  0x52u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    HIDWORD(v62) = v12;
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    uint64_t v45 = qword_1019344D8;
    double v46 = *(double *)(a2 + 120);
    double v47 = *(double *)(a2 + 128);
    int v48 = sub_1003DBFB4(a2);
    BOOL v49 = *(double *)(a2 + 616) > 0.0;
    uint64_t v50 = *(void *)(a2 + 600);
    int v67 = 134220288;
    double v68 = v46;
    __int16 v69 = 2048;
    double v70 = v47;
    __int16 v71 = 1024;
    *(_DWORD *)uint64_t v72 = v32;
    *(_WORD *)&v72[4] = 1024;
    *(_DWORD *)&v72[6] = v9;
    *(_WORD *)&v72[10] = 2048;
    *(double *)&v72[12] = v15;
    *(_WORD *)&v72[20] = 2048;
    *(double *)&v72[22] = v11;
    *(_WORD *)&v72[30] = 1024;
    *(_DWORD *)&v72[32] = v48;
    LOWORD(v73) = 1024;
    *(_DWORD *)((char *)&v73 + 2) = v31;
    HIWORD(v73) = 1024;
    *(_DWORD *)uint64_t v74 = v49;
    *(_WORD *)&v74[4] = 2048;
    *(void *)&v74[6] = v50;
    LODWORD(v62) = 82;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  2LL,  "Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, h speed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f",  COERCE_DOUBLE(&v67),  v62,  v7,  LODWORD(v64),  v65,  v66);
    __int16 v52 = (uint8_t *)v51;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)",  "%s\n",  v51);
    if (v52 != buf) {
      free(v52);
    }
  }

  __asm { BR              X9 }

void sub_100C399F8(float a1, float a2, float a3)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  if (a2 > 5.0) {
    a2 = 5.0;
  }
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  if (a1 > 25.0) {
    a1 = 25.0;
  }
  sub_100C39A28(a1, a2, a3);
}

void sub_100C39A28(float a1, float a2, float a3)
{
  if (a3 > 0.0)
  {
    double v5 = pow(a1, 3.0) * 0.167999998 / a3;
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018793A0);
    }
    float v6 = a1 * 0.194;
    float v7 = a2 * 7.884;
    float v8 = v5;
    int v9 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218496;
      double v19 = v6;
      __int16 v20 = 2048;
      double v21 = v7;
      __int16 v22 = 2048;
      double v23 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Cycle, RollingResistance,%f,gravity,%f,wind,%f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_1018793A0);
      }
      int v12 = 134218496;
      double v13 = v6;
      __int16 v14 = 2048;
      double v15 = v7;
      __int16 v16 = 2048;
      double v17 = v8;
      LODWORD(v11) = 32;
      float v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Cycle, RollingResistance,%f,gravity,%f,wind,%f",  COERCE_DOUBLE(&v12),  v11);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static float CLNatalieCycleModel::computeWRMETS(const float, const float, const float)",  "%s\n",  v10);
    }
  }

void sub_100C39C84(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100C39CB0( uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  *(void *)uint64_t result = a2;
  *(double *)(result + 8) = a8;
  *(double *)(result + 16) = a9;
  *(double *)(result + 24) = a10;
  *(double *)(result + 32) = a11;
  *(double *)(result + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a12;
  *(_DWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 52) = a4;
  *(_DWORD *)(result + 56) = a5;
  *(double *)(result + 64) = a13;
  *(_DWORD *)(result + 76) = a6;
  *(void *)(result + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(_BYTE *)(result + 88) = 0;
  *(_DWORD *)(result + 92) = a7;
  return result;
}

uint64_t sub_100C39CE0@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>, double a3@<D0>)
{
  float v6 = sub_10000CF44(&v46, (uint64_t)"mac, ", 5LL);
  sub_1007EC360(&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  sub_10000CF44(v6, (uint64_t)p_p, size);
  int v9 = sub_10000CF44(&v46, (uint64_t)", lat, ", 7LL);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 13LL;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 8));
  double v11 = sub_10000CF44(&v46, (uint64_t)", lon, ", 7LL);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 24) = 13LL;
  *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 16));
  double v13 = sub_10000CF44(&v46, (uint64_t)", alt, ", 7LL);
  uint64_t v14 = *v13;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 4LL;
  *(uint64_t *)((char *)v13 + *(void *)(v14 - 24) + 16) = 2LL;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(void *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 24));
  double v15 = sub_10000CF44(&v46, (uint64_t)", acc, ", 7LL);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 4LL;
  *(uint64_t *)((char *)v15 + *(void *)(v16 - 24) + 16) = 2LL;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 32));
  double v17 = sub_10000CF44(&v46, (uint64_t)", vacc, ", 8LL);
  uint64_t v18 = *v17;
  *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + 24) = 4LL;
  *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 16) = 2LL;
  *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 40));
  double v19 = sub_10000CF44(&v46, (uint64_t)", channel, ", 11LL);
  uint64_t v20 = *v19;
  *(uint64_t *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 1LL;
  *(uint64_t *)((char *)v19 + *(void *)(v20 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(void *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 52));
  double v21 = sub_10000CF44(&v46, (uint64_t)", score, ", 9LL);
  uint64_t v22 = *v21;
  *(uint64_t *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 1LL;
  *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(void *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v21, *(unsigned int *)(a1 + 76));
  double v23 = sub_10000CF44(&v46, (uint64_t)", reach, ", 9LL);
  uint64_t v24 = *v23;
  *(uint64_t *)((char *)v23 + *(void *)(*v23 - 24) + 24) = 1LL;
  *(uint64_t *)((char *)v23 + *(void *)(v24 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v23 + *(void *)(v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(void *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v23, *(unsigned int *)(a1 + 48));
  uint64_t v25 = sub_10000CF44(&v46, (uint64_t)", rssi, ", 8LL);
  uint64_t v26 = *v25;
  *(uint64_t *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 1LL;
  *(uint64_t *)((char *)v25 + *(void *)(v26 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v25, *(unsigned int *)(a1 + 72));
  double v27 = sub_10000CF44(&v46, (uint64_t)", qTime, ", 9LL);
  uint64_t v28 = *v27;
  *(uint64_t *)((char *)v27 + *(void *)(*v27 - 24) + 24) = 8LL;
  *(uint64_t *)((char *)v27 + *(void *)(v28 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v27 + *(void *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(void *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 64));
  double v29 = sub_10000CF44(&v46, (uint64_t)", ", 2LL);
  uint64_t v30 = *v29;
  *(uint64_t *)((char *)v29 + *(void *)(*v29 - 24) + 24) = 8LL;
  *(uint64_t *)((char *)v29 + *(void *)(v30 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v29 + *(void *)(v30 - 24) + 8) = *(_DWORD *)((_BYTE *)v29 + *(void *)(v30 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(a3 - *(double *)(a1 + 64));
  unsigned int v31 = sub_10000CF44(&v46, (uint64_t)", sTime, ", 9LL);
  uint64_t v32 = *v31;
  *(uint64_t *)((char *)v31 + *(void *)(*v31 - 24) + 24) = 8LL;
  *(uint64_t *)((char *)v31 + *(void *)(v32 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v31 + *(void *)(v32 - 24) + 8) = *(_DWORD *)((_BYTE *)v31 + *(void *)(v32 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 80));
  double v33 = sub_10000CF44(&v46, (uint64_t)", ", 2LL);
  uint64_t v34 = *v33;
  *(uint64_t *)((char *)v33 + *(void *)(*v33 - 24) + 24) = 1LL;
  *(uint64_t *)((char *)v33 + *(void *)(v34 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v33 + *(void *)(v34 - 24) + 8) = *(_DWORD *)((_BYTE *)v33 + *(void *)(v34 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(a3 - *(double *)(a1 + 80));
  unsigned int v35 = sub_10000CF44(&v46, (uint64_t)", ", 2LL);
  uint64_t v36 = *v35;
  *(uint64_t *)((char *)v35 + *(void *)(*v35 - 24) + 24) = 1LL;
  *(uint64_t *)((char *)v35 + *(void *)(v36 - 24) + 16) = 0LL;
  *(_DWORD *)((char *)v35 + *(void *)(v36 - 24) + 8) = *(_DWORD *)((_BYTE *)v35 + *(void *)(v36 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v35, *(unsigned int *)(a1 + 92));
  double v37 = sub_10000CF44(&v46, (uint64_t)", flg, -", 8LL);
  __p.__r_.__value_.__s.__data_[0] = 45;
  int v38 = sub_10000CF44(v37, (uint64_t)&__p, 1LL);
  if (*(_BYTE *)(a1 + 88)) {
    std::string::value_type v39 = 84;
  }
  else {
    std::string::value_type v39 = 45;
  }
  __p.__r_.__value_.__s.__data_[0] = v39;
  uint64_t v40 = sub_10000CF44(v38, (uint64_t)&__p, 1LL);
  if ((*(_DWORD *)(a1 + 56) & 1) != 0) {
    std::string::value_type v41 = 77;
  }
  else {
    std::string::value_type v41 = 45;
  }
  __p.__r_.__value_.__s.__data_[0] = v41;
  sub_10000CF44(v40, (uint64_t)&__p, 1LL);
  std::stringbuf::str(a2, &v47);
  *(void *)((char *)v45
  uint64_t v46 = v42;
  std::streambuf::~streambuf(&v47);
  return std::ios::~ios(&v48);
}

void sub_100C3A31C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

double sub_100C3A384@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0xFFFF;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a2 + 44) = _Q0;
  *(_OWORD *)(a2 + 6sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 88) = 0xBFF0000000000000LL;
  *(void *)(a2 + 108) = 0LL;
  *(void *)(a2 + 10sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(void *)(a2 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 128) = 0LL;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)(a2 + 96) = 4;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 8);
  *(int8x16_t *)(a2 + 2sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(void *)(a2 + 36) = *(void *)(a1 + 40);
  double result = *(double *)(a1 + 64);
  *(double *)(a2 + 76) = result;
  return result;
}

uint64_t sub_100C3A3F8(uint64_t result, int a2, int a3, double a4)
{
  *(_DWORD *)(result + 72) = a2;
  *(double *)(result + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a4;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

BOOL sub_100C3A408(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 1;
}

BOOL sub_100C3A418(double *a1)
{
  BOOL v1 = 0;
  double v2 = a1[1];
  if (v2 <= 90.0 && v2 >= -90.0)
  {
    double v3 = a1[2];
    BOOL v1 = v3 <= 180.0 && v3 >= -180.0;
  }

  return a1[4] > -1.0 && v1;
}

double sub_100C3A480@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a2 + 32) = _Q0;
  double result = NAN;
  *(void *)(a2 + 48) = -1LL;
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0LL;
  *(_DWORD *)(a2 + 76) = -1;
  *(void *)(a2 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(_BYTE *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 92) = -1;
  return result;
}

uint64_t sub_100C3A4B8@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a4 + 32) = _Q1;
  *(_DWORD *)(a4 + 52) = a3;
  *(_DWORD *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0LL;
  *(_BYTE *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 92) = -1;
  *(_DWORD *)(a4 + 72) = a2;
  *(_DWORD *)(a4 + 76) = -1;
  *(double *)(a4 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a5;
  *(_DWORD *)(a4 + 48) = -1;
  return result;
}

BOOL sub_100C3A4EC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 76) != -1;
}

uint64_t sub_100C3A4FC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) == -1)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_1018793E0);
    }
    double v2 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "fScore is not initialized!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018793E0);
      }
      v5[0] = 0;
      float v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "fScore is not initialized!",  v5,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "int CLWifiAPLocation::score() const", "%s\n", v4);
    }
  }

  return *(unsigned int *)(a1 + 76);
}

void sub_100C3A69C(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100C3A6C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100C3A6F0(int a1)
{
  int v9 = a1;
  (*(void (**)(uint64_t *))(qword_1019A1FD8 + 16))(&qword_1019A1FD8);
  uint64_t v2 = qword_1019A1FF0;
  if (!qword_1019A1FF0) {
    goto LABEL_12;
  }
  double v3 = &qword_1019A1FF0;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a1;
    if (v4 >= a1) {
      float v6 = (uint64_t *)v2;
    }
    else {
      float v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      double v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }

  while (*v6);
  if (v3 == &qword_1019A1FF0 || *((_DWORD *)v3 + 8) > a1)
  {
LABEL_12:
    sub_101266F7C();
    uint64_t result = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesSetGlobalProperties.mm",  21,  "getRootDirectoryForTileType");
    __break(1u);
  }

  else
  {
    float v7 = sub_10000C6DC((uint64_t)&qword_1019A1FE8, &v9);
    (*(void (**)(uint64_t *))(qword_1019A1FD8 + 24))(&qword_1019A1FD8);
    return (uint64_t)v7;
  }

  return result;
}

void sub_100C3A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100C3A7F4(int a1, const std::string *a2)
{
  int v5 = a1;
  (*(void (**)(uint64_t *))(qword_1019A1FD8 + 16))(&qword_1019A1FD8);
  float v6 = &v5;
  double v3 = sub_1004C2E20((uint64_t **)&qword_1019A1FE8, &v5, (uint64_t)&unk_1012CF090, &v6);
  std::string::operator=((std::string *)(v3 + 5), a2);
  return (*(uint64_t (**)(uint64_t *))(qword_1019A1FD8 + 24))(&qword_1019A1FD8);
}

void sub_100C3A888(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100C3A89C(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100C3A8C8()
{
  qword_1019A1FF8 = 0LL;
  qword_1019A1FF0 = 0LL;
  qword_1019A1FE8 = (uint64_t)&qword_1019A1FF0;
  return __cxa_atexit((void (*)(void *))sub_100C3A6C8, &qword_1019A1FE8, (void *)&_mh_execute_header);
}

uint64_t sub_100C3A940(uint64_t a1)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = a1 + 7600;
  do
  {
    uint64_t v4 = a1 + v2;
    int v5 = *(void **)(a1 + v2 + 7544);
    if (v5)
    {
      *(void *)(v4 + 7552) = v5;
      operator delete(v5);
    }

    v2 -= 80LL;
  }

  while (v2 != -7600);
  return a1;
}

uint64_t sub_100C3A9B4(uint64_t a1)
{
  uint64_t v2 = 1280LL;
  do
  {
    uint64_t v3 = a1 + v2;
    uint64_t v4 = *(void **)(a1 + v2 - 56);
    if (v4)
    {
      *(void *)(v3 - 48) = v4;
      operator delete(v4);
    }

    v2 -= 80LL;
  }

  while (v2);
  return a1;
}

void sub_100C3ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

id sub_100C3AFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100C3B054;
  v8[3] = &unk_10183D288;
  _DWORD v8[4] = a3;
  v8[5] = a2;
  __int128 v9 = *(_OWORD *)(a1 + 32);
  return [v6 async:v8];
}

void sub_100C3B054(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101879420);
    }
    uint64_t v2 = qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
    {
      double v3 = *(double *)(a1 + 32);
      int v23 = 68289283;
      int v24 = 0;
      __int16 v25 = 2082;
      uint64_t v26 = "";
      __int16 v27 = 2113;
      double v28 = v3;
      uint64_t v4 = "{msg%{public}.0s:Received error when fetching LOI, location: :%{private, location:escape_only}@}";
      int v5 = (os_log_s *)v2;
LABEL_6:
      uint32_t v6 = 28;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v23, v6);
      return;
    }

    return;
  }

  float v7 = *(void **)(a1 + 40);
  if (v7 && ![v7 type])
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101879420);
    }
    uint64_t v12 = qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 68289026;
      int v24 = 0;
      __int16 v25 = 2082;
      uint64_t v26 = "";
      uint64_t v4 = "{msg%{public}.0s:LOI type is home}";
      int v5 = (os_log_s *)v12;
      uint32_t v6 = 18;
      goto LABEL_7;
    }

    return;
  }

  if ([*(id *)(a1 + 48) isEntry:*(void *)(a1 + 56)])
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 56), "arrivalDate"), "timeIntervalSinceReferenceDate");
    double v9 = -120.0;
LABEL_14:
    double v10 = v8 + v9;
    double Current = CFAbsoluteTimeGetCurrent();
    goto LABEL_20;
  }

  if ([*(id *)(a1 + 48) isDeparture:*(void *)(a1 + 56)])
  {
    double v8 = CFAbsoluteTimeGetCurrent();
    double v9 = -600.0;
    goto LABEL_14;
  }

  double v10 = 2.22507386e-308;
  double Current = 1.79769313e308;
LABEL_20:
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_101879420);
  }
  double v13 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
  {
    int v23 = 68289539;
    int v24 = 0;
    __int16 v25 = 2082;
    uint64_t v26 = "";
    __int16 v27 = 2049;
    double v28 = v10;
    __int16 v29 = 2049;
    double v30 = Current;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Computed timestamps for tracks, start_s:%{private}.09f, end_s:%{private}.09f}",  (uint8_t *)&v23,  0x26u);
  }

  if ([*(id *)(a1 + 48) hasPressureChangeFrom:v10 to:Current])
  {
    uint64_t v14 = *(void **)(a1 + 40);
    if (v14) {
      *(double *)&uint64_t v15 = COERCE_DOUBLE([v14 type]);
    }
    else {
      *(double *)&uint64_t v15 = NAN;
    }
    if ([*(id *)(a1 + 48) shouldSubmit:v15 calibrationType:3])
    {
      uint64_t v16 = *(void **)(a1 + 48);
      [*(id *)(a1 + 56) coordinate];
      double v18 = v17;
      double v20 = v19;
      [*(id *)(a1 + 56) horizontalAccuracy];
      objc_msgSend(v16, "sendTrackFrom:to:location:horrUnc:type:", 3, v10, Current, v18, v20, v21);
    }

    else
    {
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_101879420);
      }
      uint64_t v22 = qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
      {
        int v23 = 68289283;
        int v24 = 0;
        __int16 v25 = 2082;
        uint64_t v26 = "";
        __int16 v27 = 2049;
        double v28 = *(double *)&v15;
        uint64_t v4 = "{msg%{public}.0s:number of submissions exceeded for, type:%{private}ld}";
        int v5 = (os_log_s *)v22;
        goto LABEL_6;
      }
    }
  }

void sub_100C3BF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100C3C580( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_100C3CAE8(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_100C3CB14(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    float v7 = (char **)(v5 + 8 * (v4 >> 8));
    if (v6 == v5)
    {
      double v8 = 0LL;
      double v11 = 0LL;
      double v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
    }

    else
    {
      double v8 = &(*v7)[16 * v4];
      unint64_t v9 = a2[5] + v4;
      double v10 = (char *)(v5 + 8 * (v9 >> 8));
      double v11 = (char *)(*(void *)v10 + 16LL * v9);
    }

    sub_100C3CB9C(a1, v7, v8, v10, v11);
  }

  return a1;
}

void *sub_100C3CB9C(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 4) + 32 * (a4 - (char *)a2) - ((a3 - *a2) >> 4);
  }
  return sub_100C3CBD0(a1, a2, a3, v5);
}

void *sub_100C3CBD0(void *a1, char **a2, char *a3, unint64_t a4)
{
  int v23 = a2;
  int v24 = a3;
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    unint64_t v16 = a1[4];
    uint64_t v17 = a1[1];
    double v18 = (char *)(v17 + 8 * (v16 >> 8));
    if (a1[2] == v17) {
      uint64_t v19 = 0LL;
    }
    else {
      uint64_t v19 = *(void *)v18 + 16LL * v16;
    }
    v25[0] = a2;
    v25[1] = a3;
    double v21 = (char **)sub_10025C760((uint64_t)v25, a4);
    uint64_t v26 = v18;
    uint64_t v27 = v19;
    sub_100C3CF08(a2, a3, v21, v22, (uint64_t)&v26);
    return (void *)sub_100C3CE18((uint64_t)a1, v26, v27);
  }

  else
  {
    unint64_t v9 = (char **)sub_10025C760((uint64_t)&v23, v7);
    double v10 = (__int128 *)v8;
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    double v13 = (char *)(v12 + 8 * (v11 >> 8));
    if (a1[2] == v12) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = *(void *)v13 + 16LL * v11;
    }
    uint64_t v26 = v13;
    uint64_t v27 = v14;
    sub_100C3CF08(v23, v24, v9, v8, (uint64_t)&v26);
    return sub_100C3CCEC(a1, v9, v10, a4 - a1[5]);
  }

void *sub_100C3CCEC(void *a1, void *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100C3D094(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  double v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 16LL * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  uint64_t result = sub_10025C760((uint64_t)v22, a4);
  while (v14 != v16)
  {
    uint64_t v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096LL);
    if ((_OWORD *)v14 == v17)
    {
      uint64_t v17 = (_OWORD *)v14;
    }

    else
    {
      double v18 = (_OWORD *)v14;
      do
      {
        __int128 v19 = *a3++;
        *double v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          double v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }

        ++v18;
      }

      while (v18 != v17);
    }

    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }

  return result;
}

uint64_t sub_100C3CE18(uint64_t result, char *a2, uint64_t a3)
{
  double v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 8));
  if (v7 == v6) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)v8 + 16LL * v5;
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 4) + 32 * (v8 - a2);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 4);
    if (v12 >= 1)
    {
      double v13 = (char *)(v6 + 8 * (v4 >> 8));
      if (v7 == v6) {
        uint64_t v14 = 0LL;
      }
      else {
        uint64_t v14 = *(void *)v13 + 16LL * v4;
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0LL;
      }
      else {
        uint64_t v15 = (v11 >> 4) + 32 * (a2 - v13) - ((v14 - *(void *)v13) >> 4);
      }
      sub_10025C760((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        uint64_t result = sub_100232D9C(v3, 1);
      while ((result & 1) != 0);
    }
  }

  return result;
}

double sub_100C3CF08(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }

  else
  {
    uint64_t v8 = a1 + 1;
    sub_100C3CFD4(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_100C3CFD4(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }

    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }

  sub_100C3CFD4(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100C3CFD4@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 16 * v12 - 4);
      }
      v9 += 16 * v12;
      if (v9 == a3) {
        break;
      }
      double v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }

    __dst += 16 * v12;
    else {
      --v6;
    }
  }

  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void sub_100C3D094(void *a1, unint64_t a2)
{
  double v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int16 v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          unsigned int v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          double v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            double v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            unsigned int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unsigned int v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          double v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            double v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int16 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            double v3 = (char *)a1[1];
          }

          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          double v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)double v3 = v18;
      double v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 255LL;
          }
          else {
            uint64_t v64 = 256LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        double v66 = (char *)a1[2];
        do
        {
          int v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          double v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int16 v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              double v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              double v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                double v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                __int16 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)__int16 v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                double v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              std::stringbuf::string_type v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                double v66 = (char *)a1[1];
              }

              __int16 v77 = &v66[-8 * (v74 >> 1)];
              double v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)double v66 = v69;
          double v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        __int128 v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        __int128 v15 = 0LL;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        std::string::value_type v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              BOOL v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              double v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int16 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int16 v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              std::stringbuf v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          std::string::value_type v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      double v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      int v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_100C3D5A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3D61C()
{
  v365[0] = xmmword_101350360;
  v365[1] = xmmword_101350370;
  v365[2] = xmmword_101350380;
  v365[3] = xmmword_101350390;
  v365[4] = xmmword_1013503A0;
  v365[5] = xmmword_1013503B0;
  v365[6] = xmmword_1013503C0;
  v365[7] = xmmword_101350360;
  qword_10199B050 = 0LL;
  qword_10199B058 = 0LL;
  qword_10199B048 = 0LL;
  unsigned __int8 v0 = (char *)operator new(0x80uLL);
  uint64_t v1 = 0LL;
  qword_10199B048 = (uint64_t)v0;
  qword_10199B050 = (uint64_t)v0;
  qword_10199B058 = (uint64_t)(v0 + 128);
  do
  {
    uint64_t v2 = &v0[v1 * 16];
    __int128 v3 = v365[v1 + 1];
    *(_OWORD *)uint64_t v2 = v365[v1];
    *((_OWORD *)v2 + 1) = v3;
    v1 += 2LL;
  }

  while (v1 != 8);
  qword_10199B050 = (uint64_t)(v0 + 128);
  xmmword_10199B060 = xmmword_1013503D0;
  unk_10199B070 = xmmword_1013503E0;
  sub_1010DDBC0(&qword_10199B080, "Tokyo-2");
  v364[0] = xmmword_1013503F0;
  v364[1] = xmmword_101350400;
  v364[2] = xmmword_101350410;
  v364[3] = xmmword_101350420;
  v364[4] = xmmword_101350430;
  v364[5] = xmmword_101350440;
  v364[6] = xmmword_101350450;
  v364[7] = xmmword_101350460;
  v364[8] = xmmword_101350470;
  v364[9] = xmmword_101350480;
  v364[10] = xmmword_1013503F0;
  qword_10199B0A0 = 0LL;
  qword_10199B0A8 = 0LL;
  qword_10199B098 = 0LL;
  uint64_t v4 = (char *)operator new(0xB0uLL);
  uint64_t v5 = 0LL;
  qword_10199B098 = (uint64_t)v4;
  qword_10199B0A0 = (uint64_t)v4;
  qword_10199B0A8 = (uint64_t)(v4 + 176);
  do
  {
    *(_OWORD *)&v4[v5 * 16] = v364[v5];
    ++v5;
  }

  while (v5 != 11);
  qword_10199B0A0 = (uint64_t)(v4 + 176);
  xmmword_10199B0B0 = xmmword_101350490;
  unk_10199B0C0 = xmmword_1013504A0;
  sub_1010DDBC0(&qword_10199B0D0, "Tokyo-3");
  v363[0] = xmmword_1013504B0;
  v363[1] = xmmword_1013504C0;
  v363[2] = xmmword_1013504D0;
  v363[3] = xmmword_1013504E0;
  v363[4] = xmmword_1013504B0;
  qword_10199B0F0 = 0LL;
  qword_10199B0F8 = 0LL;
  qword_10199B0E8 = 0LL;
  unint64_t v6 = (char *)operator new(0x50uLL);
  uint64_t v7 = 0LL;
  qword_10199B0E8 = (uint64_t)v6;
  qword_10199B0F0 = (uint64_t)v6;
  qword_10199B0F8 = (uint64_t)(v6 + 80);
  do
  {
    *(_OWORD *)&v6[v7 * 16] = v363[v7];
    ++v7;
  }

  while (v7 != 5);
  qword_10199B0F0 = (uint64_t)(v6 + 80);
  xmmword_10199B100 = xmmword_1013504F0;
  unk_10199B110 = xmmword_101350500;
  sub_1010DDBC0(&qword_10199B120, "Hong Kong-1");
  v362[0] = xmmword_101350510;
  v362[1] = xmmword_101350520;
  v362[2] = xmmword_101350530;
  v362[3] = xmmword_101350540;
  v362[4] = xmmword_101350550;
  v362[5] = xmmword_101350560;
  v362[6] = xmmword_101350570;
  v362[7] = xmmword_101350580;
  v362[8] = xmmword_101350510;
  qword_10199B140 = 0LL;
  qword_10199B148 = 0LL;
  qword_10199B138 = 0LL;
  unint64_t v8 = (char *)operator new(0x90uLL);
  uint64_t v9 = 0LL;
  qword_10199B138 = (uint64_t)v8;
  qword_10199B140 = (uint64_t)v8;
  qword_10199B148 = (uint64_t)(v8 + 144);
  do
  {
    *(_OWORD *)&v8[v9 * 16] = v362[v9];
    ++v9;
  }

  while (v9 != 9);
  qword_10199B140 = (uint64_t)(v8 + 144);
  xmmword_10199B150 = xmmword_101350590;
  unk_10199B160 = xmmword_1013505A0;
  sub_1010DDBC0(&qword_10199B170, "Hong Kong-2");
  v361[0] = xmmword_1013505B0;
  v361[1] = xmmword_1013505C0;
  v361[2] = xmmword_1013505D0;
  v361[3] = xmmword_1013505E0;
  v361[4] = xmmword_1013505F0;
  v361[5] = xmmword_101350600;
  v361[6] = xmmword_101350610;
  v361[7] = xmmword_101350620;
  v361[8] = xmmword_101350630;
  v361[9] = xmmword_101350640;
  v361[10] = xmmword_101350650;
  v361[11] = xmmword_101350660;
  v361[12] = xmmword_1013505B0;
  qword_10199B190 = 0LL;
  qword_10199B198 = 0LL;
  qword_10199B188 = 0LL;
  uint64_t v10 = (char *)operator new(0xD0uLL);
  uint64_t v11 = 0LL;
  qword_10199B188 = (uint64_t)v10;
  qword_10199B190 = (uint64_t)v10;
  qword_10199B198 = (uint64_t)(v10 + 208);
  do
  {
    *(_OWORD *)&v10[v11 * 16] = v361[v11];
    ++v11;
  }

  while (v11 != 13);
  qword_10199B190 = (uint64_t)(v10 + 208);
  xmmword_10199B1A0 = xmmword_101350670;
  unk_10199B1B0 = xmmword_101350680;
  sub_1010DDBC0(&qword_10199B1C0, "Hong Kong-3");
  v360[0] = xmmword_101350690;
  v360[1] = xmmword_1013506A0;
  v360[2] = xmmword_1013506B0;
  v360[3] = xmmword_1013506C0;
  v360[4] = xmmword_1013506D0;
  v360[5] = xmmword_1013506E0;
  v360[6] = xmmword_1013506F0;
  v360[7] = xmmword_101350700;
  v360[8] = xmmword_101350690;
  qword_10199B1E0 = 0LL;
  qword_10199B1E8 = 0LL;
  qword_10199B1D8 = 0LL;
  unint64_t v12 = (char *)operator new(0x90uLL);
  uint64_t v13 = 0LL;
  qword_10199B1D8 = (uint64_t)v12;
  qword_10199B1E0 = (uint64_t)v12;
  qword_10199B1E8 = (uint64_t)(v12 + 144);
  do
  {
    *(_OWORD *)&v12[v13 * 16] = v360[v13];
    ++v13;
  }

  while (v13 != 9);
  qword_10199B1E0 = (uint64_t)(v12 + 144);
  xmmword_10199B1F0 = xmmword_101350710;
  unk_10199B200 = xmmword_101350720;
  sub_1010DDBC0(&qword_10199B210, "Hong Kong-4");
  v359[0] = xmmword_101350730;
  v359[1] = xmmword_101350740;
  v359[2] = xmmword_101350750;
  v359[3] = xmmword_101350760;
  v359[4] = xmmword_101350770;
  v359[5] = xmmword_101350780;
  v359[6] = xmmword_101350790;
  v359[7] = xmmword_1013507A0;
  v359[8] = xmmword_1013507B0;
  v359[9] = xmmword_1013507C0;
  v359[10] = xmmword_1013507D0;
  v359[11] = xmmword_1013507E0;
  v359[12] = xmmword_1013507F0;
  v359[13] = xmmword_101350800;
  v359[14] = xmmword_101350810;
  v359[15] = xmmword_101350820;
  v359[16] = xmmword_101350830;
  v359[17] = xmmword_101350840;
  v359[18] = xmmword_101350850;
  v359[19] = xmmword_101350860;
  v359[20] = xmmword_101350870;
  v359[21] = xmmword_101350880;
  v359[22] = xmmword_101350890;
  v359[23] = xmmword_101350730;
  qword_10199B228 = 0LL;
  qword_10199B230 = 0LL;
  qword_10199B238 = 0LL;
  unint64_t v14 = (char *)operator new(0x180uLL);
  uint64_t v15 = 0LL;
  qword_10199B228 = (uint64_t)v14;
  qword_10199B230 = (uint64_t)v14;
  qword_10199B238 = (uint64_t)(v14 + 384);
  do
  {
    uint64_t v16 = &v14[v15 * 16];
    __int128 v17 = v359[v15 + 1];
    *(_OWORD *)uint64_t v16 = v359[v15];
    *((_OWORD *)v16 + 1) = v17;
    v15 += 2LL;
  }

  while (v15 != 24);
  qword_10199B230 = (uint64_t)(v14 + 384);
  xmmword_10199B240 = xmmword_1013508A0;
  unk_10199B250 = xmmword_1013508B0;
  sub_1010DDBC0(&qword_10199B260, "Singapore-1");
  v358[0] = xmmword_1013508C0;
  v358[1] = xmmword_1013508D0;
  v358[2] = xmmword_1013508E0;
  v358[3] = xmmword_1013508F0;
  v358[4] = xmmword_101350900;
  v358[5] = xmmword_101350910;
  v358[6] = xmmword_101350920;
  v358[7] = xmmword_101350930;
  v358[8] = xmmword_101350940;
  v358[9] = xmmword_101350950;
  v358[10] = xmmword_101350960;
  v358[11] = xmmword_1013508C0;
  qword_10199B280 = 0LL;
  qword_10199B288 = 0LL;
  qword_10199B278 = 0LL;
  uint64_t v18 = (char *)operator new(0xC0uLL);
  uint64_t v19 = 0LL;
  qword_10199B278 = (uint64_t)v18;
  qword_10199B280 = (uint64_t)v18;
  qword_10199B288 = (uint64_t)(v18 + 192);
  do
  {
    uint64_t v20 = &v18[v19 * 16];
    __int128 v21 = v358[v19 + 1];
    *(_OWORD *)uint64_t v20 = v358[v19];
    *((_OWORD *)v20 + 1) = v21;
    v19 += 2LL;
  }

  while (v19 != 12);
  qword_10199B280 = (uint64_t)(v18 + 192);
  xmmword_10199B290 = xmmword_101350970;
  unk_10199B2A0 = xmmword_101350980;
  sub_1010DDBC0(&qword_10199B2B0, "Singapore-2");
  v357[0] = xmmword_101350990;
  v357[1] = xmmword_1013509A0;
  v357[2] = xmmword_1013509B0;
  v357[3] = xmmword_1013509C0;
  v357[4] = xmmword_1013509D0;
  v357[5] = xmmword_1013509E0;
  v357[6] = xmmword_1013509F0;
  v357[7] = xmmword_101350A00;
  v357[8] = xmmword_101350A10;
  v357[9] = xmmword_101350A20;
  v357[10] = xmmword_101350A30;
  v357[11] = xmmword_101350A40;
  v357[12] = xmmword_101350A50;
  v357[13] = xmmword_101350A60;
  v357[14] = xmmword_101350990;
  qword_10199B2D0 = 0LL;
  qword_10199B2D8 = 0LL;
  qword_10199B2C8 = 0LL;
  BOOL v22 = (char *)operator new(0xF0uLL);
  uint64_t v23 = 0LL;
  qword_10199B2C8 = (uint64_t)v22;
  qword_10199B2D0 = (uint64_t)v22;
  qword_10199B2D8 = (uint64_t)(v22 + 240);
  do
  {
    *(_OWORD *)&v22[v23 * 16] = v357[v23];
    ++v23;
  }

  while (v23 != 15);
  qword_10199B2D0 = (uint64_t)(v22 + 240);
  xmmword_10199B2E0 = xmmword_101350A70;
  unk_10199B2F0 = xmmword_101350A80;
  sub_1010DDBC0(&qword_10199B300, "Singapore-3");
  v356[0] = xmmword_101350A90;
  v356[1] = xmmword_101350AA0;
  v356[2] = xmmword_101350AB0;
  v356[3] = xmmword_101350AC0;
  v356[4] = xmmword_101350AD0;
  v356[5] = xmmword_101350AE0;
  v356[6] = xmmword_101350AF0;
  v356[7] = xmmword_101350A90;
  qword_10199B320 = 0LL;
  qword_10199B328 = 0LL;
  qword_10199B318 = 0LL;
  uint64_t v24 = (char *)operator new(0x80uLL);
  uint64_t v25 = 0LL;
  qword_10199B318 = (uint64_t)v24;
  qword_10199B320 = (uint64_t)v24;
  qword_10199B328 = (uint64_t)(v24 + 128);
  do
  {
    int64_t v26 = &v24[v25 * 16];
    __int128 v27 = v356[v25 + 1];
    *(_OWORD *)int64_t v26 = v356[v25];
    *((_OWORD *)v26 + 1) = v27;
    v25 += 2LL;
  }

  while (v25 != 8);
  qword_10199B320 = (uint64_t)(v24 + 128);
  xmmword_10199B330 = xmmword_101350AD0;
  unk_10199B340 = xmmword_101350B00;
  sub_1010DDBC0(&qword_10199B350, "Singapore-4");
  v355[0] = xmmword_101350B10;
  v355[1] = xmmword_101350B20;
  v355[2] = xmmword_101350B30;
  v355[3] = xmmword_101350B40;
  v355[4] = xmmword_101350B50;
  v355[5] = xmmword_101350B60;
  v355[6] = xmmword_101350B70;
  v355[7] = xmmword_101350B80;
  v355[8] = xmmword_101350B90;
  v355[9] = xmmword_101350BA0;
  v355[10] = xmmword_101350BB0;
  v355[11] = xmmword_101350BC0;
  v355[12] = xmmword_101350BD0;
  v355[13] = xmmword_101350BE0;
  v355[14] = xmmword_101350BF0;
  v355[15] = xmmword_101350C00;
  v355[16] = xmmword_101350B10;
  qword_10199B370 = 0LL;
  qword_10199B378 = 0LL;
  qword_10199B368 = 0LL;
  unint64_t v28 = (char *)operator new(0x110uLL);
  uint64_t v29 = 0LL;
  qword_10199B368 = (uint64_t)v28;
  qword_10199B370 = (uint64_t)v28;
  qword_10199B378 = (uint64_t)(v28 + 272);
  do
  {
    *(_OWORD *)&v28[v29 * 16] = v355[v29];
    ++v29;
  }

  while (v29 != 17);
  qword_10199B370 = (uint64_t)(v28 + 272);
  xmmword_10199B380 = xmmword_101350C10;
  unk_10199B390 = xmmword_101350C20;
  sub_1010DDBC0(&qword_10199B3A0, "Singapore-5");
  v354[0] = xmmword_101350C30;
  v354[1] = xmmword_101350C40;
  v354[2] = xmmword_101350C50;
  v354[3] = xmmword_101350C60;
  v354[4] = xmmword_101350C70;
  v354[5] = xmmword_101350C80;
  v354[6] = xmmword_101350C90;
  v354[7] = xmmword_101350C30;
  qword_10199B3C0 = 0LL;
  qword_10199B3C8 = 0LL;
  qword_10199B3B8 = 0LL;
  uint64_t v30 = (char *)operator new(0x80uLL);
  uint64_t v31 = 0LL;
  qword_10199B3B8 = (uint64_t)v30;
  qword_10199B3C0 = (uint64_t)v30;
  qword_10199B3C8 = (uint64_t)(v30 + 128);
  do
  {
    uint64_t v32 = &v30[v31 * 16];
    __int128 v33 = v354[v31 + 1];
    *(_OWORD *)uint64_t v32 = v354[v31];
    *((_OWORD *)v32 + 1) = v33;
    v31 += 2LL;
  }

  while (v31 != 8);
  qword_10199B3C0 = (uint64_t)(v30 + 128);
  xmmword_10199B3D0 = xmmword_101350CA0;
  unk_10199B3E0 = xmmword_101350CB0;
  sub_1010DDBC0(&qword_10199B3F0, "Singapore-6");
  v353[0] = xmmword_101350CC0;
  v353[1] = xmmword_101350CD0;
  v353[2] = xmmword_101350CE0;
  v353[3] = xmmword_101350CF0;
  v353[4] = xmmword_101350D00;
  v353[5] = xmmword_101350D10;
  v353[6] = xmmword_101350D20;
  v353[7] = xmmword_101350D30;
  v353[8] = xmmword_101350D40;
  v353[9] = xmmword_101350CC0;
  qword_10199B410 = 0LL;
  qword_10199B418 = 0LL;
  qword_10199B408 = 0LL;
  uint64_t v34 = (char *)operator new(0xA0uLL);
  uint64_t v35 = 0LL;
  qword_10199B408 = (uint64_t)v34;
  qword_10199B410 = (uint64_t)v34;
  qword_10199B418 = (uint64_t)(v34 + 160);
  do
  {
    uint64_t v36 = &v34[v35 * 16];
    __int128 v37 = v353[v35 + 1];
    *(_OWORD *)uint64_t v36 = v353[v35];
    *((_OWORD *)v36 + 1) = v37;
    v35 += 2LL;
  }

  while (v35 != 10);
  qword_10199B410 = (uint64_t)(v34 + 160);
  xmmword_10199B420 = xmmword_101350D50;
  unk_10199B430 = xmmword_101350D60;
  sub_1010DDBC0(&qword_10199B440, "Singapore-7");
  v352[0] = xmmword_101350D70;
  v352[1] = xmmword_101350D80;
  v352[2] = xmmword_101350D90;
  v352[3] = xmmword_101350DA0;
  v352[4] = xmmword_101350DB0;
  v352[5] = xmmword_101350DC0;
  v352[6] = xmmword_101350D70;
  qword_10199B460 = 0LL;
  qword_10199B468 = 0LL;
  qword_10199B458 = 0LL;
  uint64_t v38 = (char *)operator new(0x70uLL);
  uint64_t v39 = 0LL;
  qword_10199B458 = (uint64_t)v38;
  qword_10199B460 = (uint64_t)v38;
  qword_10199B468 = (uint64_t)(v38 + 112);
  do
  {
    *(_OWORD *)&v38[v39 * 16] = v352[v39];
    ++v39;
  }

  while (v39 != 7);
  qword_10199B460 = (uint64_t)(v38 + 112);
  xmmword_10199B470 = xmmword_101350DD0;
  unk_10199B480 = xmmword_101350DE0;
  sub_1010DDBC0(&qword_10199B490, "Shanghai-1");
  v351[0] = xmmword_101350DF0;
  v351[1] = xmmword_101350E00;
  v351[2] = xmmword_101350E10;
  v351[3] = xmmword_101350E20;
  v351[4] = xmmword_101350E30;
  v351[5] = xmmword_101350E40;
  v351[6] = xmmword_101350E50;
  v351[7] = xmmword_101350E60;
  v351[8] = xmmword_101350E70;
  v351[9] = xmmword_101350E80;
  v351[10] = xmmword_101350E90;
  v351[11] = xmmword_101350EA0;
  v351[12] = xmmword_101350DF0;
  qword_10199B4B0 = 0LL;
  qword_10199B4B8 = 0LL;
  qword_10199B4A8 = 0LL;
  uint64_t v40 = (char *)operator new(0xD0uLL);
  uint64_t v41 = 0LL;
  qword_10199B4A8 = (uint64_t)v40;
  qword_10199B4B0 = (uint64_t)v40;
  qword_10199B4B8 = (uint64_t)(v40 + 208);
  do
  {
    *(_OWORD *)&v40[v41 * 16] = v351[v41];
    ++v41;
  }

  while (v41 != 13);
  qword_10199B4B0 = (uint64_t)(v40 + 208);
  xmmword_10199B4C0 = xmmword_101350EB0;
  unk_10199B4D0 = xmmword_101350EC0;
  sub_1010DDBC0(&qword_10199B4E0, "Shanghai-2");
  v350[0] = xmmword_101350ED0;
  v350[1] = xmmword_101350EE0;
  v350[2] = xmmword_101350EF0;
  v350[3] = xmmword_101350F00;
  v350[4] = xmmword_101350F10;
  v350[5] = xmmword_101350F20;
  v350[6] = xmmword_101350F30;
  v350[7] = xmmword_101350F40;
  v350[8] = xmmword_101350F50;
  v350[9] = xmmword_101350F60;
  v350[10] = xmmword_101350F70;
  v350[11] = xmmword_101350F80;
  v350[12] = xmmword_101350ED0;
  qword_10199B500 = 0LL;
  qword_10199B508 = 0LL;
  qword_10199B4F8 = 0LL;
  uint64_t v42 = (char *)operator new(0xD0uLL);
  uint64_t v43 = 0LL;
  qword_10199B4F8 = (uint64_t)v42;
  qword_10199B500 = (uint64_t)v42;
  qword_10199B508 = (uint64_t)(v42 + 208);
  do
  {
    *(_OWORD *)&v42[v43 * 16] = v350[v43];
    ++v43;
  }

  while (v43 != 13);
  qword_10199B500 = (uint64_t)(v42 + 208);
  xmmword_10199B510 = xmmword_101350F90;
  unk_10199B520 = xmmword_101350FA0;
  sub_1010DDBC0(&qword_10199B530, "Shanghai-3");
  v349[0] = xmmword_101350FB0;
  v349[1] = xmmword_101350FC0;
  v349[2] = xmmword_101350FD0;
  v349[3] = xmmword_101350FE0;
  v349[4] = xmmword_101350FF0;
  v349[5] = xmmword_101351000;
  v349[6] = xmmword_101351010;
  v349[7] = xmmword_101351020;
  v349[8] = xmmword_101351030;
  v349[9] = xmmword_101351040;
  v349[10] = xmmword_101350FB0;
  qword_10199B550 = 0LL;
  qword_10199B558 = 0LL;
  qword_10199B548 = 0LL;
  uint64_t v44 = (char *)operator new(0xB0uLL);
  uint64_t v45 = 0LL;
  qword_10199B548 = (uint64_t)v44;
  qword_10199B550 = (uint64_t)v44;
  qword_10199B558 = (uint64_t)(v44 + 176);
  do
  {
    *(_OWORD *)&v44[v45 * 16] = v349[v45];
    ++v45;
  }

  while (v45 != 11);
  qword_10199B550 = (uint64_t)(v44 + 176);
  xmmword_10199B560 = xmmword_101351050;
  unk_10199B570 = xmmword_101351060;
  sub_1010DDBC0(&qword_10199B580, "Shanghai-4");
  v348[0] = xmmword_101351070;
  v348[1] = xmmword_101351080;
  v348[2] = xmmword_101351090;
  v348[3] = xmmword_1013510A0;
  v348[4] = xmmword_1013510B0;
  v348[5] = xmmword_1013510C0;
  v348[6] = xmmword_1013510D0;
  v348[7] = xmmword_1013510E0;
  v348[8] = xmmword_1013510F0;
  v348[9] = xmmword_101351100;
  v348[10] = xmmword_101351070;
  qword_10199B5A0 = 0LL;
  qword_10199B5A8 = 0LL;
  qword_10199B598 = 0LL;
  int64_t v46 = (char *)operator new(0xB0uLL);
  uint64_t v47 = 0LL;
  qword_10199B598 = (uint64_t)v46;
  qword_10199B5A0 = (uint64_t)v46;
  qword_10199B5A8 = (uint64_t)(v46 + 176);
  do
  {
    *(_OWORD *)&v46[v47 * 16] = v348[v47];
    ++v47;
  }

  while (v47 != 11);
  qword_10199B5A0 = (uint64_t)(v46 + 176);
  xmmword_10199B5B0 = xmmword_101351110;
  unk_10199B5C0 = xmmword_101351120;
  sub_1010DDBC0(&qword_10199B5D0, "Shanghai-5");
  v347[0] = xmmword_101351130;
  v347[1] = xmmword_101351140;
  v347[2] = xmmword_101351150;
  v347[3] = xmmword_101351160;
  v347[4] = xmmword_101351170;
  v347[5] = xmmword_101351180;
  v347[6] = xmmword_101351190;
  v347[7] = xmmword_1013511A0;
  v347[8] = xmmword_1013511B0;
  v347[9] = xmmword_1013511C0;
  v347[10] = xmmword_1013511D0;
  v347[11] = xmmword_1013511E0;
  v347[12] = xmmword_1013511F0;
  v347[13] = xmmword_101351200;
  v347[14] = xmmword_101351210;
  v347[15] = xmmword_101351130;
  qword_10199B5F0 = 0LL;
  qword_10199B5F8 = 0LL;
  qword_10199B5E8 = 0LL;
  unint64_t v48 = (char *)operator new(0x100uLL);
  uint64_t v49 = 0LL;
  qword_10199B5E8 = (uint64_t)v48;
  qword_10199B5F0 = (uint64_t)v48;
  qword_10199B5F8 = (uint64_t)(v48 + 256);
  do
  {
    uint64_t v50 = &v48[v49 * 16];
    __int128 v51 = v347[v49 + 1];
    *(_OWORD *)uint64_t v50 = v347[v49];
    *((_OWORD *)v50 + 1) = v51;
    v49 += 2LL;
  }

  while (v49 != 16);
  qword_10199B5F0 = (uint64_t)(v48 + 256);
  xmmword_10199B600 = xmmword_101351220;
  unk_10199B610 = xmmword_101351230;
  sub_1010DDBC0(&qword_10199B620, "Shanghai-6");
  v346[0] = xmmword_101351240;
  v346[1] = xmmword_101351250;
  v346[2] = xmmword_101351260;
  v346[3] = xmmword_101351270;
  v346[4] = xmmword_101351280;
  v346[5] = xmmword_101351290;
  v346[6] = xmmword_1013512A0;
  v346[7] = xmmword_1013512B0;
  v346[8] = xmmword_101351240;
  qword_10199B640 = 0LL;
  qword_10199B648 = 0LL;
  qword_10199B638 = 0LL;
  uint64_t v52 = (char *)operator new(0x90uLL);
  uint64_t v53 = 0LL;
  qword_10199B638 = (uint64_t)v52;
  qword_10199B640 = (uint64_t)v52;
  qword_10199B648 = (uint64_t)(v52 + 144);
  do
  {
    *(_OWORD *)&v52[v53 * 16] = v346[v53];
    ++v53;
  }

  while (v53 != 9);
  qword_10199B640 = (uint64_t)(v52 + 144);
  xmmword_10199B650 = xmmword_1013512C0;
  unk_10199B660 = xmmword_1013512D0;
  sub_1010DDBC0(&qword_10199B670, "Shanghai-7");
  v345[0] = xmmword_1013512E0;
  v345[1] = xmmword_1013512F0;
  v345[2] = xmmword_101351300;
  v345[3] = xmmword_101351310;
  v345[4] = xmmword_101351320;
  v345[5] = xmmword_101351330;
  v345[6] = xmmword_101351340;
  v345[7] = xmmword_101351350;
  v345[8] = xmmword_101351360;
  v345[9] = xmmword_101351370;
  v345[10] = xmmword_101351380;
  v345[11] = xmmword_1013512E0;
  qword_10199B690 = 0LL;
  qword_10199B698 = 0LL;
  qword_10199B688 = 0LL;
  __int16 v54 = (char *)operator new(0xC0uLL);
  uint64_t v55 = 0LL;
  qword_10199B688 = (uint64_t)v54;
  qword_10199B690 = (uint64_t)v54;
  qword_10199B698 = (uint64_t)(v54 + 192);
  do
  {
    int v56 = &v54[v55 * 16];
    __int128 v57 = v345[v55 + 1];
    *(_OWORD *)int v56 = v345[v55];
    *((_OWORD *)v56 + 1) = v57;
    v55 += 2LL;
  }

  while (v55 != 12);
  qword_10199B690 = (uint64_t)(v54 + 192);
  xmmword_10199B6A0 = xmmword_101351390;
  unk_10199B6B0 = xmmword_1013513A0;
  sub_1010DDBC0(&qword_10199B6C0, "Shanghai-8");
  v344[0] = xmmword_1013513B0;
  v344[1] = xmmword_1013513C0;
  v344[2] = xmmword_1013513D0;
  v344[3] = xmmword_1013513E0;
  v344[4] = xmmword_1013513F0;
  v344[5] = xmmword_101351400;
  v344[6] = xmmword_101351410;
  v344[7] = xmmword_101351420;
  v344[8] = xmmword_101351430;
  v344[9] = xmmword_101351440;
  v344[10] = xmmword_101351450;
  v344[11] = xmmword_101351460;
  v344[12] = xmmword_101351470;
  v344[13] = xmmword_101351480;
  v344[14] = xmmword_101351490;
  v344[15] = xmmword_1013514A0;
  v344[16] = xmmword_1013513B0;
  qword_10199B6E0 = 0LL;
  qword_10199B6E8 = 0LL;
  qword_10199B6D8 = 0LL;
  uint64_t v58 = (char *)operator new(0x110uLL);
  uint64_t v59 = 0LL;
  qword_10199B6D8 = (uint64_t)v58;
  qword_10199B6E0 = (uint64_t)v58;
  qword_10199B6E8 = (uint64_t)(v58 + 272);
  do
  {
    *(_OWORD *)&v58[v59 * 16] = v344[v59];
    ++v59;
  }

  while (v59 != 17);
  qword_10199B6E0 = (uint64_t)(v58 + 272);
  xmmword_10199B6F0 = xmmword_1013514B0;
  unk_10199B700 = xmmword_1013514C0;
  sub_1010DDBC0(&qword_10199B710, "Shanghai-9");
  v343[0] = xmmword_1013514D0;
  v343[1] = xmmword_1013514E0;
  v343[2] = xmmword_1013514F0;
  v343[3] = xmmword_101351500;
  v343[4] = xmmword_101351510;
  v343[5] = xmmword_1013514D0;
  qword_10199B730 = 0LL;
  qword_10199B738 = 0LL;
  qword_10199B728 = 0LL;
  __int128 v60 = (char *)operator new(0x60uLL);
  uint64_t v61 = 0LL;
  qword_10199B728 = (uint64_t)v60;
  qword_10199B730 = (uint64_t)v60;
  qword_10199B738 = (uint64_t)(v60 + 96);
  do
  {
    __int128 v62 = &v60[v61 * 16];
    __int128 v63 = v343[v61 + 1];
    *(_OWORD *)__int128 v62 = v343[v61];
    *((_OWORD *)v62 + 1) = v63;
    v61 += 2LL;
  }

  while (v61 != 6);
  qword_10199B730 = (uint64_t)(v60 + 96);
  xmmword_10199B740 = xmmword_101351520;
  unk_10199B750 = xmmword_101351530;
  sub_1010DDBC0(&qword_10199B760, "Shanghai-10");
  v342[0] = xmmword_101351540;
  v342[1] = xmmword_101351550;
  v342[2] = xmmword_101351560;
  v342[3] = xmmword_101351570;
  v342[4] = xmmword_101351580;
  v342[5] = xmmword_101351590;
  v342[6] = xmmword_1013515A0;
  v342[7] = xmmword_1013515B0;
  v342[8] = xmmword_1013515C0;
  v342[9] = xmmword_1013515D0;
  v342[10] = xmmword_1013515E0;
  v342[11] = xmmword_1013515F0;
  v342[12] = xmmword_101351600;
  v342[13] = xmmword_101351610;
  v342[14] = xmmword_101351540;
  qword_10199B780 = 0LL;
  qword_10199B788 = 0LL;
  qword_10199B778 = 0LL;
  uint64_t v64 = (char *)operator new(0xF0uLL);
  uint64_t v65 = 0LL;
  qword_10199B778 = (uint64_t)v64;
  qword_10199B780 = (uint64_t)v64;
  qword_10199B788 = (uint64_t)(v64 + 240);
  do
  {
    *(_OWORD *)&v64[v65 * 16] = v342[v65];
    ++v65;
  }

  while (v65 != 15);
  qword_10199B780 = (uint64_t)(v64 + 240);
  xmmword_10199B790 = xmmword_101351620;
  unk_10199B7A0 = xmmword_101351630;
  sub_1010DDBC0(&qword_10199B7B0, "Beijing-1");
  v341[0] = xmmword_101351640;
  v341[1] = xmmword_101351650;
  v341[2] = xmmword_101351660;
  v341[3] = xmmword_101351670;
  v341[4] = xmmword_101351640;
  qword_10199B7D0 = 0LL;
  qword_10199B7D8 = 0LL;
  qword_10199B7C8 = 0LL;
  double v66 = (char *)operator new(0x50uLL);
  uint64_t v67 = 0LL;
  qword_10199B7C8 = (uint64_t)v66;
  qword_10199B7D0 = (uint64_t)v66;
  qword_10199B7D8 = (uint64_t)(v66 + 80);
  do
  {
    *(_OWORD *)&v66[v67 * 16] = v341[v67];
    ++v67;
  }

  while (v67 != 5);
  qword_10199B7D0 = (uint64_t)(v66 + 80);
  xmmword_10199B7E0 = xmmword_101351640;
  unk_10199B7F0 = xmmword_101351680;
  sub_1010DDBC0(&qword_10199B800, "Beijing-2");
  v340[0] = xmmword_101351690;
  v340[1] = xmmword_1013516A0;
  v340[2] = xmmword_1013516B0;
  v340[3] = xmmword_1013516C0;
  v340[4] = xmmword_1013516D0;
  v340[5] = xmmword_1013516E0;
  v340[6] = xmmword_101351690;
  qword_10199B820 = 0LL;
  qword_10199B828 = 0LL;
  qword_10199B818 = 0LL;
  double v68 = (char *)operator new(0x70uLL);
  uint64_t v69 = 0LL;
  qword_10199B818 = (uint64_t)v68;
  qword_10199B820 = (uint64_t)v68;
  qword_10199B828 = (uint64_t)(v68 + 112);
  do
  {
    *(_OWORD *)&v68[v69 * 16] = v340[v69];
    ++v69;
  }

  while (v69 != 7);
  qword_10199B820 = (uint64_t)(v68 + 112);
  xmmword_10199B830 = xmmword_1013516F0;
  unk_10199B840 = xmmword_101351700;
  sub_1010DDBC0(&qword_10199B850, "Beijing-3");
  v339[0] = xmmword_101351710;
  v339[1] = xmmword_101351720;
  v339[2] = xmmword_101351730;
  v339[3] = xmmword_101351740;
  v339[4] = xmmword_101351750;
  v339[5] = xmmword_101351760;
  v339[6] = xmmword_101351710;
  qword_10199B870 = 0LL;
  qword_10199B878 = 0LL;
  qword_10199B868 = 0LL;
  uint64_t v70 = (char *)operator new(0x70uLL);
  uint64_t v71 = 0LL;
  qword_10199B868 = (uint64_t)v70;
  qword_10199B870 = (uint64_t)v70;
  qword_10199B878 = (uint64_t)(v70 + 112);
  do
  {
    *(_OWORD *)&v70[v71 * 16] = v339[v71];
    ++v71;
  }

  while (v71 != 7);
  qword_10199B870 = (uint64_t)(v70 + 112);
  xmmword_10199B880 = xmmword_101351770;
  unk_10199B890 = xmmword_101351780;
  sub_1010DDBC0(&qword_10199B8A0, "Beijing-4");
  v338[0] = xmmword_101351790;
  v338[1] = xmmword_1013517A0;
  v338[2] = xmmword_1013517B0;
  v338[3] = xmmword_1013517C0;
  v338[4] = xmmword_1013517D0;
  v338[5] = xmmword_1013517E0;
  v338[6] = xmmword_1013517F0;
  v338[7] = xmmword_101351800;
  v338[8] = xmmword_101351810;
  v338[9] = xmmword_101351790;
  qword_10199B8C0 = 0LL;
  qword_10199B8C8 = 0LL;
  qword_10199B8B8 = 0LL;
  uint64_t v72 = (char *)operator new(0xA0uLL);
  uint64_t v73 = 0LL;
  qword_10199B8B8 = (uint64_t)v72;
  qword_10199B8C0 = (uint64_t)v72;
  qword_10199B8C8 = (uint64_t)(v72 + 160);
  do
  {
    uint64_t v74 = &v72[v73 * 16];
    __int128 v75 = v338[v73 + 1];
    *(_OWORD *)uint64_t v74 = v338[v73];
    *((_OWORD *)v74 + 1) = v75;
    v73 += 2LL;
  }

  while (v73 != 10);
  qword_10199B8C0 = (uint64_t)(v72 + 160);
  xmmword_10199B8D0 = xmmword_1013517B0;
  unk_10199B8E0 = xmmword_101351820;
  sub_1010DDBC0(&qword_10199B8F0, "Beijing-5");
  v337[0] = xmmword_101351830;
  v337[1] = xmmword_101351840;
  v337[2] = xmmword_101351850;
  v337[3] = xmmword_101351860;
  v337[4] = xmmword_101351830;
  qword_10199B910 = 0LL;
  qword_10199B918 = 0LL;
  qword_10199B908 = 0LL;
  int64_t v76 = (char *)operator new(0x50uLL);
  uint64_t v77 = 0LL;
  qword_10199B908 = (uint64_t)v76;
  qword_10199B910 = (uint64_t)v76;
  qword_10199B918 = (uint64_t)(v76 + 80);
  do
  {
    *(_OWORD *)&v76[v77 * 16] = v337[v77];
    ++v77;
  }

  while (v77 != 5);
  qword_10199B910 = (uint64_t)(v76 + 80);
  xmmword_10199B920 = xmmword_101351830;
  unk_10199B930 = xmmword_101351870;
  sub_1010DDBC0(&qword_10199B940, "Beijing-6");
  v336[0] = xmmword_101351880;
  v336[1] = xmmword_101351890;
  v336[2] = xmmword_1013518A0;
  v336[3] = xmmword_1013518B0;
  v336[4] = xmmword_1013518C0;
  v336[5] = xmmword_1013518D0;
  v336[6] = xmmword_101351880;
  qword_10199B960 = 0LL;
  qword_10199B968 = 0LL;
  qword_10199B958 = 0LL;
  unint64_t v78 = (char *)operator new(0x70uLL);
  uint64_t v79 = 0LL;
  qword_10199B958 = (uint64_t)v78;
  qword_10199B960 = (uint64_t)v78;
  qword_10199B968 = (uint64_t)(v78 + 112);
  do
  {
    *(_OWORD *)&v78[v79 * 16] = v336[v79];
    ++v79;
  }

  while (v79 != 7);
  qword_10199B960 = (uint64_t)(v78 + 112);
  xmmword_10199B970 = xmmword_1013518E0;
  unk_10199B980 = xmmword_1013518F0;
  sub_1010DDBC0(&qword_10199B990, "Beijing-7");
  v335[0] = xmmword_101351900;
  v335[1] = xmmword_101351910;
  v335[2] = xmmword_101351920;
  v335[3] = xmmword_101351930;
  v335[4] = xmmword_101351940;
  v335[5] = xmmword_101351950;
  v335[6] = xmmword_101351960;
  v335[7] = xmmword_101351970;
  v335[8] = xmmword_101351900;
  qword_10199B9B0 = 0LL;
  qword_10199B9B8 = 0LL;
  qword_10199B9A8 = 0LL;
  uint64_t v80 = (char *)operator new(0x90uLL);
  uint64_t v81 = 0LL;
  qword_10199B9A8 = (uint64_t)v80;
  qword_10199B9B0 = (uint64_t)v80;
  qword_10199B9B8 = (uint64_t)(v80 + 144);
  do
  {
    *(_OWORD *)&v80[v81 * 16] = v335[v81];
    ++v81;
  }

  while (v81 != 9);
  qword_10199B9B0 = (uint64_t)(v80 + 144);
  xmmword_10199B9C0 = xmmword_101351980;
  unk_10199B9D0 = xmmword_101351990;
  sub_1010DDBC0(&qword_10199B9E0, "Beijing-8");
  v334[0] = xmmword_1013519A0;
  v334[1] = xmmword_1013519B0;
  v334[2] = xmmword_1013519C0;
  v334[3] = xmmword_1013519D0;
  v334[4] = xmmword_1013519A0;
  qword_10199BA00 = 0LL;
  qword_10199BA08 = 0LL;
  qword_10199B9F8 = 0LL;
  uint64_t v82 = (char *)operator new(0x50uLL);
  uint64_t v83 = 0LL;
  qword_10199B9F8 = (uint64_t)v82;
  qword_10199BA00 = (uint64_t)v82;
  qword_10199BA08 = (uint64_t)(v82 + 80);
  do
  {
    *(_OWORD *)&v82[v83 * 16] = v334[v83];
    ++v83;
  }

  while (v83 != 5);
  qword_10199BA00 = (uint64_t)(v82 + 80);
  xmmword_10199BA10 = xmmword_1013519A0;
  unk_10199BA20 = xmmword_1013519E0;
  sub_1010DDBC0(&qword_10199BA30, "Beijing-9");
  v333[0] = xmmword_1013519F0;
  v333[1] = xmmword_101351A00;
  v333[2] = xmmword_101351A10;
  v333[3] = xmmword_101351A20;
  v333[4] = xmmword_1013519F0;
  qword_10199BA50 = 0LL;
  qword_10199BA58 = 0LL;
  qword_10199BA48 = 0LL;
  uint64_t v84 = (char *)operator new(0x50uLL);
  uint64_t v85 = 0LL;
  qword_10199BA48 = (uint64_t)v84;
  qword_10199BA50 = (uint64_t)v84;
  qword_10199BA58 = (uint64_t)(v84 + 80);
  do
  {
    *(_OWORD *)&v84[v85 * 16] = v333[v85];
    ++v85;
  }

  while (v85 != 5);
  qword_10199BA50 = (uint64_t)(v84 + 80);
  xmmword_10199BA60 = xmmword_101351A30;
  unk_10199BA70 = xmmword_101351A10;
  sub_1010DDBC0(&qword_10199BA80, "Paris-1");
  v332[0] = xmmword_101351A40;
  v332[1] = xmmword_101351A50;
  v332[2] = xmmword_101351A60;
  v332[3] = xmmword_101351A70;
  v332[4] = xmmword_101351A80;
  v332[5] = xmmword_101351A90;
  v332[6] = xmmword_101351AA0;
  v332[7] = xmmword_101351AB0;
  v332[8] = xmmword_101351AC0;
  v332[9] = xmmword_101351AD0;
  v332[10] = xmmword_101351AE0;
  v332[11] = xmmword_101351AF0;
  v332[12] = xmmword_101351B00;
  v332[13] = xmmword_101351B10;
  v332[14] = xmmword_101351B20;
  v332[15] = xmmword_101351B30;
  v332[16] = xmmword_101351B40;
  v332[17] = xmmword_101351B50;
  v332[18] = xmmword_101351B60;
  v332[19] = xmmword_101351B70;
  v332[20] = xmmword_101351B80;
  v332[21] = xmmword_101351B90;
  v332[22] = xmmword_101351A40;
  qword_10199BA98 = 0LL;
  qword_10199BAA0 = 0LL;
  qword_10199BAA8 = 0LL;
  uint64_t v86 = (char *)operator new(0x170uLL);
  uint64_t v87 = 0LL;
  qword_10199BA98 = (uint64_t)v86;
  qword_10199BAA0 = (uint64_t)v86;
  qword_10199BAA8 = (uint64_t)(v86 + 368);
  do
  {
    *(_OWORD *)&v86[v87 * 16] = v332[v87];
    ++v87;
  }

  while (v87 != 23);
  qword_10199BAA0 = (uint64_t)(v86 + 368);
  xmmword_10199BAB0 = xmmword_101351BA0;
  unk_10199BAC0 = xmmword_101351BB0;
  sub_1010DDBC0(&qword_10199BAD0, "Paris-2");
  v331[0] = xmmword_101351BC0;
  v331[1] = xmmword_101351BD0;
  v331[2] = xmmword_101351BE0;
  v331[3] = xmmword_101351BF0;
  v331[4] = xmmword_101351C00;
  v331[5] = xmmword_101351C10;
  v331[6] = xmmword_101351C20;
  v331[7] = xmmword_101351C30;
  v331[8] = xmmword_101351C40;
  v331[9] = xmmword_101351C50;
  v331[10] = xmmword_101351C60;
  v331[11] = xmmword_101351C70;
  v331[12] = xmmword_101351C80;
  v331[13] = xmmword_101351C90;
  v331[14] = xmmword_101351CA0;
  v331[15] = xmmword_101351CB0;
  v331[16] = xmmword_101351BC0;
  qword_10199BAF0 = 0LL;
  qword_10199BAF8 = 0LL;
  qword_10199BAE8 = 0LL;
  uint64_t v88 = (char *)operator new(0x110uLL);
  uint64_t v89 = 0LL;
  qword_10199BAE8 = (uint64_t)v88;
  qword_10199BAF0 = (uint64_t)v88;
  qword_10199BAF8 = (uint64_t)(v88 + 272);
  do
  {
    *(_OWORD *)&v88[v89 * 16] = v331[v89];
    ++v89;
  }

  while (v89 != 17);
  qword_10199BAF0 = (uint64_t)(v88 + 272);
  xmmword_10199BB00 = xmmword_101351CC0;
  unk_10199BB10 = xmmword_101351CD0;
  sub_1010DDBC0(&qword_10199BB20, "London-1");
  v330[0] = xmmword_101351CE0;
  v330[1] = xmmword_101351CF0;
  v330[2] = xmmword_101351D00;
  v330[3] = xmmword_101351D10;
  v330[4] = xmmword_101351D20;
  v330[5] = xmmword_101351D30;
  v330[6] = xmmword_101351D40;
  v330[7] = xmmword_101351D50;
  v330[8] = xmmword_101351D60;
  v330[9] = xmmword_101351D70;
  v330[10] = xmmword_101351D80;
  v330[11] = xmmword_101351D90;
  v330[12] = xmmword_101351DA0;
  v330[13] = xmmword_101351DB0;
  v330[14] = xmmword_101351DC0;
  v330[15] = xmmword_101351CE0;
  qword_10199BB40 = 0LL;
  qword_10199BB48 = 0LL;
  qword_10199BB38 = 0LL;
  __int128 v90 = (char *)operator new(0x100uLL);
  uint64_t v91 = 0LL;
  qword_10199BB38 = (uint64_t)v90;
  qword_10199BB40 = (uint64_t)v90;
  qword_10199BB48 = (uint64_t)(v90 + 256);
  do
  {
    uint64_t v92 = &v90[v91 * 16];
    __int128 v93 = v330[v91 + 1];
    *(_OWORD *)uint64_t v92 = v330[v91];
    *((_OWORD *)v92 + 1) = v93;
    v91 += 2LL;
  }

  while (v91 != 16);
  qword_10199BB40 = (uint64_t)(v90 + 256);
  xmmword_10199BB50 = xmmword_101351DD0;
  unk_10199BB60 = xmmword_101351DE0;
  sub_1010DDBC0(&qword_10199BB70, "London-2");
  v329[0] = xmmword_101351DF0;
  v329[1] = xmmword_101351E00;
  v329[2] = xmmword_101351E10;
  v329[3] = xmmword_101351E20;
  v329[4] = xmmword_101351E30;
  v329[5] = xmmword_101351DF0;
  qword_10199BB90 = 0LL;
  qword_10199BB98 = 0LL;
  qword_10199BB88 = 0LL;
  int v94 = (char *)operator new(0x60uLL);
  uint64_t v95 = 0LL;
  qword_10199BB88 = (uint64_t)v94;
  qword_10199BB90 = (uint64_t)v94;
  qword_10199BB98 = (uint64_t)(v94 + 96);
  do
  {
    uint64_t v96 = &v94[v95 * 16];
    __int128 v97 = v329[v95 + 1];
    *(_OWORD *)uint64_t v96 = v329[v95];
    *((_OWORD *)v96 + 1) = v97;
    v95 += 2LL;
  }

  while (v95 != 6);
  qword_10199BB90 = (uint64_t)(v94 + 96);
  xmmword_10199BBA0 = xmmword_101351E40;
  unk_10199BBB0 = xmmword_101351E50;
  sub_1010DDBC0(&qword_10199BBC0, "London-3");
  v328[0] = xmmword_101351E60;
  v328[1] = xmmword_101351E70;
  v328[2] = xmmword_101351E80;
  v328[3] = xmmword_101351E90;
  v328[4] = xmmword_101351EA0;
  v328[5] = xmmword_101351EB0;
  v328[6] = xmmword_101351EC0;
  v328[7] = xmmword_101351E60;
  qword_10199BBE0 = 0LL;
  qword_10199BBE8 = 0LL;
  qword_10199BBD8 = 0LL;
  uint64_t v98 = (char *)operator new(0x80uLL);
  uint64_t v99 = 0LL;
  qword_10199BBD8 = (uint64_t)v98;
  qword_10199BBE0 = (uint64_t)v98;
  qword_10199BBE8 = (uint64_t)(v98 + 128);
  do
  {
    uint64_t v100 = &v98[v99 * 16];
    __int128 v101 = v328[v99 + 1];
    *(_OWORD *)uint64_t v100 = v328[v99];
    *((_OWORD *)v100 + 1) = v101;
    v99 += 2LL;
  }

  while (v99 != 8);
  qword_10199BBE0 = (uint64_t)(v98 + 128);
  xmmword_10199BBF0 = xmmword_101351ED0;
  unk_10199BC00 = xmmword_101351EE0;
  sub_1010DDBC0(&qword_10199BC10, "London-4");
  v327[0] = xmmword_101351EF0;
  v327[1] = xmmword_101351F00;
  v327[2] = xmmword_101351F10;
  v327[3] = xmmword_101351F20;
  v327[4] = xmmword_101351F30;
  v327[5] = xmmword_101351EF0;
  qword_10199BC30 = 0LL;
  qword_10199BC38 = 0LL;
  qword_10199BC28 = 0LL;
  uint64_t v102 = (char *)operator new(0x60uLL);
  uint64_t v103 = 0LL;
  qword_10199BC28 = (uint64_t)v102;
  qword_10199BC30 = (uint64_t)v102;
  qword_10199BC38 = (uint64_t)(v102 + 96);
  do
  {
    v104 = &v102[v103 * 16];
    __int128 v105 = v327[v103 + 1];
    *(_OWORD *)v104 = v327[v103];
    *((_OWORD *)v104 + 1) = v105;
    v103 += 2LL;
  }

  while (v103 != 6);
  qword_10199BC30 = (uint64_t)(v102 + 96);
  xmmword_10199BC40 = xmmword_101351F40;
  unk_10199BC50 = xmmword_101351F50;
  sub_1010DDBC0(&qword_10199BC60, "London-5");
  v326[0] = xmmword_101351F60;
  v326[1] = xmmword_101351F70;
  v326[2] = xmmword_101351F80;
  v326[3] = xmmword_101351F90;
  v326[4] = xmmword_101351FA0;
  v326[5] = xmmword_101351FB0;
  v326[6] = xmmword_101351FC0;
  v326[7] = xmmword_101351FD0;
  v326[8] = xmmword_101351FE0;
  v326[9] = xmmword_101351F60;
  qword_10199BC80 = 0LL;
  qword_10199BC88 = 0LL;
  qword_10199BC78 = 0LL;
  v106 = (char *)operator new(0xA0uLL);
  uint64_t v107 = 0LL;
  qword_10199BC78 = (uint64_t)v106;
  qword_10199BC80 = (uint64_t)v106;
  qword_10199BC88 = (uint64_t)(v106 + 160);
  do
  {
    uint64_t v108 = &v106[v107 * 16];
    __int128 v109 = v326[v107 + 1];
    *(_OWORD *)uint64_t v108 = v326[v107];
    *((_OWORD *)v108 + 1) = v109;
    v107 += 2LL;
  }

  while (v107 != 10);
  qword_10199BC80 = (uint64_t)(v106 + 160);
  xmmword_10199BC90 = xmmword_101351FF0;
  unk_10199BCA0 = xmmword_101352000;
  sub_1010DDBC0(&qword_10199BCB0, "London-6");
  v325[0] = xmmword_101352010;
  v325[1] = xmmword_101352020;
  v325[2] = xmmword_101352030;
  v325[3] = xmmword_101352040;
  v325[4] = xmmword_101352050;
  v325[5] = xmmword_101352060;
  v325[6] = xmmword_101352070;
  v325[7] = xmmword_101352080;
  v325[8] = xmmword_101352090;
  v325[9] = xmmword_1013520A0;
  v325[10] = xmmword_1013520B0;
  v325[11] = xmmword_1013520C0;
  v325[12] = xmmword_101352010;
  qword_10199BCD0 = 0LL;
  qword_10199BCD8 = 0LL;
  qword_10199BCC8 = 0LL;
  int v110 = (char *)operator new(0xD0uLL);
  uint64_t v111 = 0LL;
  qword_10199BCC8 = (uint64_t)v110;
  qword_10199BCD0 = (uint64_t)v110;
  qword_10199BCD8 = (uint64_t)(v110 + 208);
  do
  {
    *(_OWORD *)&v110[v111 * 16] = v325[v111];
    ++v111;
  }

  while (v111 != 13);
  qword_10199BCD0 = (uint64_t)(v110 + 208);
  xmmword_10199BCE0 = xmmword_1013520D0;
  unk_10199BCF0 = xmmword_1013520E0;
  sub_1010DDBC0(&qword_10199BD00, "London-7");
  v324[0] = xmmword_1013520F0;
  v324[1] = xmmword_101352100;
  v324[2] = xmmword_101352110;
  v324[3] = xmmword_101352120;
  v324[4] = xmmword_101352130;
  v324[5] = xmmword_101352140;
  v324[6] = xmmword_101352150;
  v324[7] = xmmword_101352160;
  v324[8] = xmmword_101352170;
  v324[9] = xmmword_101352180;
  v324[10] = xmmword_101352190;
  v324[11] = xmmword_1013521A0;
  v324[12] = xmmword_1013521B0;
  v324[13] = xmmword_1013521C0;
  v324[14] = xmmword_1013521D0;
  v324[15] = xmmword_1013521E0;
  v324[16] = xmmword_1013520F0;
  qword_10199BD20 = 0LL;
  qword_10199BD28 = 0LL;
  qword_10199BD18 = 0LL;
  v112 = (char *)operator new(0x110uLL);
  uint64_t v113 = 0LL;
  qword_10199BD18 = (uint64_t)v112;
  qword_10199BD20 = (uint64_t)v112;
  qword_10199BD28 = (uint64_t)(v112 + 272);
  do
  {
    *(_OWORD *)&v112[v113 * 16] = v324[v113];
    ++v113;
  }

  while (v113 != 17);
  qword_10199BD20 = (uint64_t)(v112 + 272);
  xmmword_10199BD30 = xmmword_101352160;
  unk_10199BD40 = xmmword_1013521F0;
  sub_1010DDBC0(&qword_10199BD50, "Frankfurt-1");
  v323[0] = xmmword_101352200;
  v323[1] = xmmword_101352210;
  v323[2] = xmmword_101352220;
  v323[3] = xmmword_101352230;
  v323[4] = xmmword_101352240;
  v323[5] = xmmword_101352250;
  v323[6] = xmmword_101352260;
  v323[7] = xmmword_101352200;
  qword_10199BD70 = 0LL;
  qword_10199BD78 = 0LL;
  qword_10199BD68 = 0LL;
  uint64_t v114 = (char *)operator new(0x80uLL);
  uint64_t v115 = 0LL;
  qword_10199BD68 = (uint64_t)v114;
  qword_10199BD70 = (uint64_t)v114;
  qword_10199BD78 = (uint64_t)(v114 + 128);
  do
  {
    uint64_t v116 = &v114[v115 * 16];
    __int128 v117 = v323[v115 + 1];
    *(_OWORD *)uint64_t v116 = v323[v115];
    *((_OWORD *)v116 + 1) = v117;
    v115 += 2LL;
  }

  while (v115 != 8);
  qword_10199BD70 = (uint64_t)(v114 + 128);
  xmmword_10199BD80 = xmmword_101352270;
  unk_10199BD90 = xmmword_101352280;
  sub_1010DDBC0(&qword_10199BDA0, "Frankfurt-2");
  v322[0] = xmmword_101352290;
  v322[1] = xmmword_1013522A0;
  v322[2] = xmmword_1013522B0;
  v322[3] = xmmword_1013522C0;
  v322[4] = xmmword_1013522D0;
  v322[5] = xmmword_1013522E0;
  v322[6] = xmmword_101352290;
  qword_10199BDC0 = 0LL;
  qword_10199BDC8 = 0LL;
  qword_10199BDB8 = 0LL;
  uint64_t v118 = (char *)operator new(0x70uLL);
  uint64_t v119 = 0LL;
  qword_10199BDB8 = (uint64_t)v118;
  qword_10199BDC0 = (uint64_t)v118;
  qword_10199BDC8 = (uint64_t)(v118 + 112);
  do
  {
    *(_OWORD *)&v118[v119 * 16] = v322[v119];
    ++v119;
  }

  while (v119 != 7);
  qword_10199BDC0 = (uint64_t)(v118 + 112);
  xmmword_10199BDD0 = xmmword_1013522F0;
  unk_10199BDE0 = xmmword_101352300;
  sub_1010DDBC0(&qword_10199BDF0, "Frankfurt-3");
  v321[0] = xmmword_101352310;
  v321[1] = xmmword_101352320;
  v321[2] = xmmword_101352330;
  v321[3] = xmmword_101352340;
  v321[4] = xmmword_101352350;
  v321[5] = xmmword_101352360;
  v321[6] = xmmword_101352370;
  v321[7] = xmmword_101352380;
  v321[8] = xmmword_101352390;
  v321[9] = xmmword_101352310;
  qword_10199BE10 = 0LL;
  qword_10199BE18 = 0LL;
  qword_10199BE08 = 0LL;
  uint64_t v120 = (char *)operator new(0xA0uLL);
  uint64_t v121 = 0LL;
  qword_10199BE08 = (uint64_t)v120;
  qword_10199BE10 = (uint64_t)v120;
  qword_10199BE18 = (uint64_t)(v120 + 160);
  do
  {
    uint64_t v122 = &v120[v121 * 16];
    __int128 v123 = v321[v121 + 1];
    *(_OWORD *)uint64_t v122 = v321[v121];
    *((_OWORD *)v122 + 1) = v123;
    v121 += 2LL;
  }

  while (v121 != 10);
  qword_10199BE10 = (uint64_t)(v120 + 160);
  xmmword_10199BE20 = xmmword_1013523A0;
  unk_10199BE30 = xmmword_1013523B0;
  sub_1010DDBC0(&qword_10199BE40, "Frankfurt-4");
  v320[0] = xmmword_1013523C0;
  v320[1] = xmmword_1013523D0;
  v320[2] = xmmword_1013523E0;
  v320[3] = xmmword_1013523F0;
  v320[4] = xmmword_101352400;
  v320[5] = xmmword_101352410;
  v320[6] = xmmword_101352420;
  v320[7] = xmmword_101352430;
  v320[8] = xmmword_101352440;
  v320[9] = xmmword_101352450;
  v320[10] = xmmword_101352460;
  v320[11] = xmmword_1013523C0;
  qword_10199BE60 = 0LL;
  qword_10199BE68 = 0LL;
  qword_10199BE58 = 0LL;
  int v124 = (char *)operator new(0xC0uLL);
  uint64_t v125 = 0LL;
  qword_10199BE58 = (uint64_t)v124;
  qword_10199BE60 = (uint64_t)v124;
  qword_10199BE68 = (uint64_t)(v124 + 192);
  do
  {
    v126 = &v124[v125 * 16];
    __int128 v127 = v320[v125 + 1];
    *(_OWORD *)v126 = v320[v125];
    *((_OWORD *)v126 + 1) = v127;
    v125 += 2LL;
  }

  while (v125 != 12);
  qword_10199BE60 = (uint64_t)(v124 + 192);
  xmmword_10199BE70 = xmmword_101352470;
  unk_10199BE80 = xmmword_101352480;
  sub_1010DDBC0(&qword_10199BE90, "Frankfurt-5");
  v319[0] = xmmword_101352490;
  v319[1] = xmmword_1013524A0;
  v319[2] = xmmword_1013524B0;
  v319[3] = xmmword_1013524C0;
  v319[4] = xmmword_1013524D0;
  v319[5] = xmmword_1013524E0;
  v319[6] = xmmword_1013524F0;
  v319[7] = xmmword_101352490;
  qword_10199BEB0 = 0LL;
  qword_10199BEB8 = 0LL;
  qword_10199BEA8 = 0LL;
  double v128 = (char *)operator new(0x80uLL);
  uint64_t v129 = 0LL;
  qword_10199BEA8 = (uint64_t)v128;
  qword_10199BEB0 = (uint64_t)v128;
  qword_10199BEB8 = (uint64_t)(v128 + 128);
  do
  {
    int v130 = &v128[v129 * 16];
    __int128 v131 = v319[v129 + 1];
    *(_OWORD *)int v130 = v319[v129];
    *((_OWORD *)v130 + 1) = v131;
    v129 += 2LL;
  }

  while (v129 != 8);
  qword_10199BEB0 = (uint64_t)(v128 + 128);
  xmmword_10199BEC0 = xmmword_101352500;
  unk_10199BED0 = xmmword_101352510;
  sub_1010DDBC0(&qword_10199BEE0, "Frankfurt-6");
  v318[0] = xmmword_101352520;
  v318[1] = xmmword_101352530;
  v318[2] = xmmword_101352540;
  v318[3] = xmmword_101352550;
  v318[4] = xmmword_101352560;
  v318[5] = xmmword_101352520;
  qword_10199BF00 = 0LL;
  qword_10199BF08 = 0LL;
  qword_10199BEF8 = 0LL;
  uint64_t v132 = (char *)operator new(0x60uLL);
  uint64_t v133 = 0LL;
  qword_10199BEF8 = (uint64_t)v132;
  qword_10199BF00 = (uint64_t)v132;
  qword_10199BF08 = (uint64_t)(v132 + 96);
  do
  {
    uint64_t v134 = &v132[v133 * 16];
    __int128 v135 = v318[v133 + 1];
    *(_OWORD *)uint64_t v134 = v318[v133];
    *((_OWORD *)v134 + 1) = v135;
    v133 += 2LL;
  }

  while (v133 != 6);
  qword_10199BF00 = (uint64_t)(v132 + 96);
  xmmword_10199BF10 = xmmword_101352570;
  unk_10199BF20 = xmmword_101352580;
  sub_1010DDBC0(&qword_10199BF30, "Stockholm-1");
  v317[0] = xmmword_101352590;
  v317[1] = xmmword_1013525A0;
  v317[2] = xmmword_1013525B0;
  v317[3] = xmmword_1013525C0;
  v317[4] = xmmword_1013525D0;
  v317[5] = xmmword_1013525E0;
  v317[6] = xmmword_1013525F0;
  v317[7] = xmmword_101352600;
  v317[8] = xmmword_101352590;
  qword_10199BF50 = 0LL;
  qword_10199BF58 = 0LL;
  qword_10199BF48 = 0LL;
  uint64_t v136 = (char *)operator new(0x90uLL);
  uint64_t v137 = 0LL;
  qword_10199BF48 = (uint64_t)v136;
  qword_10199BF50 = (uint64_t)v136;
  qword_10199BF58 = (uint64_t)(v136 + 144);
  do
  {
    *(_OWORD *)&v136[v137 * 16] = v317[v137];
    ++v137;
  }

  while (v137 != 9);
  qword_10199BF50 = (uint64_t)(v136 + 144);
  xmmword_10199BF60 = xmmword_101352610;
  unk_10199BF70 = xmmword_101352620;
  sub_1010DDBC0(&qword_10199BF80, "Stockholm-2");
  v316[0] = xmmword_101352630;
  v316[1] = xmmword_101352640;
  v316[2] = xmmword_101352650;
  v316[3] = xmmword_101352660;
  v316[4] = xmmword_101352670;
  v316[5] = xmmword_101352680;
  v316[6] = xmmword_101352690;
  v316[7] = xmmword_1013526A0;
  v316[8] = xmmword_1013526B0;
  v316[9] = xmmword_1013526C0;
  v316[10] = xmmword_1013526D0;
  v316[11] = xmmword_1013526E0;
  v316[12] = xmmword_1013526F0;
  v316[13] = xmmword_101352700;
  v316[14] = xmmword_101352710;
  v316[15] = xmmword_101352720;
  v316[16] = xmmword_101352730;
  v316[17] = xmmword_101352740;
  v316[18] = xmmword_101352750;
  v316[19] = xmmword_101352760;
  v316[20] = xmmword_101352770;
  v316[21] = xmmword_101352780;
  v316[22] = xmmword_101352790;
  v316[23] = xmmword_1013527A0;
  v316[24] = xmmword_1013527B0;
  v316[25] = xmmword_101352630;
  qword_10199BF98 = 0LL;
  qword_10199BFA0 = 0LL;
  qword_10199BFA8 = 0LL;
  char v138 = (char *)operator new(0x1A0uLL);
  uint64_t v139 = 0LL;
  qword_10199BF98 = (uint64_t)v138;
  qword_10199BFA0 = (uint64_t)v138;
  qword_10199BFA8 = (uint64_t)(v138 + 416);
  do
  {
    uint64_t v140 = &v138[v139 * 16];
    __int128 v141 = v316[v139 + 1];
    *(_OWORD *)uint64_t v140 = v316[v139];
    *((_OWORD *)v140 + 1) = v141;
    v139 += 2LL;
  }

  while (v139 != 26);
  qword_10199BFA0 = (uint64_t)(v138 + 416);
  xmmword_10199BFB0 = xmmword_1013527C0;
  unk_10199BFC0 = xmmword_1013527D0;
  sub_1010DDBC0(&qword_10199BFD0, "Stockholm-3");
  v315[0] = xmmword_1013527E0;
  v315[1] = xmmword_1013527F0;
  v315[2] = xmmword_101352800;
  v315[3] = xmmword_101352810;
  v315[4] = xmmword_101352820;
  v315[5] = xmmword_101352830;
  v315[6] = xmmword_101352840;
  v315[7] = xmmword_101352850;
  v315[8] = xmmword_101352860;
  v315[9] = xmmword_101352870;
  v315[10] = xmmword_101352880;
  v315[11] = xmmword_101352890;
  v315[12] = xmmword_1013528A0;
  v315[13] = xmmword_1013528B0;
  v315[14] = xmmword_1013528C0;
  v315[15] = xmmword_1013528D0;
  v315[16] = xmmword_1013528E0;
  v315[17] = xmmword_1013527E0;
  qword_10199BFE8 = 0LL;
  qword_10199BFF0 = 0LL;
  qword_10199BFF8 = 0LL;
  __int16 v142 = (char *)operator new(0x120uLL);
  uint64_t v143 = 0LL;
  qword_10199BFE8 = (uint64_t)v142;
  qword_10199BFF0 = (uint64_t)v142;
  qword_10199BFF8 = (uint64_t)(v142 + 288);
  do
  {
    BOOL v144 = &v142[v143 * 16];
    __int128 v145 = v315[v143 + 1];
    *(_OWORD *)BOOL v144 = v315[v143];
    *((_OWORD *)v144 + 1) = v145;
    v143 += 2LL;
  }

  while (v143 != 18);
  qword_10199BFF0 = (uint64_t)(v142 + 288);
  xmmword_10199C000 = xmmword_1013528F0;
  unk_10199C010 = xmmword_101352900;
  sub_1010DDBC0(&qword_10199C020, "Sydney-1");
  v314[0] = xmmword_101352910;
  v314[1] = xmmword_101352920;
  v314[2] = xmmword_101352930;
  v314[3] = xmmword_101352940;
  v314[4] = xmmword_101352950;
  v314[5] = xmmword_101352960;
  v314[6] = xmmword_101352970;
  v314[7] = xmmword_101352980;
  v314[8] = xmmword_101352990;
  v314[9] = xmmword_1013529A0;
  v314[10] = xmmword_1013529B0;
  v314[11] = xmmword_1013529C0;
  v314[12] = xmmword_1013529D0;
  v314[13] = xmmword_1013529E0;
  v314[14] = xmmword_1013529F0;
  v314[15] = xmmword_101352A00;
  v314[16] = xmmword_101352A10;
  v314[17] = xmmword_101352A20;
  v314[18] = xmmword_101352A30;
  v314[19] = xmmword_101352A40;
  v314[20] = xmmword_101352910;
  qword_10199C038 = 0LL;
  qword_10199C040 = 0LL;
  qword_10199C048 = 0LL;
  uint64_t v146 = (char *)operator new(0x150uLL);
  uint64_t v147 = 0LL;
  qword_10199C038 = (uint64_t)v146;
  qword_10199C040 = (uint64_t)v146;
  qword_10199C048 = (uint64_t)(v146 + 336);
  do
  {
    *(_OWORD *)&v146[v147 * 16] = v314[v147];
    ++v147;
  }

  while (v147 != 21);
  qword_10199C040 = (uint64_t)(v146 + 336);
  xmmword_10199C050 = xmmword_101352A50;
  unk_10199C060 = xmmword_101352A60;
  sub_1010DDBC0(&qword_10199C070, "Sydney-2");
  v313[0] = xmmword_101352A70;
  v313[1] = xmmword_101352A80;
  v313[2] = xmmword_101352A90;
  v313[3] = xmmword_101352AA0;
  v313[4] = xmmword_101352AB0;
  v313[5] = xmmword_101352AC0;
  v313[6] = xmmword_101352AD0;
  v313[7] = xmmword_101352AE0;
  v313[8] = xmmword_101352AF0;
  v313[9] = xmmword_101352A70;
  qword_10199C090 = 0LL;
  qword_10199C098 = 0LL;
  qword_10199C088 = 0LL;
  uint64_t v148 = (char *)operator new(0xA0uLL);
  uint64_t v149 = 0LL;
  qword_10199C088 = (uint64_t)v148;
  qword_10199C090 = (uint64_t)v148;
  qword_10199C098 = (uint64_t)(v148 + 160);
  do
  {
    __int16 v150 = &v148[v149 * 16];
    __int128 v151 = v313[v149 + 1];
    *(_OWORD *)__int16 v150 = v313[v149];
    *((_OWORD *)v150 + 1) = v151;
    v149 += 2LL;
  }

  while (v149 != 10);
  qword_10199C090 = (uint64_t)(v148 + 160);
  xmmword_10199C0A0 = xmmword_101352B00;
  unk_10199C0B0 = xmmword_101352B10;
  sub_1010DDBC0(&qword_10199C0C0, "Sydney-3");
  v312[0] = xmmword_101352B20;
  v312[1] = xmmword_101352B30;
  v312[2] = xmmword_101352B40;
  v312[3] = xmmword_101352B50;
  v312[4] = xmmword_101352B60;
  v312[5] = xmmword_101352B20;
  qword_10199C0E0 = 0LL;
  qword_10199C0E8 = 0LL;
  qword_10199C0D8 = 0LL;
  __int16 v152 = (char *)operator new(0x60uLL);
  uint64_t v153 = 0LL;
  qword_10199C0D8 = (uint64_t)v152;
  qword_10199C0E0 = (uint64_t)v152;
  qword_10199C0E8 = (uint64_t)(v152 + 96);
  do
  {
    int v154 = &v152[v153 * 16];
    __int128 v155 = v312[v153 + 1];
    *(_OWORD *)int v154 = v312[v153];
    *((_OWORD *)v154 + 1) = v155;
    v153 += 2LL;
  }

  while (v153 != 6);
  qword_10199C0E0 = (uint64_t)(v152 + 96);
  xmmword_10199C0F0 = xmmword_101352B70;
  unk_10199C100 = xmmword_101352B80;
  sub_1010DDBC0(&qword_10199C110, "Sydney-4");
  v311[0] = xmmword_101352B90;
  v311[1] = xmmword_101352BA0;
  v311[2] = xmmword_101352BB0;
  v311[3] = xmmword_101352BC0;
  v311[4] = xmmword_101352BD0;
  v311[5] = xmmword_101352BE0;
  v311[6] = xmmword_101352BF0;
  v311[7] = xmmword_101352C00;
  v311[8] = xmmword_101352B90;
  qword_10199C130 = 0LL;
  qword_10199C138 = 0LL;
  qword_10199C128 = 0LL;
  __int16 v156 = (char *)operator new(0x90uLL);
  uint64_t v157 = 0LL;
  qword_10199C128 = (uint64_t)v156;
  qword_10199C130 = (uint64_t)v156;
  qword_10199C138 = (uint64_t)(v156 + 144);
  do
  {
    *(_OWORD *)&v156[v157 * 16] = v311[v157];
    ++v157;
  }

  while (v157 != 9);
  qword_10199C130 = (uint64_t)(v156 + 144);
  xmmword_10199C140 = xmmword_101352C10;
  unk_10199C150 = xmmword_101352C20;
  sub_1010DDBC0(&qword_10199C160, "Dubai-1");
  v310[0] = xmmword_101352C30;
  v310[1] = xmmword_101352C40;
  v310[2] = xmmword_101352C50;
  v310[3] = xmmword_101352C60;
  v310[4] = xmmword_101352C70;
  v310[5] = xmmword_101352C80;
  v310[6] = xmmword_101352C90;
  v310[7] = xmmword_101352C30;
  qword_10199C180 = 0LL;
  qword_10199C188 = 0LL;
  qword_10199C178 = 0LL;
  __int16 v158 = (char *)operator new(0x80uLL);
  uint64_t v159 = 0LL;
  qword_10199C178 = (uint64_t)v158;
  qword_10199C180 = (uint64_t)v158;
  qword_10199C188 = (uint64_t)(v158 + 128);
  do
  {
    __int16 v160 = &v158[v159 * 16];
    __int128 v161 = v310[v159 + 1];
    *(_OWORD *)__int16 v160 = v310[v159];
    *((_OWORD *)v160 + 1) = v161;
    v159 += 2LL;
  }

  while (v159 != 8);
  qword_10199C180 = (uint64_t)(v158 + 128);
  xmmword_10199C190 = xmmword_101352CA0;
  unk_10199C1A0 = xmmword_101352CB0;
  sub_1010DDBC0(&qword_10199C1B0, "Dubai-2");
  v309[0] = xmmword_101352CC0;
  v309[1] = xmmword_101352CD0;
  v309[2] = xmmword_101352CE0;
  v309[3] = xmmword_101352CF0;
  v309[4] = xmmword_101352D00;
  v309[5] = xmmword_101352D10;
  v309[6] = xmmword_101352D20;
  v309[7] = xmmword_101352CC0;
  qword_10199C1D0 = 0LL;
  qword_10199C1D8 = 0LL;
  qword_10199C1C8 = 0LL;
  v162 = (char *)operator new(0x80uLL);
  uint64_t v163 = 0LL;
  qword_10199C1C8 = (uint64_t)v162;
  qword_10199C1D0 = (uint64_t)v162;
  qword_10199C1D8 = (uint64_t)(v162 + 128);
  do
  {
    v164 = &v162[v163 * 16];
    __int128 v165 = v309[v163 + 1];
    *(_OWORD *)v164 = v309[v163];
    *((_OWORD *)v164 + 1) = v165;
    v163 += 2LL;
  }

  while (v163 != 8);
  qword_10199C1D0 = (uint64_t)(v162 + 128);
  xmmword_10199C1E0 = xmmword_101352D30;
  unk_10199C1F0 = xmmword_101352D40;
  sub_1010DDBC0(&qword_10199C200, "Dubai-3");
  v308[0] = xmmword_101352D50;
  v308[1] = xmmword_101352D60;
  v308[2] = xmmword_101352D70;
  v308[3] = xmmword_101352D80;
  v308[4] = xmmword_101352D90;
  v308[5] = xmmword_101352DA0;
  v308[6] = xmmword_101352DB0;
  v308[7] = xmmword_101352DC0;
  v308[8] = xmmword_101352DD0;
  v308[9] = xmmword_101352D50;
  qword_10199C220 = 0LL;
  qword_10199C228 = 0LL;
  qword_10199C218 = 0LL;
  v166 = (char *)operator new(0xA0uLL);
  uint64_t v167 = 0LL;
  qword_10199C218 = (uint64_t)v166;
  qword_10199C220 = (uint64_t)v166;
  qword_10199C228 = (uint64_t)(v166 + 160);
  do
  {
    v168 = &v166[v167 * 16];
    __int128 v169 = v308[v167 + 1];
    *(_OWORD *)v168 = v308[v167];
    *((_OWORD *)v168 + 1) = v169;
    v167 += 2LL;
  }

  while (v167 != 10);
  qword_10199C220 = (uint64_t)(v166 + 160);
  xmmword_10199C230 = xmmword_101352DE0;
  unk_10199C240 = xmmword_101352DF0;
  sub_1010DDBC0(&qword_10199C250, "Mumbai-1");
  v307[0] = xmmword_101352E00;
  v307[1] = xmmword_101352E10;
  v307[2] = xmmword_101352E20;
  v307[3] = xmmword_101352E30;
  v307[4] = xmmword_101352E40;
  v307[5] = xmmword_101352E50;
  v307[6] = xmmword_101352E00;
  qword_10199C270 = 0LL;
  qword_10199C278 = 0LL;
  qword_10199C268 = 0LL;
  v170 = (char *)operator new(0x70uLL);
  uint64_t v171 = 0LL;
  qword_10199C268 = (uint64_t)v170;
  qword_10199C270 = (uint64_t)v170;
  qword_10199C278 = (uint64_t)(v170 + 112);
  do
  {
    *(_OWORD *)&v170[v171 * 16] = v307[v171];
    ++v171;
  }

  while (v171 != 7);
  qword_10199C270 = (uint64_t)(v170 + 112);
  xmmword_10199C280 = xmmword_101352E60;
  unk_10199C290 = xmmword_101352E00;
  sub_1010DDBC0(&qword_10199C2A0, "Mumbai-2");
  v306[0] = xmmword_101352E70;
  v306[1] = xmmword_101352E80;
  v306[2] = xmmword_101352E90;
  v306[3] = xmmword_101352EA0;
  v306[4] = xmmword_101352EB0;
  v306[5] = xmmword_101352EC0;
  v306[6] = xmmword_101352ED0;
  v306[7] = xmmword_101352EE0;
  v306[8] = xmmword_101352EF0;
  v306[9] = xmmword_101352F00;
  v306[10] = xmmword_101352F10;
  v306[11] = xmmword_101352E70;
  qword_10199C2C0 = 0LL;
  qword_10199C2C8 = 0LL;
  qword_10199C2B8 = 0LL;
  v172 = (char *)operator new(0xC0uLL);
  uint64_t v173 = 0LL;
  qword_10199C2B8 = (uint64_t)v172;
  qword_10199C2C0 = (uint64_t)v172;
  qword_10199C2C8 = (uint64_t)(v172 + 192);
  do
  {
    v174 = &v172[v173 * 16];
    __int128 v175 = v306[v173 + 1];
    *(_OWORD *)v174 = v306[v173];
    *((_OWORD *)v174 + 1) = v175;
    v173 += 2LL;
  }

  while (v173 != 12);
  qword_10199C2C0 = (uint64_t)(v172 + 192);
  xmmword_10199C2D0 = xmmword_101352F20;
  unk_10199C2E0 = xmmword_101352F30;
  sub_1010DDBC0(&qword_10199C2F0, "Cairo-1");
  v305[0] = xmmword_101352F40;
  v305[1] = xmmword_101352F50;
  v305[2] = xmmword_101352F60;
  v305[3] = xmmword_101352F70;
  v305[4] = xmmword_101352F80;
  v305[5] = xmmword_101352F90;
  v305[6] = xmmword_101352FA0;
  v305[7] = xmmword_101352F40;
  qword_10199C310 = 0LL;
  qword_10199C318 = 0LL;
  qword_10199C308 = 0LL;
  v176 = (char *)operator new(0x80uLL);
  uint64_t v177 = 0LL;
  qword_10199C308 = (uint64_t)v176;
  qword_10199C310 = (uint64_t)v176;
  qword_10199C318 = (uint64_t)(v176 + 128);
  do
  {
    v178 = &v176[v177 * 16];
    __int128 v179 = v305[v177 + 1];
    *(_OWORD *)v178 = v305[v177];
    *((_OWORD *)v178 + 1) = v179;
    v177 += 2LL;
  }

  while (v177 != 8);
  qword_10199C310 = (uint64_t)(v176 + 128);
  xmmword_10199C320 = xmmword_101352FB0;
  unk_10199C330 = xmmword_101352FC0;
  sub_1010DDBC0(&qword_10199C340, "Cairo-2");
  v304[0] = xmmword_101352FD0;
  v304[1] = xmmword_101352FE0;
  v304[2] = xmmword_101352FF0;
  v304[3] = xmmword_101353000;
  v304[4] = xmmword_101353010;
  v304[5] = xmmword_101352FD0;
  qword_10199C360 = 0LL;
  qword_10199C368 = 0LL;
  qword_10199C358 = 0LL;
  v180 = (char *)operator new(0x60uLL);
  uint64_t v181 = 0LL;
  qword_10199C358 = (uint64_t)v180;
  qword_10199C360 = (uint64_t)v180;
  qword_10199C368 = (uint64_t)(v180 + 96);
  do
  {
    v182 = &v180[v181 * 16];
    __int128 v183 = v304[v181 + 1];
    *(_OWORD *)v182 = v304[v181];
    *((_OWORD *)v182 + 1) = v183;
    v181 += 2LL;
  }

  while (v181 != 6);
  qword_10199C360 = (uint64_t)(v180 + 96);
  xmmword_10199C370 = xmmword_101353020;
  unk_10199C380 = xmmword_101353030;
  sub_1010DDBC0(&qword_10199C390, "Cairo-3");
  v303[0] = xmmword_101353040;
  v303[1] = xmmword_101353050;
  v303[2] = xmmword_101353060;
  v303[3] = xmmword_101353070;
  v303[4] = xmmword_101353040;
  qword_10199C3B0 = 0LL;
  qword_10199C3B8 = 0LL;
  qword_10199C3A8 = 0LL;
  v184 = (char *)operator new(0x50uLL);
  uint64_t v185 = 0LL;
  qword_10199C3A8 = (uint64_t)v184;
  qword_10199C3B0 = (uint64_t)v184;
  qword_10199C3B8 = (uint64_t)(v184 + 80);
  do
  {
    *(_OWORD *)&v184[v185 * 16] = v303[v185];
    ++v185;
  }

  while (v185 != 5);
  qword_10199C3B0 = (uint64_t)(v184 + 80);
  xmmword_10199C3C0 = xmmword_101353080;
  unk_10199C3D0 = xmmword_101353090;
  sub_1010DDBC0(&qword_10199C3E0, "Cairo-4");
  v302[0] = xmmword_1013530A0;
  v302[1] = xmmword_1013530B0;
  v302[2] = xmmword_1013530C0;
  v302[3] = xmmword_1013530D0;
  v302[4] = xmmword_1013530A0;
  qword_10199C400 = 0LL;
  qword_10199C408 = 0LL;
  qword_10199C3F8 = 0LL;
  v186 = (char *)operator new(0x50uLL);
  uint64_t v187 = 0LL;
  qword_10199C3F8 = (uint64_t)v186;
  qword_10199C400 = (uint64_t)v186;
  qword_10199C408 = (uint64_t)(v186 + 80);
  do
  {
    *(_OWORD *)&v186[v187 * 16] = v302[v187];
    ++v187;
  }

  while (v187 != 5);
  qword_10199C400 = (uint64_t)(v186 + 80);
  xmmword_10199C410 = xmmword_1013530E0;
  unk_10199C420 = xmmword_1013530F0;
  sub_1010DDBC0(&qword_10199C430, "Cairo-5");
  v301[0] = xmmword_101353100;
  v301[1] = xmmword_101353110;
  v301[2] = xmmword_101353120;
  v301[3] = xmmword_101353130;
  v301[4] = xmmword_101353140;
  v301[5] = xmmword_101353150;
  v301[6] = xmmword_101353160;
  v301[7] = xmmword_101353170;
  v301[8] = xmmword_101353180;
  v301[9] = xmmword_101353190;
  v301[10] = xmmword_1013531A0;
  v301[11] = xmmword_101353100;
  qword_10199C450 = 0LL;
  qword_10199C458 = 0LL;
  qword_10199C448 = 0LL;
  v188 = (char *)operator new(0xC0uLL);
  uint64_t v189 = 0LL;
  qword_10199C448 = (uint64_t)v188;
  qword_10199C450 = (uint64_t)v188;
  qword_10199C458 = (uint64_t)(v188 + 192);
  do
  {
    v190 = &v188[v189 * 16];
    __int128 v191 = v301[v189 + 1];
    *(_OWORD *)v190 = v301[v189];
    *((_OWORD *)v190 + 1) = v191;
    v189 += 2LL;
  }

  while (v189 != 12);
  qword_10199C450 = (uint64_t)(v188 + 192);
  xmmword_10199C460 = xmmword_1013531B0;
  unk_10199C470 = xmmword_1013531C0;
  sub_1010DDBC0(&qword_10199C480, "Cairo-6");
  v300[0] = xmmword_1013531D0;
  v300[1] = xmmword_1013531E0;
  v300[2] = xmmword_1013531F0;
  v300[3] = xmmword_101353200;
  v300[4] = xmmword_101353210;
  v300[5] = xmmword_101353220;
  v300[6] = xmmword_1013531D0;
  qword_10199C4A0 = 0LL;
  qword_10199C4A8 = 0LL;
  qword_10199C498 = 0LL;
  v192 = (char *)operator new(0x70uLL);
  uint64_t v193 = 0LL;
  qword_10199C498 = (uint64_t)v192;
  qword_10199C4A0 = (uint64_t)v192;
  qword_10199C4A8 = (uint64_t)(v192 + 112);
  do
  {
    *(_OWORD *)&v192[v193 * 16] = v300[v193];
    ++v193;
  }

  while (v193 != 7);
  qword_10199C4A0 = (uint64_t)(v192 + 112);
  xmmword_10199C4B0 = xmmword_101353230;
  unk_10199C4C0 = xmmword_101353240;
  sub_1010DDBC0(&qword_10199C4D0, "Cairo-7");
  v299[0] = xmmword_101353250;
  v299[1] = xmmword_101353260;
  v299[2] = xmmword_101353270;
  v299[3] = xmmword_101353280;
  v299[4] = xmmword_101353290;
  v299[5] = xmmword_1013532A0;
  v299[6] = xmmword_1013532B0;
  v299[7] = xmmword_1013532C0;
  v299[8] = xmmword_1013532D0;
  v299[9] = xmmword_1013532E0;
  v299[10] = xmmword_101353250;
  qword_10199C4F0 = 0LL;
  qword_10199C4F8 = 0LL;
  qword_10199C4E8 = 0LL;
  v194 = (char *)operator new(0xB0uLL);
  uint64_t v195 = 0LL;
  qword_10199C4E8 = (uint64_t)v194;
  qword_10199C4F0 = (uint64_t)v194;
  qword_10199C4F8 = (uint64_t)(v194 + 176);
  do
  {
    *(_OWORD *)&v194[v195 * 16] = v299[v195];
    ++v195;
  }

  while (v195 != 11);
  qword_10199C4F0 = (uint64_t)(v194 + 176);
  xmmword_10199C500 = xmmword_1013532F0;
  unk_10199C510 = xmmword_101353300;
  sub_1010DDBC0(&qword_10199C520, "Cairo-8");
  v298[0] = xmmword_101353310;
  v298[1] = xmmword_101353320;
  v298[2] = xmmword_101353330;
  v298[3] = xmmword_101353340;
  v298[4] = xmmword_101353350;
  v298[5] = xmmword_101353310;
  qword_10199C540 = 0LL;
  qword_10199C548 = 0LL;
  qword_10199C538 = 0LL;
  v196 = (char *)operator new(0x60uLL);
  uint64_t v197 = 0LL;
  qword_10199C538 = (uint64_t)v196;
  qword_10199C540 = (uint64_t)v196;
  qword_10199C548 = (uint64_t)(v196 + 96);
  do
  {
    v198 = &v196[v197 * 16];
    __int128 v199 = v298[v197 + 1];
    *(_OWORD *)v198 = v298[v197];
    *((_OWORD *)v198 + 1) = v199;
    v197 += 2LL;
  }

  while (v197 != 6);
  qword_10199C540 = (uint64_t)(v196 + 96);
  xmmword_10199C550 = xmmword_101353360;
  unk_10199C560 = xmmword_101353370;
  sub_1010DDBC0(&qword_10199C570, "Shanghai-11");
  v297[0] = xmmword_101353380;
  v297[1] = xmmword_101353390;
  v297[2] = xmmword_1013533A0;
  v297[3] = xmmword_1013533B0;
  v297[4] = xmmword_1013533C0;
  v297[5] = xmmword_1013533D0;
  v297[6] = xmmword_101353380;
  qword_10199C590 = 0LL;
  qword_10199C598 = 0LL;
  qword_10199C588 = 0LL;
  v200 = (char *)operator new(0x70uLL);
  uint64_t v201 = 0LL;
  qword_10199C588 = (uint64_t)v200;
  qword_10199C590 = (uint64_t)v200;
  qword_10199C598 = (uint64_t)(v200 + 112);
  do
  {
    *(_OWORD *)&v200[v201 * 16] = v297[v201];
    ++v201;
  }

  while (v201 != 7);
  qword_10199C590 = (uint64_t)(v200 + 112);
  xmmword_10199C5A0 = xmmword_1013533E0;
  unk_10199C5B0 = xmmword_1013533F0;
  sub_1010DDBC0(&qword_10199C5C0, "Shanghai-12");
  v296[0] = xmmword_101353400;
  v296[1] = xmmword_101353410;
  v296[2] = xmmword_101353420;
  v296[3] = xmmword_101353430;
  v296[4] = xmmword_101353440;
  v296[5] = xmmword_101353450;
  v296[6] = xmmword_101353460;
  v296[7] = xmmword_101353470;
  v296[8] = xmmword_101353480;
  v296[9] = xmmword_101353400;
  qword_10199C5E0 = 0LL;
  qword_10199C5E8 = 0LL;
  qword_10199C5D8 = 0LL;
  v202 = (char *)operator new(0xA0uLL);
  uint64_t v203 = 0LL;
  qword_10199C5D8 = (uint64_t)v202;
  qword_10199C5E0 = (uint64_t)v202;
  qword_10199C5E8 = (uint64_t)(v202 + 160);
  do
  {
    v204 = &v202[v203 * 16];
    __int128 v205 = v296[v203 + 1];
    *(_OWORD *)v204 = v296[v203];
    *((_OWORD *)v204 + 1) = v205;
    v203 += 2LL;
  }

  while (v203 != 10);
  qword_10199C5E0 = (uint64_t)(v202 + 160);
  xmmword_10199C5F0 = xmmword_101353490;
  unk_10199C600 = xmmword_1013534A0;
  sub_1010DDBC0(&qword_10199C610, "Beijing-10");
  v295[0] = xmmword_1013534B0;
  v295[1] = xmmword_1013534C0;
  v295[2] = xmmword_1013534D0;
  v295[3] = xmmword_1013534E0;
  v295[4] = xmmword_1013534B0;
  qword_10199C630 = 0LL;
  qword_10199C638 = 0LL;
  qword_10199C628 = 0LL;
  v206 = (char *)operator new(0x50uLL);
  uint64_t v207 = 0LL;
  qword_10199C628 = (uint64_t)v206;
  qword_10199C630 = (uint64_t)v206;
  qword_10199C638 = (uint64_t)(v206 + 80);
  do
  {
    *(_OWORD *)&v206[v207 * 16] = v295[v207];
    ++v207;
  }

  while (v207 != 5);
  qword_10199C630 = (uint64_t)(v206 + 80);
  xmmword_10199C640 = xmmword_1013534B0;
  unk_10199C650 = xmmword_1013534F0;
  sub_1010DDBC0(&qword_10199C660, "Beijing-11");
  v294[0] = xmmword_101353500;
  v294[1] = xmmword_101353510;
  v294[2] = xmmword_101353520;
  v294[3] = xmmword_101353530;
  v294[4] = xmmword_101353500;
  qword_10199C680 = 0LL;
  qword_10199C688 = 0LL;
  qword_10199C678 = 0LL;
  v208 = (char *)operator new(0x50uLL);
  uint64_t v209 = 0LL;
  qword_10199C678 = (uint64_t)v208;
  qword_10199C680 = (uint64_t)v208;
  qword_10199C688 = (uint64_t)(v208 + 80);
  do
  {
    *(_OWORD *)&v208[v209 * 16] = v294[v209];
    ++v209;
  }

  while (v209 != 5);
  qword_10199C680 = (uint64_t)(v208 + 80);
  xmmword_10199C690 = xmmword_101353540;
  unk_10199C6A0 = xmmword_101353550;
  sub_1010DDBC0(&qword_10199C6B0, "Barcelona-1");
  v293[0] = xmmword_101353560;
  v293[1] = xmmword_101353570;
  v293[2] = xmmword_101353580;
  v293[3] = xmmword_101353590;
  v293[4] = xmmword_1013535A0;
  v293[5] = xmmword_1013535B0;
  v293[6] = xmmword_101353560;
  qword_10199C6D0 = 0LL;
  qword_10199C6D8 = 0LL;
  qword_10199C6C8 = 0LL;
  v210 = (char *)operator new(0x70uLL);
  uint64_t v211 = 0LL;
  qword_10199C6C8 = (uint64_t)v210;
  qword_10199C6D0 = (uint64_t)v210;
  qword_10199C6D8 = (uint64_t)(v210 + 112);
  do
  {
    *(_OWORD *)&v210[v211 * 16] = v293[v211];
    ++v211;
  }

  while (v211 != 7);
  qword_10199C6D0 = (uint64_t)(v210 + 112);
  xmmword_10199C6E0 = xmmword_1013535C0;
  unk_10199C6F0 = xmmword_1013535D0;
  sub_1010DDBC0(&qword_10199C700, "Barcelona-2");
  v292[0] = xmmword_1013535E0;
  v292[1] = xmmword_1013535F0;
  v292[2] = xmmword_101353600;
  v292[3] = xmmword_101353610;
  v292[4] = xmmword_1013535E0;
  qword_10199C720 = 0LL;
  qword_10199C728 = 0LL;
  qword_10199C718 = 0LL;
  v212 = (char *)operator new(0x50uLL);
  uint64_t v213 = 0LL;
  qword_10199C718 = (uint64_t)v212;
  qword_10199C720 = (uint64_t)v212;
  qword_10199C728 = (uint64_t)(v212 + 80);
  do
  {
    *(_OWORD *)&v212[v213 * 16] = v292[v213];
    ++v213;
  }

  while (v213 != 5);
  qword_10199C720 = (uint64_t)(v212 + 80);
  xmmword_10199C730 = xmmword_101353620;
  unk_10199C740 = xmmword_101353630;
  sub_1010DDBC0(&qword_10199C750, "Houston-1");
  v291[0] = xmmword_101353640;
  v291[1] = xmmword_101353650;
  v291[2] = xmmword_101353660;
  v291[3] = xmmword_101353670;
  v291[4] = xmmword_101353680;
  v291[5] = xmmword_101353690;
  v291[6] = xmmword_1013536A0;
  v291[7] = xmmword_1013536B0;
  v291[8] = xmmword_1013536C0;
  v291[9] = xmmword_1013536D0;
  v291[10] = xmmword_1013536E0;
  v291[11] = xmmword_1013536F0;
  v291[12] = xmmword_101353700;
  v291[13] = xmmword_101353710;
  v291[14] = xmmword_101353720;
  v291[15] = xmmword_101353730;
  v291[16] = xmmword_101353740;
  v291[17] = xmmword_101353750;
  v291[18] = xmmword_101353760;
  v291[19] = xmmword_101353770;
  v291[20] = xmmword_101353780;
  v291[21] = xmmword_101353790;
  v291[22] = xmmword_1013537A0;
  v291[23] = xmmword_1013537B0;
  v291[24] = xmmword_1013537C0;
  v291[25] = xmmword_1013537D0;
  v291[26] = xmmword_101353640;
  qword_10199C768 = 0LL;
  qword_10199C770 = 0LL;
  qword_10199C778 = 0LL;
  v214 = (char *)operator new(0x1B0uLL);
  uint64_t v215 = 0LL;
  qword_10199C768 = (uint64_t)v214;
  qword_10199C770 = (uint64_t)v214;
  qword_10199C778 = (uint64_t)(v214 + 432);
  do
  {
    *(_OWORD *)&v214[v215 * 16] = v291[v215];
    ++v215;
  }

  while (v215 != 27);
  qword_10199C770 = (uint64_t)(v214 + 432);
  xmmword_10199C780 = xmmword_1013537E0;
  unk_10199C790 = xmmword_1013537F0;
  sub_1010DDBC0(&qword_10199C7A0, "Seattle-1");
  v290[0] = xmmword_101353800;
  v290[1] = xmmword_101353810;
  v290[2] = xmmword_101353820;
  v290[3] = xmmword_101353830;
  v290[4] = xmmword_101353840;
  v290[5] = xmmword_101353850;
  v290[6] = xmmword_101353860;
  v290[7] = xmmword_101353870;
  v290[8] = xmmword_101353880;
  v290[9] = xmmword_101353890;
  v290[10] = xmmword_1013538A0;
  v290[11] = xmmword_1013538B0;
  v290[12] = xmmword_1013538C0;
  v290[13] = xmmword_1013538D0;
  v290[14] = xmmword_1013538E0;
  v290[15] = xmmword_1013538F0;
  v290[16] = xmmword_101353900;
  v290[17] = xmmword_101353800;
  qword_10199C7B8 = 0LL;
  qword_10199C7C0 = 0LL;
  qword_10199C7C8 = 0LL;
  v216 = (char *)operator new(0x120uLL);
  uint64_t v217 = 0LL;
  qword_10199C7B8 = (uint64_t)v216;
  qword_10199C7C0 = (uint64_t)v216;
  qword_10199C7C8 = (uint64_t)(v216 + 288);
  do
  {
    v218 = &v216[v217 * 16];
    __int128 v219 = v290[v217 + 1];
    *(_OWORD *)v218 = v290[v217];
    *((_OWORD *)v218 + 1) = v219;
    v217 += 2LL;
  }

  while (v217 != 18);
  qword_10199C7C0 = (uint64_t)(v216 + 288);
  xmmword_10199C7D0 = xmmword_101353910;
  unk_10199C7E0 = xmmword_101353920;
  sub_1010DDBC0(&qword_10199C7F0, "LasVegas-1");
  v289[0] = xmmword_101353930;
  v289[1] = xmmword_101353940;
  v289[2] = xmmword_101353950;
  v289[3] = xmmword_101353960;
  v289[4] = xmmword_101353930;
  qword_10199C810 = 0LL;
  qword_10199C818 = 0LL;
  qword_10199C808 = 0LL;
  v220 = (char *)operator new(0x50uLL);
  uint64_t v221 = 0LL;
  qword_10199C808 = (uint64_t)v220;
  qword_10199C810 = (uint64_t)v220;
  qword_10199C818 = (uint64_t)(v220 + 80);
  do
  {
    *(_OWORD *)&v220[v221 * 16] = v289[v221];
    ++v221;
  }

  while (v221 != 5);
  qword_10199C810 = (uint64_t)(v220 + 80);
  xmmword_10199C820 = xmmword_101353970;
  unk_10199C830 = xmmword_101353980;
  sub_1010DDBC0(&qword_10199C840, "LasVegas-2");
  v288[0] = xmmword_101353990;
  v288[1] = xmmword_1013539A0;
  v288[2] = xmmword_1013539B0;
  v288[3] = xmmword_1013539C0;
  v288[4] = xmmword_1013539D0;
  v288[5] = xmmword_1013539E0;
  v288[6] = xmmword_1013539F0;
  v288[7] = xmmword_101353A00;
  v288[8] = xmmword_101353A10;
  v288[9] = xmmword_101353A20;
  v288[10] = xmmword_101353A30;
  v288[11] = xmmword_101353A40;
  v288[12] = xmmword_101353990;
  qword_10199C860 = 0LL;
  qword_10199C868 = 0LL;
  qword_10199C858 = 0LL;
  v222 = (char *)operator new(0xD0uLL);
  uint64_t v223 = 0LL;
  qword_10199C858 = (uint64_t)v222;
  qword_10199C860 = (uint64_t)v222;
  qword_10199C868 = (uint64_t)(v222 + 208);
  do
  {
    *(_OWORD *)&v222[v223 * 16] = v288[v223];
    ++v223;
  }

  while (v223 != 13);
  qword_10199C860 = (uint64_t)(v222 + 208);
  xmmword_10199C870 = xmmword_101353A50;
  unk_10199C880 = xmmword_101353A60;
  sub_1010DDBC0(&qword_10199C890, "Miami-1");
  v287[0] = xmmword_101353A70;
  v287[1] = xmmword_101353A80;
  v287[2] = xmmword_101353A90;
  v287[3] = xmmword_101353AA0;
  v287[4] = xmmword_101353AB0;
  v287[5] = xmmword_101353AC0;
  v287[6] = xmmword_101353AD0;
  v287[7] = xmmword_101353AE0;
  v287[8] = xmmword_101353AF0;
  v287[9] = xmmword_101353B00;
  v287[10] = xmmword_101353B10;
  v287[11] = xmmword_101353B20;
  v287[12] = xmmword_101353B30;
  v287[13] = xmmword_101353B40;
  v287[14] = xmmword_101353B50;
  v287[15] = xmmword_101353B60;
  v287[16] = xmmword_101353B70;
  v287[17] = xmmword_101353B80;
  v287[18] = xmmword_101353B90;
  v287[19] = xmmword_101353BA0;
  v287[20] = xmmword_101353A70;
  qword_10199C8A8 = 0LL;
  qword_10199C8B0 = 0LL;
  qword_10199C8B8 = 0LL;
  v224 = (char *)operator new(0x150uLL);
  uint64_t v225 = 0LL;
  qword_10199C8A8 = (uint64_t)v224;
  qword_10199C8B0 = (uint64_t)v224;
  qword_10199C8B8 = (uint64_t)(v224 + 336);
  do
  {
    *(_OWORD *)&v224[v225 * 16] = v287[v225];
    ++v225;
  }

  while (v225 != 21);
  qword_10199C8B0 = (uint64_t)(v224 + 336);
  xmmword_10199C8C0 = xmmword_101353BB0;
  unk_10199C8D0 = xmmword_101353BC0;
  sub_1010DDBC0(&qword_10199C8E0, "Denver-1");
  v286[0] = xmmword_101353BD0;
  v286[1] = xmmword_101353BE0;
  v286[2] = xmmword_101353BF0;
  v286[3] = xmmword_101353C00;
  v286[4] = xmmword_101353C10;
  v286[5] = xmmword_101353C20;
  v286[6] = xmmword_101353C30;
  v286[7] = xmmword_101353C40;
  v286[8] = xmmword_101353C50;
  v286[9] = xmmword_101353C60;
  v286[10] = xmmword_101353C70;
  v286[11] = xmmword_101353C80;
  v286[12] = xmmword_101353C90;
  v286[13] = xmmword_101353BD0;
  qword_10199C900 = 0LL;
  qword_10199C908 = 0LL;
  qword_10199C8F8 = 0LL;
  v226 = (char *)operator new(0xE0uLL);
  uint64_t v227 = 0LL;
  qword_10199C8F8 = (uint64_t)v226;
  qword_10199C900 = (uint64_t)v226;
  qword_10199C908 = (uint64_t)(v226 + 224);
  do
  {
    v228 = &v226[v227 * 16];
    __int128 v229 = v286[v227 + 1];
    *(_OWORD *)v228 = v286[v227];
    *((_OWORD *)v228 + 1) = v229;
    v227 += 2LL;
  }

  while (v227 != 14);
  qword_10199C900 = (uint64_t)(v226 + 224);
  xmmword_10199C910 = xmmword_101353CA0;
  unk_10199C920 = xmmword_101353CB0;
  sub_1010DDBC0(&qword_10199C930, "NY-1");
  v285[0] = xmmword_101353CC0;
  v285[1] = xmmword_101353CD0;
  v285[2] = xmmword_101353CE0;
  v285[3] = xmmword_101353CF0;
  v285[4] = xmmword_101353D00;
  v285[5] = xmmword_101353D10;
  v285[6] = xmmword_101353D20;
  v285[7] = xmmword_101353CC0;
  qword_10199C950 = 0LL;
  qword_10199C958 = 0LL;
  qword_10199C948 = 0LL;
  v230 = (char *)operator new(0x80uLL);
  uint64_t v231 = 0LL;
  qword_10199C948 = (uint64_t)v230;
  qword_10199C950 = (uint64_t)v230;
  qword_10199C958 = (uint64_t)(v230 + 128);
  do
  {
    v232 = &v230[v231 * 16];
    __int128 v233 = v285[v231 + 1];
    *(_OWORD *)v232 = v285[v231];
    *((_OWORD *)v232 + 1) = v233;
    v231 += 2LL;
  }

  while (v231 != 8);
  qword_10199C950 = (uint64_t)(v230 + 128);
  xmmword_10199C960 = xmmword_101353D30;
  unk_10199C970 = xmmword_101353D40;
  sub_1010DDBC0(&qword_10199C980, "Chicago-1");
  v284[0] = xmmword_101353D50;
  v284[1] = xmmword_101353D60;
  v284[2] = xmmword_101353D70;
  v284[3] = xmmword_101353D80;
  v284[4] = xmmword_101353D90;
  v284[5] = xmmword_101353DA0;
  v284[6] = xmmword_101353DB0;
  v284[7] = xmmword_101353DC0;
  v284[8] = xmmword_101353DD0;
  v284[9] = xmmword_101353DE0;
  v284[10] = xmmword_101353DF0;
  v284[11] = xmmword_101353E00;
  v284[12] = xmmword_101353E10;
  v284[13] = xmmword_101353E20;
  v284[14] = xmmword_101353E30;
  v284[15] = xmmword_101353E40;
  v284[16] = xmmword_101353E50;
  v284[17] = xmmword_101353E60;
  v284[18] = xmmword_101353E70;
  v284[19] = xmmword_101353E80;
  v284[20] = xmmword_101353E90;
  v284[21] = xmmword_101353EA0;
  v284[22] = xmmword_101353EB0;
  v284[23] = xmmword_101353EC0;
  v284[24] = xmmword_101353ED0;
  v284[25] = xmmword_101353EE0;
  v284[26] = xmmword_101353EF0;
  v284[27] = xmmword_101353F00;
  v284[28] = xmmword_101353D50;
  qword_10199C998 = 0LL;
  qword_10199C9A0 = 0LL;
  qword_10199C9A8 = 0LL;
  v234 = (char *)operator new(0x1D0uLL);
  uint64_t v235 = 0LL;
  qword_10199C998 = (uint64_t)v234;
  qword_10199C9A0 = (uint64_t)v234;
  qword_10199C9A8 = (uint64_t)(v234 + 464);
  do
  {
    *(_OWORD *)&v234[v235 * 16] = v284[v235];
    ++v235;
  }

  while (v235 != 29);
  qword_10199C9A0 = (uint64_t)(v234 + 464);
  xmmword_10199C9B0 = xmmword_101353F10;
  unk_10199C9C0 = xmmword_101353F20;
  sub_1010DDBC0(&qword_10199C9D0, "Chicago-2");
  v283[0] = xmmword_101353F30;
  v283[1] = xmmword_101353F40;
  v283[2] = xmmword_101353F50;
  v283[3] = xmmword_101353F60;
  v283[4] = xmmword_101353F30;
  qword_10199C9F0 = 0LL;
  qword_10199C9F8 = 0LL;
  qword_10199C9E8 = 0LL;
  v236 = (char *)operator new(0x50uLL);
  uint64_t v237 = 0LL;
  qword_10199C9E8 = (uint64_t)v236;
  qword_10199C9F0 = (uint64_t)v236;
  qword_10199C9F8 = (uint64_t)(v236 + 80);
  do
  {
    *(_OWORD *)&v236[v237 * 16] = v283[v237];
    ++v237;
  }

  while (v237 != 5);
  qword_10199C9F0 = (uint64_t)(v236 + 80);
  xmmword_10199CA00 = xmmword_101353F70;
  unk_10199CA10 = xmmword_101353F80;
  sub_1010DDBC0(&qword_10199CA20, "Chicago-3");
  v282[0] = xmmword_101353F90;
  v282[1] = xmmword_101353FA0;
  v282[2] = xmmword_101353FB0;
  v282[3] = xmmword_101353FC0;
  v282[4] = xmmword_101353F90;
  qword_10199CA40 = 0LL;
  qword_10199CA48 = 0LL;
  qword_10199CA38 = 0LL;
  v238 = (char *)operator new(0x50uLL);
  uint64_t v239 = 0LL;
  qword_10199CA38 = (uint64_t)v238;
  qword_10199CA40 = (uint64_t)v238;
  qword_10199CA48 = (uint64_t)(v238 + 80);
  do
  {
    *(_OWORD *)&v238[v239 * 16] = v282[v239];
    ++v239;
  }

  while (v239 != 5);
  qword_10199CA40 = (uint64_t)(v238 + 80);
  xmmword_10199CA50 = xmmword_101353FD0;
  unk_10199CA60 = xmmword_101353FE0;
  sub_1010DDBC0(&qword_10199CA70, "Chicago-4");
  v281[0] = xmmword_101353FF0;
  v281[1] = xmmword_101354000;
  v281[2] = xmmword_101354010;
  v281[3] = xmmword_101354020;
  v281[4] = xmmword_101353FF0;
  qword_10199CA90 = 0LL;
  qword_10199CA98 = 0LL;
  qword_10199CA88 = 0LL;
  v240 = (char *)operator new(0x50uLL);
  uint64_t v241 = 0LL;
  qword_10199CA88 = (uint64_t)v240;
  qword_10199CA90 = (uint64_t)v240;
  qword_10199CA98 = (uint64_t)(v240 + 80);
  do
  {
    *(_OWORD *)&v240[v241 * 16] = v281[v241];
    ++v241;
  }

  while (v241 != 5);
  qword_10199CA90 = (uint64_t)(v240 + 80);
  xmmword_10199CAA0 = xmmword_101354030;
  unk_10199CAB0 = xmmword_101354040;
  sub_1010DDBC0(&qword_10199CAC0, "SF-1");
  v280[0] = xmmword_101354050;
  v280[1] = xmmword_101354060;
  v280[2] = xmmword_101354070;
  v280[3] = xmmword_101354080;
  v280[4] = xmmword_101354090;
  v280[5] = xmmword_1013540A0;
  v280[6] = xmmword_1013540B0;
  v280[7] = xmmword_1013540C0;
  v280[8] = xmmword_1013540D0;
  v280[9] = xmmword_1013540E0;
  v280[10] = xmmword_101354050;
  qword_10199CAE0 = 0LL;
  qword_10199CAE8 = 0LL;
  qword_10199CAD8 = 0LL;
  v242 = (char *)operator new(0xB0uLL);
  uint64_t v243 = 0LL;
  qword_10199CAD8 = (uint64_t)v242;
  qword_10199CAE0 = (uint64_t)v242;
  qword_10199CAE8 = (uint64_t)(v242 + 176);
  do
  {
    *(_OWORD *)&v242[v243 * 16] = v280[v243];
    ++v243;
  }

  while (v243 != 11);
  qword_10199CAE0 = (uint64_t)(v242 + 176);
  xmmword_10199CAF0 = xmmword_1013540F0;
  unk_10199CB00 = xmmword_101354100;
  sub_1010DDBC0(&qword_10199CB10, "SF-2");
  v279[0] = xmmword_101354110;
  v279[1] = xmmword_101354120;
  v279[2] = xmmword_101354130;
  v279[3] = xmmword_101354140;
  v279[4] = xmmword_101354150;
  v279[5] = xmmword_101354160;
  v279[6] = xmmword_101354170;
  v279[7] = xmmword_101354110;
  qword_10199CB30 = 0LL;
  qword_10199CB38 = 0LL;
  qword_10199CB28 = 0LL;
  v244 = (char *)operator new(0x80uLL);
  uint64_t v245 = 0LL;
  qword_10199CB28 = (uint64_t)v244;
  qword_10199CB30 = (uint64_t)v244;
  qword_10199CB38 = (uint64_t)(v244 + 128);
  do
  {
    v246 = &v244[v245 * 16];
    __int128 v247 = v279[v245 + 1];
    *(_OWORD *)v246 = v279[v245];
    *((_OWORD *)v246 + 1) = v247;
    v245 += 2LL;
  }

  while (v245 != 8);
  qword_10199CB30 = (uint64_t)(v244 + 128);
  xmmword_10199CB40 = xmmword_101354180;
  unk_10199CB50 = xmmword_101354190;
  sub_1010DDBC0(&qword_10199CB60, "SJ-1");
  v278[0] = xmmword_1013541A0;
  v278[1] = xmmword_1013541B0;
  v278[2] = xmmword_1013541C0;
  v278[3] = xmmword_1013541D0;
  v278[4] = xmmword_1013541E0;
  v278[5] = xmmword_1013541F0;
  v278[6] = xmmword_101354200;
  v278[7] = xmmword_101354210;
  v278[8] = xmmword_101354220;
  v278[9] = xmmword_101354230;
  v278[10] = xmmword_101354240;
  v278[11] = xmmword_101354250;
  v278[12] = xmmword_101354260;
  v278[13] = xmmword_101354270;
  v278[14] = xmmword_101354280;
  v278[15] = xmmword_101354290;
  v278[16] = xmmword_1013542A0;
  v278[17] = xmmword_1013542B0;
  v278[18] = xmmword_1013542C0;
  v278[19] = xmmword_1013542D0;
  v278[20] = xmmword_1013542E0;
  v278[21] = xmmword_1013542F0;
  v278[22] = xmmword_101354300;
  v278[23] = xmmword_101354310;
  v278[24] = xmmword_101354320;
  v278[25] = xmmword_101354330;
  v278[26] = xmmword_101354340;
  v278[27] = xmmword_1013541A0;
  qword_10199CB78 = 0LL;
  qword_10199CB80 = 0LL;
  qword_10199CB88 = 0LL;
  v248 = (char *)operator new(0x1C0uLL);
  uint64_t v249 = 0LL;
  qword_10199CB78 = (uint64_t)v248;
  qword_10199CB80 = (uint64_t)v248;
  qword_10199CB88 = (uint64_t)(v248 + 448);
  do
  {
    v250 = &v248[v249 * 16];
    __int128 v251 = v278[v249 + 1];
    *(_OWORD *)v250 = v278[v249];
    *((_OWORD *)v250 + 1) = v251;
    v249 += 2LL;
  }

  while (v249 != 28);
  qword_10199CB80 = (uint64_t)(v248 + 448);
  xmmword_10199CB90 = xmmword_101354350;
  unk_10199CBA0 = xmmword_101354360;
  sub_1010DDBC0(&qword_10199CBB0, "SJ-2");
  v277[0] = xmmword_101354370;
  v277[1] = xmmword_101354380;
  v277[2] = xmmword_101354390;
  v277[3] = xmmword_1013543A0;
  v277[4] = xmmword_1013543B0;
  v277[5] = xmmword_1013543C0;
  v277[6] = xmmword_101354370;
  qword_10199CBD0 = 0LL;
  qword_10199CBD8 = 0LL;
  qword_10199CBC8 = 0LL;
  v252 = (char *)operator new(0x70uLL);
  uint64_t v253 = 0LL;
  qword_10199CBC8 = (uint64_t)v252;
  qword_10199CBD0 = (uint64_t)v252;
  qword_10199CBD8 = (uint64_t)(v252 + 112);
  do
  {
    *(_OWORD *)&v252[v253 * 16] = v277[v253];
    ++v253;
  }

  while (v253 != 7);
  qword_10199CBD0 = (uint64_t)(v252 + 112);
  xmmword_10199CBE0 = xmmword_1013543D0;
  unk_10199CBF0 = xmmword_1013543E0;
  sub_1010DDBC0(&qword_10199CC00, "SJ-3");
  v276[0] = xmmword_1013543F0;
  v276[1] = xmmword_101354400;
  v276[2] = xmmword_101354410;
  v276[3] = xmmword_101354420;
  v276[4] = xmmword_1013543F0;
  qword_10199CC20 = 0LL;
  qword_10199CC28 = 0LL;
  qword_10199CC18 = 0LL;
  v254 = (char *)operator new(0x50uLL);
  uint64_t v255 = 0LL;
  qword_10199CC18 = (uint64_t)v254;
  qword_10199CC20 = (uint64_t)v254;
  qword_10199CC28 = (uint64_t)(v254 + 80);
  do
  {
    *(_OWORD *)&v254[v255 * 16] = v276[v255];
    ++v255;
  }

  while (v255 != 5);
  qword_10199CC20 = (uint64_t)(v254 + 80);
  xmmword_10199CC30 = xmmword_101354430;
  unk_10199CC40 = xmmword_101354440;
  sub_1010DDBC0(&qword_10199CC50, "SJ-4");
  v275[0] = xmmword_101354450;
  v275[1] = xmmword_101354460;
  v275[2] = xmmword_101354470;
  v275[3] = xmmword_101354480;
  v275[4] = xmmword_101354450;
  qword_10199CC70 = 0LL;
  qword_10199CC78 = 0LL;
  qword_10199CC68 = 0LL;
  v256 = (char *)operator new(0x50uLL);
  uint64_t v257 = 0LL;
  qword_10199CC68 = (uint64_t)v256;
  qword_10199CC70 = (uint64_t)v256;
  qword_10199CC78 = (uint64_t)(v256 + 80);
  do
  {
    *(_OWORD *)&v256[v257 * 16] = v275[v257];
    ++v257;
  }

  while (v257 != 5);
  qword_10199CC70 = (uint64_t)(v256 + 80);
  xmmword_10199CC80 = xmmword_101354490;
  unk_10199CC90 = xmmword_1013544A0;
  sub_1010DDBC0(&qword_10199CCA0, "SJ-5");
  v274[0] = xmmword_1013544B0;
  v274[1] = xmmword_1013544C0;
  v274[2] = xmmword_1013544D0;
  v274[3] = xmmword_1013544E0;
  v274[4] = xmmword_1013544F0;
  v274[5] = xmmword_101354500;
  v274[6] = xmmword_101354510;
  v274[7] = xmmword_101354520;
  v274[8] = xmmword_1013544B0;
  qword_10199CCC0 = 0LL;
  qword_10199CCC8 = 0LL;
  qword_10199CCB8 = 0LL;
  v258 = (char *)operator new(0x90uLL);
  uint64_t v259 = 0LL;
  qword_10199CCB8 = (uint64_t)v258;
  qword_10199CCC0 = (uint64_t)v258;
  qword_10199CCC8 = (uint64_t)(v258 + 144);
  do
  {
    *(_OWORD *)&v258[v259 * 16] = v274[v259];
    ++v259;
  }

  while (v259 != 9);
  qword_10199CCC0 = (uint64_t)(v258 + 144);
  xmmword_10199CCD0 = xmmword_1013544C0;
  unk_10199CCE0 = xmmword_101354530;
  sub_1010DDBC0(&qword_10199CCF0, "Atlanta-1");
  v273[0] = xmmword_101354540;
  v273[1] = xmmword_101354550;
  v273[2] = xmmword_101354560;
  v273[3] = xmmword_101354570;
  v273[4] = xmmword_101354580;
  v273[5] = xmmword_101354590;
  v273[6] = xmmword_1013545A0;
  v273[7] = xmmword_1013545B0;
  v273[8] = xmmword_1013545C0;
  v273[9] = xmmword_1013545D0;
  v273[10] = xmmword_1013545E0;
  v273[11] = xmmword_1013545F0;
  v273[12] = xmmword_101354600;
  v273[13] = xmmword_101354610;
  v273[14] = xmmword_101354620;
  v273[15] = xmmword_101354630;
  v273[16] = xmmword_101354640;
  v273[17] = xmmword_101354650;
  v273[18] = xmmword_101354660;
  v273[19] = xmmword_101354670;
  v273[20] = xmmword_101354680;
  v273[21] = xmmword_101354690;
  v273[22] = xmmword_1013546A0;
  v273[23] = xmmword_1013546B0;
  v273[24] = xmmword_1013546C0;
  v273[25] = xmmword_101354540;
  qword_10199CD08 = 0LL;
  qword_10199CD10 = 0LL;
  qword_10199CD18 = 0LL;
  v260 = (char *)operator new(0x1A0uLL);
  uint64_t v261 = 0LL;
  qword_10199CD08 = (uint64_t)v260;
  qword_10199CD10 = (uint64_t)v260;
  qword_10199CD18 = (uint64_t)(v260 + 416);
  do
  {
    v262 = &v260[v261 * 16];
    __int128 v263 = v273[v261 + 1];
    *(_OWORD *)v262 = v273[v261];
    *((_OWORD *)v262 + 1) = v263;
    v261 += 2LL;
  }

  while (v261 != 26);
  qword_10199CD10 = (uint64_t)(v260 + 416);
  xmmword_10199CD20 = xmmword_1013546D0;
  unk_10199CD30 = xmmword_1013546E0;
  sub_1010DDBC0(&qword_10199CD40, "Atlanta-2");
  v272[0] = xmmword_1013546F0;
  v272[1] = xmmword_101354700;
  v272[2] = xmmword_101354710;
  v272[3] = xmmword_101354720;
  v272[4] = xmmword_101354730;
  v272[5] = xmmword_101354740;
  v272[6] = xmmword_101354750;
  v272[7] = xmmword_101354760;
  v272[8] = xmmword_101354770;
  v272[9] = xmmword_101354780;
  v272[10] = xmmword_101354790;
  v272[11] = xmmword_1013547A0;
  v272[12] = xmmword_1013547B0;
  v272[13] = xmmword_1013547C0;
  v272[14] = xmmword_1013547D0;
  v272[15] = xmmword_1013546F0;
  qword_10199CD60 = 0LL;
  qword_10199CD68 = 0LL;
  qword_10199CD58 = 0LL;
  v264 = (char *)operator new(0x100uLL);
  uint64_t v265 = 0LL;
  qword_10199CD58 = (uint64_t)v264;
  qword_10199CD60 = (uint64_t)v264;
  qword_10199CD68 = (uint64_t)(v264 + 256);
  do
  {
    v266 = &v264[v265 * 16];
    __int128 v267 = v272[v265 + 1];
    *(_OWORD *)v266 = v272[v265];
    *((_OWORD *)v266 + 1) = v267;
    v265 += 2LL;
  }

  while (v265 != 16);
  qword_10199CD60 = (uint64_t)(v264 + 256);
  xmmword_10199CD70 = xmmword_1013547E0;
  unk_10199CD80 = xmmword_1013547F0;
  sub_1010DDBC0(&qword_10199CD90, "Atlanta-3");
  v271[0] = xmmword_101354800;
  v271[1] = xmmword_101354810;
  v271[2] = xmmword_101354820;
  v271[3] = xmmword_101354830;
  v271[4] = xmmword_101354840;
  v271[5] = xmmword_101354850;
  v271[6] = xmmword_101354860;
  v271[7] = xmmword_101354870;
  v271[8] = xmmword_101354880;
  qword_10199CDB0 = 0LL;
  qword_10199CDB8 = 0LL;
  qword_10199CDA8 = 0LL;
  v268 = (char *)operator new(0x90uLL);
  uint64_t v269 = 0LL;
  qword_10199CDA8 = (uint64_t)v268;
  qword_10199CDB0 = (uint64_t)v268;
  qword_10199CDB8 = (uint64_t)(v268 + 144);
  do
  {
    *(_OWORD *)&v268[v269 * 16] = v271[v269];
    ++v269;
  }

  while (v269 != 9);
  qword_10199CDB0 = (uint64_t)(v268 + 144);
  xmmword_10199CDC0 = xmmword_101354890;
  xmmword_10199CDD0 = xmmword_1013548A0;
  return __cxa_atexit((void (*)(void *))sub_100C3A940, &qword_10199B030, (void *)&_mh_execute_header);
}

void sub_100C43088(_Unwind_Exception *exception_object)
{
  if (byte_10199CDA7 < 0) {
    sub_101267140();
  }
  __int128 v3 = &qword_10199CD90;
  while (1)
  {
    uint64_t v4 = (void *)*(v3 - 7);
    if (v4)
    {
      *(v3 - 6) = (uint64_t)v4;
      operator delete(v4);
    }

    v3 -= 10;
    if (v3 == v1) {
      _Unwind_Resume(exception_object);
    }
  }

void sub_100C43F78()
{
  if (byte_10199B047 < 0) {
    sub_1012675A8();
  }
  JUMPOUT(0x100C43F70LL);
}

void sub_100C43F90()
{
}

uint64_t sub_100C43F98()
{
  v56[0] = xmmword_1013548B0;
  v56[1] = xmmword_1013548C0;
  v56[2] = xmmword_1013548D0;
  v56[3] = xmmword_1013548E0;
  v56[4] = xmmword_1013548F0;
  v56[5] = xmmword_101354900;
  v56[6] = xmmword_101354910;
  v56[7] = xmmword_101354920;
  v56[8] = xmmword_101354930;
  v56[9] = xmmword_101354940;
  v56[10] = xmmword_101354950;
  v56[11] = xmmword_101354960;
  v56[12] = xmmword_101354970;
  v56[13] = xmmword_101354980;
  v56[14] = xmmword_101354990;
  v56[15] = xmmword_1013549A0;
  v56[16] = xmmword_1013549B0;
  v56[17] = xmmword_1013549C0;
  v56[18] = xmmword_1013549D0;
  v56[19] = xmmword_1013549E0;
  v56[20] = xmmword_1013549F0;
  v56[21] = xmmword_101354A00;
  v56[22] = xmmword_101354A10;
  v56[23] = xmmword_101354A20;
  v56[24] = xmmword_1013548B0;
  qword_10199CDF8 = 0LL;
  qword_10199CE00 = 0LL;
  qword_10199CE08 = 0LL;
  unsigned __int8 v0 = (char *)operator new(0x190uLL);
  uint64_t v1 = 0LL;
  qword_10199CDF8 = (uint64_t)v0;
  qword_10199CE00 = (uint64_t)v0;
  qword_10199CE08 = (uint64_t)(v0 + 400);
  do
  {
    *(_OWORD *)&v0[v1 * 16] = v56[v1];
    ++v1;
  }

  while (v1 != 25);
  qword_10199CE00 = (uint64_t)(v0 + 400);
  xmmword_10199CE10 = xmmword_101354A30;
  unk_10199CE20 = xmmword_101354A40;
  sub_1010DDBC0(&qword_10199CE30, "ContinentalUS-Mountain");
  v55[0] = xmmword_101354940;
  v55[1] = xmmword_101354A50;
  v55[2] = xmmword_101354A60;
  v55[3] = xmmword_101354A70;
  v55[4] = xmmword_101354A80;
  v55[5] = xmmword_101354A90;
  v55[6] = xmmword_101354AA0;
  v55[7] = xmmword_101354AB0;
  v55[8] = xmmword_101354AC0;
  v55[9] = xmmword_101354AD0;
  _BYTE v55[10] = xmmword_101354AE0;
  v55[11] = xmmword_101354AF0;
  v55[12] = xmmword_101354B00;
  v55[13] = xmmword_101354B10;
  v55[14] = xmmword_101354B20;
  v55[15] = xmmword_101354B30;
  v55[16] = xmmword_101354B40;
  v55[17] = xmmword_101354B50;
  v55[18] = xmmword_101354B60;
  v55[19] = xmmword_101354B70;
  v55[20] = xmmword_101354B80;
  v55[21] = xmmword_101354B90;
  v55[22] = xmmword_101354BA0;
  v55[23] = xmmword_101354BB0;
  v55[24] = xmmword_101354BC0;
  v55[25] = xmmword_101354BD0;
  v55[26] = xmmword_101354BE0;
  v55[27] = xmmword_101354BF0;
  v55[28] = xmmword_101354C00;
  v55[29] = xmmword_101354C10;
  v55[30] = xmmword_101354C20;
  v55[31] = xmmword_101354C30;
  v55[32] = xmmword_101354C40;
  v55[33] = xmmword_101354C50;
  v55[34] = xmmword_101354C60;
  v55[35] = xmmword_101354C70;
  v55[36] = xmmword_101354940;
  qword_10199CE48 = 0LL;
  qword_10199CE50 = 0LL;
  qword_10199CE58 = 0LL;
  uint64_t v2 = (char *)operator new(0x250uLL);
  uint64_t v3 = 0LL;
  qword_10199CE48 = (uint64_t)v2;
  qword_10199CE50 = (uint64_t)v2;
  qword_10199CE58 = (uint64_t)(v2 + 592);
  do
  {
    *(_OWORD *)&v2[v3 * 16] = v55[v3];
    ++v3;
  }

  while (v3 != 37);
  qword_10199CE50 = (uint64_t)(v2 + 592);
  xmmword_10199CE60 = xmmword_101354C80;
  unk_10199CE70 = xmmword_101354A50;
  sub_1010DDBC0(&qword_10199CE80, "ContinentalUS-Central1");
  v54[0] = xmmword_101354C90;
  v54[1] = xmmword_101354A50;
  v54[2] = xmmword_101354A70;
  v54[3] = xmmword_101354CA0;
  v54[4] = xmmword_101354CB0;
  v54[5] = xmmword_101354CC0;
  v54[6] = xmmword_101354CD0;
  v54[7] = xmmword_101354CE0;
  v54[8] = xmmword_101354CF0;
  v54[9] = xmmword_101354D00;
  v54[10] = xmmword_101354D10;
  v54[11] = xmmword_101354D20;
  v54[12] = xmmword_101354D30;
  v54[13] = xmmword_101354D40;
  v54[14] = xmmword_101354D50;
  v54[15] = xmmword_101354D60;
  v54[16] = xmmword_101354D70;
  v54[17] = xmmword_101354D80;
  v54[18] = xmmword_101354D90;
  v54[19] = xmmword_101354DA0;
  v54[20] = xmmword_101354DB0;
  v54[21] = xmmword_101354DC0;
  v54[22] = xmmword_101354DD0;
  v54[23] = xmmword_101354DE0;
  v54[24] = xmmword_101354DF0;
  v54[25] = xmmword_101354E00;
  v54[26] = xmmword_101354E10;
  v54[27] = xmmword_101354E20;
  v54[28] = xmmword_101354E30;
  v54[29] = xmmword_101354E40;
  v54[30] = xmmword_101354E50;
  v54[31] = xmmword_101354E60;
  v54[32] = xmmword_101354E70;
  v54[33] = xmmword_101354E80;
  v54[34] = xmmword_101354E90;
  v54[35] = xmmword_101354EA0;
  v54[36] = xmmword_101354EB0;
  v54[37] = xmmword_101354EC0;
  v54[38] = xmmword_101354ED0;
  v54[39] = xmmword_101354EE0;
  v54[40] = xmmword_101354EF0;
  v54[41] = xmmword_101354F00;
  v54[42] = xmmword_101354F10;
  v54[43] = xmmword_101354F20;
  v54[44] = xmmword_101354F30;
  v54[45] = xmmword_101354F40;
  v54[46] = xmmword_101354F50;
  v54[47] = xmmword_101354F60;
  v54[48] = xmmword_101354F70;
  v54[49] = xmmword_101354F80;
  v54[50] = xmmword_101354F90;
  v54[51] = xmmword_101354FA0;
  v54[52] = xmmword_101354FB0;
  v54[53] = xmmword_101354FC0;
  v54[54] = xmmword_101354FD0;
  v54[55] = xmmword_101354FE0;
  v54[56] = xmmword_101354FF0;
  v54[57] = xmmword_101355000;
  v54[58] = xmmword_101355010;
  v54[59] = xmmword_101355020;
  v54[60] = xmmword_101355030;
  v54[61] = xmmword_101355040;
  v54[62] = xmmword_101355050;
  v54[63] = xmmword_101355060;
  v54[64] = xmmword_101355070;
  v54[65] = xmmword_101355080;
  v54[66] = xmmword_101355090;
  v54[67] = xmmword_1013550A0;
  v54[68] = xmmword_1013550B0;
  v54[69] = xmmword_1013550C0;
  v54[70] = xmmword_1013550D0;
  v54[71] = xmmword_1013550E0;
  v54[72] = xmmword_1013550F0;
  v54[73] = xmmword_101355100;
  v54[74] = xmmword_101355110;
  v54[75] = xmmword_101355120;
  v54[76] = xmmword_101355130;
  v54[77] = xmmword_101355140;
  v54[78] = xmmword_101355150;
  v54[79] = xmmword_101355160;
  v54[80] = xmmword_101355170;
  v54[81] = xmmword_101355180;
  v54[82] = xmmword_101355190;
  v54[83] = xmmword_1013551A0;
  v54[84] = xmmword_1013551B0;
  v54[85] = xmmword_1013551C0;
  v54[86] = xmmword_1013551D0;
  v54[87] = xmmword_1013551E0;
  v54[88] = xmmword_1013551F0;
  v54[89] = xmmword_101355200;
  v54[90] = xmmword_101355210;
  v54[91] = xmmword_101355220;
  v54[92] = xmmword_101355230;
  v54[93] = xmmword_101355240;
  v54[94] = xmmword_101355250;
  v54[95] = xmmword_101355260;
  v54[96] = xmmword_101355270;
  v54[97] = xmmword_101355280;
  v54[98] = xmmword_101355290;
  v54[99] = xmmword_1013552A0;
  v54[100] = xmmword_1013552B0;
  v54[101] = xmmword_1013552C0;
  v54[102] = xmmword_1013552D0;
  v54[103] = xmmword_1013552E0;
  v54[104] = xmmword_1013552F0;
  v54[105] = xmmword_101355300;
  v54[106] = xmmword_101355310;
  v54[107] = xmmword_101355320;
  v54[108] = xmmword_101355330;
  v54[109] = xmmword_101355340;
  v54[110] = xmmword_101355350;
  v54[111] = xmmword_101355360;
  v54[112] = xmmword_101355370;
  v54[113] = xmmword_101355380;
  v54[114] = xmmword_101355390;
  v54[115] = xmmword_1013553A0;
  v54[116] = xmmword_1013553B0;
  v54[117] = xmmword_1013553C0;
  v54[118] = xmmword_1013553D0;
  v54[119] = xmmword_1013553E0;
  v54[120] = xmmword_1013553F0;
  v54[121] = xmmword_101355400;
  v54[122] = xmmword_101355410;
  v54[123] = xmmword_101355420;
  v54[124] = xmmword_101355430;
  v54[125] = xmmword_101355440;
  v54[126] = xmmword_101355450;
  v54[127] = xmmword_101355460;
  v54[128] = xmmword_101355470;
  v54[129] = xmmword_101355480;
  v54[130] = xmmword_101355490;
  v54[131] = xmmword_1013554A0;
  v54[132] = xmmword_1013554B0;
  v54[133] = xmmword_1013554C0;
  v54[134] = xmmword_1013554D0;
  v54[135] = xmmword_1013554E0;
  v54[136] = xmmword_1013554F0;
  v54[137] = xmmword_101355500;
  v54[138] = xmmword_101355510;
  v54[139] = xmmword_101355520;
  v54[140] = xmmword_101355530;
  v54[141] = xmmword_101355540;
  v54[142] = xmmword_101355550;
  v54[143] = xmmword_101355560;
  v54[144] = xmmword_101355570;
  v54[145] = xmmword_101355580;
  v54[146] = xmmword_101355590;
  v54[147] = xmmword_1013555A0;
  v54[148] = xmmword_1013555B0;
  v54[149] = xmmword_101354C90;
  qword_10199CE98 = 0LL;
  qword_10199CEA0 = 0LL;
  qword_10199CEA8 = 0LL;
  uint64_t v4 = (char *)operator new(0x960uLL);
  uint64_t v5 = 0LL;
  qword_10199CE98 = (uint64_t)v4;
  qword_10199CEA0 = (uint64_t)v4;
  qword_10199CEA8 = (uint64_t)(v4 + 2400);
  do
  {
    unint64_t v6 = &v4[v5 * 16];
    __int128 v7 = v54[v5 + 1];
    *(_OWORD *)unint64_t v6 = v54[v5];
    *((_OWORD *)v6 + 1) = v7;
    v5 += 2LL;
  }

  while (v5 != 150);
  qword_10199CEA0 = (uint64_t)(v4 + 2400);
  xmmword_10199CEB0 = xmmword_1013555C0;
  unk_10199CEC0 = xmmword_101354C90;
  sub_1010DDBC0(&qword_10199CED0, "ContinentalUS-Central2");
  v53[0] = xmmword_1013555B0;
  v53[1] = xmmword_1013555D0;
  v53[2] = xmmword_1013555E0;
  v53[3] = xmmword_1013555F0;
  v53[4] = xmmword_101355600;
  v53[5] = xmmword_101355610;
  v53[6] = xmmword_101355620;
  v53[7] = xmmword_101355630;
  v53[8] = xmmword_101355640;
  v53[9] = xmmword_101355650;
  v53[10] = xmmword_101355660;
  v53[11] = xmmword_101355670;
  v53[12] = xmmword_101355680;
  v53[13] = xmmword_101355690;
  v53[14] = xmmword_1013556A0;
  v53[15] = xmmword_1013556B0;
  v53[16] = xmmword_1013556C0;
  v53[17] = xmmword_1013556D0;
  v53[18] = xmmword_1013556E0;
  v53[19] = xmmword_1013556F0;
  v53[20] = xmmword_101355700;
  v53[21] = xmmword_101355710;
  v53[22] = xmmword_101355720;
  v53[23] = xmmword_101355730;
  v53[24] = xmmword_101355740;
  v53[25] = xmmword_101355750;
  v53[26] = xmmword_101355760;
  v53[27] = xmmword_101355770;
  v53[28] = xmmword_101355780;
  v53[29] = xmmword_101355790;
  v53[30] = xmmword_1013557A0;
  v53[31] = xmmword_1013557B0;
  v53[32] = xmmword_1013557C0;
  v53[33] = xmmword_1013557D0;
  v53[34] = xmmword_1013557E0;
  v53[35] = xmmword_1013557F0;
  v53[36] = xmmword_101355800;
  v53[37] = xmmword_101355810;
  v53[38] = xmmword_101355820;
  v53[39] = xmmword_101355830;
  v53[40] = xmmword_101355840;
  v53[41] = xmmword_101355850;
  v53[42] = xmmword_101355860;
  v53[43] = xmmword_101355870;
  v53[44] = xmmword_101355880;
  v53[45] = xmmword_101355890;
  v53[46] = xmmword_1013558A0;
  v53[47] = xmmword_1013558B0;
  v53[48] = xmmword_1013558C0;
  v53[49] = xmmword_1013558D0;
  v53[50] = xmmword_1013558E0;
  v53[51] = xmmword_1013558F0;
  v53[52] = xmmword_101355900;
  v53[53] = xmmword_101355910;
  v53[54] = xmmword_101355920;
  v53[55] = xmmword_101355930;
  v53[56] = xmmword_101355940;
  v53[57] = xmmword_101355950;
  v53[58] = xmmword_101355960;
  v53[59] = xmmword_101355970;
  v53[60] = xmmword_101355980;
  v53[61] = xmmword_101355990;
  v53[62] = xmmword_1013559A0;
  v53[63] = xmmword_1013559B0;
  v53[64] = xmmword_1013559C0;
  v53[65] = xmmword_1013559D0;
  v53[66] = xmmword_1013559E0;
  v53[67] = xmmword_1013559F0;
  v53[68] = xmmword_101355A00;
  v53[69] = xmmword_101355A10;
  v53[70] = xmmword_101355A20;
  v53[71] = xmmword_101355A30;
  v53[72] = xmmword_101355A40;
  v53[73] = xmmword_101355A50;
  v53[74] = xmmword_101355A60;
  v53[75] = xmmword_101355A70;
  v53[76] = xmmword_101355A80;
  v53[77] = xmmword_1013555B0;
  qword_10199CEE8 = 0LL;
  qword_10199CEF0 = 0LL;
  qword_10199CEF8 = 0LL;
  unint64_t v8 = (char *)operator new(0x4E0uLL);
  uint64_t v9 = 0LL;
  qword_10199CEE8 = (uint64_t)v8;
  qword_10199CEF0 = (uint64_t)v8;
  qword_10199CEF8 = (uint64_t)(v8 + 1248);
  do
  {
    uint64_t v10 = &v8[v9 * 16];
    __int128 v11 = v53[v9 + 1];
    *(_OWORD *)uint64_t v10 = v53[v9];
    *((_OWORD *)v10 + 1) = v11;
    v9 += 2LL;
  }

  while (v9 != 78);
  qword_10199CEF0 = (uint64_t)(v8 + 1248);
  xmmword_10199CF00 = xmmword_1013555B0;
  unk_10199CF10 = xmmword_101355A90;
  sub_1010DDBC0(&qword_10199CF20, "ContinentalUS-Eastern");
  v52[0] = xmmword_101355AA0;
  v52[1] = xmmword_101355AB0;
  id v52[2] = xmmword_101355AC0;
  v52[3] = xmmword_101355AD0;
  v52[4] = xmmword_101355AE0;
  v52[5] = xmmword_101355AF0;
  v52[6] = xmmword_101355B00;
  v52[7] = xmmword_101355B10;
  v52[8] = xmmword_101355B20;
  v52[9] = xmmword_101355B30;
  v52[10] = xmmword_101355B40;
  v52[11] = xmmword_101355B50;
  v52[12] = xmmword_101355B60;
  v52[13] = xmmword_101355B70;
  v52[14] = xmmword_101355B80;
  v52[15] = xmmword_101355B90;
  v52[16] = xmmword_101355BA0;
  v52[17] = xmmword_101355BB0;
  v52[18] = xmmword_101355BC0;
  v52[19] = xmmword_101355BD0;
  v52[20] = xmmword_101355BE0;
  v52[21] = xmmword_101355BF0;
  v52[22] = xmmword_101355C00;
  v52[23] = xmmword_101355C10;
  v52[24] = xmmword_101355C20;
  v52[25] = xmmword_101355C30;
  v52[26] = xmmword_101355C40;
  v52[27] = xmmword_101355C50;
  v52[28] = xmmword_101355C60;
  v52[29] = xmmword_101355C70;
  v52[30] = xmmword_101355C80;
  v52[31] = xmmword_101355C90;
  v52[32] = xmmword_101355CA0;
  v52[33] = xmmword_101355CB0;
  v52[34] = xmmword_101355CC0;
  v52[35] = xmmword_101355CD0;
  v52[36] = xmmword_101355CE0;
  v52[37] = xmmword_101355CF0;
  v52[38] = xmmword_101355D00;
  v52[39] = xmmword_101355D10;
  v52[40] = xmmword_101355D20;
  v52[41] = xmmword_101355D30;
  v52[42] = xmmword_101355D40;
  v52[43] = xmmword_101355D50;
  v52[44] = xmmword_101355D60;
  v52[45] = xmmword_101355D70;
  v52[46] = xmmword_101355D80;
  v52[47] = xmmword_101355D90;
  v52[48] = xmmword_101355DA0;
  v52[49] = xmmword_101355DB0;
  v52[50] = xmmword_101355DC0;
  v52[51] = xmmword_101355DD0;
  v52[52] = xmmword_101355AA0;
  qword_10199CF38 = 0LL;
  qword_10199CF40 = 0LL;
  qword_10199CF48 = 0LL;
  unint64_t v12 = (char *)operator new(0x350uLL);
  uint64_t v13 = 0LL;
  qword_10199CF38 = (uint64_t)v12;
  qword_10199CF40 = (uint64_t)v12;
  qword_10199CF48 = (uint64_t)(v12 + 848);
  do
  {
    *(_OWORD *)&v12[v13 * 16] = v52[v13];
    ++v13;
  }

  while (v13 != 53);
  qword_10199CF40 = (uint64_t)(v12 + 848);
  xmmword_10199CF50 = xmmword_101355DC0;
  unk_10199CF60 = xmmword_101355DE0;
  sub_1010DDBC0(&qword_10199CF70, "ContinentalUS-EastCoast");
  v51[0] = xmmword_101355AA0;
  v51[1] = xmmword_101355DD0;
  v51[2] = xmmword_101355DF0;
  v51[3] = xmmword_101355E00;
  v51[4] = xmmword_101355E10;
  v51[5] = xmmword_101355E20;
  v51[6] = xmmword_101355AA0;
  qword_10199CF90 = 0LL;
  qword_10199CF98 = 0LL;
  qword_10199CF88 = 0LL;
  unint64_t v14 = (char *)operator new(0x70uLL);
  uint64_t v15 = 0LL;
  qword_10199CF88 = (uint64_t)v14;
  qword_10199CF90 = (uint64_t)v14;
  qword_10199CF98 = (uint64_t)(v14 + 112);
  do
  {
    *(_OWORD *)&v14[v15 * 16] = v51[v15];
    ++v15;
  }

  while (v15 != 7);
  qword_10199CF90 = (uint64_t)(v14 + 112);
  xmmword_10199CFA0 = xmmword_101355DD0;
  unk_10199CFB0 = xmmword_101355E30;
  sub_1010DDBC0(&qword_10199CFC0, "ContinentalUS-Florida");
  v50[0] = xmmword_101355DD0;
  v50[1] = xmmword_101355E40;
  v50[2] = xmmword_101355E50;
  v50[3] = xmmword_101355E60;
  v50[4] = xmmword_101355E70;
  v50[5] = xmmword_101355E80;
  v50[6] = xmmword_101355DF0;
  v50[7] = xmmword_101355DD0;
  qword_10199CFE0 = 0LL;
  qword_10199CFE8 = 0LL;
  qword_10199CFD8 = 0LL;
  uint64_t v16 = (char *)operator new(0x80uLL);
  uint64_t v17 = 0LL;
  qword_10199CFD8 = (uint64_t)v16;
  qword_10199CFE0 = (uint64_t)v16;
  qword_10199CFE8 = (uint64_t)(v16 + 128);
  do
  {
    uint64_t v18 = &v16[v17 * 16];
    __int128 v19 = v50[v17 + 1];
    *(_OWORD *)uint64_t v18 = v50[v17];
    *((_OWORD *)v18 + 1) = v19;
    v17 += 2LL;
  }

  while (v17 != 8);
  qword_10199CFE0 = (uint64_t)(v16 + 128);
  xmmword_10199CFF0 = xmmword_101355E50;
  unk_10199D000 = xmmword_101355DF0;
  sub_1010DDBC0(&qword_10199D010, "ContinentalUS-NewYork");
  v49[0] = xmmword_101355E90;
  v49[1] = xmmword_101355E10;
  v49[2] = xmmword_101355EA0;
  v49[3] = xmmword_101355EB0;
  v49[4] = xmmword_101355EC0;
  v49[5] = xmmword_101355ED0;
  v49[6] = xmmword_101355EE0;
  v49[7] = xmmword_101355EF0;
  v49[8] = xmmword_101355F00;
  v49[9] = xmmword_101355F10;
  v49[10] = xmmword_101355F20;
  v49[11] = xmmword_101355F30;
  v49[12] = xmmword_101355F40;
  v49[13] = xmmword_101355F50;
  v49[14] = xmmword_101355F60;
  v49[15] = xmmword_101355F70;
  v49[16] = xmmword_101355F80;
  v49[17] = xmmword_101355F90;
  v49[18] = xmmword_101355FA0;
  v49[19] = xmmword_101355FB0;
  v49[20] = xmmword_101355FC0;
  v49[21] = xmmword_101355FD0;
  v49[22] = xmmword_101355FE0;
  v49[23] = xmmword_101355FF0;
  v49[24] = xmmword_101356000;
  v49[25] = xmmword_101356010;
  v49[26] = xmmword_101356020;
  v49[27] = xmmword_101356030;
  v49[28] = xmmword_101356040;
  v49[29] = xmmword_101356050;
  v49[30] = xmmword_101356060;
  v49[31] = xmmword_101356070;
  v49[32] = xmmword_101356080;
  v49[33] = xmmword_101356090;
  v49[34] = xmmword_1013560A0;
  v49[35] = xmmword_1013560B0;
  v49[36] = xmmword_1013560C0;
  v49[37] = xmmword_1013560D0;
  v49[38] = xmmword_1013560E0;
  v49[39] = xmmword_1013560F0;
  v49[40] = xmmword_101356100;
  v49[41] = xmmword_101356110;
  v49[42] = xmmword_101356120;
  v49[43] = xmmword_101356130;
  v49[44] = xmmword_101355AA0;
  v49[45] = xmmword_101355E90;
  qword_10199D028 = 0LL;
  qword_10199D030 = 0LL;
  qword_10199D038 = 0LL;
  uint64_t v20 = (char *)operator new(0x2E0uLL);
  uint64_t v21 = 0LL;
  qword_10199D028 = (uint64_t)v20;
  qword_10199D030 = (uint64_t)v20;
  qword_10199D038 = (uint64_t)(v20 + 736);
  do
  {
    BOOL v22 = &v20[v21 * 16];
    __int128 v23 = v49[v21 + 1];
    *(_OWORD *)BOOL v22 = v49[v21];
    *((_OWORD *)v22 + 1) = v23;
    v21 += 2LL;
  }

  while (v21 != 46);
  qword_10199D030 = (uint64_t)(v20 + 736);
  xmmword_10199D040 = xmmword_101355E90;
  unk_10199D050 = xmmword_101355EA0;
  sub_1010DDBC0(&qword_10199D060, "ContinentalUS-Maine");
  v48[0] = xmmword_101355EB0;
  v48[1] = xmmword_101356140;
  v48[2] = xmmword_101356150;
  v48[3] = xmmword_101356160;
  v48[4] = xmmword_101356170;
  v48[5] = xmmword_101356180;
  v48[6] = xmmword_101356190;
  v48[7] = xmmword_1013561A0;
  v48[8] = xmmword_1013561B0;
  v48[9] = xmmword_1013561C0;
  v48[10] = xmmword_1013561D0;
  v48[11] = xmmword_1013561E0;
  v48[12] = xmmword_1013561F0;
  v48[13] = xmmword_101356200;
  v48[14] = xmmword_101356210;
  v48[15] = xmmword_101356220;
  v48[16] = xmmword_101356230;
  v48[17] = xmmword_101356240;
  v48[18] = xmmword_101356250;
  v48[19] = xmmword_101356260;
  v48[20] = xmmword_101356270;
  v48[21] = xmmword_101356280;
  v48[22] = xmmword_101356290;
  v48[23] = xmmword_1013562A0;
  v48[24] = xmmword_1013562B0;
  v48[25] = xmmword_1013562C0;
  v48[26] = xmmword_1013562D0;
  v48[27] = xmmword_1013562E0;
  v48[28] = xmmword_1013562F0;
  v48[29] = xmmword_101356300;
  v48[30] = xmmword_101356310;
  v48[31] = xmmword_101356320;
  v48[32] = xmmword_101356330;
  v48[33] = xmmword_101356340;
  v48[34] = xmmword_101356350;
  v48[35] = xmmword_101356360;
  v48[36] = xmmword_101356370;
  v48[37] = xmmword_101356380;
  v48[38] = xmmword_101356390;
  v48[39] = xmmword_1013563A0;
  v48[40] = xmmword_1013563B0;
  v48[41] = xmmword_1013563C0;
  v48[42] = xmmword_1013563D0;
  v48[43] = xmmword_1013563E0;
  v48[44] = xmmword_1013563F0;
  v48[45] = xmmword_101356400;
  v48[46] = xmmword_101356410;
  v48[47] = xmmword_101356420;
  v48[48] = xmmword_101356430;
  v48[49] = xmmword_101356440;
  v48[50] = xmmword_101356450;
  v48[51] = xmmword_101356460;
  v48[52] = xmmword_101356470;
  v48[53] = xmmword_101356480;
  v48[54] = xmmword_101356490;
  v48[55] = xmmword_1013564A0;
  v48[56] = xmmword_1013564B0;
  v48[57] = xmmword_1013564C0;
  v48[58] = xmmword_1013564D0;
  v48[59] = xmmword_1013564E0;
  v48[60] = xmmword_1013564F0;
  v48[61] = xmmword_101356500;
  v48[62] = xmmword_101356510;
  v48[63] = xmmword_101356520;
  v48[64] = xmmword_101356530;
  v48[65] = xmmword_101356540;
  v48[66] = xmmword_101356550;
  v48[67] = xmmword_101356560;
  v48[68] = xmmword_101356570;
  v48[69] = xmmword_101356580;
  v48[70] = xmmword_101356590;
  v48[71] = xmmword_1013565A0;
  v48[72] = xmmword_1013565B0;
  v48[73] = xmmword_1013565C0;
  v48[74] = xmmword_1013565D0;
  v48[75] = xmmword_1013565E0;
  v48[76] = xmmword_1013565F0;
  v48[77] = xmmword_101356600;
  v48[78] = xmmword_101356610;
  v48[79] = xmmword_101356620;
  v48[80] = xmmword_101356630;
  v48[81] = xmmword_101356640;
  v48[82] = xmmword_101356650;
  v48[83] = xmmword_101356660;
  v48[84] = xmmword_101356670;
  v48[85] = xmmword_101356680;
  v48[86] = xmmword_101356690;
  v48[87] = xmmword_1013566A0;
  v48[88] = xmmword_1013566B0;
  v48[89] = xmmword_1013566C0;
  v48[90] = xmmword_1013566D0;
  v48[91] = xmmword_1013566E0;
  v48[92] = xmmword_1013566F0;
  v48[93] = xmmword_101356700;
  v48[94] = xmmword_101356710;
  v48[95] = xmmword_101356720;
  v48[96] = xmmword_101356730;
  v48[97] = xmmword_101356740;
  v48[98] = xmmword_101356750;
  v48[99] = xmmword_101356760;
  v48[100] = xmmword_101356770;
  v48[101] = xmmword_101356780;
  v48[102] = xmmword_101356790;
  v48[103] = xmmword_1013567A0;
  v48[104] = xmmword_1013567B0;
  v48[105] = xmmword_1013567C0;
  v48[106] = xmmword_1013567D0;
  v48[107] = xmmword_1013567E0;
  v48[108] = xmmword_1013567F0;
  v48[109] = xmmword_101356800;
  v48[110] = xmmword_101355EB0;
  qword_10199D078 = 0LL;
  qword_10199D080 = 0LL;
  qword_10199D088 = 0LL;
  uint64_t v24 = (char *)operator new(0x6F0uLL);
  uint64_t v25 = 0LL;
  qword_10199D078 = (uint64_t)v24;
  qword_10199D080 = (uint64_t)v24;
  qword_10199D088 = (uint64_t)(v24 + 1776);
  do
  {
    *(_OWORD *)&v24[v25 * 16] = v48[v25];
    ++v25;
  }

  while (v25 != 111);
  qword_10199D080 = (uint64_t)(v24 + 1776);
  xmmword_10199D090 = xmmword_101356810;
  unk_10199D0A0 = xmmword_101356820;
  sub_1010DDBC0(&qword_10199D0B0, "Alaska");
  v47[0] = xmmword_101356830;
  v47[1] = xmmword_101356840;
  v47[2] = xmmword_101356850;
  v47[3] = xmmword_101356860;
  v47[4] = xmmword_101356870;
  v47[5] = xmmword_101356880;
  v47[6] = xmmword_101356890;
  v47[7] = xmmword_1013568A0;
  v47[8] = xmmword_1013568B0;
  v47[9] = xmmword_1013568C0;
  v47[10] = xmmword_1013568D0;
  v47[11] = xmmword_1013568E0;
  v47[12] = xmmword_1013568F0;
  v47[13] = xmmword_101356900;
  v47[14] = xmmword_101356910;
  v47[15] = xmmword_101356920;
  v47[16] = xmmword_101356930;
  v47[17] = xmmword_101356940;
  v47[18] = xmmword_101356950;
  qword_10199D0C8 = 0LL;
  qword_10199D0D0 = 0LL;
  qword_10199D0D8 = 0LL;
  int64_t v26 = (char *)operator new(0x130uLL);
  uint64_t v27 = 0LL;
  qword_10199D0C8 = (uint64_t)v26;
  qword_10199D0D0 = (uint64_t)v26;
  qword_10199D0D8 = (uint64_t)(v26 + 304);
  do
  {
    *(_OWORD *)&v26[v27 * 16] = v47[v27];
    ++v27;
  }

  while (v27 != 19);
  qword_10199D0D0 = (uint64_t)(v26 + 304);
  xmmword_10199D0E0 = xmmword_101356940;
  unk_10199D0F0 = xmmword_101356960;
  sub_1010DDBC0(&qword_10199D100, "Hawaii");
  v46[0] = xmmword_101356970;
  v46[1] = xmmword_101356980;
  v46[2] = xmmword_101356990;
  v46[3] = xmmword_1013569A0;
  v46[4] = xmmword_101356970;
  qword_10199D120 = 0LL;
  qword_10199D128 = 0LL;
  qword_10199D118 = 0LL;
  unint64_t v28 = (char *)operator new(0x50uLL);
  uint64_t v29 = 0LL;
  qword_10199D118 = (uint64_t)v28;
  qword_10199D120 = (uint64_t)v28;
  qword_10199D128 = (uint64_t)(v28 + 80);
  do
  {
    *(_OWORD *)&v28[v29 * 16] = v46[v29];
    ++v29;
  }

  while (v29 != 5);
  qword_10199D120 = (uint64_t)(v28 + 80);
  xmmword_10199D130 = xmmword_101356970;
  unk_10199D140 = xmmword_101356990;
  sub_1010DDBC0(&qword_10199D150, "American-Samoa");
  v45[0] = xmmword_1013569B0;
  v45[1] = xmmword_1013569C0;
  void v45[2] = xmmword_1013569D0;
  v45[3] = xmmword_1013569E0;
  v45[4] = xmmword_1013569B0;
  qword_10199D170 = 0LL;
  qword_10199D178 = 0LL;
  qword_10199D168 = 0LL;
  uint64_t v30 = (char *)operator new(0x50uLL);
  uint64_t v31 = 0LL;
  qword_10199D168 = (uint64_t)v30;
  qword_10199D170 = (uint64_t)v30;
  qword_10199D178 = (uint64_t)(v30 + 80);
  do
  {
    *(_OWORD *)&v30[v31 * 16] = v45[v31];
    ++v31;
  }

  while (v31 != 5);
  qword_10199D170 = (uint64_t)(v30 + 80);
  xmmword_10199D180 = xmmword_1013569B0;
  unk_10199D190 = xmmword_1013569D0;
  sub_1010DDBC0(&qword_10199D1A0, "Commonwealth-Northern-Mariana-Islands");
  v44[0] = xmmword_1013569F0;
  v44[1] = xmmword_101356A00;
  v44[2] = xmmword_101356A10;
  v44[3] = xmmword_101356A20;
  v44[4] = xmmword_1013569F0;
  qword_10199D1C0 = 0LL;
  qword_10199D1C8 = 0LL;
  qword_10199D1B8 = 0LL;
  uint64_t v32 = (char *)operator new(0x50uLL);
  uint64_t v33 = 0LL;
  qword_10199D1B8 = (uint64_t)v32;
  qword_10199D1C0 = (uint64_t)v32;
  qword_10199D1C8 = (uint64_t)(v32 + 80);
  do
  {
    *(_OWORD *)&v32[v33 * 16] = v44[v33];
    ++v33;
  }

  while (v33 != 5);
  qword_10199D1C0 = (uint64_t)(v32 + 80);
  xmmword_10199D1D0 = xmmword_1013569F0;
  unk_10199D1E0 = xmmword_101356A10;
  sub_1010DDBC0(&qword_10199D1F0, "Guam");
  v43[0] = xmmword_101356A30;
  v43[1] = xmmword_101356A40;
  v43[2] = xmmword_101356A50;
  v43[3] = xmmword_101356A60;
  v43[4] = xmmword_101356A30;
  qword_10199D210 = 0LL;
  qword_10199D218 = 0LL;
  qword_10199D208 = 0LL;
  uint64_t v34 = (char *)operator new(0x50uLL);
  uint64_t v35 = 0LL;
  qword_10199D208 = (uint64_t)v34;
  qword_10199D210 = (uint64_t)v34;
  qword_10199D218 = (uint64_t)(v34 + 80);
  do
  {
    *(_OWORD *)&v34[v35 * 16] = v43[v35];
    ++v35;
  }

  while (v35 != 5);
  qword_10199D210 = (uint64_t)(v34 + 80);
  xmmword_10199D220 = xmmword_101356A30;
  unk_10199D230 = xmmword_101356A50;
  sub_1010DDBC0(&qword_10199D240, "Puerto-Rico");
  v42[0] = xmmword_101356A70;
  v42[1] = xmmword_101356A80;
  v42[2] = xmmword_101356A90;
  v42[3] = xmmword_101356AA0;
  v42[4] = xmmword_101356A70;
  qword_10199D260 = 0LL;
  qword_10199D268 = 0LL;
  qword_10199D258 = 0LL;
  uint64_t v36 = (char *)operator new(0x50uLL);
  uint64_t v37 = 0LL;
  qword_10199D258 = (uint64_t)v36;
  qword_10199D260 = (uint64_t)v36;
  qword_10199D268 = (uint64_t)(v36 + 80);
  do
  {
    *(_OWORD *)&v36[v37 * 16] = v42[v37];
    ++v37;
  }

  while (v37 != 5);
  qword_10199D260 = (uint64_t)(v36 + 80);
  xmmword_10199D270 = xmmword_101356A70;
  unk_10199D280 = xmmword_101356A90;
  sub_1010DDBC0(&qword_10199D290, "US-Virgin-Islands");
  v41[0] = xmmword_101356AB0;
  v41[1] = xmmword_101356AC0;
  v41[2] = xmmword_101356AD0;
  v41[3] = xmmword_101356AE0;
  v41[4] = xmmword_101356AF0;
  v41[5] = xmmword_101356B00;
  unsigned int v41[6] = xmmword_101356AB0;
  qword_10199D2B0 = 0LL;
  qword_10199D2B8 = 0LL;
  qword_10199D2A8 = 0LL;
  uint64_t v38 = (char *)operator new(0x70uLL);
  uint64_t v39 = 0LL;
  qword_10199D2A8 = (uint64_t)v38;
  qword_10199D2B0 = (uint64_t)v38;
  qword_10199D2B8 = (uint64_t)(v38 + 112);
  do
  {
    *(_OWORD *)&v38[v39 * 16] = v41[v39];
    ++v39;
  }

  while (v39 != 7);
  qword_10199D2B0 = (uint64_t)(v38 + 112);
  xmmword_10199D2C0 = xmmword_101356AB0;
  xmmword_10199D2D0 = xmmword_101356B10;
  return __cxa_atexit((void (*)(void *))sub_100C3A9B4, qword_10199CDE0, (void *)&_mh_execute_header);
}

void sub_100C4612C(_Unwind_Exception *exception_object)
{
  if (byte_10199D2A7 < 0) {
    sub_1012675B4();
  }
  uint64_t v3 = &qword_10199D290;
  while (1)
  {
    uint64_t v4 = (void *)*(v3 - 7);
    if (v4)
    {
      *(v3 - 6) = (uint64_t)v4;
      operator delete(v4);
    }

    v3 -= 10;
    if (v3 == v1) {
      _Unwind_Resume(exception_object);
    }
  }

void sub_100C463C4()
{
  if (byte_10199CDF7 < 0) {
    sub_101267668();
  }
  JUMPOUT(0x100C463BCLL);
}

void sub_100C463DC()
{
}

void *sub_100C463E4(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_101879450;
  a1[9] = off_101879508;
  a1[50] = 0LL;
  a1[51] = 0LL;
  sub_100C47874((uint64_t)a1);
  return a1;
}

void sub_100C46470( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100C4649C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  *unint64_t v12 = &off_10182BDA0;
  *(void *)a1 = off_1018797C8;
  *(void *)(a1 + 72) = off_101879870;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_1018797C8;
  *(void *)(a1 + 72) = off_101879870;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 32sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 12000;
  *(void *)(a1 + 328) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 336));
  *(void *)(a1 + 336) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 264) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  uint64_t v15 = (int *)(a1 + 320);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 320));
  uint64_t v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    *uint64_t v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_1018798B0);
  }
  uint64_t v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018798B0);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    int64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<CLSkiEntry>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSql iteDatabase::SqlitePropertyPersistence) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 264) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100C46844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[41] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_1009D4FA0(v26);
  sub_100D8A88C(a12);
  *int v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100C468E8()
{
}

void *sub_100C468F0(void *a1)
{
  a1[9] = off_101879870;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_1018797C8;
  a1[41] = off_10182BD58;
  sub_1001B9C98(a1 + 42);
  sub_1009D4FA0(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100C46970(uint64_t a1)
{
  return sub_100C468F0((void *)(a1 - 72));
}

void sub_100C46978(void *a1)
{
  uint64_t v1 = sub_100C468F0(a1);
  operator delete(v1);
}

void sub_100C4698C(uint64_t a1)
{
  uint64_t v1 = sub_100C468F0((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100C469A4(uint64_t *a1, uint64_t a2, void **a3)
{
  if (uuid_is_null((const unsigned __int8 *)(a2 + 8)) && uuid_compare(uu, (const unsigned __int8 *)(a2 + 24)))
  {
    uuid_copy(dst, (const unsigned __int8 *)(a2 + 24));
    return sub_100C46C04((uint64_t)a1, dst, (uint64_t)a3);
  }

  else
  {
    uint64_t v6 = sub_100C46E7C(a1, a2, (uint64_t)a3);
    if ((_DWORD)v6 == 100)
    {
      if (*a3 == a3[1])
      {
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        *(_OWORD *)uuid_t dst = 0u;
        __int128 v34 = 0u;
        uint64_t v6 = sub_100C47134((uint64_t)a1, dst);
        if ((_DWORD)v6 == 100)
        {
          sub_100405344((uint64_t)a1, v32);
          uuid_copy(&dst[8], v32);
          unint64_t v7 = (unint64_t)a3[2];
          unint64_t v8 = a3[1];
          if ((unint64_t)v8 >= v7)
          {
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*a3) >> 5);
            unint64_t v15 = v14 + 1;
            if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
              sub_100007008();
            }
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a3) >> 5);
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x155555555555555LL) {
              unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17) {
              uint64_t v18 = (char *)sub_1003F6AEC((uint64_t)(a3 + 2), v17);
            }
            else {
              uint64_t v18 = 0LL;
            }
            unint64_t v19 = &v18[96 * v14];
            uint64_t v20 = &v18[96 * v17];
            __int128 v21 = v34;
            *(_OWORD *)unint64_t v19 = *(_OWORD *)dst;
            *((_OWORD *)v19 + 1) = v21;
            __int128 v22 = v35;
            __int128 v23 = v36;
            __int128 v24 = v38;
            *((_OWORD *)v19 + 4) = v37;
            *((_OWORD *)v19 + 5) = v24;
            *((_OWORD *)v19 + 2) = v22;
            *((_OWORD *)v19 + 3) = v23;
            uint64_t v13 = v19 + 96;
            int64_t v26 = (char *)*a3;
            uint64_t v25 = (char *)a3[1];
            if (v25 != *a3)
            {
              do
              {
                __int128 v27 = *((_OWORD *)v25 - 5);
                *((_OWORD *)v19 - 6) = *((_OWORD *)v25 - 6);
                *((_OWORD *)v19 - 5) = v27;
                __int128 v28 = *((_OWORD *)v25 - 4);
                __int128 v29 = *((_OWORD *)v25 - 3);
                __int128 v30 = *((_OWORD *)v25 - 1);
                *((_OWORD *)v19 - 2) = *((_OWORD *)v25 - 2);
                *((_OWORD *)v19 - 1) = v30;
                *((_OWORD *)v19 - 4) = v28;
                *((_OWORD *)v19 - 3) = v29;
                v19 -= 96;
                v25 -= 96;
              }

              while (v25 != v26);
              uint64_t v25 = (char *)*a3;
            }

            *a3 = v19;
            a3[1] = v13;
            a3[2] = v20;
            if (v25) {
              operator delete(v25);
            }
          }

          else
          {
            __int128 v9 = v34;
            *unint64_t v8 = *(_OWORD *)dst;
            v8[1] = v9;
            __int128 v10 = v35;
            __int128 v11 = v36;
            __int128 v12 = v38;
            _DWORD v8[4] = v37;
            v8[5] = v12;
            v8[2] = v10;
            v8[3] = v11;
            uint64_t v13 = v8 + 6;
          }

          a3[1] = v13;
        }
      }

      else
      {
        return 100LL;
      }
    }
  }

  return v6;
}

uint64_t sub_100C46C04(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a3 + 8) = *(void *)a3;
  uuid_unparse(a2, out);
  sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from SkiHistory WHERE sessionId = ?", buf);
  uint64_t v6 = *(void *)buf;
  uint64_t v13 = *(void *)buf;
  unint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003BC1F0(v7, 1, out))
  {
    sub_100C47EF8(a1, &v13, (char **)a3);
    uint64_t v8 = 100LL;
    if (!v6) {
      return v8;
    }
    goto LABEL_12;
  }

  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_1018795B8);
  }
  __int128 v9 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = out;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Unable to get entries for sessionId %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_1018795B8);
    }
    int v14 = 136446210;
    unint64_t v15 = out;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  17LL,  "Unable to get entries for sessionId %{public}s",  &v14,  12);
    __int128 v12 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLSkiRecorderDb::getEntries(unsigned char *, std::vector<CLSkiEntry> &) const",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  uint64_t v8 = 109LL;
  if (v6) {
LABEL_12:
  }
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  return v8;
}

void sub_100C46E50(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C46E7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 8) = *(void *)a3;
  sub_100405344((uint64_t)a1, uu1);
  if (uuid_is_null((const unsigned __int8 *)(a2 + 8)) || uuid_compare(uu1, (const unsigned __int8 *)(a2 + 8)))
  {
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
    return 100LL;
  }

  else
  {
    sub_1003C0D54(a1[10], "SELECT * from SkiHistory WHERE id >= ?", buf);
    uint64_t v8 = *(void *)buf;
    uint64_t v15 = *(void *)buf;
    __int128 v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    if (sub_1003C2D24(v9, 1, *(void *)a2))
    {
      sub_100C47EF8((uint64_t)a1, &v15, (char **)a3);
      uint64_t v6 = 100LL;
    }

    else
    {
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_1018795B8);
      }
      __int128 v10 = (os_log_s *)qword_101934668;
      if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_FAULT))
      {
        sqlite3_int64 v11 = *(void *)a2;
        *(_DWORD *)std::string buf = 134349056;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "Failed to bind id in query, %{public}llu",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934660 != -1) {
          dispatch_once(&qword_101934660, &stru_1018795B8);
        }
        sqlite3_int64 v12 = *(void *)a2;
        int v16 = 134349056;
        sqlite3_int64 v17 = v12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  17LL,  "Failed to bind id in query, %{public}llu",  &v16,  12);
        int v14 = (char *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLSkiRecorderDb::querySince(const CLSkiEntry &, std::vector<CLSkiEntry> &) const",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }

      uint64_t v6 = 107LL;
    }

    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  return v6;
}

void sub_100C47108(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47134(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = v11;
  uint64_t v13 = 0LL;
  int v14 = v11;
  sqlite3_int64 v11 = 0LL;
  sqlite3_int64 v12 = 0LL;
  sub_100C47EF8(a1, (uint64_t *)&v14, &v11);
  uint64_t v5 = v11;
  if (v11 != v12)
  {
    __int128 v6 = *((_OWORD *)v11 + 1);
    *a2 = *(_OWORD *)v11;
    a2[1] = v6;
    __int128 v7 = *((_OWORD *)v5 + 2);
    __int128 v8 = *((_OWORD *)v5 + 3);
    __int128 v9 = *((_OWORD *)v5 + 5);
    a2[4] = *((_OWORD *)v5 + 4);
    a2[5] = v9;
    a2[2] = v7;
    a2[3] = v8;
LABEL_6:
    sqlite3_int64 v12 = v5;
    operator delete(v5);
    goto LABEL_7;
  }

  if (v11) {
    goto LABEL_6;
  }
LABEL_7:
  if (v4) {
    (*(void (**)(char *))(*(void *)v4 + 8LL))(v4);
  }
  return 100LL;
}

void sub_100C471F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47224(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1003C0D54(a1[10], "DELETE FROM SkiHistory WHERE startTime < ?", &v13);
  uint64_t v5 = v13;
  __int128 v6 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v6, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v7 = a1[10];
    __int128 v8 = (sqlite3_stmt *)sub_100019240(v5);
    sub_1003BB2BC(v7, v8);
    uint64_t v9 = (*(int (**)(uint64_t *))(*a1 + 160))(a1);
  }

  else
  {
    uint64_t v9 = -1LL;
  }

  sub_1003C05BC(a1[10]);
  uint64_t v10 = a1[10];
  else {
    uint64_t v11 = *(void *)(v10 + 88);
  }
  sub_1003C1EC0(v10, v11);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v9;
}

void sub_100C4733C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C4735C(uint64_t a1, uint64_t a2)
{
  return sub_100C47224((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100C47364(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from SkiHistory ORDER BY id ASC", &v32);
    uint64_t v5 = v32;
    uint64_t v30 = v32;
    sub_1003C0454(*(void *)(a1 + 80));
    sub_100405344(a1, src);
    while (!sub_100C475D0(&v30, (uint64_t)&v32))
    {
      uuid_copy((unsigned __int8 *)&v32 + 8, src);
      __int128 v6 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v7)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 5);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a2) >> 5);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x155555555555555LL) {
          unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          sqlite3_int64 v17 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v16);
        }
        else {
          sqlite3_int64 v17 = 0LL;
        }
        uint64_t v18 = &v17[96 * v13];
        __int128 v19 = v33;
        *(_OWORD *)uint64_t v18 = v32;
        *((_OWORD *)v18 + 1) = v19;
        __int128 v20 = v34;
        __int128 v21 = v35;
        __int128 v22 = v37;
        *((_OWORD *)v18 + 4) = v36;
        *((_OWORD *)v18 + 5) = v22;
        *((_OWORD *)v18 + 2) = v20;
        *((_OWORD *)v18 + 3) = v21;
        __int128 v24 = *a2;
        __int128 v23 = a2[1];
        uint64_t v25 = v18;
        if (v23 != *a2)
        {
          do
          {
            __int128 v26 = *((_OWORD *)v23 - 5);
            *((_OWORD *)v25 - 6) = *((_OWORD *)v23 - 6);
            *((_OWORD *)v25 - 5) = v26;
            __int128 v27 = *((_OWORD *)v23 - 4);
            __int128 v28 = *((_OWORD *)v23 - 3);
            __int128 v29 = *((_OWORD *)v23 - 1);
            *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
            *((_OWORD *)v25 - 1) = v29;
            *((_OWORD *)v25 - 4) = v27;
            *((_OWORD *)v25 - 3) = v28;
            v25 -= 96;
            v23 -= 96;
          }

          while (v23 != v24);
          __int128 v23 = *a2;
        }

        sqlite3_int64 v12 = v18 + 96;
        *a2 = v25;
        a2[1] = v18 + 96;
        a2[2] = &v17[96 * v16];
        if (v23) {
          operator delete(v23);
        }
      }

      else
      {
        __int128 v8 = v33;
        *(_OWORD *)__int128 v6 = v32;
        *((_OWORD *)v6 + 1) = v8;
        __int128 v9 = v34;
        __int128 v10 = v35;
        __int128 v11 = v37;
        *((_OWORD *)v6 + 4) = v36;
        *((_OWORD *)v6 + 5) = v11;
        *((_OWORD *)v6 + 2) = v9;
        *((_OWORD *)v6 + 3) = v10;
        sqlite3_int64 v12 = v6 + 96;
      }

      a2[1] = v12;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100C475A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C475D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  __int128 v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  unint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  __int128 v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 24));
  __int128 v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = sqlite3_column_double(v9, 2);
  __int128 v10 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 3);
  __int128 v11 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 4);
  sqlite3_int64 v12 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 5);
  unint64_t v13 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 6);
  unint64_t v14 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = sqlite3_column_double(v14, 7);
  unint64_t v15 = (sqlite3_stmt *)sub_100019240(*a1);
  double v16 = sqlite3_column_double(v15, 8);
  uint64_t result = 0LL;
  *(double *)(a2 + 88) = v16;
  return result;
}

uint64_t sub_100C476DC(uint64_t a1)
{
  uint64_t v3 = v8;
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    __int128 v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100C4777C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C4779C(uint64_t a1)
{
  return sub_100C476DC(a1 - 72);
}

void sub_100C477A4(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0LL) == (a3 != 0LL))
  {

    *(void *)(a1 + 40sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a2;
    __int128 v6 = *(const void **)(a1 + 408);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 408) = _Block_copy(a3);
    }
  }

  else
  {
    unint64_t v7 = (uint64_t *)sub_101267674();
    sub_100C47818(v7, v8);
  }

uint64_t sub_100C47818(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_1003C0454(a1[10]);
    (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 120))(a1, a2, 0LL);
    return sub_1003C05BC(a1[10]);
  }

  return result;
}

uint64_t sub_100C47874(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result) {
    return sub_1003B59A0( *(void *)(a1 + 80),  "SkiHistory",  (const char **)&off_1018795D8,  (const std::string::value_type **)&off_10198FE70,  0);
  }
  return result;
}

uint64_t sub_100C478C8(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM SkiHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    int v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100C4795C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C4797C(uint64_t a1)
{
  return sub_100C478C8(a1 - 72);
}

uint64_t sub_100C47984(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1LL);
    sub_1003C0D54(a1[10], "DELETE FROM SkiHistory WHERE startTime > ?", &v11);
    uint64_t v5 = v11;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v11);
    if (sub_1003B7480(v6, 1, *(double *)(a2 + 40)))
    {
      uint64_t v7 = a1[10];
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      sub_1003BB2BC(v7, v8);
    }

    uint64_t v9 = a1[10];
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    uint64_t result = sub_1003C1EC0(v9, v10);
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100C47A4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47A6C(uint64_t a1, double a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "UPDATE SkiHistory SET startTime = startTime + ?", &v9);
    uint64_t v5 = v9;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v9);
    uint64_t result = sub_1003B7480(v6, 1, a2);
    if ((_DWORD)result)
    {
      uint64_t v7 = *(void *)(a1 + 80);
      uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003BB2BC(v7, v8);
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100C47B04(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47B24(uint64_t *a1, __int128 *a2)
{
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_1003C0D54( a1[10],  "INSERT INTO SkiHistory (sessionId, startTime, endTime, runDistance, runAvgSpeed, runMaxSpeed, runSlope, runElevati onDescent) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",  &v28);
    uint64_t v5 = v28;
    uuid_unparse((const unsigned __int8 *)a2 + 24, out);
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v5);
    uint64_t result = sub_1003BC1F0(v6, 1, out);
    if ((_DWORD)result)
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003B7480(v7, 2, *((double *)a2 + 5));
      if ((_DWORD)result)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003B7480(v8, 3, *((double *)a2 + 6));
        if ((_DWORD)result)
        {
          uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003B7480(v9, 4, *((double *)a2 + 7));
          if ((_DWORD)result)
          {
            uint64_t v10 = (sqlite3_stmt *)sub_100019240(v5);
            uint64_t result = sub_1003B7480(v10, 5, *((double *)a2 + 8));
            if ((_DWORD)result)
            {
              uint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
              uint64_t result = sub_1003B7480(v11, 6, *((double *)a2 + 9));
              if ((_DWORD)result)
              {
                sqlite3_int64 v12 = (sqlite3_stmt *)sub_100019240(v5);
                uint64_t result = sub_1003B7480(v12, 7, *((double *)a2 + 10));
                if ((_DWORD)result)
                {
                  unint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
                  uint64_t result = sub_1003B7480(v13, 8, *((double *)a2 + 11));
                  if ((_DWORD)result)
                  {
                    uint64_t v14 = a1[10];
                    unint64_t v15 = (sqlite3_stmt *)sub_100019240(v5);
                    uint64_t result = sub_1003BB2BC(v14, v15);
                    if ((_DWORD)result)
                    {
                      if (a1[50] && a1[51])
                      {
                        __int128 v16 = a2[3];
                        __int128 v30 = a2[2];
                        __int128 v31 = v16;
                        __int128 v17 = a2[5];
                        __int128 v32 = a2[4];
                        __int128 v33 = v17;
                        __int128 v18 = a2[1];
                        __int128 v28 = *a2;
                        __int128 v29 = v18;
                        sub_100405344((uint64_t)a1, src);
                        uuid_copy((unsigned __int8 *)&v28 + 8, src);
                        v20[1] = 3221225472LL;
                        __int128 v23 = v30;
                        __int128 v24 = v31;
                        __int128 v25 = v32;
                        __int128 v26 = v33;
                        __int128 v21 = v28;
                        __int128 v19 = (void *)a1[50];
                        v20[0] = _NSConcreteStackBlock;
                        v20[2] = sub_100C47D74;
                        v20[3] = &unk_101879548;
                        v20[4] = a1;
                        __int128 v22 = v29;
                        uint64_t result = (uint64_t)[v19 async:v20];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100C47D48(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47D74(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 408LL);
  __int128 v2 = *(_OWORD *)(a1 + 88);
  v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v2;
  __int128 v3 = *(_OWORD *)(a1 + 120);
  v6[4] = *(_OWORD *)(a1 + 104);
  void v6[5] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_100C47DF4()
{
  return 0LL;
}

uint64_t sub_100C47DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)src;
  uint64_t v7 = *(void *)src;
  uint64_t v5 = sub_100C475D0(&v7, a2);
  if (!(_DWORD)v5)
  {
    sub_100405344(a1, src);
    uuid_copy((unsigned __int8 *)(a2 + 8), src);
  }

  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return v5;
}

void sub_100C47ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47EF8(uint64_t a1, uint64_t *a2, char **a3)
{
  a3[1] = *a3;
  sub_1003C0454(*(void *)(a1 + 80));
  sub_100405344(a1, src);
  for (; !sub_100C475D0(a2, (uint64_t)&v32); a3[1] = v12)
  {
    uuid_copy((unsigned __int8 *)&v32 + 8, src);
    uint64_t v6 = a3[1];
    unint64_t v7 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 5);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a3) >> 5);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x155555555555555LL) {
        unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        __int128 v17 = (char *)sub_1003F6AEC((uint64_t)(a3 + 2), v16);
      }
      else {
        __int128 v17 = 0LL;
      }
      __int128 v18 = &v17[96 * v13];
      __int128 v19 = v33;
      *(_OWORD *)__int128 v18 = v32;
      *((_OWORD *)v18 + 1) = v19;
      __int128 v20 = v34;
      __int128 v21 = v35;
      __int128 v22 = v37;
      *((_OWORD *)v18 + 4) = v36;
      *((_OWORD *)v18 + 5) = v22;
      *((_OWORD *)v18 + 2) = v20;
      *((_OWORD *)v18 + 3) = v21;
      __int128 v24 = *a3;
      __int128 v23 = a3[1];
      __int128 v25 = v18;
      if (v23 != *a3)
      {
        do
        {
          __int128 v26 = *((_OWORD *)v23 - 5);
          *((_OWORD *)v25 - 6) = *((_OWORD *)v23 - 6);
          *((_OWORD *)v25 - 5) = v26;
          __int128 v27 = *((_OWORD *)v23 - 4);
          __int128 v28 = *((_OWORD *)v23 - 3);
          __int128 v29 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v25 - 1) = v29;
          *((_OWORD *)v25 - 4) = v27;
          *((_OWORD *)v25 - 3) = v28;
          v25 -= 96;
          v23 -= 96;
        }

        while (v23 != v24);
        __int128 v23 = *a3;
      }

      sqlite3_int64 v12 = v18 + 96;
      *a3 = v25;
      a3[1] = v18 + 96;
      a3[2] = &v17[96 * v16];
      if (v23) {
        operator delete(v23);
      }
    }

    else
    {
      __int128 v8 = v33;
      *(_OWORD *)uint64_t v6 = v32;
      *((_OWORD *)v6 + 1) = v8;
      __int128 v9 = v34;
      __int128 v10 = v35;
      __int128 v11 = v37;
      *((_OWORD *)v6 + 4) = v36;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 2) = v9;
      *((_OWORD *)v6 + 3) = v10;
      sqlite3_int64 v12 = v6 + 96;
    }
  }

  return sub_1003C05BC(*(void *)(a1 + 80));
}

uint64_t sub_100C48108(uint64_t a1, int a2, char **a3)
{
  a3[1] = *a3;
  sub_1003C0D54(*(void *)(a1 + 80), "SELECT * FROM SkiHistory ORDER by id DESC limit ?", buf);
  uint64_t v6 = *(void *)buf;
  uint64_t v23 = *(void *)buf;
  unint64_t v7 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  if (sub_1003C28BC(v7, 1, a2))
  {
    sub_100C47EF8(a1, &v23, a3);
    __int128 v9 = *a3;
    __int128 v8 = a3[1];
    uint64_t v10 = 100LL;
    if (v9 != v8)
    {
      __int128 v11 = v8 - 96;
      if (v11 > v9)
      {
        sqlite3_int64 v12 = v9 + 96;
        do
        {
          __int128 v26 = *((_OWORD *)v12 - 4);
          __int128 v27 = *((_OWORD *)v12 - 3);
          __int128 v28 = *((_OWORD *)v12 - 2);
          __int128 v29 = *((_OWORD *)v12 - 1);
          *(_OWORD *)std::string buf = *((_OWORD *)v12 - 6);
          __int128 v25 = *((_OWORD *)v12 - 5);
          __int128 v13 = *((_OWORD *)v11 + 1);
          *((_OWORD *)v12 - 6) = *(_OWORD *)v11;
          *((_OWORD *)v12 - 5) = v13;
          __int128 v14 = *((_OWORD *)v11 + 5);
          __int128 v16 = *((_OWORD *)v11 + 2);
          __int128 v15 = *((_OWORD *)v11 + 3);
          *((_OWORD *)v12 - 2) = *((_OWORD *)v11 + 4);
          *((_OWORD *)v12 - 1) = v14;
          *((_OWORD *)v12 - 4) = v16;
          *((_OWORD *)v12 - 3) = v15;
          *(_OWORD *)__int128 v11 = *(_OWORD *)buf;
          *((_OWORD *)v11 + 5) = v29;
          *((_OWORD *)v11 + 4) = v28;
          *((_OWORD *)v11 + 3) = v27;
          *((_OWORD *)v11 + 2) = v26;
          *((_OWORD *)v11 + 1) = v25;
          v11 -= 96;
          BOOL v17 = v12 >= v11;
          v12 += 96;
        }

        while (!v17);
        uint64_t v10 = 100LL;
      }
    }
  }

  else
  {
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_1018795B8);
    }
    __int128 v18 = (os_log_s *)qword_101934668;
    if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Unable to get entries", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_1018795B8);
      }
      __int16 v22 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  17LL,  "Unable to get entries",  &v22,  2);
      __int128 v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLSkiRecorderDb::getEntries(int, std::vector<CLSkiEntry> &) const",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    uint64_t v10 = 109LL;
  }

  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  return v10;
}

void sub_100C483D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C483FC(void *a1, void **a2, double a3, double a4)
{
  __int128 v8 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v48);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    if (HIBYTE(v49)) {
      goto LABEL_3;
    }
LABEL_39:
    sub_1012677FC(v8);
    __break(1u);
  }

  uint64_t v43 = v48[1];
  operator delete(v48[0]);
  if (!v43) {
    goto LABEL_39;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v48);
  __int128 v9 = sub_10000CF44(&v49, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(v52, a1);
  if (v52[23] >= 0) {
    uint64_t v10 = v52;
  }
  else {
    uint64_t v10 = *(_BYTE **)v52;
  }
  if (v52[23] >= 0) {
    uint64_t v11 = v52[23];
  }
  else {
    uint64_t v11 = *(void *)&v52[8];
  }
  sqlite3_int64 v12 = sub_10000CF44(v9, (uint64_t)v10, v11);
  sub_10000CF44(v12, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((v52[23] & 0x80000000) != 0) {
    operator delete(*(void **)v52);
  }
  uint64_t v13 = a1[10];
  std::stringbuf::str((std::stringbuf::string_type *)v52, &v50);
  if (v52[23] >= 0) {
    __int128 v14 = v52;
  }
  else {
    __int128 v14 = *(char **)v52;
  }
  sub_1003C0D54(v13, v14, &v46);
  uint64_t v15 = v46;
  uint64_t v46 = 0LL;
  uint64_t v47 = v15;
  if ((v52[23] & 0x80000000) != 0) {
    operator delete(*(void **)v52);
  }
  __int128 v16 = (sqlite3_stmt *)sub_100019240(v15);
  if (sub_1003B7480(v16, 1, a3) && (BOOL v17 = (sqlite3_stmt *)sub_100019240(v15), sub_1003B7480(v17, 2, a4)))
  {
    while (1)
    {
      uint64_t v18 = sub_1001BA11C((uint64_t)a1, &v47, (uint64_t)v52);
      if ((_DWORD)v18) {
        break;
      }
      __int128 v19 = a2[1];
      unint64_t v20 = (unint64_t)a2[2];
      if ((unint64_t)v19 >= v20)
      {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (_BYTE *)*a2) >> 5);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)*a2) >> 5);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x155555555555555LL) {
          unint64_t v29 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29) {
          __int128 v30 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v29);
        }
        else {
          __int128 v30 = 0LL;
        }
        __int128 v31 = &v30[96 * v26];
        __int128 v32 = *(_OWORD *)&v52[16];
        *(_OWORD *)__int128 v31 = *(_OWORD *)v52;
        *((_OWORD *)v31 + 1) = v32;
        __int128 v33 = v53;
        __int128 v34 = v54;
        __int128 v35 = v56;
        *((_OWORD *)v31 + 4) = v55;
        *((_OWORD *)v31 + 5) = v35;
        *((_OWORD *)v31 + 2) = v33;
        *((_OWORD *)v31 + 3) = v34;
        __int128 v37 = (char *)*a2;
        __int128 v36 = (char *)a2[1];
        __int128 v38 = v31;
        if (v36 != *a2)
        {
          do
          {
            __int128 v39 = *((_OWORD *)v36 - 5);
            *((_OWORD *)v38 - 6) = *((_OWORD *)v36 - 6);
            *((_OWORD *)v38 - 5) = v39;
            __int128 v40 = *((_OWORD *)v36 - 4);
            __int128 v41 = *((_OWORD *)v36 - 3);
            __int128 v42 = *((_OWORD *)v36 - 1);
            *((_OWORD *)v38 - 2) = *((_OWORD *)v36 - 2);
            *((_OWORD *)v38 - 1) = v42;
            *((_OWORD *)v38 - 4) = v40;
            *((_OWORD *)v38 - 3) = v41;
            v38 -= 96;
            v36 -= 96;
          }

          while (v36 != v37);
          __int128 v36 = (char *)*a2;
        }

        __int128 v25 = v31 + 96;
        *a2 = v38;
        a2[1] = v31 + 96;
        a2[2] = &v30[96 * v29];
        if (v36) {
          operator delete(v36);
        }
      }

      else
      {
        __int128 v21 = *(_OWORD *)&v52[16];
        *__int128 v19 = *(_OWORD *)v52;
        v19[1] = v21;
        __int128 v22 = v53;
        __int128 v23 = v54;
        __int128 v24 = v56;
        v19[4] = v55;
        v19[5] = v24;
        v19[2] = v22;
        v19[3] = v23;
        __int128 v25 = v19 + 6;
      }

      a2[1] = v25;
    }

    uint64_t v15 = v47;
  }

  else
  {
    uint64_t v18 = 2LL;
  }

  uint64_t v47 = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  *(void **)((char *)v48
  uint64_t v49 = v44;
  std::streambuf::~streambuf(&v50);
  std::ios::~ios(&v51);
  return v18;
}

void sub_100C48788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100C487F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018798B0);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018798B0);
      }
      unint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)uint64_t v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018798B0);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<CLSkiEntry>::setDatabaseAccessible() [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018798B0);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    __int128 v16 = (void *)(v14 + 8 * (v13 / 0x2A));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 96 * (v13 % 0x2A);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x2A)) + 96 * (v22 % 0x2A);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_1018798D0);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_1018798D0);
        }
        LOWORD(v41) = 0;
        LODWORD(v38) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<CLSkiEntry>::setDatabaseAccessible() [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 96LL;
      if (v17 - *v16 == 4032)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018798B0);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      __int128 v19 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018798B0);
      }
    }

    unint64_t v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)uint64_t v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 21LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 42LL;
  }

  *(void *)(a1 + 208) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100C48F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100C48F68(uint64_t a1, uint64_t a2, char a3)
{
  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0LL;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v35);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 104LL))(a1, v44);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018798B0);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018798B0);
        }
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v36,  2);
        __int128 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, Data ProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 40);
    double v8 = v45;
    double v9 = v7 - v45;
    if (v7 - v45 < 0.0) {
      double v9 = -(v7 - v45);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018798B0);
      }
      uint64_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 40);
        *(_DWORD *)std::string buf = 134349312;
        double v41 = v45;
        __int16 v42 = 2050;
        uint64_t v43 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018798B0);
        }
        uint64_t v26 = *(void *)(a2 + 40);
        int v36 = 134349312;
        double v37 = v45;
        __int16 v38 = 2050;
        uint64_t v39 = v26;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v36,  22);
        unint64_t v28 = (uint8_t *)v27;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, Data ProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v27);
        if (v28 != buf) {
          free(v28);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 40);
      double v8 = v45;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018798B0);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 40);
          *(_DWORD *)std::string buf = 134217984;
          double v41 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_1018798B0);
          }
          double v29 = *(double *)(a2 + 40);
          int v36 = 134217984;
          double v37 = v29;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v36));
          uint64_t v31 = (uint8_t *)v30;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, Da taProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v30);
          if (v31 != buf) {
            free(v31);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_1018798B0);
        double v18 = v34;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v41 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018798B0);
        }
        int v36 = 134217984;
        double v37 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v36));
        __int128 v33 = (uint8_t *)v32;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, Data ProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, v44, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100C496B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100C496E0(uint64_t a1)
{
  return sub_100C487F8(a1 - 72);
}

void sub_100C496E8(id a1)
{
  qword_101934668 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

uint64_t sub_100C49714(uint64_t *a1, char **a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v42);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if (HIBYTE(v43)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_101267968(v4);
    __break(1u);
  }

  uint64_t v39 = v42[1];
  operator delete(v42[0]);
  if (!v39) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v42);
    int v6 = sub_10000CF44(&v43, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(v46, a1);
    if (v46[23] >= 0) {
      double v7 = v46;
    }
    else {
      double v7 = *(_BYTE **)v46;
    }
    if (v46[23] >= 0) {
      uint64_t v8 = v46[23];
    }
    else {
      uint64_t v8 = *(void *)&v46[8];
    }
    double v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((v46[23] & 0x80000000) != 0) {
      operator delete(*(void **)v46);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)v46, &v44);
    if (v46[23] >= 0) {
      uint64_t v11 = v46;
    }
    else {
      uint64_t v11 = *(char **)v46;
    }
    sub_1003C0D54(v10, v11, &v40);
    uint64_t v12 = v40;
    uint64_t v40 = 0LL;
    uint64_t v41 = v12;
    if ((v46[23] & 0x80000000) != 0) {
      operator delete(*(void **)v46);
    }
    sub_1003C0454(a1[10]);
    while (!sub_1001BA11C((uint64_t)a1, &v41, (uint64_t)v46))
    {
      double v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 5);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 5);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x155555555555555LL) {
          unint64_t v23 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          __int128 v24 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v23);
        }
        else {
          __int128 v24 = 0LL;
        }
        unint64_t v25 = &v24[96 * v20];
        __int128 v26 = *(_OWORD *)&v46[16];
        *(_OWORD *)unint64_t v25 = *(_OWORD *)v46;
        *((_OWORD *)v25 + 1) = v26;
        __int128 v27 = v47;
        __int128 v28 = v48;
        __int128 v29 = v50;
        *((_OWORD *)v25 + 4) = v49;
        *((_OWORD *)v25 + 5) = v29;
        *((_OWORD *)v25 + 2) = v27;
        *((_OWORD *)v25 + 3) = v28;
        uint64_t v31 = *a2;
        unint64_t v30 = a2[1];
        uint64_t v32 = v25;
        if (v30 != *a2)
        {
          do
          {
            __int128 v33 = *((_OWORD *)v30 - 5);
            *((_OWORD *)v32 - 6) = *((_OWORD *)v30 - 6);
            *((_OWORD *)v32 - 5) = v33;
            __int128 v34 = *((_OWORD *)v30 - 4);
            __int128 v35 = *((_OWORD *)v30 - 3);
            __int128 v36 = *((_OWORD *)v30 - 1);
            *((_OWORD *)v32 - 2) = *((_OWORD *)v30 - 2);
            *((_OWORD *)v32 - 1) = v36;
            *((_OWORD *)v32 - 4) = v34;
            *((_OWORD *)v32 - 3) = v35;
            v32 -= 96;
            v30 -= 96;
          }

          while (v30 != v31);
          unint64_t v30 = *a2;
        }

        double v19 = v25 + 96;
        *a2 = v32;
        a2[1] = v25 + 96;
        a2[2] = &v24[96 * v23];
        if (v30) {
          operator delete(v30);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)&v46[16];
        *(_OWORD *)double v13 = *(_OWORD *)v46;
        *((_OWORD *)v13 + 1) = v15;
        __int128 v16 = v47;
        __int128 v17 = v48;
        __int128 v18 = v50;
        *((_OWORD *)v13 + 4) = v49;
        *((_OWORD *)v13 + 5) = v18;
        *((_OWORD *)v13 + 2) = v16;
        *((_OWORD *)v13 + 3) = v17;
        double v19 = v13 + 96;
      }

      a2[1] = v19;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v37 = v41;
    uint64_t v41 = 0LL;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
    }
    *(void **)((char *)v42
    uint64_t v43 = v38;
    std::streambuf::~streambuf(&v44);
    return std::ios::~ios(&v45);
  }

  return result;
}

void sub_100C49A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1011F8850((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C49AC8(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_101267AD4(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 40)))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100C49D28(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_101267C40(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      __int128 v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100C49F60(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_101267DAC(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100C4A188(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100C4A1B4(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100C4A1E0()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "TILE: running initStaticGlobals", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    LOWORD(v9[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: running initStaticGlobals",  v9,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLWifiTileFile::initStaticGlobals()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A7CB0(*(uint64_t *)buf, "kMinimumSupportedTilesVersion", &dword_10198FE80);
  uint64_t v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  uint64_t v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_10198FE80;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: fMinimumSupportedTilesVersion, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    v9[0] = 67109120;
    v9[1] = dword_10198FE80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: fMinimumSupportedTilesVersion, %d",  v9);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLWifiTileFile::initStaticGlobals()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void sub_100C4A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_100C4A534(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  uint64_t v3 = sub_100595C90(a1, &v5, qword_10199D2E0, a2);
  *(void *)uint64_t v3 = off_101879900;
  *(_DWORD *)(v3 + 328) = 175034;
  *(_OWORD *)(v3 + 332) = xmmword_101356BA0;
  *(_DWORD *)(v3 + 356) = 109498;
  *(void *)(v3 + 36sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 192LL;
  *(_DWORD *)(v3 + 368) = 381;
  *(void *)(v3 + 372) = 0LL;
  *(_OWORD *)(v3 + 38sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_DWORD *)(v3 + 396) = 0;
  *(int32x2_t *)(v3 + 40sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = vdup_n_s32(0xC47A0000);
  *(_DWORD *)(v3 + 408) = -998637568;
  *(_OWORD *)(v3 + 412) = 0u;
  *(_OWORD *)(v3 + 428) = 0u;
  *(_OWORD *)(v3 + 444) = 0u;
  *(_OWORD *)(v3 + 46sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(v3 + 476) = 0u;
  *(_OWORD *)(v3 + 492) = 0u;
  *(_OWORD *)(v3 + 508) = 0u;
  *(_OWORD *)(v3 + 524) = 0u;
  *(_OWORD *)(v3 + 54sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_DWORD *)(v3 + 556) = 0;
  *(_OWORD *)(v3 + 60sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(void *)(v3 + 592) = v3 + 600;
  pthread_once(&stru_10198FE88, sub_100C4A1E0);
  (*(void (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  return a1;
}

void sub_100C4A64C(_Unwind_Exception *a1)
{
  int v5 = v4;
  sub_100008390(v3, *v5);
  double v7 = *v2;
  *uint64_t v2 = 0LL;
  if (v7) {
    sub_100223734((int)v2, v7);
  }
  sub_100C0CB28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C4A688(uint64_t a1)
{
  *(void *)a1 = off_101879900;
  sub_100C4A6F4(a1);
  sub_100008390(a1 + 592, *(void **)(a1 + 600));
  uint64_t v2 = *(void ***)(a1 + 576);
  *(void *)(a1 + 576) = 0LL;
  if (v2) {
    sub_100223734(a1 + 576, v2);
  }
  return sub_100C0CB28(a1);
}

void sub_100C4A6E0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C4A688(a1);
  operator delete(v1);
}

uint64_t sub_100C4A6F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  bzero((void *)(a1 + 356), 0xCCuLL);
  bzero((void *)(a1 + 328), 0x14uLL);
  *(void *)(a1 + 348) = 0LL;
  *(void *)(a1 + 56sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(_DWORD *)(a1 + 568) = 0;
  uint64_t v3 = *(void ***)(a1 + 576);
  *(void *)(a1 + 576) = 0LL;
  if (v3) {
    sub_100223734(a1 + 576, v3);
  }
  sub_100008390(a1 + 592, *(void **)(a1 + 600));
  *(void *)(a1 + 592) = a1 + 600;
  *(void *)(a1 + 608) = 0LL;
  *(void *)(a1 + 60sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  sub_100C0CB8C(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

void sub_100C4A7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100C4A7CC(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  uint64_t v10 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v11 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)std::string buf = 67109378;
    unsigned int v45 = v11;
    __int16 v46 = 2080;
    __int128 v47 = sub_100C0B634(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "TILE: CLWifiTileFile, sectionId, %d, %s",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    uint64_t v31 = qword_101934A78;
    unsigned int v32 = *(unsigned __int16 *)(a3 + 2);
    __int128 v33 = sub_100C0B634(v32);
    int v40 = 67109378;
    unsigned int v41 = v32;
    __int16 v42 = 2080;
    uint64_t v43 = v33;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v31,  2LL,  "TILE: CLWifiTileFile, sectionId, %d, %s",  &v40,  v39);
    __int128 v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)",  "%s\n",  v34);
    if (v35 != buf) {
      free(v35);
    }
  }

  int v12 = *(unsigned __int16 *)(a3 + 2);
  if (v12 == 3)
  {
    *(int8x8_t *)&double v21 = sub_10098329C(a4, a4);
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 152LL))(a1, a4, v21);
    if (!*(_BYTE *)(a5 + 8))
    {
      uint64_t v26 = (uint8_t *)sub_100599BF4(a1, a2, a3, 0, *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16));
      if (!v26) {
        return;
      }
      __int128 v15 = v26;
      if (!*(_BYTE *)(a5 + 9))
      {
        unint64_t v27 = 0LL;
        do
        {
          __int128 v28 = (int *)&v15[v27 * *(unsigned int *)(a4 + 16)];
          sub_1009832F0(v28, (uint64_t)v28);
          (*(void (**)(uint64_t, int *))(*(void *)a1 + 160LL))(a1, v28);
          ++v27;
        }

        while (!*(_BYTE *)(a5 + 9));
      }

      goto LABEL_43;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    uint64_t v22 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "TILE: headers only, avoid reading SectionID_TileAccessPointTable",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018799C8);
      }
      LOWORD(v4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: headers only, avoid reading SectionID_TileAccessPointTable",  &v40,  v39);
      std::stringbuf v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)",  "%s\n",  v23);
      if (v24 != buf)
      {
        uint64_t v25 = v24;
LABEL_44:
        free(v25);
      }
    }
  }

  else if (v12 == 2)
  {
    *(int8x8_t *)&double v13 = sub_10098329C(a4, a4);
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 136LL))(a1, a4, v13);
    uint64_t v14 = (uint8_t *)sub_100599BF4(a1, a2, a3, 0, *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16));
    if (v14)
    {
      __int128 v15 = v14;
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018799C8);
      }
      uint64_t v16 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v17 = *(_DWORD *)(a4 + 16);
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v45 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "TILE: tileMacIndexHeader, entrySizeInBytes, %u",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018799C8);
        }
        unsigned int v36 = *(_DWORD *)(a4 + 16);
        int v40 = 67109120;
        unsigned int v41 = v36;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: tileMacIndexHeader, entrySizeInBytes, %u",  &v40);
        uint64_t v38 = (uint8_t *)v37;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const voi d *, const TraverseDetails &)",  "%s\n",  v37);
        if (v38 != buf) {
          free(v38);
        }
      }

      if (*(_BYTE *)(a5 + 8))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018799C8);
        }
        uint64_t v18 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "TILE: headers only, avoid reading SectionID_TileIndex_Mac",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018799C8);
          }
          LOWORD(v4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
          LODWORD(v39) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: headers only, avoid reading SectionID_TileIndex_Mac",  &v40,  v39);
          uint64_t v20 = (uint8_t *)v19;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const v oid *, const TraverseDetails &)",  "%s\n",  v19);
          if (v20 != buf) {
            free(v20);
          }
        }
      }

      else if (*(_DWORD *)(a4 + 12))
      {
        unint64_t v29 = 0LL;
        do
        {
          unint64_t v30 = (int *)&v15[v29 * *(unsigned int *)(a4 + 16)];
          sub_1009832D0(v30, (uint64_t)v30);
          (*(void (**)(uint64_t, int *))(*(void *)a1 + 144LL))(a1, v30);
          ++v29;
        }

        while (v29 < *(unsigned int *)(a4 + 12));
      }

__n128 sub_100C4AEAC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 52);
  uint64_t v4 = *(uint64_t **)(a1 + 576);
  if (v4)
  {
    uint64_t v5 = *v4;
  }

  else
  {
    uint64_t v4 = (uint64_t *)operator new(0x18uLL);
    uint64_t v5 = 0LL;
    v4[1] = 0LL;
    v4[2] = 0LL;
    uint64_t *v4 = 0LL;
    *(void *)(a1 + 576) = v4;
  }

  v4[1] = v5;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  __int128 v7 = *(_OWORD *)(a2 + 32);
  __int128 v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 404) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 42sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v8;
  *(_OWORD *)(a1 + 372) = v6;
  *(_OWORD *)(a1 + 388) = v7;
  __int128 v9 = *(_OWORD *)(a2 + 80);
  __int128 v10 = *(_OWORD *)(a2 + 96);
  __int128 v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 484) = v11;
  *(_OWORD *)(a1 + 436) = v9;
  *(_OWORD *)(a1 + 452) = v10;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v13 = *(_OWORD *)(a2 + 160);
  __int128 v14 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 516) = v13;
  *(_OWORD *)(a1 + 532) = v14;
  *(__n128 *)(a1 + 50sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = result;
  return result;
}

void sub_100C4AF50(uint64_t a1, _DWORD *a2)
{
  __int128 v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 344) = a2[4];
  *(_OWORD *)(a1 + 328) = v4;
  uint64_t v5 = *(uint64_t **)(a1 + 576);
  if (v5)
  {
    uint64_t v6 = *v5;
  }

  else
  {
    uint64_t v5 = (uint64_t *)operator new(0x18uLL);
    uint64_t v6 = 0LL;
    v5[1] = 0LL;
    v5[2] = 0LL;
    uint64_t *v5 = 0LL;
    *(void *)(a1 + 576) = v5;
  }

  v5[1] = v6;
  sub_100C4AFBC(*(char ***)(a1 + 576), a2[3]);
}

void sub_100C4AFBC(char **a1, unint64_t a2)
{
  __int128 v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 1) < a2)
  {
    if (a2 >= 0x199999999999999ALL) {
      sub_100007008();
    }
    uint64_t v5 = (a1[1] - *a1) / 10;
    uint64_t v6 = (char *)sub_100C4E434(v3, a2);
    __int128 v7 = &v6[10 * v5];
    __int128 v9 = &v6[10 * v8];
    __int128 v11 = *a1;
    __int128 v10 = a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 10);
        v10 -= 10;
        __int16 v14 = *((_WORD *)v10 + 4);
        *(void *)(v12 - 1sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v13;
        v12 -= 10;
        *((_WORD *)v12 + 4) = v14;
      }

      while (v10 != v11);
      __int128 v10 = *a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

void sub_100C4B088(uint64_t a1, uint64_t *a2)
{
  if (!*(_BYTE *)(a1 + 313))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    __int128 v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(uint64_t **)(a1 + 576);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      int v8 = *(_DWORD *)(a1 + 340);
      v38.__r_.__value_.__r.__words[0] = sub_1007EC028((unsigned __int8 *)a2);
      sub_1007EC360((std::string *)__p);
      __int128 v9 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
      int v10 = *(_DWORD *)((char *)a2 + 6);
      *(_DWORD *)std::string buf = 134218754;
      unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 1);
      __int16 v48 = 1024;
      int v49 = v8;
      __int16 v50 = 2080;
      uint64_t v51 = v9;
      __int16 v52 = 1024;
      int v53 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "TILE: idx, %3lu, %3u, mac, %s, offset, %u",  buf,  0x22u);
      if (SBYTE3(v43) < 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018799C8);
      }
      uint64_t v28 = qword_101934A78;
      unint64_t v29 = *(uint64_t **)(a1 + 576);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      int v32 = *(_DWORD *)(a1 + 340);
      uint64_t v37 = (const char *)sub_1007EC028((unsigned __int8 *)a2);
      sub_1007EC360(&v38);
      if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v33 = &v38;
      }
      else {
        __int128 v33 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      int v34 = *(_DWORD *)((char *)a2 + 6);
      *(_DWORD *)std::stringbuf::string_type __p = 134218754;
      *(void *)&__p[4] = 0xCCCCCCCCCCCCCCCDLL * ((v30 - v31) >> 1);
      __int16 v40 = 1024;
      int v41 = v32;
      __int16 v42 = 2080;
      uint64_t v43 = v33;
      __int16 v44 = 1024;
      int v45 = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  2LL,  "TILE: idx, %3lu, %3u, mac, %s, offset, %u",  __p,  34,  v37,  LODWORD(v38.__r_.__value_.__l.__data_));
      unsigned int v36 = v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiTileFile::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)",  "%s\n",  v36);
    }
  }

  __int128 v11 = *(char ***)(a1 + 576);
  unint64_t v12 = (unint64_t)v11[1];
  unint64_t v13 = (unint64_t)v11[2];
  if (v12 >= v13)
  {
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)*v11) >> 1);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x1999999999999999LL) {
      sub_100007008();
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*v11) >> 1);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0xCCCCCCCCCCCCCCCLL) {
      unint64_t v19 = 0x1999999999999999LL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)sub_100C4E434((uint64_t)(v11 + 2), v19);
    }
    else {
      uint64_t v20 = 0LL;
    }
    double v21 = &v20[10 * v16];
    uint64_t v22 = &v20[10 * v19];
    uint64_t v23 = *a2;
    *((_WORD *)v21 + 4) = *((_WORD *)a2 + 4);
    *(void *)double v21 = v23;
    __int128 v15 = v21 + 10;
    uint64_t v25 = *v11;
    std::stringbuf v24 = v11[1];
    if (v24 != *v11)
    {
      do
      {
        uint64_t v26 = *(void *)(v24 - 10);
        v24 -= 10;
        __int16 v27 = *((_WORD *)v24 + 4);
        *(void *)(v21 - 1sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v26;
        v21 -= 10;
        *((_WORD *)v21 + 4) = v27;
      }

      while (v24 != v25);
      std::stringbuf v24 = *v11;
    }

    char *v11 = v21;
    v11[1] = v15;
    v11[2] = v22;
    if (v24) {
      operator delete(v24);
    }
  }

  else
  {
    uint64_t v14 = *a2;
    *(_WORD *)(v12 + 8) = *((_WORD *)a2 + 4);
    *(void *)unint64_t v12 = v14;
    __int128 v15 = (char *)(v12 + 10);
  }

  v11[1] = v15;
}

double sub_100C4B450(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 12);
  *(double *)(a1 + 348) = result;
  *(_DWORD *)(a1 + 292) = 0;
  return result;
}

_WORD *sub_100C4B484(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v39 = 0LL;
  v40[0] = 0.0;
  sub_100C13C70(a1, *(_DWORD *)(a2 + 6) & 0xFFF, (*(_DWORD *)(a2 + 6) >> 12) & 0xFFF, v40, (double *)&v39);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  __int128 v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 292);
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = a2[2];
    int v9 = a2[3];
    int v10 = a2[4];
    unsigned int v11 = *(_DWORD *)(a2 + 6);
    int v30 = v11 & 0xFFF;
    int v31 = a2[5];
    int v33 = (v11 >> 12) & 0xFFF;
    double v35 = v40[0];
    uint64_t v37 = v39;
    double v12 = sub_100F360C0(HIBYTE(v11) & 0xF);
    double v13 = sub_100F360DC(*(_DWORD *)(a2 + 6) >> 28);
    *(_DWORD *)std::string buf = 67112192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v63 = 1024;
    int v64 = v6;
    __int16 v65 = 1024;
    int v66 = v7;
    __int16 v67 = 1024;
    int v68 = v8;
    __int16 v69 = 1024;
    int v70 = v9;
    __int16 v71 = 1024;
    int v72 = v10;
    __int16 v73 = 1024;
    int v74 = v31;
    __int16 v75 = 1024;
    int v76 = v30;
    __int16 v77 = 1024;
    int v78 = v33;
    __int16 v79 = 2048;
    double v80 = v35;
    __int16 v81 = 2048;
    uint64_t v82 = v37;
    __int16 v83 = 2048;
    double v84 = v12;
    __int16 v85 = 2048;
    double v86 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf",  buf,  0x60u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    int v16 = *(_DWORD *)(a1 + 292);
    int v17 = *a2;
    int v18 = a2[1];
    int v19 = a2[2];
    int v20 = a2[3];
    int v21 = a2[4];
    int v22 = a2[5];
    unsigned int v23 = *(_DWORD *)(a2 + 6);
    int v24 = v23 & 0xFFF;
    int v32 = (v23 >> 12) & 0xFFF;
    double v36 = v40[0];
    uint64_t v38 = qword_101934A78;
    uint64_t v34 = v39;
    double v25 = sub_100F360C0(HIBYTE(v23) & 0xF);
    double v26 = sub_100F360DC(*(_DWORD *)(a2 + 6) >> 28);
    LODWORD(v41) = 67112192;
    HIDWORD(v41) = v16;
    LOWORD(v42) = 1024;
    *(_DWORD *)((char *)&v42 + 2) = v17;
    HIWORD(v42) = 1024;
    *(_DWORD *)uint64_t v43 = v18;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v19;
    __int16 v44 = 1024;
    int v45 = v20;
    __int16 v46 = 1024;
    int v47 = v21;
    __int16 v48 = 1024;
    int v49 = v22;
    __int16 v50 = 1024;
    int v51 = v24;
    __int16 v52 = 1024;
    int v53 = v32;
    __int16 v54 = 2048;
    double v55 = v36;
    __int16 v56 = 2048;
    uint64_t v57 = v34;
    __int16 v58 = 2048;
    double v59 = v25;
    __int16 v60 = 2048;
    double v61 = v26;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  2LL,  "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf",  &v41,  96,  v29,  v30,  v34,  LODWORD(v36),  v38,  v39,  LODWORD(v40[0]),  v40[1],  v41,  v42,  *(double *)v43);
    uint64_t v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLWifiTileFile::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  double v41 = COERCE_DOUBLE(sub_1007EC028(a2));
  *(void *)std::string buf = &v41;
  double result = sub_100C4E3AC((uint64_t **)(a1 + 592), &v41, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  uint64_t v15 = *(void *)a2;
  result[24] = *((_WORD *)a2 + 4);
  *((void *)result + 5) = v15;
  ++*(_DWORD *)(a1 + 292);
  return result;
}

uint64_t sub_100C4B858(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = 0;
  int v10 = (void *)(a4 + 16);
  while (1)
  {
    unsigned int v11 = (v9 + a3) >> 1;
    double v12 = (unsigned __int8 *)(*(_DWORD *)(a5 + 16) * v11 + a2);
    unint64_t v26 = sub_1007EC028(v12);
    BOOL v13 = sub_1007EC0B0(&v26, v10);
    if (v13) {
      break;
    }
    if (v9 == v11 || !sub_1007EC100(v10, &v26))
    {
      if (a3 == v11 || !sub_1007EC0D8(v10, &v26)) {
        goto LABEL_17;
      }
      a3 = (v9 + a3) >> 1;
      unsigned int v11 = v9;
    }

    else
    {
      unsigned int v9 = (v9 + a3) >> 1;
    }

    if (v11 > a3) {
      goto LABEL_18;
    }
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  uint64_t v14 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = sub_1005B46E8((uint64_t)v10);
    uint64_t v16 = sub_1005B46E8((uint64_t)&v26);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v31 = 2048;
    uint64_t v32 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "TILE: binarySearchAP, match, %012llx, %012llx",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    uint64_t v21 = qword_101934A78;
    uint64_t v22 = sub_1005B46E8((uint64_t)v10);
    uint64_t v23 = sub_1005B46E8((uint64_t)&v26);
    *(_DWORD *)__int16 v27 = 134218240;
    *(void *)&v27[4] = v22;
    __int16 v28 = 2048;
    uint64_t v29 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "TILE: binarySearchAP, match, %012llx, %012llx",  v27,  22);
    double v25 = (char *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiTileFile::binarySearchAP(CLTilesManager_Type::AccessPointEntry *, unsigned int, const TraverseDetails & , const CLTilesManager_Type::TileAccessPointTable &)",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 160LL))(a1, v12);
LABEL_17:
  unsigned int v11 = v9;
LABEL_18:
  char v17 = v11 == a3 || v13;
  if ((v17 & 1) == 0)
  {
    int v18 = *(_DWORD *)(a5 + 16);
    int v19 = (unsigned __int8 *)(v18 * a3 + a2);
    *(void *)std::string buf = sub_1007EC028((unsigned __int8 *)(v18 * v11 + a2));
    *(void *)__int16 v27 = sub_1007EC028(v19);
    BOOL v13 = sub_1007EC0B0(buf, v10);
    if (v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 160LL))(a1, *(_DWORD *)(a5 + 16) * v11 + a2);
    }
    if (sub_1007EC0B0(v27, v10))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 160LL))(a1, *(_DWORD *)(a5 + 16) * a3 + a2);
      return 1LL;
    }
  }

  return v13;
}

uint64_t sub_100C4BBA0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5 = 0LL;
  *a4 = 0;
  *a5 = 0;
  int v6 = *(unsigned __int8 **)a2;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  if (v7 >= 2)
  {
    uint64_t v51 = *(void *)(a3 + 16);
    unint64_t v11 = v7 - 1;
    unint64_t v12 = (v7 - 1) >> 1;
    unint64_t v50 = sub_1007EC028(v6);
    unint64_t v49 = sub_1007EC028((unsigned __int8 *)(*(void *)a2 + 10 * v11));
    if (sub_1007EC100(&v51, &v49))
    {
      uint64_t v5 = 0LL;
      HIDWORD(v48) = 0;
      unint64_t v13 = 0LL;
      int v14 = 0;
      *a4 = v11;
      *a5 = v11;
    }

    else if (sub_1007EC0D8(&v51, &v50))
    {
      uint64_t v5 = 0LL;
      HIDWORD(v48) = 0;
      unint64_t v13 = 0LL;
      int v14 = 0;
      *a4 = 0;
      *a5 = 0;
    }

    else
    {
      unint64_t v13 = 0LL;
      unint64_t v15 = v12;
      while (1)
      {
        unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
        unint64_t v17 = v15 + 1;
        if (v15 >= v16 || v17 >= v16) {
          break;
        }
        *(void *)std::string buf = sub_1007EC028((unsigned __int8 *)(*(void *)a2 + 10 * v15));
        *(void *)__int16 v52 = sub_1007EC028((unsigned __int8 *)(*(void *)a2 + 10 * v17));
        if (sub_1007EC0EC(buf, &v51) && sub_1007EC0EC(&v51, v52))
        {
          *a4 = v15;
          *a5 = v15 + 1;
          uint64_t v5 = 1LL;
          HIDWORD(v48) = 1;
          unint64_t v12 = v15;
          goto LABEL_27;
        }

        if (sub_1007EC100(&v51, buf))
        {
          unint64_t v13 = v15;
        }

        else if (sub_1007EC0D8(&v51, buf))
        {
          unint64_t v11 = v15;
        }

        unint64_t v12 = (v13 + v11) >> 1;
        if (v12 == v15) {
          break;
        }
        unint64_t v15 = (v13 + v11) >> 1;
        if (v13 > v11) {
          goto LABEL_21;
        }
      }

      unint64_t v12 = v15;
LABEL_21:
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018799E8);
      }
      int v19 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
        uint64_t v21 = sub_1005B46E8((uint64_t)&v50);
        uint64_t v22 = sub_1005B46E8((uint64_t)&v51);
        uint64_t v23 = sub_1005B46E8((uint64_t)&v49);
        *(_DWORD *)std::string buf = 134350592;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)__int128 v62 = v13;
        *(_WORD *)&v62[8] = 2050;
        *(void *)__int16 v63 = v11;
        *(_WORD *)&v63[8] = 2050;
        *(void *)int v64 = v12;
        *(_WORD *)&v64[8] = 2050;
        *(void *)__int16 v65 = v21;
        *(_WORD *)&v65[8] = 2050;
        uint64_t v66 = v22;
        *(_WORD *)__int16 v67 = 2050;
        *(void *)&v67[2] = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{pub lic}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe",  buf,  0x48u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_1018799E8);
        }
        uint64_t v39 = qword_101934858;
        unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
        uint64_t v41 = sub_1005B46E8((uint64_t)&v50);
        uint64_t v42 = sub_1005B46E8((uint64_t)&v51);
        uint64_t v43 = sub_1005B46E8((uint64_t)&v49);
        *(_DWORD *)__int16 v52 = 134350592;
        *(void *)&v52[4] = v40;
        *(_WORD *)&v52[12] = 2050;
        *(void *)&v52[14] = v13;
        *(_WORD *)&v52[22] = 2050;
        *(void *)int v53 = v11;
        *(_WORD *)&v53[8] = 2050;
        *(void *)__int16 v54 = v12;
        *(_WORD *)&v54[8] = 2050;
        *(void *)double v55 = v41;
        *(_WORD *)&v55[8] = 2050;
        uint64_t v56 = v42;
        *(_WORD *)uint64_t v57 = 2050;
        *(void *)&v57[2] = v43;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  16LL,  "WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{pub lic}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe",  v52,  72);
        int v45 = (char *)v44;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const Travers eDetails &, unsigned int &, unsigned int &)",  "%s\n",  v44);
        if (v45 != buf) {
          free(v45);
        }
      }

      uint64_t v5 = 0LL;
      int v14 = 0;
      HIDWORD(v48) = 1;
    }

BOOL sub_100C4C290(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v169 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v169 + 16LL))(v169);
  __int16 v171 = 256;
  *(_BYTE *)(a1 + 296) = 1;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  unint64_t v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)a3;
    int v9 = *(unsigned __int8 *)(a3 + 8);
    int v10 = *(unsigned __int8 *)(a3 + 9);
    uint64_t v11 = sub_1005B46E8(a3 + 16);
    BOOL v12 = *(void *)(a1 + 576) != 0LL;
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v182 = 1024;
    *(_DWORD *)__int128 v183 = v9;
    *(_WORD *)&v183[4] = 1024;
    *(_DWORD *)&v183[6] = v10;
    *(_WORD *)v184 = 2048;
    *(void *)&v184[2] = v11;
    *(_WORD *)&v184[10] = 1024;
    *(_DWORD *)&v184[12] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d",  buf,  0x28u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    uint64_t v127 = qword_101934A78;
    uint64_t v128 = *(void *)a3;
    int v129 = *(unsigned __int8 *)(a3 + 8);
    int v130 = *(unsigned __int8 *)(a3 + 9);
    uint64_t v131 = sub_1005B46E8(a3 + 16);
    BOOL v132 = *(void *)(a1 + 576) != 0LL;
    LODWORD(v180[0]) = 136316162;
    *(void *)((char *)v180 + 4) = v128;
    WORD6(v180[0]) = 1024;
    *(_DWORD *)((char *)v180 + 14) = v129;
    WORD1(v180[1]) = 1024;
    DWORD1(v180[1]) = v130;
    WORD4(v180[1]) = 2048;
    *(void *)((char *)&v180[1] + 1sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v131;
    WORD1(v180[2]) = 1024;
    DWORD1(v180[2]) = v132;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v127,  2LL,  "TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d",  (const char *)v180,  40,  v154,  v155,  v156);
    uint64_t v134 = (char *)v133;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v133);
    if (v134 != buf) {
      free(v134);
    }
  }

  if (!a2)
  {
    BOOL v27 = 0LL;
    goto LABEL_203;
  }

  __int128 v13 = *(_OWORD *)a3;
  *(void *)(a1 + 32sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 304) = v13;
  nullsub_10(0LL);
  unint64_t v168 = v14;
  nullsub_10(0LL);
  unint64_t v167 = v15;
  *(void *)((char *)v180 + 4) = 192LL;
  LODWORD(v180[0]) = 109498;
  HIDWORD(v180[0]) = 381;
  memset(&v180[1], 0, 28);
  *(int32x2_t *)((char *)&v180[2] + 12) = vdup_n_s32(0xC47A0000);
  DWORD1(v180[3]) = -998637568;
  memset((char *)&v180[3] + 8, 0, 148);
  uint64_t v16 = (uint64_t)"iseMinuteBurstEstimator22computeExerciseMinutesEvE3$_0NS_9allocatorIS3_EEFvRK31CLExerciseMinuteIntensitySampledEEE";
  if (*(_BYTE *)(a3 + 9) && *(void *)(a1 + 576) && *(void *)(a1 + 584))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
    unint64_t v17 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 584);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld",  buf,  0xCu);
    }

    uint64_t v19 = sub_1002921D0(115, 2);
    if ((_DWORD)v19)
    {
      bzero(buf, 0x65CuLL);
      uint64_t v60 = (uint64_t)&OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934A70 != -1) {
LABEL_237:
      }
        dispatch_once(&qword_101934A70, &stru_1018799C8);
      uint64_t v139 = *(void *)(a1 + 584);
      int v172 = 134217984;
      uint64_t v173 = v139;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld",  &v172);
      __int128 v141 = (char *)v140;
      uint64_t v19 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v140);
      if (v141 != buf) {
        free(v141);
      }
      p_vtable = (void **)v60;
    }

    if (sub_100C4BBA0(v19, *(void *)(a1 + 576), a3, &v165, &__ptr)
      && (unsigned int v20 = __ptr, v165 < __ptr))
    {
      uint64_t v21 = *(uint64_t **)(a1 + 576);
      uint64_t v22 = *v21;
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v21[1] - *v21) >> 1);
      uint64_t v159 = v22 + 10LL * v165;
      unint64_t v168 = sub_1007EC028((unsigned __int8 *)v159);
      uint64_t v158 = v22 + 10LL * v20;
      unint64_t v167 = sub_1007EC028((unsigned __int8 *)v158);
      int v24 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "TILE: traverseTileFile, re-using cached index vector",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        LOWORD(v172) = 0;
        LODWORD(v153) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: traverseTileFile, re-using cached index vector",  &v172,  v153);
        unint64_t v26 = (char *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }
    }

    else
    {
      unint64_t v28 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v29 = sub_1005B46E8((uint64_t)&v168);
        uint64_t v30 = sub_1005B46E8(a3 + 16);
        uint64_t v31 = sub_1005B46E8((uint64_t)&v167);
        unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL
            * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8LL) - **(void **)(a1 + 576)) >> 1);
        *(_DWORD *)std::string buf = *(void *)(v16 + 288);
        *(void *)&uint8_t buf[4] = v29;
        __int16 v182 = 2048;
        *(void *)__int128 v183 = v30;
        *(_WORD *)&v183[8] = 2048;
        *(void *)v184 = v31;
        *(_WORD *)&v184[8] = 2048;
        *(void *)&v184[10] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        uint64_t v142 = qword_101934A78;
        uint64_t v143 = sub_1005B46E8((uint64_t)&v168);
        uint64_t v144 = sub_1005B46E8(a3 + 16);
        uint64_t v145 = sub_1005B46E8((uint64_t)&v167);
        unint64_t v146 = 0xCCCCCCCCCCCCCCCDLL
             * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8LL) - **(void **)(a1 + 576)) >> 1);
        int v172 = *(void *)(v16 + 288);
        uint64_t v173 = v143;
        __int16 v174 = 2048;
        *(void *)__int128 v175 = v144;
        *(_WORD *)&v175[8] = 2048;
        *(void *)v176 = v145;
        *(_WORD *)&v176[8] = 2048;
        *(void *)&v176[10] = v146;
        LODWORD(v153) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v142,  2LL,  "TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search",  &v172,  v153,  v154,  v155);
        uint64_t v148 = (char *)v147;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v147);
        if (v148 != buf) {
          free(v148);
        }
      }

      uint64_t v158 = 0LL;
      uint64_t v159 = 0LL;
      *(_BYTE *)(a1 + 296) = 0;
    }

    fseeko(a2, *(void *)(a1 + 584), 0);
  }

  else
  {
    uint64_t v158 = 0LL;
    uint64_t v159 = 0LL;
  }

  __int16 v160 = (void *)(a3 + 16);
  int v157 = *(void *)(v16 + 288);
  while (1)
  {
    if (!*(_BYTE *)(a1 + 296) || feof(a2))
    {
      BOOL v27 = 1LL;
      goto LABEL_196;
    }

    uint64_t v165 = 0LL;
    unsigned int v166 = 0;
    uint64_t __ptr = 0LL;
    int v164 = 0;
    size_t v33 = fread(&__ptr, 1uLL, 0xCuLL, a2);
    sub_1009831E8((unsigned __int16 *)&__ptr, (uint64_t)&v165);
    BOOL v27 = v33 != 12;
    if (v33 != 12) {
      goto LABEL_196;
    }
    unint64_t v34 = HIDWORD(v165) + (unint64_t)v166;
    size_t v35 = v34 + 1036;
    if (v34 + 12 > 0x63FFC0B)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018799E8);
      }
      uint64_t v115 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349312;
        *(void *)&uint8_t buf[4] = v35;
        __int16 v182 = 2050;
        *(void *)__int128 v183 = 104857612LL;
        _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_ERROR,  "WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocatio nSize, %{public}lu, #CloneMe",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_195;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018799E8);
      }
      int v172 = 134349312;
      uint64_t v173 = v35;
      __int16 v174 = 2050;
      *(void *)__int128 v175 = 104857612LL;
      LODWORD(v153) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocationS ize, %{public}lu, #CloneMe",  &v172,  v153);
      __int128 v117 = v116;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v116);
LABEL_186:
      if (v117 != buf)
      {
        uint64_t v120 = (char *)v117;
        goto LABEL_194;
      }

void sub_100C4E1D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

uint64_t sub_100C4E2C0@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  int v7 = 0;
  sub_1008ACE9C(a1, &v7);
  return sub_100C11F48(a1, -1LL, a2, a3, 0.05, 0.05);
}

void sub_100C4E324(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100C4E340()
{
  return dword_10198FE80;
}

uint64_t sub_100C4E34C()
{
  return 4096LL;
}

void sub_100C4E354(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100C4E380(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_WORD *sub_100C4E3AC(uint64_t **a1, void *a2, uint64_t a3, uint64_t **a4)
{
  int v6 = (void **)sub_1002FB00C((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x38uLL);
    uint64_t v9 = **a4;
    v7[24] = 0;
    *((void *)v7 + 4) = v9;
    *((void *)v7 + 5) = 0LL;
    sub_1000085FC(a1, v11, v8, (uint64_t *)v7);
  }

  return v7;
}

void *sub_100C4E434(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x199999999999999ALL) {
    sub_1000070D4();
  }
  return operator new(10 * a2);
}

uint64_t sub_100C4E478()
{
  unsigned __int8 v0 = operator new(0x10uLL);
  uint64_t result = sub_1002E4C3C(v0, "CLWifiTileFile-Mutex", 1LL, 1LL);
  qword_10199D2E0 = (uint64_t)v0;
  return result;
}

void sub_100C4E4B8(_Unwind_Exception *a1)
{
}

void **sub_100C4E4CC(void **a1)
{
  uint64_t v3 = a1;
  sub_100006BC8(&v3);
  return a1;
}

void *sub_100C4E500(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v4 = a4;
  int v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0LL;
      v4[1] = 0LL;
      v4[2] = 0LL;
      sub_10001B72C(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      __int128 v4 = v11 + 3;
      v11 += 3;
      v6 += 24LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100C4E5B0((uint64_t)v8);
  return v4;
}

void sub_100C4E59C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C4E5B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100006F50(a1);
  }
  return a1;
}

uint64_t sub_100C4E5E4()
{
  qword_1019A2008 = 0LL;
  unk_1019A2010 = 0LL;
  qword_1019A2000 = 0LL;
  unsigned __int8 v0 = operator new(0x4CuLL);
  qword_1019A2008 = (uint64_t)v0 + 76;
  unk_1019A2010 = (char *)v0 + 76;
  v0[2] = xmmword_101356BE4;
  v0[3] = unk_101356BF4;
  *(_OWORD *)((char *)v0 + 6sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = unk_101356C00;
  *unsigned __int8 v0 = xmmword_101356BC4;
  v0[1] = unk_101356BD4;
  qword_1019A2000 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_1019A2000, (void *)&_mh_execute_header);
  qword_1019A2020 = 0LL;
  unk_1019A2028 = 0LL;
  qword_1019A2018 = 0LL;
  uint64_t v1 = operator new(0x4CuLL);
  qword_1019A2020 = (uint64_t)v1 + 76;
  unk_1019A2028 = (char *)v1 + 76;
  v1[2] = xmmword_101356C30;
  v1[3] = unk_101356C40;
  *(_OWORD *)((char *)v1 + 6sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = unk_101356C4C;
  _OWORD *v1 = xmmword_101356C10;
  v1[1] = unk_101356C20;
  qword_1019A2018 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_1019A2018, (void *)&_mh_execute_header);
  uint64_t v2 = operator new(0x50uLL);
  v2[2] = xmmword_101356C7C;
  v2[3] = unk_101356C8C;
  v2[4] = xmmword_101356C9C;
  *uint64_t v2 = xmmword_101356C5C;
  v2[1] = unk_101356C6C;
  v25[0] = v2;
  v25[1] = v2 + 5;
  void v25[2] = v2 + 5;
  uint64_t v3 = operator new(0x50uLL);
  _OWORD v3[2] = xmmword_101356CCC;
  v3[3] = unk_101356CDC;
  v3[4] = xmmword_101356CEC;
  _OWORD *v3 = xmmword_101356CAC;
  v3[1] = unk_101356CBC;
  v25[3] = v3;
  v25[4] = v3 + 5;
  v25[5] = v3 + 5;
  __int128 v4 = operator new(0x50uLL);
  v4[2] = xmmword_101356D1C;
  v4[3] = unk_101356D2C;
  _BYTE v4[4] = xmmword_101356D3C;
  _OWORD *v4 = xmmword_101356CFC;
  v4[1] = unk_101356D0C;
  v25[6] = v4;
  v25[7] = v4 + 5;
  v25[8] = v4 + 5;
  uint64_t v5 = operator new(0x50uLL);
  v5[2] = xmmword_101356D6C;
  v5[3] = unk_101356D7C;
  v5[4] = xmmword_101356D8C;
  _OWORD *v5 = xmmword_101356D4C;
  v5[1] = unk_101356D5C;
  v25[9] = v5;
  v25[10] = v5 + 5;
  v25[11] = v5 + 5;
  uint64_t v6 = operator new(0x50uLL);
  v6[2] = xmmword_101356DBC;
  v6[3] = unk_101356DCC;
  v6[4] = xmmword_101356DDC;
  *uint64_t v6 = xmmword_101356D9C;
  v6[1] = unk_101356DAC;
  v25[12] = v6;
  v25[13] = v6 + 5;
  v25[14] = v6 + 5;
  int v7 = operator new(0x50uLL);
  v7[2] = xmmword_101356E0C;
  v7[3] = unk_101356E1C;
  v7[4] = xmmword_101356E2C;
  _OWORD *v7 = xmmword_101356DEC;
  v7[1] = unk_101356DFC;
  v25[15] = v7;
  v25[16] = v7 + 5;
  v25[17] = v7 + 5;
  uint64_t v8 = operator new(0x50uLL);
  v8[2] = xmmword_101356E5C;
  void v8[3] = unk_101356E6C;
  _DWORD v8[4] = xmmword_101356E7C;
  *uint64_t v8 = xmmword_101356E3C;
  v8[1] = unk_101356E4C;
  v25[18] = v8;
  v25[19] = v8 + 5;
  v25[20] = v8 + 5;
  char v9 = operator new(0x50uLL);
  _DWORD v9[2] = xmmword_101356EAC;
  v9[3] = unk_101356EBC;
  _DWORD v9[4] = xmmword_101356ECC;
  _OWORD *v9 = xmmword_101356E8C;
  v9[1] = unk_101356E9C;
  v25[21] = v9;
  v25[22] = v9 + 5;
  v25[23] = v9 + 5;
  int v10 = operator new(0x50uLL);
  v10[2] = xmmword_101356EFC;
  v10[3] = unk_101356F0C;
  _DWORD v10[4] = xmmword_101356F1C;
  *int v10 = xmmword_101356EDC;
  v10[1] = unk_101356EEC;
  v25[24] = v10;
  v25[25] = v10 + 5;
  v25[26] = v10 + 5;
  uint64_t v11 = operator new(0x50uLL);
  v11[2] = xmmword_101356F4C;
  v11[3] = unk_101356F5C;
  v11[4] = xmmword_101356F6C;
  _OWORD *v11 = xmmword_101356F2C;
  v11[1] = unk_101356F3C;
  v25[27] = v11;
  v25[28] = v11 + 5;
  v25[29] = v11 + 5;
  BOOL v12 = operator new(0x50uLL);
  v12[2] = xmmword_101356F9C;
  v12[3] = unk_101356FAC;
  v12[4] = xmmword_101356FBC;
  *BOOL v12 = xmmword_101356F7C;
  v12[1] = unk_101356F8C;
  v25[30] = v12;
  v25[31] = v12 + 5;
  v25[32] = v12 + 5;
  __int128 v13 = operator new(0x50uLL);
  v13[2] = xmmword_101356FEC;
  v13[3] = unk_101356FFC;
  v13[4] = xmmword_10135700C;
  _OWORD *v13 = xmmword_101356FCC;
  v13[1] = unk_101356FDC;
  v25[33] = v13;
  v25[34] = v13 + 5;
  v25[35] = v13 + 5;
  unint64_t v14 = operator new(0x50uLL);
  void v14[2] = xmmword_10135703C;
  v14[3] = unk_10135704C;
  _DWORD v14[4] = xmmword_10135705C;
  *unint64_t v14 = xmmword_10135701C;
  v14[1] = unk_10135702C;
  v25[36] = v14;
  v25[37] = v14 + 5;
  v25[38] = v14 + 5;
  unint64_t v15 = operator new(0x50uLL);
  v15[2] = xmmword_10135708C;
  v15[3] = unk_10135709C;
  v15[4] = xmmword_1013570AC;
  *unint64_t v15 = xmmword_10135706C;
  v15[1] = unk_10135707C;
  v25[39] = v15;
  v25[40] = v15 + 5;
  v25[41] = v15 + 5;
  uint64_t v16 = operator new(0x50uLL);
  void v16[2] = xmmword_1013570DC;
  v16[3] = unk_1013570EC;
  v16[4] = xmmword_1013570FC;
  *uint64_t v16 = xmmword_1013570BC;
  v16[1] = unk_1013570CC;
  v25[42] = v16;
  v25[43] = v16 + 5;
  v25[44] = v16 + 5;
  unint64_t v17 = operator new(0x50uLL);
  v17[2] = xmmword_10135712C;
  v17[3] = unk_10135713C;
  v17[4] = xmmword_10135714C;
  *unint64_t v17 = xmmword_10135710C;
  v17[1] = unk_10135711C;
  v25[45] = v17;
  v25[46] = v17 + 5;
  v25[47] = v17 + 5;
  uint64_t v18 = operator new(0x50uLL);
  v18[2] = xmmword_10135717C;
  v18[3] = unk_10135718C;
  v18[4] = xmmword_10135719C;
  *uint64_t v18 = xmmword_10135715C;
  v18[1] = unk_10135716C;
  v25[48] = v18;
  v25[49] = v18 + 5;
  v25[50] = v18 + 5;
  uint64_t v19 = operator new(0x50uLL);
  v19[2] = xmmword_1013571CC;
  v19[3] = unk_1013571DC;
  v19[4] = xmmword_1013571EC;
  *uint64_t v19 = xmmword_1013571AC;
  v19[1] = unk_1013571BC;
  v25[51] = v19;
  v25[52] = v19 + 5;
  v25[53] = v19 + 5;
  unsigned int v20 = operator new(0x50uLL);
  v20[2] = xmmword_10135721C;
  v20[3] = unk_10135722C;
  v20[4] = xmmword_10135723C;
  *unsigned int v20 = xmmword_1013571FC;
  v20[1] = unk_10135720C;
  v25[54] = v20;
  v25[55] = v20 + 5;
  v25[56] = v20 + 5;
  uint64_t v21 = operator new(0x50uLL);
  v25[58] = v21 + 5;
  v25[59] = v21 + 5;
  v21[2] = xmmword_10135726C;
  v21[3] = unk_10135727C;
  v21[4] = xmmword_10135728C;
  *uint64_t v21 = xmmword_10135724C;
  v21[1] = unk_10135725C;
  v25[57] = v21;
  qword_1019A2038 = 0LL;
  qword_1019A2040 = 0LL;
  qword_1019A2030 = 0LL;
  qword_1019A2030 = (uint64_t)operator new(0x1E0uLL);
  qword_1019A2038 = qword_1019A2030;
  qword_1019A2040 = qword_1019A2030 + 480;
  qword_1019A2038 = (uint64_t)sub_100C4E500( (uint64_t)&qword_1019A2040,  (uint64_t)v25,  (uint64_t)&v26,  (void *)qword_1019A2030);
  uint64_t v22 = 60LL;
  do
  {
    unint64_t v23 = (void *)v25[v22 - 3];
    if (v23)
    {
      v25[v22 - 2] = v23;
      operator delete(v23);
    }

    v22 -= 3LL;
  }

  while (v22 * 8);
  return __cxa_atexit((void (*)(void *))sub_100C4E4CC, &qword_1019A2030, (void *)&_mh_execute_header);
}

void sub_100C4EC54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  qword_1019A2038 = v12;
  sub_100006BC8(&a10);
  uint64_t v14 = 60LL;
  while (1)
  {
    unint64_t v15 = *(void ***)(&a12 + v14 * 8 - 24);
    if (v15)
    {
      (&a10)[v14] = v15;
      operator delete(v15);
    }

    v14 -= 3LL;
    if (!(v14 * 8)) {
      _Unwind_Resume(a1);
    }
  }

double sub_100C4ED10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10025180C(a1, a2);
  *(void *)uint64_t v2 = off_101879A18;
  *(_DWORD *)(v2 + 24) = 2;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 24sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(void *)(v2 + 256) = 0LL;
  *(_DWORD *)(v2 + 264) = 2;
  return result;
}

void *sub_100C4ED60(unsigned int *a1, unsigned int a2)
{
  a1[6] = a2;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101879A68);
  }
  __int128 v4 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(unsigned int *, void))(*(void *)a1 + 32LL))(a1, a1[2]);
    *(_DWORD *)std::string buf = 67240448;
    unsigned int v15 = a2;
    __int16 v16 = 1026;
    int v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "FitnessMode, received phone fitness mode update %{public}d, shouldPush, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101879A68);
    }
    uint64_t v7 = qword_1019344D8;
    int v8 = (*(uint64_t (**)(unsigned int *, void))(*(void *)a1 + 32LL))(a1, a1[2]);
    v11[0] = 67240448;
    v11[1] = a2;
    __int16 v12 = 1026;
    int v13 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  0LL,  "FitnessMode, received phone fitness mode update %{public}d, shouldPush, %{public}d",  v11,  14);
    int v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLFitnessModeControllerPhone::feedPhoneFitnessModeUpdate(CLFitnessTrackingNotifier_Type::PhoneFitnessMode)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  if (a2 == 1) {
    return sub_100251C64(a1, a1[2], a1[2] == 1);
  }
  else {
    return (void *)sub_100251EF8(a1);
  }
}

void *sub_100C4EF7C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)a2;
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 48);
  __int128 v7 = *(_OWORD *)(a2 + 64);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 128);
  __int128 v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 176);
  __int128 v13 = *(_OWORD *)(a2 + 192);
  __int128 v14 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 256) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 24sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v14;
  *(_OWORD *)(a1 + 208) = v12;
  if (sub_100BEF698(a2) == 1)
  {
    int v15 = 1;
  }

  else
  {
    int v15 = 2;
  }

  *(_DWORD *)(a1 + 264) = v15;
LABEL_6:
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101879A68);
  }
  __int16 v16 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a2 + 16);
    int v18 = *(unsigned __int8 *)(a2 + 144);
    int v19 = *(_DWORD *)(a1 + 264);
    int v20 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 32LL))(a1, *(unsigned int *)(a1 + 8));
    *(_DWORD *)std::string buf = 134349824;
    uint64_t v38 = v17;
    __int16 v39 = 1026;
    int v40 = v18;
    __int16 v41 = 1026;
    int v42 = v19;
    __int16 v43 = 1026;
    int v44 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "FitnessMode, received workout event, %{public}ld, fitness plus %{public}d, active state, %{public}d, should push, %{public}d",  buf,  0x1Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101879A68);
    }
    uint64_t v22 = qword_1019344D8;
    uint64_t v23 = *(void *)(a2 + 16);
    int v24 = *(unsigned __int8 *)(a2 + 144);
    int v25 = *(_DWORD *)(a1 + 264);
    int v26 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 32LL))(a1, *(unsigned int *)(a1 + 8));
    int v29 = 134349824;
    uint64_t v30 = v23;
    __int16 v31 = 1026;
    int v32 = v24;
    __int16 v33 = 1026;
    int v34 = v25;
    __int16 v35 = 1026;
    int v36 = v26;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  0LL,  "FitnessMode, received workout event, %{public}ld, fitness plus %{public}d, active state, %{public}d, should push, %{public}d",  &v29,  30);
    unint64_t v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLFitnessModeControllerPhone::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  if (*(_BYTE *)(a1 + 176) && *(_DWORD *)(a1 + 264) == 1) {
    return sub_100251C64((void *)a1, *(unsigned int *)(a1 + 8), 0LL);
  }
  else {
    return (void *)sub_100251EF8((void *)a1);
  }
}

BOOL sub_100C4F260(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 12) || a2 != 2 && a2 != 1) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 24) == 1) {
    return 1LL;
  }
  return *(_BYTE *)(a1 + 176) && *(_DWORD *)(a1 + 264) == 1;
}

void sub_100C4F2AC(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100C4F80C(id a1)
{
  v4[0] = @"Authorized";
  v4[1] = @"Authorization";
  v4[2] = @"CorrectiveCompensationEnabled";
  v4[3] = @"SupportedAuthorizationMask";
  qword_10199D2F0 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 4LL);
  v3[0] = @"Authorized";
  v3[1] = @"Authorization";
  _OWORD v3[2] = @"CorrectiveCompensationEnabled";
  v3[3] = @"IncidentalUseMode";
  v3[4] = @"LocationButtonUseMode";
  v3[5] = @"SupportedAuthorizationMask";
  void v3[6] = @"RemoteUsage";
  qword_10199D2F8 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 7LL);
  v1[0] = @"Authorized";
  v1[1] = @"Authorization";
  v2[0] = &__kCFBooleanFalse;
  v2[1] = &off_1018D4328;
  v1[2] = @"CorrectiveCompensationEnabled";
  v1[3] = @"IncidentalUseMode";
  v2[2] = &off_1018D4340;
  v2[3] = &off_1018D4358;
  v1[4] = @"isSystemService";
  v1[5] = @"InUseLevel";
  v2[4] = &__kCFBooleanFalse;
  v2[5] = &off_1018D4340;
  qword_10199D300 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  6LL);
}

void sub_100C5032C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100C507A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100C510A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100C51648( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100C52D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100C52D64(void *a1, void *a2, uint64_t a3)
{
  if (objc_msgSend(a2, "objectForKeyedSubscript:")) {
    return objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", a3), a3);
  }
  id result = [a1 objectForKeyedSubscript:a3];
  if (result) {
    return [a1 removeObjectForKey:a3];
  }
  return result;
}

void sub_100C53CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100C53D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100C54400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100C55EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100C56FC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C5793C(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100C57968(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

  ;
}

uint64_t sub_100C579D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 1sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v4;
  *(_WORD *)(a3 + 18) = 2114;
  *(void *)(a3 + 2sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = result;
  *(_WORD *)(a3 + 28) = 2114;
  *(void *)(a3 + 3sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a2;
  *(_WORD *)(a3 + 38) = v3;
  return result;
}

void sub_100C579F4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100C57A00(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = 0;
  *(_WORD *)(a4 + 8) = 2082;
}

void sub_100C57A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v3;
  *(_WORD *)(a3 + 48) = 2081;
}

id sub_100C57A24()
{
  return [v0 userName];
}

void sub_100C57F18(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100C57F44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24LL))(&v24);
  if (!v26)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }

  std::stringbuf::string_type __p = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v3 = (int *)v24;
  uint64_t v4 = v25;
  if (v24 == v25)
  {
    int v19 = 0LL;
    goto LABEL_36;
  }

  do
  {
    int v5 = *v3;
    if (sub_10099EDC8(*v3))
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101879C10);
      }
      __int128 v6 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v29 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "@WifiChannel, receive channel %{public}d recommendation from 5GHz selector",  buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101879C10);
        }
        v27[0] = 67240192;
        v27[1] = v5;
        LODWORD(v2sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "@WifiChannel, receive channel %{public}d recommendation from 5GHz selector",  v27,  v20);
        __int128 v8 = (uint8_t *)v7;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::optional<CLWifiService_Type::Channels> CLIWifiLocation5GHzChannelSelector::recommendedChannels()",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }
    }

    else
    {
      __int128 v9 = v22;
      if (v22 >= v23)
      {
        __int128 v11 = __p;
        uint64_t v12 = v22 - __p;
        unint64_t v13 = v12 + 1;
        uint64_t v14 = (char *)v23 - (char *)__p;
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          __int16 v16 = (char *)sub_10000956C((uint64_t)&v23, v15);
          __int128 v11 = __p;
          __int128 v9 = v22;
        }

        else
        {
          __int16 v16 = 0LL;
        }

        uint64_t v17 = (int *)&v16[4 * v12];
        *uint64_t v17 = v5;
        __int128 v10 = v17 + 1;
        while (v9 != v11)
        {
          int v18 = *--v9;
          *--uint64_t v17 = v18;
        }

        std::stringbuf::string_type __p = v17;
        uint64_t v23 = (int *)&v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }

      else
      {
        *uint64_t v22 = v5;
        __int128 v10 = v22 + 1;
      }

      uint64_t v22 = v10;
    }

    ++v3;
  }

  while (v3 != v4);
  int v19 = v22;
  if (__p == v22)
  {
LABEL_36:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v19) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  sub_10001B72C((void *)a2, __p, (uint64_t)v22, v22 - __p);
  *(_BYTE *)(a2 + 24) = 1;
  int v19 = __p;
  if (__p) {
LABEL_37:
  }
    operator delete(v19);
LABEL_38:
  if (v26)
  {
    if (v24)
    {
      int v25 = (int *)v24;
      operator delete(v24);
    }
  }

void sub_100C5827C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20)
  {
    if (a17) {
      operator delete(a17);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100C582C4()
{
  return 0LL;
}

uint64_t sub_100C582CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100F4CD74();
  return sub_100F4CDB0(v2, 12, a1);
}

void sub_100C582F4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr, void, uint64_t))(**(void **)(a1 + 8) + 40LL))( &v12,  *(void *)(a1 + 8),  2LL);
  if (v14)
  {
    uint64_t v2 = v12;
    if (v12 == v13) {
      goto LABEL_18;
    }
    sub_100C6E6EC(&v18, &v12);
    sub_100C58608(a1 + 24, (uint64_t)&v18);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }

    sub_100008390((uint64_t)&v18, (void *)v18.__r_.__value_.__l.__size_);
    __int128 v9 = 0LL;
    __int128 v10 = 0LL;
    uint64_t v11 = 0LL;
    sub_10001B72C( &v9,  *(const void **)(a1 + 48),  *(void *)(a1 + 56),  (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101879C10);
    }
    uint64_t v3 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      sub_10099EFA8((unsigned int **)&v9, &v18);
      uint64_t v4 = (v18.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v18 : (std::string *)v18.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "@WifiChannel, time-based 5GHz, query latest ALS channels %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v18, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101879C10);
      }
      uint64_t v5 = qword_101934868;
      sub_10099EFA8((unsigned int **)&v9, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v16 = 136446210;
      uint64_t v17 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v18,  1628LL,  &_mh_execute_header,  v5,  0LL,  "@WifiChannel, time-based 5GHz, query latest ALS channels %{public}s",  &v16,  12);
      __int128 v8 = v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiLocation5GHzChannelTimeBasedSelector::updateAlsQueryTopChannels()",  "%s\n",  (const char *)v8);
      if (v8 != &v18) {
        free(v8);
      }
    }

    if (v9)
    {
      __int128 v10 = v9;
      operator delete(v9);
    }

    if (v14)
    {
      uint64_t v2 = v12;
LABEL_18:
      if (v2)
      {
        unint64_t v13 = v2;
        operator delete(v2);
      }
    }
  }

void sub_100C585A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18)
  {
    if (a15) {
      operator delete(a15);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100C58608(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
  {
    sub_100C5982C(a1, (void *)a2);
    sub_100007664(a1 + 24, (__n128 *)(a2 + 24));
  }

  else
  {
    sub_100C59894((void *)a1, a2);
    *(_BYTE *)(a1 + 48) = 1;
  }

  return a1;
}

uint64_t sub_100C58664(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  sub_100008390(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100C586A0()
{
  return 1LL;
}

void sub_100C586A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v17 = 0LL;
    __uuid_t dst = 0LL;
    uint64_t v19 = 0LL;
    sub_10001B72C( &v17,  *(const void **)(a1 + 48),  *(void *)(a1 + 56),  (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
    uint64_t v3 = sub_100F4CD74();
    sub_100F4CDB0(v3, 12, (uint64_t)&__p);
    if (v16)
    {
      unint64_t v4 = (v15 - (_BYTE *)__p) >> 2;
      if (v4 > ((_BYTE *)__dst - (_BYTE *)v17) >> 2)
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101879C10);
        }
        uint64_t v5 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67240192;
          LODWORD(v23) = v4 - ((unint64_t)((_BYTE *)__dst - (_BYTE *)v17) >> 2);
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "@WifiChannel, time-based 5GHz, fill the extra %{public}d channel(s) from preset",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101879C10);
          }
          int v20 = 67240192;
          LODWORD(v21) = v4 - ((unint64_t)((_BYTE *)__dst - (_BYTE *)v17) >> 2);
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiChannel, time-based 5GHz, fill the extra %{public}d channel(s) from preset",  &v20,  8);
          uint64_t v12 = (uint8_t *)v11;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::optional<CLWifiService_Type::Channels> CLWifiLocation5GHzChannelTimeBasedSelector::recommendedChannelsImpl()",  "%s\n",  v11);
          if (v12 != buf) {
            free(v12);
          }
        }

        sub_10000AEE4((uint64_t)&v17, (uint64_t)__dst, (char *)__p, v15, (v15 - (_BYTE *)__p) >> 2);
      }
    }

    else
    {
      unint64_t v4 = 10LL;
    }

    __int128 v6 = v17;
    __int128 v7 = (char *)__dst;
    if (v4 < ((_BYTE *)__dst - (_BYTE *)v17) >> 2)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101879C10);
      }
      __int128 v8 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349056;
        unint64_t v23 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "@WifiChannel, time-based 5GHz, trim channel recommendation down to %{public}lu candidates",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101879C10);
        }
        int v20 = 134349056;
        unint64_t v21 = v4;
        LODWORD(v13) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiChannel, time-based 5GHz, trim channel recommendation down to %{public}lu candidates",  &v20,  v13);
        __int128 v10 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::optional<CLWifiService_Type::Channels> CLWifiLocation5GHzChannelTimeBasedSelector::recommendedChannelsImpl()",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      __int128 v6 = v17;
      __int128 v7 = (char *)v17 + 4 * v4;
      if (v7 != __dst) {
        __uuid_t dst = (char *)v17 + 4 * v4;
      }
    }

    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v19;
    __uuid_t dst = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v17 = 0LL;
    *(_BYTE *)(a2 + 24) = 1;
    if (v16 && __p)
    {
      unint64_t v15 = (char *)__p;
      operator delete(__p);
      if (v17)
      {
        __uuid_t dst = v17;
        operator delete(v17);
      }
    }
  }

  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }

void sub_100C58AB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17)
{
  if (a15 && __p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C58B00(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72)) {
    BOOL v2 = *(_BYTE *)(a2 + 48) == 12;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0LL;
  }
  int v25 = 0LL;
  char v26 = 0LL;
  unint64_t v27 = 0LL;
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (!v5) {
    goto LABEL_33;
  }
  __int128 v6 = (uint64_t *)(a1 + 32);
  do
  {
    *(void *)std::string buf = v5[2];
    if (*((char *)v5 + 47) < 0)
    {
      sub_1010DD48C(&__p, (void *)v5[3], v5[4]);
    }

    else
    {
      __int128 __p = *(_OWORD *)(v5 + 3);
      uint64_t v30 = v5[5];
    }

    __int128 v7 = *((_OWORD *)v5 + 4);
    __int128 v31 = *((_OWORD *)v5 + 3);
    __int128 v32 = v7;
    __int128 v33 = *((_OWORD *)v5 + 5);
    uint64_t v34 = v5[12];
    uint64_t v8 = *v6;
    if (*v6)
    {
      uint64_t v9 = a1 + 32;
      do
      {
        int v10 = *(_DWORD *)(v8 + 28);
        BOOL v11 = v10 < SDWORD2(v31);
        if (v10 >= SDWORD2(v31)) {
          uint64_t v12 = (uint64_t *)v8;
        }
        else {
          uint64_t v12 = (uint64_t *)(v8 + 8);
        }
        if (!v11) {
          uint64_t v9 = v8;
        }
        uint64_t v8 = *v12;
      }

      while (*v12);
      if ((uint64_t *)v9 != v6 && *(_DWORD *)(v9 + 28) <= SDWORD2(v31))
      {
        uint64_t v13 = v26;
        if ((unint64_t)v26 >= v27)
        {
          uint64_t v16 = sub_100023888((uint64_t *)&v25, (uint64_t)buf);
        }

        else
        {
          *char v26 = *(void *)buf;
          char v14 = v13 + 1;
          if (SHIBYTE(v30) < 0)
          {
            sub_1010DD48C(v14, (void *)__p, *((unint64_t *)&__p + 1));
          }

          else
          {
            __int128 v15 = __p;
            v13[3] = v30;
            *(_OWORD *)char v14 = v15;
          }

          __int128 v17 = v31;
          __int128 v18 = v32;
          __int128 v19 = v33;
          v13[10] = v34;
          *((_OWORD *)v13 + 3) = v18;
          *((_OWORD *)v13 + 4) = v19;
          *((_OWORD *)v13 + 2) = v17;
          uint64_t v16 = (uint64_t)(v13 + 11);
        }

        char v26 = (void *)v16;
      }
    }

    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v5 = (uint64_t *)*v5;
  }

  while (v5);
  if (v25 == v26)
  {
LABEL_33:
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101879C10);
    }
    int v20 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "@WifiChannel, time-based 5GHz, reset channel selector due to no APs",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101879C10);
      }
      __int16 v24 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WifiChannel, time-based 5GHz, reset channel selector due to no APs",  &v24,  2);
      unint64_t v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiLocation5GHzChannelTimeBasedSelector::resetTopChannelsBasedOnScanResult(const CL::Wifi1::Events::Wifi::Scan &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    sub_100C58E60(a1 + 24);
    uint64_t v3 = 1LL;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  *(void *)std::string buf = &v25;
  sub_100023498((void ***)buf);
  return v3;
}

void sub_100C58E18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  a15 = &a12;
  sub_100023498((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_100C58E60(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    BOOL v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }

    sub_100008390(a1, *(void **)(a1 + 8));
    *(_BYTE *)(a1 + 48) = 0;
  }

uint64_t sub_100C58EA4(uint64_t result, uint64_t *a2)
{
  *(void *)id result = off_101879B78;
  *(void *)(result + 8) = &off_101879B18;
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)(result + 16) = off_101879B48;
  *(void *)(result + 24) = v3;
  *(void *)(result + 32) = v2;
  if (v2)
  {
    unint64_t v4 = (unint64_t *)(v2 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(_BYTE *)(result + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(void *)(result + 112) = 0LL;
  *(void *)(result + 104) = 0LL;
  *(void *)(result + 96) = result + 104;
  return result;
}

void sub_100C58F00(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v26 = a2;
  if (a2 != 12)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return;
  }

  sub_100C57F44(a1 + 16, (uint64_t)&v23);
  if (v25)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101879C10);
    }
    unint64_t v5 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      if (!v25) {
        sub_100036CD8();
      }
      sub_10099EFA8((unsigned int **)&v23, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "@WifiChannel, apply, time-based 5GHz channel selector overrides, %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101879C10);
      }
      if (!v25) {
        sub_100036CD8();
      }
      uint64_t v15 = qword_101934868;
      sub_10099EFA8((unsigned int **)&v23, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v28 = 136446210;
      int v29 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v15,  1LL,  "@WifiChannel, apply, time-based 5GHz channel selector overrides, %{public}s",  &v28,  12);
      __int128 v18 = v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::optional<CLWifiLocationChannelSelectionService_Type::ChannelRecommendation> CLWifiLocation5GHzChann elSelectionService::recommendedChannels(CLWifiService_Type::ScanType)",  "%s\n",  (const char *)v18);
      if (v18 != &__p) {
        free(v18);
      }
    }

    if (!v25) {
      sub_100036CD8();
    }
    __p.__r_.__value_.__s.__data_[0] = 1;
    __int128 v31 = 0LL;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    sub_10001B72C(&__p.__r_.__value_.__l.__size_, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
    __int128 v7 = (uint64_t **)(a1 + 96);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    uint64_t v8 = sub_100C598F0(v7, &v26, (uint64_t)&unk_1012CF090, &buf.__r_.__value_.__l.__data_);
    *((_BYTE *)v8 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = __p.__r_.__value_.__s.__data_[0];
    uint64_t v9 = v8[6];
    if (v9)
    {
      v8[7] = v9;
      operator delete(v9);
      void v8[6] = 0LL;
      v8[7] = 0LL;
      v8[8] = 0LL;
    }

void sub_100C59530( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26)
{
  if (a15)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t **sub_100C595AC@<X0>(uint64_t **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v12 = a2;
  unint64_t v5 = (uint64_t *)(result + 13);
  unint64_t v4 = result[13];
  if (!v4) {
    goto LABEL_11;
  }
  result += 12;
  __int128 v6 = v5;
  do
  {
    int v7 = *((char *)v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t **)v4;
    }
    else {
      uint64_t v9 = (uint64_t **)(v4 + 1);
    }
    if (!v8) {
      __int128 v6 = v4;
    }
    unint64_t v4 = *v9;
  }

  while (*v9);
  if (v6 != v5 && *((char *)v6 + 32) <= a2)
  {
    uint64_t v13 = &v12;
    BOOL v11 = sub_100C598F0(result, &v12, (uint64_t)&unk_1012CF090, &v13);
    *(_BYTE *)a3 = *((_BYTE *)v11 + 40);
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 8) = 0LL;
    id result = (uint64_t **)sub_10001B72C( (void *)(a3 + 8),  v11[6],  (uint64_t)v11[7],  ((char *)v11[7] - (char *)v11[6]) >> 2);
    char v10 = 1;
  }

  else
  {
LABEL_11:
    char v10 = 0;
    *(_BYTE *)a3 = 0;
  }

  *(_BYTE *)(a3 + 32) = v10;
  return result;
}

void sub_100C59674(uint64_t a1)
{
}

uint64_t sub_100C5967C(uint64_t a1, uint64_t a2)
{
  return sub_100C58B00(a1 + 16, a2);
}

void *sub_100C59684(void *a1)
{
  *a1 = off_101879B48;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100C59748((uint64_t)(a1 + 3));
  sub_10000AE14(v2);
  return a1;
}

void sub_100C596C4(void *a1)
{
  *a1 = off_101879B48;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_100C59748((uint64_t)(a1 + 3));
  sub_10000AE14(v2);
  operator delete(a1);
}

void sub_100C59708(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C5978C(a1);
  operator delete(v1);
}

void sub_100C5971C(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100C59748(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }

    sub_100008390(a1, *(void **)(a1 + 8));
  }

  return a1;
}

uint64_t sub_100C5978C(uint64_t a1)
{
  *(void *)a1 = off_101879B78;
  sub_100C597DC(a1 + 96, *(void **)(a1 + 104));
  *(void *)(a1 + 16) = off_101879B48;
  sub_100C59748(a1 + 40);
  sub_10000AE14(a1 + 24);
  return a1;
}

void sub_100C597DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100C597DC(a1, *a2);
    sub_100C597DC(a1, a2[1]);
    unint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }

    operator delete(a2);
  }

void sub_100C5982C(uint64_t a1, void *a2)
{
  unint64_t v4 = (void *)(a1 + 8);
  sub_100008390(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  unint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    *(void *)a1 = v4;
  }

__n128 sub_100C59894(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v2 = (void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  a1[1] = v3;
  unint64_t v4 = a1 + 1;
  uint64_t v5 = *(void *)(a2 + 16);
  a1[2] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)a2 = v2;
    *uint64_t v2 = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  else
  {
    *a1 = v4;
  }

  a1[3] = 0LL;
  a1[4] = 0LL;
  a1[5] = 0LL;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 3) = result;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  return result;
}

uint64_t **sub_100C598F0(uint64_t **a1, char *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((char *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x48uLL);
    v11[32] = **a4;
    v11[40] = 0;
    *((void *)v11 + 7) = 0LL;
    *((void *)v11 + 8) = 0LL;
    *((void *)v11 + 6) = 0LL;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

void sub_100C599B8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100C59A54(_Unwind_Exception *a1)
{
}

void sub_100C59A6C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100C59AF8(_Unwind_Exception *a1)
{
}

BOOL sub_100C59CD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v8 = v7 + 1;
        if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v11 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7LL && v13 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0LL;
        }

        uint64_t v16 = &OBJC_IVAR___CLStreamedLocationInternal__rawCoordinateLatitude;
LABEL_31:
        *(void *)(a1 + *v16) = v14;
        goto LABEL_32;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_32:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    *(_BYTE *)(a1 + 24) |= 2u;
    unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v15 <= 0xFFFFFFFFFFFFFFF7LL && v15 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
    }

    else
    {
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      uint64_t v14 = 0LL;
    }

    uint64_t v16 = &OBJC_IVAR___CLStreamedLocationInternal__rawCoordinateLongitude;
    goto LABEL_31;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100C5A2BC(uint64_t a1)
{
  *(_BYTE *)(a1 + 64) = 0;
  uint64_t v2 = (BOOL *)(a1 + 64);
  *(void *)(a1 + 56) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v3 = sub_1006E27E8();
  sub_100413284(v3, buf);
  sub_1002A6F64(*(uint64_t *)buf, "MotionLoggerLogRunningPower", v2);
  char v4 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unsigned int v5 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  if (qword_1019346F0 != -1) {
    dispatch_once(&qword_1019346F0, &stru_101879C30);
  }
  uint64_t v7 = (os_log_s *)qword_1019346F8;
  if (os_log_type_enabled((os_log_t)qword_1019346F8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = *v2;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = "MotionLoggerLogRunningPower";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Init: %{public}s=%d", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346F0 != -1) {
      dispatch_once(&qword_1019346F0, &stru_101879C30);
    }
    BOOL v10 = *v2;
    int v13 = 136446466;
    uint64_t v14 = "MotionLoggerLogRunningPower";
    __int16 v15 = 1024;
    BOOL v16 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  0LL,  "Init: %{public}s=%d",  &v13,  18);
    char v12 = (char *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLPowerEstimator::CLPowerEstimator()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return a1;
}

void sub_100C5A50C(_Unwind_Exception *a1)
{
}

void sub_100C5A53C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 124) = 0;
  *(_WORD *)(a3 + 128) = 0;
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(_BYTE *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 32) = 0LL;
  *(_BYTE *)(a3 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
  *(void *)(a3 + 48) = 0LL;
  *(void *)(a3 + 56) = 0LL;
  *(_BYTE *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 12sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
  *(_DWORD *)(a3 + 132) = 1000;
  sub_1004F2598();
  if (sub_1001B9A1C())
  {
    uint64_t v8 = 2LL;
    if (*(_BYTE *)(a2 + 352))
    {
      if (sub_100A17934(*(void *)(a2 + 344))) {
        uint64_t v8 = 0LL;
      }
      else {
        uint64_t v8 = 2LL;
      }
    }

    sub_100C5AA54(a1, a2, (uint64_t)buf, v6, v7);
    __int128 v9 = *(_OWORD *)&v106[16];
    *(_OWORD *)(a3 + 96) = *(_OWORD *)v106;
    *(_OWORD *)(a3 + 112) = v9;
    *(void *)(a3 + 128) = v107;
    __int128 v10 = v104;
    *(_OWORD *)(a3 + 32) = v103;
    *(_OWORD *)(a3 + 48) = v10;
    __int128 v11 = *(_OWORD *)&v105[16];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v105;
    *(_OWORD *)(a3 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v11;
    __int128 v12 = *(_OWORD *)&buf[16];
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_OWORD *)(a3 + 16) = v12;
    if (qword_1019346F0 != -1) {
      dispatch_once(&qword_1019346F0, &stru_101879C30);
    }
    int v13 = (os_log_s *)qword_1019346F8;
    if (os_log_type_enabled((os_log_t)qword_1019346F8, (os_log_type_t)v8))
    {
      uint64_t v15 = *(void *)a3;
      uint64_t v14 = *(void *)(a3 + 8);
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t v17 = *(void *)(a3 + 32);
      int v18 = *(unsigned __int8 *)(a3 + 40);
      uint64_t v19 = *(void *)(a3 + 48);
      int v20 = *(_DWORD *)(a3 + 56);
      int v21 = *(_DWORD *)(a3 + 60);
      int v22 = *(unsigned __int8 *)(a3 + 64);
      uint64_t v23 = *(void *)(a3 + 72);
      uint64_t v24 = *(void *)(a3 + 80);
      uint64_t v25 = *(void *)(a3 + 88);
      uint64_t v26 = *(void *)(a3 + 96);
      uint64_t v27 = *(void *)(a3 + 104);
      uint64_t v28 = *(void *)(a3 + 112);
      int v29 = *(unsigned __int8 *)(a3 + 16);
      int v30 = *(unsigned __int8 *)(a3 + 120);
      int v31 = *(_DWORD *)(a3 + 124);
      int v32 = *(unsigned __int8 *)(a3 + 129);
      int v33 = *(unsigned __int8 *)(a3 + 128);
      int v34 = *(_DWORD *)(a3 + 132);
      *(_DWORD *)std::string buf = 134354176;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&_BYTE buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = v16;
      LOWORD(v103) = 2048;
      *(void *)((char *)&v103 + 2) = v17;
      WORD5(v103) = 1026;
      HIDWORD(v103) = v18;
      LOWORD(v104) = 2048;
      *(void *)((char *)&v104 + 2) = v19;
      WORD5(v104) = 1026;
      HIDWORD(v104) = v20;
      *(_WORD *)uint64_t v105 = 1026;
      *(_DWORD *)&v105[2] = v21;
      *(_WORD *)&v105[6] = 1026;
      *(_DWORD *)&v105[8] = v22;
      *(_WORD *)&v105[12] = 2050;
      *(void *)&v105[14] = v23;
      *(_WORD *)&v105[22] = 2050;
      *(void *)&v105[24] = v24;
      *(_WORD *)unint64_t v106 = 2050;
      *(void *)&v106[2] = v25;
      *(_WORD *)&v106[10] = 2050;
      *(void *)&v106[12] = v26;
      *(_WORD *)&v106[20] = 2050;
      *(void *)&v106[22] = v27;
      *(_WORD *)&v106[30] = 2050;
      uint64_t v107 = v28;
      __int16 v108 = 1026;
      int v109 = v29;
      __int16 v110 = 1026;
      int v111 = v30;
      __int16 v112 = 1026;
      int v113 = v31;
      __int16 v114 = 1026;
      int v115 = v32;
      __int16 v116 = 1026;
      int v117 = v33;
      __int16 v118 = 1026;
      int v119 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  (os_log_type_t)v8,  "RunningPower,startTime,%{public}.2f,powerWattage,%.2f,userWeight,%.2f,userHeight,%.2f,isWeightSet,%{public}d,wor krateMETs,%.2f,activityTypeWithoutOverride,%{public}d,activityType,%{public}d,isWorkoutSelected,%{public}d,curre ntPace,%{public}.2f,currentCadence,%{public}.2f,horizSpeed,%{public}.3f,verticalSpeed,%{public}.3f,grade,%{publi c}.2f,eta,%{public}.2f,isValid,%{public}d,isGradeOnsetEscalated,%{public}d,gradeOnsetCounter,%{public}d,isRunnin g,%{public}d,isArmConstrainedStateValid,%{public}d,elevationSource,%{public}d",  buf,  0xACu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346F0 != -1) {
        dispatch_once(&qword_1019346F0, &stru_101879C30);
      }
      uint64_t v40 = *(void *)a3;
      uint64_t v39 = *(void *)(a3 + 8);
      uint64_t v41 = *(void *)(a3 + 24);
      uint64_t v42 = *(void *)(a3 + 32);
      int v43 = *(unsigned __int8 *)(a3 + 40);
      uint64_t v44 = *(void *)(a3 + 48);
      int v45 = *(_DWORD *)(a3 + 56);
      int v46 = *(_DWORD *)(a3 + 60);
      int v47 = *(unsigned __int8 *)(a3 + 64);
      uint64_t v49 = *(void *)(a3 + 72);
      uint64_t v48 = *(void *)(a3 + 80);
      uint64_t v50 = *(void *)(a3 + 88);
      uint64_t v51 = *(void *)(a3 + 96);
      uint64_t v52 = *(void *)(a3 + 104);
      uint64_t v53 = *(void *)(a3 + 112);
      int v54 = *(unsigned __int8 *)(a3 + 16);
      int v55 = *(unsigned __int8 *)(a3 + 120);
      int v56 = *(_DWORD *)(a3 + 124);
      int v57 = *(unsigned __int8 *)(a3 + 129);
      int v58 = *(unsigned __int8 *)(a3 + 128);
      int v59 = *(_DWORD *)(a3 + 132);
      *(_DWORD *)uint64_t v61 = 134354176;
      *(void *)&v61[4] = v39;
      __int16 v62 = 2048;
      uint64_t v63 = v40;
      __int16 v64 = 2048;
      uint64_t v65 = v41;
      __int16 v66 = 2048;
      uint64_t v67 = v42;
      __int16 v68 = 1026;
      int v69 = v43;
      __int16 v70 = 2048;
      uint64_t v71 = v44;
      __int16 v72 = 1026;
      int v73 = v45;
      __int16 v74 = 1026;
      int v75 = v46;
      __int16 v76 = 1026;
      int v77 = v47;
      __int16 v78 = 2050;
      uint64_t v79 = v49;
      __int16 v80 = 2050;
      uint64_t v81 = v48;
      __int16 v82 = 2050;
      uint64_t v83 = v50;
      __int16 v84 = 2050;
      uint64_t v85 = v51;
      __int16 v86 = 2050;
      uint64_t v87 = v52;
      __int16 v88 = 2050;
      uint64_t v89 = v53;
      __int16 v90 = 1026;
      int v91 = v54;
      __int16 v92 = 1026;
      int v93 = v55;
      __int16 v94 = 1026;
      int v95 = v56;
      __int16 v96 = 1026;
      int v97 = v57;
      __int16 v98 = 1026;
      int v99 = v58;
      __int16 v100 = 1026;
      int v101 = v59;
      uint64_t v60 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  v8,  "RunningPower,startTime,%{public}.2f,powerWattage,%.2f,userWeight,%.2f,userHeight,%.2f,isWeightSet, %{public}d,workrateMETs,%.2f,activityTypeWithoutOverride,%{public}d,activityType,%{public}d,isWork outSelected,%{public}d,currentPace,%{public}.2f,currentCadence,%{public}.2f,horizSpeed,%{public}.3 f,verticalSpeed,%{public}.3f,grade,%{public}.2f,eta,%{public}.2f,isValid,%{public}d,isGradeOnsetEs calated,%{public}d,gradeOnsetCounter,%{public}d,isRunning,%{public}d,isArmConstrainedStateValid,%{ public}d,elevationSource,%{public}d",  v61,  172);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLPower::ModelOutput CLPowerEstimator::computeAndLogPower(const CLNatalieModelInput &)",  "%s\n",  v60);
      if (v60 != buf) {
        free(v60);
      }
    }

    sub_1004494EC(a3, (uint64_t)buf);
    if (*(_BYTE *)(a1 + 64))
    {
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_101879C50);
      }
      uint64_t v35 = qword_1019A1D08;
      if (qword_1019A1D08)
      {
        int v36 = operator new(0x88uLL);
        *(void *)uint64_t v61 = sub_1011ADB44((uint64_t)v36, (uint64_t)buf);
        double Current = CFAbsoluteTimeGetCurrent();
        sub_100B50DB0(v35, (uint64_t *)v61, Current);
        uint64_t v38 = *(void *)v61;
        *(void *)uint64_t v61 = 0LL;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
        }
      }
    }

    PB::Base::~Base((PB::Base *)buf);
  }

void sub_100C5AA18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_100C5AA54@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D1>, unint64_t a5@<D2>)
{
  double v67 = 0.0;
  double v68 = 0.0;
  *(_DWORD *)(a3 + 124) = 0;
  *(_WORD *)(a3 + 128) = 0;
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(_BYTE *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0LL;
  *(void *)(a3 + 32) = 0LL;
  *(_BYTE *)(a3 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
  *(void *)(a3 + 48) = 0LL;
  *(void *)(a3 + 56) = 0LL;
  *(_BYTE *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 12sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
  *(_DWORD *)(a3 + 132) = 1000;
  if (*(void *)(result + 56) != 1LL)
  {
    uint64_t v7 = result;
    int v56 = *(_DWORD *)(a2 + 848);
    double v9 = *(double *)(a2 + 448);
    double v8 = *(double *)(a2 + 456);
    float v10 = *(double *)(a2 + 840);
    float v11 = v10 * 2.2369;
    double v12 = v11;
    LODWORD(a4) = *(_DWORD *)(a2 + 824);
    LODWORD(a5) = *(_DWORD *)(a2 + 828);
    double v55 = (double)a4 - (double)a5;
    if (v9 > 2.23693991 || v9 <= 0.140000001) {
      double v14 = 0.0;
    }
    else {
      double v14 = 2.23693991 / v9;
    }
    float v15 = v14;
    sub_100A27768(1, v11, v15);
    double v17 = v16;
    sub_100A27740(a2, (uint64_t)v64);
    sub_10020955C(a2, (uint64_t)v62);
    double v18 = *(double *)(a2 + 128);
    int v19 = *(_DWORD *)(a2 + 832);
    int v20 = *(unsigned __int8 *)(a2 + 528);
    uint64_t v21 = *(void *)(a2 + 344);
    *(double *)__int16 v66 = v9;
    *(double *)&v66[1] = v8;
    *(double *)&v66[2] = v14;
    *(double *)&v66[3] = v12;
    double v22 = *(float *)(a2 + 1372);
    double v69 = v17;
    double v70 = v22;
    int8x16_t v58 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a2 + 1360));
    int8x16_t v71 = vextq_s8(v58, v58, 8uLL);
    double v59 = v18;
    double v72 = v18;
    unsigned int v23 = v20 & 0xFFFFFFFD;
    BOOL v24 = (v20 & 0xFFFFFFFD) != 1;
    BOOL v25 = sub_100A17934(v21);
    double v57 = v8;
    int v26 = sub_100A177FC(v8, v9, *(double *)v58.i64, v17);
    char v27 = v26;
    if (v26)
    {
      double v68 = v65;
      float v28 = v14;
      float v29 = sub_100A27750(v28);
    }

    else
    {
      double v68 = v63;
      float v30 = v14;
      float v29 = sub_100209568(v30);
    }

    double v67 = v29;
    BOOL v31 = sub_100AF8F04(v9 * 0.7, *(double *)v58.i64);
    sub_100C5AFF8(v7, v59);
    uint64_t v32 = *(void *)(v7 + 40);
    double v33 = 0.0;
    if (v32)
    {
      unint64_t v34 = v32 + *(void *)(v7 + 32) - 1;
      uint64_t v35 = *(void *)(*(void *)(v7 + 8) + 8 * (v34 / 0x49));
      unint64_t v36 = v34 % 0x49;
      double v37 = v59 - *(double *)(v35 + 56 * v36);
      double v38 = v8;
      if (v37 > 0.0) {
        double v33 = (v55 / 100.0 - *(double *)(v35 + 56 * v36 + 16)) / v37;
      }
    }

    else
    {
      double v38 = v8;
    }

    double v39 = sub_100A178C4(v14, v12);
    double v40 = sub_100A178C4(v14, v33 * 2.23693991);
    *(double *)uint64_t v61 = v59;
    *(double *)&v61[1] = v14;
    *(double *)&v61[2] = v55 / 100.0;
    *(double *)&v61[3] = v33;
    *(double *)&v61[4] = v39;
    *(double *)&v61[5] = v40;
    *(double *)&v61[6] = v38;
    sub_100C5B1A0(v7, (uint64_t)v61, v19);
    if (v25)
    {
      sub_100F295CC(&buf, v66, *(_DWORD *)(v7 + 48) != 0);
      __int128 v41 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v41;
      *(void *)(a3 + 128) = v83;
      __int128 v42 = v78;
      *(_OWORD *)(a3 + 32) = v77;
      *(_OWORD *)(a3 + 48) = v42;
      __int128 v43 = v80;
      *(_OWORD *)(a3 + 64) = v79;
      *(_OWORD *)(a3 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v43;
      __int128 v44 = v76;
      *(_OWORD *)a3 = buf;
      *(_OWORD *)(a3 + 16) = v44;
      double v45 = *(double *)(a3 + 104);
      *(_BYTE *)(a3 + 16) = 1;
      if (v45 <= 35.0)
      {
        if (v23 == 1)
        {
          int v47 = 0;
          *(_BYTE *)(a3 + 16) = 0;
        }

        else
        {
          int v47 = 1;
        }
      }

      else
      {
        *(_BYTE *)(a3 + 16) = 0;
        if (qword_1019346F0 != -1) {
          dispatch_once(&qword_1019346F0, &stru_101879C30);
        }
        int v46 = (os_log_s *)qword_1019346F8;
        if (os_log_type_enabled((os_log_t)qword_1019346F8, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(double *)((char *)&buf + 4) = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "Rejected RunningPower due to invalid grade=%.1f ",  (uint8_t *)&buf,  0xCu);
        }

        int v47 = 0;
        if (sub_1002921D0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1019346F0 != -1) {
            dispatch_once(&qword_1019346F0, &stru_101879C30);
          }
          int v73 = 134217984;
          double v74 = v45;
          uint64_t v48 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  16LL,  "Rejected RunningPower due to invalid grade=%.1f ",  COERCE_DOUBLE(&v73));
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLPower::ModelOutput CLPowerEstimator::calculatePower(const CLNatalieModelInput &)",  "%s\n",  v48);
          int v47 = 0;
          double v38 = v57;
        }
      }
    }

    else
    {
      *(_BYTE *)(a3 + 16) = 0;
      sub_100F29920((uint64_t)v66, (uint64_t)&buf);
      __int128 v49 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v49;
      *(void *)(a3 + 128) = v83;
      __int128 v50 = v78;
      *(_OWORD *)(a3 + 32) = v77;
      *(_OWORD *)(a3 + 48) = v50;
      __int128 v51 = v80;
      *(_OWORD *)(a3 + 64) = v79;
      *(_OWORD *)(a3 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v51;
      __int128 v52 = v76;
      *(_OWORD *)a3 = buf;
      *(_OWORD *)(a3 + 16) = v52;
      int v47 = *(unsigned __int8 *)(a3 + 16);
    }

    *(double *)uint64_t v60 = v59;
    *(double *)&v60[1] = v14;
    *(double *)&v60[2] = v55 / 100.0;
    *(double *)&v60[3] = v33;
    *(double *)&v60[4] = v39;
    *(double *)&v60[5] = v40;
    *(double *)&v60[6] = v38;
    sub_100C5B258(v7, (uint64_t)v60, v31 && v25, v47 != 0);
    int v53 = *(_DWORD *)(v7 + 48);
    *(_BYTE *)(a3 + 12sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v53 != 0;
    *(_DWORD *)(a3 + 124) = v53;
    *(_BYTE *)(a3 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *(_BYTE *)(a2 + 1410);
    int v54 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(a2 + 288);
    *(_DWORD *)(a3 + 6sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v54;
    *(_BYTE *)(a3 + 64) = v25;
    *(_BYTE *)(a3 + 129) = v27;
    *(_BYTE *)(a3 + 128) = v24;
    if (v47) {
      __n128 result = sub_100C5B2E0((double *)a3);
    }
    else {
      __n128 result = 0LL;
    }
    *(_BYTE *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 132) = v56;
  }

  return result;
}

unint64_t sub_100C5AFF8(uint64_t a1, double a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (void *)(v4 + 8 * (v3 / 0x49));
  if (v5 == v4)
  {
    unint64_t v7 = 0LL;
    double v8 = (void *)(a1 + 40);
  }

  else
  {
    unint64_t v7 = *(void *)(v4 + 8 * (v3 / 0x49)) + 56 * (v3 % 0x49);
    double v8 = (void *)(a1 + 40);
    unint64_t v9 = *(void *)(v4 + 8 * ((*(void *)(a1 + 40) + v3) / 0x49)) + 56 * ((*(void *)(a1 + 40) + v3) % 0x49);
    if (v7 != v9)
    {
      while (a2 - *(double *)v7 <= 20.0)
      {
        v7 += 56LL;
        if (v7 - *v6 == 4088)
        {
          unint64_t v10 = v6[1];
          ++v6;
          unint64_t v7 = v10;
        }

        if (v7 == v9) {
          goto LABEL_17;
        }
      }
    }

    if (v7 == v9)
    {
LABEL_17:
      unint64_t v7 = *(void *)(v4 + 8 * ((*(void *)(a1 + 40) + v3) / 0x49)) + 56 * ((*(void *)(a1 + 40) + v3) % 0x49);
    }

    else
    {
      unint64_t v11 = v7;
      double v12 = v6;
      while (1)
      {
        v11 += 56LL;
        if (v11 - *v12 == 4088)
        {
          unint64_t v13 = v12[1];
          ++v12;
          unint64_t v11 = v13;
        }

        if (v11 == v9) {
          break;
        }
        if (a2 - *(double *)v11 <= 20.0)
        {
          __int128 v14 = *(_OWORD *)v11;
          __int128 v15 = *(_OWORD *)(v11 + 16);
          __int128 v16 = *(_OWORD *)(v11 + 32);
          *(void *)(v7 + 48) = *(void *)(v11 + 48);
          *(_OWORD *)(v7 + 16) = v15;
          *(_OWORD *)(v7 + 32) = v16;
          *(_OWORD *)unint64_t v7 = v14;
          v7 += 56LL;
          if (v7 - *v6 == 4088)
          {
            unint64_t v17 = v6[1];
            ++v6;
            unint64_t v7 = v17;
          }
        }
      }

      unint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
    }
  }

  unint64_t v18 = v3 + *v8;
  int v19 = (void *)(v4 + 8 * (v18 / 0x49));
  if (v5 == v4) {
    int v20 = 0LL;
  }
  else {
    int v20 = (char *)(*v19 + 56 * (v18 % 0x49));
  }
  unint64_t result = sub_100C5B790((void *)a1, v6, (char *)v7, v19, v20);
  if (!*(void *)(a1 + 40)) {
    *(_DWORD *)(a1 + 48) = 0;
  }
  return result;
}

uint64_t sub_100C5B1A0(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  v12[2] = *(_OWORD *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t result = sub_100C5BA38(a1, (double *)v12, a3, (void *)a1);
  if (a3 == 1 || (double v8 = *(double *)(a2 + 32), v8 < 2.0) && *(double *)(a2 + 40) < 2.0)
  {
    *(_DWORD *)(a1 + 48) = 0;
    return result;
  }

  int v9 = *(_DWORD *)(a1 + 48);
  BOOL v10 = v8 < 0.0 || v8 > 8.0;
  if (v10 || ((result ^ 1) & 1) != 0)
  {
    if (!v9) {
      return result;
    }
    goto LABEL_13;
  }

  if (v9)
  {
LABEL_13:
    int v11 = v9 - 1;
    goto LABEL_14;
  }

  int v11 = 10;
LABEL_14:
  *(_DWORD *)(a1 + 48) = v11;
  return result;
}

uint64_t sub_100C5B258(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4 = (void *)result;
  if (*(double *)(a2 + 32) >= 35.0 || a3 == 0)
  {
    if ((a4 & 1) == 0 && *(_DWORD *)(result + 48) == 10) {
      *(_DWORD *)(result + 48) = 0;
    }
  }

  else
  {
    unint64_t v7 = *(void *)(result + 40);
    if (v7 >= 4)
    {
      ++*(void *)(result + 32);
      *(void *)(result + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v7 - 1;
      sub_10079E85C(result, 1);
    }

    return sub_100C5C0B4(v4, (__int128 *)a2);
  }

  return result;
}

BOOL sub_100C5B2E0(double *a1)
{
  double v2 = a1[3];
  if (v2 >= 30.0)
  {
    double v7 = *a1 / v2;
    if (v7 >= 0.66)
    {
      if (v7 <= 15.37) {
        return 1LL;
      }
      if (qword_1019346F0 != -1) {
        dispatch_once(&qword_1019346F0, &stru_101879C30);
      }
      __int128 v14 = (os_log_s *)qword_1019346F8;
      if (os_log_type_enabled((os_log_t)qword_1019346F8, OS_LOG_TYPE_ERROR))
      {
        double v15 = a1[3];
        double v16 = *a1;
        *(_DWORD *)__int128 buf = 134218496;
        double v23 = v15;
        __int16 v24 = 2050;
        double v25 = v16;
        __int16 v26 = 2048;
        double v27 = v15 * 0.66;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Rejected RunningPower due to range check, unreasonably high Watts: weight=%.1f,powerWattage=%{public}.2f,maxim um allowed powerWattage=%.2f",  buf,  0x20u);
      }

      BOOL v17 = sub_1002921D0(115, 0);
      BOOL result = 0LL;
      if (v17)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346F0 != -1) {
          dispatch_once(&qword_1019346F0, &stru_101879C30);
        }
        double v18 = a1[3];
        double v19 = *a1;
        *(_DWORD *)int v20 = 134218496;
        *(double *)&v20[4] = v18;
        *(_WORD *)&v20[12] = 2050;
        *(double *)&v20[14] = v19;
        *(_WORD *)&v20[22] = 2048;
        double v21 = v18 * 0.66;
        uint64_t v13 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  16LL,  "Rejected RunningPower due to range check, unreasonably high Watts: weight=%.1f,powerWattage=% {public}.2f,maximum allowed powerWattage=%.2f",  v20,  32);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLPowerEstimator::rangeCheck(const CLPower::ModelOutput &)",  "%s\n");
        goto LABEL_20;
      }
    }

    else
    {
      if (qword_1019346F0 != -1) {
        dispatch_once(&qword_1019346F0, &stru_101879C30);
      }
      double v8 = (os_log_s *)qword_1019346F8;
      if (os_log_type_enabled((os_log_t)qword_1019346F8, OS_LOG_TYPE_INFO))
      {
        double v9 = a1[3];
        double v10 = *a1;
        *(_DWORD *)__int128 buf = 134218496;
        double v23 = v9;
        __int16 v24 = 2050;
        double v25 = v10;
        __int16 v26 = 2048;
        double v27 = v9 * 0.66;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Rejected RunningPower due to range check, low Watts: weight=%.1f,powerWattage=%{public}.2f,minimum required powerWattage=%.2f",  buf,  0x20u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346F0 != -1) {
          dispatch_once(&qword_1019346F0, &stru_101879C30);
        }
        double v11 = a1[3];
        double v12 = *a1;
        *(_DWORD *)int v20 = 134218496;
        *(double *)&v20[4] = v11;
        *(_WORD *)&v20[12] = 2050;
        *(double *)&v20[14] = v12;
        *(_WORD *)&v20[22] = 2048;
        uint64_t v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  1LL,  "Rejected RunningPower due to range check, low Watts: weight=%.1f,powerWattage=%{public}.2f,minimum requir ed powerWattage=%.2f",  v20,  32,  *(_OWORD *)v20,  *(void *)&v20[16],  v11 * 0.66);
        goto LABEL_19;
      }
    }
  }

  else
  {
    if (qword_1019346F0 != -1) {
      dispatch_once(&qword_1019346F0, &stru_101879C30);
    }
    unint64_t v3 = (os_log_s *)qword_1019346F8;
    if (os_log_type_enabled((os_log_t)qword_1019346F8, OS_LOG_TYPE_INFO))
    {
      double v4 = a1[3];
      *(_DWORD *)__int128 buf = 134217984;
      double v23 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Rejected RunningPower due to range check, low weight: weight=%.1f ",  buf,  0xCu);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346F0 != -1) {
        dispatch_once(&qword_1019346F0, &stru_101879C30);
      }
      uint64_t v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346F8,  1LL,  "Rejected RunningPower due to range check, low weight: weight=%.1f ");
LABEL_19:
      uint64_t v13 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLPowerEstimator::rangeCheck(const CLPower::ModelOutput &)",  "%s\n");
LABEL_20:
      if (v13 != buf) {
        free(v13);
      }
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100C5B790(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 73 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  double v9 = (char **)(v8 + 8 * (v7 / 0x49));
  if (a1[2] == v8) {
    double v10 = 0LL;
  }
  else {
    double v10 = &(*v9)[56 * (v7 % 0x49)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 73 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x49);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005A9130(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005A9130(v24, v6);
      sub_100C5C1E8( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_1005A9130(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      double v16 = (_BYTE **)(v15 + 8 * (v14 / 0x49));
      if (a1[2] == v15) {
        BOOL v17 = 0LL;
      }
      else {
        BOOL v17 = &(*v16)[56 * (v14 % 0x49)];
      }
      v24[0] = v12;
      sub_100C5C39C(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10079E8B8(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  double v21 = (void *)(v20 + 8 * (v19 / 0x49));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 56 * (v19 % 0x49);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005A9130(v24, v11);
  return v24[0].n128_u64[0];
}

uint64_t sub_100C5BA38(uint64_t a1, double *a2, int a3, void *a4)
{
  unint64_t v4 = a4[5];
  if (v4 < 2) {
    return 0LL;
  }
  uint64_t v8 = a4[4];
  unint64_t v9 = v8 + v4;
  unint64_t v10 = (v8 + v4) / 0x49;
  uint64_t v11 = a4[1];
  uint64_t v12 = a4[2];
  __n128 v13 = (uint64_t *)(v11 + 8 * v10);
  uint64_t v14 = *v13;
  unint64_t v15 = *v13 + 56 * ((v8 + v4) % 0x49);
  if (v12 == v11) {
    unint64_t v15 = 0LL;
  }
  uint64_t v16 = v15 - v14;
  uint64_t v17 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v15 - v14) >> 3);
  if (v16 < 113) {
    unint64_t v18 = v13[-((74 - v17) / 0x49uLL)] + 56 * (73 * ((74 - v17) / 0x49uLL) - (74 - v17)) + 4032;
  }
  else {
    unint64_t v18 = v13[(v17 - 2) / 0x49uLL] + 56 * ((v17 - 2) % 0x49uLL);
  }
  uint64_t v19 = v14 + 56 * (v9 % 0x49);
  if (v12 == v11) {
    uint64_t v19 = 0LL;
  }
  uint64_t v20 = v19 - v14;
  uint64_t v21 = 0x6DB6DB6DB6DB6DB7LL * ((v19 - v14) >> 3);
  if (v20 < 113)
  {
    uint64_t v27 = 74 - v21;
    unint64_t v28 = (74 - v21) / 0x49uLL;
    __int16 v24 = &v13[-v28];
    uint64_t v25 = *v24;
    uint64_t v26 = *v24 + 56 * (73 * v28 - v27) + 4032;
  }

  else
  {
    uint64_t v22 = v21 - 2;
    unint64_t v23 = (v21 - 2) / 0x49uLL;
    __int16 v24 = &v13[v23];
    uint64_t v25 = *v24;
    uint64_t v26 = *v24 + 56 * (v22 - 73 * v23);
  }

  double v29 = a2[1];
  uint64_t v30 = v14 + 56 * (v9 % 0x49);
  if (v12 == v11) {
    uint64_t v30 = 0LL;
  }
  if (v26 != v30)
  {
    while (1)
    {
      uint64_t v31 = v26 + 56;
      if (v26 + 56 - v25 == 4088)
      {
        uint64_t v32 = v24[1];
        ++v24;
        uint64_t v25 = v32;
        uint64_t v31 = v32;
      }

      if (v31 == v30) {
        break;
      }
      double v33 = *(double *)(v26 + 8);
      uint64_t v26 = v31;
      if (*(double *)(v31 + 8) > v33)
      {
        BOOL v34 = 0;
        goto LABEL_22;
      }
    }
  }

  BOOL v34 = *(double *)(*(void *)(v11 + 8 * ((v4 + v8 - 1) / 0x49)) + 56 * ((v4 + v8 - 1) % 0x49) + 8) > v29;
LABEL_22:
  double v35 = *(double *)(v18 + 8);
  if (v4 < 3) {
    goto LABEL_38;
  }
  if (v12 == v11) {
    uint64_t v36 = 0LL;
  }
  else {
    uint64_t v36 = v14 + 56 * (v9 % 0x49);
  }
  uint64_t v37 = v36 - v14;
  uint64_t v38 = 0x6DB6DB6DB6DB6DB7LL * ((v36 - v14) >> 3);
  if (v37 < 169)
  {
    uint64_t v43 = 75 - v38;
    unint64_t v44 = 75 - v38;
    double v40 = (unint64_t *)&v13[-((75 - v38) / 0x49uLL)];
    unint64_t v41 = *v40;
    unint64_t v42 = *v40 + 56 * (73 * (v44 / 0x49) - v43) + 4032;
  }

  else
  {
    unint64_t v39 = v38 - 3;
    double v40 = (unint64_t *)&v13[(v38 - 3) / 0x49uLL];
    unint64_t v41 = *v40;
    unint64_t v42 = *v40 + 56 * (v39 % 0x49);
  }

  uint64_t v45 = v14 + 56 * (v9 - 73 * v10);
  if (v12 == v11) {
    uint64_t v46 = 0LL;
  }
  else {
    uint64_t v46 = v45;
  }
  if (v42 != v46)
  {
    while (*(double *)(v42 + 24) > 0.11)
    {
      v42 += 56LL;
      if (v42 - v41 == 4088)
      {
        unint64_t v47 = v40[1];
        ++v40;
        unint64_t v41 = v47;
        unint64_t v42 = v47;
      }

      if (v42 == v46) {
        goto LABEL_37;
      }
    }

uint64_t sub_100C5C0B4(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100C5C51C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  __int128 v9 = *a2;
  __int128 v10 = a2[1];
  __int128 v11 = a2[2];
  *(void *)(v8 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5] + 1LL;
  a1[5] = v13;
  unint64_t v14 = v12 + v13;
  uint64_t v15 = a1[1];
  uint64_t v16 = (void *)(v15 + 8 * (v14 / 0x49));
  uint64_t v17 = *v16 + 56 * (v14 % 0x49);
  if (a1[2] == v15) {
    uint64_t v17 = 0LL;
  }
  if (v17 == *v16) {
    uint64_t v17 = *(v16 - 1) + 4088LL;
  }
  return v17 - 56;
}

uint64_t sub_100C5C1AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = *(void *)(a2 + 224);
  return result;
}

void sub_100C5C1B8(id a1)
{
  qword_1019346F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Power");
}

__n128 sub_100C5C1E8@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    unint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100C5C2B4(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4088;
    }

    unint64_t v18 = *a1 + 4088;
    uint64_t v19 = a2;
  }

  sub_100C5C2B4(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100C5C2B4@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    __int128 v9 = a1;
  }

  else
  {
    __int128 v9 = a2;
    uint64_t v10 = *a3;
    __int128 v11 = a2;
    while (1)
    {
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)&a4[-v10] >> 3);
      if (0x6DB6DB6DB6DB6DB7LL * ((v11 - a1) >> 3) < v12) {
        uint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((v11 - a1) >> 3);
      }
      v11 -= 56 * v12;
      a4 -= 56 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 56 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4088);
    }

    if ((char *)(*v6 + 4088LL) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100C5C39C(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4088LL); ; uint64_t i = v12 + 4088)
    {
      sub_100C5C42C(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100C5C42C(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100C5C42C@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    __int128 v9 = __src;
  }

  else
  {
    __int128 v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((v10 - __dst + 4088) >> 3);
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7LL * ((v9 - v7) >> 3) >= v11 ? v11 : 0x6DB6DB6DB6DB6DB7LL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 56 * v12);
      }
      v7 += 56 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __uuid_t dst = v14;
    }

    __dst += 56 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100C5C51C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100C5C7E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C5C8A8(_Unwind_Exception *a1)
{
}

void sub_100C5C900(id a1)
{
  qword_10199D348 = -[CMPedometerTableRawSpeedToKValue initWithTestMode:]( objc_alloc(&OBJC_CLASS___CMPedometerTableRawSpeedToKValue),  "initWithTestMode:",  0LL);
}

void sub_100C5CAD0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C5CBA0(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_101879CD8);
  }
  uint64_t v6 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
  {
    id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3), "UTF8String");
    *(_DWORD *)__int128 buf = 136315138;
    id v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101879CD8);
    }
    uint64_t v23 = qword_101934518;
    id v24 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3), "UTF8String");
    LODWORD(v32) = 136315138;
    *(void *)((char *)&v32 + 4) = v24;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, v23, 2LL, "%s", (const char *)&v32);
    uint64_t v26 = (uint8_t *)v25;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMPedometerTableRawSpeedToKValue logBins]_block_invoke", "%s\n", v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  id result = [*(id *)(a1 + 40) isBinaryLogging];
  if ((_DWORD)result)
  {
    *(void *)&__int128 v32 = &off_101857F88;
    int v33 = a3;
    [a2 begin];
    uint64_t v34 = v10;
    [a2 end];
    uint64_t v35 = v11;
    unsigned int v36 = [a2 state];
    [a2 valueOut];
    uint64_t v37 = v12;
    *((CFAbsoluteTime *)&v32 + 1) = Current;
    uint64_t v13 = sub_100E00E14();
    sub_100E022E0(v13, (uint64_t)&v32);
    sub_101125260(buf);
    sub_10113AE18(buf);
    v31 |= 1u;
    CFAbsoluteTime v29 = Current;
    uint64_t v14 = v30;
    *(_BYTE *)(v30 + 40) |= 8u;
    *(_DWORD *)(v14 + 32) = a3;
    uint64_t v15 = v30;
    [a2 begin];
    *(_BYTE *)(v15 + 40) |= 1u;
    *(void *)(v15 + 8) = v16;
    uint64_t v17 = v30;
    [a2 end];
    *(_BYTE *)(v17 + 40) |= 2u;
    *(void *)(v17 + 16) = v18;
    uint64_t v19 = v30;
    unsigned int v20 = [a2 state];
    *(_BYTE *)(v19 + 40) |= 0x10u;
    *(_DWORD *)(v19 + 36) = v20;
    uint64_t v21 = v30;
    [a2 valueOut];
    *(_BYTE *)(v21 + 40) |= 4u;
    *(void *)(v21 + 24) = v22;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_101879CF8);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    return (id)sub_101127D00((PB::Base *)buf);
  }

  return result;
}

void sub_100C5CEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100C5CF38(id a1, void *a2)
{
}

void sub_100C5D298(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100C5D2C8()
{
  qword_10199D308 = 0LL;
  qword_10199D310 = 0LL;
  qword_10199D318 = 0LL;
  unsigned __int8 v0 = operator new(0x30uLL);
  qword_10199D310 = (uint64_t)(v0 + 3);
  qword_10199D318 = (uint64_t)(v0 + 3);
  *unsigned __int8 v0 = xmmword_1013573B0;
  v0[1] = unk_1013573C0;
  v0[2] = xmmword_1013573D0;
  qword_10199D308 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_10199D308, (void *)&_mh_execute_header);
  qword_10199D328 = 0LL;
  qword_10199D330 = 0LL;
  qword_10199D320 = 0LL;
  uint64_t v1 = operator new(0xA0uLL);
  qword_10199D330 = (uint64_t)(v1 + 10);
  void v1[6] = xmmword_101357440;
  v1[7] = unk_101357450;
  v1[8] = xmmword_101357460;
  v1[9] = unk_101357470;
  v1[2] = xmmword_101357400;
  v1[3] = unk_101357410;
  v1[4] = xmmword_101357420;
  v1[5] = unk_101357430;
  _OWORD *v1 = xmmword_1013573E0;
  v1[1] = unk_1013573F0;
  qword_10199D320 = (uint64_t)v1;
  qword_10199D328 = (uint64_t)(v1 + 10);
  return __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_10199D320, (void *)&_mh_execute_header);
}

__n128 sub_100C5D3A4(uint64_t a1, uint64_t *a2, __n128 *a3, double a4)
{
  uint64_t v6 = sub_1000219C4(a1, a2);
  *(void *)(v6 + 96) = 0LL;
  *(void *)(v6 + 104) = 0LL;
  *(void *)(v6 + 112) = 0LL;
  __n128 result = *a3;
  *(__n128 *)(v6 + 96) = *a3;
  *(void *)(v6 + 112) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0LL;
  a3->n128_u64[1] = 0LL;
  a3[1].n128_u64[0] = 0LL;
  *(double *)(v6 + 12sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a4;
  return result;
}

uint64_t sub_100C5D3F4(uint64_t a1)
{
  for (uint64_t i = a1 + 16;
        ;
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8) forNotification:*(unsigned int *)(i + 16)])
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }

  return sub_100019CEC(a1);
}

void *sub_100C5D43C(void *result, __int128 **a2)
{
  unint64_t v2 = *a2;
  BOOL v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = (uint64_t)result;
    do
    {
      __int128 v5 = *v2;
      uint64_t v9 = *((void *)v2 + 2);
      __int128 v8 = v5;
      uint64_t v6 = *(void *)(*(void *)(v4 + 40) + 8LL);
      id v7 = sub_10039E77C((__int128 *)((char *)&v8 + 8));
      [*(id *)(v6 + 16) register:*(void *)(v6 + 8) forNotification:v8 registrationInfo:v7];
      __n128 result = sub_1000B9D1C(v4, (int *)&v8, &v8);
      unint64_t v2 = (__int128 *)((char *)v2 + 24);
    }

    while (v2 != v3);
  }

  return result;
}

uint64_t sub_100C5D4D0(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0x10000000000000LL;
  *(void *)(a1 + 48) = *a3;
  uint64_t v4 = a3[1];
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    __int128 v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  id v7 = operator new(0x30uLL);
  _OWORD *v7 = 0u;
  v7[1] = 0u;
  *((_DWORD *)v7 + 8) = 1065353216;
  *((void *)v7 + 5) = a1;
  *(void *)(a1 + 96) = v7;
  id v8 = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
  *(void *)(a1 + 16) = v8;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_100C5D8D0;
  v23[3] = &unk_10181D3D0;
  _BYTE v23[4] = a1;
  [v8 setHandler:v23];
  *(void *)(a1 + 24) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLWifiService");
  sub_10034FF34((uint64_t)sub_100C5DC9C, a1, *(void **)a1, buf);
  uint64_t v9 = *(void *)buf;
  *(void *)__int128 buf = 0LL;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = *(void *)buf;
    *(void *)__int128 buf = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  uint64_t v12 = *(void **)(a1 + 96);
  uint64_t v13 = operator new(0x18uLL);
  *(void *)&uint8_t buf[8] = v13 + 3;
  *(void *)&uint8_t buf[16] = v13 + 3;
  *(_OWORD *)uint64_t v13 = xmmword_101879D18;
  v13[2] = "na";
  *(void *)__int128 buf = v13;
  sub_100C5D43C(v12, (__int128 **)buf);
  operator delete(v13);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101879D80);
  }
  uint64_t v14 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    id v15 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    int v16 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s INITIAL isWifiPowered=%d", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v18 = qword_101934A78;
    id v19 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    int v20 = *(unsigned __int8 *)(a1 + 32);
    int v24 = 136315394;
    id v25 = v19;
    __int16 v26 = 1024;
    int v27 = v20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  2LL,  "%s INITIAL isWifiPowered=%d",  (const char *)&v24,  18);
    uint64_t v22 = (char *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiScanner::CLWifiScanner(id<CLIntersiloUniverse>, std::shared_ptr<IWifiScanningStrategy>)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

  return a1;
}

void sub_100C5D844(_Unwind_Exception *a1)
{
  uint64_t v7 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  _Unwind_Resume(a1);
}

void sub_100C5D8D0(uint64_t a1)
{
}

void sub_100C5D8D8(uint64_t a1)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101879D80);
  }
  uint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    id v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    *(_DWORD *)__int128 buf = 136315138;
    id v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s WIFI TIMER TRIGGERED", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v11 = qword_101934A78;
    id v12 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    int v20 = 136315138;
    id v21 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  2LL,  "%s WIFI TIMER TRIGGERED",  (const char *)&v20);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiScanner::onTimerTriggered()", "%s\n", v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 72);
    v19[0] = *(uint64_t **)(a1 + 64);
    v19[1] = v4;
    if (v4)
    {
      __int128 v5 = (unint64_t *)(v4 + 1);
      do
        unint64_t v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }

    sub_100C5EB14(a1, v19);
    if (v4)
    {
      uint64_t v7 = (unint64_t *)(v4 + 1);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(uint64_t *))(*v4 + 16))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
    }

    sub_1000F0D38((void *)(a1 + 64));
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      id v10 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)__int128 buf = 136315138;
      id v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s WIFI SCAN SETTINGS EMPTY, TIMER RACE?",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v15 = qword_101934A78;
      id v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v20 = 136315138;
      id v21 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  2LL,  "%s WIFI SCAN SETTINGS EMPTY, TIMER RACE?",  (const char *)&v20);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiScanner::onTimerTriggered()", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

void sub_100C5DC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100C5DC9C(uint64_t a1, int *a2, double *a3, id *a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101879D60);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLWifiScanner::onWifiNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879D60);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      id v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLWifiScanner::onWifiNotification, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C5ED94((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C5DE54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C5DE78(uint64_t a1)
{
  sub_100C5E4A8((uint64_t *)(a1 + 96), 0LL);
  sub_100C5E4A8((uint64_t *)(a1 + 88), 0LL);
  sub_100C5E4A8((uint64_t *)(a1 + 80), 0LL);
  sub_10000AE14(a1 + 64);
  sub_10000AE14(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100C5DF04(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 33))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      id v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)__int128 buf = 136315138;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Stop monitor for active scanning", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v4 = qword_101934A78;
      id v5 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v7 = 136315138;
      id v8 = v5;
      unint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  2LL,  "%s Stop monitor for active scanning",  (const char *)&v7);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiScanner::stop()", "%s\n", v6);
    }

    *(_BYTE *)(a1 + 33) = 0;
    [*(id *)(a1 + 16) setNextFireDelay:1.79769313e308];
    sub_100C5E4A8((uint64_t *)(a1 + 88), 0LL);
    sub_100C5E4A8((uint64_t *)(a1 + 80), 0LL);
  }

void sub_100C5E108(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 33))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      id v3 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Start monitor for active scanning",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v18 = qword_101934A78;
      id v19 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v23 = 136315138;
      id v24 = v19;
      int v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v18,  2LL,  "%s Start monitor for active scanning",  (const char *)&v23);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWifiScanner::start()", "%s\n", v20);
    }

    uint64_t v4 = operator new(0x30uLL);
    _OWORD *v4 = 0u;
    v4[1] = 0u;
    *((_DWORD *)v4 + 8) = 1065353216;
    *((void *)v4 + 5) = a1;
    sub_100C5E4A8((uint64_t *)(a1 + 88), (uint64_t)v4);
    id v5 = *(void **)(a1 + 88);
    unint64_t v6 = operator new(0x30uLL);
    *(void *)&__int128 buf = v6;
    __int16 v26 = v6 + 3;
    *unint64_t v6 = xmmword_101879D30;
    v6[1] = *(_OWORD *)&off_101879D40;
    v6[2] = unk_101879D50;
    *((void *)&buf + 1) = v6 + 3;
    sub_100C5D43C(v5, (__int128 **)&buf);
    operator delete(v6);
    *(_BYTE *)(a1 + 33) = 1;
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    (*(void (**)(void))(**(void **)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
    id v8 = operator new(0x30uLL);
    *id v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    *((void *)v8 + 5) = a1;
    sub_100C5E4A8((uint64_t *)(a1 + 80), (uint64_t)v8);
    *(double *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = Current_1;
    uint64_t v9 = *(void *)(a1 + 48);
    v22[0] = 0;
    v22[16] = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, double))(*(void *)v9 + 24LL))( &buf,  v9,  v22,  Current_1);
    __int128 v21 = buf;
    if (*((void *)&buf + 1))
    {
      id v10 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    sub_100C5E4D4(a1, (uint64_t *)&v21);
    id v12 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    if (*((void *)&v21 + 1))
    {
      int v13 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
      do
        unint64_t v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    uint64_t v15 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (*((void *)&buf + 1))
    {
      __int16 v16 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
      do
        unint64_t v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

void sub_100C5E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100C5E4A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100C5D3F4(v3);
    operator delete(v4);
  }

void sub_100C5E4D4(uint64_t a1, uint64_t *a2)
{
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  if (!*(_BYTE *)(a1 + 33))
  {
    [*(id *)(a1 + 16) setNextFireDelay:1.79769313e308];
    return;
  }

  double v5 = Current_1;
  double v6 = *(double *)(*a2 + 120);
  double v7 = v6 + *(double *)(a1 + 40);
  sub_100C5D43C(*(void **)(a1 + 80), (__int128 **)(*a2 + 96));
  if (v5 >= v7)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      id v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)__int128 buf = 136315650;
      id v40 = v9;
      __int16 v41 = 2048;
      double v42 = v5;
      __int16 v43 = 2048;
      double v44 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v21 = qword_101934A78;
      id v22 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v33 = 136315650;
      id v34 = v22;
      __int16 v35 = 2048;
      double v36 = v5;
      __int16 v37 = 2048;
      double v38 = v7;
      LODWORD(v31) = 32;
      int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  2LL,  "%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f",  (const char *)&v33,  v31,  *(double *)v32);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)",  "%s\n",  v23);
    }

    uint64_t v10 = (uint64_t *)*a2;
    uint64_t v11 = (uint64_t *)a2[1];
    v32[0] = v10;
    v32[1] = v11;
    if (v11)
    {
      uint64_t v12 = (unint64_t *)(v11 + 1);
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }

    sub_100C5EB14(a1, v32);
    if (v11)
    {
      unint64_t v14 = (unint64_t *)(v11 + 1);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(uint64_t *))(*v11 + 16))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
    }

void sub_100C5EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_100C5EB14(uint64_t a1, uint64_t **a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    sub_1000219C4((uint64_t)buf, *a2);
    uint64_t v3 = *(void **)(a1 + 24);
    sub_1000219C4((uint64_t)v11, (uint64_t *)buf);
    id v4 = [v3 syncgetStartScanWithParameters:sub_100C5F464(v11)];
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }

    if (v23 < 0) {
      operator delete(v22);
    }
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    double v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      id v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      *(_DWORD *)__int128 buf = 136315138;
      id v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v8 = qword_101934A78;
      id v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v16 = 136315138;
      id v17 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  2LL,  "%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST",  (const char *)&v16);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiScanner::requestScan(std::shared_ptr<WifiScanSettings>)",  "%s\n",  v10);
    }

    return 0LL;
  }

  return v4;
}

void sub_100C5ED68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100C5ED94(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v7 = *a3;
  if (*a3 == 12 || v7 == 3)
  {
    double v9 = a4[13];
    double v10 = *(double *)(a1 + 40);
    if (v9 < v10 || *((_BYTE *)a4 + 1) != 11)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        id v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
        int v14 = *((char *)a4 + 1);
        *(_DWORD *)__int128 buf = 136315650;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = v9 < v10;
        __int16 v63 = 1024;
        LODWORD(v64) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s WIFI IGNORING NOTIFICATION, cached=%d scantype=%d",  buf,  0x18u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101879D80);
        }
        uint64_t v15 = qword_101934A78;
        id v16 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
        int v17 = *((char *)a4 + 1);
        int v56 = 136315650;
        id v57 = v16;
        __int16 v58 = 1024;
        BOOL v59 = v9 < v10;
        __int16 v60 = 1024;
        LODWORD(v61) = v17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  2LL,  "%s WIFI IGNORING NOTIFICATION, cached=%d scantype=%d",  (const char *)&v56,  24,  LODWORD(v50));
        id v19 = (char *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type ::NotificationData &)",  "%s\n",  v18);
        if (v19 != buf) {
          goto LABEL_61;
        }
      }

      return;
    }
  }

  else if (v7 == 1)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    id v20 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      id v21 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v22 = *(unsigned __int8 *)a4;
      [*(id *)(a1 + 16) nextFireTime];
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v22;
      __int16 v63 = 2048;
      uint64_t v64 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
      uint64_t v40 = qword_101934A78;
      id v41 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
      int v42 = *(unsigned __int8 *)a4;
      [*(id *)(a1 + 16) nextFireTime];
      int v56 = 136315650;
      id v57 = v41;
      __int16 v58 = 1024;
      BOOL v59 = v42;
      __int16 v60 = 2048;
      uint64_t v61 = v43;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v40,  2LL,  "%s WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f",  (const char *)&v56,  28,  v50);
      uint64_t v45 = (char *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type:: NotificationData &)",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    int v24 = *(unsigned __int8 *)(a1 + 32);
    int v25 = *(unsigned __int8 *)a4;
    if (v24 != v25)
    {
      BOOL v26 = v24 != 0;
      if (*(_BYTE *)a4) {
        BOOL v27 = v24 != 0;
      }
      else {
        BOOL v27 = 1;
      }
      if (*(_BYTE *)a4) {
        BOOL v26 = 0;
      }
      if (!v26 && v27) {
        sub_101268310();
      }
    }

    *(_BYTE *)(a1 + 32) = v25;
    return;
  }

  if (*(_BYTE *)(a1 + 33))
  {
    *(CFAbsoluteTime *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = j__CFAbsoluteTimeGetCurrent_1();
    uint64_t v28 = *(void *)(a1 + 48);
    int v53 = *a3;
    __int128 v54 = a4;
    char v55 = 1;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, int *))(*(void *)v28 + 24LL))(buf, v28, &v53);
    uint64_t v51 = *(void *)buf;
    uint64_t v52 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      id v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }

    sub_100C5E4D4(a1, &v51);
    double v31 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        unint64_t v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    id v34 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int16 v35 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    return;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101879D80);
  }
  __int16 v37 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_ERROR))
  {
    id v38 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    int v39 = *a3;
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = v38;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s WIFI GOT NOTIFICATION WHILE SCANNER NOT STARTED, type=%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101879D80);
    }
    uint64_t v46 = qword_101934A78;
    id v47 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "identifier"), "UTF8String");
    int v48 = *a3;
    int v56 = 136315394;
    id v57 = v47;
    __int16 v58 = 1024;
    BOOL v59 = v48;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v46,  16LL,  "%s WIFI GOT NOTIFICATION WHILE SCANNER NOT STARTED, type=%d",  (const char *)&v56,  18);
    id v19 = (char *)v49;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::No tificationData &)",  "%s\n",  v49);
    if (v19 != buf) {
LABEL_61:
    }
      free(v19);
  }

void sub_100C5F440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

id sub_100C5F464(uint64_t *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  _OWORD v3[2] = sub_100C5F564;
  v3[3] = &unk_101879DA0;
  sub_1000219C4((uint64_t)&v4, a1);
  id v1 = [v3 copy];
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v5)
  {
    id v6 = v5;
    operator delete(v5);
  }

  return v1;
}

void sub_100C5F4F8(_Unwind_Exception *a1)
{
}

void sub_100C5F50C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C5F538(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100C5F564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000219C4(a2, (uint64_t *)(a1 + 32));
}

uint64_t sub_100C5F570(uint64_t a1, uint64_t a2)
{
  return sub_1000219C4(a1 + 32, (uint64_t *)(a2 + 32));
}

void sub_100C5F57C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void *sub_100C5F5C0(uint64_t a1, void *a2)
{
  __n128 result = (void *)sub_100900DB4(a1, a2);
  *__n128 result = off_101879DE0;
  result[14] = 0LL;
  return result;
}

void sub_100C5F5E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100900FAC(a1);
  operator delete(v1);
}

uint64_t sub_100C5F5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1008FA854(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 + 48) + 16LL))(v3 + 48, a2);
}

uint64_t sub_100C5F62C(uint64_t result)
{
  if (!*(void *)(result + 112))
  {
    uint64_t v1 = result;
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_101879EE0);
    }
    uint64_t v2 = (os_log_s *)qword_101934708;
    if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Registering with Motion Coprocessor", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934700 != -1) {
        dispatch_once(&qword_101934700, &stru_101879EE0);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  2LL,  "Registering with Motion Coprocessor",  v7,  2);
      id v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLOnBodyNotifier7::startOnBodyDetection()", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_1003DE40C(v3, *(void **)(v1 + 40), (uint64_t)sub_100C5F820, v1, 0LL);
    *(void *)(v1 + 112) = v3;
    uint64_t v4 = sub_1008FA854(0);
    return sub_1006DCB40(v4, 2, *(void *)(v1 + 112), -1.0);
  }

  return result;
}

void sub_100C5F804(_Unwind_Exception *a1)
{
}

void sub_100C5F820(int *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101879F00);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLOnBodyNotifier7::onMotionCoprocessorData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101879F00);
    }
    uint64_t v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLOnBodyNotifier7::onMotionCoprocessorData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_100C5FBB4(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C5F9D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C5F9F0(void *result)
{
  if (result[14])
  {
    uint64_t v1 = result;
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_101879EE0);
    }
    uint64_t v2 = (os_log_s *)qword_101934708;
    if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Unregistering with Motion Coprocessor", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934700 != -1) {
        dispatch_once(&qword_101934700, &stru_101879EE0);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  2LL,  "Unregistering with Motion Coprocessor",  v6,  2);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLOnBodyNotifier7::stopOnBodyDetection()", "%s\n", v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    uint64_t v3 = sub_1008FA854(0);
    sub_1006DD2A0(v3, 2, v1[14]);
    __n128 result = (void *)v1[14];
    if (result) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
    v1[14] = 0LL;
  }

  return result;
}

uint64_t sub_100C5FBB4(uint64_t a1, int *a2)
{
  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_101879EE0);
  }
  uint64_t v4 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[1];
    uint64_t v7 = *((void *)a2 + 1);
    *(_DWORD *)__int128 buf = 67109632;
    int v20 = v5;
    __int16 v21 = 1024;
    int v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_101879EE0);
    }
    int v9 = *a2;
    int v10 = a2[1];
    uint64_t v11 = *((void *)a2 + 1);
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = v9;
    __int16 v15 = 1024;
    int v16 = v10;
    __int16 v17 = 2048;
    uint64_t v18 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  2LL,  "onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f",  &v14,  24,  v14);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOnBodyNotifier7::onMotionCoprocessorData(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  *(_DWORD *)__int128 buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, int *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  a2,  0LL,  0xFFFFFFFFLL,  0LL);
}

void sub_100C5FDC8(id a1)
{
  qword_101934708 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_100C5FDF4(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100C5FE20@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 == 2)
  {
    uint64_t v3 = operator new(0x48uLL);
    uint64_t result = sub_100EF418C();
  }

  else
  {
    uint64_t v3 = operator new(0x1B8uLL);
    uint64_t result = sub_10041271C();
  }

  *a2 = v3;
  return result;
}

void sub_100C5FE6C(_Unwind_Exception *a1)
{
}

double sub_100C5FE84(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

double sub_100C5FE90(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 16) = *a2;
  return result;
}

uint64_t sub_100C5FE9C(uint64_t result, void *a2)
{
  *(void *)(result + 24) |= *a2;
  return result;
}

uint64_t sub_100C5FEB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t sub_100C5FEB8(uint64_t result, float a2)
{
  int v2 = 24 * ((int)a2 / 24);
  if (v2 <= 32) {
    int v2 = 32;
  }
  if (v2 >= 56) {
    int v2 = 56;
  }
  *(_DWORD *)(result + 36) = v2;
  return result;
}

uint64_t sub_100C5FEFC(uint64_t result, float a2)
{
  int v2 = 34 * ((int)a2 / 34);
  if (v2 <= 2000) {
    int v2 = 2000;
  }
  if (v2 >= 36000) {
    int v2 = 36000;
  }
  *(_DWORD *)(result + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v2;
  return result;
}

uint64_t sub_100C5FF40(uint64_t result, float a2)
{
  else {
    int v2 = (int)a2 & 0x1F;
  }
  int v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32) {
    int v3 = 32;
  }
  *(_DWORD *)(result + 44) = v3;
  return result;
}

uint64_t sub_100C5FF70(uint64_t result, float a2)
{
  else {
    int v2 = (int)a2 & 0x1F;
  }
  int v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32) {
    int v3 = 32;
  }
  *(_DWORD *)(result + 48) = v3;
  return result;
}

uint64_t sub_100C5FFA0(uint64_t result, float a2)
{
  else {
    int v2 = (int)a2 & 0x1F;
  }
  int v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32) {
    int v3 = 32;
  }
  *(_DWORD *)(result + 52) = v3;
  return result;
}

uint64_t sub_100C5FFD0(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

uint64_t sub_100C5FFD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t sub_100C5FFE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = a2;
  return result;
}

uint64_t sub_100C5FFE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

void sub_100C5FFF0(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x20) != 0)
  {
    *(_BYTE *)a2 = 1;
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    uint64_t v11 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 136315394;
      v192 = "impactCanceledBecauseOfMaxAccelNorm";
      __int16 v193 = 2048;
      uint64_t v194 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      uint64_t v81 = *(void *)(a1 + 8);
      int v187 = 136315394;
      v188 = "impactCanceledBecauseOfMaxAccelNorm";
      __int16 v189 = 2048;
      uint64_t v190 = v81;
      LODWORD(v186) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
      double v83 = (uint8_t *)v82;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const",  "%s\n",  v82);
      if (v83 != buf) {
        free(v83);
      }
    }

    *a3 = 1;
    uint64_t v10 = *(void *)(a1 + 24);
    if ((v10 & 0x40) == 0)
    {
LABEL_3:
      if ((v10 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }

  else if ((v10 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  *(_BYTE *)a2 = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v13 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136315394;
    v192 = "impactCanceledBecauseOfOtherHardThresholds";
    __int16 v193 = 2048;
    uint64_t v194 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    uint64_t v84 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "impactCanceledBecauseOfOtherHardThresholds";
    __int16 v189 = 2048;
    uint64_t v190 = v84;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    __int16 v86 = (uint8_t *)v85;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v85);
    if (v86 != buf) {
      free(v86);
    }
  }

  a3[1] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x80) == 0)
  {
LABEL_4:
    if ((v10 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }

LABEL_247:
  if (*(_BYTE *)(a2 + 2))
  {
    *(_BYTE *)(a2 + 1) = 1;
    *(_WORD *)(a2 + 4) = 257;
  }

  if (*(_BYTE *)(a2 + 1))
  {
    *(_BYTE *)a2 = 1;
    *(_BYTE *)(a2 + 3) = 1;
  }

  if (a5[5]) {
    *(_BYTE *)(a2 + 7) = 1;
  }
  if (!a5[11] || a5[6]) {
    *(_BYTE *)(a2 + 8) = 1;
  }
}

          *(_DWORD *)(a1 + 148) = v90;
          goto LABEL_294;
        case 7u:
          *(_BYTE *)(a1 + 152) |= 1u;
          uint64_t v93 = *((void *)this + 1);
          __int16 v94 = *((void *)this + 2);
          int v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5LL && v93 + 10 <= v94)
          {
            uint64_t v96 = 0;
            int v97 = 0;
            __int16 v98 = 0LL;
            do
            {
              uint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              __int16 v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_250;
              }
              v96 += 7;
              uint64_t v93 = v99;
              uint64_t v20 = v97++ > 8;
            }

            while (!v20);
LABEL_192:
            __int16 v98 = 0LL;
            goto LABEL_250;
          }

          uint64_t v136 = 0;
          uint64_t v137 = 0;
          __int16 v98 = 0LL;
          if (v94 <= v93) {
            __int16 v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              __int16 v98 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v138 = v93 + 1;
              uint64_t v139 = *(_BYTE *)(v95 + v93);
              *((void *)this + 1) = v138;
              v98 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                uint64_t v93 = v138;
                uint64_t v20 = v137++ > 8;
                if (v20) {
                  goto LABEL_192;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                __int16 v98 = 0LL;
              }
            }

            break;
          }

void sub_100C63818(uint64_t a1, _BYTE *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    if (v2 == 1)
    {
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      int v5 = (os_log_s *)qword_1019345D8;
      if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v36 = "ResponseConfirmedActionRequested";
        __int16 v37 = 2048;
        uint64_t v38 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345D0 != -1) {
          dispatch_once(&qword_1019345D0, &stru_101879FD0);
        }
        uint64_t v15 = *(void *)(a1 + 8);
        int v31 = 136315394;
        uint64_t v32 = "ResponseConfirmedActionRequested";
        __int16 v33 = 2048;
        uint64_t v34 = v15;
        LODWORD(v3sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  (const char *)&v31,  v30);
        __int16 v17 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const",  "%s\n",  v16);
        if (v17 != buf) {
          free(v17);
        }
      }

      *a2 = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }

    if (v2 == 2)
    {
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      uint64_t v7 = (os_log_s *)qword_1019345D8;
      if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v36 = "ResponseConfirmedNoActionRequested";
        __int16 v37 = 2048;
        uint64_t v38 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345D0 != -1) {
          dispatch_once(&qword_1019345D0, &stru_101879FD0);
        }
        uint64_t v18 = *(void *)(a1 + 8);
        int v31 = 136315394;
        uint64_t v32 = "ResponseConfirmedNoActionRequested";
        __int16 v33 = 2048;
        uint64_t v34 = v18;
        LODWORD(v3sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  (const char *)&v31,  v30);
        uint64_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      a2[1] = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }

    if (v2 == 3)
    {
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      int v9 = (os_log_s *)qword_1019345D8;
      if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v36 = "ResponseDismissed";
        __int16 v37 = 2048;
        uint64_t v38 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345D0 != -1) {
          dispatch_once(&qword_1019345D0, &stru_101879FD0);
        }
        uint64_t v21 = *(void *)(a1 + 8);
        int v31 = 136315394;
        uint64_t v32 = "ResponseDismissed";
        __int16 v33 = 2048;
        uint64_t v34 = v21;
        LODWORD(v3sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  (const char *)&v31,  v30);
        __int16 v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }

      a2[2] = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }

    if (v2 == 4)
    {
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      uint64_t v11 = (os_log_s *)qword_1019345D8;
      if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v36 = "ResponseRejected";
        __int16 v37 = 2048;
        uint64_t v38 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345D0 != -1) {
          dispatch_once(&qword_1019345D0, &stru_101879FD0);
        }
        uint64_t v24 = *(void *)(a1 + 8);
        int v31 = 136315394;
        uint64_t v32 = "ResponseRejected";
        __int16 v33 = 2048;
        uint64_t v34 = v24;
        LODWORD(v3sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  (const char *)&v31,  v30);
        uint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      a2[3] = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }

    if (v2 == 5)
    {
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      uint64_t v13 = (os_log_s *)qword_1019345D8;
      if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 8);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v36 = "ResponseAutomaticActionRequested";
        __int16 v37 = 2048;
        uint64_t v38 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345D0 != -1) {
          dispatch_once(&qword_1019345D0, &stru_101879FD0);
        }
        uint64_t v27 = *(void *)(a1 + 8);
        int v31 = 136315394;
        uint64_t v32 = "ResponseAutomaticActionRequested";
        __int16 v33 = 2048;
        uint64_t v34 = v27;
        LODWORD(v3sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting isUser%s for impact at %f",  (const char *)&v31,  v30);
        id v29 = (uint8_t *)v28;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const",  "%s\n",  v28);
        if (v29 != buf) {
          free(v29);
        }
      }

      a2[4] = 1;
    }
  }

double sub_100C64024(uint64_t a1)
{
  v24[8] = 0;
  *(void *)uint64_t v24 = 0LL;
  *(void *)&__int128 v2 = 0x8000000080000000LL;
  *((void *)&v2 + 1) = 0x8000000080000000LL;
  *(_OWORD *)&v24[12] = v2;
  *(_DWORD *)((char *)v23 + 3) = 0;
  v23[0] = 0;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, 14);
  sub_100C5FFF0(a1, (uint64_t)v24, v23, v22, v21);
  int v3 = v24[1];
  if (v24[1])
  {
    int v4 = *(_DWORD *)(a1 + 72);
    int v5 = 100 * (v4 - *(_DWORD *)(a1 + 80));
    *(_DWORD *)&v24[16] = (int)(float)(*(float *)(a1 + 64) * 100.0);
    *(_DWORD *)&v24[20] = v5;
    *(_DWORD *)&v24[24] = 100 * (*(_DWORD *)(a1 + 88) - v4);
  }

  int v6 = v24[2];
  if (v24[2]) {
    sub_100C63818(a1, v21);
  }
  *(_DWORD *)&v24[12] = (int)(*(double *)(a1 + 16) - *(double *)(a1 + 8));
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v7 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109632;
    int v31 = v24[0];
    __int16 v32 = 1024;
    int v33 = v3;
    __int16 v34 = 1024;
    int v35 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "CA - Events about to be created, isImpactCandidateEvent=%d, isAlertCandidateEvent=%d, isSOSCandidateEvent=%d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v9 = v24[0];
    v25[0] = 67109632;
    v25[1] = v24[0];
    __int16 v26 = 1024;
    int v27 = v3;
    __int16 v28 = 1024;
    int v29 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CA - Events about to be created, isImpactCandidateEvent=%d, isAlertCandidateEvent=%d, isSOSCandidateEvent=%d",  v25,  20,  LODWORD(v12[0]));
    uint64_t v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLFallImpactMetrics::sendEventToCoreAnalytics() const",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  else
  {
    int v9 = v24[0];
  }

  if (v9)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100C643D4;
    v18[3] = &unk_101879F20;
    v18[4] = a1;
    *(_OWORD *)id v19 = *(_OWORD *)v24;
    *(_OWORD *)&v19[12] = *(_OWORD *)&v24[12];
    v20[0] = v23[0];
    *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)v23 + 3);
    *(void *)&double result = AnalyticsSendEventLazy(@"com.apple.CoreMotion.FallImpactCandidate", v18).n128_u64[0];
  }

  if (v3)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100C64660;
    v15[3] = &unk_101879F40;
    v15[4] = a1;
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v24;
    *(_OWORD *)&v16[12] = *(_OWORD *)&v24[12];
    *(_OWORD *)__int16 v17 = *(_OWORD *)v22;
    *(_DWORD *)&v17[15] = *(_DWORD *)&v22[15];
    *(void *)&double result = AnalyticsSendEventLazy(@"com.apple.CoreMotion.FallAlertCandidate", v15).n128_u64[0];
  }

  if (v6)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100C64A04;
    _OWORD v12[3] = &unk_101879F60;
    v12[4] = a1;
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v24;
    *(_OWORD *)&v13[12] = *(_OWORD *)&v24[12];
    v14[0] = v21[0];
    *(void *)((char *)v14 + 6) = *(void *)((char *)v21 + 6);
    *(void *)&double result = AnalyticsSendEventLazy(@"com.apple.CoreMotion.FallSOSCandidate", v12).n128_u64[0];
  }

  return result;
}

NSDictionary *sub_100C643D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"isFallImpact";
  v5[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 43));
  v4[1] = @"isFallAlert";
  v5[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[2] = @"isSOSConsidered";
  v5[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 45));
  v4[3] = @"isSOSCallPlaced";
  v5[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46));
  void v4[4] = @"userCancelledSOS";
  v5[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 47));
  v4[5] = @"algCancelledSOS";
  v5[5] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48));
  v4[6] = @"impactCanceledBecauseOfMaxAccelNorm";
  void v5[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 68));
  v4[7] = @"impactCanceledBecauseOfOtherHardThresholds";
  v5[7] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 69));
  v4[8] = @"impactCanceledBecauseOfMultiPeaks";
  _WORD v5[8] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 70));
  v4[9] = @"impactCanceledBecauseOfNaiveBayes";
  v5[9] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 71));
  v4[10] = @"impactCanceledBecauseOfExistingAlert";
  v5[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72));
  v4[11] = @"impactReplacedBecauseOfNewImpact";
  v5[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[12] = @"impactCanceledBecauseOfCyclingImpactThresholds";
  v5[12] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[13] = @"maxAccelNorm";
  v5[13] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 36));
  v4[14] = @"maxAbsX";
  v5[14] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 44));
  v4[15] = @"maxAbsY";
  v5[15] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 48));
  v4[16] = @"maxAbsZ";
  v5[16] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 52));
  v4[17] = @"jerkVectorMagnitude";
  v5[17] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 40));
  v4[18] = @"workoutType";
  v5[18] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v2 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  19LL);
}

NSDictionary *sub_100C64660(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"isFallImpact";
  v5[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 43));
  v4[1] = @"isFallAlert";
  v5[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[2] = @"isSOSConsidered";
  v5[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 45));
  v4[3] = @"isSOSCallPlaced";
  v5[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46));
  void v4[4] = @"userCancelledSOS";
  v5[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 47));
  v4[5] = @"alertCanceledBecauseOfHighFrequencyFFT";
  v5[5] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 68));
  v4[6] = @"alertCanceledBecauseOfLowFrequencyFFT";
  void v5[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 69));
  v4[7] = @"alertCanceledBecauseOfDecimatedLowFrequencyFFT";
  v5[7] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 70));
  v4[8] = @"alertCanceledBecauseOfFFT";
  _WORD v5[8] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 71));
  v4[9] = @"alertCanceledBecauseOfPeaksIQR";
  v5[9] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72));
  v4[10] = @"alertCanceledBecauseOfOffBody";
  v5[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[11] = @"alertCanceledBecauseOfRepetitiveMotion";
  v5[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[12] = @"alertCanceledBecauseOfAbsenceOfQuiessence";
  v5[12] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 75));
  v4[13] = @"alertCanceledBecauseOfOffWristPre";
  v5[13] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v4[14] = @"alertCanceledBecauseOfOffWristPost";
  v5[14] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v4[15] = @"alertCanceledBecauseOfFeatureDisabled";
  v5[15] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 78));
  v4[16] = @"alertCanceledBecauseOfOnCharger";
  v5[16] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 79));
  v4[17] = @"alertCanceledBecauseOfAlreadyGatedBefore";
  v5[17] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  v4[18] = @"alertCanceledBecauseOfSimilarPeaks";
  v5[18] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81));
  void v4[19] = @"alertCanceledBecauseOfLockedNoMotionBeforeImpact";
  void v5[19] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 82));
  v4[20] = @"alertCanceledBecauseOfReferee";
  v5[20] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 83));
  v4[21] = @"alertCanceledBecauseStand";
  v5[21] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 84));
  v4[22] = @"alertCanceledBecauseActive";
  v5[22] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 85));
  v4[23] = @"alertCanceledBecauseSteps";
  v5[23] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 86));
  v4[24] = @"workoutType";
  v5[24] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v2 + 56));
  v4[25] = @"eventDuration";
  v5[25] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v4[26] = @"fallDistanceCentimeter";
  v5[26] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v4[27] = @"staticTimestampBeforePeak";
  v5[27] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v4[28] = @"staticTimestampAfterPeak";
  v5[28] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  29LL);
}

NSDictionary *sub_100C64A04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"isFallImpact";
  v5[0] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 43));
  v4[1] = @"isFallAlert";
  v5[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44));
  v4[2] = @"isSOSConsidered";
  v5[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 45));
  v4[3] = @"isSOSCallPlaced";
  v5[3] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46));
  void v4[4] = @"userCancelledSOS";
  v5[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 47));
  v4[5] = @"sosCanceledBecauseUserResponse";
  v5[5] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73));
  v4[6] = @"sosCanceledBecauseOffWrist";
  void v5[6] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 74));
  v4[7] = @"sosCanceledBecauseStand";
  v5[7] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 75));
  v4[8] = @"sosCanceledBecauseActive";
  _WORD v5[8] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 76));
  v4[9] = @"sosCanceledBecauseSteps";
  v5[9] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 77));
  v4[10] = @"sosCanceledBecauseAbsenceOfLongLie";
  v5[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 78));
  v4[11] = @"sosCallConsidered";
  v5[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 79));
  v4[12] = @"sosCallScheduled";
  v5[12] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
  v4[13] = @"sosCallPlaced";
  v5[13] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81));
  v4[14] = @"workoutType";
  v5[14] = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v2 + 56));
  v4[15] = @"eventDuration";
  v5[15] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v4[16] = @"fallDistanceCentimeter";
  v5[16] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v4[17] = @"staticTimestampBeforePeak";
  v5[17] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v4[18] = @"staticTimestampAfterPeak";
  v5[18] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  19LL);
}

void sub_100C64C90(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

double sub_100C64CBC(double *a1, double *a2, double a3)
{
  double v6 = sqrt(a1[17] * a1[17] + a1[16] * a1[16]) / 2.45;
  double v7 = sqrt(a2[17] * a2[17] + a2[16] * a2[16]) / 2.45;
  sub_1004F2598();
  if (sub_1004F6D00())
  {
    double v6 = v6 / 2.45;
    double v7 = v7 / 2.45;
  }

  if (v6 > 0.0 || (double v8 = -1.0, v7 > 0.0))
  {
    double v9 = v7 * v7 + v6 * v6 + v6 * -1.9876 * v7;
    double v10 = sqrt(v9);
    if (v9 <= 0.0) {
      double v8 = 0.0;
    }
    else {
      double v8 = v10;
    }
    double v11 = a1[14];
    if (v11 > 0.0)
    {
      double v12 = a2[14];
      if (v12 > 0.0 && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a1[6] >= 0.0 && a2[6] >= 0.0)
      {
        unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_10199D380);
        if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_10199D380))
        {
          sub_100D2D9A4((uint64_t)dbl_10199D358);
          __cxa_guard_release(&qword_10199D380);
        }

        double v14 = a3 * 0.5 * sqrt(v12 * v12 + v11 * v11);
        double v15 = sub_100D2DBDC(dbl_10199D358, a1[1], a1[2], a2[1], a2[2], 0.0);
        double v16 = (a1[6] + a2[6]) * 0.5 * a3;
        double v17 = v16 + v14 * -1.5;
        if (v17 < 0.0) {
          double v17 = 0.0;
        }
        double v18 = v16 + v14 * 1.5;
        BOOL v19 = v17 < v15 && v15 < v18;
        if (v19 || v14 > v8) {
          double v8 = v14;
        }
      }
    }

    if (v8 > 0.0)
    {
      double v8 = v8 * 0.4;
      if (v8 < 0.25) {
        return 0.25;
      }
    }
  }

  return v8;
}

void sub_100C64E98(_Unwind_Exception *a1)
{
}

uint64_t sub_100C64EB0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  int v3 = (void *)(a1 + 8);
  sub_1010DDBC0(&__p, "OutdoorService");
  sub_100CC29F8(v3);
  if (v11 < 0) {
    operator delete(__p);
  }
  sub_1010DDBC0(v8, "OutdoorService");
  sub_100F474D8((char *)(a1 + 2960), (__int128 *)v8);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  sub_1010DDBC0(&v6, "OutdoorService");
  sub_10050CBF4((void *)(a1 + 3064));
  if (v7 < 0) {
    operator delete(v6);
  }
  sub_100D08A04(a1 + 3136);
  *(void *)(a1 + 3192) = 0LL;
  sub_100EA75CC(a1 + 3520);
  int v5 = 3;
  sub_10023AE2C((unsigned __int8 *)(a1 + 3784), "ForceOutdoorPredictionType", &v5, 0);
  return a1;
}

void sub_100C64FBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v20 = v18;
  sub_100EA75D0(v20);
  uint64_t v22 = *(void **)(v16 + 3160);
  if (v22)
  {
    *(void *)(v16 + 3168) = v22;
    operator delete(v22);
  }

  sub_100A21C80(v19);
  sub_10031CBC8(v17);
  _Unwind_Resume(a1);
}

void sub_100C65034( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100C6501CLL);
}

void sub_100C6504C()
{
}

void sub_100C65054( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x100C65024LL);
  }
  JUMPOUT(0x100C6502CLL);
}

void sub_100C6506C(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6 = operator new(0x20uLL);
  uint64_t v148 = v6 + 2;
  *double v6 = xmmword_1013574C8;
  v6[1] = unk_1013574D8;
  unint64_t v146 = v6;
  uint64_t v147 = v6 + 2;
  __int16 v105 = 0;
  __uuid_t dst = xmmword_1012EA5D0;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v103 = 0u;
  memset(v104, 0, sizeof(v104));
  unint64_t v106 = 0xBFF0000000000000LL;
  int v107 = 0;
  memset(&v108[1], 0, 312);
  v108[0] = -1.0;
  double v109 = -1.0;
  uint64_t v110 = 0LL;
  unint64_t v111 = 0xBFF0000000000000LL;
  int v122 = 0;
  uint64_t v123 = 0LL;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  __int128 v114 = 0u;
  __int128 v115 = 0u;
  __int128 v116 = 0u;
  int v117 = 0;
  __int128 v118 = 0u;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  memset(v121, 0, sizeof(v121));
  unint64_t v124 = 0xBFF0000000000000LL;
  uint64_t v126 = 0LL;
  uint64_t v125 = 0LL;
  uint64_t v127 = 0x80000000800000LL;
  uint64_t v129 = 0LL;
  uint64_t v128 = 0LL;
  __int128 v130 = xmmword_1012E1EA0;
  uint64_t v131 = 0x80000000800000LL;
  unint64_t v132 = 0xBFF0000000000000LL;
  memset(v133, 0, sizeof(v133));
  double v134 = -1.0;
  memset(v135, 0, sizeof(v135));
  double v136 = -1.0;
  __int128 v137 = 0u;
  *(_OWORD *)uint64_t v138 = 0u;
  uint64_t v139 = 0LL;
  double v140 = -1.0;
  uint64_t v141 = 0x600000006LL;
  uint64_t v143 = 0LL;
  uint64_t v142 = 0LL;
  uint64_t v144 = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v145 = _Q0;
  sub_100798554(*(void *)a1, (uint64_t)&v146, (char *)&__dst, a3);
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934940 != -1) {
    dispatch_once(&qword_101934940, &stru_101879FF0);
  }
  unsigned __int8 v13 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134219520;
    *(double *)&uint8_t buf[4] = a3;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v108[0] != -1.0;
    *(_WORD *)&_BYTE buf[18] = 1024;
    *(_DWORD *)&buf[20] = LODWORD(v108[4]);
    *(_WORD *)uint64_t v158 = 2048;
    *(double *)&v158[2] = v108[0];
    *(_WORD *)uint64_t v159 = 1024;
    *(_DWORD *)&v159[2] = *((double *)&__dst + 1) != -1.0;
    *(_WORD *)&v159[6] = 1024;
    *(_DWORD *)&v159[8] = DWORD2(v97);
    *(_WORD *)&v159[12] = 2048;
    *(void *)&v159[14] = *((void *)&__dst + 1);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Steps/activity sync, updateTime, %f, hasSteps, %d, stepCount, %d, stepStartTime, %f, hasActivity, %d, activityType , %d, activityStartTime, %f",  buf,  0x38u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101879FF0);
    }
    *(_DWORD *)uint64_t v149 = 134219520;
    *(double *)&v149[4] = a3;
    __int16 v150 = 1024;
    *(_DWORD *)__int128 v151 = v108[0] != -1.0;
    *(_WORD *)&v151[4] = 1024;
    *(_DWORD *)&v151[6] = LODWORD(v108[4]);
    *(_WORD *)__int16 v152 = 2048;
    *(double *)&v152[2] = v108[0];
    LOWORD(v153) = 1024;
    *(_DWORD *)((char *)&v153 + 2) = *((double *)&__dst + 1) != -1.0;
    HIWORD(v153) = 1024;
    LODWORD(v154) = DWORD2(v97);
    WORD2(v154) = 2048;
    *(void *)((char *)&v154 + 6) = *((void *)&__dst + 1);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "Steps/activity sync, updateTime, %f, hasSteps, %d, stepCount, %d, stepStartTime, %f, hasActivity, %d, activityType , %d, activityStartTime, %f",  COERCE_DOUBLE(v149),  56,  (_DWORD)v91,  *((double *)&v91 + 1),  v92,  (_DWORD)__p,  *(double *)&v94);
    uint64_t v36 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v35);
    if (v36 != buf) {
      free(v36);
    }
  }

  v14.n128_f64[0] = v109;
  if (v109 != -1.0)
  {
    sub_10050D3A0(a1 + 3064, *(float *)&v110, *((float *)&v110 + 1));
    sub_100D09388((float *)(a1 + 3136), *(float *)&v110, *((float *)&v110 + 1));
  }

  std::string __p = 0LL;
  __int16 v94 = 0LL;
  uint64_t v95 = 0LL;
  double v15 = (void *)(*(uint64_t (**)(void, __n128))(**(void **)(*(void *)a1 + 24LL) + 24LL))( *(void *)(*(void *)a1 + 24LL),  v14);
  sub_100C66880(v15, &__p, *(double *)(a1 + 3192), a3);
  uint64_t v16 = __p;
  uint64_t v17 = v94;
  if (__p == v94)
  {
    uint64_t v20 = 0LL;
    int v18 = 0;
  }

  else
  {
    int v18 = *(v94 - 2);
    do
    {
      *(_OWORD *)__int128 buf = *v16;
      sub_10050CBF8(a1 + 3064, (uint64_t)buf, a3);
      uint64_t v19 = sub_100D08A08((void *)(a1 + 3136), (double *)buf, a3);
      ++v16;
    }

    while (v16 != v17);
    uint64_t v20 = v19;
    p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
  }

  sub_100F48BA4((void *)(a1 + 2960), *(double *)(a1 + 3200), *(double *)(a1 + 3456), a3);
  if (v108[0] != -1.0) {
    memcpy((void *)(a1 + 3200), v108, 0x140uLL);
  }
  float v21 = sub_10050D060(a1 + 3064, a3);
  float v22 = sub_100F47F54(a1 + 2960, a3);
  sub_100CC3250(a1 + 8, (uint64_t)&v91, a3);
  __int16 v23 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 134218496;
    *(double *)&uint8_t buf[4] = v21;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&_BYTE buf[14] = v22;
    *(_WORD *)&buf[22] = 2048;
    *(void *)uint64_t v158 = v91;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "CoreMotion model estimates, alsOutdoorProb, %f, wifiIndoorProb, %f, gpsOutdoorProb, %f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    *(_DWORD *)uint64_t v149 = 134218496;
    *(double *)&v149[4] = v21;
    __int16 v150 = 2048;
    *(double *)__int128 v151 = v22;
    *(_WORD *)&v151[8] = 2048;
    *(void *)__int16 v152 = v91;
    LODWORD(v89) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  1LL,  "CoreMotion model estimates, alsOutdoorProb, %f, wifiIndoorProb, %f, gpsOutdoorProb, %f",  COERCE_DOUBLE(v149),  v89,  *(double *)&v91);
    uint64_t v38 = (uint8_t *)v37;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v37);
    if (v38 != buf) {
      free(v38);
    }
  }

  if (!*(_BYTE *)(a1 + 3760))
  {
    sub_100FDAA60(a1 + 3520, a3);
    uint64_t v24 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "CLOutdoorLabeler,CLOutdoorEstimator,Init,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)uint64_t v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorLabeler,CLOutdoorEstimator,Init,currentTime,%f",  COERCE_DOUBLE(v149));
      uint64_t v40 = (uint8_t *)v39;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v39);
      if (v40 != buf) {
        free(v40);
      }
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }
  }

  BOOL v25 = *(double *)&v91 <= 1.0 && *(double *)&v91 >= 0.0;
  BOOL v26 = v22 <= 1.0 && v22 >= 0.0;
  BOOL v27 = v21 >= 0.0;
  if (v21 > 1.0) {
    BOOL v27 = 0;
  }
  HIDWORD(v9sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v27;
  if (!sub_100FE0964(a1 + 3520, a3)) {
    goto LABEL_143;
  }
  if (*((double *)&__dst + 1) == -1.0)
  {
    __int16 v28 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoMotionActivity,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)uint64_t v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoMotionActivity,currentTime,%f",  COERCE_DOUBLE(v149));
      uint64_t v42 = (uint8_t *)v41;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v41);
      if (v42 != buf) {
        free(v42);
      }
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }
  }

  else
  {
    sub_100EA7EF0(a1 + 3520, SDWORD2(v97), a3);
  }

  if (v136 != -1.0)
  {
    memset(buf, 0, sizeof(buf));
    int v29 = (void *)(*(uint64_t (**)(void, double))(**(void **)(*(void *)a1 + 24LL) + 80LL))( *(void *)(*(void *)a1 + 24LL),  v136);
    sub_100C66A34(v29, (uint64_t *)buf, *(double *)(a1 + 3192), a3);
    uint64_t v30 = *(void *)buf;
    uint64_t v31 = *(void *)&buf[8];
    while (v30 != v31)
    {
      sub_100EA75E4(a1 + 3520, v30, a3);
      v30 += 48LL;
    }

    *(void *)uint64_t v149 = buf;
    sub_100C66C40((void ***)v149);
LABEL_47:
    p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    goto LABEL_53;
  }

  __int16 v32 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    *(double *)&uint8_t buf[4] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoGnssLeechLocation,currentTime,%f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    *(_DWORD *)uint64_t v149 = 134217984;
    *(double *)&v149[4] = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoGnssLeechLocation,currentTime,%f",  COERCE_DOUBLE(v149));
    uint64_t v44 = (uint8_t *)v43;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v43);
    if (v44 != buf) {
      free(v44);
    }
    goto LABEL_47;
  }

void sub_100C667C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, ...)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1007984FC((uint64_t)va);
  double v10 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v10;
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

void sub_100C66880(void *a1, void **a2, double a3, double a4)
{
  unint64_t v7 = a1[6];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  double v10 = (void *)(v8 + 8 * (v7 >> 8));
  if (v9 == v8) {
    char v11 = 0LL;
  }
  else {
    char v11 = (_OWORD *)(*v10 + 16LL * v7);
  }
  double v12 = a4 + 1.0e-13;
  while (1)
  {
    if (v9 == v8)
    {
      uint64_t v14 = 0LL;
    }

    else
    {
      unint64_t v13 = a1[7] + a1[6];
      uint64_t v14 = *(void *)(v8 + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v13;
    }

    if (v11 == (_OWORD *)v14) {
      break;
    }
    if (*(double *)v11 <= v12 && *(double *)v11 + 1.0e-13 > a3)
    {
      uint64_t v17 = a2[1];
      unint64_t v16 = (unint64_t)a2[2];
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v19 = ((char *)v17 - (_BYTE *)*a2) >> 4;
        unint64_t v20 = v19 + 1;
        uint64_t v21 = v16 - (void)*a2;
        if (v21 >> 3 > v20) {
          unint64_t v20 = v21 >> 3;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          __int16 v23 = (char *)sub_100037038((uint64_t)(a2 + 2), v22);
        }
        else {
          __int16 v23 = 0LL;
        }
        uint64_t v24 = &v23[16 * v19];
        *(_OWORD *)uint64_t v24 = *v11;
        BOOL v26 = (char *)*a2;
        BOOL v25 = (char *)a2[1];
        BOOL v27 = v24;
        if (v25 != *a2)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }

          while (v25 != v26);
          BOOL v25 = (char *)*a2;
        }

        int v18 = v24 + 16;
        *a2 = v27;
        a2[1] = v24 + 16;
        a2[2] = &v23[16 * v22];
        if (v25) {
          operator delete(v25);
        }
      }

      else
      {
        *uint64_t v17 = *v11;
        int v18 = v17 + 1;
      }

      a2[1] = v18;
    }

    if ((_OWORD *)((char *)++v11 - *v10) == (_OWORD *)4096)
    {
      __int16 v28 = (_OWORD *)v10[1];
      ++v10;
      char v11 = v28;
    }

    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
  }

void *sub_100C66A34(void *result, uint64_t *a2, double a3, double a4)
{
  double v6 = result;
  unint64_t v7 = result[6];
  uint64_t v8 = result[3];
  uint64_t v9 = result[4];
  double v10 = (void *)(v8 + 8 * (v7 / 0x55));
  if (v9 == v8) {
    char v11 = 0LL;
  }
  else {
    char v11 = (__int128 *)(*v10 + 48 * (v7 % 0x55));
  }
  double v12 = a4 + 1.0e-13;
  while (1)
  {
    if (v9 == v8)
    {
      unint64_t v14 = 0LL;
    }

    else
    {
      unint64_t v13 = v6[7] + v6[6];
      unint64_t v14 = *(void *)(v8 + 8 * (v13 / 0x55)) + 48 * (v13 % 0x55);
    }

    if (*(double *)v11 <= v12 && *(double *)v11 + 1.0e-13 > a3)
    {
      unint64_t v16 = a2[1];
      if (v16 >= a2[2])
      {
        double result = (void *)sub_100C66D40(a2, v11);
      }

      else
      {
        sub_100C66CCC((uint64_t)a2, v11);
        double result = (void *)(v16 + 48);
      }

      a2[1] = (uint64_t)result;
    }

    v11 += 3;
    if ((__int128 *)((char *)v11 - *v10) == (__int128 *)4080)
    {
      uint64_t v17 = (__int128 *)v10[1];
      ++v10;
      char v11 = v17;
    }

    uint64_t v8 = v6[3];
    uint64_t v9 = v6[4];
  }

  return result;
}

void sub_100C66B64(uint64_t a1, int *a2)
{
}

void sub_100C66B6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 2960;
  uint64_t v4 = *a2;
  memset(v5, 0, sizeof(v5));
  sub_1002DE3C8(v5, a2[1], a2[2], 0x2E8BA2E8BA2E8BA3LL * ((a2[2] - a2[1]) >> 3));
  sub_100F47544(v3, (uint64_t)&v4, *(double *)(a1 + 3192));
  double v6 = (void **)v5;
  sub_100023498(&v6);
}

void sub_100C66BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100C66C14(id a1)
{
  qword_101934948 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_100C66C40(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100C66C80((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_100C66C80(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48LL)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

void *sub_100C66CCC(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  __int128 v4 = *a2;
  *(void *)(v3 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 32) = 0LL;
  *(void *)(v3 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  double result = sub_100AF5FD8( (void *)(v3 + 24),  *((const void **)a2 + 3),  *((void *)a2 + 4),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  *(void *)(a1 + 8) = v3 + 48;
  return result;
}

void sub_100C66D38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100C66D40(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555LL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v18 = a1 + 2;
  if (v9) {
    double v10 = (char *)sub_1000BB1F4(v7, v9);
  }
  else {
    double v10 = 0LL;
  }
  char v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  uint64_t v17 = &v10[48 * v9];
  __int128 v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)char v11 = v12;
  *((void *)v11 + 4) = 0LL;
  *((void *)v11 + 5) = 0LL;
  *((void *)v11 + 3) = 0LL;
  sub_100AF5FD8( (void *)v11 + 3,  *((const void **)a2 + 3),  *((void *)a2 + 4),  0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  v16 += 48;
  sub_100C66E78(a1, v15);
  uint64_t v13 = a1[1];
  sub_100C67018((uint64_t)v15);
  return v13;
}

void sub_100C66E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100C66E78(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C66EEC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C66EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - 8) = 0LL;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 48LL;
      *((void *)&v14 + 1) -= 48LL;
      a3 -= 48LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_100C66FA0((uint64_t)v11);
  return v9;
}

uint64_t sub_100C66FA0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100C66FD4(a1);
  }
  return a1;
}

void sub_100C66FD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }

    v1 += 48LL;
  }

uint64_t sub_100C67018(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100C6704C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 48LL;
    }
  }

uint64_t sub_100C67170(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_100C67470(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0x400000000LL;
  *(void *)&double result = 0x1000000000LL;
  a1[30] = 0x1000000000LL;
  return result;
}

unsigned __int16 *sub_100C67490(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)&__int128 v5 = a3;
  *((void *)&v5 + 1) = a2;
  double v6 = a4;
  return sub_1002E5BC0((unsigned __int16 *)(a1 + 240), &v5);
}

unsigned __int16 *sub_100C674C0(uint64_t a1, uint64_t a2)
{
  __int128 v13 = *(_OWORD *)a2;
  int v14 = *(_DWORD *)(a2 + 16);
  char v18 = 0;
  if (*(_WORD *)(a1 + 242))
  {
    unint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    double v6 = -1.0;
    double v7 = 1.79769313e308;
    do
    {
      uint64_t v8 = sub_100C6786C((unsigned __int16 *)(a1 + 240), v4);
      double v9 = *(double *)(a2 + 8);
      double v10 = vabdd_f64(*(double *)v8, v9);
      if (v10 < v7 && v10 < 3.0)
      {
        uint64_t v5 = *(void *)(v8 + 8);
        double v6 = *(double *)(v8 + 16);
        double v7 = v10;
      }

      ++v4;
    }

    while (v4 < *(unsigned __int16 *)(a1 + 242));
  }

  else
  {
    uint64_t v5 = 0LL;
    double v9 = *(double *)(a2 + 8);
    double v6 = -1.0;
  }

  uint64_t v17 = v5;
  double v11 = v9 - *(double *)a1;
  double v15 = v6;
  double v16 = v11;
  return sub_100C675BC((unsigned __int16 *)(a1 + 8), &v13);
}

unsigned __int16 *sub_100C675BC(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0LL;
  }
  unint64_t v4 = &result[28 * (v3 - v2)];
  __int128 v6 = a2[1];
  __int128 v5 = a2[2];
  __int128 v7 = *a2;
  *((void *)v4 + 7) = *((void *)a2 + 6);
  *(_OWORD *)(v4 + 4) = v7;
  *(_OWORD *)(v4 + 2sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v5;
  *(_OWORD *)(v4 + 12) = v6;
  unsigned int v8 = result[1];
  unint64_t v9 = *((unsigned int *)result + 1);
  if (v9 <= v8)
  {
    unint64_t v10 = *result + 1LL;
    if (v10 < v9) {
      LOWORD(v9) = 0;
    }
    *double result = v10 - v9;
  }

  else
  {
    result[1] = v8 + 1;
  }

  return result;
}

uint64_t sub_100C67634(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 10)) {
    return 0LL;
  }
  unsigned __int8 v2 = 0;
  unint64_t v3 = 0LL;
  unint64_t v4 = (unsigned __int16 *)(a1 + 8);
  char v5 = 1;
  do
  {
    BOOL v6 = *(_DWORD *)(sub_100C67A94(v4, v3) + 16) != 0;
    v2 |= v6;
    v5 &= v6;
    ++v3;
    unint64_t v7 = *(unsigned __int16 *)(a1 + 10);
  }

  while (v3 < v7);
  if (!*(_WORD *)(a1 + 10)) {
    return 0LL;
  }
  unsigned int v9 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v8 = a1 + 8;
  unint64_t v10 = v7 + v9 - 1;
  unint64_t v11 = *(unsigned int *)(v8 + 4);
  if (v10 < v11) {
    unint64_t v11 = 0LL;
  }
  uint64_t v12 = v8 + 56 * (v10 - v11);
  uint64_t v13 = *(void *)(v12 + 48);
  double v14 = *(double *)(v12 + 32);
  if ((_DWORD)v7 == 2) {
    char v15 = v5;
  }
  else {
    char v15 = 0;
  }
  BOOL v16 = v14 > 0.999 && v13 == 19;
  uint64_t result = 1LL;
  if (!v16 && (v15 & 1) == 0) {
    return (v7 > 2) & v2;
  }
  return result;
}

BOOL sub_100C67710(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return 0LL;
  }
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  unint64_t v4 = v1 + v3 - 1;
  unint64_t v5 = *(unsigned int *)(v2 + 4);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  uint64_t v6 = v2 + 56 * (v4 - v5);
  double v7 = *(double *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 48);
  return v7 < 0.01 && v8 != 0;
}

uint64_t sub_100C67768(uint64_t a1, double *a2, unsigned __int16 *a3)
{
  double v6 = *a2;
  double v7 = *(double *)a1;
  if (*a2 < *(double *)a1)
  {
    *(void *)a1 = 0LL;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0;
    double v6 = *a2;
    double v7 = 0.0;
  }

  if (v6 - v7 > 9.0) {
    *(_DWORD *)(a1 + 8) = 0;
  }
  sub_100C674C0(a1, (uint64_t)a2);
  *(double *)a1 = *a2;
  uint64_t result = sub_100C67710(a1);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 8) = 0;
  }

  else
  {
    *(_DWORD *)a3 = 0;
    uint64_t result = sub_100C67634(a1);
    if ((_DWORD)result && *(_WORD *)(a1 + 10))
    {
      unint64_t v9 = 0LL;
      do
      {
        uint64_t result = sub_100C67A94((unsigned __int16 *)(a1 + 8), v9);
        if (!*(_BYTE *)(result + 48))
        {
          unint64_t v10 = (__int128 *)sub_100C67A94((unsigned __int16 *)(a1 + 8), v9);
          sub_100C675BC(a3, v10);
          uint64_t result = sub_100C67A94((unsigned __int16 *)(a1 + 8), v9);
          *(_BYTE *)(result + 48) = 1;
        }

        ++v9;
      }

      while (v9 < *(unsigned __int16 *)(a1 + 10));
    }
  }

  return result;
}

uint64_t sub_100C6786C(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187A010);
    }
    double v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187A010);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      unint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CLSwimStrokeVoter::WorkoutClassificationEntry>::operator[](const size_t) const [T = CLSwimStrok eVoter::WorkoutClassificationEntry]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

void sub_100C67A68(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100C67A94(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187A010);
    }
    double v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)__int128 buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187A010);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      unint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CLSwimStrokeVoter::BufferedStroke>::operator[](const size_t) const [T = CLSwimStrokeVoter::BufferedStroke]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

uint64_t sub_100C67C90(uint64_t a1)
{
  *(void *)a1 = off_10187A040;
  *(void *)(a1 + 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(void *)(a1 + 64) = 0x408C200000000000LL;
  *(_DWORD *)(a1 + 72) = 0xFFFF;
  *(void *)(a1 + 84) = 0LL;
  *(void *)(a1 + 76) = 0LL;
  *(_OWORD *)(a1 + 92) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 14sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = _Q0;
  *(_DWORD *)(a1 + 156) = 0;
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 232) = off_101850568;
  *(void *)(a1 + 188) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 196) = 0x7FFFFFFF;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 20sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(_BYTE *)(a1 + 224) = 0;
  *(void *)(a1 + 24sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 30LL;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 0LL;
  sub_100D2D9A4(a1 + 320);
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 44sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 36sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  sub_1002F0B04(&v13);
  int v7 = sub_1002A82BC(v13, "AutopauseRequiredDuration", &v15);
  int v8 = v7;
  int v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8) {
        return a1;
      }
      goto LABEL_6;
    }
  }

  if (v7) {
LABEL_6:
  }
    *(void *)(a1 + 64) = v15;
  return a1;
}

void sub_100C67DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  v2[29] = v4 + 16;
  sub_100210578(v2 + 33);
  _Unwind_Resume(a1);
}

void *sub_100C67E38(void *a1)
{
  *a1 = off_10187A040;
  sub_100C69D48(a1 + 51);
  sub_1001B9D48(a1 + 45);
  a1[29] = off_101850568;
  sub_100210578(a1 + 33);
  return a1;
}

void sub_100C67E90(void *a1)
{
  uint64_t v1 = sub_100C67E38(a1);
  operator delete(v1);
}

void sub_100C67EA4(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = xmmword_1012E0070;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  *(_DWORD *)(a1 + 72) = 0xFFFF;
  *(void *)(a1 + 84) = 0LL;
  *(void *)(a1 + 76) = 0LL;
  *(_OWORD *)(a1 + 92) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 14sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = _Q0;
  *(_DWORD *)(a1 + 156) = 0;
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 188) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 196) = 0x7FFFFFFF;
  *(void *)(a1 + 20sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  *(_BYTE *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0u;
  sub_1003D33C8(a1 + 320);
  int v7 = *(void ***)(a1 + 368);
  uint64_t v8 = *(void *)(a1 + 376);
  *(void *)(a1 + 40sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 376);
      int v7 = (void **)(*(void *)(a1 + 368) + 8LL);
      *(void *)(a1 + 368) = v7;
      unint64_t v9 = v10 - (void)v7;
    }

    while (v9 > 0x10);
  }

  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 51LL;
  }

  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v11 = 102LL;
  }

  *(void *)(a1 + 392) = v11;
LABEL_8:
  int v12 = *(void ***)(a1 + 416);
  uint64_t v13 = *(void *)(a1 + 424);
  *(void *)(a1 + 448) = 0LL;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 424);
      int v12 = (void **)(*(void *)(a1 + 416) + 8LL);
      *(void *)(a1 + 416) = v12;
      unint64_t v14 = v15 - (void)v12;
    }

    while (v14 > 0x10);
  }

  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 25LL;
  }

  else
  {
    if (v14 >> 3 != 2) {
      return;
    }
    uint64_t v16 = 51LL;
  }

  *(void *)(a1 + 44sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v16;
}

uint64_t sub_100C67FE8(unsigned int a1)
{
  if (a1 < 0xF) {
    return (0x2E1Eu >> a1) & 1;
  }
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187A060);
  }
  unsigned int v3 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__int128 buf = 67240192;
    unsigned int v9 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Unknown whether or not provider %{public}d is a candidate for autopause",  buf,  8u);
  }

  BOOL v4 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187A060);
    }
    v7[0] = 67240192;
    v7[1] = a1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Unknown whether or not provider %{public}d is a candidate for autopause",  v7,  8);
    double v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLAutopauseCalculator::isLocationTypeSupported(CLLocationType)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
    return 0LL;
  }

  return result;
}

__n128 sub_100C681B4(uint64_t a1, unint64_t *a2, _DWORD *a3, int *a4)
{
  result.n128_u64[0] = *a2;
  *(void *)(a1 + 24) = *a2;
  unint64_t v5 = (__n128 *)(a1 + 24);
  int v6 = *a4;
  *(_DWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 36) = v6;
  if (*a3 > 0xBu || ((1 << *a3) & 0xC06) == 0)
  {
    __n128 result = *v5;
    *(__n128 *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *v5;
  }

  else if (*(_DWORD *)(a1 + 48) != 2)
  {
    result.n128_u64[0] = *a2;
    *(void *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *a2;
    int v8 = *a4;
    *(_DWORD *)(a1 + 48) = 2;
    *(_DWORD *)(a1 + 52) = v8;
  }

  return result;
}

uint64_t sub_100C6821C(uint64_t a1, void *a2)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int v11 = 0;
  if (!a2[5]) {
    return 0LL;
  }
  unint64_t v3 = 0LL;
  do
  {
    sub_100C68324( a1,  *(_DWORD *)(*(void *)(a2[1] + 8 * ((v3 + a2[4]) / 0x66)) + 40 * ((v3 + a2[4]) % 0x66) + 32),  (_DWORD *)&v13 + 1,  &v13,  (_DWORD *)&v12 + 1,  &v12,  &v11);
    ++v3;
  }

  while (a2[5] > v3);
  int v4 = v12;
  int v5 = HIDWORD(v12);
  int v6 = v13;
  if ((int)v13 > (HIDWORD(v13) & ~(SHIDWORD(v13) >> 31)))
  {
    int v7 = 4;
  }

  else
  {
    int v6 = HIDWORD(v13) & ~(SHIDWORD(v13) >> 31);
    int v7 = 2 * (SHIDWORD(v13) > 0);
  }

  if (SHIDWORD(v12) > v6)
  {
    int v8 = 8;
  }

  else
  {
    int v5 = v6;
    int v8 = v7;
  }

  if ((int)v12 > v5)
  {
    unsigned int v9 = 5;
  }

  else
  {
    int v4 = v5;
    unsigned int v9 = v8;
  }

  if (v11 <= v4) {
    return v9;
  }
  else {
    return 0LL;
  }
}

void sub_100C68324(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2 > 40)
  {
    if (a2 == 56)
    {
LABEL_8:
      a3 = a6;
    }

    else
    {
      a3 = a6;
      if (a2 != 52)
      {
        a3 = a4;
        if (a2 != 41) {
LABEL_7:
        }
          a3 = a7;
      }
    }
  }

  else
  {
    switch(a2)
    {
      case 1:
      case 2:
      case 10:
      case 11:
        break;
      case 4:
        a3 = a4;
        break;
      case 5:
        goto LABEL_8;
      case 8:
        a3 = a5;
        break;
      default:
        goto LABEL_7;
    }
  }

  ++*a3;
}

uint64_t sub_100C6839C(void *a1)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int v7 = 0;
  if (a1[56])
  {
    unint64_t v2 = 0LL;
    do
    {
      sub_100C68324( (uint64_t)a1,  *(_DWORD *)(*(void *)(a1[52] + 8 * ((v2 + a1[55]) / 0x33)) + 80 * ((v2 + a1[55]) % 0x33) + 72),  (_DWORD *)&v9 + 1,  &v9,  (_DWORD *)&v8 + 1,  &v8,  &v7);
      ++v2;
    }

    while (a1[56] > v2);
  }

  uint64_t v3 = sub_100C6821C((uint64_t)a1, a1 + 45);
  sub_100C68324(v3, v3, (_DWORD *)&v9 + 1, &v9, (_DWORD *)&v8 + 1, &v8, &v7);
  int v4 = HIDWORD(v9) & ~(SHIDWORD(v9) >> 31);
  unsigned int v5 = 2 * (SHIDWORD(v9) > 0);
  if ((int)v9 > v4)
  {
    int v4 = v9;
    unsigned int v5 = 4;
  }

  if (SHIDWORD(v8) > v4)
  {
    int v4 = HIDWORD(v8);
    unsigned int v5 = 8;
  }

  if ((int)v8 > v4)
  {
    int v4 = v8;
    unsigned int v5 = 5;
  }

  if (v7 <= v4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

void sub_100C684C8(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_OWORD *)(a2 + 3) = xmmword_1012CFB80;
  *(_OWORD *)(a2 + 5) = xmmword_1012CFB80;
  uint64_t v3 = a3[5];
  *((_DWORD *)a2 + 14) = v3;
  a2[8] = 0LL;
  if (!v3) {
    return;
  }
  if ((int)v3 >= 1)
  {
    unsigned int v5 = 0;
    unint64_t v6 = a3[4];
    uint64_t v7 = v3;
    uint64_t v8 = v3;
    do
    {
      ++v6;
      --v8;
    }

    while (v8);
    double v9 = (double)(int)v3;
    double v10 = (double)v5 / (double)(int)v3;
    unint64_t v11 = a3[4];
    uint64_t v12 = a3[1];
    if (v10 > 0.68)
    {
      float64x2_t v13 = *(float64x2_t *)(a2 + 1);
      double v14 = 1.79769313e308;
      double v15 = -1.79769313e308;
      double v16 = -1.79769313e308;
      double v17 = 1.79769313e308;
      while (1)
      {
        uint64_t v18 = *(void *)(v12 + 8 * (v11 / 0x66));
        float64x2_t v19 = *(float64x2_t *)(v18 + 40 * (v11 % 0x66) + 8);
        float64x2_t v13 = vaddq_f64(v19, v13);
        *(float64x2_t *)(a2 + 1) = v13;
        if (v19.f64[0] > v15)
        {
          a2[4] = *(void *)&v19.f64[0];
          double v15 = v19.f64[0];
        }

        if (v19.f64[0] < v14)
        {
          a2[3] = *(void *)&v19.f64[0];
          double v14 = v19.f64[0];
        }

        v19.f64[0] = v19.f64[1];
        if (v19.f64[1] > v16)
        {
          a2[6] = *(void *)&v19.f64[1];
          double v16 = v19.f64[1];
        }

        if (v19.f64[1] >= v17) {
          goto LABEL_19;
        }
        a2[5] = *(void *)&v19.f64[1];
LABEL_20:
        ++v11;
        double v17 = v19.f64[0];
        if (!--v7) {
          goto LABEL_46;
        }
      }

      LODWORD(v3) = v3 - 1;
LABEL_19:
      v19.f64[0] = v17;
      goto LABEL_20;
    }

    double v23 = 0.0;
    uint64_t v24 = v3;
    do
    {
      double v23 = v23 + *(double *)(*(void *)(v12 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66) + 24);
      ++v11;
      --v24;
    }

    while (v24);
    unint64_t v25 = a3[4];
    double v22 = 0.0;
    double v20 = 0.0;
    double v21 = v23 / v9;
    do
    {
      double v26 = *(double *)(*(void *)(a3[1] + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66) + 24) - v21;
      double v22 = v22 + v26 * v26;
      double v20 = v20 + v26;
      ++v25;
      --v7;
    }

    while (v7);
LABEL_28:
    double v27 = (double)((int)v3 - 1);
    double v28 = sqrt((v22 - v20 * v20 / v9) / v27);
    double v29 = (v21 + v28) * 1.5;
    if (v29 > 300.0) {
      double v29 = 300.0;
    }
    *((double *)a2 + 8) = v29;
    if ((int)v3 >= 1)
    {
      unint64_t v30 = a3[4];
      uint64_t v31 = a3[1];
      double v32 = v21 + v28 * 3.0;
      uint64_t v33 = v3;
      double v34 = 1.79769313e308;
      double v35 = -1.79769313e308;
      float64x2_t v36 = *(float64x2_t *)(a2 + 1);
      double v37 = -1.79769313e308;
      double v38 = 1.79769313e308;
      while (1)
      {
        uint64_t v39 = *(void *)(v31 + 8 * (v30 / 0x66));
        float64x2_t v40 = *(float64x2_t *)(v39 + 40 * (v30 % 0x66) + 8);
        float64x2_t v36 = vaddq_f64(v40, v36);
        *(float64x2_t *)(a2 + 1) = v36;
        if (v40.f64[0] > v35)
        {
          a2[4] = *(void *)&v40.f64[0];
          double v35 = v40.f64[0];
        }

        if (v40.f64[0] < v34)
        {
          a2[3] = *(void *)&v40.f64[0];
          double v34 = v40.f64[0];
        }

        v40.f64[0] = v40.f64[1];
        if (v40.f64[1] > v37)
        {
          a2[6] = *(void *)&v40.f64[1];
          double v37 = v40.f64[1];
        }

        if (v40.f64[1] >= v38) {
          goto LABEL_44;
        }
        a2[5] = *(void *)&v40.f64[1];
LABEL_45:
        ++v30;
        double v38 = v40.f64[0];
        if (!--v33) {
          goto LABEL_46;
        }
      }

      LODWORD(v3) = v3 - 1;
LABEL_44:
      v40.f64[0] = v38;
      goto LABEL_45;
    }

    goto LABEL_46;
  }

  double v9 = (double)(int)v3;
  double v20 = 0.0;
  double v21 = 0.0 / (double)(int)v3;
  if (v21 <= 0.68)
  {
    double v22 = 0.0;
    goto LABEL_28;
  }

void sub_100C68AB4(uint64_t a1, _OWORD *a2, _BYTE *a3)
{
  __int128 v5 = a2[7];
  __int128 v116 = a2[6];
  __int128 v117 = v5;
  v118[0] = a2[8];
  *(_OWORD *)((char *)v118 + 12) = *(_OWORD *)((char *)a2 + 140);
  __int128 v6 = a2[3];
  v114[2] = a2[2];
  v114[3] = v6;
  __int128 v7 = a2[5];
  v115[0] = a2[4];
  v115[1] = v7;
  __int128 v8 = a2[1];
  v114[0] = *a2;
  v114[1] = v8;
  *a3 = 0;
  unsigned int v9 = v116;
  double v10 = sub_100295E8C();
  *(double *)((char *)v115 + 12) = v10;
  if (*(double *)(a1 + 92) > 0.0 && v10 - *(double *)(a1 + 148) > *(double *)(a1 + 64))
  {
    sub_100C67EA4(a1);
    *a3 = 1;
  }

  __int128 v11 = v117;
  *(_OWORD *)(a1 + 168) = v116;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 20sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v118[0];
  *(_OWORD *)(a1 + 212) = *(_OWORD *)((char *)v118 + 12);
  __int128 v12 = v114[3];
  *(_OWORD *)(a1 + 104) = v114[2];
  *(_OWORD *)(a1 + 12sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v12;
  __int128 v13 = v115[1];
  *(_OWORD *)(a1 + 136) = v115[0];
  *(_OWORD *)(a1 + 152) = v13;
  __int128 v14 = v114[1];
  *(_OWORD *)(a1 + 72) = v114[0];
  *(_OWORD *)(a1 + 88) = v14;
  if (v9 <= 9 && ((1 << v9) & 0x20E) != 0 && *(double *)((char *)&v114[2] + 12) >= 0.0)
  {
    if (*(void *)(a1 + 304))
    {
      if (v10 - *(double *)(a1 + 312) < 3.0)
      {
        sub_1007C3A68(a1 + 232, (double *)((char *)&v114[2] + 12));
        *(void *)(a1 + 312) = *(void *)((char *)v115 + 12);
        unint64_t v15 = *(void *)(a1 + 304);
        if (v15 && v15 >= *(void *)(a1 + 240) && *(double *)(a1 + 248) / (double)v15 > 6.0)
        {
          sub_100C67EA4(a1);
LABEL_57:
          *a3 = 1;
          return;
        }

        goto LABEL_16;
      }

      sub_1007C39F0((void *)(a1 + 232));
    }

    sub_1007C3A68(a1 + 232, (double *)((char *)&v114[2] + 12));
    *(void *)(a1 + 312) = *(void *)((char *)v115 + 12);
  }

void sub_100C696A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_100C696C8(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100C69DDC((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  __int128 v6 = (void *)(v5 + 8 * (v4 / 0x66));
  uint64_t v7 = *v6 + 40 * (v4 % 0x66);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080LL;
  }
  __int128 v8 = *a2;
  __int128 v9 = a2[1];
  *(void *)(v7 - 8) = *((void *)a2 + 4);
  *(_OWORD *)(v7 - 24) = v9;
  *(_OWORD *)(v7 - 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v8;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1012E2F20);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

int64x2_t sub_100C69770(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100C6A0F4((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  __int128 v6 = (void *)(v5 + 8 * (v4 / 0x33));
  uint64_t v7 = *v6 + 80 * (v4 % 0x33);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0LL;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080LL;
  }
  *(_OWORD *)(v7 - 8sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *a2;
  __int128 v8 = a2[1];
  __int128 v9 = a2[2];
  __int128 v10 = a2[4];
  *(_OWORD *)(v7 - 32) = a2[3];
  *(_OWORD *)(v7 - 16) = v10;
  *(_OWORD *)(v7 - 64) = v8;
  *(_OWORD *)(v7 - 48) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1012E2F20);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

unint64_t sub_100C6981C(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 51 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  __int128 v9 = (char **)(v8 + 8 * (v7 / 0x33));
  if (a1[2] == v8) {
    __int128 v10 = 0LL;
  }
  else {
    __int128 v10 = &(*v9)[80 * (v7 % 0x33)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 51 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x33);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005AB848(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005AB848(v24, v6);
      sub_100C6A480( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_1005AB848(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (_BYTE **)(v15 + 8 * (v14 / 0x33));
      if (a1[2] == v15) {
        double v17 = 0LL;
      }
      else {
        double v17 = &(*v16)[80 * (v14 % 0x33)];
      }
      v24[0] = v12;
      sub_100C6A638(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100C6A40C(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x33));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 80 * (v19 % 0x33);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005AB848(v24, v11);
  return v24[0].n128_u64[0];
}

unint64_t sub_100C69A9C(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = 102 * (a4 - a2)
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  __int128 v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8) {
    __int128 v10 = 0LL;
  }
  else {
    __int128 v10 = &(*v9)[40 * (v7 % 0x66)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = 102 * ((char **)a2 - v9)
  }
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10025BF98(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10025BF98(v24, v6);
      sub_100C6A7B8( v9,  v10,  (char **)v12.n128_u64[0],  (char *)v12.n128_u64[1],  v24[0].n128_u64[0],  (char *)v24[0].n128_u64[1],  v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
    }

    else
    {
      sub_10025BF98(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (_BYTE **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15) {
        double v17 = 0LL;
      }
      else {
        double v17 = &(*v16)[40 * (v14 % 0x66)];
      }
      v24[0] = v12;
      sub_100C6A970(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10025C0A0(a1, 1) & 1) != 0)
        ;
    }
  }

  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20) {
    unint64_t v22 = 0LL;
  }
  else {
    unint64_t v22 = *v21 + 40 * (v19 % 0x66);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10025BF98(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_100C69D1C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100C69D48(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 25LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 51LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

void sub_100C69DDC(void **a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 102 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x66)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    __int128 v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_1000071BC(v7, v11);
      double v43 = (char *)__p;
      double v44 = (char *)__p;
      unint64_t v45 = (char *)__p + 8 * v12;
      id v41 = operator new(0xFF0uLL);
      sub_1000ECB90(&__p, &v41);
      __n128 v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000071BC((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              uint64_t v31 = __p;
              std::string __p = v24;
              double v43 = &v24[8 * (v23 >> 2)];
              double v44 = v14;
              unint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }

              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              double v43 = v22;
              double v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }

      uint64_t v36 = *a1;
      double v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      double v43 = v33;
      unint64_t v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      double v44 = v13;
      unint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 51LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 102;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        double v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFF0uLL);
        sub_1000EC960(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        std::string __p = operator new(0xFF0uLL);
      }

      sub_1000ECA74((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 51LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 102;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 102;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1000ECA74((uint64_t)a1, &__p);
  }

void sub_100C6A0A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C6A0F4(void **a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 51 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x33)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    __int128 v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_1000071BC(v7, v11);
      double v43 = (char *)__p;
      double v44 = (char *)__p;
      unint64_t v45 = (char *)__p + 8 * v12;
      id v41 = operator new(0xFF0uLL);
      sub_1000ECB90(&__p, &v41);
      __n128 v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000071BC((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              uint64_t v31 = __p;
              std::string __p = v24;
              double v43 = &v24[8 * (v23 >> 2)];
              double v44 = v14;
              unint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }

              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              double v43 = v22;
              double v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }

      uint64_t v36 = *a1;
      double v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      double v43 = v33;
      unint64_t v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      double v44 = v13;
      unint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 25LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 51;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        double v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFF0uLL);
        sub_1000EC960(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        std::string __p = operator new(0xFF0uLL);
      }

      sub_1000ECA74((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 25LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 51;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 51;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1000ECA74((uint64_t)a1, &__p);
  }

void sub_100C6A3C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C6A40C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 51 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x33) {
    a2 = 1;
  }
  if (v5 < 0x66) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

__n128 sub_100C6A480@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100C6A54C(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      int64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      BOOL v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4080;
    }

    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }

  sub_100C6A54C(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100C6A54C@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    __int128 v9 = a1;
  }

  else
  {
    __int128 v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 4);
      v11 -= 80 * v12;
      a4 -= 80 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 80 * v12 - 4);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }

    if ((char *)(*v6 + 4080LL) == a4)
    {
      int64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100C6A638(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4080LL); ; uint64_t i = v12 + 4080)
    {
      sub_100C6A6C8(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100C6A6C8(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100C6A6C8@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    __int128 v9 = __src;
  }

  else
  {
    __int128 v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 4);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4);
      if (v12) {
        double result = memmove(__dst, v7, 80 * v12 - 4);
      }
      v7 += 80 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __uuid_t dst = v14;
    }

    __dst += 80 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

__n128 sub_100C6A7B8@<Q0>( char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
  }

  else
  {
    __n128 v13 = a3 - 1;
    unint64_t v12 = *a3;
    uint64_t v14 = a4;
    __int128 v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100C6A884(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      __int128 v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      BOOL v17 = *v13--;
      unint64_t v12 = v17;
      uint64_t v14 = v17 + 4080;
    }

    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }

  sub_100C6A884(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100C6A884@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    __int128 v9 = a1;
  }

  else
  {
    __int128 v9 = a2;
    uint64_t v10 = *a3;
    int64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 40 * v12 - 4);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }

    if ((char *)(*v6 + 4080LL) == a4)
    {
      __int128 v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100C6A970(void *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (_BYTE *)(*a1 + 4080LL); ; uint64_t i = v12 + 4080)
    {
      sub_100C6AA00(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (_BYTE *)*v10++;
      a2 = v12;
    }

    a2 = *a3;
  }

  sub_100C6AA00(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100C6AA00@<X0>( _BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    __int128 v9 = __src;
  }

  else
  {
    __int128 v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 40 * v12 - 4);
      }
      v7 += 40 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __uuid_t dst = v14;
    }

    __dst += 40 * v12;
    else {
      --v6;
    }
  }

  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_100C6AAF0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(void *)a1 = off_10187A090;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 1;
  return a1;
}

uint64_t sub_100C6AB50(uint64_t a1)
{
  *(void *)a1 = off_10187A090;

  return a1;
}

void sub_100C6AB9C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C6AB50(a1);
  operator delete(v1);
}

uint64_t sub_100C6ABB0(id *a1, void *a2)
{
  id v4 = a2;

  a1[2] = a2;
  return (*((uint64_t (**)(id *))*a1 + 3))(a1);
}

void sub_100C6ABEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v9);
  uint64_t v6 = v10;
  if (v10)
  {
    int v7 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_100C6AC78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C6AC8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6AC9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ACAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 48LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ACBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ACCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ACDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ACEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 104LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ACFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 112LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6AD0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(**(void **)(a1 + 32) + 120LL))( *(void *)(a1 + 32),  *(void *)(a1 + 24),  a2,  *(void *)(a1 + 16));
}

void sub_100C6AD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v3 + 128LL))(v3, v4, __p, a3);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C6AD90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100C6ADAC(uint64_t a1, char a2)
{
  return [*(id *)(a1 + 16) isAuthorizedForServiceTypeMask:1 << a2];
}

uint64_t sub_100C6ADC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 136LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ADD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 144LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ADE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6ADF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6AE00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6AE10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6AE20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 176LL))(*(void *)(a1 + 32));
}

uint64_t sub_100C6AE30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 184LL))(*(void *)(a1 + 32));
}

std::string *sub_100C6AE40(int a1, std::string *this)
{
  return std::string::assign(this, "");
}

void *sub_100C6AE50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "clientAnchor"), "UTF8String");
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "";
  }
  return sub_1010DDBC0(a2, v4);
}

uint64_t sub_100C6AE8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = rand();
  return result;
}

uint64_t sub_100C6AEEC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100C6B1E8(a1);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a2 + 180))
    {
      uint64_t result = sub_100869800(a2);
      if ((_DWORD)result)
      {
        id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
        objc_msgSend( v5,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100C6B224(a1)),  @"wifiHarvestCentroidHasGoodZAxis");
        uint64_t v6 = (double *)sub_100F4BF20();
        BOOL v7 = 0LL;
        if (*(double *)(a2 + 28) > -500.0)
        {
          double v8 = *(double *)(a2 + 36);
          if (v8 > 0.0) {
            BOOL v7 = v6[44] >= v8;
          }
        }

        objc_msgSend( v5,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7),  @"originalWifi1FixHasGoodZAxis");
        if (sub_100C6B224(a1))
        {
          uint64_t v9 = (double *)sub_100F4BF20();
          double v10 = *(double *)(a2 + 28);
          if (v10 > -500.0)
          {
            double v11 = *(double *)(a2 + 36);
            if (v11 > 0.0 && v9[44] >= v11) {
              objc_msgSend( v5,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  vabdd_f64(*(double *)(a1 + 16), v10)),  @"zAxisDifference");
            }
          }
        }

        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_10187A0C0);
        }
        unint64_t v12 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138543362;
          id v18 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Submitting CoreAnalytics event for associated AP ZAxis comparisons, %{public}@",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_10187A0C0);
          }
          int v15 = 138543362;
          id v16 = v5;
          __n128 v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "Submitting CoreAnalytics event for associated AP ZAxis comparisons, %{public}@",  &v15,  12);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLWifiAssociatedApZAxisComparator::submitMetrics(const CLWifiAccessPoint &, const CL::Wifi1::Typ es::ComputedLocation &)",  "%s\n",  v13);
        }

        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        void v14[2] = sub_100C6B290;
        v14[3] = &unk_1018486D8;
        _DWORD v14[4] = v5;
        return AnalyticsSendEventLazy(@"com.apple.clx.associatedap.zaxiscomparison", v14);
      }
    }
  }

  return result;
}

uint64_t sub_100C6B1E8(uint64_t a1)
{
  return sub_100869800((uint64_t)v2);
}

BOOL sub_100C6B224(uint64_t a1)
{
  uint64_t v1 = (double *)sub_100F4BF20();
  BOOL result = 0LL;
  if (v4 > -500.0 && v5 > 0.0) {
    return v1[44] >= v5;
  }
  return result;
}

uint64_t sub_100C6B290(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100C6B298(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100C6B2C4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100C6B360(_Unwind_Exception *a1)
{
}

void sub_100C6B378()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100C6B404(_Unwind_Exception *a1)
{
}

uint64_t sub_100C6B41C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10039EE84(a1, a2);
  *(void *)uint64_t v3 = off_10187A0F0;
  *(void *)(v3 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  *(_BYTE *)(v3 + 168) = 0;
  *(void *)(a1 + 176) = [*(id *)(v3 + 40) newTimer];
  *(_BYTE *)(a1 + 184) = 0;
  unsigned __int8 v6 = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 185), "ForceWatchToSubscribeToAltitudeUpdates", &v6, 0);
  unsigned __int8 v6 = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 188), "AbsoluteAltitudeEnabled", &v6, 0);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100C6B508;
  void v5[3] = &unk_10181D3D0;
  v5[4] = a1;
  [*(id *)(a1 + 176) setHandler:v5];
  *(_BYTE *)(a1 + 168) = sub_1004FD160() ^ 1;
  return a1;
}

void sub_100C6B4EC(_Unwind_Exception *a1)
{
}

id sub_100C6B508(uint64_t a1)
{
  return sub_100C6B510(*(void *)(a1 + 32));
}

id sub_100C6B510(uint64_t a1)
{
  if ((sub_10039F854() & 1) != 0)
  {
    sub_100C6D044((unsigned __int8 *)a1, 1);
    uint64_t v2 = *(void **)(a1 + 176);
    double v3 = 1.79769313e308;
    return [v2 setNextFireDelay:v3];
  }

  double Current = CFAbsoluteTimeGetCurrent();
  [(id)qword_1019A0F88 pairedDeviceLastSeenTimestamp];
  if (Current - v5 <= 3299.0)
  {
    uint64_t v2 = *(void **)(a1 + 176);
    double v3 = 3300.0;
    return [v2 setNextFireDelay:v3];
  }

  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10187A238);
  }
  unsigned __int8 v6 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Spectator subscriptions expired",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10187A238);
    }
    v10[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  0LL,  "#Warning Spectator subscriptions expired",  v10,  2);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierWatch::checkAndToggleSpectatorSubscriptions()",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  id result = (id)sub_100C6D044((unsigned __int8 *)a1, 0);
  *(_BYTE *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_100C6B764(id *a1)
{
  *a1 = off_10187A0F0;

  (*((void (**)(id *))*a1 + 2))(a1);
  return sub_10039F868(a1);
}

void sub_100C6B7B0(id *a1)
{
  uint64_t v1 = (void *)sub_100C6B764(a1);
  operator delete(v1);
}

void sub_100C6B7C4(uint64_t a1, int a2, void *a3)
{
  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10187A238);
  }
  unsigned __int8 v6 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = [a3 length];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Received companion message,type,%d,size,%lu",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10187A238);
    }
    uint64_t v97 = qword_1019346D8;
    *(_DWORD *)double v134 = 67109376;
    *(_DWORD *)&v134[4] = a2;
    *(_WORD *)&v134[8] = 2048;
    *(void *)&v134[10] = [a3 length];
    LODWORD(v126) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v97,  2LL,  "Received companion message,type,%d,size,%lu",  v134,  *(void *)&v126);
    uint64_t v99 = (uint8_t *)v98;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v98);
    if (v99 != buf) {
      free(v99);
    }
  }

  switch(a2)
  {
    case 2:
      *(void *)double v134 = 0LL;
      id v29 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  v134);
      if (!*(void *)v134)
      {
        uint64_t v30 = v29;
        if ([v29 count] == (id)9)
        {
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 0), "doubleValue");
          *(void *)__int128 buf = v31;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(void *)&uint8_t buf[8] = v32;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 5), "doubleValue");
          *(void *)&uint8_t buf[16] = v33;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 2), "doubleValue");
          *(void *)&uint8_t buf[24] = v34;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 3), "doubleValue");
          *(void *)&_BYTE buf[32] = v35;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 8), "doubleValue");
          *(void *)&_BYTE buf[40] = v36;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 4), "doubleValue");
          *(void *)&buf[48] = v37;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 6), "doubleValue");
          *(void *)&buf[56] = v38;
          objc_msgSend(objc_msgSend(v30, "objectAtIndexedSubscript:", 7), "doubleValue");
          *(_OWORD *)&buf[64] = v39;
          *(_DWORD *)&buf[176] = 0;
          *(void *)&buf[184] = 0LL;
          *(void *)&buf[80] = 0LL;
          *(_DWORD *)&buf[88] = 0;
          memset(&buf[96], 0, 73);
          LODWORD(v131[0]) = 3;
          goto LABEL_130;
        }
      }

      if (qword_1019346D0 != -1) {
        dispatch_once(&qword_1019346D0, &stru_10187A238);
      }
      __int16 v87 = (os_log_s *)qword_1019346D8;
      if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "#Warning error serializing OdometerCyclingData",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346D0 != -1) {
          dispatch_once(&qword_1019346D0, &stru_10187A238);
        }
        LOWORD(v131[0]) = 0;
        LODWORD(v126) = 2;
        double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  0LL,  "#Warning error serializing OdometerCyclingData",  v131,  *(void *)&v126);
        goto LABEL_115;
      }

      return;
    case 6:
      *(void *)double v134 = 0LL;
      id v40 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  v134);
      if (!*(void *)v134)
      {
        id v41 = v40;
        if ([v40 count] == (id)3)
        {
          memset(buf, 0, 192);
          objc_msgSend(objc_msgSend(v41, "objectAtIndexedSubscript:", 0), "doubleValue");
          *(void *)&uint8_t buf[8] = v42;
          *(_DWORD *)&uint8_t buf[16] = objc_msgSend( objc_msgSend(v41, "objectAtIndexedSubscript:", 1),  "unsignedIntValue");
          *(_DWORD *)&buf[20] = objc_msgSend( objc_msgSend(v41, "objectAtIndexedSubscript:", 2),  "unsignedIntValue");
          int v43 = 4;
          goto LABEL_129;
        }
      }

      if (qword_1019346D0 != -1) {
        dispatch_once(&qword_1019346D0, &stru_10187A238);
      }
      unint64_t v88 = (os_log_s *)qword_1019346D8;
      if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "#Warning error deserializing OdometerElevationData",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346D0 != -1) {
          dispatch_once(&qword_1019346D0, &stru_10187A238);
        }
        LOWORD(v131[0]) = 0;
        LODWORD(v126) = 2;
        double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  0LL,  "#Warning error deserializing OdometerElevationData",  v131,  *(void *)&v126);
        goto LABEL_115;
      }

      return;
    case 13:
      *(void *)double v134 = 0LL;
      id v9 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  v134);
      if (*(void *)v134 || (double v10 = v9, (unint64_t)[v9 count] <= 1))
      {
        if (qword_1019346D0 != -1) {
          dispatch_once(&qword_1019346D0, &stru_10187A238);
        }
        double v11 = (os_log_s *)qword_1019346D8;
        if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning error deserializing CoarseElevationData",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346D0 != -1) {
            dispatch_once(&qword_1019346D0, &stru_10187A238);
          }
          LOWORD(v131[0]) = 0;
          LODWORD(v126) = 2;
          double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  0LL,  "#Warning error deserializing CoarseElevationData",  v131,  *(void *)&v126);
          goto LABEL_115;
        }
      }

      else
      {
        memset(&buf[16], 0, 176);
        objc_msgSend(objc_msgSend(v10, "objectAtIndexedSubscript:", 0), "doubleValue");
        *(void *)__int128 buf = v96;
        *(_DWORD *)&uint8_t buf[8] = objc_msgSend( objc_msgSend(v10, "objectAtIndexedSubscript:", 1),  "unsignedIntValue");
        *(_DWORD *)&_BYTE buf[12] = 0;
        int v43 = 8;
LABEL_129:
        LODWORD(v131[0]) = v43;
LABEL_130:
        (*(void (**)(uint64_t, void *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v131,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
      }

      return;
    case 14:
      objc_opt_class(&OBJC_CLASS___NSString);
      uint64_t v45 = v44;
      objc_opt_class(&OBJC_CLASS___NSNumber);
      uint64_t v47 = v46;
      objc_opt_class(&OBJC_CLASS___NSDictionary);
      uint64_t v49 = v48;
      objc_opt_class(&OBJC_CLASS___NSArray);
      uint64_t v51 = v50;
      *(void *)&double v52 = objc_opt_class(&OBJC_CLASS___CMPedometerBin).n128_u64[0];
      id v54 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v45, v52, v47, v49, v51, v53, 0LL),  a3,  0LL);
      id v55 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionSyncStore");
      v133[0] = _NSConcreteStackBlock;
      v133[1] = 3221225472LL;
      v133[2] = sub_100C6D02C;
      void v133[3] = &unk_101840D20;
      v133[4] = v54;
      [v55 doAsync:v133];
      return;
    case 15:
      *(_BYTE *)(a1 + 184) = 0;
      sub_100C6D044((unsigned __int8 *)a1, 1);
      return;
    case 18:
      id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionStateObserver");
      v132[0] = _NSConcreteStackBlock;
      v132[1] = 3221225472LL;
      v132[2] = sub_100C6D37C;
      v132[3] = &unk_101840D20;
      v132[4] = a3;
      [v14 doAsync:v132];
      [a3 getBytes:v134 length:40];
      if (*(_DWORD *)v134 == 1)
      {
        memset(&buf[20], 0, 172);
        *(_OWORD *)__int128 buf = *(_OWORD *)&v134[4];
        *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)&v134[20];
        LODWORD(v131[0]) = 10;
        (*(void (**)(uint64_t, void *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v131,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
      }

      return;
    case 19:
      int v56 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", a3, 4LL);
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionAlarmNotifier"),  "launchWatchApplicationForCompanion:",  v56);

      return;
    case 20:
      v131[0] = 0LL;
      id v57 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  v131);
      if (!v131[0])
      {
        double v58 = v57;
        if ([v57 count] == (id)5)
        {
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_10187A258);
          }
          double v59 = (os_log_s *)qword_1019346A8;
          if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 0), "doubleValue");
            uint64_t v61 = v60;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 1), "doubleValue");
            uint64_t v63 = v62;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 2), "doubleValue");
            uint64_t v65 = v64;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 3), "doubleValue");
            uint64_t v67 = v66;
            unsigned int v68 = objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 4), "intValue");
            *(_DWORD *)__int128 buf = 134219008;
            *(void *)&uint8_t buf[4] = v61;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&_BYTE buf[14] = v63;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v65;
            *(_WORD *)&_BYTE buf[32] = 2048;
            *(void *)&buf[34] = v67;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v68;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEBUG,  "Watch received absolute altitude update, timestamp, %f, altitude, %f, accuracy %f, precision, %f, status, %d",  buf,  0x30u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346A0 != -1) {
              dispatch_once(&qword_1019346A0, &stru_10187A258);
            }
            uint64_t v114 = qword_1019346A8;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 0), "doubleValue");
            uint64_t v116 = v115;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 1), "doubleValue");
            uint64_t v118 = v117;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 2), "doubleValue");
            uint64_t v120 = v119;
            objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 3), "doubleValue");
            uint64_t v122 = v121;
            unsigned int v123 = objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 4), "intValue");
            *(_DWORD *)double v134 = 134219008;
            *(void *)&v134[4] = v116;
            *(_WORD *)&v134[12] = 2048;
            *(void *)&v134[14] = v118;
            *(_WORD *)&v134[22] = 2048;
            uint64_t v135 = v120;
            __int16 v136 = 2048;
            uint64_t v137 = v122;
            __int16 v138 = 1024;
            unsigned int v139 = v123;
            LODWORD(v126) = 48;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v114,  2LL,  "Watch received absolute altitude update, timestamp, %f, altitude, %f, accuracy %f, precision, %f, status, %d",  COERCE_DOUBLE(v134),  v126,  v128,  v129,  v130);
            uint64_t v125 = (uint8_t *)v124;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v124);
            if (v125 != buf) {
              free(v125);
            }
          }

          memset(&buf[24], 0, 168);
          objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(void *)__int128 buf = v69;
          objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 2), "doubleValue");
          *(void *)&uint8_t buf[8] = v70;
          objc_msgSend(objc_msgSend(v58, "objectAtIndexedSubscript:", 3), "doubleValue");
          *(void *)&uint8_t buf[16] = v71;
          int v28 = 11;
          goto LABEL_61;
        }
      }

      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10187A258);
      }
      uint64_t v89 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "#Warning error deserializing Absolute Altitude update",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10187A258);
        }
        *(_WORD *)double v134 = 0;
        LODWORD(v126) = 2;
        double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "#Warning error deserializing Absolute Altitude update",  v134,  *(void *)&v126);
        goto LABEL_115;
      }

      return;
    case 23:
      sub_100C6D394(a1);
      return;
    case 24:
      if ((sub_100FE58F8() & 1) == 0)
      {
        id v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
        uint64_t v16 = 65793LL;
        goto LABEL_66;
      }

      return;
    case 25:
      if ((sub_100FE58F8() & 1) == 0)
      {
        id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
        uint64_t v8 = 257LL;
        goto LABEL_22;
      }

      return;
    case 26:
      id v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v16 = 0x101000001LL;
      goto LABEL_66;
    case 27:
    case 29:
      id v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v8 = 16777217LL;
LABEL_22:
      [v7 dontcollect:v8 isLocal:0];
      return;
    case 28:
      id v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier");
      uint64_t v16 = 0x100000101000001LL;
LABEL_66:
      [v15 collect:v16 isLocal:0];
      return;
    case 30:
      objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier"),  "companionHeartbeat:",  a3);
      return;
    case 32:
      objc_opt_class(&OBJC_CLASS___NSString);
      uint64_t v73 = v72;
      objc_opt_class(&OBJC_CLASS___NSNumber);
      uint64_t v75 = v74;
      objc_opt_class(&OBJC_CLASS___NSDictionary);
      uint64_t v77 = v76;
      *(void *)&double v78 = objc_opt_class(&OBJC_CLASS___NSArray).n128_u64[0];
      v131[0] = 0LL;
      id v80 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v73, v78, v75, v77, v79, 0LL),  a3,  v131);
      if (v131[0])
      {
        if (qword_101934730 != -1) {
          dispatch_once(&qword_101934730, &stru_10187A2B8);
        }
        unint64_t v81 = (os_log_s *)qword_101934738;
        if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v131[0];
          _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "Error reading config from companion: %@",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934730 != -1) {
            dispatch_once(&qword_101934730, &stru_10187A2B8);
          }
          *(_DWORD *)double v134 = 138412290;
          *(void *)&v134[4] = v131[0];
          LODWORD(v127) = 12;
          double v83 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "Error reading config from companion: %@",  v134,  v127);
LABEL_127:
          uint64_t v90 = v82;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v83);
          goto LABEL_116;
        }
      }

      else
      {
        unint64_t v91 = v80;
        uint64_t v92 = sub_100B7ECFC();
        int v93 = sub_100B803FC(v92, v91);
        if (v93 != 100)
        {
          int v94 = v93;
          if (qword_101934730 != -1) {
            dispatch_once(&qword_101934730, &stru_10187A2B8);
          }
          float v95 = (os_log_s *)qword_101934738;
          if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v94;
            _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "[Dynamic Config] Error on config insertion: %{public}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934730 != -1) {
              dispatch_once(&qword_101934730, &stru_10187A2B8);
            }
            *(_DWORD *)double v134 = 67240192;
            *(_DWORD *)&v134[4] = v94;
            LODWORD(v127) = 8;
            double v83 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "[Dynamic Config] Error on config insertion: %{public}d",  v134,  v127);
            goto LABEL_127;
          }
        }
      }

      return;
    case 33:
      id v84 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionAlarmNotifier");
      if (qword_101934760 != -1) {
        dispatch_once(&qword_101934760, &stru_10187A298);
      }
      unint64_t v85 = (os_log_s *)qword_101934768;
      if (os_log_type_enabled((os_log_t)qword_101934768, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "Watch received motion alarm trigger for kTypeSignificantCardioChange",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934760 != -1) {
          dispatch_once(&qword_101934760, &stru_10187A298);
        }
        *(_WORD *)double v134 = 0;
        LODWORD(v126) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934768,  2LL,  "Watch received motion alarm trigger for kTypeSignificantCardioChange",  v134,  *(void *)&v126);
        int v107 = (uint8_t *)v106;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v106);
        if (v107 != buf) {
          free(v107);
        }
      }

      [v84 onCardioChangeEvent];
      return;
    case 35:
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187A278);
      }
      BOOL v17 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = [a3 length];
        *(_DWORD *)__int128 buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Watch received mobility calibration data from phone. Message size: %d bytes",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187A278);
        }
        uint64_t v100 = qword_101934518;
        unsigned int v101 = [a3 length];
        *(_DWORD *)double v134 = 67109120;
        *(_DWORD *)&v134[4] = v101;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v100,  0LL,  "Watch received mobility calibration data from phone. Message size: %d bytes",  v134);
        int v103 = (uint8_t *)v102;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v102);
        if (v103 != buf) {
          free(v103);
        }
      }

      if (_os_feature_enabled_impl("CoreLocation", "CMMobilityCalibration")) {
        objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "receiveMobilityDataFromCompanion:",  a3);
      }
      return;
    case 36:
      if (qword_1019346A0 != -1) {
        dispatch_once(&qword_1019346A0, &stru_10187A258);
      }
      uint64_t v19 = (os_log_s *)qword_1019346A8;
      if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "received filtered pressure from phone",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10187A258);
        }
        *(_WORD *)double v134 = 0;
        LODWORD(v126) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  2LL,  "received filtered pressure from phone",  v134,  *(void *)&v126);
        __int128 v105 = (uint8_t *)v104;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v104);
        if (v105 != buf) {
          free(v105);
        }
      }

      v131[0] = 0LL;
      id v20 = +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  v131);
      if (v131[0] || (uint64_t v21 = v20, [v20 count] != (id)2))
      {
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10187A258);
        }
        float v86 = (os_log_s *)qword_1019346A8;
        if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "#Warning error deserializing Filtered Pressure update",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_10187A258);
          }
          *(_WORD *)double v134 = 0;
          LODWORD(v126) = 2;
          double v13 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "#Warning error deserializing Filtered Pressure update",  v134,  *(void *)&v126);
LABEL_115:
          uint64_t v90 = v12;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v13);
LABEL_116:
          if (v90 != buf) {
            free(v90);
          }
        }
      }

      else
      {
        if (qword_1019346A0 != -1) {
          dispatch_once(&qword_1019346A0, &stru_10187A258);
        }
        __n128 v22 = (os_log_s *)qword_1019346A8;
        if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 0), "doubleValue");
          uint64_t v24 = v23;
          objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(_DWORD *)__int128 buf = 134218240;
          *(void *)&uint8_t buf[4] = v24;
          *(_WORD *)&_BYTE buf[12] = 2048;
          *(void *)&_BYTE buf[14] = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Watch received filtered pressure update, timestamp, %f, filteredPressure, %f",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346A0 != -1) {
            dispatch_once(&qword_1019346A0, &stru_10187A258);
          }
          uint64_t v108 = qword_1019346A8;
          objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 0), "doubleValue");
          uint64_t v110 = v109;
          objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(_DWORD *)double v134 = 134218240;
          *(void *)&v134[4] = v110;
          *(_WORD *)&v134[12] = 2048;
          *(void *)&v134[14] = v111;
          LODWORD(v126) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v108,  0LL,  "Watch received filtered pressure update, timestamp, %f, filteredPressure, %f",  COERCE_DOUBLE(v134),  v126);
          int v113 = (uint8_t *)v112;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)",  "%s\n",  v112);
          if (v113 != buf) {
            free(v113);
          }
        }

        memset(&buf[24], 0, 168);
        objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 1), "doubleValue");
        *(void *)__int128 buf = v26;
        objc_msgSend(objc_msgSend(v21, "objectAtIndexedSubscript:", 0), "doubleValue");
        *(void *)&uint8_t buf[8] = v27;
        *(void *)&uint8_t buf[16] = 0x4014000000000000LL;
        int v28 = 12;
LABEL_61:
        *(_DWORD *)double v134 = v28;
        (*(void (**)(uint64_t, _BYTE *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v134,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
      }

      return;
    default:
      return;
  }

uint64_t sub_100C6D02C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 224LL))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100C6D044(unsigned __int8 *a1, int a2)
{
  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_10187A2D8);
  }
  double v4 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = sub_10039F854();
    int v6 = a1[184];
    int v7 = a1[109];
    int v8 = a1[110];
    *(_DWORD *)__int128 buf = 8;
    int v9 = sub_100247620((uint64_t)a1, (int *)buf, 1LL);
    *(_DWORD *)__int128 buf = 67110400;
    int v26 = a2;
    __int16 v27 = 1024;
    unsigned int v28 = v5;
    __int16 v29 = 1024;
    int v30 = v6;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    int v36 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187A2D8);
    }
    uint64_t v13 = qword_1019345B8;
    unsigned __int16 v14 = (unsigned __int16)sub_10039F854();
    int v15 = a1[184];
    int v16 = a1[109];
    int v20 = 8;
    int v17 = sub_100247620((uint64_t)a1, &v20, 1LL);
    LOWORD(v21) = 1024;
    HIWORD(v21) = v14;
    LOWORD(v22) = HIWORD(v16);
    HIWORD(v22) = 1024;
    __int16 v23 = 1024;
    int v24 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  2LL,  "coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d",  &v20,  38,  67110400,  v21,  v15,  v22);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierWatch::toggleCoarseElevationSubscription(BOOL)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  uint64_t result = (uint64_t)sub_10039F854();
  if ((_DWORD)result)
  {
    if (a1[184])
    {
      if (!a1[110]
        || (a2 & 1) == 0 && (*(_DWORD *)buf = 8, uint64_t result = sub_100247620((uint64_t)a1, (int *)buf, 1LL), !(_DWORD)result))
      {
        char v11 = 0;
        int v12 = 12;
LABEL_12:
        uint64_t result = (uint64_t)sub_10039FB50(120.0, (uint64_t)a1, v12, 0LL, 300LL, 0LL, 0LL, 0LL, 0, 0LL);
        a1[184] = v11;
      }
    }

    else if (a2)
    {
      *(_DWORD *)__int128 buf = 8;
      uint64_t result = sub_100247620((uint64_t)a1, (int *)buf, 1LL);
      if ((_DWORD)result)
      {
        uint64_t result = sub_10039F8F8((uint64_t)a1);
        if ((_DWORD)result)
        {
          if (a1[109] && a1[110])
          {
            char v11 = 1;
            int v12 = 11;
            goto LABEL_12;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_100C6D37C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208LL))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100C6D394(uint64_t a1)
{
  uint64_t result = sub_1004F97F4();
  if ((result & 0x8000000000000LL) != 0 || *(_BYTE *)(a1 + 186) || *(_BYTE *)(a1 + 189)) {
    return (uint64_t)sub_10039FB50(120.0, a1, 22, 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
  }
  return result;
}

uint64_t sub_100C6D404(uint64_t a1, int a2, int *a3, uint64_t **a4)
{
  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10187A238);
  }
  int v8 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v28) = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Registering for companion notification type %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10187A238);
    }
    int v16 = *a3;
    int v23 = 67109120;
    LODWORD(v24) = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  2LL,  "Registering for companion notification type %d",  &v23);
    unsigned int v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification & , const CLCompanionNotifier_Type::RegistrationInfo &)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  uint64_t v10 = sub_1003A0E58(a1, a2, a3, a4);
  if ((_DWORD)v10)
  {
    switch(*a3)
    {
      case 0:
        if (qword_1019346D0 != -1) {
          dispatch_once(&qword_1019346D0, &stru_10187A238);
        }
        char v11 = (os_log_s *)qword_1019346D8;
        if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(a1 + 160);
          uint64_t v13 = *a4;
          *(_DWORD *)__int128 buf = 134218240;
          uint64_t v28 = v12;
          __int16 v29 = 2048;
          int v30 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Last Overridden Session,%ld, Registration Info Overridden Session,%ld",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346D0 != -1) {
            dispatch_once(&qword_1019346D0, &stru_10187A238);
          }
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = *a4;
          int v23 = 134218240;
          uint64_t v24 = v19;
          __int16 v25 = 2048;
          int v26 = v20;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  2LL,  "Last Overridden Session,%ld, Registration Info Overridden Session,%ld",  &v23,  22);
          int v22 = (uint8_t *)v21;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notifica tion &, const CLCompanionNotifier_Type::RegistrationInfo &)",  "%s\n",  v21);
          if (v22 != buf) {
            free(v22);
          }
        }

        *(void *)(a1 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = *a4;
        sub_100C6D828(a1);
        break;
      case 3:
        sub_10039FB50(120.0, a1, 0, 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
        break;
      case 4:
        sub_10039FB50(120.0, a1, 4, 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
        break;
      case 8:
        sub_100C6D044((unsigned __int8 *)a1, 1);
        break;
      default:
        break;
    }
  }

  id v14 = sub_10039F854();
  (*(void (**)(uint64_t, id))(*(void *)a1 + 208LL))(a1, v14);
  return v10;
}

void sub_100C6D828(uint64_t a1)
{
  id v11 = 0LL;
  int v20 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 160));
  uint64_t v2 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL),  0LL,  &v11);
  if (v11)
  {
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10187A238);
    }
    double v3 = (os_log_s *)qword_1019346D8;
    if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 160);
      id v5 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
      *(_DWORD *)__int128 buf = 134218242;
      uint64_t v17 = v4;
      __int16 v18 = 2080;
      id v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Error serializing session override (%ld): %s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346D0 != -1) {
        dispatch_once(&qword_1019346D0, &stru_10187A238);
      }
      uint64_t v6 = qword_1019346D8;
      uint64_t v7 = *(void *)(a1 + 160);
      id v8 = objc_msgSend(objc_msgSend(v11, "description"), "UTF8String");
      int v12 = 134218242;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      id v15 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v6,  0LL,  "#Warning Error serializing session override (%ld): %s",  &v12,  22);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompanionNotifierWatch::sendLastOverriddenSession() const",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  else if (*(_BYTE *)(a1 + 168))
  {
    sub_10039FB50(120.0, a1, 7, v2, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
  }

BOOL sub_100C6DA94(uint64_t a1, int a2, int *a3)
{
  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10187A238);
  }
  uint64_t v6 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a3;
    *(_DWORD *)__int128 buf = 67109120;
    int v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Unregistering for companion notification type %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10187A238);
    }
    int v11 = *a3;
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  2LL,  "Unregistering for companion notification type %d",  v14);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLCompanionNotifierWatch::unregisterForNotification(int, const CLCompanionNotifier_Type::Notification &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  BOOL v8 = sub_1003A1554((char *)a1, a2, a3);
  if (v8)
  {
    switch(*a3)
    {
      case 0:
        *(_DWORD *)__int128 buf = 0;
        if (!sub_100247620(a1, (int *)buf, 1LL))
        {
          *(void *)(a1 + 16sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
          sub_10039FB50(120.0, a1, 8, 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
        }

        break;
      case 3:
        *(_DWORD *)__int128 buf = 3;
        break;
      case 4:
        *(_DWORD *)__int128 buf = 4;
        break;
      case 8:
        sub_100C6D044((unsigned __int8 *)a1, 0);
        break;
      default:
        break;
    }
  }

  id v9 = sub_10039F854();
  (*(void (**)(uint64_t, id))(*(void *)a1 + 208LL))(a1, v9);
  return v8;
}

id sub_100C6DD98(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 110))
  {
    int v6 = 3;
    int v3 = sub_100247620(a1, &v6, 1LL);
    int v7 = 4;
    int v4 = sub_100247620(a1, &v7, 1LL);
    if (v3) {
      sub_10039FB50(120.0, a1, 0, 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
    }
    if (v4) {
      sub_10039FB50(120.0, a1, 4, 0LL, 300LL, 1LL, 0LL, 0LL, 0, 0LL);
    }
    int v8 = 0;
    sub_10039FEC4(a1, (v3 | v4) != 0);
  }

  return sub_100C6B510(a1);
}

uint64_t sub_100C6DEAC(uint64_t a1)
{
  if (qword_1019346D0 != -1) {
    dispatch_once(&qword_1019346D0, &stru_10187A238);
  }
  uint64_t v2 = (os_log_s *)qword_1019346D8;
  if (os_log_type_enabled((os_log_t)qword_1019346D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sync state with Companion", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346D0 != -1) {
      dispatch_once(&qword_1019346D0, &stru_10187A238);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346D8,  2LL,  "Sync state with Companion",  v6,  2);
    id v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCompanionNotifierWatch::handleStateSyncTimerExpiry()",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208LL))(a1, 1LL);
}

void sub_100C6E054(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLCompanionNotifier");
  sub_1003A08B0((uint64_t)v8, (uint64_t *)__p, a3, a1, a2);
  *int v8 = &off_10187A1F0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C6E0EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100C6E118(id a1)
{
  qword_1019346D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_100C6E144(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100C6E170(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100C6E19C(id a1)
{
  qword_101934768 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

void sub_100C6E1C8(id a1)
{
  qword_101934738 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100C6E1F4(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

NSDictionary *sub_100C6E220()
{
  v1[0] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_1018D70F0;
  v1[1] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_1018D7108;
  v1[2] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_1018D7120;
  v1[3] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1018D7138;
  v1[4] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1018D7150;
  v1[5] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1018D7168;
  void v1[6] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  void v2[6] = &off_1018D7180;
  uint64_t result = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  7LL);
  qword_10199D3A0 = (uint64_t)result;
  return result;
}

uint64_t sub_100C6E3A0(uint64_t a1, int **a2)
{
  *(void *)(a1 + 8) = 0LL;
  int v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  int v4 = (void **)(a1 + 24);
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 0LL;
  id v5 = *a2;
  int v6 = a2[1];
  if (*a2 == v6)
  {
    id v9 = 0LL;
    int v22 = 0LL;
    id v40 = 0LL;
    id v41 = 0LL;
    uint64_t v42 = 0LL;
  }

  else
  {
    do
    {
      int v43 = *v5;
      id v40 = (unsigned int *)&v43;
      int v7 = sub_100228E48((uint64_t **)a1, &v43, (uint64_t)&unk_1012CF090, &v40);
      ++*((_DWORD *)v7 + 8);
      ++v5;
    }

    while (v5 != v6);
    int v8 = *(uint64_t **)a1;
    id v40 = 0LL;
    id v41 = 0LL;
    uint64_t v42 = 0LL;
    if (v8 == v3)
    {
      id v9 = 0LL;
      int v22 = 0LL;
    }

    else
    {
      id v9 = 0LL;
      do
      {
        uint64_t v10 = *(uint64_t *)((char *)v8 + 28);
        if (v9 >= v42)
        {
          uint64_t v11 = ((char *)v9 - (char *)v40) >> 3;
          unint64_t v12 = ((char *)v42 - (char *)v40) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            __int16 v14 = (char *)sub_1000071BC((uint64_t)&v42, v13);
          }
          else {
            __int16 v14 = 0LL;
          }
          id v15 = (unsigned int *)&v14[8 * v11];
          *(void *)id v15 = v10;
          id v9 = (int *)(v15 + 2);
          uint64_t v17 = v40;
          int v16 = v41;
          if (v41 != v40)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 2;
              *((void *)v15 - 1) = v18;
              v15 -= 2;
            }

            while (v16 != v17);
            int v16 = v40;
          }

          id v40 = v15;
          id v41 = (unsigned int *)v9;
          uint64_t v42 = (int *)&v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }

        else
        {
          *(void *)id v9 = v10;
          v9 += 2;
        }

        id v41 = (unsigned int *)v9;
        id v19 = (uint64_t *)v8[1];
        if (v19)
        {
          do
          {
            int v20 = v19;
            id v19 = (uint64_t *)*v19;
          }

          while (v19);
        }

        else
        {
          do
          {
            int v20 = (uint64_t *)v8[2];
            BOOL v21 = *v20 == (void)v8;
            int v8 = v20;
          }

          while (!v21);
        }

        int v8 = v20;
      }

      while (v20 != v3);
      int v22 = (int *)v40;
    }
  }

  unint64_t v23 = 126 - 2 * __clz(((char *)v9 - (char *)v22) >> 3);
  if (v9 == v22) {
    uint64_t v24 = 0LL;
  }
  else {
    uint64_t v24 = v23;
  }
  sub_100C6E718(v22, v9, v24, 1);
  __int16 v25 = v40;
  int v26 = v41;
  if (v40 != v41)
  {
    __int16 v27 = (void *)(a1 + 40);
    uint64_t v28 = *(char **)(a1 + 32);
    do
    {
      unsigned int v29 = *v25;
      if ((unint64_t)v28 >= *v27)
      {
        __int16 v31 = (char *)*v4;
        uint64_t v32 = (v28 - (_BYTE *)*v4) >> 2;
        unint64_t v33 = v32 + 1;
        uint64_t v34 = *v27 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          int v36 = (char *)sub_10000956C(a1 + 40, v35);
          __int16 v31 = *(char **)(a1 + 24);
          uint64_t v28 = *(char **)(a1 + 32);
        }

        else
        {
          int v36 = 0LL;
        }

        uint64_t v37 = (unsigned int *)&v36[4 * v32];
        *uint64_t v37 = v29;
        int v30 = (char *)(v37 + 1);
        while (v28 != v31)
        {
          unsigned int v38 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *--uint64_t v37 = v38;
        }

        *(void *)(a1 + 24) = v37;
        *(void *)(a1 + 32) = v30;
        *(void *)(a1 + 4sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v28 = v29;
        int v30 = v28 + 4;
      }

      *(void *)(a1 + 32) = v30;
      v25 += 2;
      uint64_t v28 = v30;
    }

    while (v25 != v26);
    __int16 v25 = v40;
  }

  if (v25)
  {
    id v41 = v25;
    operator delete(v25);
  }

  return a1;
}

void sub_100C6E6A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v13;
    operator delete(v13);
  }

  sub_100008390(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

const char *sub_100C6E6F0(unsigned int a1)
{
  if (a1 > 1) {
    return "-";
  }
  else {
    return (&off_10187A2F8)[a1];
  }
}

int *sub_100C6E718(int *result, int *a2, uint64_t a3, char a4)
{
  int v7 = result;
LABEL_2:
  int v8 = v7;
  while (2)
  {
    int v7 = v8;
    uint64_t v9 = (char *)a2 - (char *)v8;
    unint64_t v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) > v8[1])
        {
          int v43 = *v8;
          *int v8 = *(a2 - 2);
          *(a2 - 2) = v43;
          int v44 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v44;
        }

        return result;
      case 3uLL:
        return sub_100C6EE74(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return sub_100C6F144(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        uint64_t result = sub_100C6F144(v8, v8 + 2, v8 + 4, v8 + 6);
        if (*(a2 - 1) > v8[7])
        {
          int v45 = v8[6];
          void v8[6] = *(a2 - 2);
          *(a2 - 2) = v45;
          int v46 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v46;
          int v47 = v8[7];
          int v48 = v8[5];
          if (v47 > v48)
          {
            int v49 = v8[6];
            int v50 = v8[3];
            int v51 = v8[4];
            _DWORD v8[4] = v49;
            v8[5] = v47;
            void v8[6] = v51;
            v8[7] = v48;
            if (v47 > v50)
            {
              int v52 = v8[1];
              int v53 = v8[2];
              v8[2] = v49;
              void v8[3] = v47;
              _DWORD v8[4] = v53;
              v8[5] = v50;
              if (v47 > v52)
              {
                int v54 = *v8;
                *int v8 = v49;
                v8[1] = v47;
                v8[2] = v54;
                void v8[3] = v52;
              }
            }
          }
        }

        return result;
      default:
        if (v9 <= 191)
        {
          id v55 = v8 + 2;
          BOOL v57 = v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              uint64_t v58 = 0LL;
              double v59 = v8;
              do
              {
                int v60 = v59[3];
                int v61 = v59[1];
                double v59 = v55;
                if (v60 > v61)
                {
                  int v62 = *v55;
                  int v63 = v59[1];
                  uint64_t v64 = v58;
                  while (1)
                  {
                    uint64_t v65 = (char *)v8 + v64;
                    int v66 = *(int *)((char *)v8 + v64 + 4);
                    *((_DWORD *)v65 + 2) = *(int *)((char *)v8 + v64);
                    *((_DWORD *)v65 + 3) = v66;
                    if (!v64) {
                      break;
                    }
                    v64 -= 8LL;
                    if (*((_DWORD *)v65 - 1) >= v63)
                    {
                      uint64_t v67 = (int *)((char *)v8 + v64 + 8);
                      goto LABEL_78;
                    }
                  }

                  uint64_t v67 = v8;
LABEL_78:
                  *uint64_t v67 = v62;
                  v67[1] = v63;
                }

                id v55 = v59 + 2;
                v58 += 8LL;
              }

              while (v59 + 2 != a2);
            }
          }

          else if (!v57)
          {
            float v98 = v8 + 3;
            do
            {
              int v99 = v7[3];
              int v100 = v7[1];
              int v7 = v55;
              if (v99 > v100)
              {
                uint64_t v101 = *(void *)v55;
                uint64_t v102 = HIDWORD(*(void *)v7);
                int v103 = v98;
                do
                {
                  uint64_t v104 = v103;
                  int v105 = *(v103 - 4);
                  *(v103 - 1) = *(v103 - 3);
                  int v106 = *(v103 - 2);
                  v103 -= 2;
                  int *v104 = v106;
                }

                while (v105 < (int)v102);
                *(v103 - 1) = v101;
                int *v103 = v102;
              }

              id v55 = v7 + 2;
              v98 += 2;
            }

            while (v7 + 2 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v68 = (v10 - 2) >> 1;
            int64_t v69 = v68;
            do
            {
              int64_t v70 = v69;
              if (v68 >= v69)
              {
                uint64_t v71 = (2 * v69) | 1;
                uint64_t v72 = &v8[2 * v71];
                if (2 * v70 + 2 < (uint64_t)v10)
                {
                  int v73 = v72[1];
                  int v74 = v72[3];
                  v72 += 2 * (v73 > v74);
                  if (v73 > v74) {
                    uint64_t v71 = 2 * v70 + 2;
                  }
                }

                if (v72[1] <= v8[2 * v70 + 1])
                {
                  uint64_t v75 = &v8[2 * v70];
                  int v76 = *v75;
                  int v77 = v75[1];
                  do
                  {
                    double v78 = v75;
                    uint64_t v75 = v72;
                    *double v78 = *v72;
                    v78[1] = v72[1];
                    if (v68 < v71) {
                      break;
                    }
                    uint64_t v79 = (2 * v71) | 1;
                    uint64_t v72 = &v8[2 * v79];
                    uint64_t v80 = 2 * v71 + 2;
                    if (v80 < (uint64_t)v10)
                    {
                      int v81 = v72[1];
                      int v82 = v72[3];
                      v72 += 2 * (v81 > v82);
                      if (v81 > v82) {
                        uint64_t v79 = v80;
                      }
                    }

                    uint64_t result = (int *)v72[1];
                    uint64_t v71 = v79;
                  }

                  while ((int)result <= v77);
                  *uint64_t v75 = v76;
                  v75[1] = v77;
                }
              }

              int64_t v69 = v70 - 1;
            }

            while (v70);
            uint64_t v83 = (unint64_t)v9 >> 3;
            do
            {
              uint64_t v84 = 0LL;
              uint64_t v85 = *(void *)v8;
              float v86 = v8;
              do
              {
                __int16 v87 = &v86[2 * v84 + 2];
                uint64_t v88 = (2 * v84) | 1;
                uint64_t v89 = 2 * v84 + 2;
                if (v89 < v83)
                {
                  int v90 = v87[1];
                  int v91 = v87[3];
                  v87 += 2 * (v90 > v91);
                  if (v90 > v91) {
                    uint64_t v88 = v89;
                  }
                }

                *float v86 = *v87;
                v86[1] = v87[1];
                float v86 = v87;
                uint64_t v84 = v88;
              }

              while (v88 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              if (v87 == a2 - 2)
              {
                *(void *)__int16 v87 = v85;
              }

              else
              {
                int *v87 = *(a2 - 2);
                v87[1] = *(a2 - 1);
                *((void *)a2 - 1) = v85;
                uint64_t v92 = (char *)v87 - (char *)v8 + 8;
                if (v92 >= 9)
                {
                  unint64_t v93 = (((unint64_t)v92 >> 3) - 2) >> 1;
                  if (v8[2 * v93 + 1] > v87[1])
                  {
                    int v94 = *v87;
                    int v95 = v87[1];
                    do
                    {
                      uint64_t v96 = v87;
                      __int16 v87 = &v8[2 * v93];
                      *uint64_t v96 = *v87;
                      v96[1] = v87[1];
                      if (!v93) {
                        break;
                      }
                      unint64_t v93 = (v93 - 1) >> 1;
                    }

                    while (v8[2 * v93 + 1] > v95);
                    int *v87 = v94;
                    v87[1] = v95;
                  }
                }
              }

              a2 -= 2;
            }

            while (v83-- > 2);
          }

          return result;
        }

        unint64_t v11 = v10 >> 1;
        unint64_t v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          uint64_t result = sub_100C6EE74(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }

        else
        {
          sub_100C6EE74(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          sub_100C6EE74(v7 + 2, v12 - 2, a2 - 4);
          sub_100C6EE74(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          uint64_t result = sub_100C6EE74(v12 - 2, v12, &v7[2 * v11 + 2]);
          uint64_t v13 = *(void *)v7;
          *(void *)int v7 = *(void *)v12;
          *(void *)unint64_t v12 = v13;
        }

        --a3;
        if ((a4 & 1) == 0 && *(v7 - 1) <= v7[1])
        {
          uint64_t v30 = *(void *)v7;
          uint64_t v31 = HIDWORD(*(void *)v7);
          if (*(a2 - 1) >= (int)v31)
          {
            uint64_t v34 = v7 + 2;
            do
            {
              int v8 = v34;
              if (v34 >= a2) {
                break;
              }
              int v35 = v34[1];
              v34 += 2;
            }

            while (v35 >= (int)v31);
          }

          else
          {
            uint64_t v32 = v7;
            do
            {
              int v8 = v32 + 2;
              int v33 = v32[3];
              v32 += 2;
            }

            while (v33 >= (int)v31);
          }

          int v36 = a2;
          if (v8 < a2)
          {
            uint64_t v37 = a2;
            do
            {
              int v36 = v37 - 2;
              int v38 = *(v37 - 1);
              v37 -= 2;
            }

            while (v38 < (int)v31);
          }

          while (v8 < v36)
          {
            int v39 = *v8;
            *int v8 = *v36;
            int *v36 = v39;
            int v40 = v8[1];
            v8[1] = v36[1];
            v36[1] = v40;
            do
            {
              int v41 = v8[3];
              v8 += 2;
            }

            while (v41 >= (int)v31);
            do
            {
              int v42 = *(v36 - 1);
              v36 -= 2;
            }

            while (v42 < (int)v31);
          }

          if (v8 - 2 != v7)
          {
            int *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }

          a4 = 0;
          *(v8 - 2) = v30;
          *(v8 - 1) = v31;
          continue;
        }

        uint64_t v14 = 0LL;
        uint64_t v15 = *(void *)v7;
        uint64_t v16 = HIDWORD(*(void *)v7);
        do
        {
          int v17 = v7[v14 + 3];
          v14 += 2LL;
        }

        while (v17 > (int)v16);
        uint64_t v18 = &v7[v14];
        id v19 = a2;
        if (v14 == 2)
        {
          int v22 = a2;
          while (v18 < v22)
          {
            int v20 = v22 - 2;
            int v23 = *(v22 - 1);
            v22 -= 2;
          }

          int v20 = v22;
        }

        else
        {
          do
          {
            int v20 = v19 - 2;
            int v21 = *(v19 - 1);
            v19 -= 2;
          }

          while (v21 <= (int)v16);
        }

int *sub_100C6EE74(int *result, int *a2, int *a3)
{
  int v3 = a2 + 1;
  int v4 = a2[1];
  id v5 = result + 1;
  int v6 = a3[1];
  if (v4 > result[1])
  {
    int v7 = *result;
    if (v6 <= v4)
    {
      *uint64_t result = *a2;
      *a2 = v7;
      int v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] <= v11) {
        return result;
      }
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      id v5 = a2 + 1;
    }

    else
    {
      *uint64_t result = *a3;
      *a3 = v7;
    }

    int v3 = a3 + 1;
    goto LABEL_10;
  }

  if (v6 > v4)
  {
    int v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    int v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] > *v5)
    {
      int v10 = *result;
      *uint64_t result = *a2;
      *a2 = v10;
LABEL_10:
      int v13 = *v5;
      int *v5 = *v3;
      int *v3 = v13;
    }
  }

  return result;
}

BOOL sub_100C6EF50(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*(a2 - 1) > a1[1])
      {
        int v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        int v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      sub_100C6EE74(a1, a1 + 2, a2 - 2);
      return 1LL;
    case 4LL:
      sub_100C6F144(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1LL;
    case 5LL:
      sub_100C6F144(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) > a1[7])
      {
        int v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        int v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        int v20 = a1[7];
        int v21 = a1[5];
        if (v20 > v21)
        {
          int v22 = a1[6];
          int v23 = a1[3];
          int v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 > v23)
          {
            int v25 = a1[1];
            int v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 > v25)
            {
              int v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }

      return 1LL;
    default:
      int v8 = a1 + 4;
      sub_100C6EE74(a1, a1 + 2, a1 + 4);
      int v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    if (v9[1] > v8[1])
    {
      int v12 = *v9;
      int v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = (int *)((char *)a1 + v14);
        int v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16) {
          break;
        }
        v14 -= 8LL;
        if (v15[3] >= v13)
        {
          int v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }

      int v17 = a1;
LABEL_13:
      *int v17 = v12;
      v17[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }

    int v8 = v9;
    v10 += 8LL;
    v9 += 2;
    if (v9 == a2) {
      return 1LL;
    }
  }

int *sub_100C6F144(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = sub_100C6EE74(a1, a2, a3);
  if (a4[1] > a3[1])
  {
    int v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    int v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] > a2[1])
    {
      int v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      int v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] > a1[1])
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        int v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }

  return result;
}

uint64_t sub_100C6F208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_1007B73C4(a1 + 8, a2);
  sub_100D40874(a1 + 144, *(void *)a1);
  *(void *)(a1 + 1136) = 0LL;
  *(_OWORD *)(a1 + 1072) = xmmword_1013577A8;
  *(_OWORD *)(a1 + 1088) = unk_1013577B8;
  *(_OWORD *)(a1 + 1104) = xmmword_1013577C8;
  *(_OWORD *)(a1 + 112sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = unk_1013577D8;
  *(_OWORD *)(a1 + 1008) = xmmword_101357768;
  *(_OWORD *)(a1 + 1024) = unk_101357778;
  *(_OWORD *)(a1 + 104sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = xmmword_101357788;
  *(_OWORD *)(a1 + 1056) = unk_101357798;
  *(_OWORD *)(a1 + 944) = xmmword_101357728;
  *(_OWORD *)(a1 + 96sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = unk_101357738;
  *(_OWORD *)(a1 + 976) = xmmword_101357748;
  *(_OWORD *)(a1 + 992) = unk_101357758;
  *(_OWORD *)(a1 + 912) = xmmword_101357708;
  *(_OWORD *)(a1 + 928) = unk_101357718;
  *(void *)(a1 + 1144) = 0LL;
  *(_DWORD *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = a3;
  *(_DWORD *)(a1 + 1152) = 0;
  *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 8LL;
  *(_BYTE *)(a1 + 1184) = 0;
  uint64_t v5 = sub_1006E27E8();
  sub_100413284(v5, &v10);
  sub_1002A6F64(v10, "MotionLoggerLogPedometer", (BOOL *)(a1 + 1184));
  int v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return a1;
}

void sub_100C6F310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100C6F334(uint64_t result)
{
  *(_DWORD *)(result + 1152) = 0;
  *(void *)(result + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 8LL;
  return result;
}

uint64_t sub_100C6F348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1168) = a2;
  return result;
}

void sub_100C6F350(uint64_t a1, double *a2)
{
  if (sub_1001B9A1C())
  {
    sub_100D40980((double *)(a1 + 144), (uint64_t)a2);
    if (sub_100A178EC(a1 + 912))
    {
      uint64_t v36 = *(void *)(a1 + 648);
      __int128 v4 = *(_OWORD *)(a1 + 616);
      __int128 v33 = *(_OWORD *)(a1 + 600);
      __int128 v34 = v4;
      __int128 v35 = *(_OWORD *)(a1 + 632);
      __int128 v5 = *(_OWORD *)(a1 + 552);
      __int128 v29 = *(_OWORD *)(a1 + 536);
      __int128 v30 = v5;
      __int128 v6 = *(_OWORD *)(a1 + 584);
      __int128 v31 = *(_OWORD *)(a1 + 568);
      __int128 v32 = v6;
      __int128 v7 = *(_OWORD *)(a1 + 488);
      int8x16_t v25 = *(int8x16_t *)(a1 + 472);
      __int128 v26 = v7;
      __int128 v8 = *(_OWORD *)(a1 + 520);
      __int128 v27 = *(_OWORD *)(a1 + 504);
      __int128 v28 = v8;
      if (BYTE8(v26))
      {
        uint64_t v9 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *a2);
        [*(id *)(a1 + 1176) writeToHealthRunningSpeed:v9 startDate:v9 endDate:*(double *)&v26];
      }

      else
      {
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187A308);
        }
        uint64_t v10 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[PaceController] Not writing to HK, invalid running speed",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_10187A308);
          }
          *(_WORD *)uint64_t v37 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[PaceController] Not writing to HK, invalid running speed",  v37,  2);
          int v23 = (uint8_t *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::PaceController::feedStepCountEntry(const CLExtendedStepCountEntry &)",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }
      }

      if (*(_BYTE *)(a1 + 1184))
      {
        sub_100449824(&v25, (uint64_t)buf);
        if (qword_1019A1D00 != -1) {
          dispatch_once(&qword_1019A1D00, &stru_10187A328);
        }
        uint64_t v11 = qword_1019A1D08;
        if (qword_1019A1D08)
        {
          int v12 = operator new(0xC0uLL);
          *(void *)uint64_t v37 = sub_1011AF264((uint64_t)v12, (uint64_t)buf);
          double Current = CFAbsoluteTimeGetCurrent();
          sub_100B50E4C(v11, (uint64_t *)v37, Current);
          uint64_t v14 = *(void *)v37;
          *(void *)uint64_t v37 = 0LL;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
          }
        }

        PB::Base::~Base((PB::Base *)buf);
      }

      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187A308);
      }
      uint64_t v15 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
      {
        HIDWORD(v24) = HIBYTE(v36);
        *(_DWORD *)__int128 buf = 134223872;
        uint64_t v85 = v25.i64[0];
        __int16 v86 = 2048;
        uint64_t v87 = v25.i64[1];
        __int16 v88 = 2048;
        uint64_t v89 = v26;
        __int16 v90 = 2048;
        uint64_t v91 = *((void *)&v28 + 1);
        __int16 v92 = 2048;
        uint64_t v93 = *((void *)&v29 + 1);
        __int16 v94 = 2048;
        uint64_t v95 = v30;
        __int16 v96 = 2048;
        uint64_t v97 = *((void *)&v30 + 1);
        __int16 v98 = 2048;
        uint64_t v99 = v27;
        __int16 v100 = 2048;
        uint64_t v101 = *((void *)&v27 + 1);
        __int16 v102 = 2048;
        uint64_t v103 = v31;
        __int16 v104 = 2048;
        uint64_t v105 = *((void *)&v31 + 1);
        __int16 v106 = 1026;
        int v107 = BYTE1(v28);
        __int16 v108 = 1026;
        int v109 = v28;
        __int16 v110 = 2048;
        uint64_t v111 = v32;
        __int16 v112 = 2048;
        uint64_t v113 = *((void *)&v32 + 1);
        __int16 v114 = 2048;
        uint64_t v115 = *((void *)&v33 + 1);
        __int16 v116 = 2048;
        uint64_t v117 = v33;
        __int16 v118 = 1026;
        int v119 = BYTE8(v26);
        __int16 v120 = 2048;
        uint64_t v121 = v29;
        __int16 v122 = 2048;
        uint64_t v123 = v34;
        __int16 v124 = 2048;
        uint64_t v125 = *((void *)&v34 + 1);
        __int16 v126 = 2048;
        uint64_t v127 = v35;
        __int16 v128 = 2048;
        uint64_t v129 = *((void *)&v35 + 1);
        __int16 v130 = 1026;
        int v131 = HIBYTE(v36);
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[RunningSpeedKF],startTime,%.2f,endTime,%.2f,runningSpeed,%.2f,deltaPedDist,%.2f,deltaOdoDist,%.2f,deltaPedTim e,%.2f,deltaOdoTime,%.2f,pedSpeed,%.2f,odoSpeed,%.2f,algDelay,%.2f,biasFactor,%.2f,isValidPedometerSpeed,%{pub lic}d,isValidOdometerSpeed,%{public}d,stateCovariance,%.2f,processNoise,%.2f,epsPed,%.2f,epsOdo,%.2f,isValidRu nningSpeed,%{public}d,deltaCalPedDist,%.2f,measNoiseOdo,%.3f,measNoisePed,%.3f,kalmanGainOdo,%.2f,kalmanGainPe d,%.2f,isTrackRunOdometer,%{public}d",  buf,  0xE2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187A308);
        }
        *(_DWORD *)uint64_t v37 = 134223872;
        *(void *)&v37[4] = v25.i64[0];
        __int16 v38 = 2048;
        uint64_t v39 = v25.i64[1];
        __int16 v40 = 2048;
        uint64_t v41 = v26;
        __int16 v42 = 2048;
        uint64_t v43 = *((void *)&v28 + 1);
        __int16 v44 = 2048;
        uint64_t v45 = *((void *)&v29 + 1);
        __int16 v46 = 2048;
        uint64_t v47 = v30;
        __int16 v48 = 2048;
        uint64_t v49 = *((void *)&v30 + 1);
        __int16 v50 = 2048;
        uint64_t v51 = v27;
        __int16 v52 = 2048;
        uint64_t v53 = *((void *)&v27 + 1);
        __int16 v54 = 2048;
        uint64_t v55 = v31;
        __int16 v56 = 2048;
        uint64_t v57 = *((void *)&v31 + 1);
        __int16 v58 = 1026;
        int v59 = BYTE1(v28);
        __int16 v60 = 1026;
        int v61 = v28;
        __int16 v62 = 2048;
        uint64_t v63 = v32;
        __int16 v64 = 2048;
        uint64_t v65 = *((void *)&v32 + 1);
        __int16 v66 = 2048;
        uint64_t v67 = *((void *)&v33 + 1);
        __int16 v68 = 2048;
        uint64_t v69 = v33;
        __int16 v70 = 1026;
        int v71 = BYTE8(v26);
        __int16 v72 = 2048;
        uint64_t v73 = v29;
        __int16 v74 = 2048;
        uint64_t v75 = v34;
        __int16 v76 = 2048;
        uint64_t v77 = *((void *)&v34 + 1);
        __int16 v78 = 2048;
        uint64_t v79 = v35;
        __int16 v80 = 2048;
        uint64_t v81 = *((void *)&v35 + 1);
        __int16 v82 = 1026;
        int v83 = HIBYTE(v36);
        LODWORD(v24) = 226;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "[RunningSpeedKF],startTime,%.2f,endTime,%.2f,runningSpeed,%.2f,deltaPedDist,%.2f,deltaOdoDist,%.2f,deltaPedTim e,%.2f,deltaOdoTime,%.2f,pedSpeed,%.2f,odoSpeed,%.2f,algDelay,%.2f,biasFactor,%.2f,isValidPedometerSpeed,%{pub lic}d,isValidOdometerSpeed,%{public}d,stateCovariance,%.2f,processNoise,%.2f,epsPed,%.2f,epsOdo,%.2f,isValidRu nningSpeed,%{public}d,deltaCalPedDist,%.2f,measNoiseOdo,%.3f,measNoisePed,%.3f,kalmanGainOdo,%.2f,kalmanGainPe d,%.2f,isTrackRunOdometer,%{public}d",  v37,  v24);
        int v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::PaceController::feedStepCountEntry(const CLExtendedStepCountEntry &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }
    }
  }

  double v16 = *a2;
  int v17 = *(_DWORD *)(a1 + 1168);
  unsigned int v18 = sub_100940348((uint64_t)(a2 + 1));
  sub_1007B7410((void **)(a1 + 8), (uint64_t)a2, v17, v18, v16);
  *(void *)(a1 + 1144) = v19;
}

void sub_100C6F9B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_100C6F9EC(uint64_t a1, uint64_t a2)
{
  if ((sub_1001B9A1C() & 1) != 0)
  {
    int v4 = sub_100BEF640(a2);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187A308);
    }
    __int128 v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      sub_100BEF7EC(*(void *)(a2 + 16), &__p);
      __int128 v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v7 = *(void *)(a2 + 112);
      *(_DWORD *)__int128 buf = 136446722;
      __int128 v32 = v6;
      __int16 v33 = 2050;
      uint64_t v34 = v7;
      __int16 v35 = 2050;
      uint64_t v36 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "[PaceController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}ld,labelState,%{public}ld,",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187A308);
      }
      uint64_t v20 = qword_101934518;
      sub_100BEF7EC(*(void *)(a2 + 16), &v28);
      if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v21 = &v28;
      }
      else {
        int v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v22 = *(void *)(a2 + 112);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v30 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  2LL,  "[PaceController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}ld,labelState,%{public}ld,",  &__p,  32);
      uint64_t v24 = v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::PaceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v24);
    }

    if (v4)
    {
      __int128 v8 = *(_OWORD *)a2;
      __int128 v9 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 944) = v9;
      *(_OWORD *)(a1 + 912) = v8;
      __int128 v10 = *(_OWORD *)(a2 + 48);
      __int128 v11 = *(_OWORD *)(a2 + 64);
      __int128 v12 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 1008) = v12;
      *(_OWORD *)(a1 + 96sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v10;
      *(_OWORD *)(a1 + 976) = v11;
      __int128 v13 = *(_OWORD *)(a2 + 112);
      __int128 v14 = *(_OWORD *)(a2 + 128);
      __int128 v15 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 1056) = v15;
      *(_OWORD *)(a1 + 104sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v14;
      *(_OWORD *)(a1 + 1024) = v13;
      __int128 v16 = *(_OWORD *)(a2 + 176);
      __int128 v17 = *(_OWORD *)(a2 + 192);
      __int128 v18 = *(_OWORD *)(a2 + 208);
      *(void *)(a1 + 1136) = *(void *)(a2 + 224);
      *(_OWORD *)(a1 + 112sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v18;
      *(_OWORD *)(a1 + 1104) = v17;
      *(_OWORD *)(a1 + 1088) = v16;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187A308);
    }
    uint64_t v19 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      *(_DWORD *)__int128 buf = 67109120;
      LODWORD(v32) = sub_1001B9A1C();
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "[PaceController] RunningSpeedKF not available (isWatch=%d)",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187A308);
      }
      uint64_t v25 = qword_101934518;
      sub_1004F2598();
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_1001B9A1C();
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v25,  1LL,  "[PaceController] RunningSpeedKF not available (isWatch=%d)",  &__p);
      __int128 v27 = (uint8_t *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::PaceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

void sub_100C6FE14(uint64_t a1, __int128 *a2)
{
}

double sub_100C6FE54(uint64_t a1, uint64_t a2)
{
  return result;
}

double sub_100C6FE94(uint64_t a1)
{
  int v2 = sub_100C70198(a1);
  double v3 = 0.0;
  if (v2 != 3) {
    return v3;
  }
  sub_1004F2598();
  if ((sub_1001B9A1C() & 1) == 0)
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187A308);
    }
    __int128 v5 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "[PaceController] getPace - invalid output configuration!",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return v3;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187A308);
    }
    v13[0] = 0;
    double v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  17LL,  "[PaceController] getPace - invalid output configuration!",  v13,  2);
    __int128 v8 = v7;
    sub_10029211C("Generic", 1LL, 0, 0LL, "double CLPedometer::PaceController::getPace() const", "%s\n", v6);
LABEL_26:
    if (v8 != buf) {
      free(v8);
    }
    return v3;
  }

  if (*(_BYTE *)(a1 + 496))
  {
    double v4 = *(double *)(a1 + 488);
    if (v4 == 0.0) {
      return 0.0;
    }
    else {
      return 1.0 / v4;
    }
  }

  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10187A308);
  }
  __int128 v9 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[PaceController] getPace - RunningSpeedKF pace invalid",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187A308);
    }
    v13[0] = 0;
    double v11 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "[PaceController] getPace - RunningSpeedKF pace invalid",  v13,  2);
    __int128 v8 = v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "double CLPedometer::PaceController::getPace() const", "%s\n", v11);
    goto LABEL_26;
  }

  return v3;
}

uint64_t sub_100C70198(uint64_t a1)
{
  return 2LL;
}

BOOL sub_100C701E4(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 1152);
  if (v2 == 2)
  {
    if ((a2 & 1) != 0)
    {
      *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 3LL;
    }

    else
    {
      uint64_t v8 = *(void *)(a1 + 1160) - 1LL;
      *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v8;
      if (!v8)
      {
        int v2 = 1;
        *(_DWORD *)(a1 + 1152) = 1;
        uint64_t v7 = 12LL;
        goto LABEL_21;
      }
    }

    int v2 = 2;
    return v2 == 2;
  }

  if (v2 == 1)
  {
    if ((_DWORD)a2)
    {
      uint64_t v6 = *(void *)(a1 + 1160) - 1LL;
      *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v6;
      if (!v6)
      {
        int v2 = 2;
        *(_DWORD *)(a1 + 1152) = 2;
        uint64_t v7 = 3LL;
LABEL_21:
        *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v7;
        return v2 == 2;
      }
    }

    else
    {
      *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = 12LL;
    }

    int v2 = 1;
    return v2 == 2;
  }

  if (v2) {
    return v2 == 2;
  }
  uint64_t v3 = *(void *)(a1 + 1160) - 1LL;
  *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v3;
  if (!v3)
  {
    if ((_DWORD)a2) {
      int v4 = 2;
    }
    else {
      int v4 = 1;
    }
    *(_DWORD *)(a1 + 1152) = v4;
    uint64_t v5 = 12LL;
    if ((_DWORD)a2) {
      uint64_t v5 = 3LL;
    }
    *(void *)(a1 + 116sub_100222B94(v52, (uint64_t)"tileDownloaded", 0) = v5;
  }

  return a2;
}

void sub_100C702AC(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_100C702DC(void *result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a2[1];
  *double result = *a2;
  result[1] = v4;
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(v4 + 8);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  uint64_t v7 = a3[1];
  result[2] = *a3;
  result[3] = v7;
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + 8);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  uint64_t v10 = a4[1];
  result[4] = *a4;
  result[5] = v10;
  if (v10)
  {
    double v11 = (unint64_t *)(v10 + 8);
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  return result;
}

uint64_t sub_100C70344(void *a1, void *a2, unsigned int a3)
{
  uint64_t v30 = 0LL;
  __int128 v31 = 0LL;
  uint64_t v32 = 0LL;
  double Current = CFAbsoluteTimeGetCurrent();
  double v29 = 0.0;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  sub_1002A82BC(*(uint64_t *)buf, "HRRecoveryLastHRRecordId", &v29);
  uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v29 <= 0.0)
  {
    uint64_t v17 = sub_1002F8DDC();
    sub_1002A82BC(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", &v29);
  }

  else
  {
    uint64_t v11 = sub_1002F8DDC();
    sub_1002AC7B8(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", &v29);
    uint64_t v12 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v12 + 944LL))(v12);
    uint64_t v13 = sub_1006E27E8();
    sub_100413284(v13, buf);
    sub_1002A667C(*(uint64_t *)buf, "HRRecoveryLastHRRecordId", 0xFFFFFFFFLL);
    __int128 v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  if ((*(unsigned int (**)(void, void, char **, double, double))(*(void *)*a1 + 16LL))( *a1,  a3 >> 5,  &v30,  v29,  Current) != 100)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187A348);
    }
    __int128 v18 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v29;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&_BYTE buf[14] = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLHRRecoveryCompanionSyncManager: Failed to fetch input heart rates for time range, startTime : %f, endTime: %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187A348);
      }
      int v34 = 134218240;
      double v35 = v29;
      __int16 v36 = 2048;
      double v37 = Current;
      LODWORD(v28) = 22;
      __int128 v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "CLHRRecoveryCompanionSyncManager: Failed to fetch input heart rates for time range, startTime : %f, endTime: %f",  COERCE_DOUBLE(&v34),  v28);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsHR(NSMutableDictionary *, uint32_t)",  "%s\n",  v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

  a1[6] = 0xBFF0000000000000LL;
  uint64_t v19 = v30;
  if (v30 == v31)
  {
    uint64_t v25 = v30;
    if (!v30) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  a1[6] = *((void *)v31 - 3);
  id v20 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v21 = v30;
  for (uint64_t i = v31; v21 != i; v21 += 32)
  {
    __int128 v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)__int128 buf = *(_OWORD *)v21;
    *(_OWORD *)&uint8_t buf[16] = v23;
    uint64_t v24 = -[CLHRRecoveryInputHRData initWithHRRecoveryInputHR:]( objc_alloc(&OBJC_CLASS___CLHRRecoveryInputHRData),  "initWithHRRecoveryInputHR:",  buf);
    [v20 addObject:v24];
  }

  [a2 setObject:v20 forKey:@"HRRecoveryInputHRKey"];
  uint64_t v25 = v30;
  uint64_t v19 = v31;
  if (v30)
  {
LABEL_23:
    __int128 v31 = v25;
    operator delete(v25);
  }

void sub_100C7072C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001BA1BC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7078C(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v32 = 0LL;
  __int16 v33 = 0LL;
  uint64_t v34 = 0LL;
  double Current = CFAbsoluteTimeGetCurrent();
  double v31 = 0.0;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  sub_1002A82BC(*(uint64_t *)buf, "HRRecoveryLastWRRecordId", &v31);
  uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v31 <= 0.0)
  {
    uint64_t v17 = sub_1002F8DDC();
    sub_1002A82BC(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", &v31);
  }

  else
  {
    uint64_t v11 = sub_1002F8DDC();
    sub_1002AC7B8(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", &v31);
    uint64_t v12 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v12 + 944LL))(v12);
    uint64_t v13 = sub_1006E27E8();
    sub_100413284(v13, buf);
    sub_1002A667C(*(uint64_t *)buf, "HRRecoveryLastWRRecordId", 0xFFFFFFFFLL);
    __int128 v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  if ((*(unsigned int (**)(void, unint64_t, char **, double, double))(**(void **)(a1 + 16) + 16LL))( *(void *)(a1 + 16),  a3 / 0x38uLL,  &v32,  v31,  Current) != 100)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187A348);
    }
    __int128 v18 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v31;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&_BYTE buf[14] = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLHRRecoveryCompanionSyncManager: Failed to fetch input work rates for time range, startTime : %f, endTime: %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187A348);
      }
      int v36 = 134218240;
      double v37 = v31;
      __int16 v38 = 2048;
      double v39 = Current;
      LODWORD(v3sub_100222B94(v35, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsWR", 0) = 22;
      double v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "CLHRRecoveryCompanionSyncManager: Failed to fetch input work rates for time range, startTime : %f, endTime: %f",  COERCE_DOUBLE(&v36),  v30);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsWR(NSMutableDictionary *, uint32_t)",  "%s\n",  v29);
      if (v29 != buf) {
        free(v29);
      }
    }
  }

  *(void *)(a1 + 56) = 0xBFF0000000000000LL;
  uint64_t v19 = v32;
  if (v32 == v33)
  {
    __int128 v27 = v32;
    if (!v32) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  *(void *)(a1 + 56) = *((void *)v33 - 6);
  id v20 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v21 = v32;
  std::string::size_type v22 = v33;
  if (v32 != v33)
  {
    do
    {
      __int128 v23 = *v21;
      __int128 v24 = v21[1];
      __int128 v25 = v21[2];
      uint64_t v42 = *((void *)v21 + 6);
      *(_OWORD *)&uint8_t buf[16] = v24;
      __int128 v41 = v25;
      *(_OWORD *)__int128 buf = v23;
      __int128 v26 = -[CLHRRecoveryInputWRData initWithHRRecoveryInputWR:]( objc_alloc(&OBJC_CLASS___CLHRRecoveryInputWRData),  "initWithHRRecoveryInputWR:",  buf);
      [v20 addObject:v26];

      int v21 = (_OWORD *)((char *)v21 + 56);
    }

    while (v21 != (_OWORD *)v22);
  }

  [a2 setObject:v20 forKey:@"HRRecoveryInputWRKey"];
  __int128 v27 = v32;
  uint64_t v19 = v33;
  if (v32)
  {
LABEL_23:
    __int16 v33 = v27;
    operator delete(v27);
  }

void sub_100C70BA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001BA1BC(&a15);
  _Unwind_Resume(a1);
}

unint64_t sub_100C70C08(uint64_t a1, void *a2, unsigned int a3)
{
  int v36 = 0LL;
  double v37 = 0LL;
  uint64_t v38 = 0LL;
  double Current = CFAbsoluteTimeGetCurrent();
  double v35 = 0.0;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  sub_1002A82BC(*(uint64_t *)buf, "HRRecoveryLastSessionRecordId", &v35);
  uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v35 <= 0.0)
  {
    uint64_t v17 = sub_1002F8DDC();
    sub_1002A82BC(v17, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", &v35);
  }

  else
  {
    uint64_t v11 = sub_1002F8DDC();
    sub_1002AC7B8(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", &v35);
    uint64_t v12 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v12 + 944LL))(v12);
    uint64_t v13 = sub_1006E27E8();
    sub_100413284(v13, buf);
    sub_1002A667C(*(uint64_t *)buf, "HRRecoveryLastSessionRecordId", 0xFFFFFFFFLL);
    __int128 v14 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v15 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  if ((*(unsigned int (**)(void, unint64_t, char **, double, double))(**(void **)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a3 / 0xA0uLL,  &v36,  v35,  Current) != 100)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187A348);
    }
    __int128 v18 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v35;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&_BYTE buf[14] = Current;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "CLHRRecoveryCompanionSyncManager: Failed to fetch input sessions for time range, startTime : %f, endTime: %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187A348);
      }
      int v40 = 134218240;
      double v41 = v35;
      __int16 v42 = 2048;
      double v43 = Current;
      LODWORD(v34) = 22;
      __int16 v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  16LL,  "CLHRRecoveryCompanionSyncManager: Failed to fetch input sessions for time range, startTime : %f, endTime: %f",  COERCE_DOUBLE(&v40),  v34);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession(NSMutableDictionary *, uint32_t)",  "%s\n",  v33);
      if (v33 != buf) {
        free(v33);
      }
    }
  }

  *(void *)(a1 + 64) = 0xBFF0000000000000LL;
  uint64_t v19 = v36;
  if (v36 == v37)
  {
    double v31 = v36;
    if (!v36) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  *(void *)(a1 + 64) = *((void *)v37 - 19);
  id v20 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  int v21 = v36;
  for (uint64_t i = v37; v21 != i; v21 += 160)
  {
    __int128 v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)__int128 buf = *(_OWORD *)v21;
    *(_OWORD *)&uint8_t buf[16] = v23;
    __int128 v24 = *((_OWORD *)v21 + 2);
    __int128 v25 = *((_OWORD *)v21 + 3);
    __int128 v26 = *((_OWORD *)v21 + 5);
    __int128 v47 = *((_OWORD *)v21 + 4);
    __int128 v48 = v26;
    __int128 v45 = v24;
    __int128 v46 = v25;
    __int128 v27 = *((_OWORD *)v21 + 6);
    __int128 v28 = *((_OWORD *)v21 + 7);
    __int128 v29 = *((_OWORD *)v21 + 9);
    __int128 v51 = *((_OWORD *)v21 + 8);
    __int128 v52 = v29;
    __int128 v49 = v27;
    __int128 v50 = v28;
    double v30 = -[CLHRRecoverySessionData initWithHRRecoverySession:]( objc_alloc(&OBJC_CLASS___CLHRRecoverySessionData),  "initWithHRRecoverySession:",  buf);
    [v20 addObject:v30];
  }

  [a2 setObject:v20 forKey:@"HRRecoverySessionKey"];
  double v31 = v36;
  uint64_t v19 = v37;
  if (v36)
  {
LABEL_23:
    double v37 = v31;
    operator delete(v31);
  }

void sub_100C71028( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001BA1BC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C71088(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 48);
  if (*(double *)(result + 48) > 0.0)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187A348);
    }
    int v2 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "[HR] Saving last Cold Storage sync timestamp: %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187A348);
      }
      uint64_t v6 = *v1;
      int v8 = 134217984;
      uint64_t v9 = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "[HR] Saving last Cold Storage sync timestamp: %f",  COERCE_DOUBLE(&v8));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressHR()",  "%s\n",  v7);
    }

    uint64_t v4 = sub_1002F8DDC();
    sub_1002AC7B8(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", v1);
    uint64_t v5 = sub_1002F8DDC();
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
  }

  return result;
}

uint64_t sub_100C71268(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 56);
  if (*(double *)(result + 56) > 0.0)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187A348);
    }
    int v2 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "[WR] Saving last Cold Storage sync timestamp: %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187A348);
      }
      uint64_t v6 = *v1;
      int v8 = 134217984;
      uint64_t v9 = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "[WR] Saving last Cold Storage sync timestamp: %f",  COERCE_DOUBLE(&v8));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressWR()",  "%s\n",  v7);
    }

    uint64_t v4 = sub_1002F8DDC();
    sub_1002AC7B8(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", v1);
    uint64_t v5 = sub_1002F8DDC();
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
  }

  return result;
}

uint64_t sub_100C71448(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 64);
  if (*(double *)(result + 64) > 0.0)
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187A348);
    }
    int v2 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "[Session] Saving last Cold Storage sync timestamp: %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187A348);
      }
      uint64_t v6 = *v1;
      int v8 = 134217984;
      uint64_t v9 = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "[Session] Saving last Cold Storage sync timestamp: %f",  COERCE_DOUBLE(&v8));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressSession()",  "%s\n",  v7);
    }

    uint64_t v4 = sub_1002F8DDC();
    sub_1002AC7B8(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", v1);
    uint64_t v5 = sub_1002F8DDC();
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
  }

  return result;
}

void sub_100C71628(id a1)
{
  qword_101934778 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

uint64_t sub_100C71654(uint64_t a1)
{
  uint64_t v1 = a1 + 256;
  if (!*(void *)(a1 + 256))
  {
    sub_100957290((uint64_t)sub_100C716D8, a1, *(void **)(a1 + 128), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

void sub_100C716D8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187A4B0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSLCSubscription::onSLCNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187A4B0);
    }
    int v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int128 v14 = "";
      __int16 v15 = 2082;
      unint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSLCSubscription::onSLCNotification, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  if (!*a2) {
    sub_100C73AE4(a4, a3);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C71894( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C718B4(uint64_t a1)
{
  uint64_t v1 = a1 + 264;
  if (!*(void *)(a1 + 264))
  {
    sub_1005DCB1C((uint64_t)sub_100C71938, a1, *(void **)(a1 + 128), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 264);
    *(void *)(a1 + 264) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

void sub_100C71938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187A4B0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLSLCSubscription::onFLNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187A4B0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLSLCSubscription::onFLNotification, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C73DC8(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C71AE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C71B08(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)a5;
    uint64_t v24 = *(void *)(a5 + 16);
  }

  if (*(char *)(a5 + 47) < 0)
  {
    sub_1010DD48C(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
  }

  else
  {
    __int128 __p = *(_OWORD *)(a5 + 24);
    uint64_t v26 = *(void *)(a5 + 40);
  }

  uint64_t v27 = *(void *)(a5 + 48);
  sub_1004C625C(a1, a2, a3, a4, (__int128 *)__dst);
  *(void *)a1 = off_10187A4E0;
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)a1 = off_10187A378;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = off_10182F180;
  char v10 = operator new(0x20uLL);
  *char v10 = off_10182F1B8;
  v10[1] = 0LL;
  *((_DWORD *)v10 + 6) = 31337;
  v10[2] = 0LL;
  *(void *)(a1 + 272) = off_10183EE40;
  *(void *)(a1 + 28sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v10 + 3;
  *(void *)(a1 + 288) = v10;
  *(void *)(a1 + 296) = 0LL;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 32sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
  *(_DWORD *)(a1 + 324) = 0xFFFF;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = 0LL;
  *(void *)(a1 + 344) = 0xBFF0000000000000LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 352) = xmmword_1012EA5D0;
  *(_OWORD *)(a1 + 368) = _Q1;
  *(_OWORD *)(a1 + 384) = _Q1;
  *(void *)(a1 + 40sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 42sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(void *)(a1 + 428) = 0LL;
  *(void *)(a1 + 412) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 44sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 46sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(void *)(a1 + 468) = 0LL;
  *(void *)(a1 + 452) = 0LL;
  *(_BYTE *)(a1 + 476) = 0;
  sub_1002F0B04(&v21);
  sub_1002A6F64(v21, "ForceMapMatching", (BOOL *)(a1 + 305));
  __int16 v16 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  id v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", @"CLClientManager");
  *(void *)(a1 + 48sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v19;
  objc_msgSend(v19, "registerDelegate:inSilo:", sub_100520500(a1 + 272), objc_msgSend(*(id *)(a1 + 128), "silo"));
  return a1;
}

void sub_100C71D5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C71DF8(uint64_t a1)
{
  *(void *)a1 = off_10187A378;

  sub_100527AF4(a1 + 272);
  uint64_t v2 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_1004C63B0(a1);
}

void sub_100C71E6C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C71DF8(a1);
  operator delete(v1);
}

void *sub_100C71E80@<X0>(uint64_t a1@<X8>)
{
  v6[0] = &off_10187A558;
  v6[1] = sub_100C71FDC;
  v6[2] = 0LL;
  uint64_t v7 = v6;
  sub_1010DDBC0(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_100890EC0((uint64_t)v10, (uint64_t)v6);
  sub_100C7444C(a1, (unsigned __int8 *)__p, 1LL);
  uint64_t v2 = v11;
  if (v11 == v10)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = v10;
  }

  else
  {
    if (!v11) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  double result = v7;
  if (v7 == v6)
  {
    uint64_t v5 = 4LL;
    double result = v6;
  }

  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v5 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100C71F90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  __int16 v14 = a12;
  if (a12 == &a9)
  {
    uint64_t v15 = 4LL;
    __int16 v14 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_100C71FDC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v35, Dictionary);
  BOOL v34 = 0;
  if ((sub_1002A6F64((uint64_t)v35, "kCLConnectionMessageSubscribeKey", &v34) & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    char v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      __int128 __p = (void *)68289026;
      __int16 v37 = 2082;
      uint64_t v38 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}",  (uint8_t *)&__p,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187A528);
      }
    }

    uint64_t v12 = qword_101934978;
    if (!os_signpost_enabled((os_log_t)qword_101934978)) {
      goto LABEL_40;
    }
    __int128 __p = (void *)68289026;
    __int16 v37 = 2082;
    uint64_t v38 = "";
    int v13 = "Couldn't get value for kCLConnectionMessageSubscribeKey key";
    __int16 v14 = "{msg%{public}.0s:Couldn't get value for kCLConnectionMessageSubscribeKey key}";
    uint64_t v15 = (os_log_s *)v12;
    uint32_t v16 = 18;
LABEL_21:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v13,  v14,  (uint8_t *)&__p,  v16);
    goto LABEL_40;
  }

  if (!+[CLSignificantChangeManagerAdapter isSupported](&OBJC_CLASS___CLSignificantChangeManagerAdapter, "isSupported")) {
    goto LABEL_40;
  }
  if (!v34)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    __int16 v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 64);
      __int128 __p = (void *)68289282;
      __int16 v37 = 2082;
      uint64_t v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Client unsubscribing #SLC, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
    }

    sub_100C72F28(a1);
    goto LABEL_39;
  }

  uint64_t v6 = *a2;
  sub_1010DDBC0(&__p, "com.apple.locationd.slc_configurer");
  int isEntitled = CLConnectionMessage::isEntitled(v6, &__p);
  if (SBYTE3(v40) < 0) {
    operator delete(__p);
  }
  double v33 = 500.0;
  if (((sub_1002A82BC((uint64_t)v35, "kCLConnectionMessageSLCDistanceKey", &v33) ^ 1 | isEntitled) & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    id v19 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v20 = *(void *)(a1 + 64);
      __int128 __p = (void *)68289282;
      __int16 v37 = 2082;
      uint64_t v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Client is not entitled to provide #SLC configuration, client:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187A528);
      }
    }

    uint64_t v21 = qword_101934978;
    if (!os_signpost_enabled((os_log_t)qword_101934978)) {
      goto LABEL_40;
    }
    goto LABEL_33;
  }

  unsigned int v31 = 0;
  unsigned int v32 = -1;
  if (!sub_1002A7CB0((uint64_t)v35, "kCLConnectionMessageSLCPowerBudgetKey", &v32))
  {
LABEL_10:
    sub_100B57D4C( a1,  (uint64_t)@"powerBudget",  (uint64_t)+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v31));
    sub_100B57D4C( a1,  (uint64_t)@"distanceThreshold",  (uint64_t)+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v33));
    int v8 = *a2;
    sub_1010DDBC0(&__p, "com.apple.locationd.private_info");
    int v9 = CLConnectionMessage::isEntitled(v8, &__p);
    if (SBYTE3(v40) < 0) {
      operator delete(__p);
    }
    *(_BYTE *)(a1 + 306) = v9;
    if (v9) {
      char v10 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
    }
    else {
      char v10 = 0LL;
    }
    sub_100B57D4C(a1, (uint64_t)@"includePrivateData", (uint64_t)v10);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    __int128 v23 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 64);
      __int128 __p = (void *)68289794;
      __int16 v37 = 2082;
      uint64_t v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v24;
      __int16 v41 = 2050;
      double v42 = v33;
      __int16 v43 = 1026;
      unsigned int v44 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:client subscribing to #SLC, client:%{public, location:escape_only}@, distance: %{public}f, powerBudget:%{public}d}",  (uint8_t *)&__p,  0x2Cu);
    }

void sub_100C72818( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1002A5590(&a13);

  _Unwind_Resume(a1);
}

void *sub_100C72880@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "SLC");
}

void sub_100C72894(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 136) isAuthorizedForServiceType:12];
  else {
    unsigned int v3 = 0;
  }
  int v4 = v2 ^ 1;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10187A528);
  }
  uint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    int v7 = *(unsigned __int8 *)(a1 + 320);
    v8[0] = 68290050;
    __int16 v9 = 2082;
    v8[1] = 0;
    char v10 = "";
    __int16 v11 = 2114;
    uint64_t v12 = v6;
    __int16 v13 = 1026;
    unsigned int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v7;
    __int16 v17 = 1026;
    int v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#SLC Monitoring status, client:%{public, location:escape_only}@, shouldBeRegistered :%{public}hhd, fRegisteredForSLC:%{public}hhd, shouldEngageCorrectiveCompensation:%{public}hhd}",  (uint8_t *)v8,  0x2Eu);
  }

  if (*(unsigned __int8 *)(a1 + 320) != v3 || *(unsigned __int8 *)(a1 + 321) != v4)
  {
    if (v3) {
      sub_100C72FF4(a1, v4);
    }
    else {
      sub_100C72A24(a1);
    }
  }

void sub_100C72A14(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 320)) {
    sub_100C72A24(a1);
  }
}

void sub_100C72A24(uint64_t a1)
{
  uint64_t v2 = sub_100C71654(a1);
  [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:0];
  uint64_t v3 = sub_100C718B4(a1);
  [*(id *)(*(void *)v3 + 16) unregister:*(void *)(*(void *)v3 + 8) forNotification:0];
  int v4 = *(void **)(a1 + 480);
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    [v5 clientName];
  }

  else
  {
    uint64_t v17 = 0LL;
    *(_OWORD *)__int128 __p = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    *(_OWORD *)unsigned int v14 = 0u;
    __int128 v11 = 0u;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)__int16 v9 = 0u;
    *(_OWORD *)char v10 = 0u;
    *(_OWORD *)int v7 = 0u;
    __int128 v8 = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
  }

  [v4 setClients:sub_100C7319C((uint64_t)v6) significantLocationChangeTo:0];
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v7[0]) < 0) {
    operator delete(v6[0]);
  }
  *(_BYTE *)(a1 + 32sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
}

void sub_100C72B38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C72B50(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(a2, v4) & 1) != 0)
  {
    if ([a2 BOOLValue])
    {
      sub_100B57D4C(a1, (uint64_t)@"powerBudget", (uint64_t)&off_1018D4430);
      uint64_t v5 = &off_1018D5368;
      uint64_t v6 = a1;
LABEL_8:
      sub_100B57D4C(v6, (uint64_t)@"distanceThreshold", (uint64_t)v5);
      goto LABEL_23;
    }

    goto LABEL_23;
  }

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(a2, v7) & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = *(void *)(a1 + 64);
      int v18 = 68289538;
      int v19 = 0;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      __int16 v22 = 2114;
      __int128 v23 = a2;
      __int16 v24 = 2114;
      uint64_t v25 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#slc Cannot migrate legacy subscription data, legacySubscriptionData:%{public, loca tion:escape_only}@, client:%{public, location:escape_only}@}",  (uint8_t *)&v18,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187A528);
      }
    }

    unsigned int v14 = (os_log_s *)qword_101934978;
    if (!os_signpost_enabled((os_log_t)qword_101934978)) {
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v17 = *(void *)(a1 + 64);
    int v18 = 68289538;
    int v19 = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2114;
    __int128 v23 = a2;
    __int16 v24 = 2114;
    uint64_t v25 = v17;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#slc Cannot migrate legacy subscription data",  "{msg%{public}.0s:#slc Cannot migrate legacy subscription data, legacySubscriptionData:%{public, locati on:escape_only}@, client:%{public, location:escape_only}@}",  (uint8_t *)&v18,  0x26u);
    goto LABEL_23;
  }

  id v8 = [a2 objectForKeyedSubscript:@"powerBudget"];
  __int16 v9 = (_UNKNOWN **)[a2 objectForKeyedSubscript:@"distance"];
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
    {
      sub_100B57D4C(a1, (uint64_t)@"powerBudget", (uint64_t)v8);
      uint64_t v6 = a1;
      uint64_t v5 = v9;
      goto LABEL_8;
    }
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10187A528);
  }
  __int16 v15 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    uint64_t v16 = *(void *)(a1 + 64);
    int v18 = 68289538;
    int v19 = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2114;
    __int128 v23 = a2;
    __int16 v24 = 2114;
    uint64_t v25 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#slc Cannot migrate legacy subscription data, legacySubscriptionData:%{public, locati on:escape_only}@, client:%{public, location:escape_only}@}",  (uint8_t *)&v18,  0x26u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
  }

  unsigned int v14 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978)) {
    goto LABEL_22;
  }
LABEL_23:
  sub_100B57DFC(a1);
}

void sub_100C72F28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  sub_1004C6CFC(&v6, (void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v6);
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_100C72FAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C72FC0(uint64_t a1)
{
  *(_BYTE *)(a1 + 306) = objc_msgSend( (id)sub_100B57ACC((void *)a1, (uint64_t)@"includePrivateData"),  "BOOLValue");
  sub_100C72894(a1);
}

void sub_100C72FF4(uint64_t a1, int a2)
{
  char v2 = a2;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v27 = _Q0;
  __int16 v28 = 0;
  uint64_t v29 = 0LL;
  if (a2)
  {
    uint64_t v9 = *(void *)sub_100C718B4(a1);
    [*(id *)(v9 + 16) register:*(void *)(v9 + 8) forNotification:0 registrationInfo:sub_100419014(&v27)];
    uint64_t v10 = sub_100C71654(a1);
  }

  else
  {
    objc_msgSend((id)sub_100B57ACC((void *)a1, (uint64_t)@"distanceThreshold"), "doubleValue");
    *((void *)&v27 + 1) = v11;
    uint64_t v12 = *(void *)sub_100C71654(a1);
    [*(id *)(v12 + 16) register:*(void *)(v12 + 8) forNotification:0 registrationInfo:sub_100419014(&v27)];
    uint64_t v10 = sub_100C718B4(a1);
  }

  [*(id *)(*(void *)v10 + 16) unregister:*(void *)(*(void *)v10 + 8) forNotification:0];
  uint64_t v13 = *(void **)(a1 + 480);
  unsigned int v14 = *(void **)(a1 + 64);
  if (v14)
  {
    [v14 clientName];
  }

  else
  {
    uint64_t v26 = 0LL;
    *(_OWORD *)__int128 __p = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    *(_OWORD *)__int128 v23 = 0u;
    __int128 v20 = 0u;
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)int v18 = 0u;
    *(_OWORD *)int v19 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    __int128 v17 = 0u;
    *(_OWORD *)__int16 v15 = 0u;
  }

  [v13 setClients:sub_100C7319C((uint64_t)v15) significantLocationChangeTo:1];
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(v15[0]);
  }
  *(_BYTE *)(a1 + 32sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 1;
  *(_BYTE *)(a1 + 321) = v2;
}

void sub_100C73188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CLCppContainer *sub_100C7319C(uint64_t a1)
{
  char v2 = (char *)operator new(0xB8uLL);
  *(_OWORD *)char v2 = *(_OWORD *)a1;
  *((void *)v2 + 2) = *(void *)(a1 + 16);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *((void *)v2 + 8) = *(void *)(a1 + 64);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  __int128 v3 = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + 72) = v3;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 8sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  __int16 v4 = *(_WORD *)(a1 + 96);
  v2[98] = *(_BYTE *)(a1 + 98);
  *((_WORD *)v2 + 48) = v4;
  __int128 v5 = *(_OWORD *)(a1 + 104);
  *((void *)v2 + 15) = *(void *)(a1 + 120);
  *(_OWORD *)(v2 + 104) = v5;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  __int128 v6 = *(_OWORD *)(a1 + 128);
  *((void *)v2 + 18) = *(void *)(a1 + 144);
  *((_OWORD *)v2 + 8) = v6;
  *(void *)(a1 + 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  __int128 v7 = *(_OWORD *)(a1 + 152);
  *((void *)v2 + 21) = *(void *)(a1 + 168);
  *(_OWORD *)(v2 + 152) = v7;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  __int16 v8 = *(_WORD *)(a1 + 176);
  v2[178] = *(_BYTE *)(a1 + 178);
  *((_WORD *)v2 + 88) = v8;
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  uint64_t v12 = sub_100C7482C;
  uint64_t v13 = &unk_10181D3D0;
  unsigned int v14 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

uint64_t sub_100C732D0(uint64_t a1, uint64_t a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10187A528);
  }
  __int16 v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 12);
    __int128 v7 = *(__n128 (**)(uint64_t, uint64_t))(a2 + 20);
    uint64_t v8 = *(void *)(a1 + 64);
    *(_DWORD *)__int128 buf = 134284291;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2049;
    *(void *)&_BYTE buf[14] = v6;
    *(_WORD *)&buf[22] = 2049;
    __int16 v43 = v7;
    LOWORD(v44) = 2114;
    *(void *)((char *)&v44 + 2) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending #SLC <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}@",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    uint64_t v22 = *(void *)(a2 + 4);
    uint64_t v23 = *(void *)(a2 + 12);
    uint64_t v24 = *(void *)(a2 + 20);
    uint64_t v25 = *(void *)(a1 + 64);
    int v34 = 134284291;
    uint64_t v35 = v22;
    __int16 v36 = 2049;
    uint64_t v37 = v23;
    __int16 v38 = 2049;
    uint64_t v39 = v24;
    __int16 v40 = 2114;
    uint64_t v41 = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "Sending #SLC <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}@",  &v34,  42);
    __int128 v27 = (char *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSLCSubscription::sendSignificantLocationChange(const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  sub_1002A5370(&v34);
  if ((int)sub_10100DFD4((UInt8 *)a2, (uint64_t)&v34, a1 + 304) >= 1)
  {
    *(void *)__int128 buf = sub_1002A59CC((uint64_t)&v34);
    sub_100C737A4(a1, buf, -1.0);
    objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 128), "vendor"),  "proxyForService:",  @"CLApplicationLifecycleManager"),  "launchApplication:requiringAuthForServiceMask:",  objc_msgSend(*(id *)(a1 + 64), "legacyClientKey"),  8);
  }

  if (*(_BYTE *)(a1 + 249))
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0xA012000000LL;
    __int16 v43 = sub_100C73A00;
    *(void *)&__int128 v44 = sub_100C73A4C;
    *((void *)&v44 + 1) = &unk_10175E27B;
    __int128 __p = 0LL;
    uint64_t v46 = 0LL;
    v47[0] = 0LL;
    *(void *)((char *)v47 + 5) = 0LL;
    int v48 = 1000;
    char v49 = 0;
    uint64_t v50 = 0LL;
    int v51 = -1;
    __asm { FMOV            V1.2D, #-1.0 }

    __int128 v52 = _Q1;
    unint64_t v53 = 0xBFF0000000000000LL;
    unint64_t v54 = 0xFFFFFFFF00000000LL;
    uint64_t v55 = 0LL;
    unint64_t v56 = 0xBFF0000000000000LL;
    uint64_t v57 = 0LL;
    unsigned int v14 = (const std::string::value_type *)objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "legacyClientKey"), "UTF8String");
    std::string::assign((std::string *)(*(void *)&buf[8] + 48LL), v14);
    *(_DWORD *)(*(void *)&buf[8] + 96LL) = 2;
    __int16 v15 = dispatch_group_create();
    dispatch_group_enter(v15);
    uint64_t v16 = *(void **)(*(void *)sub_100C71654(a1) + 16LL);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    id v33[2] = sub_100C73A60;
    v33[3] = &unk_10187A3C8;
    v33[4] = v15;
    v33[5] = buf;
    [v16 fetchLastSignificantLocationDistanceAndLatencyWithReply:v33];
    dispatch_group_enter(v15);
    __int128 v17 = *(void **)(a1 + 128);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    void v32[2] = sub_100C73A80;
    v32[3] = &unk_10187A3F0;
    _DWORD v32[4] = v15;
    v32[5] = buf;
    sub_1004DDF18(v17, (uint64_t)v32);
    sub_1002B68E8(a1 + 272, &v30);
    int v18 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_100C73AA0;
    block[3] = &unk_10187A418;
    block[6] = v30;
    uint64_t v29 = v31;
    if (v31)
    {
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      do
        unint64_t v20 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v20 + 1, (unint64_t *)p_shared_weak_owners));
    }

    block[4] = v15;
    block[5] = buf;
    dispatch_group_notify(v15, v18, block);
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
    _Block_object_dispose(buf, 8);
    if (SHIBYTE(v47[0]) < 0) {
      operator delete(__p);
    }
  }

  return sub_1002A5590(&v34);
}

void sub_100C73740( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  sub_1002A5590(&a33);
  _Unwind_Resume(a1);
}

void sub_100C737A4(uint64_t a1, void *a2, double a3)
{
  uint64_t v25 = 8LL;
  uint64_t v26 = v28;
  __int128 v27 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  unsigned int v32 = __p;
  uint64_t v8 = sub_100C749C8(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)&v32);
  *((void *)v8 + 5) = v25;
  sub_1000F2F30((void *)v8 + 6, &v26);
  for (uint64_t i = *(void **)(a1 + 176); i; uint64_t i = (void *)*i)
  {
    uint64_t v10 = i[2];
    uint64_t v23 = v28;
    uint64_t v24 = v29;
    if (v29)
    {
      uint64_t v11 = (unint64_t *)&v29->__shared_owners_;
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }

    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 16LL))(v10, &v23, 8LL);
    uint64_t v13 = v24;
    if (v24)
    {
      unsigned int v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  if (a3 >= 0.0)
  {
    sub_100C74850(a1, a3);
  }

  else
  {
    uint64_t v16 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "kCLConnectionMessageSignificantLocationChange");
    objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v16), "invalidate");
    [*(id *)(a1 + 240) setObject:0 forKeyedSubscript:v16];
  }

  __int128 v17 = v27;
  if (v27)
  {
    int v18 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  unint64_t v20 = v29;
  if (v29)
  {
    uint64_t v21 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (v31 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C739BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100C73A00(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v2;
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v3;
  __n128 result = *(__n128 *)(a2 + 120);
  __int128 v5 = *(_OWORD *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  *(__n128 *)(a1 + 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = result;
  return result;
}

void sub_100C73A4C(uint64_t a1)
{
}

void sub_100C73A60(uint64_t a1, double a2, double a3)
{
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 112LL) = a2;
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 12sub_100C5E4A8(v4, 0LL) = a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

__n128 sub_100C73A80(uint64_t a1, __int128 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int128 v3 = *a2;
  *(void *)(v2 + 88) = *((void *)a2 + 2);
  *(_OWORD *)(v2 + 72) = v3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  return result;
}

void sub_100C73AA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && *(void *)(v2 + 8) != -1LL) {
    sub_100B58D2C((uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL));
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void sub_100C73AE4(uint64_t a1, uint64_t a2)
{
  __int128 v3 = objc_alloc(&OBJC_CLASS___CLLocation);
  void v33[6] = v35[6];
  v33[7] = v35[7];
  v34[0] = v36[0];
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)v36 + 12);
  id v33[2] = v35[2];
  v33[3] = v35[3];
  v33[4] = v35[4];
  v33[5] = v35[5];
  v33[0] = v35[0];
  v33[1] = v35[1];
  __int16 v4 = -[CLLocation initWithClientLocation:](v3, "initWithClientLocation:", v33);
  id v5 = [*(id *)(a1 + 64) legacyClientKey];
  uint64_t v6 = *(void **)(a1 + 480);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3321888768LL;
  _DWORD v25[2] = sub_100C73F34;
  v25[3] = &unk_10187A450;
  v25[5] = a1;
  sub_100246C40((uint64_t)&v26, (uint64_t)v35);
  v25[4] = v5;
  [v6 handleProvisionalIntermediationForService:3 forClientKey:v5 at:v4 withReply:v25];

  unint64_t v7 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v30 < 0) {
    operator delete(__p);
  }
  uint64_t v10 = v28;
  if (v28)
  {
    uint64_t v11 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  uint64_t v13 = v27;
  if (v27)
  {
    unsigned int v14 = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  uint64_t v16 = v41;
  if (v41)
  {
    __int128 v17 = (unint64_t *)&v41->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v40 < 0) {
    operator delete(v39);
  }
  unint64_t v19 = v38;
  if (v38)
  {
    unint64_t v20 = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = v37;
  if (v37)
  {
    uint64_t v23 = (unint64_t *)&v37->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

void sub_100C73DA0(_Unwind_Exception *a1)
{
}

void sub_100C73DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_100292850( *(double *)(a1 + 328),  *(double *)(a1 + 336),  *(double *)(a4 + 4),  *(double *)(a4 + 12),  0.00000001))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    uint64_t v6 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      v15[0] = 68289282;
      v15[1] = 0;
      __int16 v16 = 2082;
      __int128 v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Not sending #SLC to #compensation client because their estimate hasn't changed, clien t:%{public, location:escape_only}@}",  (uint8_t *)v15,  0x1Cu);
    }
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 34sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v8;
    __int128 v9 = *(_OWORD *)(a4 + 32);
    __int128 v10 = *(_OWORD *)(a4 + 48);
    __int128 v11 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 404) = v11;
    *(_OWORD *)(a1 + 356) = v9;
    *(_OWORD *)(a1 + 372) = v10;
    __int128 v12 = *(_OWORD *)(a4 + 96);
    __int128 v13 = *(_OWORD *)(a4 + 112);
    __int128 v14 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 436) = v13;
    *(_OWORD *)(a1 + 452) = v14;
    *(_OWORD *)(a1 + 42sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v12;
    sub_100C73AE4(a1, a4);
  }

void sub_100C73F34(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_100C732D0(*(void *)(a1 + 40), a1 + 48);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187A528);
    }
    __int128 v3 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 32) UTF8String];
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#SLC Not sending due to CLCM provisional intermediation, client:%{public, location:escape_only}s}",  (uint8_t *)v5,  0x1Cu);
    }
  }

id sub_100C74050(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 64), "clientKey"), @"ClientKeyPath");
  __int128 v3 = (void *)(a1 + 96);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3),  @"SubscriptionStorageName");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)),  @"AuthContext");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 321)),  @"RegisteredForCC");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 320)),  @"RegisteredForSLC");
  sub_100869A44(a1 + 324, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p),  @"LastLocation");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 304)),  @"Options_AllowsAlteredAccessoryLocations");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 305)),  @"Options_ForceMapMatching");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 306)),  @"Options_IncludePrivateData");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 307)),  @"Options_AtMostOneLocation");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 312)),  @"Options_StartTime");
  return v2;
}

void sub_100C74238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C74254(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C74280(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100C742AC(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &off_10187A558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C742E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187A558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C7430C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100C74314(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100C74350()
{
}

void sub_100C7435C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  __int128 v3 = (std::__shared_weak_count *)a3[1];
  unint64_t v15 = v3;
  *a3 = 0LL;
  a3[1] = 0LL;
  id v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0) {
    id v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v16 = v4;
  __int128 v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  v5(v7, &v16);
  __int128 v10 = v17;
  if (v17)
  {
    __int128 v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (v15)
  {
    __int128 v13 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100C74430( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100C7444C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100C744C4(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56LL;
    }

    while (v5);
  }

  return a1;
}

void sub_100C744B0(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100C744C4(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    __int128 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_100C74744(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0LL;
  ++*v7;
  sub_100272D04((uint64_t)v25, 0LL);
  return i;
}

void sub_100C7472C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100C74744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = sub_100C747B8(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100C747A0(_Unwind_Exception *a1)
{
}

void *sub_100C747B8(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }

  sub_10001A504((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100C74810(_Unwind_Exception *exception_object)
{
}

void sub_100C7482C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (void *)sub_1011F6920(v1);
    operator delete(v2);
  }

id sub_100C74850(uint64_t a1, double a2)
{
  __int128 v4 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "kCLConnectionMessageSignificantLocationChange");
  id v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "newTimer");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100C74D44;
  v7[3] = &unk_10181D3D0;
  _DWORD v7[4] = a1;
  [v5 setHandler:v7];
  [v5 setNextFireDelay:a2];
  objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4), "invalidate");
  return [*(id *)(a1 + 240) setObject:v5 forKeyedSubscript:v4];
}

void *sub_100C74918@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  __n128 result = sub_100C74978(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100C74964(_Unwind_Exception *a1)
{
}

void *sub_100C74978(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_10182B4B0;
  CLConnectionMessage::CLConnectionMessage(a1 + 3, a2, *a3);
  return a1;
}

void sub_100C749B4(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100C749C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100C74C60(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_100C74D00((uint64_t)v26, 0LL);
  return i;
}

void sub_100C74C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

_BYTE *sub_100C74C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_1010DD48C(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    _DWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }

  v8[5] = 0LL;
  void v8[6] = 0LL;
  v8[7] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100C74CE8(_Unwind_Exception *a1)
{
}

void sub_100C74D00(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1004C6DE4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_100C74D44(uint64_t a1)
{
}

void sub_100C74D4C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_1010DDBC0(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_100C74DB8(v1, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C74D9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_100C74DB8(void *a1, unsigned __int8 *a2)
{
  __n128 result = sub_100121918(a1, a2);
  if (result)
  {
    sub_10005BEB8(a1, result, (uint64_t)v4);
    sub_100C74D00((uint64_t)v4, 0LL);
    return (unsigned __int8 *)1;
  }

  return result;
}

void sub_100C74E04()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101357818;
      v1[3] = unk_101357828;
      v1[4] = xmmword_101357838;
      v1[0] = xmmword_1013577F8;
      v1[1] = unk_101357808;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100C74ED8(_Unwind_Exception *a1)
{
}

uint64_t sub_100C74EF0(uint64_t a1)
{
  WORD2(v2) = *(_WORD *)(a1 + 4);
  LODWORD(v2) = *(_DWORD *)a1;
  *(_DWORD *)((char *)&v2 + 6) = *(_DWORD *)(a1 + 6);
  return v2;
}

__n128 sub_100C74F18@<Q0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = bswap32(a1[1]) & 0xFFFF0000 | ((unint64_t)bswap32(*((_DWORD *)a1 + 1)) << 32) | (bswap32(*a1) >> 16);
  *(int8x16_t *)(a2 + 8) = vrev32q_s8(*(int8x16_t *)(a1 + 4));
  *(int8x16_t *)(a2 + 24) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  *(int8x16_t *)(a2 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = vrev32q_s8(*(int8x16_t *)(a1 + 20));
  *(_DWORD *)(a2 + 192) = bswap32(*((_DWORD *)a1 + 48));
  *(void *)(a2 + 56) = bswap64(*((void *)a1 + 7));
  *(void *)(a2 + 196) = bswap64(*(void *)(a1 + 98));
  __int128 v2 = *((_OWORD *)a1 + 4);
  __int128 v3 = *((_OWORD *)a1 + 5);
  __int128 v4 = *((_OWORD *)a1 + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 112) = v4;
  *(_OWORD *)(a2 + 64) = v2;
  *(_OWORD *)(a2 + 8sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v3;
  __n128 result = *((__n128 *)a1 + 8);
  __int128 v6 = *((_OWORD *)a1 + 9);
  __int128 v7 = *((_OWORD *)a1 + 11);
  *(_OWORD *)(a2 + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *((_OWORD *)a1 + 10);
  *(_OWORD *)(a2 + 176) = v7;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v6;
  return result;
}

double sub_100C74FB0(unsigned int a1)
{
  if (a1 >= 0xF) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = a1;
  }
  return dbl_101357A68[v1];
}

double sub_100C74FCC(unsigned int a1)
{
  if (a1 >= 0xF) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = a1;
  }
  return dbl_101357AE8[v1];
}

std::string *sub_100C74FE8@<X0>(const std::string *a1@<X0>, void *a2@<X8>)
{
  __int128 v4 = operator new(0x30uLL);
  sub_1010DDBC0(v4, "");
  v4[3] = 0LL;
  *((_DWORD *)v4 + 8) = -1;
  v4[5] = 0LL;
  *a2 = v4;
  if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    id v5 = (const char *)a1;
  }
  else {
    id v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  }
  if (stat(v5, &v29))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x60uLL);
    uint8x8_t v12 = __error();
    unint64_t v13 = strerror(*v12);
    sub_1010DDBC0(&v28, v13);
    unint64_t v14 = __error();
    sub_100C75D2C(exception, (const std::string *)&v28, *v14, (uint64_t)a1);
  }

  if ((a1->__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v6 = (const char *)a1;
  }
  else {
    __int128 v6 = (const char *)a1->__r_.__value_.__r.__words[0];
  }
  int v7 = open(v6, 0);
  *((_DWORD *)v4 + 8) = v7;
  if (v7 < 0)
  {
    unint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x60uLL);
    unint64_t v16 = __error();
    float v17 = strerror(*v16);
    sub_1010DDBC0(&v28, v17);
    float v18 = __error();
    sub_100C75D2C(v15, (const std::string *)&v28, *v18, (uint64_t)a1);
  }

  if (fstat(v7, &v28) == -1)
  {
    BOOL v19 = (std::runtime_error *)__cxa_allocate_exception(0x60uLL);
    unint64_t v20 = __error();
    unint64_t v21 = strerror(*v20);
    sub_1010DDBC0(&v27, v21);
    size_t v22 = __error();
    sub_100C75D2C(v19, &v27, *v22, (uint64_t)a1);
  }

  st_uint64_t size = v28.st_size;
  v4[3] = v28.st_size;
  unint64_t v9 = mmap(0LL, st_size, 1, 2, *((_DWORD *)v4 + 8), 0LL);
  v4[5] = v9;
  if (v9 == (void *)-1LL)
  {
    unint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x60uLL);
    unint64_t v24 = __error();
    uint64_t v25 = strerror(*v24);
    sub_1010DDBC0(&v27, v25);
    uint64_t v26 = __error();
    sub_100C75D2C(v23, &v27, *v26, (uint64_t)a1);
  }

  return std::string::operator=((std::string *)v4, a1);
}

void sub_100C75250( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      sub_100C75EAC(v21, 0LL);
      _Unwind_Resume(a1);
    }
  }

  else if (!v23)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v22);
  goto LABEL_6;
}

BOOL sub_100C752D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    sub_1012684E4();
    goto LABEL_26;
  }

  if (*(int *)(a2 + 32) < 1 || !*(void *)(a2 + 40))
  {
    sub_101268654();
LABEL_26:
    __break(1u);
  }

  *(void *)((char *)&v25 + 4) = 192LL;
  LODWORD(v25) = 109498;
  HIDWORD(v25) = 381;
  __int128 v26 = 0uLL;
  *(void *)&v27[0] = 0LL;
  *(int32x2_t *)((char *)v27 + 12) = vdup_n_s32(0xC47A0000);
  DWORD2(v27[0]) = 0;
  DWORD1(v27[1]) = -998637568;
  memset((char *)&v27[1] + 8, 0, 148);
  if (*(void *)(a2 + 24) < 0xCuLL) {
    return 1LL;
  }
  uint64_t v7 = 0LL;
  while (1)
  {
    unint64_t v8 = sub_100C75568(a1, (__int128 *)a2, v7);
    if (WORD1(v8) == 1)
    {
      sub_100C7579C((__int128 *)a2, v7, (uint64_t)&v13);
      v27[8] = v23;
      v27[9] = *(_OWORD *)v24;
      *(_OWORD *)((char *)&v27[9] + 12) = *(_OWORD *)&v24[12];
      _DWORD v27[4] = v19;
      v27[5] = v20;
      v27[6] = v21;
      v27[7] = v22;
      v27[0] = v15;
      v27[1] = v16;
      v27[2] = v17;
      v27[3] = v18;
      v7 += 204LL;
      __int128 v25 = v13;
      __int128 v26 = v14;
      goto LABEL_20;
    }

    if (WORD1(v8) != 2) {
      return WORD1(v8) == 3;
    }
    if (HIDWORD(v8) != 8) {
      return 0LL;
    }
    uint64_t v9 = v7 + 20;
    sub_100C759A4((__int128 *)a2, v7, (int8x8_t *)&v13);
    uint64_t v10 = (v14 * HIDWORD(v13));
    uint64_t v7 = v9 + v10;
    sub_100C75BF0(a3, (uint64_t)&v25, SHIDWORD(v13), v9 + v10 + 20, *(_DWORD *)(a2 + 24));
    __int128 v11 = *(void **)(a3 + 24);
    *(void *)(a3 + 24) = 0LL;
    if (v11 == (void *)a3)
    {
      __int128 v11 = (void *)a3;
      uint64_t v12 = 4LL;
      goto LABEL_19;
    }

    if (v11)
    {
      uint64_t v12 = 5LL;
LABEL_19:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }

unint64_t sub_100C75568(uint64_t a1, __int128 *a2, uint64_t a3)
{
  if ((unint64_t)(a3 + 12) > *((void *)a2 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, 0xCuLL);
    __int128 v6 = std::string::insert(&v16, 0LL, "Not enough data left to read block of size ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v8 = std::string::append(&v17, " in wifi tile: ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    if (*((char *)a2 + 23) < 0)
    {
      sub_1010DD48C(&v14, *(void **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v14 = *a2;
      uint64_t v15 = *((void *)a2 + 2);
    }

    if (v15 >= 0) {
      uint64_t v10 = (const std::string::value_type *)&v14;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v11 = HIBYTE(v15);
    }
    else {
      std::string::size_type v11 = *((void *)&v14 + 1);
    }
    uint64_t v12 = std::string::append(&v18, v10, v11);
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10187A640;
  }

  return bswap32(*(unsigned __int16 *)(*((void *)a2 + 5) + a3 + 2)) & 0xFFFF0000 | ((unint64_t)bswap32(*(_DWORD *)(*((void *)a2 + 5) + a3 + 4)) << 32) | (bswap32(*(unsigned __int16 *)(*((void *)a2 + 5) + a3)) >> 16);
}

void sub_100C756E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

double sub_100C7579C@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if ((unint64_t)(a2 + 204) > *((void *)a1 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, 0xCCuLL);
    __int128 v6 = std::string::insert(&v16, 0LL, "Not enough data left to read block of size ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v8 = std::string::append(&v17, " in wifi tile: ");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    if (*((char *)a1 + 23) < 0)
    {
      sub_1010DD48C(&v14, *(void **)a1, *((void *)a1 + 1));
    }

    else
    {
      __int128 v14 = *a1;
      uint64_t v15 = *((void *)a1 + 2);
    }

    if (v15 >= 0) {
      uint64_t v10 = (const std::string::value_type *)&v14;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v11 = HIBYTE(v15);
    }
    else {
      std::string::size_type v11 = *((void *)&v14 + 1);
    }
    uint64_t v12 = std::string::append(&v18, v10, v11);
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10187A640;
  }

  *(void *)&double result = sub_100C74F18((unsigned __int16 *)(*((void *)a1 + 5) + a2), a3).n128_u64[0];
  return result;
}

void sub_100C758F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

int8x8_t sub_100C759A4@<D0>(__int128 *a1@<X1>, uint64_t a2@<X2>, int8x8_t *a3@<X8>)
{
  if ((unint64_t)(a2 + 20) > *((void *)a1 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v17, 0x14uLL);
    __int128 v7 = std::string::insert(&v17, 0LL, "Not enough data left to read block of size ");
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v9 = std::string::append(&v18, " in wifi tile: ");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    if (*((char *)a1 + 23) < 0)
    {
      sub_1010DD48C(&v15, *(void **)a1, *((void *)a1 + 1));
    }

    else
    {
      __int128 v15 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
    }

    if (v16 >= 0) {
      std::string::size_type v11 = (const std::string::value_type *)&v15;
    }
    else {
      std::string::size_type v11 = (const std::string::value_type *)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v12 = HIBYTE(v16);
    }
    else {
      std::string::size_type v12 = *((void *)&v15 + 1);
    }
    __int128 v13 = std::string::append(&v19, v11, v12);
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10187A640;
  }

  __int128 v4 = (int8x8_t *)(*((void *)a1 + 5) + a2);
  *a3 = (int8x8_t)(bswap32(v4->u16[1]) & 0xFFFF0000 | ((unint64_t)bswap32(v4->u32[1]) << 32) | (bswap32(v4->u16[0]) >> 16));
  int8x8_t result = vrev32_s8(v4[1]);
  a3[1] = result;
  a3[2].i32[0] = bswap32(v4[2].u32[0]);
  return result;
}

void sub_100C75B3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_100C75BF0(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v9 = a3;
  int v7 = a5;
  int v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *, int *))(*(void *)v5 + 48LL))( v5,  a2,  &v9,  &v8,  &v7);
}

void sub_100C75C34(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10187A618;
  if (SHIBYTE(this[5].__imp_.__imp_) < 0) {
    operator delete((void *)this[4].__imp_.__imp_);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::runtime_error::~runtime_error(this);
}

std::string *sub_100C75C94(std::string *this)
{
  int v2 = this[1].__r_.__value_.__r.__words[1];
  if (v2 >= 1) {
    close(v2);
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = -1;
  std::string::size_type cap = (void *)this[1].__r_.__value_.__l.__cap_;
  if (cap)
  {
    std::string::pointer data = this[1].__r_.__value_.__l.__data_;
    if (data) {
      munmap(cap, (size_t)data);
    }
  }

  this[1].__r_.__value_.__l.__cap_ = 0LL;
  this[1].__r_.__value_.__r.__words[0] = 0LL;
  return std::string::assign(this, "");
}

std::string *sub_100C75CF0(std::string *a1)
{
  return a1;
}

std::runtime_error *sub_100C75D2C(std::runtime_error *a1, const std::string *a2, int a3, uint64_t a4)
{
  int v8 = std::runtime_error::runtime_error(a1, a2);
  v8[1].__vftable = 0LL;
  v8->__vftable = (std::runtime_error_vtbl *)off_10187A618;
  v8[1].__imp_.__imp_ = 0LL;
  v8[2].__vftable = 0LL;
  LODWORD(v8[2].__imp_.__imp_) = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(&v8[3], *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    std::runtime_error v9 = *(std::runtime_error *)a4;
    v8[4].__vftable = *(std::runtime_error_vtbl **)(a4 + 16);
    void v8[3] = v9;
  }

  p_imp = &a1[4].__imp_;
  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    sub_1010DD48C(p_imp, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }

  else
  {
    __int128 v11 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    a1[5].__imp_.__imp_ = (const char *)a2->__r_.__value_.__l.__cap_;
    *(_OWORD *)&p_imp->__imp_ = v11;
  }

  return a1;
}

void sub_100C75DE0(_Unwind_Exception *a1)
{
}

void sub_100C75E1C(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10187A618;
  if (SHIBYTE(this[5].__imp_.__imp_) < 0) {
    operator delete((void *)this[4].__imp_.__imp_);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::runtime_error::~runtime_error(this);
  operator delete(v2);
}

void sub_100C75E80(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100C75EAC(std::string **a1, std::string *a2)
{
  __int128 v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    __int128 v4 = sub_100C75CF0(v3);
    operator delete(v4);
  }

void sub_100C75ED8(uint64_t a1)
{
  if (*(void *)(a1 + 2600))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v1 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "CLMM,Vehicle,Maps API already initialized",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  1LL,  "CLMM,Vehicle,Maps API already initialized",  v11,  2);
    __int128 v3 = (uint8_t *)v2;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "%s\n", v2);
    if (v3 == buf) {
      return;
    }
LABEL_22:
    free(v3);
    return;
  }

  *(void *)(a1 + 2608) = dispatch_queue_create("cl_geo_access_map_feature_geometry_queue", 0LL);
  id v5 = [[GEOMapFeatureAccess alloc] initWithQueue:*(void *)(a1 + 2608)];
  *(void *)(a1 + 260sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v5;
  if (!v5) {
    sub_1012687C4();
  }
  [v5 setAllowNetworkTileLoad:1];
  [*(id *)(a1 + 2600) setFlipNegativeTravelDirectionRoads:1];
  [*(id *)(a1 + 2600) setVisitDoubleTravelDirectionRoadsTwice:1];
  [*(id *)(a1 + 2600) setAllowStaleData:1];
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }
  __int128 v6 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = [*(id *)(a1 + 2600) allowStaleData];
    *(_DWORD *)__int128 buf = 67240192;
    unsigned int v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLMM,Vehicle,using maps API,stale data,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v8 = qword_1019348B8;
    unsigned int v9 = [*(id *)(a1 + 2600) allowStaleData];
    v11[0] = 67240192;
    v11[1] = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  0LL,  "CLMM,Vehicle,using maps API,stale data,%{public}d",  v11,  8);
    __int128 v3 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()",  "%s\n",  v10);
    if (v3 != buf) {
      goto LABEL_22;
    }
  }

id sub_100C76224(uint64_t a1, void *a2)
{
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    unsigned int v9 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 134349056;
      uint64_t v78 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v51 = *(void *)(a1 + 8);
    int v74 = 134349056;
    uint64_t v75 = v51;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  &v74,  12);
    uint64_t v50 = (uint8_t *)v52;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const",  "%s\n",  v52);
    goto LABEL_76;
  }

  if (*(_BYTE *)(a1 + 33)) {
    return 0LL;
  }
  id v3 = a2;
  if (!*(void *)(a1 + 2600) || *a2 == 0LL) {
    return 0LL;
  }
  id v5 = objc_autoreleasePoolPush();
  __int128 v6 = *(uint64_t **)(*(void *)v3 + 136LL);
  if (*(uint64_t **)(*(void *)v3 + 144LL) == v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
  }

  v64[0] = v7;
  v64[1] = v8;
  id v12 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472LL;
  v62[2] = sub_100C76C10;
  v62[3] = &unk_10187A690;
  v62[4] = v12;
  uint64_t v63 = v62;
  unsigned int v13 = operator new(0x20uLL);
  void *v13 = &off_10187A7F8;
  v13[1] = a1;
  __int128 v14 = v13 + 1;
  v13[2] = v64;
  v13[3] = &v63;
  __int16 v76 = (int *)v13;
  ++*(_DWORD *)(a1 + 36);
  __int128 v15 = (char *)operator new(0x20uLL);
  *(void *)__int128 v15 = &off_10187A7F8;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)v14;
  *((void *)v15 + 3) = v14[2];
  uint64_t v73 = v15;
  BOOL v16 = sub_100C76C70((uint64_t)v72);
  std::string v17 = v73;
  if (v73 == v72)
  {
    uint64_t v18 = 4LL;
    std::string v17 = v72;
  }

  else
  {
    if (!v73) {
      goto LABEL_22;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_22:
  if (v16)
  {
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    id v19 = [v12 countByEnumeratingWithState:&v58 objects:v71 count:16];
    if (v19)
    {
      uint64_t v57 = v5;
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      uint64_t v21 = *(void *)v59;
      while (2)
      {
        for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v59 != v21) {
            objc_enumerationMutation(v12);
          }
          __int128 v23 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
          if ([v23 roadID] == **(id **)v3)
          {
            if ((unint64_t)[v23 coordinateCount] > 1)
            {
              id v34 = [v23 coordinateCount];
              uint64_t v35 = *(double **)(*(void *)v3 + 136LL);
              if (*(double **)(*(void *)v3 + 144LL) == v35)
              {
                double v36 = 0.0;
                double v37 = 0.0;
              }

              else
              {
                double v36 = *v35;
                double v37 = v35[1];
              }

              if (sub_100292850( v36,  v37,  *(double *)[v23 coordinates],  *((double *)objc_msgSend(v23, "coordinates") + 1),  0.00000001))
              {
                uint64_t v38 = *(void *)(*(void *)v3 + 144LL);
                if (v38 == *(void *)(*(void *)v3 + 136LL))
                {
                  double v39 = 0.0;
                  double v40 = 0.0;
                }

                else
                {
                  double v39 = *(double *)(v38 - 16);
                  double v40 = *(double *)(v38 - 8);
                }

                if (sub_100292850( v39,  v40,  *((double *)[v23 coordinates] + 2 * ((uint64_t)v34 - 1)),  *((double *)objc_msgSend(v23, "coordinates") + 2 * ((uint64_t)v34 - 1) + 1),  0.00000001))
                {
                  id v3 = v23;
                  int v41 = 0;
                  goto LABEL_57;
                }
              }
            }

            else
            {
              unint64_t v24 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v25 = *(void *)(a1 + 8);
                id v26 = [v23 roadID];
                id v27 = [v23 coordinateCount];
                *(_DWORD *)__int128 buf = 134349569;
                uint64_t v78 = v25;
                __int16 v79 = 2049;
                id v80 = v26;
                __int16 v81 = 2050;
                id v82 = v27;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two co ordinate,%{public}ld",  buf,  0x20u);
                p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                uint64_t v28 = qword_1019348B8;
                uint64_t v29 = *(void *)(a1 + 8);
                id v30 = [v23 roadID];
                id v31 = [v23 coordinateCount];
                int v65 = 134349569;
                uint64_t v66 = v29;
                __int16 v67 = 2049;
                id v68 = v30;
                __int16 v69 = 2050;
                id v70 = v31;
                LODWORD(v56) = 32;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  2LL,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two co ordinate,%{public}ld",  &v65,  v56);
                double v33 = (uint8_t *)v32;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const",  "%s\n",  v32);
                p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
                if (v33 != buf) {
                  free(v33);
                }
              }
            }
          }
        }

        id v19 = [v12 countByEnumeratingWithState:&v58 objects:v71 count:16];
        if (v19) {
          continue;
        }
        break;
      }

      int v41 = 1;
LABEL_57:
      id v5 = v57;
    }

    else
    {
      int v41 = 1;
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    id v42 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *(void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 134349056;
      uint64_t v78 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v53 = *(void *)(a1 + 8);
      int v65 = 134349056;
      uint64_t v66 = v53;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)",  &v65,  12);
      uint64_t v55 = (uint8_t *)v54;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const",  "%s\n",  v54);
      if (v55 != buf) {
        free(v55);
      }
      int v41 = 0;
      id v3 = 0LL;
    }

    else
    {
      int v41 = 0;
      id v3 = 0LL;
    }
  }

  __int128 v44 = v76;
  if (v76 == &v74)
  {
    uint64_t v45 = 4LL;
    __int128 v44 = &v74;
  }

  else
  {
    if (!v76) {
      goto LABEL_64;
    }
    uint64_t v45 = 5LL;
  }

  (*(void (**)(void))(*(void *)v44 + 8 * v45))();
LABEL_64:
  objc_autoreleasePoolPop(v5);
  if (!v41) {
    return v3;
  }
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }
  uint64_t v46 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v47 = *(void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 134349056;
    uint64_t v78 = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v48 = *(void *)(a1 + 8);
    int v74 = 134349056;
    uint64_t v75 = v48;
    LODWORD(v56) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads",  &v74,  v56);
    uint64_t v50 = (uint8_t *)v49;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const",  "%s\n",  v49);
LABEL_76:
    if (v50 != buf) {
      free(v50);
    }
  }

  return 0LL;
}

void sub_100C76B74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char *a58)
{
  __int128 v59 = a58;
  if (a58 == &a55)
  {
    uint64_t v60 = 4LL;
    __int128 v59 = &a55;
  }

  else
  {
    if (!a58) {
      goto LABEL_6;
    }
    uint64_t v60 = 5LL;
  }

  (*(void (**)(void))(*(void *)v59 + 8 * v60))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

id sub_100C76C10(uint64_t a1, void *a2)
{
  id result = [a2 travelDirection];
  if ((_DWORD)result != 6)
  {
    id result = [a2 travelDirection];
    if ((_DWORD)result != 255) {
      return [*(id *)(a1 + 32) addObject:a2];
    }
  }

  return result;
}

BOOL sub_100C76C70(uint64_t a1)
{
  uint64_t v28 = 0LL;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000LL;
  char v31 = 0;
  uint64_t v22 = 0LL;
  __int128 v23 = &v22;
  uint64_t v24 = 0x3052000000LL;
  uint64_t v25 = sub_100C7D308;
  id v26 = sub_100C7D318;
  dispatch_group_t v27 = dispatch_group_create();
  uint64_t v18 = 0LL;
  id v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  uint64_t v21 = 0LL;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100C7D324;
  v17[3] = &unk_10186EEA0;
  v17[4] = &v28;
  v17[5] = &v22;
  v17[6] = &v18;
  dispatch_group_enter((dispatch_group_t)v23[5]);
  *(void *)__int128 buf = v17;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_100008BDC();
  }
  id v3 = (void *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v2 + 48LL))(v2, buf);
  __int128 v4 = (dispatch_group_s *)v23[5];
  dispatch_time_t v5 = dispatch_time(0LL, 100000000LL);
  uint64_t v6 = dispatch_group_wait(v4, v5);
  v19[3] = v6;
  if (v6)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v7 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = v19[3];
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v12 = v19[3];
      int v32 = 134349056;
      uint64_t v33 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu",  &v32,  12);
      __int128 v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)",  "%s\n",  v13);
    }

    [v3 cancel];
  }

  else if (v23[5])
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    unsigned int v9 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,clearing dispatchGroup",  &v32,  2);
      BOOL v16 = (char *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)",  "%s\n",  v15);
    }

    void v23[5] = 0LL;
  }

  if (v19[3]) {
    BOOL v10 = 0LL;
  }
  else {
    BOOL v10 = *((_BYTE *)v29 + 24) == 0;
  }
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);
  return v10;
}

void sub_100C770D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100C77108(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4 = a1;
  double v127 = a4;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    id v19 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(v4 + 8);
      *(_DWORD *)__int128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v99 = *(void *)(v4 + 8);
      *(_DWORD *)uint64_t v129 = 134349056;
      *(void *)&v129[4] = v99;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  v129,  12);
      uint64_t v101 = (uint8_t *)v100;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const",  "%s\n",  v100);
      if (v101 != buf) {
        free(v101);
      }
    }

    return 0LL;
  }

  uint64_t v7 = objc_autoreleasePoolPush();
  __int128 v126 = *(_OWORD *)(a3 + 56);
  double v8 = round(a4);
  unsigned int v9 = (v8 + v8);
  if (v9 >= 0x1F4) {
    unint64_t v10 = 500LL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v123 = 0LL;
  __int16 v124 = 0LL;
  uint64_t v125 = 0LL;
  sub_100C78548(&v123, v10);
  uint64_t v116 = v4;
  if (!*(_BYTE *)(v4 + 33))
  {
    id v22 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    v122[0] = _NSConcreteStackBlock;
    v122[1] = 3221225472LL;
    v122[2] = sub_100C785FC;
    v122[3] = &unk_10187A690;
    v122[4] = v22;
    *(void *)&__int128 v161 = v122;
    __int128 v23 = operator new(0x28uLL);
    void *v23 = &off_10187A878;
    v23[1] = v4;
    uint64_t v24 = v23 + 1;
    _DWORD v23[2] = &v126;
    v23[3] = &v127;
    _BYTE v23[4] = &v161;
    *(void *)&v129[24] = v23;
    ++*(_DWORD *)(v4 + 36);
    uint64_t v25 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v25 = &off_10187A878;
    __int128 v26 = v24[1];
    *(_OWORD *)(v25 + 8) = *v24;
    *(_OWORD *)(v25 + 24) = v26;
    __int16 v160 = v25;
    BOOL v27 = sub_100C76C70((uint64_t)v159);
    uint64_t v28 = v160;
    if (v160 == v159)
    {
      uint64_t v29 = 4LL;
      uint64_t v28 = v159;
    }

    else
    {
      if (!v160) {
        goto LABEL_42;
      }
      uint64_t v29 = 5LL;
    }

    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_42:
    if (v27)
    {
      __int128 v120 = 0u;
      __int128 v121 = 0u;
      __int128 v118 = 0u;
      __int128 v119 = 0u;
      id v34 = [v22 countByEnumeratingWithState:&v118 objects:v158 count:16];
      if (v34)
      {
        uint64_t v35 = *(void *)v119;
        do
        {
          for (uint64_t i = 0LL; i != v34; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v119 != v35) {
              objc_enumerationMutation(v22);
            }
            v37.n128_f64[0] = sub_1009779E8( *(void **)(*((void *)&v118 + 1) + 8LL * (void)i),  1,  (std::string **)buf);
            if (*(void *)buf) {
              sub_1000E8F38(&v123, (__int128 *)buf);
            }
            uint64_t v38 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              double v39 = (unint64_t *)(*(void *)&buf[8] + 8LL);
              do
                unint64_t v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v37);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }

          id v34 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v118, v158, 16, v37.n128_f64[0]);
        }

        while (v34);
      }
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      int v41 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = *(void *)(v4 + 8);
        *(_DWORD *)__int128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,query failed (roadsWithinDistance)",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        unint64_t v106 = *(void *)(v4 + 8);
        v152.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)v152.n128_u64 + 4) = v106;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,query failed (roadsWithinDistance)",  &v152,  12);
        __int16 v108 = (uint8_t *)v107;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, cons t CLMapCrumb &, double, BOOL) const",  "%s\n",  v107);
        if (v108 != buf) {
          free(v108);
        }
      }
    }

    uint64_t v43 = *(void **)&v129[24];
    if (*(_BYTE **)&v129[24] == v129)
    {
      uint64_t v44 = 4LL;
      uint64_t v43 = v129;
    }

    else
    {
      if (!*(void *)&v129[24]) {
        goto LABEL_68;
      }
      uint64_t v44 = 5LL;
    }

    (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_68:
    if (!v27) {
      goto LABEL_138;
    }
LABEL_69:
    uint64_t v45 = (uint64_t *)v123;
    uint64_t v21 = 1LL;
    uint64_t v115 = (uint64_t *)v124;
    if (v123 == v124) {
      goto LABEL_139;
    }
    uint64_t v46 = (double *)(v4 + 56);
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v114 = _Q0;
    while (1)
    {
      if (!*v45)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        __int16 v96 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v97 = *(void *)(v4 + 8);
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v97;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v109 = *(void *)(v116 + 8);
          *(_DWORD *)uint64_t v129 = 134349056;
          *(void *)&v129[4] = v109;
          LODWORD(v112) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr",  v129,  v112);
          uint64_t v111 = (uint8_t *)v110;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, co nst CLMapCrumb &, double, BOOL) const",  "%s\n",  v110);
          if (v111 != buf) {
            free(v111);
          }
        }

        sub_100890314(a2);
        goto LABEL_138;
      }

      __n128 v152 = 0uLL;
      float v153 = 0.0;
      __int16 v154 = 1;
      float v155 = 0.0;
      unint64_t v157 = 0LL;
      __int128 v156 = 0uLL;
      *(void *)uint64_t v129 = 0LL;
      *(void *)&v129[8] = 0LL;
      *(_OWORD *)&v129[16] = v114;
      uint64_t v130 = 0LL;
      uint64_t v131 = 0LL;
      unint64_t v132 = 0xBFF0000000000000LL;
      uint64_t v144 = 0LL;
      int v145 = 0;
      memset(&v142[32], 0, 32);
      __int16 v143 = 0;
      __int128 v146 = 0u;
      __int128 v147 = 0u;
      __int128 v148 = 0u;
      memset(v149, 0, 27);
      memset(&v149[32], 0, 48);
      __int128 v141 = 0u;
      memset(v142, 0, 30);
      __int128 v139 = 0u;
      __int128 v140 = 0u;
      __int128 v137 = 0u;
      __int128 v138 = 0u;
      __int128 v135 = 0u;
      __int128 v136 = 0u;
      __int128 v133 = 0u;
      __int128 v134 = 0u;
      unint64_t v151 = 0xBFF0000000000000LL;
      uint64_t v150 = 0LL;
      uint64_t v52 = *v45;
      uint64_t v53 = *(double **)(*v45 + 136);
      unint64_t v54 = *(void *)(*v45 + 144) - (void)v53;
      unint64_t v117 = 0xBFF0000000000000LL;
      if ((int)(v54 >> 4) <= 1)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        uint64_t v75 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          LOWORD(v161) = 0;
          LODWORD(v112) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1",  &v161,  v112);
          uint64_t v89 = (uint8_t *)v88;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]",  "%s\n",  v88);
          if (v89 != buf) {
            free(v89);
          }
        }

        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        __int16 v76 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v77 = *(void *)(v116 + 8);
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v77;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,findClosestPointOnRoad returned false",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v90 = *(void *)(v116 + 8);
          LODWORD(v161) = 134349056;
          *(void *)((char *)&v161 + 4) = v90;
          LODWORD(v112) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,findClosestPointOnRoad returned false",  &v161,  v112);
          __int16 v92 = (uint8_t *)v91;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, co nst CLMapCrumb &, double, BOOL) const",  "%s\n",  v91);
          if (v92 != buf) {
            free(v92);
          }
          goto LABEL_109;
        }

void sub_100C78444( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45)
{
  a45 = (uint64_t)&a38;
  sub_10004CC28((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_100C78548(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100007008();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    uint64_t v6 = (char *)sub_100037038(result, a2);
    unsigned int v9 = *a1;
    double v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      unint64_t v10 = &v6[v5];
    }

    else
    {
      unint64_t v10 = &v6[v5];
      do
      {
        __int128 v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(void *)double v8 = 0LL;
        *((void *)v8 + 1) = 0LL;
      }

      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }

    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_1000EC3DC((uint64_t)&v14);
  }

  return result;
}

id sub_100C785FC(uint64_t a1, void *a2)
{
  id result = [a2 travelDirection];
  if ((_DWORD)result != 6)
  {
    id result = [a2 travelDirection];
    if ((_DWORD)result != 255) {
      return [*(id *)(a1 + 32) addObject:a2];
    }
  }

  return result;
}

__n128 sub_100C7865C(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x48uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  __n128 result = a2[1];
  __n128 v9 = a2[2];
  v4[2] = result;
  v4[3] = v9;
  v4[4].n128_u64[0] = a2[3].n128_u64[0];
  unint64_t v10 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v10 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_100C786D0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      *(_DWORD *)__int128 buf = 134349056;
      uint64_t v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v5 = *(void *)(a1 + 8);
      int v8 = 134349056;
      uint64_t v9 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  &v8,  12);
      unint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsConnected(CLMapGeometry::ConnectedQueryResultList &, const CLMa pRoadPtr &, BOOL, double, double, BOOL) const",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return 0LL;
}

uint64_t sub_100C7888C( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, double **a6, int a7, double *a8, double a9, double a10)
{
  char v109 = a7;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v21 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v22 = *(void *)(a1 + 8);
      buf.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  (uint8_t *)&buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v23 = *(void *)(a1 + 8);
    LODWORD(v117) = 134349056;
    *(void *)((char *)&v117 + 4) = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  &v117,  12);
    uint64_t v25 = (__n128 *)v24;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResu ltList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const",  "%s\n",  v24);
    goto LABEL_138;
  }

  int64x2_t v12 = *a6;
  if (*a6)
  {
    int v14 = a7;
    double v17 = a9;
    if ((a5 & 1) == 0)
    {
      int v14 = a7 ^ 1;
      char v109 = a7 ^ 1;
    }

    uint64_t v19 = *(void *)v12;
    if (v14)
    {
      double v20 = 1.0 - a9;
      sub_1001AC068(v12);
      double v17 = v12[5];
    }

    else
    {
      sub_1001AC068(v12);
      double v20 = v12[5];
    }

    *a8 = v20 * v17;
    if (v20 * v17 > a10)
    {
      *a8 = -1.0;
      return 1LL;
    }

    double v29 = 1.0;
    if (!v14) {
      double v29 = 0.0;
    }
    double v108 = v29;
    sub_100D3F3A8(a1, a2, a6, v14, &v108, 1);
    uint64_t v104 = 0LL;
    uint64_t v105 = &v104;
    uint64_t v106 = 0x2020000000LL;
    char v107 = 0;
    *(void *)&__int128 v117 = 0LL;
    *((void *)&v117 + 1) = &v117;
    uint64_t v118 = 0x4812000000LL;
    __int128 v119 = sub_100C79B34;
    __int128 v120 = sub_100C79B50;
    uint64_t v121 = 0LL;
    v122[0] = (uint64_t)v122;
    v122[1] = (uint64_t)v122;
    v122[2] = 0LL;
    uint64_t v97 = 0LL;
    __int16 v98 = (__n128 **)&v97;
    uint64_t v99 = 0x4812000000LL;
    __int16 v100 = sub_100C79B34;
    uint64_t v101 = sub_100C79B50;
    uint64_t v102 = 0LL;
    v103[0] = (uint64_t)v103;
    v103[1] = (uint64_t)v103;
    v103[2] = 0LL;
    uint64_t v30 = objc_autoreleasePoolPush();
    v96[0] = _NSConcreteStackBlock;
    v96[1] = 3221225472LL;
    v96[2] = sub_100C79B58;
    v96[3] = &unk_10187A6B8;
    v96[7] = a1;
    v96[8] = v19;
    v96[4] = &v104;
    v96[5] = &v117;
    v96[6] = &v97;
    v94[0] = _NSConcreteStackBlock;
    v94[1] = 3221225472LL;
    v94[2] = sub_100C7A080;
    v94[3] = &unk_10187A6E0;
    v94[4] = v96;
    uint64_t v95 = v94;
    v92[0] = _NSConcreteStackBlock;
    v92[1] = 3221225472LL;
    v92[2] = sub_100C7A090;
    v92[3] = &unk_10187A6E0;
    v92[4] = v96;
    uint64_t v93 = v92;
    uint64_t v31 = a4;
    if (!a3)
    {
LABEL_62:
      if (!v31)
      {
LABEL_91:
        BOOL v28 = *((_BYTE *)v105 + 24) == 0;
LABEL_133:
        objc_autoreleasePoolPop(v30);
        _Block_object_dispose(&v97, 8);
        sub_100890314(v103);
        _Block_object_dispose(&v117, 8);
        sub_100890314(v122);
        _Block_object_dispose(&v104, 8);
        return v28;
      }

      if (*(_BYTE *)(a1 + 33))
      {
        __int128 v115 = 0uLL;
        uint64_t v116 = 0LL;
        sub_100C78548((char **)&v115, 3uLL);
        uint64_t v49 = *(void *)(a1 + 16);
        if (v49)
        {
          if (v109)
          {
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            uint64_t v50 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
            {
              unint64_t v51 = *(void *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v51;
              _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road",  (uint8_t *)&buf,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10187A7C8);
              }
              uint64_t v52 = *(void *)(a1 + 8);
              *(_DWORD *)__int128 v114 = 134349056;
              *(void *)&_OWORD v114[4] = v52;
              LODWORD(v9sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road",  v114,  v90);
              unint64_t v54 = (__n128 *)v53;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::Intersectio nQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, doub le, double, double &) const",  "%s\n",  v53);
              if (v54 != &buf) {
                free(v54);
              }
              uint64_t v31 = a4;
            }
          }

          else
          {
            sub_100976638(v49, (uint64_t *)a6, (char **)&v115, 1);
          }

          double v59 = (uint64_t *)*((void *)&v115 + 1);
          for (uint64_t i = (uint64_t *)v115; i != v59; i += 2)
          {
            __n128 buf = 0uLL;
            char v124 = 1;
            uint64_t v125 = 0LL;
            char v126 = 0;
            sub_1000F2F30(&buf, i);
            char v124 = 1;
            uint64_t v125 = 0LL;
            char v126 = 0;
            __n128 v61 = sub_100C7A00C((__n128 **)(*((void *)&v117 + 1) + 48LL), &buf);
            uint64_t v62 = (std::__shared_weak_count *)buf.n128_u64[1];
            if (buf.n128_u64[1])
            {
              double v63 = (unint64_t *)(buf.n128_u64[1] + 8);
              do
                unint64_t v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v62->__on_zero_shared)(v62, v61);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
          }
        }

        buf.n128_u64[0] = (unint64_t)&v115;
        sub_10004CC28((void ***)&buf);
        goto LABEL_89;
      }

      *(void *)__int128 v114 = sub_100C76224(a1, a6);
      if (*(void *)v114)
      {
        ++*(_DWORD *)(a1 + 36);
        uint64_t v111 = 0LL;
        double v55 = operator new(0x28uLL);
        void *v55 = &off_10187A978;
        v55[1] = &v109;
        v55[2] = a1;
        v55[3] = v114;
        v55[4] = &v95;
        uint64_t v111 = v55;
        BOOL v56 = sub_100C76C70((uint64_t)v110);
        uint64_t v57 = v111;
        if (v111 == v110)
        {
          uint64_t v58 = 4LL;
          uint64_t v57 = v110;
        }

        else
        {
          if (!v111)
          {
LABEL_101:

            *(void *)__int128 v114 = 0LL;
            if (v56)
            {
LABEL_89:
              goto LABEL_91;
            }

            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            double v70 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
            {
              unint64_t v71 = *(void *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v71;
              _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)",  (uint8_t *)&buf,  0xCu);
            }

            if (!sub_1002921D0(115, 0))
            {
LABEL_132:
              BOOL v28 = 0LL;
              goto LABEL_133;
            }

            bzero(&buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            uint64_t v72 = *(void *)(a1 + 8);
            LODWORD(v115) = 134349056;
            *(void *)((char *)&v115 + 4) = v72;
            LODWORD(v9sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)",  &v115,  v90);
            double v69 = (__n128 *)v73;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQ ueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const",  "%s\n",  v73);
LABEL_148:
            if (v69 != &buf) {
              free(v69);
            }
            goto LABEL_132;
          }

          uint64_t v58 = 5LL;
        }

        (*(void (**)(void))(*v57 + 8 * v58))();
        goto LABEL_101;
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      double v65 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v66 = *(void *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil",  (uint8_t *)&buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_132;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1019348B0 == -1)
      {
LABEL_98:
        uint64_t v67 = *(void *)(a1 + 8);
        LODWORD(v115) = 134349056;
        *(void *)((char *)&v115 + 4) = v67;
        LODWORD(v9sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil",  &v115,  v90);
        double v69 = (__n128 *)v68;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQuery ResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const",  "%s\n",  v68);
        goto LABEL_148;
      }

void sub_100C79A18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t sub_100C79B34(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0LL;
  return sub_100C37EE4((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void sub_100C79B50(uint64_t a1)
{
}

void sub_100C79B58(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a2)
  {
    if ([a2 roadID] != *(id *)(a1 + 64)
      && (([a2 isRail] & 1) != 0
       || ![a2 travelDirection]
       || [a2 travelDirection] == 1))
    {
      char v26 = 1;
      uint64_t v27 = 0LL;
      char v28 = 0;
      sub_1009779E8(a2, 1, (std::string **)buf);
      __n128 v7 = *(__n128 *)buf;
      memset(buf, 0, sizeof(buf));
      __n128 v25 = v7;
      if (v7.n128_u64[0])
      {
        if (sub_1001AD150(v25.n128_i64[0]))
        {
          char v26 = 1;
          uint64_t v27 = 0LL;
          char v28 = 0;
          if (a3) {
            uint64_t v9 = *(void *)(a1 + 40);
          }
          else {
            uint64_t v9 = *(void *)(a1 + 48);
          }
          __n128 v8 = sub_100C7A00C((__n128 **)(*(void *)(v9 + 8) + 48LL), &v25);
        }
      }

      else
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        int64x2_t v12 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = *(void *)(v4 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v20 = *(void *)(v4 + 8);
          int v23 = 134349056;
          uint64_t v24 = v20;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr",  &v23,  12);
          unint64_t v22 = (uint8_t *)v21;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQue ryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, doub le, double &) const_block_invoke",  "%s\n",  v21);
          if (v22 != buf) {
            free(v22);
          }
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
      }

      int v14 = (std::__shared_weak_count *)v25.n128_u64[1];
      if (v25.n128_u64[1])
      {
        int64x2_t v15 = (unint64_t *)(v25.n128_u64[1] + 8);
        do
          unint64_t v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v8);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    unint64_t v10 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(v4 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,GEOMapFeatureRoad is null",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      unint64_t v17 = *(void *)(v4 + 8);
      v25.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)v25.n128_u64 + 4) = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,GEOMapFeatureRoad is null",  &v25,  12);
      uint64_t v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryRe sultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, doub le &) const_block_invoke",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }

void sub_100C79FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

__n128 sub_100C7A00C(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x38uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  __n128 result = a2[1];
  v4[2] = result;
  v4[3].n128_u8[0] = a2[2].n128_u8[0];
  unint64_t v9 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v9 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_100C7A080(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100C7A090(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100C7A0A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      sub_100974B94(v2, 0.5, 0.5);
    }
    sub_100974BD0(a1 + 2616, *(double *)(a1 + 8), 60.0, 60.0);
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v3 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v5 = *(void *)(a1 + 8);
      int v8 = 134349056;
      uint64_t v9 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  &v8,  12);
      unint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLGeoMapFeatureAccessGeometry::clearStoredStaleConnections()",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

BOOL sub_100C7A2B0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, double a5, double a6)
{
  uint64_t v6 = (__int128 **)a3;
  int v172 = 0;
  int v164 = (uint64_t **)(a1 + 2616);
  uint64_t v163 = a1 + 96;
  unsigned int v166 = (double *)(a1 + 56);
  int v168 = a4 & ~(a4 >> 31);
  while (v172 != v168)
  {
    unsigned __int8 v177 = 0;
    unint64_t v10 = objc_autoreleasePoolPush();
    uint64_t v11 = *v6;
    if (!*v6)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      __int128 v136 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v137 = *(void *)(a1 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v137;
        _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,input road is nullptr",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_243;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v138 = *(void *)(a1 + 8);
      *(_DWORD *)__int16 v182 = 134349056;
      *(void *)&v182[4] = v138;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,input road is nullptr",  v182,  v162);
      __int128 v140 = (uint8_t *)v139;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMa pGeometry::DistanceQueryResult &, int) const",  "%s\n",  v139);
      goto LABEL_249;
    }

    uint64_t v12 = *(void *)v11;
    sub_1001AC068(*v6);
    double v13 = *((double *)v11 + 5);
    if (v13 <= 0.0)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      __int128 v141 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v142 = *(void *)(a1 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v142;
        _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,road length is 0.0",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_243;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v143 = *(void *)(a1 + 8);
      *(_DWORD *)__int16 v182 = 134349056;
      *(void *)&v182[4] = v143;
      LODWORD(v162) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,road length is 0.0",  v182,  v162);
      __int128 v140 = (uint8_t *)v144;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMa pGeometry::DistanceQueryResult &, int) const",  "%s\n",  v144);
      goto LABEL_249;
    }

    if ((int)((*((void *)*v6 + 18) - *((void *)*v6 + 17)) >> 4) <= 1)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      int v145 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v146 = *(void *)(a1 + 8);
        uint64_t v147 = *(void *)*v6;
        uint64_t v148 = (int)((uint64_t)(*((void *)*v6 + 18) - *((void *)*v6 + 17)) >> 4);
        *(_DWORD *)__n128 buf = 134349569;
        *(void *)&uint8_t buf[4] = v146;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(void *)&_BYTE buf[14] = v147;
        *(_WORD *)&buf[22] = 2050;
        uint64_t v188 = v148;
        _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld",  buf,  0x20u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_243;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v149 = *(void *)(a1 + 8);
      uint64_t v150 = *(void *)*a3;
      unint64_t v151 = (__n128 (*)(__n128 *, __n128 *))(int)((uint64_t)(*(void *)(*a3 + 144) - *(void *)(*a3 + 136)) >> 4);
      *(_DWORD *)__int16 v182 = 134349569;
      *(void *)&v182[4] = v149;
      *(_WORD *)&v182[12] = 2049;
      *(void *)&v182[14] = v150;
      *(_WORD *)&v182[22] = 2050;
      uint64_t v183 = v151;
      LODWORD(v162) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld",  v182,  v162);
      __int128 v140 = (uint8_t *)v152;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMa pGeometry::DistanceQueryResult &, int) const",  "%s\n",  v152);
      goto LABEL_249;
    }

    uint64_t v14 = sub_1001AC040((uint64_t)*v6, 0);
    if (!v14)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      float v153 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v154 = *(void *)(a1 + 8);
        uint64_t v155 = *(void *)*v6;
        uint64_t v156 = (int)((uint64_t)(*((void *)*v6 + 18) - *((void *)*v6 + 17)) >> 4);
        *(_DWORD *)__n128 buf = 134349569;
        *(void *)&uint8_t buf[4] = v154;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(void *)&_BYTE buf[14] = v155;
        *(_WORD *)&buf[22] = 2050;
        uint64_t v188 = v156;
        _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld",  buf,  0x20u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_243;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v158 = *(void *)(a1 + 8);
      uint64_t v159 = *(void *)*a3;
      __int16 v160 = (__n128 (*)(__n128 *, __n128 *))(int)((uint64_t)(*(void *)(*a3 + 144) - *(void *)(*a3 + 136)) >> 4);
      *(_DWORD *)__int16 v182 = 134349569;
      *(void *)&v182[4] = v158;
      *(_WORD *)&v182[12] = 2049;
      *(void *)&v182[14] = v159;
      *(_WORD *)&v182[22] = 2050;
      uint64_t v183 = v160;
      LODWORD(v162) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld",  v182,  v162);
      __int128 v140 = (uint8_t *)v161;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMa pGeometry::DistanceQueryResult &, int) const",  "%s\n",  v161);
LABEL_249:
      if (v140 != buf) {
        free(v140);
      }
LABEL_243:
      objc_autoreleasePoolPop(v10);
      return 0;
    }

    if (a6 >= 0.0)
    {
      int v15 = v177;
    }

    else
    {
      int v15 = 1;
      unsigned __int8 v177 = 1;
    }

    double v16 = fabs(a6);
    double v17 = 1.0 - a5;
    if (v15) {
      double v17 = a5;
    }
    double v18 = v13 * v17;
    uint64_t v171 = v10;
    if (v13 * v17 <= v16)
    {
      if (v15) {
        a5 = 0.0;
      }
      else {
        a5 = 1.0;
      }
    }

    else
    {
      a5 = a5 + a6 / v13;
    }

    ++v172;
    __int128 v176 = **v6;
    *(void *)__int16 v182 = 0LL;
    *(void *)&v182[8] = v182;
    *(void *)&v182[16] = 0x4812000000LL;
    uint64_t v183 = sub_100C7BBE0;
    v184 = sub_100C7BC04;
    int v185 = &unk_10175E27B;
    memset(v186, 0, 24);
    if (v18 > v16) {
      goto LABEL_72;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      memset(buf, 0, sizeof(buf));
      sub_100C78548((char **)buf, 3uLL);
      uint64_t v19 = *(void *)(a1 + 16);
      if (v19)
      {
        if (v177) {
          sub_100976638(v19, a3, (char **)buf, 1);
        }
        else {
          sub_100975E78(v19, a3, (char **)buf, 1);
        }
        double v60 = *(uint64_t **)buf;
        double v59 = *(uint64_t **)&buf[8];
        while (v60 != v59)
        {
          LOBYTE(v175) = 1;
          sub_100C7DF74(v60, (char *)&v175, &v181);
          sub_1000E8F38((char **)(*(void *)&v182[8] + 48LL), &v181);
          __n128 v61 = (std::__shared_weak_count *)*((void *)&v181 + 1);
          if (*((void *)&v181 + 1))
          {
            uint64_t v62 = (unint64_t *)(*((void *)&v181 + 1) + 8LL);
            do
              unint64_t v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }

          v60 += 2;
        }
      }

      *(void *)&__int128 v181 = buf;
      sub_10004CC28((void ***)&v181);
      goto LABEL_72;
    }

    uint64_t v20 = sub_10097496C(v164, &v176, 0);
    uint64_t v21 = v20;
    BOOL v22 = v20 != 0LL;
    if (v20)
    {
      int v23 = (_OWORD *)((char *)v20 + 8);
      uint64_t v24 = 8LL;
      if (!v177)
      {
        uint64_t v24 = 32LL;
        int v23 = v20 + 2;
      }

      __n128 v25 = *(uint64_t **)((char *)v20 + v24);
      char v26 = (uint64_t *)*((void *)v23 + 1);
      while (v25 != v26)
      {
        uint64_t v28 = *v25;
        uint64_t v27 = v25[1];
        *(void *)&__int128 v181 = *v25;
        *((void *)&v181 + 1) = v27;
        if (v27)
        {
          double v29 = (unint64_t *)(v27 + 8);
          do
            unint64_t v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }

        uint64_t v31 = *(int64x2_t **)&v182[8];
        if (v28)
        {
          LOBYTE(v175) = 1;
          sub_100C7DF74((uint64_t *)&v181, (char *)&v175, &v180);
          unint64_t v32 = v31[4].u64[0];
          uint64_t v33 = (_OWORD *)v31[3].i64[1];
          if ((unint64_t)v33 >= v32)
          {
            uint64_t v36 = v31[3].i64[0];
            uint64_t v37 = ((uint64_t)v33 - v36) >> 4;
            unint64_t v38 = v37 + 1;
            uint64_t v39 = v32 - v36;
            if (v39 >> 3 > v38) {
              unint64_t v38 = v39 >> 3;
            }
            else {
              unint64_t v40 = v38;
            }
            __int16 v189 = v31 + 4;
            int v41 = (char *)sub_100037038((uint64_t)v31[4].i64, v40);
            uint64_t v43 = &v41[16 * v37];
            *(_OWORD *)uint64_t v43 = v180;
            __int128 v180 = 0uLL;
            __n128 v45 = (void *)v31[3].i64[0];
            uint64_t v44 = (void *)v31[3].i64[1];
            if (v44 == v45)
            {
              int64x2_t v48 = vdupq_n_s64((unint64_t)v44);
              uint64_t v46 = &v41[16 * v37];
            }

            else
            {
              uint64_t v46 = &v41[16 * v37];
              do
              {
                __int128 v47 = *((_OWORD *)v44 - 1);
                v44 -= 2;
                *((_OWORD *)v46 - 1) = v47;
                v46 -= 16;
                void *v44 = 0LL;
                v44[1] = 0LL;
              }

              while (v44 != v45);
              int64x2_t v48 = v31[3];
            }

            uint64_t v49 = v43 + 16;
            v31[3].i64[0] = (uint64_t)v46;
            v31[3].i64[1] = (uint64_t)(v43 + 16);
            *(int64x2_t *)&uint8_t buf[8] = v48;
            uint64_t v50 = v31[4].i64[0];
            v31[4].i64[0] = (uint64_t)&v41[16 * v42];
            uint64_t v188 = v50;
            *(void *)__n128 buf = v48.i64[0];
            sub_1000EC3DC((uint64_t)buf);
            unint64_t v51 = (std::__shared_weak_count *)*((void *)&v180 + 1);
            v31[3].i64[1] = (uint64_t)v49;
            if (v51)
            {
              p_shared_owners = (unint64_t *)&v51->__shared_owners_;
              do
                unint64_t v53 = __ldaxr(p_shared_owners);
              while (__stlxr(v53 - 1, p_shared_owners));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }

          else
          {
            *uint64_t v33 = v180;
            v31[3].i64[1] = (uint64_t)(v33 + 1);
          }
        }

        else
        {
          uint64_t v35 = *(void *)(*(void *)&v182[8] + 48LL);
          for (uint64_t i = *(void *)(*(void *)&v182[8] + 56LL); i != v35; uint64_t i = sub_10000AE14(i - 16))
            ;
          v31[3].i64[1] = v35;
        }

        unint64_t v54 = (std::__shared_weak_count *)*((void *)&v181 + 1);
        if (*((void *)&v181 + 1))
        {
          double v55 = (unint64_t *)(*((void *)&v181 + 1) + 8LL);
          do
            unint64_t v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }

        if (!v28) {
          break;
        }
        v25 += 2;
      }

      uint64_t v57 = *(void *)(*(void *)&v182[8] + 48LL);
      uint64_t v58 = *(void *)(*(void *)&v182[8] + 56LL);
      if (v57 == v58)
      {
        BOOL v22 = 0;
        goto LABEL_127;
      }

      *((void *)v21 + 7) = *(void *)(a1 + 8);
      BOOL v22 = 1;
    }

    else
    {
      uint64_t v57 = *(void *)(*(void *)&v182[8] + 48LL);
      uint64_t v58 = *(void *)(*(void *)&v182[8] + 56LL);
    }

    if (v57 != v58)
    {
      if (v21) {
        goto LABEL_72;
      }
LABEL_160:
      if (*(void *)(*(void *)&v182[8] + 48LL) != *(void *)(*(void *)&v182[8] + 56LL))
      {
        char v107 = sub_10097496C(v164, &v176, 1);
        double v108 = v107;
        if (v107)
        {
          sub_100974AB0(v107, v177);
          *((void *)v108 + 7) = *(void *)(a1 + 8);
          uint64_t v109 = *(void *)(*(void *)&v182[8] + 48LL);
          for (uint64_t j = *(void *)(*(void *)&v182[8] + 56LL); v109 != j; v109 += 16LL)
          {
            uint64_t v111 = *(__int128 **)v109;
            uint64_t v112 = *(std::__shared_weak_count **)(v109 + 8);
            *(void *)__n128 buf = *(void *)v109;
            *(void *)&uint8_t buf[8] = v112;
            if (v112)
            {
              uint64_t v113 = (unint64_t *)&v112->__shared_owners_;
              do
                unint64_t v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
            }

            uint64_t v115 = *(void *)v111;
            if (*(void *)v111)
            {
              if (v177)
              {
                v108[1] = 1;
                uint64_t v116 = (char **)(v108 + 8);
              }

              else
              {
                _BYTE *v108 = 1;
                uint64_t v116 = (char **)(v108 + 32);
              }

              sub_1000E8F38(v116, v111);
            }

            else
            {
              sub_100974AB0(v108, v177 != 0);
              *((void *)v108 + 7) = 0xBFF0000000000000LL;
            }

            if (v112)
            {
              __int128 v117 = (unint64_t *)&v112->__shared_owners_;
              do
                unint64_t v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }

            if (!v115) {
              break;
            }
          }
        }

        else
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v121 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v122 = *(void *)(a1 + 8);
            *(_DWORD *)__n128 buf = 134349056;
            *(void *)&uint8_t buf[4] = v122;
            _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            uint64_t v123 = *(void *)(a1 + 8);
            LODWORD(v181) = 134349056;
            *(void *)((char *)&v181 + 4) = v123;
            LODWORD(v162) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created",  &v181,  v162);
            uint64_t v125 = (uint8_t *)v124;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList & , CLMapGeometry::DistanceQueryResult &, int) const",  "%s\n",  v124);
            if (v125 != buf) {
              free(v125);
            }
          }
        }
      }

      goto LABEL_72;
    }

void sub_100C7BAE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void **a47, uint64_t a48, char a49)
{
  a47 = a20;
  sub_10004CC28(&a47);
  _Unwind_Resume(a1);
}

__n128 sub_100C7BBE0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void sub_100C7BC04(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_10004CC28(&v1);
}

void sub_100C7BC2C(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || ![a2 travelDirection]
    || [a2 travelDirection] == 1)
  {
    id v4 = *(id *)(a1 + 48);
    if (v4 != [a2 roadID]
      || (uint64_t v5 = (double *)[a2 coordinates],
          !sub_100292850(*v5, v5[1], **(double **)(a1 + 56), *(double *)(*(void *)(a1 + 56) + 8LL), 0.0000001)))
    {
      v6.n128_f64[0] = sub_1009779E8(a2, 1, &v15);
      if (v15)
      {
        if (sub_1001AD150((uint64_t)v15))
        {
          char v13 = 1;
          sub_100C7DF74((uint64_t *)&v15, &v13, &v14);
          sub_1000E8F38((char **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL), &v14);
          unint64_t v7 = (std::__shared_weak_count *)*((void *)&v14 + 1);
          if (*((void *)&v14 + 1))
          {
            int v8 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
            do
              unint64_t v9 = __ldaxr(v8);
            while (__stlxr(v9 - 1, v8));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
      }

      unint64_t v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v6);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }

void sub_100C7BD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_100C7BDAC(double *a1, void **a2, double *a3, double *a4, double a5)
{
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  uint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v27 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateProjections,CoordinateCount is 0",  buf,  2u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      LOWORD(v60[0]) = 0;
      double v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateProjections,CoordinateCount is 0",  v60,  2);
    }

    else
    {
      if ((_DWORD)v6 == 1) {
        return 1LL;
      }
      sub_1001AC068(*a2);
      uint64_t v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == (_DWORD)v6 - 1)
      {
        uint64_t v13 = (uint64_t)*a2;
        sub_1001AC068((void *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(void *)(v13 + 136);
          double v14 = *a3;
          double v15 = a3[1];
          double v16 = *(double **)(v13 + 136);
LABEL_7:
          double v17 = v16[2];
          double v18 = v16[3];
          *(void *)__n128 buf = 0LL;
          uint64_t v59 = 0LL;
          v60[0] = 0.0;
          sub_100D2DA44(a1, (double *)buf, v60, (double *)&v59, v14, v15, 0.0, v17, v18, 0.0);
          double v19 = atan2(v60[0], *(double *)buf);
          if (v19 < 0.0) {
            double v19 = v19 + 6.28318531;
          }
          double v20 = v19 * 57.2957795;
          goto LABEL_54;
        }

        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + 16 * v12);
          double v20 = sub_1004DD7AC( a1,  *(double *)(*(void *)(v13 + 136) + 16 * v12 - 16),  *(double *)(*(void *)(v13 + 136) + 16 * v12 - 8),  *a3,  a3[1]);
LABEL_54:
          *a4 = v20;
          return 1LL;
        }

        uint64_t v31 = (double *)v5[20];
        unint64_t v32 = (double *)v5[21];
        if (v31 != v32)
        {
          uint64_t v33 = 0LL;
          double v34 = 0.0;
          int v35 = 2;
          while (1)
          {
            double v36 = *v31 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v34 + v36) < 0.000001) {
              break;
            }
            if (v34 + v36 > a5)
            {
              double v51 = (a5 - v34) / v36;
              uint64_t v52 = (double *)(*(void *)(v13 + 136) + v33);
              double v53 = v52[1];
              double v54 = v52[3];
              *a3 = *v52 + (v52[2] - *v52) * v51;
              double v55 = v53 + sub_100D2D3E0(v53, v54) * v51;
              a3[1] = v55;
              sub_100292950(v55);
              *((void *)a3 + 1) = v56;
              double v16 = (double *)(*(void *)(v13 + 136) + v33);
              double v14 = *v16;
              double v15 = v16[1];
              goto LABEL_7;
            }

            ++v31;
            v33 += 16LL;
            ++v35;
            double v34 = v34 + v36;
            if (v31 == v32) {
              goto LABEL_45;
            }
          }

          if (v35 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + v33 + 16);
            unint64_t v38 = (double *)(*(void *)(v13 + 136) + v33);
            double v39 = *v38;
            double v40 = v38[1];
            double v41 = *a3;
            double v42 = a3[1];
            *(void *)__n128 buf = 0LL;
            uint64_t v59 = 0LL;
            v60[0] = 0.0;
            sub_100D2DA44(a1, (double *)buf, v60, (double *)&v59, v39, v40, 0.0, v41, v42, 0.0);
            double v43 = atan2(v60[0], *(double *)buf);
            if (v43 < 0.0) {
              double v43 = v43 + 6.28318531;
            }
            double v44 = v43 * 57.2957795;
            double v45 = *a3;
            double v46 = a3[1];
            uint64_t v47 = *(void *)(v13 + 136) + v33;
            double v48 = *(double *)(v47 + 32);
            double v49 = *(double *)(v47 + 40);
            *(void *)__n128 buf = 0LL;
            uint64_t v59 = 0LL;
            v60[0] = 0.0;
            sub_100D2DA44(a1, (double *)buf, v60, (double *)&v59, v45, v46, 0.0, v48, v49, 0.0);
            double v50 = atan2(v60[0], *(double *)buf);
            if (v50 < 0.0) {
              double v50 = v50 + 6.28318531;
            }
            sub_1002928C4(v44, v50 * 57.2957795);
            goto LABEL_54;
          }

          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v57 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount",  buf,  2u);
          }

          BOOL v58 = sub_1002921D0(115, 0);
          BOOL result = 0LL;
          if (v58)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            LOWORD(v60[0]) = 0;
            double v25 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount",  v60,  2);
LABEL_18:
            char v26 = v24;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, doub le &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]",  "%s\n",  v25);
LABEL_36:
            if (v26 != buf) {
              free(v26);
            }
            return 0LL;
          }

          return result;
        }

BOOL sub_100C7C594(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (*(_BYTE *)(a1 + 32))
  {
    double v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      double v5 = a4;
      if (a4 < -1050.0) {
        double v5 = -1050.0;
      }
    }

    return sub_100C7A2B0(a1, a3, (uint64_t *)a2, 45, *(double *)(a2 + 48), v5);
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    unint64_t v7 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v9 = *(void *)(a1 + 8);
      int v12 = 134349056;
      uint64_t v13 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  &v12,  12);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, cons t CLMapGeometry::RoadInfoList &) const",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    return 0LL;
  }

uint64_t sub_100C7C7C0(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4, double a5, double a6)
{
  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v8 = (double *)*a2;
    if (*a2)
    {
      sub_1001AC068(*a2);
      double v13 = v8[5];
      if (v13 <= 0.0)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        uint64_t v33 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = *(void *)(a1 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,road length is 0.0",  buf,  0xCu);
        }

        uint64_t result = sub_1002921D0(115, 0);
        if ((_DWORD)result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v35 = *(void *)(a1 + 8);
          *(_DWORD *)double v70 = 134349056;
          *(void *)&v70[4] = v35;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,road length is 0.0",  v70,  12);
          uint64_t v24 = (char *)v36;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, C LMapGeometry::DistanceQueryResultList &, double, int &) const",  "%s\n",  v36);
          goto LABEL_37;
        }
      }

      else
      {
        double v14 = *a2;
        if ((int)((unint64_t)((*a2)[18] - (*a2)[17]) >> 4) > 1)
        {
          double v37 = 1.0 - a5;
          if (!*((_BYTE *)a2 + 20)) {
            double v37 = a5;
          }
          double v38 = v13 * v37;
          if (v13 * v37 <= fabs(a6))
          {
            uint64_t v49 = *a4;
            unint64_t v50 = v49 + 1;
            *a4 = v49 + 1;
            if ((int)v49 > 9 || a3[2] <= v50)
            {
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_10187A7C8);
              }
              uint64_t v57 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v58 = *(void *)(a1 + 8);
                int v59 = *a4;
                uint64_t v60 = a3[2];
                *(_DWORD *)__n128 buf = 134349568;
                *(void *)&uint8_t buf[4] = v58;
                *(_WORD *)&_BYTE buf[12] = 1026;
                *(_DWORD *)&_BYTE buf[14] = v59;
                *(_WORD *)&_BYTE buf[18] = 2050;
                *(void *)&buf[20] = v60;
                _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu",  buf,  0x1Cu);
              }

              uint64_t result = sub_1002921D0(115, 2);
              if ((_DWORD)result)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_10187A7C8);
                }
                uint64_t v61 = *(void *)(a1 + 8);
                int v62 = *a4;
                uint64_t v63 = a3[2];
                *(_DWORD *)double v70 = 134349568;
                *(void *)&v70[4] = v61;
                __int16 v71 = 1026;
                *(_DWORD *)unint64_t v72 = v62;
                *(_WORD *)&v72[4] = 2050;
                *(void *)&v72[6] = v63;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu",  v70,  28);
                uint64_t v24 = (char *)v64;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResul t &, CLMapGeometry::DistanceQueryResultList &, double, int &) const",  "%s\n",  v64);
                goto LABEL_37;
              }
            }

            else
            {
              double v51 = (uint64_t *)a3[1];
              if ((int)v49 <= -2)
              {
                do
                  double v51 = (uint64_t *)*v51;
                while (!__CFADD__(v50++, 1LL));
              }

              else if ((_DWORD)v49 != -1)
              {
                unint64_t v52 = v49 + 2;
                do
                {
                  double v51 = (uint64_t *)v51[1];
                  --v52;
                }

                while (v52 > 1);
              }

              if (v51 == a3)
              {
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_10187A7C8);
                }
                uint64_t v65 = (os_log_s *)qword_1019348B8;
                if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v66 = *(void *)(a1 + 8);
                  *(_DWORD *)__n128 buf = 134349056;
                  *(void *)&uint8_t buf[4] = v66;
                  _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList",  buf,  0xCu);
                }

                uint64_t result = sub_1002921D0(115, 0);
                if ((_DWORD)result)
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1019348B0 != -1) {
                    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
                  }
                  uint64_t v67 = *(void *)(a1 + 8);
                  *(_DWORD *)double v70 = 134349056;
                  *(void *)&v70[4] = v67;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList",  v70,  12);
                  uint64_t v24 = (char *)v68;
                  sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryRes ult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const",  "%s\n",  v68);
                  goto LABEL_37;
                }
              }

              else
              {
                int v54 = *((unsigned __int8 *)v51 + 36);
                sub_1000F2F30(a2, v51 + 2);
                *((_BYTE *)a2 + 2sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *((_BYTE *)v51 + 36);
                v55.n128_u64[0] = 0LL;
                if (!v54)
                {
                  float v56 = *((float *)a2 + 6) + 180.0;
                  *((float *)a2 + 6) = v56;
                  sub_100292890(v56);
                  v55.n128_f32[0] = v55.n128_f64[0];
                  *((_DWORD *)a2 + 6) = v55.n128_u32[0];
                  v55.n128_u64[0] = 1.0;
                }

                return (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t *, int *, __n128, double))(*(void *)a1 + 56LL))( a1,  a2,  a3,  a4,  v55,  a6 - v38);
              }
            }
          }

          else
          {
            double v39 = a6 / v13;
            if (!*((_BYTE *)a2 + 20)) {
              double v39 = -v39;
            }
            *(void *)__n128 buf = 0LL;
            *(void *)&uint8_t buf[8] = 0LL;
            double v40 = (std::__shared_weak_count *)a2[1];
            double v41 = v39 + a5;
            v69[0] = v14;
            v69[1] = &v40->__vftable;
            *(void *)double v70 = 0xBFF0000000000000LL;
            if (v40)
            {
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              do
                unint64_t v43 = __ldxr(p_shared_owners);
              while (__stxr(v43 + 1, p_shared_owners));
            }

            sub_100C7BDAC((double *)(a1 + 56), v69, (double *)buf, (double *)v70, v39 + a5);
            if (v40)
            {
              double v44 = (unint64_t *)&v40->__shared_owners_;
              do
                unint64_t v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }

            *((double *)a2 + 6) = v41;
            *((_OWORD *)a2 + 2) = *(_OWORD *)buf;
            float v46 = *(double *)v70;
            *((float *)a2 + 6) = v46;
            if (!*((_BYTE *)a2 + 20))
            {
              float v47 = v46 + 180.0;
              *((float *)a2 + 6) = v47;
              sub_100292890(v47);
              *(float *)&double v48 = v48;
              *((_DWORD *)a2 + 6) = LODWORD(v48);
            }

            return 1LL;
          }
        }

        else
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10187A7C8);
          }
          uint64_t v15 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = *(void *)(a1 + 8);
            uint64_t v17 = **a2;
            uint64_t v18 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
            *(_DWORD *)__n128 buf = 134349569;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&_BYTE buf[12] = 2049;
            *(void *)&_BYTE buf[14] = v17;
            *(_WORD *)&buf[22] = 2050;
            *(void *)&uint8_t buf[24] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld",  buf,  0x20u);
          }

          uint64_t result = sub_1002921D0(115, 0);
          if ((_DWORD)result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_10187A7C8);
            }
            uint64_t v20 = *(void *)(a1 + 8);
            uint64_t v21 = **a2;
            uint64_t v22 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
            *(_DWORD *)double v70 = 134349569;
            *(void *)&v70[4] = v20;
            __int16 v71 = 2049;
            *(void *)unint64_t v72 = v21;
            *(_WORD *)&v72[8] = 2050;
            *(void *)&v72[10] = v22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld",  v70,  32);
            uint64_t v24 = (char *)v23;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const",  "%s\n",  v23);
LABEL_37:
            if (v24 != buf) {
              free(v24);
            }
            return 0LL;
          }
        }
      }
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      double v29 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void *)(a1 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,input road is nullptr",  buf,  0xCu);
      }

      uint64_t result = sub_1002921D0(115, 0);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        uint64_t v31 = *(void *)(a1 + 8);
        *(_DWORD *)double v70 = 134349056;
        *(void *)&v70[4] = v31;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,input road is nullptr",  v70,  12);
        uint64_t v24 = (char *)v32;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLM apGeometry::DistanceQueryResultList &, double, int &) const",  "%s\n",  v32);
        goto LABEL_37;
      }
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    double v25 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  buf,  0xCu);
    }

    uint64_t result = sub_1002921D0(115, 0);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v27 = *(void *)(a1 + 8);
      *(_DWORD *)double v70 = 134349056;
      *(void *)&v70[4] = v27;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function",  v70,  12);
      uint64_t v24 = (char *)v28;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMap Geometry::DistanceQueryResultList &, double, int &) const",  "%s\n",  v28);
      goto LABEL_37;
    }
  }

  return result;
}

void sub_100C7D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100C7D2C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100D3E8B8(a1);
  operator delete(v1);
}

void sub_100C7D2DC(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100C7D308(uint64_t a1, uint64_t a2)
{
}

void sub_100C7D318(uint64_t a1)
{
}

void sub_100C7D324(void *a1, void *a2)
{
  if (a2)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    id v4 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134349571;
      id v29 = [a2 code];
      __int16 v30 = 2114;
      id v31 = [a2 domain];
      __int16 v32 = 2113;
      id v33 = [a2 localizedDescription];
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,%{private}@",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v10 = qword_1019348B8;
      int v22 = 134349571;
      id v23 = [a2 code];
      __int16 v24 = 2114;
      id v25 = [a2 domain];
      __int16 v26 = 2113;
      id v27 = [a2 localizedDescription];
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,%{private}@",  &v22,  32);
      int v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    double v5 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void **)(*(void *)(a1[6] + 8LL) + 24LL);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8LL) + 24LL);
      *(_DWORD *)__n128 buf = 134349312;
      id v29 = v6;
      __int16 v30 = 1026;
      LODWORD(v31) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      double v13 = *(void **)(*(void *)(a1[6] + 8LL) + 24LL);
      int v14 = *(unsigned __int8 *)(*(void *)(a1[4] + 8LL) + 24LL);
      int v22 = 134349312;
      id v23 = v13;
      __int16 v24 = 1026;
      LODWORD(v25) = v14;
      LODWORD(v21) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d",  &v22,  v21);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8LL) + 40LL));
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v8 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "CLMM,clearing dispatchGroup when time-out has happened",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,clearing dispatchGroup when time-out has happened",  &v22,  v21);
        uint64_t v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      *(void *)(*(void *)(a1[5] + 8LL) + 4sub_100C74D00(v1, 0LL) = 0LL;
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
      uint64_t v9 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "CLMM,dispatchGroup is unexpectedly nil",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10187A7C8);
        }
        LOWORD(v22) = 0;
        LODWORD(v21) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,dispatchGroup is unexpectedly nil",  &v22,  v21);
        uint64_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }
    }
  }

__n128 sub_100C7D998(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10187A7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C7D9D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187A7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100C7DA00(uint64_t a1, void *a2)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 8) + 2600),  "findRoadsNear:radius:handler:completionHandler:",  **(void **)(a1 + 24),  *a2,  **(double **)(a1 + 16),  *(double *)(*(void *)(a1 + 16) + 8),  10.0);
}

uint64_t sub_100C7DA24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100C7DA60()
{
}

__n128 sub_100C7DA74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10187A878;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C7DAB4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187A878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100C7DADC(uint64_t a1, void *a2)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 8) + 2600),  "findRoadsNear:radius:handler:completionHandler:",  **(void **)(a1 + 32),  *a2,  **(double **)(a1 + 16),  *(double *)(*(void *)(a1 + 16) + 8),  **(double **)(a1 + 24));
}

uint64_t sub_100C7DB00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100C7DB3C()
{
}

__n128 sub_100C7DB50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10187A8F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C7DB90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187A8F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100C7DBB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = **(unsigned __int8 **)(a1 + 8);
  double v5 = *(void **)(*(void *)(a1 + 16) + 2600LL);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 32);
  if (v4) {
    return _[v5 findRoadsFromNextIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
  else {
    return _[v5 findRoadsFromPreviousIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
}

uint64_t sub_100C7DBE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100C7DC20()
{
}

uint64_t *sub_100C7DC2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      sub_1000F2F30(v6 + 2, (uint64_t *)(v4 + 16));
      __int128 v7 = *(_OWORD *)(v4 + 32);
      *((_BYTE *)v6 + 48) = *(_BYTE *)(v4 + 48);
      *((_OWORD *)v6 + 2) = v7;
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = (uint64_t *)v6[1];
    }

    while (v4 != a3 && v6 != a1);
  }

  if (v6 == a1) {
    return sub_100C7DCCC((uint64_t)a1, a1, v4, a3);
  }
  else {
    return sub_100C7DE14((uint64_t)a1, v6, a1);
  }
}

uint64_t *sub_100C7DCCC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x38uLL);
    uint64_t v9 = v8;
    *uint64_t v8 = 0LL;
    v8[1] = 0LL;
    uint64_t v10 = *(void *)(a3 + 24);
    _DWORD v8[2] = *(void *)(a3 + 16);
    void v8[3] = v10;
    if (v10)
    {
      uint64_t v11 = (unint64_t *)(v10 + 8);
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }

    __int128 v13 = *(_OWORD *)(a3 + 32);
    *((_BYTE *)v8 + 48) = *(_BYTE *)(a3 + 48);
    *((_OWORD *)v8 + 2) = v13;
    uint64_t v14 = *(void *)(a3 + 8);
    uint64_t v15 = 1LL;
    if (v14 != a4)
    {
      uint64_t v16 = v8;
      do
      {
        uint64_t v8 = operator new(0x38uLL);
        *uint64_t v8 = v16;
        v8[1] = 0LL;
        uint64_t v17 = *(void *)(v14 + 24);
        _DWORD v8[2] = *(void *)(v14 + 16);
        void v8[3] = v17;
        if (v17)
        {
          uint64_t v18 = (unint64_t *)(v17 + 8);
          do
            unint64_t v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }

        __int128 v20 = *(_OWORD *)(v14 + 32);
        *((_BYTE *)v8 + 48) = *(_BYTE *)(v14 + 48);
        *((_OWORD *)v8 + 2) = v20;
        v16[1] = v8;
        ++v15;
        uint64_t v14 = *(void *)(v14 + 8);
        uint64_t v16 = v8;
      }

      while (v14 != a4);
    }

    uint64_t v21 = *a2;
    *(void *)(v21 + 8) = v9;
    void *v9 = v21;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v15;
    return v9;
  }

  return a2;
}

void sub_100C7DDEC(void *a1)
{
}

void sub_100C7DE00(_Unwind_Exception *a1)
{
}

void *sub_100C7DE14(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8LL);
    **(void **)(v6 + 8) = v7;
    do
    {
      uint64_t v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      sub_10000AE14((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return a3;
}

__n128 sub_100C7DE98(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10187A978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C7DED8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187A978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100C7DF00(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = **(unsigned __int8 **)(a1 + 8);
  double v5 = *(void **)(*(void *)(a1 + 16) + 2600LL);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 32);
  if (v4) {
    return _[v5 findRoadsToNextIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
  else {
    return _[v5 findRoadsToPreviousIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
}

uint64_t sub_100C7DF2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100C7DF68()
{
}

void *sub_100C7DF74@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x30uLL);
  __n128 result = sub_100C7DFD4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100C7DFC0(_Unwind_Exception *a1)
{
}

void *sub_100C7DFD4(void *a1, uint64_t *a2, char *a3)
{
  a1[2] = 0LL;
  *a1 = off_10187A9F8;
  a1[1] = 0LL;
  sub_100C7E07C((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_100C7E024(_Unwind_Exception *a1)
{
}

void sub_100C7E038(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10187A9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C7E04C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10187A9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_100C7E070(uint64_t a1)
{
  return sub_10000AE14(a1 + 24);
}

void sub_100C7E07C(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v4 = *a3;
  char v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    char v8 = *a4;
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_BYTE *)(a2 + 16) = v8;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  else
  {
    char v11 = *a4;
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + 16) = v11;
  }

__n128 sub_100C7E114(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_10187AA48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C7E154(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10187AA48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100C7E17C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = **(unsigned __int8 **)(a1 + 8);
  char v5 = *(void **)(*(void *)(a1 + 16) + 2600LL);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 32);
  if (v4) {
    return _[v5 findRoadsToPreviousIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
  else {
    return _[v5 findRoadsFromNextIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
}

uint64_t sub_100C7E1A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100C7E1E4()
{
}

uint64_t sub_100C7E1F0(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E1FC(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0x3FDAAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_100C7E210(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0x400AAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_100C7E224(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0x400AAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_100C7E238(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E240(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E248(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E250(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E258(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E260(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  return result;
}

uint64_t sub_100C7E268(uint64_t result)
{
  *(void *)(result + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0x3FDAAAAAAAAAAAABLL;
  return result;
}

__n128 sub_100C7E27C(uint64_t a1)
{
  *(void *)a1 = &unk_10187AAB8;
  *(void *)(a1 + 8) = 40LL;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000LL;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 88) = -1;
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return result;
}

BOOL sub_100C7E2D4(uint64_t a1, double *a2)
{
  *(_DWORD *)(a1 + 88) = *(unsigned __int8 *)(a1 + 16);
  *(int8x16_t *)(a1 + 96) = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10199D3C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10199D3C0))
  {
    *(_OWORD *)char v11 = xmmword_1013585B0;
    sub_1002C72A8(qword_10199D3A8, v11, 4uLL);
    __cxa_atexit((void (*)(void *))sub_1002C7328, qword_10199D3A8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10199D3C0);
  }

  __int16 v12 = 0;
  *(_OWORD *)char v11 = xmmword_1012E1E90;
  memset(&v11[2], 0, 135);
  __int128 v13 = xmmword_1012E1E90;
  uint64_t v14 = 0LL;
  int v15 = 0;
  uint64_t v16 = 0LL;
  v17[0] = 0LL;
  *(void *)((char *)v17 + 5) = 0LL;
  *(void *)((char *)&v17[1] + 6) = 0LL;
  __n128 v18 = 0uLL;
  char v19 = 0;
  v17[3] = 0LL;
  __int128 v20 = xmmword_1012E1E90;
  uint64_t v21 = 0LL;
  int v22 = 0;
  unint64_t v23 = 0xFFEFFFFFFFFFFFFFLL;
  int v34 = 0;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  int v29 = 0;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  memset(v33, 0, sizeof(v33));
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  unint64_t v37 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v38 = 0LL;
  int v39 = 0;
  uint64_t v45 = 0LL;
  __int16 v46 = 0;
  int v51 = 0;
  int v44 = 0;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v48 = 0u;
  __int128 v47 = 0u;
  char v49 = 0;
  memset(v50, 0, sizeof(v50));
  unint64_t v52 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  __int128 v69 = 0u;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  __int128 v56 = 0u;
  __int128 v55 = 0u;
  __int128 v54 = 0u;
  __int128 v53 = 0u;
  uint64_t v72 = 0LL;
  unint64_t v73 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  unint64_t v78 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v79 = 0LL;
  int v80 = 0;
  uint64_t v81 = 0LL;
  char v82 = 0;
  unint64_t v83 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v85 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v86 = 0x80000000800000LL;
  uint64_t v88 = 0LL;
  uint64_t v87 = 0LL;
  __int128 v89 = xmmword_1012E1EA0;
  uint64_t v90 = 0x80000000800000LL;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  uint64_t v93 = 0LL;
  unint64_t v94 = 0xFFEFFFFFFFFFFFFFLL;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  int v101 = 0;
  unint64_t v102 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v103 = 0;
  int v104 = 0;
  unint64_t v105 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v106 = 7LL;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  char v108 = 0;
  uint64_t v110 = 0LL;
  uint64_t v109 = 0LL;
  uint64_t v111 = 0LL;
  sub_100CDB578(a2, qword_10199D3A8, (uint64_t)v11);
  sub_100C7E718((void *)a1, (uint64_t)v11);
  if (*((double *)&v20 + 1) != -1.79769313e308)
  {
    __n128 v9 = v18;
    uint64_t v10 = *((void *)&v20 + 1);
    sub_100C7E768((void *)(a1 + 176), &v9);
  }

  unint64_t v5 = *(void *)(a1 + 216);
  if (v5 >= 0x10)
  {
    ++*(void *)(a1 + 208);
    *(void *)(a1 + 216) = v5 - 1;
    sub_100211164(a1 + 176, 1);
  }

  sub_100C7E814(a1, (uint64_t)a2, (uint64_t)v11);
  sub_100C7EF84(a1);
  if (*(double *)(a1 + 120) <= 20.0)
  {
    double v6 = *(double *)(a1 + 152);
    if (v6 != 0.0)
    {
LABEL_11:
      double v7 = *(double *)(a1 + 168) + 2.55999994;
      *(double *)(a1 + 168) = v7;
      goto LABEL_12;
    }
  }

  else
  {
    *(void *)(a1 + 152) = 0LL;
    double v6 = 0.0;
  }

  *(void *)(a1 + 168) = 0LL;
  double v7 = 0.0;
LABEL_12:
  if (*(double *)(a1 + 128) > 60.0 || *(double *)(a1 + 112) > 300.0)
  {
    double v6 = v6 + *(double *)(a1 + 160) * 2.55999994;
    *(double *)(a1 + 152) = v6;
  }

  BOOL result = 0LL;
  if (v6 > 100.0 && v7 > 300.0) {
    return *(double *)(a1 + 136) > 15.0;
  }
  return result;
}

void sub_100C7E6F8(_Unwind_Exception *a1)
{
}

uint64_t sub_100C7E718(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  int v7 = v4;
  sub_100C7F020(a1, &v6);
  sub_100C7F1C0((uint64_t)a1);
  return sub_100C7F22C((uint64_t)a1, a2);
}

__n128 sub_100C7E768(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100C7F62C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  char v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *char v8 = result;
  ++a1[5];
  return result;
}

void sub_100C7E814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a1 + 16);
  double v6 = *(double *)(a3 + 1328);
  if (v6 == -1.79769313e308)
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187AE78);
    }
    char v11 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a2 + 296);
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failure to get cycling result, %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187AE78);
      }
      uint64_t v37 = *(void *)(a2 + 296);
      int v40 = 134217984;
      *(void *)__int128 v41 = v37;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Failure to get cycling result, %f",  COERCE_DOUBLE(&v40));
      int v39 = (char *)v38;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorko utPredictorInputs::Items &)",  "%s\n",  v38);
      if (v39 != buf) {
        free(v39);
      }
    }

    sub_100CCCC8C(a1, 4, (uint64_t)buf);
  }

  else
  {
    int v7 = *(_DWORD *)(a3 + 1336);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187AE78);
    }
    char v8 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v6;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "CLOutdoorCycleWorkoutStopDetector,cyclingSource,%f,%d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187AE78);
      }
      int v40 = 134218240;
      *(double *)__int128 v41 = v6;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "CLOutdoorCycleWorkoutStopDetector,cyclingSource,%f,%d",  COERCE_DOUBLE(&v40),  18);
      __int128 v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorko utPredictorInputs::Items &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }

    switch(v7)
    {
      case 0:
      case 9:
      case 11:
        *(void *)__n128 buf = *(void *)(a2 + 296);
        *(void *)&uint8_t buf[8] = a2 + 328;
        uint64_t v9 = a1;
        int v10 = 0;
        goto LABEL_23;
      case 1:
      case 10:
      case 14:
        uint64_t v9 = a1;
        int v10 = 2;
        goto LABEL_23;
      case 2:
        uint64_t v9 = a1;
        int v10 = 3;
        goto LABEL_23;
      case 3:
      case 13:
        uint64_t v9 = a1;
        int v10 = 8;
        goto LABEL_23;
      case 4:
      case 6:
      case 12:
        uint64_t v9 = a1;
        int v10 = 1;
        goto LABEL_23;
      case 5:
        uint64_t v9 = a1;
        int v10 = 7;
        goto LABEL_23;
      case 7:
        uint64_t v9 = a1;
        int v10 = 4;
LABEL_23:
        sub_100CCCC8C(v9, v10, (uint64_t)buf);
        break;
      default:
        break;
    }

    if (*(double *)(a1 + 80) > 50.0
      && *(double *)(a1 + 56) > 70.0
      && (*(double *)(a3 + 288) == -1.79769313e308 || *(double *)(a3 + 328) <= -1.0))
    {
      sub_100CCCC8C(a1, 5, (uint64_t)buf);
    }

    int v13 = *(unsigned __int8 *)(a1 + 16);
    BOOL v14 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    BOOL v15 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187AE78);
    }
    uint64_t v16 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a3 + 232);
      uint64_t v18 = *(void *)(a3 + 240);
      uint64_t v19 = *(void *)(a1 + 152);
      uint64_t v20 = *(void *)(a1 + 160);
      BOOL v21 = *(double *)(a3 + 8) != -1.79769313e308;
      int v22 = *(_DWORD *)(a3 + 24);
      uint64_t v23 = *(void *)(a1 + 56);
      uint64_t v24 = *(void *)(a1 + 80);
      *(_DWORD *)__n128 buf = 67111936;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      *(_WORD *)&_BYTE buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v15;
      __int16 v50 = 2048;
      uint64_t v51 = v17;
      __int16 v52 = 2048;
      uint64_t v53 = v18;
      __int16 v54 = 2048;
      uint64_t v55 = v19;
      __int16 v56 = 2048;
      uint64_t v57 = v20;
      __int16 v58 = 1024;
      BOOL v59 = v21;
      __int16 v60 = 1024;
      int v61 = v22;
      __int16 v62 = 2048;
      uint64_t v63 = v23;
      __int16 v64 = 2048;
      uint64_t v65 = v24;
      __int16 v66 = 1024;
      int v67 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "OutdoorCycleStop,state,%d,hasGPS,%d,hasHR,%d,hr,%f,hrConf,%f,stopCounter,%f,fStopCounterUpdateRate,%f,hasTier1,% d,tier1Type,%d,percentNonCycleinBuffer,%f,percentModelTier1Concordant,%f,cyclieState,%d",  buf,  0x62u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187AE78);
      }
      uint64_t v27 = *(void *)(a3 + 232);
      double v28 = *(double *)(a3 + 240);
      uint64_t v29 = *(void *)(a1 + 152);
      uint64_t v30 = *(void *)(a1 + 160);
      BOOL v31 = *(double *)(a3 + 8) != -1.79769313e308;
      int v32 = *(_DWORD *)(a3 + 24);
      uint64_t v33 = *(void *)(a1 + 56);
      uint64_t v34 = *(void *)(a1 + 80);
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&unsigned int v41[6] = v14;
      *(_WORD *)&v41[10] = 1024;
      *(_DWORD *)&v41[12] = v15;
      *(_WORD *)&v41[16] = 2048;
      *(void *)&v41[18] = v27;
      *(_WORD *)&v41[26] = 2048;
      *(_WORD *)__int128 v42 = 2048;
      *(void *)&v42[2] = v29;
      *(_WORD *)&v42[10] = 2048;
      LODWORD(v43) = HIDWORD(v30);
      WORD2(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 6) = v31;
      WORD5(v43) = 1024;
      HIDWORD(v43) = v32;
      *(_WORD *)int v44 = 2048;
      *(void *)&v44[2] = v33;
      __int16 v45 = 2048;
      uint64_t v46 = v34;
      __int16 v47 = 1024;
      int v48 = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "OutdoorCycleStop,state,%d,hasGPS,%d,hasHR,%d,hr,%f,hrConf,%f,stopCounter,%f,fStopCounterUpdateRate,%f,hasTier1,% d,tier1Type,%d,percentNonCycleinBuffer,%f,percentModelTier1Concordant,%f,cyclieState,%d",  &v40,  98,  67111936,  *(double *)&v41[4],  *(double *)&v41[12],  *(double *)&v41[20],  v28,  *(_DWORD *)v42,  *(_DWORD *)&v42[8],  *(double *)&v43,  *((double *)&v43 + 1),  *(_DWORD *)v44);
      uint64_t v36 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorko utPredictorInputs::Items &)",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }
  }

uint64_t sub_100C7EF84(uint64_t result)
{
  *(double *)(result + 112) = *(double *)(result + 112) + 2.55999994;
  int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 == 6)
  {
    double v2 = 0.0;
    if (*(_DWORD *)(result + 88) == 6) {
      double v2 = *(double *)(result + 120) + 2.55999994;
    }
    *(double *)(result + 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v2;
    double v3 = *(double *)(result + 128) + 2.55999994;
  }

  else
  {
    *(void *)(result + 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
    double v3 = *(double *)(result + 128);
  }

  *(double *)(result + 128) = v3;
  double v4 = 0.0;
  double v5 = 0.0;
  if (*(double *)(result + 160) > 0.0)
  {
    double v5 = 0.0;
  }

  *(double *)(result + 136) = v5;
  if (v1 == 4) {
    double v4 = *(double *)(result + 144) + 2.55999994;
  }
  *(double *)(result + 144) = v4;
  return result;
}

void sub_100C7F020(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v7 = a1[5];
  uint64_t v5 = (uint64_t)(a1 + 5);
  unint64_t v6 = v7;
  char v8 = *(_OWORD **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = (void **)(v5 - 16);
    uint64_t v11 = *(void *)(v5 - 16);
    uint64_t v12 = ((uint64_t)v8 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v6 - v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)sub_100037038(v5, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = &v16[16 * v12];
    uint64_t v18 = &v16[16 * v15];
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    uint64_t v9 = (unint64_t *)(v17 + 16);
    uint64_t v20 = (char *)a1[3];
    uint64_t v19 = (char *)a1[4];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }

      while (v19 != v20);
      uint64_t v19 = (char *)*v10;
    }

    a1[3] = v17;
    a1[4] = v9;
    a1[5] = v18;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    *char v8 = *(_OWORD *)a2;
    uint64_t v9 = (unint64_t *)(v8 + 1);
  }

  a1[4] = v9;
  BOOL v21 = (unint64_t *)a1[3];
  if (v21 != v9)
  {
    double v22 = (double)(unint64_t)(v4 - 60000000);
    while (v22 <= (double)*v21)
    {
      v21 += 2;
      if (v21 == v9) {
        return;
      }
    }

    if (v21 != v9)
    {
      uint64_t v23 = v21 + 2;
      if (v21 + 2 != v9)
      {
        do
        {
          if (v22 <= (double)*v23)
          {
            *(_OWORD *)BOOL v21 = *(_OWORD *)v23;
            v21 += 2;
          }

          v23 += 2;
        }

        while (v23 != v9);
        uint64_t v9 = (unint64_t *)a1[4];
      }
    }

    if (v21 != v9) {
      a1[4] = v21;
    }
  }

uint64_t sub_100C7F1C0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v1 = *(void *)(result + 32);
  double v3 = -1.0;
  if (v1 != v2 && *(void *)(v1 - 16) - *(void *)v2 >= 0x337F980uLL)
  {
    int v4 = 0;
    uint64_t v5 = (v1 - v2) >> 4;
    do
    {
      if ((*(_DWORD *)(v2 + 8) & 0xFFFFFF7F) != 0) {
        ++v4;
      }
      v2 += 16LL;
    }

    while (v2 != v1);
    double v3 = (double)v4 * 100.0 / (double)(unint64_t)v5;
  }

  *(double *)(result + 56) = v3;
  return result;
}

uint64_t sub_100C7F22C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 48) == 6)
  {
    ++*(_DWORD *)(result + 64);
    if (*(_DWORD *)(a2 + 24) != 128)
    {
LABEL_4:
      ++*(_DWORD *)(result + 72);
      goto LABEL_6;
    }

double sub_100C7F2BC(void *a1, uint64_t a2, double a3)
{
  uint64_t v3 = a1[23];
  double v4 = 0.0;
  if (a1[24] != v3)
  {
    unint64_t v5 = a1[26];
    unint64_t v6 = v5 + a1[27];
    unint64_t v7 = (uint64_t *)(v3 + 8 * (v6 / 0xAA));
    uint64_t v8 = *v7;
    unint64_t v9 = *v7 + 24 * (v6 % 0xAA);
    unint64_t v10 = *(void *)(v3 + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA);
    if (v9 != v10)
    {
      double v4 = 0.0;
      do
      {
        uint64_t v11 = v9;
        if (v9 == v8) {
          uint64_t v11 = *(v7 - 1) + 4080;
        }
        double v12 = *(double *)(v11 - 8);
        if (v9 == v8)
        {
          uint64_t v13 = *--v7;
          uint64_t v8 = v13;
          unint64_t v9 = v13 + 4080;
        }

        v9 -= 24LL;
      }

      while (v9 != v10);
    }
  }

  return 1.0 - (*(float *)(a2 + 28) - v4) / (*(float *)(a2 + 28) - *(float *)(a2 + 24));
}

BOOL sub_100C7F3B8(void *a1, uint64_t a2)
{
  double v3 = sub_100C7F2BC(a1, *(void *)(a2 + 8), *(double *)a2);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187AE78);
  }
  double v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    double v6 = *(float *)(v5 + 24);
    double v7 = *(float *)(v5 + 28);
    *(_DWORD *)__n128 buf = 134218752;
    double v24 = v3;
    __int16 v25 = 2048;
    double v26 = v6;
    __int16 v27 = 2048;
    double v28 = v7;
    __int16 v29 = 1024;
    BOOL v30 = v3 <= 0.649999976;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "OutdoorCycleStop,HRExertionCheck,hrExertion,%f,minHr,%f,maxHr,%f,shouldTransition,%d",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187AE78);
    }
    uint64_t v9 = *(void *)(a2 + 8);
    double v10 = *(float *)(v9 + 24);
    double v11 = *(float *)(v9 + 28);
    int v15 = 134218752;
    double v16 = v3;
    __int16 v17 = 2048;
    double v18 = v10;
    __int16 v19 = 2048;
    double v20 = v11;
    __int16 v21 = 1024;
    BOOL v22 = v3 <= 0.649999976;
    LODWORD(v14) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "OutdoorCycleStop,HRExertionCheck,hrExertion,%f,minHr,%f,maxHr,%f,shouldTransition,%d",  COERCE_DOUBLE(&v15),  v14);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLOutdoorCycleWorkoutStopDetector::isLowHRExertion(const ENoStepsNoSpeed *) const",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  return v3 <= 0.649999976;
}

void sub_100C7F600(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100C7F62C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    double v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100C7F8F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C7F940(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5)
{
  *(_OWORD *)a1 = xmmword_1013585D0;
  *(void *)(a1 + 16) = 0LL;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_10083A424(a1 + 72);
  *(_DWORD *)(a1 + 888) = a5;
  sub_1007BB0BC(a1 + 896, ((a5 - 82) & 0xFFFFFFF9) == 0);
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v34 = *a2;
  uint64_t v35 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }

  sub_100D58318(a1 + 1144, &v34);
  uint64_t v13 = v35;
  if (v35)
  {
    BOOL v14 = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  *(void *)(a1 + 1264) = 0LL;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1272) = xmmword_101358608;
  *(_OWORD *)(a1 + 1288) = unk_101358618;
  *(_OWORD *)(a1 + 1304) = xmmword_101358628;
  *(_OWORD *)(a1 + 1316) = *(__int128 *)((char *)&xmmword_101358628 + 12);
  *(_DWORD *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 134sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = -1082130432;
  *(_BYTE *)(a1 + 1344) = 0;
  __asm { FMOV            V1.4S, #-1.0 }

  *(_OWORD *)(a1 + 1348) = _Q1;
  *(_OWORD *)(a1 + 1364) = _Q1;
  *(_OWORD *)(a1 + 138sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = _Q1;
  *(_OWORD *)(a1 + 1396) = _Q1;
  *(_OWORD *)(a1 + 1412) = _Q1;
  *(_OWORD *)(a1 + 1428) = _Q1;
  *(_OWORD *)(a1 + 1444) = _Q1;
  *(_DWORD *)(a1 + 146sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = -1082130432;
  *(void *)(a1 + 1464) = -1LL;
  *(void *)(a1 + 1472) = -1LL;
  *(_OWORD *)(a1 + 148sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = _Q1;
  *(_OWORD *)(a1 + 1496) = _Q1;
  __asm { FMOV            V1.2S, #-1.0 }

  *(void *)(a1 + 1512) = _Q1;
  *(void *)(a1 + 152sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 66LL;
  *(_DWORD *)(a1 + 1528) = 0;
  *(void *)(a1 + 1536) = 0LL;
  *(void *)(a1 + 1541) = 0LL;
  *(void *)(a1 + 1568) = 0LL;
  *(void *)(a1 + 1552) = 0LL;
  *(void *)(a1 + 156sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(_DWORD *)(a1 + 1576) = -1082130432;
  *(_BYTE *)(a1 + 158sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
  *(void *)(a1 + 1584) = _Q1;
  *(_DWORD *)(a1 + 1592) = a3;
  *(_DWORD *)(a1 + 1596) = 0;
  *(void *)(a1 + 160sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  sub_100E5C404(a1 + 1640);
  *(void *)(a1 + 1688) = 1LL;
  uuid_clear((unsigned __int8 *)(a1 + 40));
  uuid_clear((unsigned __int8 *)(a1 + 56));
  sub_1000F2F30((void *)(a1 + 1232), a4);
  uint64_t v21 = sub_1006E27E8();
  sub_100413284(v21, buf);
  unint64_t v22 = (int *)(a1 + 1688);
  int v23 = sub_1002A7CB0(*(uint64_t *)buf, "VO2MaxMinPreviousEstimatesForHealthKitWrite", (_DWORD *)(a1 + 1688));
  int v24 = v23;
  unint64_t v25 = v38;
  if (!v38) {
    goto LABEL_13;
  }
  uint64_t v26 = (unint64_t *)&v38->__shared_owners_;
  do
    unint64_t v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!v24) {
      return a1;
    }
  }

  else
  {
LABEL_13:
    if (!v23) {
      return a1;
    }
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  uint64_t v28 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v29 = *v22;
    *(_DWORD *)__n128 buf = 67174657;
    *(_DWORD *)&uint8_t buf[4] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "VO2Max,fMinPreviousEstimatesForHealthKitWrite,%{private}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    int v31 = *v22;
    v36[0] = 67174657;
    v36[1] = v31;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,fMinPreviousEstimatesForHealthKitWrite,%{private}d",  v36,  8,  v34);
    unint64_t v33 = (uint8_t *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLVO2MaxEstimator::CLVO2MaxEstimator(std::shared_ptr<CLVO2MaxInputCache>, CacheInputs, std::shared_ptr<CLMaxMetsRe corderDb>, uint32_t)",  "%s\n",  v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  return a1;
}

void sub_100C7FD24(_Unwind_Exception *a1)
{
  double v7 = (void *)v1[156];
  if (v7)
  {
    v1[157] = v7;
    operator delete(v7);
  }

  sub_10000AE14(v5);
  sub_10028EB1C(v1 + 148);
  sub_10000AE14(v4);
  sub_100C7FD9C(v3);
  sub_101024EBC(v1 + 17);
  sub_1000EAA04(v2);
  _Unwind_Resume(a1);
}

void *sub_100C7FD9C(void *a1)
{
  unint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }

  BOOL v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100C7FDE0(uint64_t a1)
{
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10187AEB8);
  }
  unint64_t v2 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning aggregation for VO2Max data", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187AEB8);
    }
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Beginning aggregation for VO2Max data",  &v15,  2);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVO2MaxEstimator::aggregateHistory()", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  sub_100D58B7C((void *)(a1 + 1144));
  double v4 = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = (uint64_t *)sub_100D74AD8();
  sub_100D74C50(v5);
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10187AEB8);
  }
  double v6 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)__n128 buf = 134349312;
    double v20 = v4 - Current;
    __int16 v21 = 2050;
    double v22 = v7 - v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Aggregation of VO2Max data complete; input duration: %{public}f, output duration: %{public}f",
      buf,
      0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187AEB8);
    }
    uint64_t v10 = qword_1019346E8;
    CFAbsoluteTime v11 = CFAbsoluteTimeGetCurrent();
    int v15 = 134349312;
    double v16 = v4 - Current;
    __int16 v17 = 2050;
    double v18 = v11 - v4;
    LODWORD(v14) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "Aggregation of VO2Max data complete; input duration: %{public}f, output duration: %{public}f",
      &v15,
      v14);
    uint64_t v13 = (uint8_t *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVO2MaxEstimator::aggregateHistory()", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

uint64_t sub_100C80114@<X0>( uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  if (*(void *)(result + 16) == 1LL)
  {
    *(_BYTE *)a5 = 0;
    *(void *)(a5 + 8) = 0LL;
    *(void *)(a5 + 16) = 0LL;
    return result;
  }

  uint64_t v19 = result;
  sub_10083AAA4((int64x2_t *)(v19 + 72), a2, a3, a4, (uint64_t)v72, a6, a7, a8, a9, a10);
  unint64_t v20 = *(void *)v19;
  if (*(void *)(v19 + 16) == 1LL || v20 > 0x18) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = (0x1028006u >> v20) & 1;
  }
  if (v73 == -1.79769313e308)
  {
LABEL_56:
    BOOL v23 = 0;
    goto LABEL_57;
  }

  BOOL v23 = 0;
  if (v20)
  {
    if (v20 != 26)
    {
      BOOL v23 = 0;
      double v24 = *(double *)(v19 + 24);
      if (v24 != -1.79769313e308 && v24 < v73)
      {
        if (v73 >= v24 + 3600.0)
        {
          if (*(_DWORD *)(v19 + 1596) == 2) {
            char v25 = v22;
          }
          else {
            char v25 = 0;
          }
          if ((v25 & 1) != 0) {
            goto LABEL_25;
          }
        }

        else if ((v22 & 1) != 0)
        {
          goto LABEL_25;
        }

        if (*(_DWORD *)(v19 + 1592) == 1)
        {
LABEL_25:
          double Current = CFAbsoluteTimeGetCurrent();
          sub_100D5831C((id *)(v19 + 1144), (uint64_t)v72, (char **)&__p);
          if (qword_1019346E0 != -1) {
            dispatch_once(&qword_1019346E0, &stru_10187AEB8);
          }
          unint64_t v27 = (os_log_s *)qword_1019346E8;
          if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTime v28 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)__n128 buf = 134349056;
            *(double *)&uint8_t buf[4] = v28 - Current;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "Completed insert of input record; duration: %{public}f",
              buf,
              0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346E0 != -1) {
              dispatch_once(&qword_1019346E0, &stru_10187AEB8);
            }
            uint64_t v59 = qword_1019346E8;
            CFAbsoluteTime v60 = CFAbsoluteTimeGetCurrent();
            int v65 = 134349056;
            double v66 = v60 - Current;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v59,  2LL,  "Completed insert of input record; duration: %{public}f",
              &v65,
              12);
            __int16 v62 = (uint8_t *)v61;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::pair<BOOL, VO2MaxSessionStats> CLVO2MaxEstimator::feedCalorieUpdate(CFAbsoluteTime, double, GradeType , double, BOOL, double, double, BOOL)",  "%s\n",  v61);
            if (v62 != buf) {
              free(v62);
            }
          }

          int v29 = (char *)__p;
          if (v22)
          {
            __int128 v30 = v64;
            BOOL v23 = __p != v64;
            if (__p != v64)
            {
              int v31 = (char **)(v19 + 1248);
              do
              {
                sub_1007BB61C(v19 + 896, (uint64_t)v29, (uint64_t)buf);
                if (*(_DWORD *)(v19 + 1596) == 2 && (_DWORD)v71 != 0) {
                  LODWORD(v71) = 0;
                }
                unint64_t v33 = *(void *)(v19 + 1256);
                unint64_t v34 = *(void *)(v19 + 1264);
                if (v33 >= v34)
                {
                  unint64_t v39 = 0x8E38E38E38E38E39LL * ((uint64_t)(v33 - (void)*v31) >> 3);
                  unint64_t v40 = v39 + 1;
                  if (v39 + 1 > 0x38E38E38E38E38ELL) {
                    sub_100007008();
                  }
                  unint64_t v41 = 0x8E38E38E38E38E39LL * ((uint64_t)(v34 - (void)*v31) >> 3);
                  if (2 * v41 > v40) {
                    unint64_t v40 = 2 * v41;
                  }
                  if (v41 >= 0x1C71C71C71C71C7LL) {
                    unint64_t v42 = 0x38E38E38E38E38ELL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42) {
                    __int128 v43 = (char *)sub_100046304(v19 + 1264, v42);
                  }
                  else {
                    __int128 v43 = 0LL;
                  }
                  int v44 = &v43[72 * v39];
                  *(_OWORD *)int v44 = *(_OWORD *)buf;
                  __int128 v45 = v68;
                  __int128 v46 = v69;
                  __int128 v47 = v70;
                  *((void *)v44 + 8) = v71;
                  *((_OWORD *)v44 + 2) = v46;
                  *((_OWORD *)v44 + 3) = v47;
                  *((_OWORD *)v44 + 1) = v45;
                  int v48 = *(char **)(v19 + 1256);
                  uint64_t v49 = *(char **)(v19 + 1248);
                  uint64_t v50 = v44;
                  if (v48 != v49)
                  {
                    do
                    {
                      *(_OWORD *)(v50 - 72) = *(_OWORD *)(v48 - 72);
                      __int128 v51 = *(_OWORD *)(v48 - 56);
                      __int128 v52 = *(_OWORD *)(v48 - 40);
                      __int128 v53 = *(_OWORD *)(v48 - 24);
                      *((_DWORD *)v50 - 2) = *((_DWORD *)v48 - 2);
                      *(_OWORD *)(v50 - 24) = v53;
                      *(_OWORD *)(v50 - 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v52;
                      *(_OWORD *)(v50 - 56) = v51;
                      v50 -= 72;
                      v48 -= 72;
                    }

                    while (v48 != v49);
                    int v48 = *v31;
                  }

                  *(void *)(v19 + 1248) = v50;
                  uint64_t v38 = v44 + 72;
                  *(void *)(v19 + 1256) = v44 + 72;
                  *(void *)(v19 + 1264) = &v43[72 * v42];
                  if (v48) {
                    operator delete(v48);
                  }
                }

                else
                {
                  *(_OWORD *)unint64_t v33 = *(_OWORD *)buf;
                  __int128 v35 = v68;
                  __int128 v36 = v69;
                  __int128 v37 = v70;
                  *(void *)(v33 + 64) = v71;
                  *(_OWORD *)(v33 + 32) = v36;
                  *(_OWORD *)(v33 + 48) = v37;
                  *(_OWORD *)(v33 + 16) = v35;
                  uint64_t v38 = (char *)(v33 + 72);
                }

                *(void *)(v19 + 1256) = v38;
                v29 += 112;
              }

              while (v29 != v30);
              BOOL v23 = 1;
              int v29 = (char *)__p;
            }
          }

          else
          {
            BOOL v23 = 0;
          }

          if (v29)
          {
            __int16 v64 = v29;
            operator delete(v29);
          }

          goto LABEL_57;
        }

        goto LABEL_56;
      }
    }
  }

void sub_100C80698( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_100C806D0(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  __int128 v5 = *(_OWORD *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1316) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 1288) = v6;
  *(_OWORD *)(a1 + 1304) = v7;
  *(_OWORD *)(a1 + 1272) = v5;
  sub_1007BBF5C(a1 + 896, a2);
  *(_DWORD *)(a1 + 1372) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 1376) = result;
  return result;
}

void sub_100C80758(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 16) != 1LL)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_10083A428((int64x2_t *)(a1 + 72), a2);
  }

void sub_100C807C8(uint64_t a1, float a2, float a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  *(float *)(a1 + 1332) = a2;
  sub_100AD6EE0(a1 + 896, a2);
  *(float *)(a1 + 138sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = a2;
  *(float *)(a1 + 1384) = a3;
}

float sub_100C8083C(uint64_t a1, double a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_1007BBF70((float *)(a1 + 896), a2);
}

float32x2_t sub_100C8089C(uint64_t a1, float64x2_t *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  float v5 = a2[1].f64[0];
  *(float *)(a1 + 136sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v5;
  float32x2_t result = vcvt_f32_f64(*a2);
  *(float32x2_t *)(a1 + 1364) = result;
  return result;
}

double sub_100C80908@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  __int128 v6 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 112);
    uint64_t v9 = *(void *)(a2 + 224);
    *(_DWORD *)__n128 buf = 134218496;
    uint64_t v26 = v7;
    __int16 v27 = 2048;
    uint64_t v28 = v8;
    __int16 v29 = 2048;
    uint64_t v30 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "VO2Max,workoutEvent,%ld,workoutType,%ld,workoutMode,%ld",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v15 = *(void *)(a2 + 112);
    uint64_t v16 = *(void *)(a2 + 224);
    int v19 = 134218496;
    uint64_t v20 = v14;
    __int16 v21 = 2048;
    uint64_t v22 = v15;
    __int16 v23 = 2048;
    uint64_t v24 = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "VO2Max,workoutEvent,%ld,workoutType,%ld,workoutMode,%ld",  &v19,  32);
    double v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "VO2MaxResult CLVO2MaxEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  *(void *)(a1 + 8) = *(void *)(a2 + 16);
  uuid_copy((unsigned __int8 *)(a1 + 56), (const unsigned __int8 *)(a2 + 64));
  __int128 v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1608) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1624) = v10;
  *(void *)a3 = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0xBFF0000000000000LL;
  *(_BYTE *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 68) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 48) = 0LL;
  *(void *)(a3 + 56) = 0LL;
  int v11 = sub_100BEF640(a2);
  if (v11 == 2)
  {
    if (*(_DWORD *)(a1 + 1596) == 1) {
      return sub_100C80D98(a1, a2, a3);
    }
  }

  else if (v11 == 1)
  {
    if (*(_DWORD *)(a1 + 1596) == 2)
    {
      sub_100C80BB8(a1);
      float v13 = *(float *)(a1 + 1332);
      if (v13 > 0.0) {
        sub_100AD6EE0(a1 + 896, v13);
      }
    }

    sub_10083B4D0(a1 + 72, a2);
    sub_100C80CC8(a1, a2);
  }

  return result;
}

double sub_100C80BB8(uint64_t a1)
{
  unint64_t v2 = (_OWORD *)(a1 + 1348);
  sub_100C843A8(a1);
  *(void *)a1 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_1007BBDEC(a1 + 896);
  sub_10083A394(a1 + 72);
  sub_100D582F0(a1 + 1144);
  *(void *)(a1 + 1256) = *(void *)(a1 + 1248);
  int v3 = *(_DWORD *)(a1 + 1296);
  int v4 = *(_DWORD *)(a1 + 1304);
  *(void *)(a1 + 1336) = 0xBF80000000000000LL;
  *(_BYTE *)(a1 + 1344) = 0;
  __asm { FMOV            V2.4S, #-1.0 }

  *unint64_t v2 = _Q2;
  *(void *)(a1 + 1364) = 0xBF800000BF800000LL;
  *(_DWORD *)(a1 + 1372) = v3;
  *(_DWORD *)(a1 + 1376) = v4;
  v2[2] = _Q2;
  v2[3] = _Q2;
  v2[4] = _Q2;
  v2[5] = _Q2;
  void v2[6] = _Q2;
  *(_DWORD *)(a1 + 146sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = -1082130432;
  *(void *)(a1 + 1464) = -1LL;
  *(void *)(a1 + 1472) = -1LL;
  *(_OWORD *)((char *)v2 + 132) = _Q2;
  *(_OWORD *)((char *)v2 + 148) = _Q2;
  __asm { FMOV            V0.2S, #-1.0 }

  *(double *)(a1 + 1512) = result;
  *(void *)(a1 + 152sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 66LL;
  *(void *)(a1 + 1541) = 0LL;
  *(void *)(a1 + 1528) = 0LL;
  *(void *)(a1 + 1536) = 0LL;
  *(void *)(a1 + 1568) = 0LL;
  *(void *)(a1 + 1552) = 0LL;
  *(void *)(a1 + 156sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  *(_DWORD *)(a1 + 1576) = -1082130432;
  *(_BYTE *)(a1 + 158sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
  *(double *)(a1 + 1584) = result;
  *(_DWORD *)(a1 + 1596) = 0;
  return result;
}

void sub_100C80CC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = sub_100BEF6EC(*(void *)(a2 + 112), *(void *)(a2 + 120));
  *(void *)(a1 + 16) = *(void *)(a2 + 224);
  double v4 = *(double *)a2;
  sub_100D58978((unsigned __int8 *)(a1 + 56), (uint64_t *)(a1 + 1144), &__p);
  *(double *)(a1 + 24) = v4;
  *(double *)(a1 + 936) = v4;
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 32);
  char v5 = sub_100C832B4(a1);
  sub_100E5C448(a1 + 1640, a2, v5);
  *(_DWORD *)(a1 + 1596) = 1;
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }

void sub_100C80D7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100C80D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(double *)(a1 + 160sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = vabdd_f64(*(double *)(a1 + 928), *(double *)(a1 + 920));
  int v6 = sub_100C80E24(a1, a3, *(double *)(a2 + 24));
  sub_100E5C6F8((uint64_t *)(a1 + 1640), a2, a3);
  sub_100C8333C(a1, v6, *(double *)(a3 + 16), *(double *)(a2 + 24));
  *(void *)(a3 + 56) = *(void *)(a1 + 1600);
  *(_DWORD *)(a3 + 64) = v6;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 1596) = 2;
  return result;
}

uint64_t sub_100C80E24(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v42 = 0LL;
  __int128 v43 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v6 = sub_100D74AD8();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_100D75604(v6, (char **)&v42, Current + -18144000.0);
  double v8 = sub_100C81498(a1);
  if (*(float *)(a1 + 1692) > 0.0)
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187AEB8);
    }
    uint64_t v9 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(float *)(a1 + 1692);
      *(_DWORD *)__n128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v8;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&_BYTE buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Overwriting meanMaxMets,calculated,%f,overwrite,%f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10187AEB8);
      }
      double v28 = *(float *)(a1 + 1692);
      LODWORD(v52[0]) = 134218240;
      *(double *)((char *)v52 + 4) = v8;
      WORD6(v52[0]) = 2048;
      *(double *)((char *)v52 + 14) = v28;
      LODWORD(v36) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Overwriting meanMaxMets,calculated,%f,overwrite,%f",  COERCE_DOUBLE(v52),  v36);
      uint64_t v30 = (char *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "VO2MaxEstimationStatus CLVO2MaxEstimator::estimateVO2Max(CFAbsoluteTime, VO2MaxResult &)",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    double v8 = *(float *)(a1 + 1692);
  }

  std::stringbuf::string_type __p = 0LL;
  unint64_t v40 = 0LL;
  uint64_t v41 = 0LL;
  uint64_t v38 = 0LL;
  memset(v52, 0, sizeof(v52));
  unsigned int v37 = sub_100C8184C(a1, a2, &__p, &v38, (uint64_t)v52, (__int128 **)&v42, a3, v8);
  if (v40 != __p)
  {
    uint64_t v11 = sub_100D74AD8();
    sub_100D755D4(v11, (const unsigned __int8 *)(a1 + 56));
    unint64_t v12 = (unsigned __int8 *)__p;
    float v13 = v40;
    while (v12 != v13)
    {
      uuid_copy(v12 + 24, (const unsigned __int8 *)(a1 + 56));
      *((void *)v12 + 2) = *(void *)a1;
      *((_DWORD *)v12 + 45) = *(_DWORD *)(a1 + 1608);
      uint64_t v14 = sub_100D74AD8();
      sub_100D755C8(v14, (uint64_t)v12);
      v12 += 184;
    }
  }

  if (*(void *)(a1 + 16) != 1LL)
  {
    unint64_t v15 = *(void *)a1;
    if (*(_DWORD *)(a1 + 1608) == 3)
    {
      if (v15 != 15) {
        goto LABEL_20;
      }
    }

    else if (v15 > 0x18 || ((1LL << v15) & 0x1028000) == 0)
    {
      goto LABEL_20;
    }

    if (!sub_100E5C7EC(a1 + 1640))
    {
      *(void *)__n128 buf = 0LL;
      *(double *)&uint8_t buf[8] = a3;
      *(void *)&uint8_t buf[16] = 0LL;
      *(void *)&uint8_t buf[24] = 0LL;
      *(double *)&_BYTE buf[32] = v8;
      uint64_t v54 = v38;
      int v55 = *(_DWORD *)(a1 + 888);
      char v56 = *(_BYTE *)(a1 + 1320);
      int v57 = 3;
      uint64_t v58 = 0LL;
      uint64_t v59 = 0LL;
      uuid_copy(&buf[16], (const unsigned __int8 *)(a1 + 56));
      uint64_t v16 = sub_100D74AD8();
      sub_100D7544C(v16, (uint64_t)buf);
    }
  }

void sub_100C81448( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_100C81498(uint64_t a1)
{
  std::stringbuf::string_type __p = 0LL;
  __int16 v27 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v2 = *(void *)(a1 + 1232);
  if (!v2)
  {
    double v4 = 0LL;
    uint64_t v11 = 0LL;
    int v3 = 0LL;
    double v9 = 0.0;
    BOOL v5 = 1;
LABEL_10:
    double v7 = 0.0;
    double v6 = 0.0;
    goto LABEL_11;
  }

  sub_100FB4E88(v2, (char **)&__p, *(double *)(a1 + 24) + -2419200.0, *(double *)(a1 + 24));
  int v3 = (char *)__p;
  double v4 = v27;
  BOOL v5 = __p == v27;
  if (__p == v27)
  {
    double v9 = 0.0;
    BOOL v5 = 1;
    uint64_t v11 = __p;
    goto LABEL_10;
  }

  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = (double *)__p;
  double v9 = 0.0;
  do
  {
    double v10 = v8[3];
    double v6 = v6 + v10;
    double v7 = v7 + 1.0;
    if (v10 > v9) {
      double v9 = v8[3];
    }
    v8 += 4;
  }

  while (v8 != (double *)v27);
  uint64_t v11 = __p;
LABEL_11:
  if ((unint64_t)(v4 - v11) >= 0x380)
  {
    double v16 = v9;
  }

  else
  {
    memset(buf, 0, 24);
    double v12 = *(double *)(a1 + 24);
    float v13 = (double *)(v3 + 8);
    if (v5) {
      float v13 = (double *)(a1 + 24);
    }
    double v14 = *v13;
    uint64_t v15 = sub_100D74AD8();
    sub_100D755C0(v15, (char **)buf, v12 + -31536000.0, v14);
    if (*(void *)buf == *(void *)&buf[8]
      || (double v16 = *(double *)(*(void *)&buf[8] - 48LL), v16 <= 0.0)
      || (double v6 = v6 + (double)(unint64_t)(28 - ((v27 - (_BYTE *)__p) >> 5)) * v16, v7 = 28.0, v16 <= v9))
    {
      double v16 = v9;
    }

    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  if (v7 <= 0.0) {
    double v17 = 0.0;
  }
  else {
    double v17 = v6 / v7;
  }
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  uint64_t v18 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = "false";
    if (v7 > 0.0) {
      uint64_t v19 = "true";
    }
    *(_DWORD *)__n128 buf = 136380931;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&_BYTE buf[12] = 2049;
    *(double *)&_BYTE buf[14] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "VO2Max,GetMeanMaxMets,canCalculateMeanMaxMets,%{private}s,meanMaxMets,%{private}.3f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    uint64_t v23 = "false";
    if (v7 > 0.0) {
      uint64_t v23 = "true";
    }
    int v29 = 136380931;
    uint64_t v30 = v23;
    __int16 v31 = 2049;
    double v32 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,GetMeanMaxMets,canCalculateMeanMaxMets,%{private}s,meanMaxMets,%{private}.3f",  &v29,  22);
    unint64_t v25 = (uint8_t *)v24;
    sub_10029211C("Generic", 1LL, 0, 2LL, "double CLVO2MaxEstimator::getMeanMaxMets()", "%s\n", v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  float v20 = v17;
  *(float *)(a1 + 1388) = v20;
  float v21 = v16;
  *(float *)(a1 + 1392) = v21;
  if (__p)
  {
    __int16 v27 = __p;
    operator delete(__p);
  }

  return v17;
}

void sub_100C81810( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8184C( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, __int128 **a6, double a7, double a8)
{
  float v16 = *(float *)(a1 + 908);
  LODWORD(v149) = *(_DWORD *)(a1 + 904);
  *((float *)&v149 + 1) = v16;
  uint64_t v17 = *(void *)a1;
  uint64_t v18 = *(void *)(a1 + 1600);
  double v19 = *(float *)&v149;
  int v20 = *(_DWORD *)(a1 + 1608);
  *(void *)a5 = 0LL;
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + 16) = 0LL;
  *(double *)(a5 + 24) = a7;
  *(void *)(a5 + 32) = 0LL;
  *(void *)(a5 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v17;
  *(void *)(a5 + 48) = v18;
  *(double *)(a5 + 56) = v16;
  *(double *)(a5 + 64) = v19;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_DWORD *)(a5 + 104) = v20;
  *(_WORD *)(a5 + 108) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(void *)(a5 + 128) = 0LL;
  *(void *)(a5 + 136) = 0LL;
  *(void *)(a5 + 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v141 = _Q0;
  double v142 = -1.0;
  int v144 = 0;
  uint64_t v146 = 0LL;
  uint64_t v147 = 0LL;
  int v145 = 0LL;
  *(_OWORD *)uint64_t v148 = _Q0;
  *(void *)&v148[16] = 0xBFF0000000000000LL;
  sub_1006FBA44((uint64_t)&v139 + 4, &v149, *(_DWORD *)(a1 + 1608));
  sub_1006FDB30(*(double *)(a1 + 24), (uint64_t)&v139 + 4, (uint64_t *)(a1 + 1248), a5, *(void *)a1);
  std::stringbuf::string_type __p = 0LL;
  uint64_t v137 = 0LL;
  double v138 = 0.0;
  uint64_t v25 = *(void *)(a1 + 1248);
  uint64_t v26 = *(void *)(a1 + 1256);
  if (v25 != v26)
  {
    __int16 v27 = 0LL;
    uint64_t v28 = 0LL;
    int v29 = &v138;
    do
    {
      while (*(_DWORD *)(v25 + 64) < 2u)
      {
        v25 += 72LL;
        if (v25 == v26) {
          goto LABEL_31;
        }
      }

      if ((unint64_t)v28 >= *(void *)&v138)
      {
        __int128 v135 = a6;
        uint64_t v33 = a2;
        unint64_t v34 = a4;
        unint64_t v35 = 0x8E38E38E38E38E39LL * (((char *)v28 - v27) >> 3);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0x38E38E38E38E38ELL) {
          sub_100007008();
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37)
        {
          uint64_t v38 = v29;
          unint64_t v39 = (char *)sub_100046304((uint64_t)v29, v37);
          __int16 v27 = __p;
          uint64_t v28 = v137;
          int v29 = v38;
        }

        else
        {
          unint64_t v39 = 0LL;
        }

        unint64_t v40 = &v39[72 * v35];
        *(_OWORD *)unint64_t v40 = *(_OWORD *)v25;
        __int128 v41 = *(_OWORD *)(v25 + 16);
        __int128 v42 = *(_OWORD *)(v25 + 32);
        __int128 v43 = *(_OWORD *)(v25 + 48);
        *((void *)v40 + 8) = *(void *)(v25 + 64);
        *((_OWORD *)v40 + 2) = v42;
        *((_OWORD *)v40 + 3) = v43;
        *((_OWORD *)v40 + 1) = v41;
        if (v28 == (_OWORD *)v27)
        {
          __int16 v48 = &v39[72 * v35];
          a4 = v34;
        }

        else
        {
          uint64_t v44 = &v39[72 * v35];
          a4 = v34;
          do
          {
            *(_OWORD *)(v44 - 72) = *(_OWORD *)((char *)v28 - 72);
            __int128 v45 = *(_OWORD *)((char *)v28 - 56);
            __int128 v46 = *(_OWORD *)((char *)v28 - 40);
            __int128 v47 = *(_OWORD *)((char *)v28 - 24);
            __int16 v48 = v44 - 72;
            *((_DWORD *)v44 - 2) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v44 - 24) = v47;
            *(_OWORD *)(v44 - 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v46;
            *(_OWORD *)(v44 - 56) = v45;
            uint64_t v28 = (_OWORD *)((char *)v28 - 72);
            v44 -= 72;
          }

          while (v28 != (_OWORD *)v27);
        }

        uint64_t v28 = v40 + 72;
        std::stringbuf::string_type __p = v48;
        uint64_t v137 = v40 + 72;
        *(void *)&double v138 = &v39[72 * v37];
        a2 = v33;
        if (v27)
        {
          uint64_t v49 = v29;
          operator delete(v27);
          int v29 = v49;
          __int16 v27 = __p;
        }

        else
        {
          __int16 v27 = v48;
        }

        a6 = v135;
      }

      else
      {
        *uint64_t v28 = *(_OWORD *)v25;
        __int128 v30 = *(_OWORD *)(v25 + 16);
        __int128 v31 = *(_OWORD *)(v25 + 32);
        __int128 v32 = *(_OWORD *)(v25 + 48);
        *((void *)v28 + 8) = *(void *)(v25 + 64);
        v28[2] = v31;
        v28[3] = v32;
        v28[1] = v30;
        uint64_t v28 = (_OWORD *)((char *)v28 + 72);
      }

      uint64_t v137 = v28;
      v25 += 72LL;
    }

    while (0x8E38E38E38E38E39LL * (((char *)v28 - v27) >> 3) <= 0x1EB && v25 != v26);
  }

void sub_100C825A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C82600(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  if (*(void *)(a1 + 16) == 1LL) {
    return 0LL;
  }
  int v7 = uuid_compare((const unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56));
  BOOL result = 0LL;
  if (v7 && !*a2)
  {
    BOOL v8 = *(_DWORD *)(a1 + 1608) != 3;
    if (*a3) {
      BOOL v8 = 1;
    }
    return *(double *)(a1 + 1600) > dbl_1013585E0[*(_DWORD *)(a1 + 1608) != 3] && v8;
  }

  return result;
}

void sub_100C82690( uint64_t a1, uint64_t *a2, __int128 **a3, __int128 *a4, uint64_t a5, int a6, unsigned __int8 *src, double a8, double a9, double a10)
{
  if (*a2 == a2[1])
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10187AEB8);
    }
    __int128 v93 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134283521;
      *(double *)&uint8_t buf[4] = a8;
      _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "Will not retrocompute VO2Max due to absense of VO2MaxInputs, workoutEndTime:%{private}f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10187AEB8);
      }
      LODWORD(v103) = 134283521;
      *(double *)((char *)&v103 + 4) = a8;
      unint64_t v94 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Will not retrocompute VO2Max due to absense of VO2MaxInputs, workoutEndTime:%{private}f",  &v103,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimator::retrocomputeVO2Max(CFAbsoluteTime, const std::vector<VO2MaxInput> &, const std::vector<V O2MaxSummary> &, const CLBodyMetrics &, double, double, CMWorkoutType, CLWorkoutSessionDetails::Type, VO2MaxRetr ocomputeSessionResult &)",  "%s\n",  v94);
    }
  }

  else
  {
    srca = (unsigned __int8 *)(a1 + 56);
    uuid_copy((unsigned __int8 *)(a1 + 56), src);
    __int128 v19 = *a4;
    __int128 v20 = a4[1];
    __int128 v21 = a4[2];
    *(_OWORD *)(a1 + 1316) = *(__int128 *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 1288) = v20;
    *(_OWORD *)(a1 + 1304) = v21;
    *(_OWORD *)(a1 + 1272) = v19;
    *(_DWORD *)(a1 + 1608) = a6;
    *(void *)a1 = a5;
    *(void *)(a1 + 24) = *(void *)(*a2 + 32);
    sub_1007BBF5C(a1 + 896, (uint64_t)a4);
    float v22 = a10;
    uint64_t v97 = a1 + 896;
    sub_100AD6EE0(a1 + 896, v22);
    *(void *)(a1 + 936) = *(void *)(a1 + 24);
    *(_DWORD *)(a1 + 944) = *(_DWORD *)(a1 + 1608);
    uint64_t v24 = *a2;
    uint64_t v23 = a2[1];
    if (*a2 != v23)
    {
      uint64_t v25 = (char **)(a1 + 1248);
      do
      {
        sub_1007BB61C(v97, v24, (uint64_t)buf);
        unint64_t v26 = *(void *)(a1 + 1256);
        unint64_t v27 = *(void *)(a1 + 1264);
        if (v26 >= v27)
        {
          unint64_t v32 = 0x8E38E38E38E38E39LL * ((uint64_t)(v26 - (void)*v25) >> 3);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0x38E38E38E38E38ELL) {
            sub_100007008();
          }
          unint64_t v34 = 0x8E38E38E38E38E39LL * ((uint64_t)(v27 - (void)*v25) >> 3);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x1C71C71C71C71C7LL) {
            unint64_t v35 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35) {
            unint64_t v36 = (char *)sub_100046304(a1 + 1264, v35);
          }
          else {
            unint64_t v36 = 0LL;
          }
          unint64_t v37 = &v36[72 * v32];
          *(_OWORD *)unint64_t v37 = *(_OWORD *)buf;
          __int128 v38 = v111;
          __int128 v39 = v112;
          __int128 v40 = v113;
          *((void *)v37 + 8) = v114;
          *((_OWORD *)v37 + 2) = v39;
          *((_OWORD *)v37 + 3) = v40;
          *((_OWORD *)v37 + 1) = v38;
          __int128 v41 = *(char **)(a1 + 1256);
          __int128 v42 = *(char **)(a1 + 1248);
          __int128 v43 = v37;
          if (v41 != v42)
          {
            do
            {
              *(_OWORD *)(v43 - 72) = *(_OWORD *)(v41 - 72);
              __int128 v44 = *(_OWORD *)(v41 - 56);
              __int128 v45 = *(_OWORD *)(v41 - 40);
              __int128 v46 = *(_OWORD *)(v41 - 24);
              *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
              *(_OWORD *)(v43 - 24) = v46;
              *(_OWORD *)(v43 - 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v45;
              *(_OWORD *)(v43 - 56) = v44;
              v43 -= 72;
              v41 -= 72;
            }

            while (v41 != v42);
            __int128 v41 = *v25;
          }

          *(void *)(a1 + 1248) = v43;
          __int128 v31 = v37 + 72;
          *(void *)(a1 + 1256) = v37 + 72;
          *(void *)(a1 + 1264) = &v36[72 * v35];
          if (v41) {
            operator delete(v41);
          }
        }

        else
        {
          *(_OWORD *)unint64_t v26 = *(_OWORD *)buf;
          __int128 v28 = v111;
          __int128 v29 = v112;
          __int128 v30 = v113;
          *(void *)(v26 + 64) = v114;
          *(_OWORD *)(v26 + 32) = v29;
          *(_OWORD *)(v26 + 48) = v30;
          *(_OWORD *)(v26 + 16) = v28;
          __int128 v31 = (char *)(v26 + 72);
        }

        *(void *)(a1 + 1256) = v31;
        v24 += 112LL;
      }

      while (v24 != v23);
    }

    *(double *)(a1 + 160sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = vabdd_f64(*(double *)(a1 + 928), *(double *)(a1 + 920));
    __int128 v103 = 0x7FEFFFFFFFFFFFFFuLL;
    unint64_t v104 = 0xBFF0000000000000LL;
    char v106 = 0;
    int v109 = 0;
    v105[0] = 0;
    uint64_t v107 = 0LL;
    uint64_t v108 = 0LL;
    std::stringbuf::string_type __p = 0LL;
    __int128 v101 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v99 = 0LL;
    __int128 v117 = 0u;
    __int128 v118 = 0u;
    __int128 v115 = 0u;
    __int128 v116 = 0u;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    *(_OWORD *)__n128 buf = 0u;
    int v98 = sub_100C8184C(a1, (uint64_t)&v103, &__p, &v99, (uint64_t)buf, a3, a8, a9);
    __int128 v47 = (unsigned __int8 *)__p;
    __int16 v48 = v101;
    if (__p != v101)
    {
      uint64_t v49 = src + 32;
      do
      {
        uuid_copy(v47 + 24, srca);
        *((void *)v47 + 2) = *(void *)a1;
        *((_DWORD *)v47 + 45) = *(_DWORD *)(a1 + 1608);
        unint64_t v50 = *((void *)src + 5);
        unint64_t v51 = *((void *)src + 6);
        if (v50 >= v51)
        {
          unint64_t v62 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)(v50 - *(void *)v49) >> 3);
          unint64_t v63 = v62 + 1;
          if (v62 + 1 > 0x1642C8590B21642LL) {
            sub_100007008();
          }
          unint64_t v64 = 0xD37A6F4DE9BD37A7LL * ((uint64_t)(v51 - *(void *)v49) >> 3);
          if (2 * v64 > v63) {
            unint64_t v63 = 2 * v64;
          }
          if (v64 >= 0xB21642C8590B21LL) {
            unint64_t v65 = 0x1642C8590B21642LL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65) {
            int v66 = (char *)sub_1002DF6FC((uint64_t)(src + 48), v65);
          }
          else {
            int v66 = 0LL;
          }
          int v67 = &v66[184 * v62];
          __int128 v68 = *(_OWORD *)v47;
          __int128 v69 = *((_OWORD *)v47 + 1);
          __int128 v70 = *((_OWORD *)v47 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v47 + 2);
          *((_OWORD *)v67 + 3) = v70;
          *(_OWORD *)int v67 = v68;
          *((_OWORD *)v67 + 1) = v69;
          __int128 v71 = *((_OWORD *)v47 + 4);
          __int128 v72 = *((_OWORD *)v47 + 5);
          __int128 v73 = *((_OWORD *)v47 + 7);
          *((_OWORD *)v67 + 6) = *((_OWORD *)v47 + 6);
          *((_OWORD *)v67 + 7) = v73;
          *((_OWORD *)v67 + 4) = v71;
          *((_OWORD *)v67 + 5) = v72;
          __int128 v74 = *((_OWORD *)v47 + 8);
          __int128 v75 = *((_OWORD *)v47 + 9);
          __int128 v76 = *((_OWORD *)v47 + 10);
          *((void *)v67 + 22) = *((void *)v47 + 22);
          *((_OWORD *)v67 + 9) = v75;
          *((_OWORD *)v67 + 1sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v76;
          *((_OWORD *)v67 + 8) = v74;
          int v78 = (char *)*((void *)src + 4);
          double v77 = (char *)*((void *)src + 5);
          uint64_t v79 = v67;
          if (v77 != v78)
          {
            do
            {
              __int128 v80 = *(_OWORD *)(v77 - 184);
              __int128 v81 = *(_OWORD *)(v77 - 168);
              __int128 v82 = *(_OWORD *)(v77 - 152);
              *(_OWORD *)(v79 - 136) = *(_OWORD *)(v77 - 136);
              *(_OWORD *)(v79 - 152) = v82;
              *(_OWORD *)(v79 - 168) = v81;
              *(_OWORD *)(v79 - 184) = v80;
              __int128 v83 = *(_OWORD *)(v77 - 120);
              __int128 v84 = *(_OWORD *)(v77 - 104);
              __int128 v85 = *(_OWORD *)(v77 - 88);
              *(_OWORD *)(v79 - 72) = *(_OWORD *)(v77 - 72);
              *(_OWORD *)(v79 - 88) = v85;
              *(_OWORD *)(v79 - 104) = v84;
              *(_OWORD *)(v79 - 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v83;
              __int128 v86 = *(_OWORD *)(v77 - 56);
              __int128 v87 = *(_OWORD *)(v77 - 40);
              __int128 v88 = *(_OWORD *)(v77 - 24);
              *((void *)v79 - 1) = *((void *)v77 - 1);
              *(_OWORD *)(v79 - 24) = v88;
              *(_OWORD *)(v79 - 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v87;
              *(_OWORD *)(v79 - 56) = v86;
              v79 -= 184;
              v77 -= 184;
            }

            while (v77 != v78);
            double v77 = *(char **)v49;
          }

          float v61 = v67 + 184;
          *((void *)src + 4) = v79;
          *((void *)src + 5) = v67 + 184;
          *((void *)src + 6) = &v66[184 * v65];
          if (v77) {
            operator delete(v77);
          }
        }

        else
        {
          __int128 v52 = *(_OWORD *)v47;
          __int128 v53 = *((_OWORD *)v47 + 1);
          __int128 v54 = *((_OWORD *)v47 + 3);
          *(_OWORD *)(v50 + 32) = *((_OWORD *)v47 + 2);
          *(_OWORD *)(v50 + 48) = v54;
          *(_OWORD *)unint64_t v50 = v52;
          *(_OWORD *)(v50 + 16) = v53;
          __int128 v55 = *((_OWORD *)v47 + 4);
          __int128 v56 = *((_OWORD *)v47 + 5);
          __int128 v57 = *((_OWORD *)v47 + 7);
          *(_OWORD *)(v50 + 96) = *((_OWORD *)v47 + 6);
          *(_OWORD *)(v50 + 112) = v57;
          *(_OWORD *)(v50 + 64) = v55;
          *(_OWORD *)(v50 + 8sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v56;
          __int128 v58 = *((_OWORD *)v47 + 8);
          __int128 v59 = *((_OWORD *)v47 + 9);
          __int128 v60 = *((_OWORD *)v47 + 10);
          *(void *)(v50 + 176) = *((void *)v47 + 22);
          *(_OWORD *)(v50 + 144) = v59;
          *(_OWORD *)(v50 + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v60;
          *(_OWORD *)(v50 + 128) = v58;
          float v61 = (char *)(v50 + 184);
        }

        *((void *)src + 5) = v61;
        v47 += 184;
      }

      while (v47 != v48);
    }

    if (sub_100C82600(a1, &v98, v105))
    {
      uuid_copy((unsigned __int8 *)&v114 + 8, srca);
      BYTE13(v116) = 1;
      BYTE12(v116) = *(_BYTE *)(a1 + 1328);
      *(_OWORD *)(src + 56) = *(_OWORD *)buf;
      __int128 v89 = v113;
      *(_OWORD *)(src + 12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v114;
      *(_OWORD *)(src + 104) = v89;
      __int128 v90 = v111;
      *(_OWORD *)(src + 88) = v112;
      *(_OWORD *)(src + 72) = v90;
      __int128 v91 = v117;
      *(_OWORD *)(src + 184) = v118;
      *(_OWORD *)(src + 168) = v91;
      __int128 v92 = v116;
      *(_OWORD *)(src + 136) = v115;
      *(_OWORD *)(src + 152) = v92;
    }

    sub_100C82DCC(v97, a1 + 1336);
    if (__p)
    {
      __int128 v101 = (unsigned __int8 *)__p;
      operator delete(__p);
    }
  }

void sub_100C82DA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_100C82DCC(uint64_t a1, uint64_t a2)
{
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  double v4 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    int v6 = *(_DWORD *)(a1 + 68);
    int v7 = *(_DWORD *)(a1 + 72);
    int v8 = *(_DWORD *)(a1 + 76);
    int v9 = *(_DWORD *)(a1 + 80);
    int v10 = *(_DWORD *)(a1 + 84);
    int v11 = *(_DWORD *)(a1 + 88);
    int v12 = *(_DWORD *)(a1 + 92);
    int v14 = *(_DWORD *)(a1 + 96);
    int v13 = *(_DWORD *)(a1 + 100);
    int v15 = *(_DWORD *)(a1 + 104);
    int v16 = *(_DWORD *)(a1 + 108);
    int v17 = *(_DWORD *)(a1 + 120);
    int v18 = *(_DWORD *)(a1 + 124);
    int v19 = *(_DWORD *)(a1 + 112);
    int v20 = *(_DWORD *)(a1 + 116);
    uint64_t v21 = *(void *)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)__n128 buf = 67113984;
    int v59 = v5;
    __int16 v60 = 1024;
    int v61 = 0;
    __int16 v62 = 1024;
    int v63 = v6;
    __int16 v64 = 1024;
    int v65 = v7;
    __int16 v66 = 1024;
    int v67 = 0;
    __int16 v68 = 1024;
    int v69 = v8;
    __int16 v70 = 1024;
    int v71 = v9;
    __int16 v72 = 1024;
    int v73 = v10;
    __int16 v74 = 1024;
    int v75 = v11;
    __int16 v76 = 1024;
    int v77 = v12;
    __int16 v78 = 1024;
    int v79 = v14;
    __int16 v80 = 1024;
    int v81 = v13;
    __int16 v82 = 1024;
    int v83 = v15;
    __int16 v84 = 1024;
    int v85 = v16;
    __int16 v86 = 1024;
    int v87 = v17;
    __int16 v88 = 1024;
    int v89 = v18;
    __int16 v90 = 1024;
    int v91 = v19;
    __int16 v92 = 1024;
    int v93 = v20;
    __int16 v94 = 2048;
    uint64_t v95 = v21;
    __int16 v96 = 1024;
    int v97 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,gps,%d,stride,%d,distance,%d,s ource,%d,hrOK,%d,totalWorkoutLengthOK,%d,totalPaceOK,%d,totalStrollerOK,%d,totalPercentWalkingOK,%d,metsAboveAdapt iveMin,%d,totalGoodForClustering,%d,totalGoodForAdaptiveModel,%d,workoutStartTime,%f,workoutSessionType,%d",  buf,  0x7Eu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    int v34 = *(_DWORD *)(a1 + 68);
    int v35 = *(_DWORD *)(a1 + 76);
    int v36 = *(_DWORD *)(a1 + 80);
    int v37 = *(_DWORD *)(a1 + 84);
    int v38 = *(_DWORD *)(a1 + 92);
    int v39 = *(_DWORD *)(a1 + 96);
    int v40 = *(_DWORD *)(a1 + 100);
    int v41 = *(_DWORD *)(a1 + 108);
    int v42 = *(_DWORD *)(a1 + 120);
    int v43 = *(_DWORD *)(a1 + 124);
    int v44 = *(_DWORD *)(a1 + 116);
    uint64_t v45 = *(void *)(a1 + 40);
    int v46 = *(_DWORD *)(a1 + 48);
    LOWORD(v49) = HIWORD(*(_DWORD *)(a1 + 72));
    HIWORD(v49) = 1024;
    LOWORD(v5sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 1024;
    HIWORD(v5sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v35;
    LOWORD(vsub_100C69D48(v2 + 51) = HIWORD(v37);
    HIWORD(vsub_100C69D48(v2 + 51) = 1024;
    LOWORD(v52) = 1024;
    HIWORD(v52) = v38;
    LOWORD(v53) = HIWORD(v40);
    HIWORD(v53) = 1024;
    LOWORD(v54) = 1024;
    HIWORD(v54) = v41;
    LOWORD(v55) = HIWORD(v43);
    HIWORD(v55) = 1024;
    LOWORD(v56) = 1024;
    HIWORD(v56) = v44;
    LOWORD(v57) = 1024;
    HIWORD(v57) = v46;
    __int128 v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,gps,%d,stride,%d ,distance,%d,source,%d,hrOK,%d,totalWorkoutLengthOK,%d,totalPaceOK,%d,totalStrollerOK,%d,totalPercen tWalkingOK,%d,metsAboveAdaptiveMin,%d,totalGoodForClustering,%d,totalGoodForAdaptiveModel,%d,workout StartTime,%f,workoutSessionType,%d",  &v48,  126,  67113984,  1024,  v34,  v49,  v50,  v36,  v51,  v52,  v39,  v53,  v54,  v42,  v55,  v56,  v45,  v57);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVO2MaxPreprocessor::log(T &) [T = CLVO2MaxStats]", "%s\n", v47);
  }

  *(_DWORD *)(a2 + 228) = 100;
  int v23 = *(_DWORD *)(a1 + 64);
  if (v23)
  {
    float v24 = (float)(100 * *(_DWORD *)(a1 + 96) / v23);
    *(_DWORD *)(a2 + 224) = v24;
    *(float *)(a2 + 248) = (float)(100 * *(_DWORD *)(a1 + 72) / v23);
    *(float *)(a2 + 252) = (float)(100 * *(_DWORD *)(a1 + 84) / v23);
    float v25 = (float)(100 * *(_DWORD *)(a1 + 80) / v23);
    float v26 = (float)(100 * *(_DWORD *)(a1 + 128) / v23);
    float v27 = (float)(100 * *(_DWORD *)(a1 + 132) / v23);
    float v28 = (float)(100 * *(_DWORD *)(a1 + 136) / v23);
  }

  else
  {
    *(_DWORD *)(a2 + 224) = 0;
    float v25 = 0.0;
    float v24 = 0.0;
    float v26 = 0.0;
    float v27 = 0.0;
    *(void *)(a2 + 248) = 0LL;
    float v28 = 0.0;
  }

  *(float *)(a2 + 148) = v25;
  *(float *)(a2 + 152) = v24;
  *(float *)(a2 + 16sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v26;
  *(float *)(a2 + 164) = v27;
  *(float *)(a2 + 176) = v28;
  int v29 = *(_DWORD *)(a1 + 200);
  if (v29 <= 0)
  {
    *(_DWORD *)(a2 + 168) = 0;
    double v31 = 0.0;
  }

  else
  {
    float v30 = *(double *)(a1 + 216);
    *(float *)(a2 + 168) = v30;
    double v31 = 0.0;
    int v32 = v29 - 1;
    if (v32) {
      double v31 = *(double *)(a1 + 232) / (double)v32;
    }
  }

  float result = sqrt(v31);
  *(float *)(a2 + 172) = result;
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 16);
  return result;
}

BOOL sub_100C8321C(uint64_t a1)
{
  int v7 = 0LL;
  int v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v2 = sub_100D74AD8();
  sub_100D752D8(v2, &v7);
  int v3 = v7;
  double v4 = v8;
  unint64_t v5 = *(int *)(a1 + 1688);
  if (v7)
  {
    int v8 = v7;
    operator delete(v7);
  }

  return 0x8E38E38E38E38E39LL * ((v4 - v3) >> 4) >= v5;
}

void sub_100C83298( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C832B4(uint64_t a1)
{
  uint64_t v1 = (const unsigned __int8 *)(a1 + 56);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v2 = sub_100D74AD8();
  return sub_100D752E8(v2, v1, &v4);
}

void sub_100C8333C(uint64_t a1, int a2, double a3, double a4)
{
  *(_DWORD *)(a1 + 1532) = a2;
  *(void *)(a1 + 152sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(void *)a1;
  *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a1 + 1608);
  float v8 = *(double *)(a1 + 1616) * 100.0;
  *(float *)(a1 + 1492) = v8;
  float v9 = *(double *)(a1 + 1600);
  *(float *)(a1 + 1516) = v9;
  float v10 = -1.0;
  if (!a2)
  {
    __int128 v11 = *(_OWORD *)(a1 + 1288);
    __int128 v125 = *(_OWORD *)(a1 + 1272);
    __int128 v126 = v11;
    v127[0] = *(_OWORD *)(a1 + 1304);
    *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a1 + 1316);
    sub_1003DA2B8((uint64_t)&v125);
    float v13 = ((float)(v12 * 3.5) - a3) * 100.0 / a3;
    if (v13 > 100.0) {
      float v13 = 100.0;
    }
    if (v13 >= -100.0) {
      float v10 = v13 + 100.0;
    }
    else {
      float v10 = 0.0;
    }
  }

  HIBYTE(v124) = 0;
  uint64_t v14 = sub_1002F8DDC();
  sub_1002A6FD4(v14, (uint64_t)@"ActiveJacksonCalibration", (BOOL *)&v124 + 7);
  *(_DWORD *)(a1 + 1568) = 0x80000000;
  char v15 = HIBYTE(v124);
  BOOL v16 = a2 != 0;
  if (!HIBYTE(v124)) {
    BOOL v16 = 1;
  }
  if (v16 || (float v17 = *(float *)(a1 + 1316), v17 == 0.0))
  {
    int v19 = 0;
  }

  else
  {
    float v18 = a3 / 3.5;
    *(_DWORD *)(a1 + 1568) = (int)((float)(v18 - v17) * 100.0 / v17);
    int v19 = 1;
  }

  *(float *)(a1 + 1576) = v10;
  *(_BYTE *)(a1 + 158sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v15;
  std::stringbuf::string_type __p = 0LL;
  uint64_t v122 = 0LL;
  double v123 = 0.0;
  uint64_t v20 = sub_100D74AD8();
  sub_100D752E0(v20, (char **)&__p, 0, 0x7FFFFFFF, a4 + -7776000.0);
  uint64_t v21 = (double *)__p;
  int v22 = v122;
  if (__p == v122)
  {
    double v34 = 0.0;
  }

  else
  {
    int v23 = 0;
    double v24 = 0.0;
    float v25 = 0.0;
    int v26 = 1;
    float v27 = 0.0;
    float v28 = 0.0;
    int v29 = (double *)__p;
    double v30 = 0.0;
    double v31 = 0.0;
    double v32 = 0.0;
    double v33 = 0.0;
    double v34 = 0.0;
    do
    {
      double v35 = v30;
      int v36 = v26;
      double v37 = v29[4];
      double v38 = v37;
      double v39 = 0.0;
      if (v26 != 1)
      {
        double v38 = v34 + (v37 - v34) / (double)v26;
        double v39 = v33 + (v37 - v34) * (v37 - v38);
        double v32 = v39;
      }

      double v33 = v39;
      double v34 = v38;
      if (v29[3] <= a4 + -604800.0)
      {
        double v37 = v24;
      }

      else if (v23)
      {
        double v31 = v24 + (v37 - v24) / (double)++v23;
        double v37 = v31;
      }

      else
      {
        int v23 = 1;
        double v31 = v29[4];
      }

      double v30 = v35 + 1.0;
      uint64_t v40 = *((void *)v29 + 5);
      float v41 = v27 + 1.0;
      float v42 = v25 + 1.0;
      if (v40 != 15) {
        float v42 = v25;
      }
      if (v40 == 17) {
        float v42 = v25;
      }
      else {
        float v41 = v27;
      }
      if (v40 == 24) {
        float v28 = v28 + 1.0;
      }
      else {
        float v27 = v41;
      }
      if (v40 != 24) {
        float v25 = v42;
      }
      v29 += 18;
      int v26 = v36 + 1;
      double v24 = v37;
    }

    while (v29 != v122);
    if (v34 > 0.0)
    {
      double v43 = 0.0;
      if (v23 <= 0) {
        double v44 = 0.0;
      }
      else {
        double v44 = v31;
      }
      float v45 = v44 / v34;
      *(float *)(a1 + 1444) = v45;
      if (v36 != 1) {
        double v43 = v32 / v35;
      }
      float v46 = sqrt(v43);
      *(float *)(a1 + 144sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v46;
    }

    if (v21 != v22)
    {
      unint64_t v47 = 0x8E38E38E38E38E39LL * (((char *)v22 - (char *)v21) >> 4);
      if (v47 >= 2)
      {
        float v48 = v21[4] / v21[22];
        *(float *)(a1 + 1448) = v48;
      }

      *(float *)(a1 + 1452) = v25 / (float)v47;
      *(float *)(a1 + 1456) = v27 / (float)v47;
      *(float *)(a1 + 146sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v28 / (float)v47;
    }
  }

  uint64_t v122 = v21;
  uint64_t v49 = sub_100D74AD8();
  double v50 = a4 + -7257600.0;
  uint64_t v51 = sub_100D752E0(v49, (char **)&__p, 1, 42, v50);
  *(_DWORD *)(a1 + 1464) = 954437177 * ((unint64_t)((char *)v122 - (_BYTE *)__p) >> 4);
  uint64_t v52 = sub_100C846B4(v50, v51, &__p);
  *(_DWORD *)(a1 + 1468) = v52;
  sub_100C848D4(v52, &__p);
  *(float *)&double v53 = v53;
  *(_DWORD *)(a1 + 148sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = LODWORD(v53);
  uint64_t v54 = -[NSTimeZone secondsFromGMT]( +[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"),  "secondsFromGMT");
  int v55 = __p;
  int v56 = v122;
  if (v122 == __p)
  {
    int v62 = 0;
    *(_DWORD *)(a1 + 1472) = 0;
  }

  else
  {
    int v57 = 0;
    signed int v58 = 0;
    do
    {
      signed int v59 = vcvtmd_s64_f64((*(v56 - 15) + (double)v54) / 86400.0);
      __int16 v60 = v56 - 18;
      BOOL v61 = v58 < v59;
      if (v58 <= v59) {
        signed int v58 = v59;
      }
      if (v61) {
        ++v57;
      }
      v56 -= 18;
    }

    while (v60 != __p);
    *(_DWORD *)(a1 + 1472) = v57;
    int v62 = v55[28];
  }

  *(_DWORD *)(a1 + 1476) = v62;
  *(_DWORD *)(a1 + 134sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(_DWORD *)(a1 + 1292);
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(a1 + 1276);
  *(_BYTE *)(a1 + 1344) = *(_BYTE *)(a1 + 1320);
  float v63 = *(float *)(a1 + 1284);
  if (v63 != 0.0)
  {
    float v64 = *(float *)(a1 + 1280);
    if (v64 != 0.0) {
      *(float *)(a1 + 1348) = v63 / (float)(v64 * v64);
    }
  }

  float v65 = v34;
  if (v21 == v22) {
    float v65 = 0.0;
  }
  *(float *)(a1 + 1352) = v65;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  __int16 v66 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v67 = *(_DWORD *)(a1 + 1552);
    int v68 = *(_DWORD *)(a1 + 1556);
    int v69 = *(_DWORD *)(a1 + 1560);
    int v70 = *(_DWORD *)(a1 + 1564);
    *(_DWORD *)__n128 buf = 67109888;
    LODWORD(v228) = v67;
    WORD2(v228) = 1024;
    *(_DWORD *)((char *)&v228 + 6) = v68;
    WORD5(v228) = 1024;
    HIDWORD(v228) = v69;
    *(_WORD *)int v229 = 1024;
    *(_DWORD *)&v229[2] = v70;
    _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    int v96 = *(_DWORD *)(a1 + 1552);
    int v97 = *(_DWORD *)(a1 + 1556);
    int v98 = *(_DWORD *)(a1 + 1560);
    int v99 = *(_DWORD *)(a1 + 1564);
    int v128 = 67109888;
    LODWORD(v129) = v96;
    WORD2(v129) = 1024;
    *(_DWORD *)((char *)&v129 + 6) = v97;
    WORD5(v129) = 1024;
    HIDWORD(v129) = v98;
    *(_WORD *)uint64_t v130 = 1024;
    *(_DWORD *)&v130[2] = v99;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d",  &v128,  26,  (_DWORD)__p,  (_DWORD)v122);
    __int128 v101 = (uint8_t *)v100;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)",  "%s\n",  v100);
    if (v101 != buf) {
      free(v101);
    }
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  int v71 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v72 = *(_DWORD *)(a1 + 1568);
    double v73 = a3 / 3.5;
    double v74 = *(float *)(a1 + 1316);
    *(_DWORD *)__n128 buf = 67109632;
    LODWORD(v228) = v72;
    WORD2(v228) = 2048;
    *(double *)((char *)&v228 + 6) = v74;
    if (!v19) {
      double v73 = 0.0;
    }
    HIWORD(v228) = 2048;
    *(double *)int v229 = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "VO2Max,longitudinalConsistency,%d,old,%f,new,%f",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    int v102 = *(_DWORD *)(a1 + 1568);
    double v103 = a3 / 3.5;
    double v104 = *(float *)(a1 + 1316);
    int v128 = 67109632;
    LODWORD(v129) = v102;
    WORD2(v129) = 2048;
    *(double *)((char *)&v129 + 6) = v104;
    if (!v19) {
      double v103 = 0.0;
    }
    HIWORD(v129) = 2048;
    *(double *)uint64_t v130 = v103;
    LODWORD(v12sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,longitudinalConsistency,%d,old,%f,new,%f",  &v128,  v120,  *(double *)&__p);
    char v106 = (uint8_t *)v105;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)",  "%s\n",  v105);
    if (v106 != buf) {
      free(v106);
    }
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  int v75 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134231040;
    *(double *)&__int128 v228 = *(float *)(a1 + 1340);
    *(double *)&v229[6] = *(float *)(a1 + 1348);
    double v231 = *(float *)(a1 + 1352);
    double v233 = *(float *)(a1 + 1356);
    double v235 = *(float *)(a1 + 1360);
    double v237 = *(float *)(a1 + 1364);
    double v239 = *(float *)(a1 + 1368);
    double v241 = *(float *)(a1 + 1372);
    double v243 = *(float *)(a1 + 1376);
    double v245 = *(float *)(a1 + 1380);
    double v247 = *(float *)(a1 + 1384);
    double v249 = *(float *)(a1 + 1388);
    double v251 = *(float *)(a1 + 1392);
    double v253 = *(float *)(a1 + 1396);
    double v255 = *(float *)(a1 + 1404);
    double v257 = v255;
    double v259 = *(float *)(a1 + 1408);
    double v261 = *(float *)(a1 + 1416);
    double v263 = v261;
    double v265 = *(float *)(a1 + 1420);
    double v267 = *(float *)(a1 + 1432);
    double v271 = v267;
    double v269 = *(float *)(a1 + 1436);
    double v273 = v269;
    double v275 = *(float *)(a1 + 1440);
    double v277 = *(float *)(a1 + 1444);
    double v279 = *(float *)(a1 + 1448);
    double v281 = *(float *)(a1 + 1452);
    double v283 = *(float *)(a1 + 1456);
    double v285 = *(float *)(a1 + 1460);
    double v293 = *(float *)(a1 + 1480);
    double v297 = *(float *)(a1 + 1484);
    double v299 = *(float *)(a1 + 1488);
    double v301 = *(float *)(a1 + 1492);
    double v303 = *(float *)(a1 + 1496);
    double v305 = *(float *)(a1 + 1500);
    double v307 = *(float *)(a1 + 1504);
    double v309 = *(float *)(a1 + 1508);
    double v311 = *(float *)(a1 + 1512);
    double v317 = *(float *)(a1 + 1516);
    int v76 = *(_DWORD *)(a1 + 1336);
    int v77 = *(unsigned __int8 *)(a1 + 1344);
    int v78 = *(_DWORD *)(a1 + 1464);
    int v79 = *(_DWORD *)(a1 + 1468);
    int v80 = *(_DWORD *)(a1 + 1472);
    int v81 = *(_DWORD *)(a1 + 1476);
    uint64_t v82 = *(void *)(a1 + 1520);
    int v83 = *(_DWORD *)(a1 + 1536);
    int v84 = *(_DWORD *)(a1 + 1528);
    int v85 = *(_DWORD *)(a1 + 1532);
    int v86 = *(_DWORD *)(a1 + 1544);
    WORD4(v228) = 1024;
    *(_DWORD *)((char *)&v228 + 1sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v76;
    HIWORD(v228) = 1024;
    *(_DWORD *)int v229 = v77;
    *(_WORD *)&v229[4] = 2048;
    __int16 v230 = 2048;
    __int16 v232 = 2048;
    __int16 v234 = 2048;
    __int16 v236 = 2048;
    __int16 v238 = 2048;
    __int16 v240 = 2048;
    __int16 v242 = 2048;
    __int16 v244 = 2048;
    __int16 v246 = 2048;
    __int16 v248 = 2048;
    __int16 v250 = 2048;
    __int16 v252 = 2048;
    __int16 v254 = 2048;
    __int16 v256 = 2048;
    __int16 v258 = 2048;
    __int16 v260 = 2048;
    __int16 v262 = 2048;
    __int16 v264 = 2048;
    __int16 v266 = 2048;
    __int16 v268 = 2048;
    __int16 v270 = 2048;
    __int16 v272 = 2048;
    __int16 v274 = 2048;
    __int16 v276 = 2048;
    __int16 v278 = 2048;
    __int16 v280 = 2048;
    __int16 v282 = 2048;
    __int16 v284 = 2048;
    __int16 v286 = 1024;
    int v287 = v78;
    __int16 v288 = 1024;
    int v289 = v79;
    __int16 v290 = 1024;
    int v291 = v80;
    __int16 v292 = 2048;
    __int16 v294 = 1024;
    int v295 = v81;
    __int16 v296 = 2048;
    __int16 v298 = 2048;
    __int16 v300 = 2048;
    __int16 v302 = 2048;
    __int16 v304 = 2048;
    __int16 v306 = 2048;
    __int16 v308 = 2048;
    __int16 v310 = 2048;
    __int16 v312 = 1024;
    int v313 = v82;
    __int16 v314 = 1024;
    int v315 = v83;
    __int16 v316 = 2048;
    __int16 v318 = 1024;
    int v319 = v84;
    __int16 v320 = 1024;
    int v321 = v85;
    __int16 v322 = 1024;
    int v323 = 3;
    __int16 v324 = 1024;
    int v325 = v86;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "VO2Max,age,%.2f,biologicalSex,%d,useBetaBlocker,%d,userBMI,%.2f,vo2MaxMean,%.2f,vo2MaxPrior,%.2f,hrMaxObserved,%.2 f,hrMaxAgePredicted,%.2f,hrMaxAgeAndMedicationPredicted,%.2f,hrMinBodyMetricsPredicted,%.2f,hrOnset,%.2f,hrResting ObservedOneDay,%.2f,hrRestingObservedSevenDays,%.2f,maxMetsMean,%.2f,maxMetsHigh,%.2f,vo2MaxValue,%.2f,vo2MaxValue AdaptiveModel,%.2f,vo2MaxValueOutdoorPedestrianModel,%.2f,vo2MaxValueOOB,%.2f,vo2MaxValueAdaptiveModelOOB,%.2f,vo2 MaxValueOutdoorPedestrianModelOOB,%.2f,efficiency,%.2f,clustersHRMeanPedestrianModel,%.2f,clustersMetsMeanPedestri anModel,%.2f,clustersHRMeanAdaptiveModel,%.2f,clustersMetsMeanAdaptiveModel,%.2f,vo2MaxStDev,%.2f,vo2MaxTrend,%.2f ,vo2MaxTrendSingleEst,%.2f,workoutTypeRatioWalk,%.2f,workoutTypeRatioRun,%.2f,workoutTypeRatioHike,%.2f,lookbackNu mEstimates,%d,lookbackNumEstimatesAfterUpdate,%d,lookbackNumDaysWithEstimate,%d,lookbackEWMAPlusWeightedStDev,%.2f ,numWorkoutsContrToLatestEstimate,%d,pctGPSAvailability,%.2f,pctHeartRateAvailability,%.2f,pctBackgroundEscalation ,%.2f,pctHRMax,%.2f,pctHRMin,%.2f,validGradeMean,%.2f,validGradeStd,%.2f,pctGradeAboveAnalyticsThreshold,%.2f,work outType,%d,sessionType,%d,sessionDuration,%.2f,hrMinSource,%d,vo2MaxEstimationStatus,%d,arbitrationState,%d,limitState,%d",  buf,  0x1DAu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    int v128 = 134231040;
    *(double *)&__int128 v129 = *(float *)(a1 + 1340);
    *(double *)&void v130[6] = *(float *)(a1 + 1348);
    double v132 = *(float *)(a1 + 1352);
    double v134 = *(float *)(a1 + 1356);
    double v136 = *(float *)(a1 + 1360);
    double v138 = *(float *)(a1 + 1364);
    double v140 = *(float *)(a1 + 1368);
    double v142 = *(float *)(a1 + 1372);
    double v144 = *(float *)(a1 + 1376);
    double v146 = *(float *)(a1 + 1380);
    double v148 = *(float *)(a1 + 1384);
    double v150 = *(float *)(a1 + 1388);
    double v152 = *(float *)(a1 + 1392);
    double v154 = *(float *)(a1 + 1396);
    double v156 = *(float *)(a1 + 1404);
    double v158 = v156;
    double v160 = *(float *)(a1 + 1408);
    double v162 = *(float *)(a1 + 1416);
    double v164 = v162;
    double v166 = *(float *)(a1 + 1420);
    double v168 = *(float *)(a1 + 1432);
    double v172 = v168;
    double v170 = *(float *)(a1 + 1436);
    double v174 = v170;
    double v176 = *(float *)(a1 + 1440);
    double v178 = *(float *)(a1 + 1444);
    double v180 = *(float *)(a1 + 1448);
    double v182 = *(float *)(a1 + 1452);
    double v184 = *(float *)(a1 + 1456);
    double v186 = *(float *)(a1 + 1460);
    double v194 = *(float *)(a1 + 1480);
    double v198 = *(float *)(a1 + 1484);
    double v200 = *(float *)(a1 + 1488);
    double v202 = *(float *)(a1 + 1492);
    double v204 = *(float *)(a1 + 1496);
    double v206 = *(float *)(a1 + 1500);
    double v208 = *(float *)(a1 + 1504);
    double v210 = *(float *)(a1 + 1508);
    double v212 = *(float *)(a1 + 1512);
    double v218 = *(float *)(a1 + 1516);
    int v107 = *(_DWORD *)(a1 + 1336);
    int v108 = *(unsigned __int8 *)(a1 + 1344);
    int v109 = *(_DWORD *)(a1 + 1464);
    int v110 = *(_DWORD *)(a1 + 1468);
    int v111 = *(_DWORD *)(a1 + 1472);
    int v112 = *(_DWORD *)(a1 + 1476);
    uint64_t v113 = *(void *)(a1 + 1520);
    int v114 = *(_DWORD *)(a1 + 1536);
    int v115 = *(_DWORD *)(a1 + 1528);
    int v116 = *(_DWORD *)(a1 + 1532);
    int v117 = *(_DWORD *)(a1 + 1544);
    WORD4(v129) = 1024;
    *(_DWORD *)((char *)&v129 + 1sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v107;
    HIWORD(v129) = 1024;
    *(_DWORD *)uint64_t v130 = v108;
    *(_WORD *)&v130[4] = 2048;
    __int16 v131 = 2048;
    __int16 v133 = 2048;
    __int16 v135 = 2048;
    __int16 v137 = 2048;
    __int16 v139 = 2048;
    __int16 v141 = 2048;
    __int16 v143 = 2048;
    __int16 v145 = 2048;
    __int16 v147 = 2048;
    __int16 v149 = 2048;
    __int16 v151 = 2048;
    __int16 v153 = 2048;
    __int16 v155 = 2048;
    __int16 v157 = 2048;
    __int16 v159 = 2048;
    __int16 v161 = 2048;
    __int16 v163 = 2048;
    __int16 v165 = 2048;
    __int16 v167 = 2048;
    __int16 v169 = 2048;
    __int16 v171 = 2048;
    __int16 v173 = 2048;
    __int16 v175 = 2048;
    __int16 v177 = 2048;
    __int16 v179 = 2048;
    __int16 v181 = 2048;
    __int16 v183 = 2048;
    __int16 v185 = 2048;
    __int16 v187 = 1024;
    int v188 = v109;
    __int16 v189 = 1024;
    int v190 = v110;
    __int16 v191 = 1024;
    int v192 = v111;
    __int16 v193 = 2048;
    __int16 v195 = 1024;
    int v196 = v112;
    __int16 v197 = 2048;
    __int16 v199 = 2048;
    __int16 v201 = 2048;
    __int16 v203 = 2048;
    __int16 v205 = 2048;
    __int16 v207 = 2048;
    __int16 v209 = 2048;
    __int16 v211 = 2048;
    __int16 v213 = 1024;
    int v214 = v113;
    __int16 v215 = 1024;
    int v216 = v114;
    __int16 v217 = 2048;
    __int16 v219 = 1024;
    int v220 = v115;
    __int16 v221 = 1024;
    int v222 = v116;
    __int16 v223 = 1024;
    int v224 = 3;
    __int16 v225 = 1024;
    int v226 = v117;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,age,%.2f,biologicalSex,%d,useBetaBlocker,%d,userBMI,%.2f,vo2MaxMean,%.2f,vo2MaxPrior,%.2f,hrMaxObserved,%.2 f,hrMaxAgePredicted,%.2f,hrMaxAgeAndMedicationPredicted,%.2f,hrMinBodyMetricsPredicted,%.2f,hrOnset,%.2f,hrResting ObservedOneDay,%.2f,hrRestingObservedSevenDays,%.2f,maxMetsMean,%.2f,maxMetsHigh,%.2f,vo2MaxValue,%.2f,vo2MaxValue AdaptiveModel,%.2f,vo2MaxValueOutdoorPedestrianModel,%.2f,vo2MaxValueOOB,%.2f,vo2MaxValueAdaptiveModelOOB,%.2f,vo2 MaxValueOutdoorPedestrianModelOOB,%.2f,efficiency,%.2f,clustersHRMeanPedestrianModel,%.2f,clustersMetsMeanPedestri anModel,%.2f,clustersHRMeanAdaptiveModel,%.2f,clustersMetsMeanAdaptiveModel,%.2f,vo2MaxStDev,%.2f,vo2MaxTrend,%.2f ,vo2MaxTrendSingleEst,%.2f,workoutTypeRatioWalk,%.2f,workoutTypeRatioRun,%.2f,workoutTypeRatioHike,%.2f,lookbackNu mEstimates,%d,lookbackNumEstimatesAfterUpdate,%d,lookbackNumDaysWithEstimate,%d,lookbackEWMAPlusWeightedStDev,%.2f ,numWorkoutsContrToLatestEstimate,%d,pctGPSAvailability,%.2f,pctHeartRateAvailability,%.2f,pctBackgroundEscalation ,%.2f,pctHRMax,%.2f,pctHRMin,%.2f,validGradeMean,%.2f,validGradeStd,%.2f,pctGradeAboveAnalyticsThreshold,%.2f,work outType,%d,sessionType,%d,sessionDuration,%.2f,hrMinSource,%d,vo2MaxEstimationStatus,%d,arbitrationState,%d,limitState,%d",  COERCE_DOUBLE(&v128),  474,  (_DWORD)__p,  *(double *)&v122,  v123,  v124,  *(double *)&v125,  *((double *)&v125 + 1),  *(double *)&v126,  *((double *)&v126 + 1),  *(double *)v127,  *((double *)v127 + 1),  *(double *)&v127[1],  *((double *)&v127[1] + 1));
    __int128 v119 = (uint8_t *)v118;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)",  "%s\n",  v118);
    if (v119 != buf) {
      free(v119);
    }
  }

  int v87 = objc_autoreleasePoolPush();
  __int16 v88 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
  -[ALActivityLog setTimestamp:](v88, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[ALActivityLog setJacksonData:]( v88,  "setJacksonData:",  objc_alloc_init(&OBJC_CLASS___ALCLJacksonData));
  -[ALCLJacksonData setNPairs:]( -[ALActivityLog jacksonData](v88, "jacksonData"),  "setNPairs:",  *(unsigned int *)(a1 + 1572));
  int v89 = -[ALActivityLog jacksonData](v88, "jacksonData");
  *(float *)&double v90 = a3;
  -[ALCLJacksonData setLsest:](v89, "setLsest:", v90);
  int v91 = -[ALActivityLog jacksonData](v88, "jacksonData");
  LODWORD(v92) = -1.0;
  -[ALCLJacksonData setSumest:](v91, "setSumest:", v92);
  -[ALCLJacksonData setFPal:]( -[ALActivityLog jacksonData](v88, "jacksonData"),  "setFPal:",  *(float *)(a1 + 1308));
  objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v88);
  objc_autoreleasePoolPop(v87);
  uint64_t v93 = sub_100F5A080();
  sub_100F5CCBC(v93, a1 + 1336);
  uint64_t v94 = sub_100F5A080();
  sub_100F5C878(v94);
  sub_100C84B30(v95, a1 + 1336);
  if (__p)
  {
    uint64_t v122 = (double *)__p;
    operator delete(__p);
  }

void sub_100C8436C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C843A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1248);
  uint64_t v2 = *(void *)(a1 + 1256);
  if (v1 == v2)
  {
    int v3 = 0;
    double v8 = 0.0;
    double v12 = 0.0;
    double v10 = 0.0;
    double v7 = 0.0;
    double v9 = 0.0;
  }

  else
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    double v6 = *(double *)(a1 + 32);
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    do
    {
      double v12 = *(double *)v1;
      if (*(double *)v1 <= v6)
      {
        double v12 = v11;
      }

      else
      {
        double v13 = *(float *)(v1 + 16);
        if (!v3)
        {
          double v10 = *(double *)v1;
          double v7 = *(float *)(v1 + 16);
        }

        if (fabs(v12 - v6 + -60.0) >= 5.0)
        {
          if (fabs(v12 - v6 + -120.0) < 5.0)
          {
            double v9 = v9 + v13;
            ++v5;
          }
        }

        else
        {
          double v8 = v8 + v13;
          ++v4;
        }

        ++v3;
        double v11 = *(double *)v1;
      }

      v1 += 72LL;
    }

    while (v1 != v2);
    if (v4 > 0) {
      double v8 = v8 / (double)v4;
    }
    if (v5 >= 1) {
      double v9 = v9 / (double)v5;
    }
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  uint64_t v14 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67241217;
    int v27 = v3;
    __int16 v28 = 2050;
    double v29 = v12 - v10;
    __int16 v30 = 2049;
    double v31 = v7;
    __int16 v32 = 2049;
    double v33 = v8;
    __int16 v34 = 2049;
    double v35 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "VO2Max,SamplesPostSession,%{public}d,PostSessionDuration,%{public}f,startingHR,%{private}f,HRAfter60s,%{private}f, HRAfter120s,%{private}f",  buf,  0x30u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    v17[0] = 67241217;
    v17[1] = v3;
    __int16 v18 = 2050;
    double v19 = v12 - v10;
    __int16 v20 = 2049;
    double v21 = v7;
    __int16 v22 = 2049;
    double v23 = v8;
    __int16 v24 = 2049;
    double v25 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "VO2Max,SamplesPostSession,%{public}d,PostSessionDuration,%{public}f,startingHR,%{private}f,HRAfter60s,%{private}f, HRAfter120s,%{private}f",  v17,  48);
    BOOL v16 = (uint8_t *)v15;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVO2MaxEstimator::evaluatePostSessionPeriod() const", "%s\n", v15);
    if (v16 != buf) {
      free(v16);
    }
  }

uint64_t sub_100C846B4(double a1, uint64_t a2, void *a3)
{
  double v14 = 1.79769313e308;
  uint64_t v5 = sub_100D74AD8();
  if (sub_100D754E4(v5, 0, &v14))
  {
    uint64_t result = 0LL;
    uint64_t v7 = a3[1] - *a3;
    if (v7)
    {
      unint64_t v8 = v7 / 144;
      if (v8 <= 1) {
        unint64_t v8 = 1LL;
      }
      double v9 = (double *)(*a3 + 24LL);
      do
      {
        double v10 = *v9;
        v9 += 18;
        if (v10 < v14) {
          uint64_t result = result;
        }
        else {
          uint64_t result = (result + 1);
        }
        --v8;
      }

      while (v8);
    }
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    double v11 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134349056;
      double v18 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "VO2Max,Analytics unexpectedly not able to retrieve a session record for the minimum algorithm version with start Time > %{public}.3f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187AE98);
      }
      int v15 = 134349056;
      double v16 = a1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  16LL,  "VO2Max,Analytics unexpectedly not able to retrieve a session record for the minimum algorithm version with start Time > %{public}.3f",  &v15,  12);
      double v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "int CLVO2MaxEstimator::getLookbackNumEstimatesAfterUpdate(CFAbsoluteTime, const std::vector<VO2MaxOutput> &) const",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

void sub_100C848D4(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    int v16 = 0;
    __int128 v17 = xmmword_1012E4DA0;
    __asm { FMOV            V0.2D, #1.0 }

    __int128 v18 = _Q0;
    double v19 = 0.0;
    do
    {
      uint64_t v9 = v2 - 144;
      sub_1002B31E0((uint64_t)&v16, *(double *)(v2 - 112));
      uint64_t v2 = v9;
    }

    while (v9 != *a2);
    double v10 = 0.0;
    if (v16 < 1)
    {
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = *((void *)&v17 + 1);
      if (v16 != 1)
      {
        double v12 = *(double *)&v18 * *(double *)&v18 - *((double *)&v18 + 1);
        if (v12 > 0.0) {
          double v10 = sqrt(*(double *)&v18 * *(double *)&v18 / v12 * v19);
        }
      }
    }

    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    double v13 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 134283777;
      uint64_t v25 = v11;
      __int16 v26 = 2049;
      double v27 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "VO2Max,weightedAvg,%{private}.3f,std,%{private}.3f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187AE98);
      }
      int v20 = 134283777;
      uint64_t v21 = v11;
      __int16 v22 = 2049;
      double v23 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,weightedAvg,%{private}.3f,std,%{private}.3f",  &v20,  22);
      int v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLVO2MaxEstimator::getLookbackEWMAPlusWeightedStDev(const std::vector<VO2MaxOutput> &) const",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }
  }

void sub_100C84B30(uint64_t a1, uint64_t a2)
{
  *(void *)&double v3 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
  if (v4
    && (objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection",  v3),  "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_10199D3E0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_10199D3E0))
    {
      __int128 v17 = xmmword_101358664;
      *(_OWORD *)__int128 v18 = unk_101358674;
      *(_OWORD *)&v18[16] = xmmword_101358684;
      *(_OWORD *)&v18[28] = *(__int128 *)((char *)&xmmword_101358684 + 12);
      *(_OWORD *)__n128 buf = xmmword_101358644;
      *(_OWORD *)&uint8_t buf[16] = unk_101358654;
      sub_1001B4118(&qword_10199D3C8, buf, 0x17uLL);
      __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D3C8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199D3E0);
    }

    unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10199D400);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_10199D400))
    {
      *(_OWORD *)__n128 buf = xmmword_1013586A0;
      *(_OWORD *)&uint8_t buf[16] = unk_1013586B0;
      sub_100B48D24(&qword_10199D3E8, buf, 8uLL);
      __cxa_atexit((void (*)(void *))sub_100B48DA4, &qword_10199D3E8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199D400);
    }

    unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_10199D420);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_10199D420))
    {
      *(_OWORD *)__n128 buf = xmmword_1013586C0;
      *(_OWORD *)&uint8_t buf[16] = unk_1013586D0;
      __int128 v17 = xmmword_1013586E0;
      *(_OWORD *)__int128 v18 = unk_1013586F0;
      sub_1001B4118(&qword_10199D408, buf, 0x10uLL);
      __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D408, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199D420);
    }

    unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_10199D440);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10199D440))
    {
      __int128 v17 = xmmword_101358720;
      *(_OWORD *)__int128 v18 = unk_101358730;
      *(_OWORD *)&v18[12] = unk_10135873C;
      *(_OWORD *)__n128 buf = xmmword_101358700;
      *(_OWORD *)&uint8_t buf[16] = unk_101358710;
      sub_1001B4118(&qword_10199D428, buf, 0x13uLL);
      __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D428, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199D440);
    }

    unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_10199D460);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_10199D460))
    {
      *(_OWORD *)__n128 buf = xmmword_10135874C;
      *(_OWORD *)&uint8_t buf[16] = unk_10135875C;
      *(void *)&__int128 v17 = 0x422A66664219999ALL;
      sub_1001B4118(&qword_10199D448, buf, 0xAuLL);
      __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D448, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10199D460);
    }

    unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10199D480);
    if ((v10 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_10199D480))
      {
        *(_OWORD *)__n128 buf = xmmword_101358774;
        *(_OWORD *)&_BYTE buf[12] = *(__int128 *)((char *)&xmmword_101358774 + 12);
        sub_100B48D24(&qword_10199D468, buf, 7uLL);
        __cxa_atexit((void (*)(void *))sub_100B48DA4, &qword_10199D468, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_10199D480);
      }
    }

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_100C8506C;
    v14[3] = &unk_101820718;
    _DWORD v14[4] = a2;
    AnalyticsSendEventLazy(@"com.apple.CoreMotion.VO2Max.VO2MaxEstimate", v14);
  }

  else
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    uint64_t v11 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "VO2Max,Not sending analytics, no IHA permission",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187AE98);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "VO2Max,Not sending analytics, no IHA permission",  v15,  2);
      double v13 = (char *)v12;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLVO2MaxEstimator::sendAnalytics(CLVO2MaxStats &)", "%s\n", v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_100C84FFC(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100C8506C(uint64_t a1)
{
  v110[0] = @"age_bin";
  float v2 = *(float *)(*(void *)(a1 + 32) + 4LL);
  int v108 = 0LL;
  uint64_t v109 = 0LL;
  int v107 = 0LL;
  sub_10001B72C( &v107,  (const void *)qword_10199D428,  *(uint64_t *)algn_10199D430,  (*(void *)algn_10199D430 - qword_10199D428) >> 2);
  if (v108 == v107)
  {
    unint64_t v3 = 0LL;
  }

  else
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = (v108 - (_BYTE *)v107) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1LL;
    }
    while (*((float *)v107 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }

  v111[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v3);
  v110[1] = @"gender";
  v111[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  **(unsigned int **)(a1 + 32));
  v110[2] = @"useBetaBlocker";
  v111[2] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 8LL));
  v110[3] = @"userBMI_bin";
  float v5 = *(float *)(*(void *)(a1 + 32) + 12LL);
  __int128 v105 = 0LL;
  uint64_t v106 = 0LL;
  double v104 = 0LL;
  sub_10001B72C( &v104,  (const void *)qword_10199D448,  *(uint64_t *)algn_10199D450,  (*(void *)algn_10199D450 - qword_10199D448) >> 2);
  if (v105 == v104)
  {
    unint64_t v6 = 0LL;
  }

  else
  {
    unint64_t v6 = 0LL;
    unint64_t v7 = (v105 - (_BYTE *)v104) >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1LL;
    }
    while (*((float *)v104 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        unint64_t v6 = v7;
        break;
      }
    }
  }

  v111[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v6);
  v110[4] = @"vo2MaxMean_bin";
  float v8 = *(float *)(*(void *)(a1 + 32) + 16LL);
  __int128 v101 = 0LL;
  int v102 = 0LL;
  uint64_t v103 = 0LL;
  sub_10001B72C( &v101,  (const void *)qword_10199D3C8,  *(uint64_t *)algn_10199D3D0,  (*(void *)algn_10199D3D0 - qword_10199D3C8) >> 2);
  if (v102 == v101)
  {
    unint64_t v9 = 0LL;
  }

  else
  {
    unint64_t v9 = 0LL;
    unint64_t v10 = (v102 - (_BYTE *)v101) >> 2;
    if (v10 <= 1) {
      unint64_t v10 = 1LL;
    }
    while (*((float *)v101 + v9) < v8)
    {
      if (v10 == ++v9)
      {
        unint64_t v9 = v10;
        break;
      }
    }
  }

  v111[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v9);
  v110[5] = @"vo2MaxPrior_bin";
  float v11 = *(float *)(*(void *)(a1 + 32) + 20LL);
  int v98 = 0LL;
  int v99 = 0LL;
  uint64_t v100 = 0LL;
  sub_10001B72C( &v98,  (const void *)qword_10199D3C8,  *(uint64_t *)algn_10199D3D0,  (*(void *)algn_10199D3D0 - qword_10199D3C8) >> 2);
  if (v99 == v98)
  {
    unint64_t v12 = 0LL;
  }

  else
  {
    unint64_t v12 = 0LL;
    unint64_t v13 = (v99 - (_BYTE *)v98) >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1LL;
    }
    while (*((float *)v98 + v12) < v11)
    {
      if (v13 == ++v12)
      {
        unint64_t v12 = v13;
        break;
      }
    }
  }

  v111[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v12);
  v110[6] = @"hrMaxObserved";
  LODWORD(v14) = *(_DWORD *)(*(void *)(a1 + 32) + 24LL);
  v111[6] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v14);
  v110[7] = @"hrMaxAgePredicted";
  LODWORD(v15) = *(_DWORD *)(*(void *)(a1 + 32) + 28LL);
  v111[7] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v15);
  v110[8] = @"hrMaxAgeAndMedicationPredicted";
  LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 32) + 32LL);
  v111[8] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v16);
  v110[9] = @"hrMinBodyMetricsPredicted";
  LODWORD(v17) = *(_DWORD *)(*(void *)(a1 + 32) + 36LL);
  v111[9] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
  v110[10] = @"hrOnset";
  LODWORD(v18) = *(_DWORD *)(*(void *)(a1 + 32) + 40LL);
  v111[10] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v18);
  v110[11] = @"hrRestingObservedOneDay";
  LODWORD(v19) = *(_DWORD *)(*(void *)(a1 + 32) + 44LL);
  v111[11] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v19);
  v110[12] = @"hrRestingObservedSevenDays";
  LODWORD(v2sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(_DWORD *)(*(void *)(a1 + 32) + 48LL);
  v111[12] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v20);
  v110[13] = @"maxMetsMean";
  LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 32) + 52LL);
  v111[13] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v21);
  v110[14] = @"maxMetsHigh";
  LODWORD(v22) = *(_DWORD *)(*(void *)(a1 + 32) + 56LL);
  v111[14] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v22);
  v110[15] = @"vo2MaxValue";
  LODWORD(v23) = *(_DWORD *)(*(void *)(a1 + 32) + 60LL);
  v111[15] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v23);
  v110[16] = @"vo2MaxValueAdaptiveModel";
  LODWORD(v24) = *(_DWORD *)(*(void *)(a1 + 32) + 68LL);
  v111[16] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v24);
  v110[17] = @"vo2MaxValueOutdoorPedestrianModel";
  LODWORD(v25) = *(_DWORD *)(*(void *)(a1 + 32) + 64LL);
  v111[17] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v25);
  v110[18] = @"vo2MaxValueOOB";
  LODWORD(v26) = *(_DWORD *)(*(void *)(a1 + 32) + 72LL);
  v111[18] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26);
  v110[19] = @"vo2MaxValueAdaptiveModelOOB";
  LODWORD(v27) = *(_DWORD *)(*(void *)(a1 + 32) + 80LL);
  v111[19] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v27);
  v110[20] = @"vo2MaxValueOutdoorPedestrianModelOOB";
  LODWORD(v28) = *(_DWORD *)(*(void *)(a1 + 32) + 76LL);
  v111[20] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v28);
  v110[21] = @"efficiency";
  LODWORD(v29) = *(_DWORD *)(*(void *)(a1 + 32) + 84LL);
  v111[21] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v29);
  v110[22] = @"clustersHRMeanAdaptiveModel";
  LODWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(_DWORD *)(*(void *)(a1 + 32) + 96LL);
  v111[22] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v30);
  v110[23] = @"clustersMetsMeanAdaptiveModel";
  LODWORD(v31) = *(_DWORD *)(*(void *)(a1 + 32) + 100LL);
  v111[23] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v31);
  _BYTE v110[24] = @"clustersHRMeanPedestrianModel";
  LODWORD(v32) = *(_DWORD *)(*(void *)(a1 + 32) + 88LL);
  v111[24] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v32);
  v110[25] = @"clustersMetsMeanPedestrianModel";
  LODWORD(v33) = *(_DWORD *)(*(void *)(a1 + 32) + 92LL);
  v111[25] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v33);
  v110[26] = @"vo2MaxStdDev";
  LODWORD(v34) = *(_DWORD *)(*(void *)(a1 + 32) + 104LL);
  v111[26] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v34);
  v110[27] = @"vo2MaxTrend";
  LODWORD(v35) = *(_DWORD *)(*(void *)(a1 + 32) + 108LL);
  v111[27] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v35);
  v110[28] = @"vo2MaxPriorDelta";
  *(float *)&double v36 = *(float *)(*(void *)(a1 + 32) + 60LL) - *(float *)(*(void *)(a1 + 32) + 20LL);
  v111[28] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v36);
  v110[29] = @"vo2MaxTrendSingleEst";
  LODWORD(v37) = *(_DWORD *)(*(void *)(a1 + 32) + 112LL);
  v111[29] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v37);
  v110[30] = @"workoutTypeRatioWalk";
  LODWORD(v38) = *(_DWORD *)(*(void *)(a1 + 32) + 116LL);
  v111[30] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v38);
  v110[31] = @"workoutTypeRatioRun";
  LODWORD(v39) = *(_DWORD *)(*(void *)(a1 + 32) + 120LL);
  v111[31] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v39);
  v110[32] = @"workoutTypeRatioHike";
  LODWORD(v4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(_DWORD *)(*(void *)(a1 + 32) + 124LL);
  v111[32] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v40);
  v110[33] = @"lookbackNumEstimates_bin";
  int v41 = *(_DWORD *)(*(void *)(a1 + 32) + 128LL);
  int v96 = 0LL;
  uint64_t v97 = 0LL;
  uint64_t v95 = 0LL;
  sub_10001B72C( &v95,  (const void *)qword_10199D3E8,  *(uint64_t *)algn_10199D3F0,  (*(void *)algn_10199D3F0 - qword_10199D3E8) >> 2);
  if (v96 == v95)
  {
    unint64_t v42 = 0LL;
  }

  else
  {
    unint64_t v42 = 0LL;
    unint64_t v43 = (v96 - (_BYTE *)v95) >> 2;
    if (v43 <= 1) {
      unint64_t v43 = 1LL;
    }
    while (*((_DWORD *)v95 + v42) < v41)
    {
      if (v43 == ++v42)
      {
        unint64_t v42 = v43;
        break;
      }
    }
  }

  v111[33] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v42);
  v110[34] = @"lookbackNumEstimatesAfterUpdate_bin";
  int v44 = *(_DWORD *)(*(void *)(a1 + 32) + 132LL);
  uint64_t v93 = 0LL;
  uint64_t v94 = 0LL;
  double v92 = 0LL;
  sub_10001B72C( &v92,  (const void *)qword_10199D3E8,  *(uint64_t *)algn_10199D3F0,  (*(void *)algn_10199D3F0 - qword_10199D3E8) >> 2);
  if (v93 == v92)
  {
    unint64_t v45 = 0LL;
  }

  else
  {
    unint64_t v45 = 0LL;
    unint64_t v46 = (v93 - (_BYTE *)v92) >> 2;
    if (v46 <= 1) {
      unint64_t v46 = 1LL;
    }
    while (*((_DWORD *)v92 + v45) < v44)
    {
      if (v46 == ++v45)
      {
        unint64_t v45 = v46;
        break;
      }
    }
  }

  v111[34] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v45);
  v110[35] = @"lookbackNumDaysWithEstimate_bin";
  int v47 = *(_DWORD *)(*(void *)(a1 + 32) + 136LL);
  double v90 = 0LL;
  uint64_t v91 = 0LL;
  int v89 = 0LL;
  sub_10001B72C( &v89,  (const void *)qword_10199D3E8,  *(uint64_t *)algn_10199D3F0,  (*(void *)algn_10199D3F0 - qword_10199D3E8) >> 2);
  if (v90 == v89)
  {
    unint64_t v48 = 0LL;
  }

  else
  {
    unint64_t v48 = 0LL;
    unint64_t v49 = (v90 - (_BYTE *)v89) >> 2;
    if (v49 <= 1) {
      unint64_t v49 = 1LL;
    }
    while (*((_DWORD *)v89 + v48) < v47)
    {
      if (v49 == ++v48)
      {
        unint64_t v48 = v49;
        break;
      }
    }
  }

  v111[35] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v48);
  v110[36] = @"lookbackEWMAPlusWeightedStDev_bin";
  float v50 = *(float *)(*(void *)(a1 + 32) + 144LL);
  int v87 = 0LL;
  uint64_t v88 = 0LL;
  int v86 = 0LL;
  sub_10001B72C( &v86,  (const void *)qword_10199D3C8,  *(uint64_t *)algn_10199D3D0,  (*(void *)algn_10199D3D0 - qword_10199D3C8) >> 2);
  if (v87 == v86)
  {
    unint64_t v51 = 0LL;
  }

  else
  {
    unint64_t v51 = 0LL;
    unint64_t v52 = (v87 - (_BYTE *)v86) >> 2;
    if (v52 <= 1) {
      unint64_t v52 = 1LL;
    }
    while (*((float *)v86 + v51) < v50)
    {
      if (v52 == ++v51)
      {
        unint64_t v51 = v52;
        break;
      }
    }
  }

  v111[36] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v51);
  v110[37] = @"numWorkoutsContrToLatestEstimate_bin";
  int v53 = *(_DWORD *)(*(void *)(a1 + 32) + 140LL);
  int v84 = 0LL;
  uint64_t v85 = 0LL;
  int v83 = 0LL;
  sub_10001B72C( &v83,  (const void *)qword_10199D468,  *(uint64_t *)algn_10199D470,  (*(void *)algn_10199D470 - qword_10199D468) >> 2);
  if (v84 == v83)
  {
    unint64_t v54 = 0LL;
  }

  else
  {
    unint64_t v54 = 0LL;
    unint64_t v55 = (v84 - (_BYTE *)v83) >> 2;
    if (v55 <= 1) {
      unint64_t v55 = 1LL;
    }
    while (*((_DWORD *)v83 + v54) < v53)
    {
      if (v55 == ++v54)
      {
        unint64_t v54 = v55;
        break;
      }
    }
  }

  v111[37] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v54);
  v110[38] = @"vo2MaxValue_bin";
  float v56 = *(float *)(*(void *)(a1 + 32) + 60LL);
  int v81 = 0LL;
  uint64_t v82 = 0LL;
  int v80 = 0LL;
  sub_10001B72C( &v80,  (const void *)qword_10199D3C8,  *(uint64_t *)algn_10199D3D0,  (*(void *)algn_10199D3D0 - qword_10199D3C8) >> 2);
  if (v81 == v80)
  {
    unint64_t v57 = 0LL;
  }

  else
  {
    unint64_t v57 = 0LL;
    unint64_t v58 = (v81 - (_BYTE *)v80) >> 2;
    if (v58 <= 1) {
      unint64_t v58 = 1LL;
    }
    while (*((float *)v80 + v57) < v56)
    {
      if (v58 == ++v57)
      {
        unint64_t v57 = v58;
        break;
      }
    }
  }

  v111[38] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v57);
  v110[39] = @"pctGPSAvailability";
  LODWORD(v59) = *(_DWORD *)(*(void *)(a1 + 32) + 148LL);
  v111[39] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v59);
  v110[40] = @"pctHeartRateAvailability";
  LODWORD(v6sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(_DWORD *)(*(void *)(a1 + 32) + 152LL);
  v111[40] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v60);
  v110[41] = @"pctBackgroundEscalation";
  LODWORD(v61) = *(_DWORD *)(*(void *)(a1 + 32) + 156LL);
  v111[41] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v61);
  v110[42] = @"pctHRMax";
  LODWORD(v62) = *(_DWORD *)(*(void *)(a1 + 32) + 160LL);
  v111[42] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v62);
  v110[43] = @"pctHRMin";
  LODWORD(v63) = *(_DWORD *)(*(void *)(a1 + 32) + 164LL);
  v111[43] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v63);
  v110[44] = @"validGradeMean";
  LODWORD(v64) = *(_DWORD *)(*(void *)(a1 + 32) + 168LL);
  v111[44] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v64);
  v110[45] = @"validGradeStd";
  LODWORD(v65) = *(_DWORD *)(*(void *)(a1 + 32) + 172LL);
  v111[45] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v65);
  v110[46] = @"pctGradeAboveAnalyticsThreshold";
  LODWORD(v66) = *(_DWORD *)(*(void *)(a1 + 32) + 176LL);
  v111[46] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v66);
  v110[47] = @"pctGPSAvailability_bin";
  LODWORD(v67) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 148LL) / 10.0);
  v111[47] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v67);
  v110[48] = @"pctHeartRateAvailability_bin";
  LODWORD(v68) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 152LL) / 10.0);
  v111[48] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v68);
  v110[49] = @"pctBackgroundEscalation_bin";
  LODWORD(v69) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 156LL) / 10.0);
  v111[49] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v69);
  v110[50] = @"pctHRMax_bin";
  LODWORD(v7sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 160LL) / 10.0);
  v111[50] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v70);
  v110[51] = @"pctHRMin_bin";
  LODWORD(v71) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 164LL) / 10.0);
  v111[51] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v71);
  v110[52] = @"workoutType";
  v111[52] = +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(*(void *)(a1 + 32) + 184LL));
  v110[53] = @"sessionType";
  v111[53] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 200LL));
  v110[54] = @"sessionDuration_bin";
  float v72 = *(float *)(*(void *)(a1 + 32) + 180LL);
  int v78 = 0LL;
  uint64_t v79 = 0LL;
  std::stringbuf::string_type __p = 0LL;
  sub_10001B72C( &__p,  (const void *)qword_10199D408,  *(uint64_t *)algn_10199D410,  (*(void *)algn_10199D410 - qword_10199D408) >> 2);
  if (v78 == __p)
  {
    unint64_t v73 = 0LL;
  }

  else
  {
    unint64_t v73 = 0LL;
    unint64_t v74 = (v78 - (_BYTE *)__p) >> 2;
    if (v74 <= 1) {
      unint64_t v74 = 1LL;
    }
    while (*((float *)__p + v73) < v72)
    {
      if (v74 == ++v73)
      {
        unint64_t v73 = v74;
        break;
      }
    }
  }

  v111[54] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v73);
  v110[55] = @"hrMinSource";
  v111[55] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 192LL));
  v110[56] = @"vo2MaxEstimationStatus";
  v111[56] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 196LL));
  v110[57] = @"arbitrationDecision";
  v111[57] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 204LL));
  v110[58] = @"cielFloorState";
  v111[58] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(a1 + 32) + 208LL));
  v110[59] = @"estimateWroteToDb";
  v111[59] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 212LL));
  int v75 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v111,  v110,  60LL);
  if (__p)
  {
    int v78 = __p;
    operator delete(__p);
  }

  if (v80)
  {
    int v81 = v80;
    operator delete(v80);
  }

  if (v83)
  {
    int v84 = v83;
    operator delete(v83);
  }

  if (v86)
  {
    int v87 = v86;
    operator delete(v86);
  }

  if (v89)
  {
    double v90 = v89;
    operator delete(v89);
  }

  if (v92)
  {
    uint64_t v93 = v92;
    operator delete(v92);
  }

  if (v95)
  {
    int v96 = v95;
    operator delete(v95);
  }

  if (v98)
  {
    int v99 = v98;
    operator delete(v98);
  }

  if (v101)
  {
    int v102 = v101;
    operator delete(v101);
  }

  if (v104)
  {
    __int128 v105 = v104;
    operator delete(v104);
  }

  if (v107)
  {
    int v108 = v107;
    operator delete(v107);
  }

  return v75;
}

void sub_100C85DB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40)
{
}

void sub_100C85ECC(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100C85EF8(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_100C866C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10049108C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100C87304(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t *sub_100C87330(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  float v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        float v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        float v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      float v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    float v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    _DWORD v10[4] = *a3;
    v10[5] = a3[1];
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t sub_100C873F0()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199D488, (void *)&_mh_execute_header);
}

__n128 sub_100C87434(uint64_t a1, __int128 *a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[2];
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v3;
  *(_OWORD *)(a1 + 24) = v2;
  __asm { FMOV            V0.2D, #-1.0 }

  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_100C87464(void **a1, __int128 *a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555LL) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      double v14 = (char *)sub_10000701C(v4, v13);
    }
    else {
      double v14 = 0LL;
    }
    double v15 = &v14[24 * v10];
    double v16 = &v14[24 * v13];
    __int128 v17 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)double v15 = v17;
    unint64_t v9 = v15 + 24;
    double v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        __int128 v20 = *(_OWORD *)(v18 - 24);
        *((void *)v15 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }

      while (v18 != v19);
      double v18 = (char *)*a1;
    }

    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    unint64_t v9 = (char *)(v7 + 24);
  }

  a1[1] = v9;
  double v21 = (double *)*a1;
  if (*a1 != v9)
  {
    double v22 = *((double *)v9 - 3);
    while (vabdd_f64(*v21, v22) <= 88.76)
    {
      v21 += 3;
    }

    if (v21 != (double *)v9)
    {
      double v23 = (__int128 *)(v21 + 3);
      if (v21 + 3 != (double *)v9)
      {
        do
        {
          if (vabdd_f64(*(double *)v23, v22) <= 88.76)
          {
            __int128 v24 = *v23;
            void v21[2] = *((double *)v23 + 2);
            *(_OWORD *)double v21 = v24;
            v21 += 3;
          }

          double v23 = (__int128 *)((char *)v23 + 24);
        }

        while (v23 != (__int128 *)v9);
        unint64_t v9 = (char *)a1[1];
      }
    }
  }

void sub_100C87634(uint64_t a1)
{
  __int128 v3 = *(double **)a1;
  __int128 v2 = *(double **)(a1 + 8);
  double v4 = *(v2 - 3);
  double v5 = **(double **)a1;
  if (vabdd_f64(v4 + 2.536, v5) >= 58.0744)
  {
    int v6 = *(_DWORD *)(a1 + 64);
    if (v3 == v2)
    {
      unsigned int v7 = 0;
      double v8 = 0.0;
    }

    else
    {
      unsigned int v7 = 0;
      double v8 = 0.0;
      do
      {
        unint64_t v9 = (unsigned int *)(v3 + 1);
        if (v6) {
          unint64_t v9 = (unsigned int *)v3 + 3;
        }
        unsigned int v10 = *v9;
        if (v10 >= 0xC) {
          unsigned int v10 = 12;
        }
        v7 += v10;
        if (v3[2] >= 2.08999991) {
          double v8 = v8 + 2.536;
        }
        v3 += 3;
      }

      while (v3 != v2);
    }

    if (v6) {
      unsigned int v11 = 19;
    }
    else {
      unsigned int v11 = 49;
    }
    BOOL v12 = v8 >= 58.0744 && v6 == 0;
    if (v12 || v7 > v11)
    {
      *(double *)(a1 + 88) = v5;
      *(double *)(a1 + 96) = v4;
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187AEF8);
      }
      unint64_t v13 = (os_log_s *)qword_1019344D8;
      if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 88);
        uint64_t v15 = *(void *)(a1 + 96);
        *(_DWORD *)__n128 buf = 134350336;
        uint64_t v32 = v14;
        __int16 v33 = 2050;
        uint64_t v34 = v15;
        __int16 v35 = 2050;
        double v36 = v8;
        __int16 v37 = 1026;
        unsigned int v38 = v7;
        __int16 v39 = 1026;
        BOOL v40 = v12;
        __int16 v41 = 1026;
        BOOL v42 = v7 > v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "StandPlus,minuteAwarded,startTime,%{public}f,endTime,%{public}f,totalMetTime,%{public}f,totalSteps,%{public}d, metConditionMet,%{public}d,stepConditionMet,%{public}d",  buf,  0x32u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344D0 != -1) {
          dispatch_once(&qword_1019344D0, &stru_10187AEF8);
        }
        uint64_t v16 = *(void *)(a1 + 88);
        uint64_t v17 = *(void *)(a1 + 96);
        int v19 = 134350336;
        uint64_t v20 = v16;
        __int16 v21 = 2050;
        uint64_t v22 = v17;
        __int16 v23 = 2050;
        double v24 = v8;
        __int16 v25 = 1026;
        unsigned int v26 = v7;
        __int16 v27 = 1026;
        BOOL v28 = v12;
        __int16 v29 = 1026;
        BOOL v30 = v7 > v11;
        double v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "StandPlus,minuteAwarded,startTime,%{public}f,endTime,%{public}f,totalMetTime,%{public}f,totalSte ps,%{public}d,metConditionMet,%{public}d,stepConditionMet,%{public}d",  &v19,  50);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLStandPlusMinute CLStandPlusMinuteCalculator::calculateStandPlusMinute()",  "%s\n",  v18);
      }

      *(void *)(a1 + 8) = *(void *)a1;
    }
  }

__n128 sub_100C87934(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) != *(_DWORD *)(a1 + 64))
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AEF8);
    }
    double v4 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 64);
      int v6 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)__n128 buf = 67240448;
      int v17 = v5;
      __int16 v18 = 1026;
      int v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "StandPlus,clearing buffers from body metrics,old,%{public}d,new,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10187AEF8);
      }
      int v10 = *(_DWORD *)(a1 + 64);
      int v11 = *(_DWORD *)(a2 + 40);
      v13[0] = 67240448;
      v13[1] = v10;
      __int16 v14 = 1026;
      int v15 = v11;
      BOOL v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "StandPlus,clearing buffers from body metrics,old,%{public}d,new,%{public}d",  v13,  14);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStandPlusMinuteCalculator::feedBodyMetrics(const CLBodyMetrics &)",  "%s\n",  v12);
    }

    __n128 result = *(__n128 *)a2;
    __int128 v8 = *(_OWORD *)(a2 + 16);
    __int128 v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    *(__n128 *)(a1 + 24) = result;
    *(void *)(a1 + 8) = *(void *)a1;
  }

  return result;
}

void sub_100C87B40(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100C87B6C()
{
  if ((sub_1004F97F4() & 4) != 0)
  {
    __int128 v3 = operator new(0x40uLL);
    sub_100C87D70((uint64_t)v3);
    qword_1019A2048 = (uint64_t)v3;
  }

  else
  {
    if (qword_101934540 != -1) {
      dispatch_once(&qword_101934540, &stru_10187AF90);
    }
    unsigned __int8 v0 = (os_log_s *)qword_101934548;
    if (os_log_type_enabled((os_log_t)qword_101934548, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "#Warning Gesture service is not available on this platform",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934540 != -1) {
        dispatch_once(&qword_101934540, &stru_10187AF90);
      }
      v4[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934548,  0LL,  "#Warning Gesture service is not available on this platform",  v4,  2);
      __int128 v2 = (uint8_t *)v1;
      sub_10029211C("Generic", 1LL, 0, 2LL, "static void CLGestureService::create()", "%s\n", v1);
      if (v2 != buf) {
        free(v2);
      }
    }
  }

void sub_100C87D10(_Unwind_Exception *a1)
{
}

uint64_t sub_100C87D2C()
{
  if (qword_10199D4A0 != -1) {
    dispatch_once(&qword_10199D4A0, &stru_10187AF18);
  }
  return qword_1019A2048;
}

void sub_100C87D70(uint64_t a1)
{
  __int128 v2 = (void *)sub_1006DC9EC(a1, (uint64_t)"CLGestureService", 1);
  *__int128 v2 = off_10187AF48;
  *(void *)((char *)v2 + 44) = 0LL;
  *(void *)((char *)v2 + 36) = 0LL;
  *(void *)((char *)v2 + 49) = 0LL;
  if ((sub_1004F97F4() & 4) != 0)
  {
    uint64_t v3 = sub_1006E27E8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100C87E70;
    v4[3] = &unk_10181D3D0;
    void v4[4] = a1;
    sub_1006E28B8(v3, (uint64_t)v4);
    *(_BYTE *)(a1 + 56) = -[NSString isEqualToString:]( -[NSProcessInfo processName]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "processName"),  "isEqualToString:",  @"SurfBoard");
  }

  else
  {
    sub_1012689C8();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLGestureService.mm",  62,  "CLGestureService");
    __break(1u);
  }

void sub_100C87E54(_Unwind_Exception *a1)
{
}

uint64_t sub_100C87E70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  __int128 v2 = (uint64_t *)sub_100FB9890();
  uint64_t v7 = 0x30000FF0CLL;
  char v8 = 0;
  sub_10121B774(v2, (uint64_t)&v7, (uint64_t *)&v9);
  sub_10005F550(v1 + 40, &v9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    double v4 = (unint64_t *)(*((void *)&v9 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  sub_100719D78(*(uint64_t **)(v1 + 40), (uint64_t)sub_100C87F44, v1);
  sub_10071A408(*(void *)(v1 + 40), (uint64_t)sub_100C88110, v1);
  sub_100719ECC(*(void *)(v1 + 40), (uint64_t)sub_100C88110, v1);
  return sub_100719E00(*(void *)(v1 + 40), (uint64_t)sub_100C88110, v1);
}

void sub_100C87F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  IOHIDEventGetVendorDefinedData(a4, &v13, &v12);
  if (v13) {
    BOOL v6 = v12 <= 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187AFB0);
    }
    uint64_t v7 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187AFB0);
      }
      v11[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "Empty payload",  v11,  2);
      __int128 v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLGestureService::onGestureServiceIohidEvent(void *, void *, void *, IOHIDEventRef)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    sub_101171D38();
    uint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
    sub_100C883F0(a1, v13, v12, TimeStamp);
  }

void *sub_100C88114(void *a1)
{
  *a1 = off_10187AF48;
  uint64_t v2 = (uint64_t)(a1 + 5);
  sub_1000F0D38(a1 + 5);
  sub_10000AE14(v2);
  return sub_1006DCAA8(a1);
}

void sub_100C88158(void *a1)
{
  uint64_t v1 = sub_100C88114(a1);
  operator delete(v1);
}

void sub_100C8816C()
{
  if (qword_101934540 != -1) {
    dispatch_once(&qword_101934540, &stru_10187AF90);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934548;
  if (os_log_type_enabled((os_log_t)qword_101934548, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Close hid driver interface", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934540 != -1) {
      dispatch_once(&qword_101934540, &stru_10187AF90);
    }
    v3[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934548,  1LL,  "Close hid driver interface",  v3,  2);
    uint64_t v2 = (uint8_t *)v1;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGestureService::closeHidDriverInterface()", "%s\n", v1);
    if (v2 != buf) {
      free(v2);
    }
  }

void sub_100C882F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 36);
  *(_DWORD *)(v1 + 36) = v2 + 1;
  if (!v2)
  {
    if (sub_100719C6C(*(void *)(v1 + 40))) {
      sub_100C8816C();
    }
  }

void sub_100C88328(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 36) - 1;
  *(_DWORD *)(v1 + 36) = v2;
  if (!v2)
  {
    if (sub_100719C6C(*(void *)(v1 + 40))) {
      sub_100C8816C();
    }
  }

void sub_100C88360(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    sub_101268B48();
  }
  if (a3)
  {
    uint64_t v4 = sub_1006E27E8();
    v6[0] = _NSConcreteStackBlock;
    unint64_t v5 = sub_100C882F0;
  }

  else
  {
    uint64_t v4 = sub_1006E27E8();
    v6[0] = _NSConcreteStackBlock;
    unint64_t v5 = sub_100C88328;
  }

  v6[1] = 3221225472LL;
  v6[2] = v5;
  void v6[3] = &unk_10181D3D0;
  v6[4] = a1;
  sub_1006E28B8(v4, (uint64_t)v6);
}

void sub_100C883F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v18 = a4;
  int v19 = __dst;
  if (__dst[0] == 255)
  {
    uint64_t v10 = (*(uint64_t (**)(void, const __CFString *))(**(void **)(a1 + 40) + 24LL))( *(void *)(a1 + 40),  @"ServiceRecord");
    if (qword_101934690 != -1) {
      dispatch_once(&qword_101934690, &stru_10187AFD0);
    }
    int v11 = (os_log_s *)qword_101934698;
    if (os_log_type_enabled((os_log_t)qword_101934698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68158210;
      *(_DWORD *)unsigned int v26 = a3;
      *(_WORD *)&v26[4] = 2098;
      *(void *)&v26[6] = a2;
      __int16 v27 = 2114;
      uint64_t v28 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Undecodable data %{public}.*P\nIOHIO service record %{public}@",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934690 != -1) {
        dispatch_once(&qword_101934690, &stru_10187AFD0);
      }
      int v21 = 68158210;
      *(_DWORD *)uint64_t v22 = a3;
      *(_WORD *)&v22[4] = 2098;
      *(void *)&v22[6] = a2;
      __int16 v23 = 2114;
      uint64_t v24 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934698,  17LL,  "Undecodable data %{public}.*P\nIOHIO service record %{public}@",  &v21,  28,  v18,  v19);
      int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGestureService::onGestureService(const uint8_t *, size_t, uint64_t)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

  else
  {
    if (qword_101934540 != -1) {
      dispatch_once(&qword_101934540, &stru_10187AF90);
    }
    char v8 = (os_log_s *)qword_101934548;
    if (os_log_type_enabled((os_log_t)qword_101934548, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = sub_1006DD950(a1, 0);
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)unsigned int v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "numberOfSpectators,%zi", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934540 != -1) {
        dispatch_once(&qword_101934540, &stru_10187AF90);
      }
      uint64_t v12 = qword_101934548;
      uint64_t v13 = sub_1006DD950(a1, 0);
      int v21 = 134217984;
      *(void *)uint64_t v22 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  2LL,  "numberOfSpectators,%zi",  (size_t)&v21);
      int v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGestureService::onGestureService(const uint8_t *, size_t, uint64_t)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    sub_1006DD65C(a1, 0LL, (uint64_t)&v18, 16LL);
  }

void sub_100C88790(id a1)
{
  qword_101934548 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WakeGesture");
}

void sub_100C887BC(id a1)
{
  qword_1019344C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void sub_100C887E8(id a1)
{
  qword_101934698 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Oversize");
}

BOOL sub_100C88814()
{
  return os_log_type_enabled((os_log_t)qword_101934548, OS_LOG_TYPE_FAULT);
}

BOOL sub_100C88828()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 1352), OS_LOG_TYPE_INFO);
}

BOOL sub_100C88838()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 1352));
}

void sub_100C888E8(id a1)
{
  qword_10199D4A8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CMHealthColdStorageServiceSilo");
}

void sub_100C8899C(id a1)
{
}

void sub_100C88D20(_Unwind_Exception *a1)
{
}

id sub_100C88D3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onDataProtectionNotification:a2 data:a3];
}

id sub_100C88D4C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessTrackingNotification:a2 data:a3];
}

void sub_100C89858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C89994( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C89B4C(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1019347B0 != -1) {
    dispatch_once(&qword_1019347B0, &stru_10187B0E0);
  }
  uint64_t v4 = (os_log_s *)qword_1019347B8;
  if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "HealthColdStorage: Sync timer fired (%{public}ld)",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    uint64_t v7 = qword_1019347B8;
    int v15 = 134349056;
    xpc_activity_state_t v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  1LL,  "HealthColdStorage: Sync timer fired (%{public}ld)",  &v15,  12);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMHealthColdStorageService setupSyncActivity]_block_invoke", "%s\n", v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  [*(id *)(a1 + 32) onSyncActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    unint64_t v5 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)__n128 buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10187B0E0);
      }
      uint64_t v10 = qword_1019347B8;
      xpc_activity_state_t v11 = xpc_activity_get_state(a2);
      int v15 = 134349056;
      xpc_activity_state_t v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  17LL,  "Failed to mark activity as Continue. Current state is %{public}ld",  &v15,  v14);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CMHealthColdStorageService setupSyncActivity]_block_invoke", "%s\n", v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_100C8A1C8(uint64_t a1, int a2)
{
  if (a2 == 103)
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    unint64_t v5 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 136315138;
      int v19 = "com.apple.locationd.Motion.ColdStorageSync";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Service] Unable to validate one or more table format, did not perform sync (%s)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10187B0E0);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  1LL,  "[Service] Unable to validate one or more table format, did not perform sync (%s)",  &v14);
      goto LABEL_27;
    }
  }

  else if (a2 == 109)
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    uint64_t v3 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 136315138;
      int v19 = "com.apple.locationd.Motion.ColdStorageSync";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[Service] Data unavailable, did not perform sync (%s)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10187B0E0);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  1LL,  "[Service] Data unavailable, did not perform sync (%s)",  &v14);
LABEL_27:
      char v8 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMHealthColdStorageService onSyncActivity:]_block_invoke", "%s\n", v4);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) != 3
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    xpc_activity_state_t v6 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)__n128 buf = 136315394;
      int v19 = "com.apple.locationd.Motion.ColdStorageSync";
      __int16 v20 = 2050;
      xpc_activity_state_t v21 = state;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "[Service] Failed to mark (%s) activity as done. Current state is %{public}ld",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10187B0E0);
      }
      uint64_t v9 = qword_1019347B8;
      xpc_activity_state_t v10 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      int v14 = 136315394;
      int v15 = "com.apple.locationd.Motion.ColdStorageSync";
      __int16 v16 = 2050;
      xpc_activity_state_t v17 = v10;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  17LL,  "[Service] Failed to mark (%s) activity as done. Current state is %{public}ld",  &v14,  v13);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CMHealthColdStorageService onSyncActivity:]_block_invoke", "%s\n", v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

void sub_100C8A848(_Unwind_Exception *a1)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C8A8A4(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C8A920;
  void v5[3] = &unk_10187B038;
  __int128 v6 = v2;
  uint64_t result = sub_100BE5F00(v3, (uint64_t)v5);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = result;
  return result;
}

id sub_100C8A920(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkDeferral:*(void *)(a1 + 40)];
}

void sub_100C8A92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(dispatch_object_s **)(a2 + 56);
  *(void *)(a1 + 56) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(dispatch_group_s **)(a1 + 56);
    if (v4) {
      dispatch_group_enter(v4);
    }
  }

void sub_100C8A96C(uint64_t a1)
{
  __int128 v2 = *(dispatch_group_s **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(dispatch_object_s **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }

dispatch_object_t *sub_100C8A9A8(dispatch_object_t *a1)
{
  __int128 v2 = (dispatch_group_s *)*a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1) {
      dispatch_release(*a1);
    }
  }

  return a1;
}

uint64_t sub_100C8A9E0(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 32) + 6sub_100C74D00(v1, 0) = [*(id *)(a1 + 32) getTotalDBSizeInMB];
  [*(id *)(a1 + 32) sendAnalytics];
  [*(id *)(a1 + 32) resetAnalytics];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100C8B1F0(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1019347B0 != -1) {
    dispatch_once(&qword_1019347B0, &stru_10187B0E0);
  }
  uint64_t v4 = (os_log_s *)qword_1019347B8;
  if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "HealthColdStorage: Db Vacuum timer fired (%{public}ld)",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    uint64_t v7 = qword_1019347B8;
    int v15 = 134349056;
    xpc_activity_state_t v16 = xpc_activity_get_state(a2);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  0LL,  "HealthColdStorage: Db Vacuum timer fired (%{public}ld)",  &v15,  12);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CMHealthColdStorageService setupDbCleanupActivity]_block_invoke",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  [*(id *)(a1 + 32) onDbCleanupActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4LL))
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10187B0E0);
    }
    unint64_t v5 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)__n128 buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Failed to mark activity as Continue. Current state is %{public}ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10187B0E0);
      }
      uint64_t v10 = qword_1019347B8;
      xpc_activity_state_t v11 = xpc_activity_get_state(a2);
      int v15 = 134349056;
      xpc_activity_state_t v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  17LL,  "Failed to mark activity as Continue. Current state is %{public}ld",  &v15,  v14);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CMHealthColdStorageService setupDbCleanupActivity]_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

id sub_100C8BCCC(id *a1, void *a2, uint64_t a3)
{
  if ([a2 hasPrefix:@"NumDaily"])
  {
    xpc_activity_state_t v6 = a1 + 4;
  }

  else
  {
    unsigned int v7 = [a2 hasPrefix:@"NumPurged"];
    xpc_activity_state_t v6 = a1 + 6;
    if (v7) {
      xpc_activity_state_t v6 = a1 + 5;
    }
  }

  return [*v6 setObject:a3 forKey:a2];
}

void sub_100C8CE30(_Unwind_Exception *a1)
{
}

uint64_t sub_100C8D164(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100C8D524( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C8D5FC(id a1)
{
  qword_1019347B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_100C8D628(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_100BE5B70(v3);
    operator delete(v4);
  }

void sub_100C8D7EC(_Unwind_Exception *a1)
{
}

void sub_100C8D87C(_Unwind_Exception *a1)
{
}

void sub_100C8D974(id a1)
{
  qword_10199D508 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLPressureBiasSilo");
}

void *sub_100C8DA28(void *a1)
{
  __int128 v2 = operator new(0x78uLL);
  sub_100C8DB5C((uint64_t)v2, a1);
  return v2;
}

void sub_100C8DA5C(_Unwind_Exception *a1)
{
}

uint64_t sub_100C8DB5C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_100C8DCC0(a1, "CLPressureBias", a2);
  void *v3 = off_10187B130;
  v3[14] = 0LL;
  if ((sub_1004F97F4() & 0x400000000000LL) != 0)
  {
    sub_100C8DD5C(a1);
  }

  else if (sub_1004FC7C4())
  {
    sub_100936B60((uint64_t)sub_100C8DDF4, a1, *(void **)(a1 + 32), &v11);
    uint64_t v4 = v11;
    *(void *)&__int128 v11 = 0LL;
    uint64_t v5 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      uint64_t v6 = v11;
      *(void *)&__int128 v11 = 0LL;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      }
    }

    [*(id *)(*(void *)(a1 + 112) + 16) register:*(void *)(*(void *)(a1 + 112) + 8) forNotification:0 registrationInfo:0];
  }

  else
  {
    LOBYTE(v11) = 14;
    *(void *)((char *)&v11 + 1) = 0LL;
    *((void *)&v11 + 1) = 0x7F7FFFFF00000000LL;
    unint64_t v12 = sub_100C8DFCC(a1);
    int v13 = v7;
    char v14 = v8;
    int v10 = 0;
    (*(void (**)(uint64_t, int *, __int128 *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v10,  &v11,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return a1;
}

void sub_100C8DC80(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100C8E068(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C8DCC0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10187B2D8;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v3 - 88), 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v3 - 88), 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 8sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose((const void *)(v3 - 88), 8) = 0;
  return a1;
}

void sub_100C8DD40(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100C8DD5C(uint64_t a1)
{
  uint64_t result = sub_100C8E19C(a1, "pressure", "temp-compensation-table", (UInt8 *)v12);
  if ((_DWORD)result)
  {
    sub_100934C2C((uint64_t)v10);
    v7[0] = sub_1002C3828(v12, v11);
    v7[1] = v3;
    v7[2] = sub_100C8DFCC(a1);
    int v8 = v4;
    char v9 = v5;
    int v6 = 0;
    return (*(uint64_t (**)(uint64_t, int *, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v6,  v7,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

void sub_100C8DDF4(uint64_t a1, int *a2, float *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187B288);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLPressureBias::onDb",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187B288);
    }
    char v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      xpc_activity_state_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLPressureBias::onDb, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C8EA64(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C8DFAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100C8DFCC(int a1)
{
  *(void *)&__int128 v1 = 0xF0000000F0000000LL;
  *((void *)&v1 + 1) = 0xF0000000F0000000LL;
  __int128 v3 = v1;
  unint64_t v4 = 0xF0000000F0000000LL;
  int v5 = 0xFFFFFFF;
  else {
    return 0LL;
  }
}

uint64_t sub_100C8E068(uint64_t a1)
{
  *(void *)a1 = off_10187B2D8;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

void *sub_100C8E0DC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  if (!*a1) {
    return sub_1010DDBC0(a2, "Bias");
  }
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100C8E18C()
{
  return 1LL;
}

uint64_t sub_100C8E194()
{
  return 1LL;
}

uint64_t sub_100C8E19C(int a1, char *name, const char *a3, UInt8 *a4)
{
  if (name && a3)
  {
    int v6 = IOServiceNameMatching(name);
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (MatchingService)
    {
      io_registry_entry_t v8 = MatchingService;
      char v9 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
      if (v9)
      {
        int v10 = v9;
        CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v8, v9, kCFAllocatorDefault, 0);
        if (!CFProperty)
        {
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          uint64_t v22 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Cannot get %s property", buf, 0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345B0 != -1) {
              dispatch_once(&qword_1019345B0, &stru_10187B2A8);
            }
            LODWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 136315138;
            *(void *)((char *)&v30 + 4) = a3;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Cannot get %s property",  (const char *)&v30);
            __int16 v29 = (uint8_t *)v28;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]",  "%s\n",  v28);
            if (v29 != buf) {
              free(v29);
            }
          }

          IOObjectRelease(v8);
          uint64_t v15 = 0LL;
          goto LABEL_60;
        }

        unint64_t v12 = CFProperty;
        CFTypeID v13 = CFGetTypeID(CFProperty);
        if (v13 == CFDataGetTypeID())
        {
          if ((unint64_t)CFDataGetLength(v12) > 0xDD)
          {
            v33.location = 0LL;
            v33.length = 222LL;
            CFDataGetBytes(v12, v33, a4);
            uint64_t v15 = 1LL;
LABEL_59:
            IOObjectRelease(v8);
            CFRelease(v12);
LABEL_60:
            CFRelease(v10);
            return v15;
          }

          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          __int16 v14 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s property too small", buf, 0xCu);
          }

          uint64_t v15 = 0LL;
          if (!sub_1002921D0(115, 0)) {
            goto LABEL_59;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "%s property too small",  &v30);
        }

        else
        {
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          __int16 v23 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s property is not CFData", buf, 0xCu);
          }

          uint64_t v15 = 0LL;
          if (!sub_1002921D0(115, 0)) {
            goto LABEL_59;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "%s property is not CFData",  &v30);
        }

        uint64_t v24 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]",  "%s\n",  v16);
        if (v24 != buf) {
          free(v24);
        }
        uint64_t v15 = 0LL;
        goto LABEL_59;
      }

      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      xpc_activity_state_t v21 = (os_log_s *)qword_1019345B8;
      if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to create CFString from proprety",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345B0 != -1) {
          dispatch_once(&qword_1019345B0, &stru_10187B2A8);
        }
        LOWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Failed to create CFString from proprety",  &v30,  2);
        __int16 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      IOObjectRelease(v8);
      return 0LL;
    }

    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187B2A8);
    }
    uint64_t v19 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot find pressure registry entry", buf, 2u);
    }

    uint64_t v15 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      LOWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Cannot find pressure registry entry",  &v30,  2,  (void)v30);
LABEL_32:
      __int16 v20 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]",  "%s\n",  v18);
      if (v20 != buf) {
        free(v20);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187B2A8);
    }
    xpc_activity_state_t v17 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "readFactoryData cannot be called without a node or a property",  buf,  2u);
    }

    uint64_t v15 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      LOWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  17LL,  "readFactoryData cannot be called without a node or a property",  &v30,  2,  (void)v30);
      goto LABEL_32;
    }
  }

  return v15;
}

uint64_t sub_100C8E9D0(uint64_t a1, float *a2)
{
  float v3 = a2[1];
  float v4 = *a2 * 1000.0;
  char v9 = 14;
  __int16 v10 = 0;
  char v11 = 0;
  float v12 = v4;
  float v13 = v4 * v3;
  int v14 = 2139095039;
  unint64_t v15 = sub_100C8DFCC(a1);
  int v16 = v5;
  char v17 = v6;
  int v8 = 0;
  return (*(uint64_t (**)(uint64_t, int *, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v8,  &v9,  1LL,  0xFFFFFFFFLL,  0LL);
}

void sub_100C8EA64(uint64_t a1, uint64_t a2, int *a3, float *a4)
{
  if (*a3)
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187B2A8);
    }
    int v5 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a3;
      *(_DWORD *)__n128 buf = 67109120;
      int v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Unexpected notification from pressure db.notification,%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      int v7 = *a3;
      v10[0] = 67109120;
      v10[1] = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Unexpected notification from pressure db.notification,%d",  v10);
      char v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLPressureBias::onDb(int, const CLPressureCalibrationDatabase_Type::Notification &, const CLPressureCalibra tionDatabase_Type::NotificationData &)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    sub_100C8E9D0(a1, a4);
  }

uint64_t sub_100C8EC50(int a1, char *name, const char *a3, UInt8 *a4)
{
  if (name && a3)
  {
    int v6 = IOServiceNameMatching(name);
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (MatchingService)
    {
      io_registry_entry_t v8 = MatchingService;
      char v9 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
      if (v9)
      {
        __int16 v10 = v9;
        CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v8, v9, kCFAllocatorDefault, 0);
        if (!CFProperty)
        {
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          uint64_t v22 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Cannot get %s property", buf, 0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345B0 != -1) {
              dispatch_once(&qword_1019345B0, &stru_10187B2A8);
            }
            LODWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 136315138;
            *(void *)((char *)&v30 + 4) = a3;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Cannot get %s property",  (const char *)&v30);
            __int16 v29 = (uint8_t *)v28;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]",  "%s\n",  v28);
            if (v29 != buf) {
              free(v29);
            }
          }

          IOObjectRelease(v8);
          uint64_t v15 = 0LL;
          goto LABEL_60;
        }

        int v12 = CFProperty;
        CFTypeID v13 = CFGetTypeID(CFProperty);
        if (v13 == CFDataGetTypeID())
        {
          if ((unint64_t)CFDataGetLength(v12) > 0x1B)
          {
            v33.location = 0LL;
            v33.length = 28LL;
            CFDataGetBytes(v12, v33, a4);
            uint64_t v15 = 1LL;
LABEL_59:
            IOObjectRelease(v8);
            CFRelease(v12);
LABEL_60:
            CFRelease(v10);
            return v15;
          }

          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          int v14 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s property too small", buf, 0xCu);
          }

          uint64_t v15 = 0LL;
          if (!sub_1002921D0(115, 0)) {
            goto LABEL_59;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "%s property too small",  &v30);
        }

        else
        {
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          __int16 v23 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v32 = a3;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s property is not CFData", buf, 0xCu);
          }

          uint64_t v15 = 0LL;
          if (!sub_1002921D0(115, 0)) {
            goto LABEL_59;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_10187B2A8);
          }
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "%s property is not CFData",  &v30);
        }

        uint64_t v24 = (uint8_t *)v16;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]",  "%s\n",  v16);
        if (v24 != buf) {
          free(v24);
        }
        uint64_t v15 = 0LL;
        goto LABEL_59;
      }

      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      xpc_activity_state_t v21 = (os_log_s *)qword_1019345B8;
      if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to create CFString from proprety",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345B0 != -1) {
          dispatch_once(&qword_1019345B0, &stru_10187B2A8);
        }
        LOWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Failed to create CFString from proprety",  &v30,  2);
        __int16 v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      IOObjectRelease(v8);
      return 0LL;
    }

    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187B2A8);
    }
    uint64_t v19 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot find pressure registry entry", buf, 2u);
    }

    uint64_t v15 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      LOWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Cannot find pressure registry entry",  &v30,  2,  (void)v30);
LABEL_32:
      __int16 v20 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]",  "%s\n",  v18);
      if (v20 != buf) {
        free(v20);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187B2A8);
    }
    char v17 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "readFactoryData cannot be called without a node or a property",  buf,  2u);
    }

    uint64_t v15 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187B2A8);
      }
      LOWORD(v3sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  17LL,  "readFactoryData cannot be called without a node or a property",  &v30,  2,  (void)v30);
      goto LABEL_32;
    }
  }

  return v15;
}

void sub_100C8F484(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  io_registry_entry_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLPressureBias");
  sub_100C8F54C((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *io_registry_entry_t v8 = off_10187B210;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C8F520( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C8F54C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_10187B428;
  *(void *)(a1 + _Block_object_dispose((const void *)(v3 - 88), 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_100C8F620(void *a1)
{
  *a1 = off_10187B130;
  uint64_t v2 = a1[14];
  a1[14] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_100C8E068((uint64_t)a1);
}

void sub_100C8F664(void *a1)
{
  *a1 = off_10187B130;
  uint64_t v2 = a1[14];
  a1[14] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  float v3 = (void *)sub_100C8E068((uint64_t)a1);
  operator delete(v3);
}

void sub_100C8F6AC(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        char v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)__n128 buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187B288);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        char v11 = (void *)(a1 + 8);
        *(_DWORD *)__n128 buf = 136446466;
        xpc_activity_state_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10187B288);
        }
        int v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        char v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::removeClien t(int) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100C8F920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_101990018);
}

uint64_t sub_100C8F934(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)unint64_t v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)__n128 buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        *(void *)__n128 buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        *(void *)&buf[21] = 0LL;
        *(void *)&uint8_t buf[16] = 0LL;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          double v36 = sub_100C9205C(buf);
          sub_100C91684((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_101990019;
        HIDWORD(v4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v17;
        *(void *)__n128 buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 8sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v30;
        HIDWORD(v4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *a3;
        *(void *)__n128 buf = (char *)&v40 + 4;
        double v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *a3;
        *(void *)__n128 buf = (char *)&v40 + 4;
        CFRange v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)__n128 buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)__n128 buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187B288);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)__n128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&_BYTE buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187B288);
    }
    __int16 v37 = (void *)(a1 + 8);
    *(_DWORD *)unint64_t v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v4sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    __int16 v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::registerForNoti fication(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureBias_Type::Notificat ion, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100C8FD98(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      char v9 = (uint64_t *)v5;
    }
    else {
      char v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187B288);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187B288);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::clientRegiste red(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPre ssureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100C90018(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187B288);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)__n128 buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int16 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10187B288);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                CFRange v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::unr egisterForNotification(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notificatio n, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100C903A0(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(__int128 **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = *v11;
  *(_OWORD *)((char *)a3 + 13) = *(__int128 *)((char *)v11 + 13);
  *a3 = v12;
  return 1LL;
}

uint64_t sub_100C90408(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x38uLL);
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_10187B3B8;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 37) = *(_OWORD *)((char *)a3 + 13);
  *(void *)&__int128 v13 = v6 + 24;
  *((void *)&v13 + 1) = v6;
  int v12 = *a2;
  uint64_t v14 = &v12;
  uint64_t v7 = sub_10023347C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_1012CF090, &v14);
  sub_10005F550((uint64_t)(v7 + 8), &v13);
  int v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    BOOL v9 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_100C904E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100C904F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_100C90538(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187B288);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)__n128 buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&_BYTE buf[20] = "activity";
      __int16 v67 = 2082;
      uint64_t v68 = v12;
      __int16 v69 = 2050;
      uint64_t v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      float v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0x38uLL);
      *((void *)v27 + 1) = 0LL;
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_10187B3B8;
      *(_OWORD *)(v27 + 24) = *a3;
      *(_OWORD *)(v27 + 37) = *(_OWORD *)((char *)a3 + 13);
      *(void *)__n128 buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_100C91228(a3);
    if (a5 == -1)
    {
      sub_100C912B0((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          __int16 v37 = (uint64_t *)v33;
        }
        else {
          __int16 v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          unint64_t v43 = (unint64_t *)v38;
        }
        else {
          unint64_t v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        double v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10187B288);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            unint64_t v46 = v71;
          }
          else {
            unint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)__n128 buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&_BYTE buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10187B288);
          }
          int v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            unint64_t v49 = __p;
          }
          else {
            unint64_t v49 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          unint64_t v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::notifyCli entsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLPressu reBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      double v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      unint64_t v52 = v40 + 3;
      int v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      float v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          double v59 = v53;
        }
        else {
          double v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          float v56 = v53;
        }
        int v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100C91684((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_100C90B78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100C90BC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187B288);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 136315138;
      __int16 v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187B288);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData , NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187B288);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)__n128 buf = 136315394;
      __int16 v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187B288);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData , NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    unint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        int v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10187B288);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)__n128 buf = 136315650;
              __int16 v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187B288);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listC lients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                int v12 = v18;
              }

              while (!v19);
            }

            int v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            unint64_t v10 = v26;
          }

          while (!v19);
        }

        unint64_t v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100C91170(uint64_t a1)
{
  __int128 v1 = (void *)sub_100C91FFC(a1);
  operator delete(v1);
}

id sub_100C91184(uint64_t a1, int a2, void *a3)
{
  id result = sub_100C917B0(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100C911D0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C911FC(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

CLCppContainer *sub_100C91228(_OWORD *a1)
{
  uint64_t v2 = operator new(0x1DuLL);
  *uint64_t v2 = *a1;
  *(_OWORD *)((char *)v2 + 13) = *(_OWORD *)((char *)a1 + 13);
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100C917A0;
  uint64_t v7 = &unk_10181D3D0;
  int v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100C912B0(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        unint64_t v51 = v9;
        id v13 = sub_100C917B0(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              float v50 = v19;
              sub_100C91684(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              unint64_t v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  unint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      unint64_t v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              float v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187B288);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)__n128 buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10187B288);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                int v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::invokeClien tsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPressureBias_Type::Notificati on, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100C91684(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100C917B0(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    int v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100C91760(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10187B3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C91774(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10187B3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100C917A0(uint64_t a1)
{
  __int128 v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100C917B0(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100C91828(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100C91BB0(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100C91828(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100C91F5C((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x800000010135891DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose((const void *)(v3 - 88), 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x800000010135891DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose((const void *)(v3 - 88), 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureBias_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100C91BB0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135891DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    LODWORD(v_Block_object_dispose((const void *)(v3 - 88), 8) = 134218498;
    HIDWORD(v_Block_object_dispose((const void *)(v3 - 88), 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x800000010135891DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187B3F8);
    }
    LODWORD(v_Block_object_dispose((const void *)(v3 - 88), 8) = 134218498;
    HIDWORD(v_Block_object_dispose((const void *)(v3 - 88), 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureBias_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100C91F5C(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D4490))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)29) {
      sub_101268E58();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100C91FD0(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100C91FFC(uint64_t a1)
{
  *(void *)a1 = off_10187B428;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100C9205C(_OWORD *a1)
{
  id v2 = operator new(0x1DuLL);
  *id v2 = *a1;
  *(_OWORD *)((char *)v2 + 13) = *(_OWORD *)((char *)a1 + 13);
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100C920E4;
  uint64_t v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100C920E4(uint64_t a1)
{
  __int128 v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_100C92540( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100C92570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSLog(@"CoreData, Failed to load Core Data stack: %@", a3);
    char v4 = 0;
  }

  else
  {
    NSLog(@"CoreData, Successfully loaded Core Data stack!");
    char v4 = 1;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v4;
}

void sub_100C9268C(_Unwind_Exception *a1)
{
}

void sub_100C927D4(_Unwind_Exception *a1)
{
}

void *sub_100C92B4C(void *a1)
{
  *a1 = off_10187B478;
  uint64_t v2 = a1[1];
  *(_WORD *)((char *)v6 + 1) = 0;
  sub_100CAAAC8(v2 + 192, (__int16 *)v6, 0LL);
  uint64_t v3 = a1[1];
  uint64_t v4 = sub_1006E27E8();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100CA9B90;
  void v6[3] = &unk_10181D3D0;
  v6[4] = v3;
  sub_1006E2970(v4, (uint64_t)v6);
  return a1;
}

void sub_100C92BE0(void *a1)
{
  __int128 v1 = sub_100C92B4C(a1);
  operator delete(v1);
}

void sub_100C92BF4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  HIBYTE(v3) = 1;
  char v4 = a2;
  sub_100CAAAC8(v2 + 192, &v3, 0LL);
}

void *sub_100C92C2C(void *a1)
{
  *a1 = off_10187B4A0;
  sub_100C92CB4(a1[1], 0, 0);
  uint64_t v2 = a1[1];
  uint64_t v3 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA9B9C;
  void v5[3] = &unk_10181D3D0;
  void v5[4] = v2;
  sub_1006E2970(v3, (uint64_t)v5);
  return a1;
}

void sub_100C92CB4(uint64_t a1, int a2, unsigned int a3)
{
  v10[1] = a2;
  unsigned int v11 = a3;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  int v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 67109376;
    int v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "motionstateupdate, calling setMotionStateSim(%d, %lu)",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v12[0] = 67109376;
    v12[1] = a2;
    __int16 v13 = 2048;
    uint64_t v14 = a3;
    LODWORD(v9) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motionstateupdate, calling setMotionStateSim(%d, %lu)",  v12,  v9);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setMotionStateSim(BOOL, uint32_t)", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100CAAC54(a1 + 192, (int *)v10, 0LL);
}

void sub_100C92EA8(void *a1)
{
  __int128 v1 = sub_100C92C2C(a1);
  operator delete(v1);
}

void sub_100C92EBC(uint64_t a1, unsigned int a2)
{
}

void *sub_100C92ECC(void *a1)
{
  *a1 = off_10187B4C8;
  sub_100C92F54(a1[1], 0, 0);
  uint64_t v2 = a1[1];
  uint64_t v3 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA9BA8;
  void v5[3] = &unk_10181D3D0;
  void v5[4] = v2;
  sub_1006E2970(v3, (uint64_t)v5);
  return a1;
}

void sub_100C92F54(uint64_t a1, int a2, int a3)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  int v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67109376;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "motionstateupdate, calling setMotionStateYouthSim(%d, %hhu)",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v9[0] = 67109376;
    v9[1] = a2;
    __int16 v10 = 1024;
    int v11 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motionstateupdate, calling setMotionStateYouthSim(%d, %hhu)",  v9,  14);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setMotionStateYouthSim(BOOL, uint8_t)", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  buf[1] = a2;
  buf[2] = a3;
  sub_100CAADE0(a1 + 192, (__int16 *)buf, 0LL);
}

void sub_100C93140(void *a1)
{
  __int128 v1 = sub_100C92ECC(a1);
  operator delete(v1);
}

void sub_100C93154(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_100C93164(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10187B4F0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 1_Block_object_dispose(va, 8) = 0;
  uint64_t v3 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C931DC;
  void v5[3] = &unk_10181D3D0;
  void v5[4] = a1;
  sub_1006E28B8(v3, (uint64_t)v5);
  return a1;
}

void sub_100C931DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _OWORD v3[2] = sub_100C97010;
  v3[3] = &unk_10181D3D0;
  void v3[4] = v1;
  sub_1006E2970(v2, (uint64_t)v3);
}

void *sub_100C93240(void *a1)
{
  *a1 = off_10187B4F0;
  uint64_t v2 = sub_1006E27E8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100C932B4;
  v4[3] = &unk_10181D3D0;
  void v4[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v4);
  return a1;
}

void sub_100C932B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 17)) {
    --*(_DWORD *)(*(void *)(v1 + 8) + 892LL);
  }
  if (*(_BYTE *)(v1 + 18)) {
    --*(_DWORD *)(*(void *)(v1 + 8) + 896LL);
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(_BYTE *)(v1 + 16)) {
    --*(_DWORD *)(v2 + 888);
  }
  uint64_t v3 = sub_1006E27E8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100C97010;
  v4[3] = &unk_10181D3D0;
  void v4[4] = v2;
  sub_1006E2970(v3, (uint64_t)v4);
}

void sub_100C93360(void *a1)
{
  uint64_t v1 = sub_100C93240(a1);
  operator delete(v1);
}

void sub_100C93374(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C933DC;
  void v5[3] = &unk_101833458;
  void v5[4] = a1;
  char v6 = a2;
  sub_1006E28B8(v4, (uint64_t)v5);
}

void sub_100C933DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(v1 + 16))
  {
    uint64_t v3 = *(void *)(v1 + 8);
    int v4 = *(_DWORD *)(v3 + 888);
    if (*(_BYTE *)(a1 + 40)) {
      int v5 = v4 + 1;
    }
    else {
      int v5 = v4 - 1;
    }
    *(_DWORD *)(v3 + 88_Block_object_dispose(va, 8) = v5;
    uint64_t v6 = sub_1006E27E8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100C97010;
    void v7[3] = &unk_10181D3D0;
    _DWORD v7[4] = v3;
    sub_1006E2970(v6, (uint64_t)v7);
    *(_BYTE *)(v1 + 16) = *(_BYTE *)(a1 + 40);
  }

void sub_100C93478(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C934E0;
  void v5[3] = &unk_101833458;
  void v5[4] = a1;
  char v6 = a2;
  sub_1006E28B8(v4, (uint64_t)v5);
}

void sub_100C934E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(v1 + 17))
  {
    uint64_t v3 = *(void *)(v1 + 8);
    int v4 = *(_DWORD *)(v3 + 892);
    if (*(_BYTE *)(a1 + 40)) {
      int v5 = v4 + 1;
    }
    else {
      int v5 = v4 - 1;
    }
    *(_DWORD *)(v3 + 892) = v5;
    uint64_t v6 = sub_1006E27E8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100C97010;
    void v7[3] = &unk_10181D3D0;
    _DWORD v7[4] = v3;
    sub_1006E2970(v6, (uint64_t)v7);
    *(_BYTE *)(v1 + 17) = *(_BYTE *)(a1 + 40);
  }

void sub_100C9357C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C935E4;
  void v5[3] = &unk_101833458;
  void v5[4] = a1;
  char v6 = a2;
  sub_1006E28B8(v4, (uint64_t)v5);
}

void sub_100C935E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(v1 + 18))
  {
    uint64_t v3 = *(void *)(v1 + 8);
    int v4 = *(_DWORD *)(v3 + 896);
    if (*(_BYTE *)(a1 + 40)) {
      int v5 = v4 + 1;
    }
    else {
      int v5 = v4 - 1;
    }
    *(_DWORD *)(v3 + 896) = v5;
    uint64_t v6 = sub_1006E27E8();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100C97010;
    void v7[3] = &unk_10181D3D0;
    _DWORD v7[4] = v3;
    sub_1006E2970(v6, (uint64_t)v7);
    *(_BYTE *)(v1 + 1_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 40);
  }

void sub_100C93680(uint64_t a1)
{
  uint64_t v17 = 0LL;
  unint64_t v18 = 0LL;
  double v15 = 0.0;
  double v16 = 0.0;
  int times = mach_get_times(&v18, &v17, &v15);
  if (times)
  {
    int v3 = times;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v4 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 67109120;
      LODWORD(v2_Block_object_dispose(va, 8) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Unable to update fMachToWallOffset! %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      int v19 = 67109120;
      LODWORD(v2sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v3;
      int v5 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "Unable to update fMachToWallOffset! %d",  &v19);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionCoprocessor::updateMachToWallOffset()", "%s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }

  else
  {
    double v6 = (double)*(uint64_t *)&v15 + (double)*(uint64_t *)&v16 * 0.000000001;
    double v7 = sub_101171C7C(v18);
    double v8 = v6 - kCFAbsoluteTimeIntervalSince1970;
    *(double *)(a1 + 664) = v8 - v7;
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    uint64_t v9 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 664);
      uint64_t v11 = *(void *)(a1 + 352);
      *(_DWORD *)__n128 buf = 134218752;
      uint64_t v28 = v10;
      __int16 v29 = 2048;
      double v30 = v7;
      __int16 v31 = 2048;
      double v32 = v8;
      __int16 v33 = 2048;
      uint64_t v34 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Updating fMachToWallOffset %f, mach time %f, wall time %f, iohidtime %f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      uint64_t v12 = *(void *)(a1 + 664);
      uint64_t v13 = *(void *)(a1 + 352);
      int v19 = 134218752;
      uint64_t v20 = v12;
      __int16 v21 = 2048;
      double v22 = v7;
      __int16 v23 = 2048;
      double v24 = v8;
      __int16 v25 = 2048;
      uint64_t v26 = v13;
      LODWORD(v14) = 42;
      int v5 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "Updating fMachToWallOffset %f, mach time %f, wall time %f, iohidtime %f",  COERCE_DOUBLE(&v19),  v14,  v15,  v16);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::updateMachToWallOffset()", "%s\n");
      goto LABEL_19;
    }
  }

double sub_100C93A08(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  return *(double *)(a1 + 664) + a2;
}

void sub_100C93A54(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _OWORD v3[2] = sub_100C93AB4;
  v3[3] = &unk_10181D3D0;
  void v3[4] = a1;
  sub_1006E2970(v2, (uint64_t)v3);
}

double sub_100C93AB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 859))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    LOWORD(v11) = 0;
    uint64_t v19 = 0LL;
    uint64_t v18 = 0LL;
    __int16 v20 = 0;
    *(void *)&__int128 v9 = *(void *)(v1 + 352);
    *((CFAbsoluteTime *)&v9 + 1) = Current;
    __int128 v10 = 0uLL;
    BYTE3(v11) = 0;
    *((void *)&v11 + 1) = (unint64_t)Current;
    *(void *)&__int128 v12 = 0LL;
    *(void *)((char *)&v12 + 7) = 0LL;
    *(void *)&__int128 v13 = 0x7E007E007E007E00LL;
    DWORD2(v13) = 0;
    WORD6(v13) = 0;
    *(_DWORD *)double v14 = 0;
    *(void *)&v14[18] = 0LL;
    *(_OWORD *)&_DWORD v14[4] = v17;
    *(_WORD *)&v14[26] = -1;
    *(_WORD *)&v16[24] = 0;
    __int128 v15 = 0u;
    memset(v16, 0, 23);
    sub_1006DD65C(v1, 0LL, (uint64_t)&v9, 160LL);
    __int128 v3 = v15;
    *(_OWORD *)(v1 + 776) = *(_OWORD *)&v14[16];
    *(_OWORD *)(v1 + 792) = v3;
    __int128 v4 = *(_OWORD *)&v16[16];
    *(_OWORD *)(v1 + 80_Block_object_dispose(va, 8) = *(_OWORD *)v16;
    *(_OWORD *)(v1 + 824) = v4;
    __int128 v5 = v12;
    *(_OWORD *)(v1 + 712) = v11;
    *(_OWORD *)(v1 + 72_Block_object_dispose(va, 8) = v5;
    __int128 v6 = *(_OWORD *)v14;
    *(_OWORD *)(v1 + 744) = v13;
    *(_OWORD *)(v1 + 76sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v6;
    double result = *(double *)&v9;
    __int128 v8 = v10;
    *(_OWORD *)(v1 + 68sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = v9;
    *(_OWORD *)(v1 + 696) = v8;
  }

  return result;
}

void sub_100C93BC0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 859))
  {
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = *(void *)(a1 + 400);
    __int128 v3 = *(void ***)(a1 + 504);
    uint64_t v4 = *(void *)(a1 + 512);
    *(void *)(a1 + 536) = 0LL;
    unint64_t v5 = v4 - (void)v3;
    if (v5 >= 0x11)
    {
      do
      {
        operator delete(*v3);
        uint64_t v6 = *(void *)(a1 + 512);
        __int128 v3 = (void **)(*(void *)(a1 + 504) + 8LL);
        *(void *)(a1 + 504) = v3;
        unint64_t v5 = v6 - (void)v3;
      }

      while (v5 > 0x10);
    }

    if (v5 >> 3 == 1)
    {
      uint64_t v7 = 12LL;
    }

    else
    {
      if (v5 >> 3 != 2) {
        goto LABEL_10;
      }
      uint64_t v7 = 25LL;
    }

    *(void *)(a1 + 52_Block_object_dispose(va, 8) = v7;
    goto LABEL_10;
  }

  uint64_t v2 = sub_1006E2838();
  sub_100869548( buf,  v2,  (unint64_t)(0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 4)) > 1);
  sub_100869590(buf);
LABEL_10:
  if (*(_BYTE *)(a1 + 859)
    || (uint64_t v30 = *(void *)(a1 + 1264)) != 0 && ((*(void (**)(void))(v30 + 16))(), *(_BYTE *)(a1 + 859)))
  {
    uint64_t v8 = *(void *)(a1 + 424);
    uint64_t v9 = *(void *)(a1 + 432);
    if (v8 != v9)
    {
      double v60 = (std::__shared_count *)(a1 + 424);
      do
      {
        double v10 = *(double *)(v8 + 8);
        double v11 = *(double *)(a1 + 1408);
        if (v10 > v11 && v10 < v11 + 600.0)
        {
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_10187C0F8);
          }
          __int128 v13 = (os_log_s *)qword_1019344F8;
          if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = *(void *)(v8 + 8);
            int v15 = *(_DWORD *)(v8 + 24);
            uint64_t v16 = *(void *)(v8 + 72);
            *(_DWORD *)__n128 buf = 134349568;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v15;
            *(_WORD *)&_BYTE buf[18] = 2048;
            *(void *)&_BYTE buf[20] = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "#fmc After vehicle disconnect, startTime, %{public}f, stepCount, %d, currentPace, %f",  buf,  0x1Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344F0 != -1) {
              dispatch_once(&qword_1019344F0, &stru_10187C0F8);
            }
            double v17 = *(double *)(v8 + 8);
            int v18 = *(_DWORD *)(v8 + 24);
            uint64_t v19 = *(void *)(v8 + 72);
            int v66 = 134349568;
            double v67 = v17;
            __int16 v68 = 1024;
            *(_DWORD *)__int16 v69 = v18;
            *(_WORD *)&v69[4] = 2048;
            *(void *)&v69[6] = v19;
            LODWORD(v59) = 28;
            __int16 v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "#fmc After vehicle disconnect, startTime, %{public}f, stepCount, %d, currentPace, %f",  &v66,  v59);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::notifyClientsWithBufferedData()",  "%s\n",  v20);
            if (v20 != buf) {
              free(v20);
            }
          }
        }

        v8 += 176LL;
      }

      while (v8 != v9);
      __int16 v21 = (std::__shared_weak_count *)operator new(0x30uLL);
      v21->__shared_owners_ = 0LL;
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      v21->__shared_weak_owners_ = 0LL;
      v21->__vftable = (std::__shared_weak_count_vtbl *)off_10187C328;
      v21[1].std::__shared_count = *v60;
      v21[1].__shared_weak_owners_ = *(void *)(a1 + 440);
      v60->__vftable = 0LL;
      *(void *)(a1 + 432) = 0LL;
      *(void *)(a1 + 44sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
      v65[0] = (uint64_t)&v21[1];
      v65[1] = (uint64_t)v21;
      sub_100C94518(a1, v65);
      do
        unint64_t v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    int v24 = *(unsigned __int8 *)(a1 + 859);
    *(void *)(a1 + 432) = *(void *)(a1 + 424);
    if (v24)
    {
      if (*(void *)(a1 + 448) != *(void *)(a1 + 456))
      {
        sub_1004F2598();
        if (sub_1001B9A1C())
        {
          __int16 v25 = *(__int128 **)(a1 + 448);
          uint64_t v26 = *(__int128 **)(a1 + 456);
          while (v25 != v26)
          {
            __int128 v27 = *v25;
            __int128 v28 = v25[1];
            __int128 v29 = v25[3];
            __int128 v73 = v25[2];
            __int128 v74 = v29;
            *(_OWORD *)__n128 buf = v27;
            *(_OWORD *)&uint8_t buf[16] = v28;
            sub_1006DD65C(a1, 20LL, (uint64_t)buf, 64LL);
            v25 += 4;
          }
        }
      }
    }
  }

  else
  {
    *(void *)(a1 + 432) = *(void *)(a1 + 424);
  }

  if (*(_BYTE *)(a1 + 860))
  {
    double v32 = *(std::__shared_weak_count_vtbl **)(a1 + 448);
    uint64_t v31 = *(void *)(a1 + 456);
    if (v32 != (std::__shared_weak_count_vtbl *)v31)
    {
      __int16 v33 = (std::__shared_weak_count *)operator new(0x30uLL);
      v33->__shared_owners_ = 0LL;
      uint64_t v34 = (unint64_t *)&v33->__shared_owners_;
      v33->__shared_weak_owners_ = 0LL;
      v33->__vftable = (std::__shared_weak_count_vtbl *)off_10187C378;
      v33[1].__vftable = v32;
      uint64_t v35 = *(void *)(a1 + 464);
      v33[1].__shared_owners_ = v31;
      v33[1].__shared_weak_owners_ = v35;
      *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0LL;
      *(void *)(a1 + 456) = 0LL;
      *(void *)(a1 + 464) = 0LL;
      v64[0] = (uint64_t)&v33[1];
      v64[1] = (uint64_t)v33;
      sub_100C945B8(a1, v64);
      do
        unint64_t v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }

  *(void *)(a1 + 456) = *(void *)(a1 + 448);
  if (*(_BYTE *)(a1 + 859))
  {
    BOOL v38 = *(std::__shared_weak_count_vtbl **)(a1 + 472);
    uint64_t v37 = *(void *)(a1 + 480);
    if (v38 != (std::__shared_weak_count_vtbl *)v37)
    {
      int v39 = (std::__shared_weak_count *)operator new(0x30uLL);
      v39->__shared_owners_ = 0LL;
      int v40 = (unint64_t *)&v39->__shared_owners_;
      v39->__shared_weak_owners_ = 0LL;
      v39->__vftable = (std::__shared_weak_count_vtbl *)off_10187C3C8;
      v39[1].__vftable = v38;
      uint64_t v41 = *(void *)(a1 + 488);
      v39[1].__shared_owners_ = v37;
      v39[1].__shared_weak_owners_ = v41;
      *(void *)(a1 + 472) = 0LL;
      *(void *)(a1 + 48sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 0LL;
      *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
      v63[0] = (uint64_t)&v39[1];
      v63[1] = (uint64_t)v39;
      sub_100C94658(a1, v63);
      do
        unint64_t v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }

    int v43 = *(unsigned __int8 *)(a1 + 859);
    *(void *)(a1 + 48sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(void *)(a1 + 472);
    if (v43)
    {
      BOOL v44 = *(__int128 **)(a1 + 544);
      for (uint64_t i = *(__int128 **)(a1 + 552); v44 != i; v44 += 2)
      {
        __int128 v46 = v44[1];
        __int128 v61 = *v44;
        __int128 v62 = v46;
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187C118);
        }
        int v47 = (os_log_s *)qword_101934518;
        if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__n128 buf = 134349824;
          *(void *)&uint8_t buf[4] = *((void *)&v61 + 1);
          *(_WORD *)&_BYTE buf[12] = 2050;
          *(void *)&_BYTE buf[14] = v62;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&uint8_t buf[24] = *((void *)&v62 + 1);
          LOWORD(v73) = 2050;
          *(void *)((char *)&v73 + 2) = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "notifying,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934510 != -1) {
            dispatch_once(&qword_101934510, &stru_10187C118);
          }
          int v66 = 134349824;
          double v67 = *((double *)&v61 + 1);
          __int16 v68 = 2050;
          *(void *)__int16 v69 = v62;
          *(_WORD *)&v69[8] = 2050;
          *(void *)&v69[10] = *((void *)&v62 + 1);
          __int16 v70 = 2050;
          uint64_t v71 = v61;
          LODWORD(v59) = 42;
          uint64_t v48 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "notifying,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTi mestamp,%{public}.3f",  &v66,  v59);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::notifyClientsWithBufferedData()",  "%s\n",  v48);
          if (v48 != buf) {
            free(v48);
          }
        }

        sub_1006DD65C(a1, 35LL, (uint64_t)&v61, 32LL);
      }
    }
  }

  else
  {
    *(void *)(a1 + 48sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = *(void *)(a1 + 472);
  }

  *(void *)(a1 + 552) = *(void *)(a1 + 544);
  uint64_t v50 = *(void *)(a1 + 400);
  uint64_t v49 = *(void *)(a1 + 408);
  if (v50 != v49)
  {
    do
    {
      sub_1006DD65C(a1, v50 != v49 - 160, v50, 160LL);
      double v51 = *(double *)(v50 + 8);
      double v52 = *(double *)(a1 + 1408);
      if (v51 > v52 && v51 < v52 + 600.0)
      {
        int v54 = *(_DWORD *)(v50 + 24);
        int v55 = *(unsigned __int8 *)(v50 + 28);
        int v56 = *(unsigned __int8 *)(v50 + 29);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10187C0F8);
        }
        int v57 = (os_log_s *)qword_1019344F8;
        if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__n128 buf = 134349824;
          *(double *)&uint8_t buf[4] = v51;
          *(_WORD *)&_BYTE buf[12] = 1026;
          *(_DWORD *)&_BYTE buf[14] = v54;
          *(_WORD *)&_BYTE buf[18] = 1026;
          *(_DWORD *)&_BYTE buf[20] = v55;
          *(_WORD *)&uint8_t buf[24] = 1026;
          *(_DWORD *)&buf[26] = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "#fmc After vehicle disconnect, startTime, %{public}f, motionType, %{public}d, confidence, %{public}d, mounted, %{public}d",  buf,  0x1Eu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_10187C0F8);
          }
          int v66 = 134349824;
          double v67 = v51;
          __int16 v68 = 1026;
          *(_DWORD *)__int16 v69 = v54;
          *(_WORD *)&v69[4] = 1026;
          *(_DWORD *)&v69[6] = v55;
          *(_WORD *)&v69[10] = 1026;
          *(_DWORD *)&v69[12] = v56;
          LODWORD(v59) = 30;
          __int16 v58 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "#fmc After vehicle disconnect, startTime, %{public}f, motionType, %{public}d, confidence, %{pu blic}d, mounted, %{public}d",  &v66,  v59);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::notifyClientsWithBufferedData()",  "%s\n",  v58);
          if (v58 != buf) {
            free(v58);
          }
        }
      }

      uint64_t v49 = *(void *)(a1 + 408);
      v50 += 160LL;
    }

    while (v50 != v49);
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = *(void *)(a1 + 400);
  }

void sub_100C944DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100C94518(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1256);
  if (v2)
  {
    __int128 v3 = (std::__shared_weak_count *)a2[1];
    uint64_t v9 = *a2;
    double v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    uint64_t v6 = v10;
    if (v10)
    {
      uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

void sub_100C945A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C945B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1272);
  if (v2)
  {
    __int128 v3 = (std::__shared_weak_count *)a2[1];
    uint64_t v9 = *a2;
    double v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    uint64_t v6 = v10;
    if (v10)
    {
      uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

void sub_100C94644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C94658(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1280);
  if (v2)
  {
    __int128 v3 = (std::__shared_weak_count *)a2[1];
    uint64_t v9 = *a2;
    double v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }

    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    uint64_t v6 = v10;
    if (v10)
    {
      uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }

void sub_100C946E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C946F8(uint64_t a1, int a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending userParam: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v6[0] = 67109120;
    v6[1] = a2;
    unint64_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Sending userParam: %d",  v6);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendStrideParam(uint16_t)", "%s\n", v5);
  }

  buf[0] = 11;
  *(_WORD *)&buf[1] = a2;
  sub_100CA9FCC(a1 + 192, (__int16 *)buf, 0LL);
}

uint64_t sub_100C948C0()
{
  else {
    LOBYTE(vsub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = 1;
  }
  unsigned __int8 v3 = v0;
  sub_1012049AC(v2, "OscarActivity", &v3, 0);
  return v2[1];
}

void sub_100C94910(uint64_t a1, float *a2, char a3)
{
  if ((*(_BYTE *)(a1 + 648) & 1) != 0)
  {
    sub_101268FC8();
    __break(1u);
LABEL_60:
    dispatch_once(&qword_101934560, &stru_10187C138);
    goto LABEL_6;
  }

  LOBYTE(v1sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = a2 | 1;
  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = a2 | 1;
  uint64_t v52 = 0LL;
  BOOL v51 = 0;
  uint64_t v11 = sub_1006E27E8();
  sub_100413284(v11, &v49);
  sub_1002A81F8(v49, "ISPUpdateInterval", (float *)&v52 + 1);
  sub_1002A81F8(v49, "OscarPredictionInterval", (float *)&v52);
  sub_1002A6F64(v49, "OscarDisableDynamicBias", &v51);
  a2 = (float *)(a1 + 904);
  sub_1002A81F8(v49, "OscarGyroBiasXOffset", (float *)(a1 + 904));
  unsigned __int8 v3 = (float *)(a1 + 908);
  sub_1002A81F8(v49, "OscarGyroBiasYOffset", (float *)(a1 + 908));
  uint64_t v4 = (float *)(a1 + 912);
  sub_1002A81F8(v49, "OscarGyroBiasZOffset", (float *)(a1 + 912));
  unint64_t v5 = (float *)(a1 + 916);
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934560 != -1) {
    goto LABEL_60;
  }
LABEL_6:
  __int128 v12 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 134349312;
    *(double *)&uint8_t buf[4] = *(float *)&v52;
    __int16 v62 = 2050;
    double v63 = *((float *)&v52 + 1);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "predictionInterval,%{public}f,ispUpdateInterval,%{public}f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    int v53 = 134349312;
    double v54 = *(float *)&v52;
    __int16 v55 = 2050;
    double v56 = *((float *)&v52 + 1);
    BOOL v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "predictionInterval,%{public}f,ispUpdateInterval,%{public}f",  &v53,  22);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
  }

  if (v51)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    __int128 v13 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Warning: dynamic bias estimation disabled!",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10187C158);
      }
      LOWORD(v53) = 0;
      LODWORD(v46) = 2;
      BOOL v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Warning: dynamic bias estimation disabled!",  &v53,  *(void *)&v46);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v44);
      if (v44 != buf) {
        free(v44);
      }
    }
  }

  if (*a2 != 0.0 || *v3 != 0.0 || *v4 != 0.0 || *v5 != 0.0)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    uint64_t v14 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = *a2;
      double v16 = *v3;
      double v17 = *v4;
      double v18 = *v5;
      *(_DWORD *)__n128 buf = 134218752;
      *(double *)&uint8_t buf[4] = v15;
      __int16 v62 = 2048;
      double v63 = v16;
      __int16 v64 = 2048;
      double v65 = v17;
      __int16 v66 = 2048;
      double v67 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Warning: manual gyro bias offset [%f %f %f] dps,error,%f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10187C158);
      }
      double v39 = *a2;
      double v40 = *v3;
      double v41 = *v4;
      double v42 = *v5;
      int v53 = 134218752;
      double v54 = v39;
      __int16 v55 = 2048;
      double v56 = v40;
      __int16 v57 = 2048;
      double v58 = v41;
      __int16 v59 = 2048;
      double v60 = v42;
      LODWORD(v46) = 42;
      int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Warning: manual gyro bias offset [%f %f %f] dps,error,%f",  COERCE_DOUBLE(&v53),  v46,  v47,  block[0]);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v43);
      if (v43 != buf) {
        free(v43);
      }
    }
  }

  *(_DWORD *)(a1 + 23sub_100222B94(v39, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0) = HIDWORD(v52);
  *(_DWORD *)(a1 + 234) = v52;
  *(_WORD *)(a1 + 22_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 900);
  *(_DWORD *)(a1 + 23_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 916);
  *(_BYTE *)(a1 + 242) = v51;
  uint64_t v19 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      unint64_t v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  int v10 = *(_DWORD *)(a1 + 648);
LABEL_30:
  if ((v10 & 8) != 0) {
    *(_BYTE *)(a1 + 223) = 1;
  }
  if ((a3 & 1) == 0)
  {
    if ((v10 & 4) != 0)
    {
      double v22 = (void *)sub_1006E2838();
      sub_100C8F484((uint64_t)sub_100C95350, a1, v22, buf);
      uint64_t v23 = *(void *)buf;
      *(void *)__n128 buf = 0LL;
      uint64_t v24 = *(void *)(a1 + 1336);
      *(void *)(a1 + 1336) = v23;
      if (v24)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
        uint64_t v25 = *(void *)buf;
        *(void *)__n128 buf = 0LL;
        if (v25) {
          (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
        }
      }

      [*(id *)(*(void *)(a1 + 1336) + 16) register:*(void *)(*(void *)(a1 + 1336) + 8) forNotification:0 registrationInfo:0];
      sub_1004F2598();
      if ((sub_1004F97F4() & 0x100000000000000LL) != 0) {
        *(_BYTE *)(a1 + 265) = 1;
      }
      LOBYTE(v53) = 0;
      sub_1012049AC(buf, "EasySubmersion", (unsigned __int8 *)&v53, 0);
      *(_BYTE *)(a1 + 273) = buf[1];
      LOBYTE(v53) = 0;
      sub_1012049AC(buf, "BaroWaterOccluded", (unsigned __int8 *)&v53, 0);
      *(_BYTE *)(a1 + 26_Block_object_dispose(va, 8) = buf[1];
      int v53 = 0;
      sub_101206C88(buf, "ForcePressureOffset", &v53, 0);
      *(_DWORD *)(a1 + 27_Block_object_dispose(va, 8) = *(_DWORD *)&buf[4];
      int v10 = *(_DWORD *)(a1 + 648);
    }

    if ((v10 & 2) != 0)
    {
      *(_BYTE *)(a1 + 224) = 1;
      dispatch_time_t v26 = dispatch_time(0LL, 30000000000LL);
      sub_1006E27E8();
      __int128 v27 = (dispatch_queue_s *)[sub_1006E282C() queue];
      *(void *)&block[0] = _NSConcreteStackBlock;
      *(void *)&block[1] = 3221225472LL;
      *(void *)&block[2] = sub_100C95528;
      *(void *)&block[3] = &unk_10181D3D0;
      *(void *)&block[4] = a1;
      dispatch_after(v26, v27, block);
      int v10 = *(_DWORD *)(a1 + 648);
    }

    if ((v10 & 0x40) != 0)
    {
      uint64_t v28 = sub_1006E2838();
      if (sub_1003957C0(v28))
      {
        __int128 v29 = (void *)sub_1006E2838();
        sub_100395860((uint64_t)sub_100C95540, a1, v29, buf);
        uint64_t v30 = *(void *)buf;
        *(void *)__n128 buf = 0LL;
        uint64_t v31 = *(void *)(a1 + 584);
        *(void *)(a1 + 584) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
          uint64_t v32 = *(void *)buf;
          *(void *)__n128 buf = 0LL;
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
          }
        }

        [*(id *)(*(void *)(a1 + 584) + 16) register:*(void *)(*(void *)(a1 + 584) + 8) forNotification:0 registrationInfo:0];
      }

      else
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_10187C158);
        }
        __int16 v33 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "CLGyroCalibrationDatabase is not available.",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_10187C158);
          }
          LOWORD(v53) = 0;
          LODWORD(v46) = 2;
          int v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "CLGyroCalibrationDatabase is not available.",  &v53,  *(void *)&v46);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)",  "%s\n",  v45);
          if (v45 != buf) {
            free(v45);
          }
        }
      }
    }

    if ((*(_BYTE *)(a1 + 648) & 0x10) != 0)
    {
      uint64_t v34 = (void *)sub_1006E2838();
      sub_100A15BEC((uint64_t)sub_100C95550, a1, v34, buf);
      uint64_t v35 = *(void *)buf;
      *(void *)__n128 buf = 0LL;
      uint64_t v36 = *(void *)(a1 + 1344);
      *(void *)(a1 + 1344) = v35;
      if (v36)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
        uint64_t v37 = *(void *)buf;
        *(void *)__n128 buf = 0LL;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
        }
      }

      [*(id *)(*(void *)(a1 + 1344) + 16) register:*(void *)(*(void *)(a1 + 1344) + 8) forNotification:0 registrationInfo:0];
    }
  }

void sub_100C95328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100C95350(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187C178);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionCoprocessor::onPressureBias",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187C178);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionCoprocessor::onPressureBias, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100CA8DEC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C95508( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C95528(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  v1[224] = 0;
  return (*(uint64_t (**)(_BYTE *, void))(*(void *)v1 + 552LL))(v1, 0LL);
}

uint64_t sub_100C95540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a4 + 928LL))(a4);
}

void sub_100C95550(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
}

id sub_100C95560(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 648) & 1) != 0)
  {
    if (qword_1019344C0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_101269144(qword_1019344C0 == -1);
  }

  dispatch_once(&qword_1019344C0, &stru_10187C0B8);
LABEL_3:
  uint64_t v2 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending initial configuration.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    v16[0] = 0;
    double v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Sending initial configuration.",  v16,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::finishConfiguration()", "%s\n", v15);
  }

  unsigned __int8 v3 = (void *)sub_100ED5364();
  sub_100ED5E30(v3);
  int v4 = *(_DWORD *)(a1 + 648);
  if ((v4 & 8) != 0)
  {
    sub_100C9589C((void *)a1, *(void **)(a1 + 160));
    int v4 = *(_DWORD *)(a1 + 648);
    if ((v4 & 0x40) == 0)
    {
LABEL_8:
      if ((v4 & 4) == 0) {
        goto LABEL_9;
      }
LABEL_17:
      sub_100C95C70(a1);
      if ((*(_DWORD *)(a1 + 648) & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }

  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  sub_100C95AD0(a1);
  int v4 = *(_DWORD *)(a1 + 648);
  if ((v4 & 4) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v4 & 0x10) != 0) {
LABEL_10:
  }
    sub_100C95E2C(a1);
LABEL_11:
  sub_100C946F8(a1, *(unsigned __int16 *)(a1 + 344));
  (*(void (**)(uint64_t, void))(*(void *)a1 + 544LL))(a1, *(unsigned __int8 *)(a1 + 1419));
  uint8_t v5 = *(_BYTE *)(a1 + 1813);
  buf[0] = 49;
  buf[1] = v5;
  sub_100CAFCAC(a1 + 192, (__int16 *)buf, 0LL);
  uint8_t v6 = *(_BYTE *)(a1 + 1814);
  buf[0] = 52;
  buf[1] = v6;
  sub_100CAFE28(a1 + 192, (__int16 *)buf, 0LL);
  uint8_t v7 = *(_BYTE *)(a1 + 1815);
  buf[0] = 54;
  buf[1] = v7;
  sub_100CAFFA4(a1 + 192, (__int16 *)buf, 0LL);
  uint8_t v8 = *(_BYTE *)(a1 + 1816);
  buf[0] = 55;
  buf[1] = v8;
  sub_100CB0120(a1 + 192, (__int16 *)buf, 0LL);
  uint8_t v9 = *(_BYTE *)(a1 + 1817);
  buf[0] = 56;
  buf[1] = v9;
  sub_100CB029C(a1 + 192, (__int16 *)buf, 0LL);
  sub_100C96010(a1);
  int v10 = (void *)sub_1006E2838();
  sub_100D290F0((uint64_t)sub_100C960D8, a1, v10, buf);
  uint64_t v11 = *(void *)buf;
  *(void *)__n128 buf = 0LL;
  uint64_t v12 = *(void *)(a1 + 1328);
  *(void *)(a1 + 132_Block_object_dispose(va, 8) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    uint64_t v13 = *(void *)buf;
    *(void *)__n128 buf = 0LL;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
  }

  return [*(id *)(*(void *)(a1 + 1328) + 16) register:*(void *)(*(void *)(a1 + 1328) + 8) forNotification:0 registrationInfo:0];
}

void sub_100C9589C(void *a1, void *a2)
{
  if (qword_101934700 != -1) {
    dispatch_once(&qword_101934700, &stru_10187C2B8);
  }
  int v4 = (os_log_s *)qword_101934708;
  if (os_log_type_enabled((os_log_t)qword_101934708, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "configuring on body detector", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934700 != -1) {
      dispatch_once(&qword_101934700, &stru_10187C2B8);
    }
    LOWORD(v8[0]) = 0;
    uint8_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934708,  2LL,  "configuring on body detector",  v8,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::configureOnBodyDetector(NSDictionary *)",  "%s\n",  v7);
    if (v7 != buf) {
      free(v7);
    }
  }

  if (a2)
  {
    uint8_t v5 = (void *)(*(uint64_t (**)(void *))(*a1 + 584LL))(a1);
    sub_100AD2964(a2, v5, (uint64_t)v8);
  }

  else
  {
    sub_100AD258C(v8);
  }

  __int128 v13 = v8[1];
  __int128 v14 = v8[2];
  v15[0] = v9[0];
  *(_OWORD *)((char *)v15 + 13) = *(_OWORD *)((char *)v9 + 13);
  buf[0] = 12;
  *(_WORD *)&buf[1] = 0;
  char v11 = 0;
  __int128 v12 = v8[0];
  uint8_t v6 = (void *)a1[20];
  if (v6 != a2)
  {

    a1[20] = [a2 copy];
  }

  sub_100AD25A4((uint64_t)v8);
  sub_100CABA68((uint64_t)(a1 + 24), (__int128 *)buf, 0LL);
}

void sub_100C95AD0(uint64_t a1)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_10187C158);
  }
  uint64_t v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send gyro bias fit sync", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    v4[0] = 0;
    unsigned __int8 v3 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Send gyro bias fit sync",  v4,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendGyroBiasFitSync()", "%s\n", v3);
  }

  sub_100C960E0(a1);
}

id sub_100C95C70(uint64_t a1)
{
  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_10187C1B8);
  }
  uint64_t v2 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send pressure bias fit sync", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187C1B8);
    }
    v5[0] = 0;
    int v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  1LL,  "Send pressure bias fit sync",  v5,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendPressureBiasFitSync()", "%s\n", v4);
  }

  [*(id *)(*(void *)(a1 + 1336) + 16) unregister:*(void *)(*(void *)(a1 + 1336) + 8) forNotification:0];
  return [*(id *)(*(void *)(a1 + 1336) + 16) register:*(void *)(*(void *)(a1 + 1336) + 8) forNotification:0 registrationInfo:0];
}

id sub_100C95E2C(uint64_t a1)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10187C1D8);
  }
  uint64_t v2 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send GMM data async", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10187C1D8);
    }
    v7[0] = 0;
    uint8_t v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Send GMM data async",  v7,  2);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendGmmDataAsync()", "%s\n", v5);
  }

  id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "vendor"), "proxyForService:", @"CLGeomagneticModelProvider");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100C96BEC;
  void v6[3] = &unk_101838B18;
  _DWORD v6[4] = a1;
  return [v3 doAsync:v6];
}

void sub_100C96010(uint64_t a1)
{
  if (v6 > dword_10199D590)
  {
    sub_100C9A388(a1, 1);
    dispatch_time_t v2 = dispatch_time(0LL, 1000000000LL * v6);
    sub_1006E27E8();
    id v3 = (dispatch_queue_s *)[sub_1006E282C() queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100C9A548;
    block[3] = &unk_10181D3D0;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }

void sub_100C960D8(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
}

void sub_100C960E0(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 648) & 0x40) == 0)
  {
    sub_1012692B0();
    __break(1u);
  }

  int v2 = *(_DWORD *)(a1 + 920);
  if (v2 == 2)
  {
    memcpy(__dst, (const void *)(a1 + 953), 0x11AuLL);
    int v4 = 0xFFFF;
    if (*(unsigned __int16 *)(a1 + 900) != 0xFFFF)
    {
      if (*(_BYTE *)(a1 + 952))
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_10187C158);
        }
        uint8_t v5 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Decreasing proactive gyro bias estimation timeout for out of box.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_10187C158);
          }
          LOWORD(v99) = 0;
          int v77 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Decreasing proactive gyro bias estimation timeout for out of box.",  &v99,  2);
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v77);
          if (v77 != buf) {
            free(v77);
          }
          int v4 = 300;
        }

        else
        {
          int v4 = 300;
        }
      }

      else
      {
        int v4 = *(unsigned __int16 *)(a1 + 900);
      }
    }

    if (*(unsigned __int16 *)(a1 + 228) != v4)
    {
      *(_WORD *)(a1 + 22_Block_object_dispose(va, 8) = v4;
      (*(void (**)(uint64_t, void))(*(void *)a1 + 552LL))(a1, 0LL);
    }

    *(void *)&__int128 v99 = &off_101857E28;
    *((void *)&v99 + 1) = CFAbsoluteTimeGetCurrent();
    __int16 v16 = &v102;
    uint64_t v17 = 4LL;
    do
    {
      __int16 v18 = (char *)__dst + v17;
      *((void *)v16 - 13) = *(void *)((char *)__dst + v17);
      *(v16 - 24) = *(_DWORD *)((char *)__dst + v17 + 8);
      *((void *)v16 - 1) = *(void *)((char *)__dst + v17 + 12);
      *__int16 v16 = *(_DWORD *)((char *)&__dst[1] + v17 + 4);
      v16 += 3;
      v17 += 24LL;
    }

    while (v18 + 24 != (char *)&__dst[12] + 4);
    *(_OWORD *)uint64_t v103 = *(_OWORD *)((char *)&__dst[12] + 4);
    *(_OWORD *)&v103[12] = __dst[13];
    v105[0] = *(void *)((char *)&__dst[14] + 4);
    *(void *)((char *)v105 + 5) = *(void *)((char *)&__dst[14] + 9);
    int v104 = __dst[14];
    if (*(_BYTE *)(a1 + 869))
    {
      uint64_t v19 = sub_100E00E14();
      sub_100E022E0(v19, (uint64_t)&v99);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10187C198);
      }
      uint64_t v20 = qword_1019A1D08;
      if (qword_1019A1D08)
      {
        sub_100E5EAD4((uint64_t)&v99, (uint64_t)buf);
        uint64_t v21 = 0LL;
        v98[11] = v98[10];
        v98[2] = v98[1];
        v98[5] = v98[4];
        v98[8] = v98[7];
        do
        {
          double v22 = v98;
          uint64_t v23 = (char *)v98[2];
          unint64_t v24 = v98[3];
          if ((unint64_t)v23 >= v24)
          {
            dispatch_time_t v26 = (char *)v98[1];
            uint64_t v27 = (v23 - v26) >> 2;
            unint64_t v28 = v24 - (void)v26;
            unint64_t v29 = (uint64_t)(v24 - (void)v26) >> 1;
            if (v29 <= v27 + 1) {
              unint64_t v29 = v27 + 1;
            }
            if (v28 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v30)
            {
              uint64_t v31 = (char *)sub_10000956C((uint64_t)(v98 + 3), v30);
              dispatch_time_t v26 = (char *)v22[1];
              uint64_t v23 = (char *)v22[2];
            }

            else
            {
              uint64_t v31 = 0LL;
            }

            uint64_t v32 = &v31[4 * v27];
            *(_DWORD *)uint64_t v32 = *((unsigned __int8 *)&__dst[14] + v21 + 4);
            uint64_t v25 = v32 + 4;
            while (v23 != v26)
            {
              int v33 = *((_DWORD *)v23 - 1);
              v23 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }

            v22[1] = v32;
            void v22[2] = v25;
            v22[3] = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }

          else
          {
            *(_DWORD *)uint64_t v23 = *((unsigned __int8 *)&__dst[14] + v21 + 4);
            uint64_t v25 = v23 + 4;
          }

          void v22[2] = v25;
          uint64_t v34 = v98;
          uint64_t v35 = (unsigned __int8 *)&__dst[15] + v21 + 6;
          uint64_t v36 = (char *)v98[5];
          unint64_t v37 = v98[6];
          if ((unint64_t)v36 >= v37)
          {
            double v39 = (char *)v98[4];
            uint64_t v40 = (v36 - v39) >> 2;
            unint64_t v41 = v37 - (void)v39;
            unint64_t v42 = (uint64_t)(v37 - (void)v39) >> 1;
            if (v42 <= v40 + 1) {
              unint64_t v42 = v40 + 1;
            }
            if (v41 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v42;
            }
            if (v43)
            {
              BOOL v44 = (char *)sub_10000956C((uint64_t)(v98 + 6), v43);
              double v39 = (char *)v34[4];
              uint64_t v36 = (char *)v34[5];
            }

            else
            {
              BOOL v44 = 0LL;
            }

            int v45 = &v44[4 * v40];
            *(_DWORD *)int v45 = *v35;
            BOOL v38 = v45 + 4;
            while (v36 != v39)
            {
              int v46 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }

            v34[4] = v45;
            v34[5] = v38;
            v34[6] = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }

          else
          {
            *(_DWORD *)uint64_t v36 = *v35;
            BOOL v38 = v36 + 4;
          }

          v34[5] = v38;
          double v47 = v98;
          uint64_t v48 = (unsigned __int8 *)&__dst[16] + v21 + 8;
          uint64_t v49 = (char *)v98[8];
          unint64_t v50 = v98[9];
          if ((unint64_t)v49 >= v50)
          {
            uint64_t v52 = (char *)v98[7];
            uint64_t v53 = (v49 - v52) >> 2;
            if ((unint64_t)(v53 + 1) >> 62) {
LABEL_116:
            }
              sub_100007008();
            unint64_t v54 = v50 - (void)v52;
            unint64_t v55 = (uint64_t)(v50 - (void)v52) >> 1;
            if (v55 <= v53 + 1) {
              unint64_t v55 = v53 + 1;
            }
            if (v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56)
            {
              __int16 v57 = (char *)sub_10000956C((uint64_t)(v98 + 9), v56);
              uint64_t v52 = (char *)v47[7];
              uint64_t v49 = (char *)v47[8];
            }

            else
            {
              __int16 v57 = 0LL;
            }

            double v58 = &v57[4 * v53];
            *(_DWORD *)double v58 = *v48;
            BOOL v51 = v58 + 4;
            while (v49 != v52)
            {
              int v59 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }

            v47[7] = v58;
            v47[8] = v51;
            v47[9] = &v57[4 * v56];
            if (v52) {
              operator delete(v52);
            }
          }

          else
          {
            *(_DWORD *)uint64_t v49 = *v48;
            BOOL v51 = v49 + 4;
          }

          v47[8] = v51;
          ++v21;
        }

        while (v21 != 18);
        sub_1011CF3D0(v20, (uint64_t)buf);
        sub_101127D00((PB::Base *)buf);
      }
    }

    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    double v60 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      sub_10080410C((uint64_t)&v99, buf);
      __int128 v61 = v86 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)uint64_t v79 = 136446210;
      *(void *)&v79[4] = v61;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "NonlinearBiasFit,%{public}s", v79, 0xCu);
      if (SHIBYTE(v86) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10187C158);
      }
      __int128 v74 = off_101934598;
      sub_10080410C((uint64_t)&v99, v79);
      if (v80 >= 0) {
        int v75 = v79;
      }
      else {
        int v75 = *(_BYTE **)v79;
      }
      int v81 = 136446210;
      uint64_t v82 = v75;
      LODWORD(v7_Block_object_dispose(va, 8) = 12;
      int v76 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v74,  1LL,  "NonlinearBiasFit,%{public}s",  &v81,  v78);
      if (v80 < 0) {
        operator delete(*(void **)v79);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v76);
      if (v76 != buf) {
        free(v76);
      }
    }

    uint64_t v62 = 0LL;
    float32x2_t v63 = *(float32x2_t *)(a1 + 904);
    float v64 = *(float *)(a1 + 912);
    do
    {
      double v65 = (float32x2_t *)((char *)__dst + v62);
      uint64_t v65[2] = vadd_f32(v63, *(float32x2_t *)((char *)&__dst[1] + v62));
      v65[3].f32[0] = v64 + *(float *)((char *)&__dst[1] + v62 + 8);
      v62 += 24LL;
    }

    while (v62 != 192);
    sub_100CAA2E4(a1 + 192, __dst, 0LL);
  }

  else if (v2 == 1)
  {
    if ((CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0 > 0.0
      && (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0 >= 255.0)
    {
      int v3 = 255;
    }

    else if ((CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0 <= 0.0)
    {
      int v3 = 0;
    }

    else
    {
      int v3 = (int)((CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 928)) / 3600.0);
    }

    LOBYTE(v99) = 10;
    BYTE1(v99) = v3;
    WORD1(v99) = 0;
    *(void *)((char *)&v99 + 4) = *(void *)(a1 + 952);
    HIDWORD(v99) = *(_DWORD *)(a1 + 960);
    float32x2_t v6 = *(float32x2_t *)(a1 + 964);
    float32x2_t v100 = v6;
    float v7 = *(float *)(a1 + 972);
    float v101 = v7;
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    uint8_t v8 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      double v9 = *(float *)(a1 + 952);
      double v10 = *(float *)(a1 + 956);
      double v11 = *(float *)(a1 + 960);
      double v12 = *(float *)(a1 + 964);
      double v13 = *(float *)(a1 + 968);
      double v14 = *(float *)(a1 + 972);
      uint64_t v15 = *(void *)(a1 + 928);
      *(_DWORD *)__n128 buf = 134350848;
      *(double *)&uint8_t buf[4] = v9;
      __int16 v84 = 2050;
      double v85 = v10;
      __int16 v86 = 2050;
      double v87 = v11;
      __int16 v88 = 2050;
      double v89 = v12;
      __int16 v90 = 2050;
      double v91 = v13;
      __int16 v92 = 2050;
      double v93 = v14;
      __int16 v94 = 2050;
      uint64_t v95 = v15;
      __int16 v96 = 1026;
      int v97 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "GyroBiasFit,slope.x,%{public}f,.y,%{public}f.z,%{public}f,intercept.x,%{public}f,.y,%{public}f.z,%{public}f,last MiniCal,%{public}f,hours,%{public}d",  buf,  0x4Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      double v66 = *(float *)(a1 + 952);
      double v67 = *(float *)(a1 + 956);
      double v68 = *(float *)(a1 + 960);
      double v69 = *(float *)(a1 + 964);
      double v70 = *(float *)(a1 + 968);
      double v71 = *(float *)(a1 + 972);
      uint64_t v72 = *(void *)(a1 + 928);
      LODWORD(__dst[0]) = 134350848;
      *(double *)((char *)__dst + 4) = v66;
      WORD6(__dst[0]) = 2050;
      *(double *)((char *)__dst + 14) = v67;
      WORD3(__dst[1]) = 2050;
      *((double *)&__dst[1] + 1) = v68;
      LOWORD(__dst[2]) = 2050;
      *(double *)((char *)&__dst[2] + 2) = v69;
      WORD5(__dst[2]) = 2050;
      *(double *)((char *)&__dst[2] + 12) = v70;
      WORD2(__dst[3]) = 2050;
      *(double *)((char *)&__dst[3] + 6) = v71;
      HIWORD(__dst[3]) = 2050;
      *(void *)&__dst[4] = v72;
      WORD4(__dst[4]) = 1026;
      *(_DWORD *)((char *)&__dst[4] + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v3;
      __int128 v73 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "GyroBiasFit,slope.x,%{public}f,.y,%{public}f.z,%{public}f,intercept.x,%{public}f,.y,%{public}f.z,% {public}f,lastMiniCal,%{public}f,hours,%{public}d",  __dst,  78);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }

    float32x2_t v100 = vadd_f32(*(float32x2_t *)(a1 + 904), v6);
    float v101 = *(float *)(a1 + 912) + v7;
    sub_100CAA158(a1 + 192, &v99, 0LL);
  }

void sub_100C96BBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_100C96BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)a2 + 208LL))(v12, a2);
  if (*((double *)&v13 + 1) >= 0.0)
  {
    uint64_t v5 = sub_1006E27E8();
    v6[1] = 3221225472LL;
    __int128 v7 = v12[0];
    __int128 v8 = v12[1];
    v6[0] = _NSConcreteStackBlock;
    v6[2] = sub_100C96DE8;
    void v6[3] = &unk_10184DA38;
    _DWORD v6[4] = v2;
    __int128 v9 = v12[2];
    __int128 v10 = v13;
    sub_1006E2970(v5, (uint64_t)v6);
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10187C1D8);
    }
    int v3 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Warning: No gmm data available", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10187C1D8);
      }
      v11[0] = 0;
      int v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Warning: No gmm data available",  v11,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::sendGmmDataAsync()_block_invoke", "%s\n", v4);
    }
  }

void sub_100C96DE8(uint64_t a1)
{
}

void sub_100C96DF8(uint64_t a1, double *a2)
{
  if ((*(_BYTE *)(a1 + 648) & 0x10) != 0)
  {
    float v5 = a2[5];
    *(float *)(a1 + 864) = v5;
    LOBYTE(v12) = 17;
    *(_WORD *)((char *)&v12 + 1) = 0;
    BYTE3(v12) = 0;
    float v6 = a2[3];
    float v7 = a2[6];
    *((float *)&v12 + 1) = v6;
    float v13 = v7;
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934580 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_10126942C();
  }

  dispatch_once(&qword_101934580, &stru_10187C1D8);
LABEL_3:
  __int128 v8 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    float v9 = a2[3];
    *(_DWORD *)__n128 buf = 134217984;
    double v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GeomagneticModelData.magnitude,%f", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    float v10 = a2[3];
    int v14 = 134217984;
    double v15 = v10;
    double v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "GeomagneticModelData.magnitude,%f",  COERCE_DOUBLE(&v14));
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::sendGmmData(const CLMotionTypeGeomagneticModelData &)",  "%s\n",  v11);
  }

  sub_100CAA478(a1 + 192, &v12, 0LL);
}

void sub_100C97010(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 648) & 2) != 0)
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_10187C138);
    }
    float v5 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(v1 + 888);
      int v7 = *(_DWORD *)(v1 + 892);
      int v8 = *(_DWORD *)(v1 + 896);
      *(_DWORD *)__n128 buf = 67240704;
      int v22 = v6;
      __int16 v23 = 1026;
      int v24 = v7;
      __int16 v25 = 1026;
      int v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[SidebandSensorFusion] configuring,enableCount,%{public}d,latencyCount,%{public}d,snoopCount,%{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_10187C138);
      }
      int v11 = *(_DWORD *)(v1 + 888);
      int v12 = *(_DWORD *)(v1 + 892);
      int v13 = *(_DWORD *)(v1 + 896);
      v16[0] = 67240704;
      v16[1] = v11;
      __int16 v17 = 1026;
      int v18 = v12;
      __int16 v19 = 1026;
      int v20 = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "[SidebandSensorFusion] configuring,enableCount,%{public}d,latencyCount,%{public}d,snoopCount,%{public}d",  v16,  20);
      double v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::updateSidebandSensorFusion()_block_invoke",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    else {
      int v9 = 2;
    }
    int v10 = *(_DWORD *)(v1 + 888) > 0;
    if (*(unsigned __int8 *)(v1 + 226) != v9 || *(unsigned __int8 *)(v1 + 225) != v10)
    {
      sub_100C973A4();
      *(_BYTE *)(v1 + 226) = v9;
      *(_BYTE *)(v1 + 225) = v10;
      (*(void (**)(uint64_t, void))(*(void *)v1 + 552LL))(v1, 0LL);
      (*(void (**)(uint64_t))(*(void *)v1 + 568LL))(v1);
    }
  }

  else
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_10187C138);
    }
    uint64_t v2 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "[SidebandSensorFusion] Feature not available.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_10187C138);
      }
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  17LL,  "[SidebandSensorFusion] Feature not available.",  v16,  2);
      int v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::updateSidebandSensorFusion()_block_invoke",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

uint64_t sub_100C973A4()
{
  unint64_t v0 = sub_1004F97F4();
  if ((v0 & 0x200000) != 0)
  {
    sub_1006E27E8();
    sub_1006E2A54();
    sub_1006FE6A0();
    sub_100231608();
  }

  return (v0 >> 21) & 1;
}

void sub_100C973E4(uint64_t a1, int a2, int a3)
{
  if (a2 == 14 || !a3)
  {
    int v7 = a3;
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187C0F8);
    }
    int v6 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Setting activityOverride: when in activityType,%d, guarding against unexpected hkActivityType,%d ",  buf,  0xEu);
    }

    int v7 = 0;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187C0F8);
      }
      int v13 = 67109376;
      int v14 = a2;
      __int16 v15 = 1024;
      int v16 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  17LL,  "Setting activityOverride: when in activityType,%d, guarding against unexpected hkActivityType,%d ",  &v13,  14);
      int v9 = (char *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::setActivityOverrideUL(const CMMotionContext::ActivitySession, const CMMotionContext::C MHKWorkoutActivityType)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
      int v7 = 0;
    }
  }

  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187C0F8);
  }
  int v10 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    int v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Setting activityOverride: %d,hkActivityType,%d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187C0F8);
    }
    int v13 = 67109376;
    int v14 = a2;
    __int16 v15 = 1024;
    int v16 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "Setting activityOverride: %d,hkActivityType,%d",  &v13,  14);
    int v12 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::setActivityOverrideUL(const CMMotionContext::ActivitySession, const CMMotionContext::CMH KWorkoutActivityType)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  buf[0] = 15;
  *(_DWORD *)&buf[1] = a2;
  *(_DWORD *)&buf[5] = v7;
  sub_100CAA600(a1 + 192, (uint64_t *)buf, 0LL);
  *(_BYTE *)(a1 + 862) = a2;
}

uint64_t sub_100C97748(uint64_t a1, uint64_t a2, int a3, char a4)
{
  int v6 = sub_1008FA8DC(a1, a2, a3);
  *int v6 = off_10187B528;
  _DWORD v6[4] = off_10187B8E0;
  void v6[5] = off_10187B928;
  _OWORD v6[6] = off_10187B960;
  v6[7] = off_10187B988;
  _WORD v6[8] = off_10187B9D8;
  v6[9] = off_10187BA10;
  v6[10] = off_10187BA50;
  v6[11] = off_10187BA88;
  v6[12] = off_10187BAB8;
  v6[13] = off_10187BB08;
  v6[14] = off_10187BB30;
  v6[15] = off_10187BB98;
  v6[16] = off_10187BBC0;
  v6[17] = off_10187BBE8;
  v6[19] = off_10187BC10;
  v6[20] = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = sub_1006E2838();
  sub_1002E4C3C(a1 + 176, "CLMotionCoprocessorUserInfo", 1LL, 1LL);
  dispatch_queue_t v7 = dispatch_queue_create("CLMotionCoprocessor.Command", 0LL);
  *(_OWORD *)(a1 + 217) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 245) = 0u;
  *(_OWORD *)(a1 + 284) = xmmword_101358CAC;
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 20sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 216) = 1;
  *(void *)(a1 + 271) = 0LL;
  *(void *)(a1 + 263) = 0LL;
  *(void *)(a1 + 276) = 0LL;
  *(_OWORD *)(a1 + 30sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = unk_101358CBC;
  *(_OWORD *)(a1 + 316) = xmmword_101358CCC;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = *(__int128 *)((char *)&xmmword_101358CCC + 12);
  *(_WORD *)(a1 + 344) = 170;
  *(void *)(a1 + 352) = 0LL;
  LODWORD(__p) = 0;
  uint64_t v68 = a1 + 176;
  sub_10023AE2C((unsigned __int8 *)(a1 + 360), "SimulatedStepsPerHours", &__p, 0);
  LODWORD(__p) = 1124794368;
  sub_101206C88((unsigned __int8 *)(a1 + 372), "SimulatedStepLengthCM", &__p, 0);
  LODWORD(__p) = 0;
  sub_10023AE2C((unsigned __int8 *)(a1 + 384), "SimulatedStepCountDurationHours", &__p, 0);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 54sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 50_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 46sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(_OWORD *)(a1 + 42_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(void *)(a1 + 56_Block_object_dispose(va, 8) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0LL;
  *(_BYTE *)(a1 + 592) = 16;
  *(_DWORD *)(a1 + 596) = 0;
  *(_DWORD *)(a1 + 593) = 0;
  *(_OWORD *)(a1 + 60sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = xmmword_1013589A0;
  *(_OWORD *)(a1 + 616) = xmmword_1013589B0;
  *(_OWORD *)(a1 + 632) = xmmword_1013589C0;
  *(_DWORD *)(a1 + 64_Block_object_dispose(va, 8) = 0;
  *(_WORD *)(a1 + 652) = 256;
  *(_WORD *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 68sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 72_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 76sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 80_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 823) = 0LL;
  *(_DWORD *)(a1 + 84sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 3;
  *(void *)(a1 + 86sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  *(_OWORD *)(a1 + 844) = 0u;
  *(_WORD *)(a1 + 86_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 896) = 0;
  *(void *)(a1 + 88_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_WORD *)(a1 + 90sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 900;
  *(_DWORD *)(a1 + 92sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 92_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 96sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 100_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 104sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 108_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 112sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 116_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 120sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_DWORD *)(a1 + 1232) = 0;
  LOBYTE(__p) = (sub_1004F97F4() & 0x80000) != 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 1240), "KickOffGyroBiasFit", (unsigned __int8 *)&__p, 0);
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 136sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 132_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 128sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 124_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1385) = 0u;
  *(void *)(a1 + 140_Block_object_dispose(va, 8) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1416) = 0;
  *(_BYTE *)(a1 + 142sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  *(void *)(a1 + 1424) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 144_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 148sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  int v8 = operator new(0x48uLL);
  sub_1010DDBC0(&__p, "PressureTemperatureChangeSmallWindow");
  sub_100F5E610(v8, 7LL, &__p);
  uint64_t v69 = a1 + 1528;
  *(void *)(a1 + 152_Block_object_dispose(va, 8) = v8;
  if (v76 < 0) {
    operator delete(__p);
  }
  int v9 = operator new(0x48uLL);
  sub_1010DDBC0(&__p, "PressureTemperatureChangeMediumWindow");
  sub_100F5E610(v9, 24LL, &__p);
  uint64_t v67 = a1 + 1536;
  *(void *)(a1 + 1536) = v9;
  if (v76 < 0) {
    operator delete(__p);
  }
  int v10 = operator new(0x48uLL);
  sub_1010DDBC0(&__p, "PressureTemperatureChangeLargeWindow");
  sub_100F5E610(v10, 469LL, &__p);
  uint64_t v66 = a1 + 1544;
  *(void *)(a1 + 1544) = v10;
  if (v76 < 0) {
    operator delete(__p);
  }
  int v11 = operator new(0x48uLL);
  sub_1010DDBC0(&__p, "PressureTemperatureChangeStepsSmallWindow");
  sub_100F5E610(v11, 7LL, &__p);
  *(void *)(a1 + 1552) = v11;
  if (v76 < 0) {
    operator delete(__p);
  }
  int v12 = operator new(0x48uLL);
  sub_1010DDBC0(&__p, "PressureTemperatureChangeStepsMediumWindow");
  sub_100F5E610(v12, 24LL, &__p);
  *(void *)(a1 + 156sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v12;
  if (v76 < 0) {
    operator delete(__p);
  }
  *(_BYTE *)(a1 + 156_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 1576) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 160sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 164_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 168sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1721) = 0u;
  LODWORD(__p) = -1;
  sub_10023AE2C((unsigned __int8 *)(a1 + 1740), "WaterSubmersionStateOverride", &__p, 0);
  LOBYTE(__p) = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 1752), "WaterSubmersionAlert", (unsigned __int8 *)&__p, 0);
  *(_WORD *)(a1 + 1755) = 0;
  *(void *)(a1 + 176sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0x42C80000FFFFFFF6LL;
  *(_BYTE *)(a1 + 176_Block_object_dispose(va, 8) = 59;
  *(void *)(a1 + 1769) = 0LL;
  *(_WORD *)(a1 + 1777) = 0;
  *(int32x4_t *)(a1 + 1779) = vdupq_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 1795) = 2139095039;
  *(_BYTE *)(a1 + 1799) = 1;
  *(void *)(a1 + 180sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0x7F7FFFFFBF800000LL;
  *(void *)(a1 + 180_Block_object_dispose(va, 8) = 2139095039LL;
  *(_WORD *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 184sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(void *)(a1 + 1856) = 0LL;
  *(_DWORD *)(a1 + 1864) = 1065353216;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 188_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 1904) = 1065353216;
  sub_100B4FAB8("IgnoreGyroBiasFit");
  uint64_t v13 = sub_1006E27E8();
  sub_100413284(v13, &__p);
  int v14 = (_BYTE *)(a1 + 868);
  char v15 = sub_1002A6F64((uint64_t)__p, "LogMotionStateReplay", (BOOL *)(a1 + 868));
  char v16 = v15;
  __int16 v17 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v16 & 1) != 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  if ((v15 & 1) == 0) {
LABEL_16:
  }
    *int v14 = 0;
LABEL_17:
  uint64_t v20 = sub_1006E27E8();
  sub_100413284(v20, &__p);
  uint64_t v21 = (_BYTE *)(a1 + 869);
  char v22 = sub_1002A6F64((uint64_t)__p, "LogGyro", (BOOL *)(a1 + 869));
  char v23 = v22;
  int v24 = v75;
  if (!v75) {
    goto LABEL_21;
  }
  __int16 v25 = (unint64_t *)&v75->__shared_owners_;
  do
    unint64_t v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_21:
    if ((v22 & 1) != 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if ((v23 & 1) == 0) {
LABEL_22:
  }
    *uint64_t v21 = 0;
LABEL_23:
  LOBYTE(__p) = 0;
  sub_1012049AC(v72, "GyroNonlinearLogBiasFit", (unsigned __int8 *)&__p, 0);
  if (v72[0]) {
    *uint64_t v21 = v72[1];
  }
  std::stringbuf::string_type __p = (void *)900;
  sub_10120AA44(v70, "ProactiveRevisitTime", &__p, 0);
  if (v71 >= 0xFFFF)
  {
    *(_WORD *)(a1 + 90sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = -1;
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    uint64_t v31 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Proactive gyro calibration disabled.",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10187C158);
      }
      LOWORD(v73[0]) = 0;
      unint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Proactive gyro calibration disabled.",  v73,  2,  v66,  v67,  v68,  v69);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionCoprocessor::CLMotionCoprocessor(const char *, int, BOOL)",  "%s\n",  v30);
      goto LABEL_87;
    }
  }

  else
  {
    *(_WORD *)(a1 + 90sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v71;
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    uint64_t v27 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      int v28 = *(unsigned __int16 *)(a1 + 900);
      LODWORD(__p) = 67240192;
      HIDWORD(__p) = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "proactiveRevistTime,%{public}d sec",  (uint8_t *)&__p,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10187C158);
      }
      int v29 = *(unsigned __int16 *)(a1 + 900);
      v73[0] = 67240192;
      v73[1] = v29;
      unint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "proactiveRevistTime,%{public}d sec",  v73,  8,  v66,  v67,  v68,  v69);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionCoprocessor::CLMotionCoprocessor(const char *, int, BOOL)",  "%s\n",  v30);
LABEL_87:
    }
  }

  if (*(_BYTE *)(a1 + 1241))
  {
    *(_DWORD *)(a1 + 92sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1;
    *(_OWORD *)(a1 + 924) = 0u;
    *(_OWORD *)(a1 + 94sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
    *(_OWORD *)(a1 + 956) = 0u;
    *(_OWORD *)(a1 + 972) = 0u;
    *(_OWORD *)(a1 + 98_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1004) = 0u;
    *(_OWORD *)(a1 + 102sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
    *(_OWORD *)(a1 + 1036) = 0u;
    *(_OWORD *)(a1 + 1052) = 0u;
    *(_OWORD *)(a1 + 106_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1084) = 0u;
    *(_OWORD *)(a1 + 110sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
    *(_OWORD *)(a1 + 1116) = 0u;
    *(_OWORD *)(a1 + 1132) = 0u;
    *(_OWORD *)(a1 + 114_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 1164) = 0u;
    *(_OWORD *)(a1 + 118sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
    *(_OWORD *)(a1 + 1196) = 0u;
    *(_OWORD *)(a1 + 1212) = 0u;
    *(_OWORD *)(a1 + 1224) = 0u;
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    uint64_t v32 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Kick-Off gyro bias fit using 0-fit",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10187C158);
      }
      LOWORD(v73[0]) = 0;
      LODWORD(v65) = 2;
      float32x2_t v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Kick-Off gyro bias fit using 0-fit",  v73,  v65);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionCoprocessor::CLMotionCoprocessor(const char *, int, BOOL)",  "%s\n",  v63);
    }
  }

  if ((a4 & 1) == 0)
  {
    int v33 = (void *)sub_1006E2838();
    sub_1003CC884((uint64_t)sub_100C98AD8, a1, v33, &__p);
    uint64_t v34 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v35 = *(void *)(a1 + 1304);
    *(void *)(a1 + 1304) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
      uint64_t v36 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v36) {
        (*(void (**)(void *))(*(void *)v36 + 8LL))(v36);
      }
    }

    [*(id *)(*(void *)(a1 + 1304) + 16) register:*(void *)(*(void *)(a1 + 1304) + 8) forNotification:7 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1304) + 16) register:*(void *)(*(void *)(a1 + 1304) + 8) forNotification:3 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1304) + 16) register:*(void *)(*(void *)(a1 + 1304) + 8) forNotification:14 registrationInfo:0];
    unint64_t v37 = (void *)sub_1006E2838();
    sub_10043AC3C((uint64_t)sub_100C98AE0, a1, v37, &__p);
    BOOL v38 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v39 = *(void *)(a1 + 1320);
    *(void *)(a1 + 132sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v38;
    if (v39)
    {
      (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
      uint64_t v40 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v40) {
        (*(void (**)(void *))(*(void *)v40 + 8LL))(v40);
      }
    }

    [*(id *)(*(void *)(a1 + 1320) + 16) register:*(void *)(*(void *)(a1 + 1320) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1320) + 16) register:*(void *)(*(void *)(a1 + 1320) + 8) forNotification:22 registrationInfo:0];
    unint64_t v41 = (void *)sub_1006E2838();
    sub_10060B0A4((uint64_t)sub_100C98AFC, a1, v41, &__p);
    unint64_t v42 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v43 = *(void *)(a1 + 1352);
    *(void *)(a1 + 1352) = v42;
    if (v43)
    {
      (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
      BOOL v44 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v44) {
        (*(void (**)(void *))(*(void *)v44 + 8LL))(v44);
      }
    }

    [*(id *)(*(void *)(a1 + 1352) + 16) register:*(void *)(*(void *)(a1 + 1352) + 8) forNotification:0 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1352) + 16) register:*(void *)(*(void *)(a1 + 1352) + 8) forNotification:3 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1352) + 16) register:*(void *)(*(void *)(a1 + 1352) + 8) forNotification:4 registrationInfo:0];
    int v45 = (void *)sub_1006E2838();
    sub_100EE2800((uint64_t)sub_100C98B04, a1, v45, &__p);
    int v46 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v47 = *(void *)(a1 + 1312);
    *(void *)(a1 + 1312) = v46;
    if (v47)
    {
      (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
      uint64_t v48 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v48) {
        (*(void (**)(void *))(*(void *)v48 + 8LL))(v48);
      }
    }

    [*(id *)(*(void *)(a1 + 1312) + 16) register:*(void *)(*(void *)(a1 + 1312) + 8) forNotification:6 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1312) + 16) register:*(void *)(*(void *)(a1 + 1312) + 8) forNotification:10 registrationInfo:0];
    if (objc_opt_class(&OBJC_CLASS___MCProfileConnection)) {
      *(_BYTE *)(a1 + 1736) = objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection"),  "isHealthDataSubmissionAllowed");
    }
    uint64_t v49 = (void *)sub_1006E2838();
    sub_10036B3B4((uint64_t)sub_100C98B6C, a1, v49, &__p);
    unint64_t v50 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v51 = *(void *)(a1 + 1360);
    *(void *)(a1 + 136sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v50;
    if (v51)
    {
      (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
      uint64_t v52 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v52) {
        (*(void (**)(void *))(*(void *)v52 + 8LL))(v52);
      }
    }

    [*(id *)(*(void *)(a1 + 1360) + 16) register:*(void *)(*(void *)(a1 + 1360) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1360) + 16) register:*(void *)(*(void *)(a1 + 1360) + 8) forNotification:6 registrationInfo:0];
    uint64_t v53 = (void *)sub_1006E2838();
    sub_100468458((uint64_t)sub_100C98B74, a1, v53, &__p);
    unint64_t v54 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v55 = *(void *)(a1 + 1368);
    *(void *)(a1 + 136_Block_object_dispose(va, 8) = v54;
    if (v55)
    {
      (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
      unint64_t v56 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v56) {
        (*(void (**)(void *))(*(void *)v56 + 8LL))(v56);
      }
    }

    [*(id *)(*(void *)(a1 + 1368) + 16) register:*(void *)(*(void *)(a1 + 1368) + 8) forNotification:2 registrationInfo:0];
    __int16 v57 = (void *)sub_1006E2838();
    sub_100D76CE0((uint64_t)sub_100C98D28, a1, v57, &__p);
    double v58 = __p;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v59 = *(void *)(a1 + 1376);
    *(void *)(a1 + 1376) = v58;
    if (v59)
    {
      (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
      double v60 = __p;
      std::stringbuf::string_type __p = 0LL;
      if (v60) {
        (*(void (**)(void *))(*(void *)v60 + 8LL))(v60);
      }
    }

    [*(id *)(*(void *)(a1 + 1376) + 16) register:*(void *)(*(void *)(a1 + 1376) + 8) forNotification:0 registrationInfo:0];
    if (*v14)
    {
      sub_100C98F00(a1);
      sub_100C98FA0(a1);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      __int128 v61 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_INFO,  "[OscarEmuReplay] Started.",  (uint8_t *)&__p,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187C0D8);
        }
        LOWORD(v73[0]) = 0;
        LODWORD(v65) = 2;
        float v64 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "[OscarEmuReplay] Started.",  v73,  v65);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionCoprocessor::CLMotionCoprocessor(const char *, int, BOOL)",  "%s\n",  v64);
      }
    }
  }

  return a1;
}

void sub_100C9870C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void ***a11, void ***a12, uint64_t a13, void ***a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  uint64_t v32 = *v29;
  *int v29 = 0LL;
  if (v32) {
    sub_100CAA788((int)v29, v32);
  }
  int v33 = *v28;
  *int v28 = 0LL;
  if (v33) {
    sub_100CAA788((int)v28, v33);
  }
  uint64_t v34 = *a11;
  *a11 = 0LL;
  if (v34) {
    sub_100CAA788((int)a11, v34);
  }
  uint64_t v35 = *a12;
  *a12 = 0LL;
  if (v35) {
    sub_100CAA788((int)a12, v35);
  }
  uint64_t v36 = *a14;
  *a14 = 0LL;
  if (v36) {
    sub_100CAA788((int)a14, v36);
  }
  sub_100231C10(v26 + 185);
  sub_100231C10(v27);
  uint64_t v37 = v26[172];
  v26[172] = 0LL;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  uint64_t v38 = v26[171];
  v26[171] = 0LL;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
  }
  uint64_t v39 = v26[170];
  v26[170] = 0LL;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
  }
  uint64_t v40 = v26[169];
  v26[169] = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  uint64_t v41 = v26[168];
  v26[168] = 0LL;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  uint64_t v42 = v26[167];
  v26[167] = 0LL;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
  }
  uint64_t v43 = v26[166];
  v26[166] = 0LL;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
  }
  uint64_t v44 = v26[165];
  v26[165] = 0LL;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
  }
  uint64_t v45 = v26[164];
  v26[164] = 0LL;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
  }
  uint64_t v46 = v26[163];
  v26[163] = 0LL;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
  }
  uint64_t v47 = v26[73];
  v26[73] = 0LL;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
  }
  uint64_t v48 = (void *)v26[68];
  if (v48)
  {
    v26[69] = v48;
    operator delete(v48);
  }

  sub_10046AD28(v26 + 62);
  uint64_t v49 = (void *)v26[59];
  if (v49)
  {
    v26[60] = v49;
    operator delete(v49);
  }

  unint64_t v50 = (void *)v26[56];
  if (v50)
  {
    v26[57] = v50;
    operator delete(v50);
  }

  uint64_t v51 = (void *)v26[53];
  if (v51)
  {
    v26[54] = v51;
    operator delete(v51);
  }

  uint64_t v52 = (void *)v26[50];
  if (v52)
  {
    v26[51] = v52;
    operator delete(v52);
  }

  sub_1002E4CB0(a13);
  sub_1008FA954(v26);
  _Unwind_Resume(a1);
}

void sub_100C98AC8()
{
}

void sub_100C98AD0()
{
}

void sub_100C98AD8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
}

void sub_100C98AE0(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  if (*a2 == 22 || *a2 == 5) {
    sub_100CA7B7C(a4, a2, a3);
  }
}

void sub_100C98AFC(uint64_t a1, int *a2, int *a3, _BYTE *a4)
{
}

void sub_100C98B04(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v5 = *a2;
  uint64_t v6 = sub_1006E27E8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100CA93A8;
  void v7[3] = &unk_10182B540;
  _DWORD v7[4] = a4;
  int v8 = v5;
  sub_1006E2970(v6, (uint64_t)v7);
}

void sub_100C98B6C(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
}

void sub_100C98B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187C178);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    int v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionCoprocessor::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187C178);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      int v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionCoprocessor::onMotionStateMediatorNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C98D0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C98D28(uint64_t a1, _DWORD *a2, uint8_t *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187C178);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionCoprocessor::onPencilStateNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187C178);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionCoprocessor::onPencilStateNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100CA9910(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100C98EE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C98F00(uint64_t a1)
{
  uint64_t result = sub_1006E5C40();
  if (result)
  {
    if (!*(void *)(a1 + 872))
    {
      int v3 = operator new(0x20uLL);
      void *v3 = off_1018A2210;
      void *v3 = &off_10185EB50;
      v3[1] = 0LL;
      _OWORD v3[2] = sub_100CA8C8C;
      v3[3] = a1;
      *(void *)(a1 + 872) = v3;
      uint64_t v4 = sub_1006E5C40();
      return sub_1006DCB40(v4, 0, *(void *)(a1 + 872), 0.01);
    }
  }

  return result;
}

void sub_100C98F8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100C98FA0(uint64_t a1)
{
  uint64_t result = sub_1006FE6A0();
  if (result)
  {
    if (!*(void *)(a1 + 880))
    {
      int v3 = operator new(0x20uLL);
      void *v3 = off_1018A2210;
      void *v3 = &off_10185EBF0;
      v3[1] = 0LL;
      _OWORD v3[2] = sub_100CA8B04;
      v3[3] = a1;
      *(void *)(a1 + 88sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v3;
      uint64_t v4 = sub_1006FE6A0();
      return sub_1006DCB40(v4, 0, *(void *)(a1 + 880), 0.01);
    }
  }

  return result;
}

void sub_100C9902C(_Unwind_Exception *a1)
{
}

uint64_t sub_100C99040(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }

  int v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 12sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(void *)(a1 + 96) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v6;
    operator delete(v6);
  }

  return a1;
}

uint64_t sub_100C990C0(uint64_t a1)
{
  *(void *)a1 = off_10187B528;
  *(void *)(a1 + 32) = off_10187B8E0;
  *(void *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = off_10187B928;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_10187B960;
  *(void *)(a1 + 56) = off_10187B988;
  *(void *)(a1 + 64) = off_10187B9D8;
  *(void *)(a1 + 72) = off_10187BA10;
  *(void *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = off_10187BA50;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = off_10187BA88;
  *(void *)(a1 + 96) = off_10187BAB8;
  *(void *)(a1 + 104) = off_10187BB08;
  *(void *)(a1 + 112) = off_10187BB30;
  *(void *)(a1 + 12sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = off_10187BB98;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = off_10187BBC0;
  *(void *)(a1 + 136) = off_10187BBE8;
  *(void *)(a1 + 152) = off_10187BC10;
  if (*(_BYTE *)(a1 + 868))
  {
    sub_100C9956C(a1);
    sub_100C995C0(a1);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[OscarEmuReplay] Stopped", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      v31[0] = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "[OscarEmuReplay] Stopped",  v31,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLMotionCoprocessor::~CLMotionCoprocessor()", "%s\n", v30);
    }
  }

  sub_100019CEC(a1 + 1872);
  sub_100019CEC(a1 + 1832);
  int v3 = *(void **)(a1 + 1704);
  if (v3)
  {
    *(void *)(a1 + 1712) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 1680);
  if (v4)
  {
    *(void *)(a1 + 168_Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

  int v5 = *(void **)(a1 + 1656);
  if (v5)
  {
    *(void *)(a1 + 1664) = v5;
    operator delete(v5);
  }

  uint64_t v6 = *(void **)(a1 + 1632);
  if (v6)
  {
    *(void *)(a1 + 164sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v6;
    operator delete(v6);
  }

  uint64_t v7 = *(void **)(a1 + 1608);
  if (v7)
  {
    *(void *)(a1 + 1616) = v7;
    operator delete(v7);
  }

  char v8 = *(void ***)(a1 + 1560);
  *(void *)(a1 + 156sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  if (v8) {
    sub_100CAA788(a1 + 1560, v8);
  }
  int v9 = *(void ***)(a1 + 1552);
  *(void *)(a1 + 1552) = 0LL;
  if (v9) {
    sub_100CAA788(a1 + 1552, v9);
  }
  int v10 = *(void ***)(a1 + 1544);
  *(void *)(a1 + 1544) = 0LL;
  if (v10) {
    sub_100CAA788(a1 + 1544, v10);
  }
  char v11 = *(void ***)(a1 + 1536);
  *(void *)(a1 + 1536) = 0LL;
  if (v11) {
    sub_100CAA788(a1 + 1536, v11);
  }
  int v12 = *(void ***)(a1 + 1528);
  *(void *)(a1 + 152_Block_object_dispose(va, 8) = 0LL;
  if (v12) {
    sub_100CAA788(a1 + 1528, v12);
  }
  sub_100231C10((void *)(a1 + 1480));
  sub_100231C10((void *)(a1 + 1432));
  uint64_t v13 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 1368);
  *(void *)(a1 + 136_Block_object_dispose(va, 8) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1360);
  *(void *)(a1 + 136sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 1352);
  *(void *)(a1 + 1352) = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 1344);
  *(void *)(a1 + 1344) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 1336);
  *(void *)(a1 + 1336) = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 1328);
  *(void *)(a1 + 132_Block_object_dispose(va, 8) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 1320);
  *(void *)(a1 + 132sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 1312);
  *(void *)(a1 + 1312) = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 1304);
  *(void *)(a1 + 1304) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  int v24 = *(void **)(a1 + 544);
  if (v24)
  {
    *(void *)(a1 + 552) = v24;
    operator delete(v24);
  }

  sub_10046AD28((void *)(a1 + 496));
  __int16 v25 = *(void **)(a1 + 472);
  if (v25)
  {
    *(void *)(a1 + 48sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v25;
    operator delete(v25);
  }

  unint64_t v26 = *(void **)(a1 + 448);
  if (v26)
  {
    *(void *)(a1 + 456) = v26;
    operator delete(v26);
  }

  uint64_t v27 = *(void **)(a1 + 424);
  if (v27)
  {
    *(void *)(a1 + 432) = v27;
    operator delete(v27);
  }

  int v28 = *(void **)(a1 + 400);
  if (v28)
  {
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = v28;
    operator delete(v28);
  }

  sub_1002E4CB0(a1 + 176);
  sub_1008FA954((void *)a1);
  return a1;
}

void sub_100C99560(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

uint64_t sub_100C9956C(uint64_t a1)
{
  uint64_t result = sub_1006E5C40();
  if (result && *(void *)(a1 + 872))
  {
    uint64_t v3 = sub_1006E5C40();
    sub_1006DD2A0(v3, 0, *(void *)(a1 + 872));
    uint64_t result = *(void *)(a1 + 872);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
    *(void *)(a1 + 872) = 0LL;
  }

  return result;
}

uint64_t sub_100C995C0(uint64_t a1)
{
  uint64_t result = sub_1006FE6A0();
  if (result && *(void *)(a1 + 880))
  {
    uint64_t v3 = sub_1006FE6A0();
    sub_1006DD2A0(v3, 0, *(void *)(a1 + 880));
    uint64_t result = *(void *)(a1 + 880);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
    *(void *)(a1 + 88sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  }

  return result;
}

void sub_100C99694(_BYTE *a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 31:
      if (a3)
      {
        if (!a1[1419])
        {
          uint64_t v6 = *(void (**)(_BYTE *, uint64_t))(*(void *)a1 + 544LL);
LABEL_51:
          v6(a1, 1LL);
        }
      }

      else if (a1[1419])
      {
        uint64_t v6 = *(void (**)(_BYTE *, uint64_t))(*(void *)a1 + 544LL);
LABEL_57:
        v6(a1, 0LL);
      }

      return;
    case 32:
    case 33:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
      return;
    case 34:
      if (a3)
      {
        if (a1[1420]) {
          return;
        }
        a1[1420] = 1;
        BYTE1(v20[0]) = 1;
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_10187C0B8);
        }
        uint64_t v7 = (os_log_s *)qword_1019344C8;
        if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Turning on AOP SPL", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344C0 != -1) {
            dispatch_once(&qword_1019344C0, &stru_10187C0B8);
          }
          LOWORD(v19[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Turning on AOP SPL",  v19,  2,  v19[0]);
LABEL_81:
          uint64_t v18 = (uint8_t *)v8;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::numberOfSpectatorsChanged(int, size_t)",  "%s\n",  v8);
          if (v18 != buf) {
            free(v18);
          }
        }
      }

      else
      {
        if (!a1[1420]) {
          return;
        }
        a1[1420] = 0;
        BYTE1(v20[0]) = 0;
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_10187C0B8);
        }
        uint64_t v17 = (os_log_s *)qword_1019344C8;
        if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Turning off AOP SPL", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344C0 != -1) {
            dispatch_once(&qword_1019344C0, &stru_10187C0B8);
          }
          LOWORD(v19[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Turning off AOP SPL",  v19,  2,  v19[0]);
          goto LABEL_81;
        }
      }

      sub_100CAA7C0((uint64_t)(a1 + 192), (__int16 *)v20, 0LL);
      return;
    case 35:
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      int v9 = (os_log_s *)qword_1019344C8;
      if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__n128 buf = 67240192;
        int v22 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "kNotificationPedometerPathStraightness, numberOfSpectators = %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_10187C0B8);
        }
        v20[0] = 67240192;
        v20[1] = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "kNotificationPedometerPathStraightness, numberOfSpectators = %{public}d",  v20,  8);
        char v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::numberOfSpectatorsChanged(int, size_t)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      return;
    case 40:
      if (a3)
      {
        if (a1[1813]) {
          return;
        }
        a1[1813] = 1;
        __int16 v12 = 305;
      }

      else
      {
        if (!a1[1813]) {
          return;
        }
        a1[1813] = 0;
        __int16 v12 = 49;
      }

      *(_WORD *)__n128 buf = v12;
      sub_100CAFCAC((uint64_t)(a1 + 192), (__int16 *)buf, 0LL);
      return;
    case 41:
      if (a3)
      {
        if (a1[1814]) {
          return;
        }
        a1[1814] = 1;
        __int16 v13 = 308;
      }

      else
      {
        if (!a1[1814]) {
          return;
        }
        a1[1814] = 0;
        __int16 v13 = 52;
      }

      *(_WORD *)__n128 buf = v13;
      sub_100CAFE28((uint64_t)(a1 + 192), (__int16 *)buf, 0LL);
      return;
    case 43:
      if (a3)
      {
        if (!a1[1815])
        {
          a1[1815] = 1;
          __int16 v14 = 310;
LABEL_54:
          *(_WORD *)__n128 buf = v14;
          sub_100CAFFA4((uint64_t)(a1 + 192), (__int16 *)buf, 0LL);
        }
      }

      else if (a1[1815])
      {
        a1[1815] = 0;
        __int16 v14 = 54;
        goto LABEL_54;
      }

      return;
    case 44:
      if (a3)
      {
        if (a1[1816]) {
          return;
        }
        a1[1816] = 1;
        __int16 v15 = 311;
      }

      else
      {
        if (!a1[1816]) {
          return;
        }
        a1[1816] = 0;
        __int16 v15 = 55;
      }

      *(_WORD *)__n128 buf = v15;
      sub_100CB0120((uint64_t)(a1 + 192), (__int16 *)buf, 0LL);
      return;
    case 45:
      if (a3)
      {
        if (a1[1817]) {
          return;
        }
        a1[1817] = 1;
        __int16 v16 = 312;
      }

      else
      {
        if (!a1[1817]) {
          return;
        }
        a1[1817] = 0;
        __int16 v16 = 56;
      }

      *(_WORD *)__n128 buf = v16;
      sub_100CB029C((uint64_t)(a1 + 192), (__int16 *)buf, 0LL);
      return;
    default:
      switch(a2)
      {
        case 0:
          if (a3 && a1[859]) {
            sub_1006DD65C((uint64_t)a1, 0LL, (uint64_t)(a1 + 680), 160LL);
          }
          break;
        case 2:
          if (a3) {
            sub_1006DD65C((uint64_t)a1, 2LL, (uint64_t)(a1 + 840), 16LL);
          }
          break;
        case 4:
          if (a3 && a1[283] && a1[859]) {
            sub_1006DD65C((uint64_t)a1, 4LL, (uint64_t)(a1 + 284), 60LL);
          }
          break;
        case 7:
          if (!a1[861])
          {
            uint64_t v6 = *(void (**)(_BYTE *, uint64_t))(*(void *)a1 + 200LL);
            if (!a3) {
              goto LABEL_57;
            }
            goto LABEL_51;
          }

          break;
        default:
          return;
      }

      return;
  }

uint64_t sub_100C99DB8()
{
  return 1LL;
}

uint64_t sub_100C99DC0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 648) >> 5) & 1;
}

uint64_t sub_100C99DCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 648) >> 7;
}

void sub_100C99DD8(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C99E44;
  void v5[3] = &unk_10184AF10;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100C99E44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v2 + 856))
  {
    uint64_t v4 = 0LL;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    *(_BYTE *)(v2 + 856) = 1;
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = off_10187B478;
    v3[1] = v2;
    uint64_t v4 = v3;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  if (v4) {
    (*(void (**)(void *))(*v4 + 8LL))(v4);
  }
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100C99EDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C99F04@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((*(_BYTE *)(result + 648) & 2) != 0)
  {
    uint64_t v4 = result;
    uint64_t v3 = operator new(0x18uLL);
    uint64_t result = sub_100C93164((uint64_t)v3, v4);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  *a2 = v3;
  return result;
}

void sub_100C99F54(_Unwind_Exception *a1)
{
}

void sub_100C99F68(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C99FD4;
  void v5[3] = &unk_10184AF10;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

uint64_t sub_100C99FD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v2 + 857))
  {
    uint64_t v3 = 0LL;
  }

  else
  {
    *(_BYTE *)(v2 + 857) = 1;
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = off_10187B4A0;
    v3[1] = v2;
  }

  int v5 = v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  _Block_release(*(const void **)(a1 + 32));
  uint64_t result = (uint64_t)v5;
  int v5 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100C9A05C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C9A080(uint64_t a1, int a2, int a3)
{
  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10187C1F8);
  }
  uint64_t v6 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67109376;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[coprocessor] Client registration changing for stream %d, enable %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10187C1F8);
    }
    v9[0] = 67109376;
    v9[1] = a2;
    __int16 v10 = 1024;
    int v11 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[coprocessor] Client registration changing for stream %d, enable %d",  v9,  14);
    char v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendBatchedSensorClientRegistration(CMMotionCoprocessorCommand::BatchedSensorCli entRegistration::Stream, BOOL)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  buf[0] = 76;
  buf[1] = a2;
  buf[2] = a3;
  sub_100CAA93C(a1 + 192, (__int16 *)buf, 0LL);
}

void sub_100C9A270(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C9A2DC;
  void v5[3] = &unk_10184AF10;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

uint64_t sub_100C9A2DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v2 + 858))
  {
    uint64_t v3 = 0LL;
  }

  else
  {
    *(_BYTE *)(v2 + 85_Block_object_dispose(va, 8) = 1;
    uint64_t v3 = operator new(0x10uLL);
    void *v3 = off_10187B4C8;
    v3[1] = v2;
  }

  int v5 = v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  _Block_release(*(const void **)(a1 + 32));
  uint64_t result = (uint64_t)v5;
  int v5 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_100C9A364( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C9A388(uint64_t a1, int a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67240192;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Override ski lift detection %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v6[0] = 67240192;
    v6[1] = a2;
    int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "Override ski lift detection %{public}d",  v6,  8);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setSkiLiftDetectionOverride(BOOL)", "%s\n", v5);
  }

  buf[1] = a2;
  sub_100CAAF6C(a1 + 192, (__int16 *)buf, 0LL);
}

void sub_100C9A548(uint64_t a1)
{
}

void sub_100C9A554(uint64_t a1, __int128 *a2, dispatch_object_t object, const void *a4)
{
  __int128 v7 = *a2;
  __int128 v13 = a2[1];
  __int128 v8 = a2[3];
  __int128 v14 = a2[2];
  __int128 v15 = v8;
  __int16 v16 = *((_WORD *)a2 + 32);
  __int128 v12 = v7;
  dispatch_retain(object);
  int v9 = _Block_copy(a4);
  uint64_t v10 = sub_1006E27E8();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  uint64_t v11[2] = sub_100C9A5FC;
  void v11[3] = &unk_10187BEA8;
  v11[5] = v9;
  v11[6] = a1;
  _DWORD v11[4] = object;
  sub_1006E2970(v10, (uint64_t)v11);
}

void sub_100C9A5FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_OWORD *)(v2 + 217) = *(_OWORD *)(a1 + 56);
  __int128 v3 = *(_OWORD *)(a1 + 104);
  __int16 v4 = *(_WORD *)(a1 + 120);
  __int128 v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 249) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 233) = v5;
  *(_WORD *)(v2 + 281) = v4;
  *(_OWORD *)(v2 + 265) = v3;
  (*(void (**)(uint64_t, void, void, void))(*(void *)v2 + 560LL))( v2,  0LL,  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  _Block_release(*(const void **)(a1 + 40));
}

void sub_100C9A668(uint64_t a1, void *aBlock)
{
  __int128 v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100C9A6D4;
  void v5[3] = &unk_10184AF10;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100C9A6D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 1384) == 176)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    __int128 v3 = (uint64_t *)(v2 + 1385);
    uint64_t v4 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      *(_DWORD *)__n128 buf = 134218240;
      uint64_t v22 = v5;
      __int16 v23 = 2048;
      uint64_t v24 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "MotionCoprocessor copying the latest TimeSync data machTimestamp,%llu,oscarTimestamp,%llu",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      uint64_t v10 = *v3;
      uint64_t v11 = v3[1];
      int v17 = 134218240;
      uint64_t v18 = v10;
      __int16 v19 = 2048;
      uint64_t v20 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "MotionCoprocessor copying the latest TimeSync data machTimestamp,%llu,oscarTimestamp,%llu",  &v17,  22);
      __int128 v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::getTimeSyncData(CMTimeSyncCallback) const_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    __int128 v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    __int128 v8 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      int v9 = *(unsigned __int8 *)(v2 + 1384);
      *(_DWORD *)__n128 buf = 67109120;
      LODWORD(v22) = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "MotionCoprocessor last received TimeSync has the wrong packet type,%hhu",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      int v14 = *(unsigned __int8 *)(v2 + 1384);
      int v17 = 67109120;
      LODWORD(v1_Block_object_dispose(va, 8) = v14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "MotionCoprocessor last received TimeSync has the wrong packet type,%hhu",  &v17);
      __int16 v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMotionCoprocessor::getTimeSyncData(CMTimeSyncCallback) const_block_invoke",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    __int128 v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v7();
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100C9AA2C(uint64_t a1, uint64_t a2)
{
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_10187C0B8);
  }
  __int128 v3 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)__n128 buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "reply,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    int v5 = *(_DWORD *)(a2 + 1);
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "reply,%d",  v8);
    __int128 v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitPong(const CMMotionCoprocessorReply::Pong *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

void sub_100C9ABE0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 2) < 0x11u)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    uint64_t v6 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 1040;
      int v13 = 72;
      __int16 v14 = 2098;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:received AOP log, log:%{public, location:CMMotionCoprocessorReply_Log}.*P}",  buf,  0x22u);
    }
  }

  else
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    uint64_t v2 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Invalid CMMotionCoprocessorReply::Log structure.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Invalid CMMotionCoprocessorReply::Log structure.",  v7,  2);
      int v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitLog(const CMMotionCoprocessorReply::Log *)",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

uint64_t sub_100C9AE14(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v5 = v4 + *(double *)(a1 + 664);
  unint64_t v7 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  double v8 = 0.0;
  double v9 = 0.0;
  BOOL v10 = v7 >= v6;
  unint64_t v11 = v7 - v6;
  if (v10 && v11 <= 0x7FFFFFFE) {
    double v9 = (double)v11 / 1000000.0;
  }
  *(double *)v181.i64 = *(double *)(a1 + 352) - v9;
  *(double *)&v181.i64[1] = v5 - v9;
  uint64_t v12 = *(void *)(a2 + 68);
  if (v12) {
    double v8 = v5 - (double)((v6 - v12) / 0xF4240);
  }
  *(double *)&__int128 v182 = v8;
  DWORD2(v182) = *(_DWORD *)(a2 + 4);
  BYTE12(v182) = *(_BYTE *)(a2 + 1);
  *(_WORD *)((char *)&v182 + 13) = *(_WORD *)(a2 + 2);
  HIBYTE(v182) = *(_BYTE *)(a2 + 8);
  LOBYTE(v183) = *(_BYTE *)(a2 + 9) != 0;
  *(_WORD *)((char *)&v183 + 1) = *(_BYTE *)(a2 + 10) != 0;
  BYTE3(v183) = *(_BYTE *)(a2 + 11);
  *((void *)&v183 + 1) = v6;
  LODWORD(v184) = *(_DWORD *)(a2 + 32);
  BYTE4(v184) = 0;
  BYTE5(v184) = *(_BYTE *)(a2 + 36);
  DWORD2(v184) = 0;
  LODWORD(v13) = *(unsigned __int8 *)(a2 + 37);
  BYTE12(v184) = *(_BYTE *)(a2 + 37);
  BYTE13(v184) = *(_BYTE *)(a2 + 88);
  BYTE14(v184) = *(_BYTE *)(a2 + 97);
  *(void *)&__int128 v185 = 0LL;
  *(void *)((char *)&v185 + 6) = 0LL;
  LODWORD(v186) = *(_DWORD *)(a2 + 84);
  uint64_t v14 = *(void *)(a2 + 76);
  *((void *)&v186 + 1) = v12;
  *(void *)&__int128 v187 = v14;
  *((void *)&v187 + 1) = *(void *)(a2 + 89);
  __int128 v188 = *(_OWORD *)(a2 + 40);
  *(void *)&__int128 v189 = *(void *)(a2 + 56);
  DWORD2(v189) = *(_DWORD *)(a2 + 64);
  HIDWORD(v189) = *(unsigned __int8 *)(a2 + 38);
  LOBYTE(v19sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 39) != 0;
  WORD2(v19sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  BYTE6(v19sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  WORD4(v19sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  uint64_t v178 = a1;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v15 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    int v16 = *(_DWORD *)(a2 + 4);
    int v17 = *(unsigned __int8 *)(a2 + 1);
    int v18 = *(unsigned __int8 *)(a2 + 2);
    int v19 = *(unsigned __int8 *)(a2 + 3);
    int v166 = *(unsigned __int8 *)(a2 + 11);
    int v168 = *(unsigned __int8 *)(a2 + 8);
    int v170 = *(unsigned __int8 *)(a2 + 9);
    int v172 = *(unsigned __int8 *)(a2 + 10);
    int v174 = *(_DWORD *)(a2 + 12);
    sub_10070D5E8(v16, &v279);
    unsigned int v176 = v13;
    int size = (char)v279.__r_.__value_.__s.__size_;
    std::string::size_type v21 = v279.__r_.__value_.__r.__words[0];
    uint64_t v22 = v181.i64[1];
    uint64_t v154 = v181.i64[0];
    uint64_t v156 = *(void *)(a2 + 24);
    uint64_t v158 = *(void *)(a2 + 16);
    int v160 = *(unsigned __int8 *)(a2 + 38);
    int v162 = *(unsigned __int8 *)(a2 + 39);
    float v23 = *(float *)(a2 + 56);
    float v24 = *(float *)(a2 + 60);
    float v25 = *(float *)(a2 + 64);
    float v27 = *(float *)(a2 + 40);
    float v26 = *(float *)(a2 + 44);
    float v29 = *(float *)(a2 + 48);
    float v28 = *(float *)(a2 + 52);
    int v30 = *(_DWORD *)(a2 + 32);
    int v164 = *(unsigned __int8 *)(a2 + 36);
    sub_10070D5E8(v30, &__p);
    *(void *)&uint8_t buf[4] = "MotionCoprocessor";
    uint64_t v31 = &v279;
    if (size < 0) {
      uint64_t v31 = (std::string *)v21;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    int v193 = v16;
    int v195 = v17;
    int v197 = v18;
    int v199 = v19;
    int v201 = v166;
    int v203 = v168;
    int v205 = v170;
    int v207 = v172;
    int v209 = v174;
    __int16 v211 = v31;
    uint64_t v213 = v22;
    uint64_t v215 = v154;
    uint64_t v217 = v156;
    uint64_t v219 = v158;
    int v221 = v160;
    int v225 = v162;
    int v239 = v30;
    int v241 = v164;
    __int16 v210 = 2080;
    __int16 v242 = 2080;
    double v243 = p_p;
    LODWORD(v13) = v176;
    int v247 = v176 & 1;
    int v249 = (v176 >> 1) & 1;
    int v251 = (v176 >> 2) & 1;
    int v253 = (v176 >> 3) & 1;
    __int16 v200 = 1024;
    __int16 v202 = 1024;
    __int16 v204 = 1024;
    __int16 v206 = 1024;
    __int16 v208 = 1024;
    __int16 v220 = 1024;
    __int16 v224 = 1024;
    __int16 v246 = 1024;
    __int16 v248 = 1024;
    __int16 v250 = 1024;
    __int16 v252 = 1024;
    __int16 v254 = 1024;
    int v255 = (v176 >> 4) & 1;
    int v257 = *(_DWORD *)(a2 + 84);
    __int16 v212 = 2050;
    __int16 v258 = 2050;
    uint64_t v259 = v182;
    int v261 = *(unsigned __int8 *)(a2 + 88);
    uint64_t v263 = *(void *)(a2 + 68);
    uint64_t v265 = *(void *)(a2 + 76);
    int v267 = *(unsigned __int8 *)(a2 + 89);
    int v269 = *(unsigned __int8 *)(a2 + 90);
    int v271 = *(__int16 *)(a2 + 91);
    __int16 v192 = 1026;
    __int16 v194 = 1026;
    __int16 v196 = 1026;
    __int16 v198 = 1026;
    __int16 v238 = 1026;
    __int16 v240 = 1026;
    __int16 v244 = 1026;
    __int16 v256 = 1026;
    __int16 v260 = 1026;
    __int16 v266 = 1026;
    __int16 v268 = 1026;
    __int16 v270 = 1026;
    __int16 v272 = 1026;
    int v273 = *(unsigned __int8 *)(a2 + 97);
    __int16 v214 = 2048;
    __int16 v216 = 2048;
    __int16 v218 = 2048;
    __int16 v222 = 2048;
    __int16 v226 = 2048;
    __int16 v228 = 2048;
    __int16 v230 = 2048;
    __int16 v232 = 2048;
    __int16 v234 = 2048;
    __int16 v236 = 2048;
    __int16 v262 = 2048;
    __int16 v264 = 2048;
    __int16 v274 = 2048;
    uint64_t v275 = 0LL;
    *(_DWORD *)__n128 buf = 136325890;
    double v223 = v26;
    double v227 = v28;
    double v229 = v23;
    double v231 = v24;
    double v233 = v25;
    double v235 = v27;
    double v237 = v29;
    unsigned int v245 = v176;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Type,%s,motionStateUpdate:Motion,%{public}d,conf,%{public}d,Mounted,%{public}d,MountedConf,%{public}d,exitState,%d ,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,motionTypeString,%s,startTime,%{public}f,timestamp,%f,startTimeUL,%lld, nowUL,%lld -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,% f,meanAngleX,%f,pushVectorMagnitude,%f,rawMotionType,%{public}d,rawConf,%{public}d,rawMotionTypeString,%s,vehicula rFlags:%{public}d,motionHint,%d,gpsHint,%d,basebandHint,%d,wifiHint,%d,btHint,%d,workoutDetectionType,%{public}d,w orkoutDetectionTime,%{public}f,vehicularConfidence,%{public}d,workoutDetectionTimeUL,%lld,workoutEscalationTime,%l ld,MotionYouth,%{public}d,YouthClassificationReason,%{public}d,averageALSLux,%{public}d,vehicleType,%{public}d,veh icleShortTermMean,%f",  buf,  0x14Cu);
  }

  uint64_t v33 = v178;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v175 = qword_1019344B8;
    int v134 = *(_DWORD *)(a2 + 4);
    int v135 = *(unsigned __int8 *)(a2 + 1);
    int v136 = *(unsigned __int8 *)(a2 + 2);
    int v137 = *(unsigned __int8 *)(a2 + 3);
    int v165 = *(unsigned __int8 *)(a2 + 11);
    int v167 = *(unsigned __int8 *)(a2 + 8);
    int v169 = *(unsigned __int8 *)(a2 + 9);
    int v171 = *(unsigned __int8 *)(a2 + 10);
    int v173 = *(_DWORD *)(a2 + 12);
    sub_10070D5E8(v134, &__p);
    unsigned int v177 = v13;
    int v138 = (char)__p.__r_.__value_.__s.__size_;
    std::string::size_type v139 = __p.__r_.__value_.__r.__words[0];
    uint64_t v140 = v181.i64[1];
    uint64_t v13 = v181.i64[0];
    uint64_t v155 = *(void *)(a2 + 24);
    uint64_t v157 = *(void *)(a2 + 16);
    int v159 = *(unsigned __int8 *)(a2 + 38);
    float v141 = *(float *)(a2 + 56);
    float v142 = *(float *)(a2 + 60);
    float v143 = *(float *)(a2 + 64);
    float v145 = *(float *)(a2 + 40);
    float v144 = *(float *)(a2 + 44);
    float v147 = *(float *)(a2 + 48);
    float v146 = *(float *)(a2 + 52);
    int v148 = *(_DWORD *)(a2 + 32);
    int v161 = *(unsigned __int8 *)(a2 + 39);
    int v163 = *(unsigned __int8 *)(a2 + 36);
    sub_10070D5E8(v148, &v179);
    *(std::string::size_type *)((char *)v279.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MotionCoprocessor";
    __int16 v149 = &__p;
    if (v138 < 0) {
      __int16 v149 = (std::string *)v139;
    }
    double v150 = (std::string *)v179.__r_.__value_.__r.__words[0];
    if ((v179.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v150 = &v179;
    }
    *(_DWORD *)((char *)&v279.__r_.__value_.__r.__words[1] + 6) = v134;
    HIDWORD(v279.__r_.__value_.__r.__words[2]) = v135;
    *(_DWORD *)((char *)&v280 + 2) = v136;
    int v281 = v137;
    *(_DWORD *)double v283 = v165;
    *(_DWORD *)&v283[6] = v167;
    *(_DWORD *)&v283[12] = v169;
    *(_DWORD *)__int16 v284 = v171;
    *(_DWORD *)&v284[6] = v173;
    *(void *)&v284[12] = v149;
    *(void *)&v285[2] = v140;
    *(void *)&v285[12] = v13;
    *(void *)&v285[22] = v155;
    uint64_t v287 = v157;
    int v289 = v159;
    int v293 = v161;
    int v307 = v148;
    int v309 = v163;
    *(_WORD *)&v284[10] = 2080;
    __int16 v310 = 2080;
    double v311 = v150;
    LOBYTE(v13) = v177;
    int v315 = v177 & 1;
    int v317 = (v177 >> 1) & 1;
    int v319 = (v177 >> 2) & 1;
    int v321 = (v177 >> 3) & 1;
    __int16 v282 = 1024;
    *(_WORD *)&v283[4] = 1024;
    *(_WORD *)&v283[10] = 1024;
    *(_WORD *)&v283[16] = 1024;
    *(_WORD *)&v284[4] = 1024;
    __int16 v288 = 1024;
    __int16 v292 = 1024;
    __int16 v314 = 1024;
    __int16 v316 = 1024;
    __int16 v318 = 1024;
    __int16 v320 = 1024;
    __int16 v322 = 1024;
    int v323 = (v177 >> 4) & 1;
    int v325 = *(_DWORD *)(a2 + 84);
    *(_WORD *)double v285 = 2050;
    __int16 v326 = 2050;
    uint64_t v327 = v182;
    int v329 = *(unsigned __int8 *)(a2 + 88);
    uint64_t v331 = *(void *)(a2 + 68);
    uint64_t v333 = *(void *)(a2 + 76);
    int v335 = *(unsigned __int8 *)(a2 + 89);
    int v337 = *(unsigned __int8 *)(a2 + 90);
    int v339 = *(__int16 *)(a2 + 91);
    WORD2(v279.__r_.__value_.__r.__words[1]) = 1026;
    WORD1(v279.__r_.__value_.__r.__words[2]) = 1026;
    LOWORD(v28sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1026;
    HIWORD(v28sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1026;
    __int16 v306 = 1026;
    __int16 v308 = 1026;
    __int16 v312 = 1026;
    __int16 v324 = 1026;
    __int16 v328 = 1026;
    __int16 v334 = 1026;
    __int16 v336 = 1026;
    __int16 v338 = 1026;
    __int16 v340 = 1026;
    int v341 = *(unsigned __int8 *)(a2 + 97);
    *(_WORD *)&v285[10] = 2048;
    *(_WORD *)&v285[20] = 2048;
    __int16 v286 = 2048;
    __int16 v290 = 2048;
    __int16 v294 = 2048;
    __int16 v296 = 2048;
    __int16 v298 = 2048;
    __int16 v300 = 2048;
    __int16 v302 = 2048;
    __int16 v304 = 2048;
    __int16 v330 = 2048;
    __int16 v332 = 2048;
    __int16 v342 = 2048;
    uint64_t v343 = 0LL;
    LODWORD(v279.__r_.__value_.__l.__data_) = 136325890;
    double v291 = v144;
    double v295 = v146;
    double v297 = v141;
    double v299 = v142;
    double v301 = v143;
    double v303 = v145;
    double v305 = v147;
    unsigned int v313 = v177;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v175,  1LL,  "Type,%s,motionStateUpdate:Motion,%{public}d,conf,%{public}d,Mounted,%{public}d,MountedConf,%{public}d,exitState,%d ,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,motionTypeString,%s,startTime,%{public}f,timestamp,%f,startTimeUL,%lld, nowUL,%lld -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,% f,meanAngleX,%f,pushVectorMagnitude,%f,rawMotionType,%{public}d,rawConf,%{public}d,rawMotionTypeString,%s,vehicula rFlags:%{public}d,motionHint,%d,gpsHint,%d,basebandHint,%d,wifiHint,%d,btHint,%d,workoutDetectionType,%{public}d,w orkoutDetectionTime,%{public}f,vehicularConfidence,%{public}d,workoutDetectionTimeUL,%lld,workoutEscalationTime,%l ld,MotionYouth,%{public}d,YouthClassificationReason,%{public}d,averageALSLux,%{public}d,vehicleType,%{public}d,veh icleShortTermMean,%f",  &v279,  332);
    double v152 = v151;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitMotionStateUpdate(const CMMotionCoprocessorReply::MotionStateUpdate *)",  "%s\n",  v152);
    if (v152 != buf) {
      free(v152);
    }
    uint64_t v33 = v178;
  }

  if (*(_BYTE *)(v33 + 868))
  {
    v279.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101857CC8;
    *(double *)&std::string::size_type v34 = CFAbsoluteTimeGetCurrent();
    v279.__r_.__value_.__l.__size_ = v34;
    HIDWORD(v279.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 4);
    LOBYTE(v28sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 1);
    *(_WORD *)((char *)&v280 + 1) = *(_WORD *)(a2 + 2);
    LODWORD(v34) = *(_DWORD *)(a2 + 8);
    int16x8_t v35 = (int16x8_t)vmovl_u8((uint8x8_t)v34);
    *(int8x8_t *)v35.i8 = vext_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v35.i8, 6uLL);
    *(_DWORD *)((char *)&v280 + 3) = vmovn_s16(v35).u32[0];
    int v281 = *(_DWORD *)(a2 + 12);
    *(int8x16_t *)&v283[2] = vextq_s8(v181, v181, 8uLL);
    *(int8x16_t *)__int16 v284 = vextq_s8(*(int8x16_t *)(a2 + 16), *(int8x16_t *)(a2 + 16), 8uLL);
    v284[16] = *(_BYTE *)(a2 + 38);
    *(_DWORD *)double v285 = *(_DWORD *)(a2 + 44);
    v285[4] = *(_BYTE *)(a2 + 39);
    *(_OWORD *)&_OWORD v285[8] = *(_OWORD *)(a2 + 52);
    uint64_t v36 = sub_100E00E14();
    sub_100E022E0(v36, (uint64_t)&v279);
    sub_101125260(buf);
    sub_10113A9D4(buf);
    v278 |= 1u;
    std::string::size_type v276 = v279.__r_.__value_.__l.__size_;
    uint64_t v37 = v277;
    int v38 = *(_DWORD *)(a2 + 4);
    *(void *)(v277 + 192) |= 0x8000uLL;
    *(_DWORD *)(v37 + 10sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v38;
    uint64_t v39 = v277;
    int v40 = *(unsigned __int8 *)(a2 + 1);
    *(void *)(v277 + 192) |= 0x100uLL;
    *(_DWORD *)(v39 + 72) = v40;
    uint64_t v41 = v277;
    int v42 = *(unsigned __int8 *)(a2 + 2);
    *(void *)(v277 + 192) |= 0x10000uLL;
    *(_DWORD *)(v41 + 104) = v42;
    uint64_t v43 = v277;
    int v44 = *(unsigned __int8 *)(a2 + 3);
    *(void *)(v277 + 192) |= 0x20000uLL;
    *(_DWORD *)(v43 + 10_Block_object_dispose(va, 8) = v44;
    uint64_t v45 = v277;
    int v46 = *(unsigned __int8 *)(a2 + 11);
    *(void *)(v277 + 192) |= 0x800uLL;
    *(_DWORD *)(v45 + 84) = v46;
    uint64_t v47 = v277;
    int v48 = *(unsigned __int8 *)(a2 + 8);
    *(void *)(v277 + 192) |= 0x8000000uLL;
    *(_DWORD *)(v47 + 14_Block_object_dispose(va, 8) = v48;
    uint64_t v49 = v277;
    int v50 = *(unsigned __int8 *)(a2 + 9);
    *(void *)(v277 + 192) |= 0x2000uLL;
    *(_DWORD *)(v49 + 92) = v50;
    uint64_t v51 = v277;
    int v52 = *(unsigned __int8 *)(a2 + 10);
    *(void *)(v277 + 192) |= 0x1000uLL;
    *(_DWORD *)(v51 + 8_Block_object_dispose(va, 8) = v52;
    uint64_t v53 = v277;
    int v54 = *(_DWORD *)(a2 + 12);
    *(void *)(v277 + 192) |= 0x1000000uLL;
    *(_DWORD *)(v53 + 136) = v54;
    uint64_t v55 = v277;
    uint64_t v56 = v181.i64[0];
    *(void *)(v277 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v181.i64[1];
    *(void *)(v55 + 192) |= 8uLL;
    uint64_t v57 = v277;
    *(void *)(v277 + 192) |= 1uLL;
    *(void *)(v57 + _Block_object_dispose(va, 8) = v56;
    uint64_t v58 = v277;
    uint64_t v59 = *(void *)(a2 + 24);
    *(void *)(v277 + 192) |= 4uLL;
    *(void *)(v58 + 24) = v59;
    uint64_t v60 = v277;
    uint64_t v61 = *(void *)(a2 + 16);
    *(void *)(v277 + 192) |= 2uLL;
    *(void *)(v60 + 16) = v61;
    uint64_t v62 = v277;
    LODWORD(v61) = *(unsigned __int8 *)(a2 + 38);
    *(void *)(v277 + 192) |= 0x80uLL;
    *(_DWORD *)(v62 + 6_Block_object_dispose(va, 8) = v61;
    uint64_t v63 = v277;
    int v64 = *(_DWORD *)(a2 + 44);
    *(void *)(v277 + 192) |= 0x20000000uLL;
    *(_DWORD *)(v63 + 156) = v64;
    uint64_t v65 = v277;
    LODWORD(v61) = *(unsigned __int8 *)(a2 + 39);
    *(void *)(v277 + 192) |= 0x4000000uLL;
    *(_DWORD *)(v65 + 144) = v61;
    uint64_t v66 = v277;
    int v67 = *(_DWORD *)(a2 + 52);
    *(void *)(v277 + 192) |= 0x4000uLL;
    *(_DWORD *)(v66 + 96) = v67;
    uint64_t v68 = v277;
    int v69 = *(_DWORD *)(a2 + 56);
    *(void *)(v277 + 192) |= 0x400000uLL;
    *(_DWORD *)(v68 + 12_Block_object_dispose(va, 8) = v69;
    uint64_t v70 = v277;
    int v71 = *(_DWORD *)(a2 + 60);
    *(void *)(v277 + 192) |= 0x200000uLL;
    *(_DWORD *)(v70 + 124) = v71;
    uint64_t v72 = v277;
    int v73 = *(_DWORD *)(a2 + 64);
    *(void *)(v277 + 192) |= 0x800000uLL;
    *(_DWORD *)(v72 + 132) = v73;
    uint64_t v74 = v277;
    LODWORD(v61) = *(unsigned __int8 *)(a2 + 88);
    *(void *)(v277 + 192) |= 0x800000000uLL;
    *(_DWORD *)(v74 + 18sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v61;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10187C198);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  __int128 v75 = v188;
  *(_OWORD *)(v33 + 776) = v187;
  *(_OWORD *)(v33 + 792) = v75;
  __int128 v76 = v190;
  *(_OWORD *)(v33 + 80_Block_object_dispose(va, 8) = v189;
  *(_OWORD *)(v33 + 824) = v76;
  __int128 v77 = v184;
  *(_OWORD *)(v33 + 712) = v183;
  *(_OWORD *)(v33 + 72_Block_object_dispose(va, 8) = v77;
  __int128 v78 = v186;
  *(_OWORD *)(v33 + 744) = v185;
  *(_OWORD *)(v33 + 76sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v78;
  __int128 v79 = v182;
  *(int8x16_t *)(v33 + 68sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v181;
  *(_OWORD *)(v33 + 696) = v79;
  *(_BYTE *)(v33 + 576) = v13;
  unint64_t v80 = *(void *)(v33 + 408);
  unint64_t v81 = *(void *)(v33 + 416);
  if (v80 >= v81)
  {
    __int16 v90 = (void **)(v33 + 400);
    uint64_t v91 = *(void *)(v33 + 400);
    unint64_t v92 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v80 - v91) >> 5);
    unint64_t v93 = v92 + 1;
    if (v92 + 1 > 0x199999999999999LL) {
      sub_100007008();
    }
    unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81 - v91) >> 5);
    if (2 * v94 > v93) {
      unint64_t v93 = 2 * v94;
    }
    if (v94 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v95 = 0x199999999999999LL;
    }
    else {
      unint64_t v95 = v93;
    }
    if (v95)
    {
      __int16 v96 = (char *)sub_1007F89DC(v33 + 416, v95);
      uint64_t v33 = v178;
    }

    else
    {
      __int16 v96 = 0LL;
    }

    int v97 = &v96[160 * v92];
    int v98 = &v96[160 * v95];
    __int128 v99 = v182;
    *(int8x16_t *)int v97 = v181;
    *((_OWORD *)v97 + 1) = v99;
    __int128 v100 = v183;
    __int128 v101 = v184;
    __int128 v102 = v186;
    *((_OWORD *)v97 + 4) = v185;
    *((_OWORD *)v97 + 5) = v102;
    *((_OWORD *)v97 + 2) = v100;
    *((_OWORD *)v97 + 3) = v101;
    __int128 v103 = v187;
    __int128 v104 = v188;
    __int128 v105 = v190;
    *((_OWORD *)v97 + _Block_object_dispose(va, 8) = v189;
    *((_OWORD *)v97 + 9) = v105;
    *((_OWORD *)v97 + 6) = v103;
    *((_OWORD *)v97 + 7) = v104;
    double v89 = v97 + 160;
    int v107 = *(char **)(v33 + 400);
    uint64_t v106 = *(char **)(v33 + 408);
    if (v106 != v107)
    {
      do
      {
        __int128 v108 = *((_OWORD *)v106 - 9);
        *((_OWORD *)v97 - 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *((_OWORD *)v106 - 10);
        *((_OWORD *)v97 - 9) = v108;
        __int128 v109 = *((_OWORD *)v106 - 8);
        __int128 v110 = *((_OWORD *)v106 - 7);
        __int128 v111 = *((_OWORD *)v106 - 5);
        *((_OWORD *)v97 - 6) = *((_OWORD *)v106 - 6);
        *((_OWORD *)v97 - 5) = v111;
        *((_OWORD *)v97 - _Block_object_dispose(va, 8) = v109;
        *((_OWORD *)v97 - 7) = v110;
        __int128 v112 = *((_OWORD *)v106 - 4);
        __int128 v113 = *((_OWORD *)v106 - 3);
        __int128 v114 = *((_OWORD *)v106 - 1);
        *((_OWORD *)v97 - 2) = *((_OWORD *)v106 - 2);
        *((_OWORD *)v97 - 1) = v114;
        *((_OWORD *)v97 - 4) = v112;
        *((_OWORD *)v97 - 3) = v113;
        v97 -= 160;
        v106 -= 160;
      }

      while (v106 != v107);
      uint64_t v106 = (char *)*v90;
    }

    *(void *)(v33 + 40sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v97;
    *(void *)(v33 + 40_Block_object_dispose(va, 8) = v89;
    *(void *)(v33 + 416) = v98;
    if (v106) {
      operator delete(v106);
    }
  }

  else
  {
    __int128 v82 = v182;
    *(int8x16_t *)unint64_t v80 = v181;
    *(_OWORD *)(v80 + 16) = v82;
    __int128 v83 = v183;
    __int128 v84 = v184;
    __int128 v85 = v186;
    *(_OWORD *)(v80 + 64) = v185;
    *(_OWORD *)(v80 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v85;
    *(_OWORD *)(v80 + 32) = v83;
    *(_OWORD *)(v80 + 4_Block_object_dispose(va, 8) = v84;
    __int128 v86 = v187;
    __int128 v87 = v188;
    __int128 v88 = v190;
    *(_OWORD *)(v80 + 12_Block_object_dispose(va, 8) = v189;
    *(_OWORD *)(v80 + 144) = v88;
    *(_OWORD *)(v80 + 96) = v86;
    *(_OWORD *)(v80 + 112) = v87;
    double v89 = (char *)(v80 + 160);
  }

  *(void *)(v33 + 40_Block_object_dispose(va, 8) = v89;
  unint64_t v115 = *(void *)(v33 + 536);
  if (v115 >= 0x64)
  {
    uint64_t v116 = *(void *)(v178 + 528);
    *(void *)(v178 + 536) = v115 - 1;
    *(void *)(v178 + 52_Block_object_dispose(va, 8) = v116 + 1;
    sub_10079ACC0(v33 + 496, 1);
  }

  sub_100AF50A0((void *)(v33 + 496), (uint64_t)&v181);
  uint64_t result = v178;
  int v118 = (BYTE9(v182) & 0x73) != 0;
  if (*(unsigned __int8 *)(v178 + 1418) != v118)
  {
    *(_BYTE *)(v178 + 141_Block_object_dispose(va, 8) = v118;
    uint64_t v119 = *(void *)(v178 + 504);
    if (*(void *)(v178 + 512) != v119)
    {
      unint64_t v120 = *(void *)(v178 + 528);
      unint64_t v121 = *(void *)(v119 + 8 * (v120 / 0x19)) + 160 * (v120 % 0x19);
      unint64_t v122 = *(void *)(v119 + 8 * ((*(void *)(v178 + 536) + v120) / 0x19))
           + 160 * ((*(void *)(v178 + 536) + v120) % 0x19);
      if (v121 != v122)
      {
        double v123 = (void *)(v119 + 8 * (v120 / 0x19));
        do
        {
          std::string::size_type v124 = *(void *)(v121 + 8);
          int v125 = *(unsigned __int8 *)(v121 + 29);
          int v126 = *(unsigned __int8 *)(v121 + 30);
          int v127 = *(_DWORD *)(v121 + 48);
          int v128 = *(unsigned __int8 *)(v121 + 53);
          if (qword_1019344F0 != -1) {
            dispatch_once(&qword_1019344F0, &stru_10187C0F8);
          }
          __int128 v129 = (os_log_s *)qword_1019344F8;
          if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134350080;
            *(void *)&uint8_t buf[4] = v124;
            __int16 v192 = 1026;
            int v193 = v127;
            __int16 v194 = 1026;
            int v195 = v128;
            __int16 v196 = 1026;
            int v197 = v125;
            __int16 v198 = 1026;
            int v199 = v126;
            _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEBUG,  "After vehicular transition, startTime, %{public}f, rawMotionType, %{public}d, rawConfidence, %{public}d, m ounted, %{public}d, mountedConfidence, %{public}d",  buf,  0x24u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344F0 != -1) {
              dispatch_once(&qword_1019344F0, &stru_10187C0F8);
            }
            LODWORD(v279.__r_.__value_.__l.__data_) = 134350080;
            *(std::string::size_type *)((char *)v279.__r_.__value_.__r.__words + 4) = v124;
            WORD2(v279.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v279.__r_.__value_.__r.__words[1] + 6) = v127;
            WORD1(v279.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(v279.__r_.__value_.__r.__words[2]) = v128;
            LOWORD(v28sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1026;
            *(_DWORD *)((char *)&v280 + 2) = v125;
            HIWORD(v28sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1026;
            int v281 = v126;
            LODWORD(v153) = 36;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "After vehicular transition, startTime, %{public}f, rawMotionType, %{public}d, rawConfidence, %{public}d, m ounted, %{public}d, mountedConfidence, %{public}d",  &v279,  v153);
            double v132 = (char *)v131;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitMotionStateUpdate(const CMMotionCoprocessorReply::MotionStateUpdate *)",  "%s\n",  v131);
            if (v132 != buf) {
              free(v132);
            }
          }

          v121 += 160LL;
          if (v121 - *v123 == 4000)
          {
            unint64_t v130 = v123[1];
            ++v123;
            unint64_t v121 = v130;
          }

          uint64_t result = v178;
        }

        while (v121 != v122);
      }
    }
  }

  int v133 = *(unsigned __int16 *)(a2 + 91);
  if (v133 != 0xFFFF)
  {
    *(double *)__n128 buf = v5;
    *(float *)&uint8_t buf[8] = (float)(__int16)v133;
    sub_1006DD65C(result, 31LL, (uint64_t)buf, 16LL);
    return sub_1006DD65C(v178, 32LL, (uint64_t)buf, 16LL);
  }

  return result;
}

void sub_100C9BEA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C9BEF0(uint64_t a1, uint64_t a2)
{
  return sub_100C9AE14(a1 - 152, a2);
}

void sub_100C9BEF8(uint64_t a1, uint64_t a2, float a3)
{
  LOBYTE(a3) = *(_BYTE *)(a2 + 1);
  float v5 = (float)LODWORD(a3);
  int v6 = *(_DWORD *)(a2 + 44);
  if (!*(_BYTE *)(a1 + 360)
    || (v7 = *(_DWORD *)(a1 + 396), double v8 = (double)v7 * 2.56, *(_BYTE *)(a1 + 384))
    && v8 >= (double)(3600 * *(_DWORD *)(a1 + 388)))
  {
    double v117 = *(float *)(a2 + 28);
    unsigned int v121 = *(_DWORD *)(a2 + 4);
    double v124 = *(float *)(a2 + 32);
  }

  else
  {
    double v9 = (double)*(int *)(a1 + 364) / 3600.0;
    unsigned int v10 = (v9 * v8);
    double v124 = (double)v10 / v9;
    unsigned int v121 = v10;
    int v6 = (int)((double)(v10 - (int)(v9 * ((double)(v7 - 1) * 2.56))) / v9 * 1000000.0);
    double v117 = 1.0 / (v9 * (*(float *)(a1 + 376) / 100.0));
    if (*(_BYTE *)(a1 + 372)) {
      float v5 = *(float *)(a1 + 376);
    }
    *(_DWORD *)(a1 + 396) = v7 + 1;
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v11 = *(_DWORD *)(a2 + 48);
  double v12 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653))
  {
    if (*(_BYTE *)(a1 + 652))
    {
      char v13 = 0;
      goto LABEL_13;
    }

    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  char v13 = 1;
LABEL_13:
  double v14 = *(double *)(a1 + 664);
  if (v6)
  {
    double v15 = *(double *)(a1 + 352) + (double)v6 / -1000000.0;
    double v16 = *(double *)(a1 + 664);
    if ((v13 & 1) == 0)
    {
      double v16 = *(double *)(a1 + 664);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_100C93680(a1);
        *(_BYTE *)(a1 + 653) = 0;
        double v16 = *(double *)(a1 + 664);
      }
    }

    double v17 = v15 + v16;
  }

  else
  {
    double v17 = 0.0;
  }

  double v116 = v17;
  double v18 = 1000000.0;
  if ((sub_1004F97F4() & 0x8000000) != 0) {
    int v19 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v19 = 0;
  }
  double v20 = v12 + v14;
  double v21 = v5;
  double v22 = (double)v11 / 1000000.0;
  if ((sub_1004F97F4() & 0x8000000) != 0) {
    int v23 = *(_DWORD *)(a2 + 12);
  }
  else {
    int v23 = 0;
  }
  double v24 = v12 - v22;
  double v25 = v20 - v22;
  double v26 = *(float *)(a2 + 40);
  memset(&buf[6], 0, 24);
  char v27 = *(_BYTE *)(a2 + 2);
  int v28 = *(_DWORD *)(a2 + 16);
  int v29 = *(_DWORD *)(a2 + 20);
  char v30 = *(_BYTE *)(a2 + 37);
  char v31 = *(_BYTE *)(a2 + 38);
  unint64_t v32 = *(void *)(a1 + 432);
  unint64_t v33 = *(void *)(a1 + 440);
  double v34 = v21 / 100.0;
  if (v32 >= v33)
  {
    uint64_t v37 = (void **)(a1 + 424);
    uint64_t v38 = *(void *)(a1 + 424);
    uint64_t v39 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v32 - v38) >> 4);
    unint64_t v40 = v39 + 1;
    unint64_t v41 = 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v33 - v38) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v42 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      HIDWORD(v114) = v19;
      int v43 = v23;
      int v44 = (char *)sub_100CAB0E8(a1 + 440, v42);
      int v23 = v43;
      uint64_t v37 = (void **)(a1 + 424);
    }

    else
    {
      int v44 = 0LL;
    }

    uint64_t v45 = &v44[176 * v39];
    *(double *)uint64_t v45 = v24;
    *((double *)v45 + 1) = v25;
    *((double *)v45 + 2) = v116;
    *((_DWORD *)v45 + 6) = v121;
    int v46 = &v44[176 * v42];
    *((void *)v45 + 4) = 0LL;
    *((double *)v45 + 5) = v34;
    *((void *)v45 + 6) = 0LL;
    *((void *)v45 + 7) = 0LL;
    *((_DWORD *)v45 + 16) = v19;
    *((_DWORD *)v45 + 17) = v23;
    *((double *)v45 + 9) = v117;
    *((double *)v45 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v26;
    *((double *)v45 + 11) = v124;
    *((_DWORD *)v45 + 24) = 0;
    *((void *)v45 + 13) = 0LL;
    *((_WORD *)v45 + 56) = 0;
    __int128 v47 = *(_OWORD *)buf;
    *((_OWORD *)v45 + _Block_object_dispose(va, 8) = *(_OWORD *)&buf[14];
    *(_OWORD *)(v45 + 114) = v47;
    *((void *)v45 + 1_Block_object_dispose(va, 8) = 0x1A00000000LL;
    v45[152] = v27;
    *((_DWORD *)v45 + 39) = v28;
    *((_DWORD *)v45 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v29;
    v45[164] = v30;
    v45[165] = v31;
    v45[166] = 0;
    *((_DWORD *)v45 + 42) = 0;
    uint64_t v36 = v45 + 176;
    uint64_t v49 = *(char **)(a1 + 424);
    int v48 = *(char **)(a1 + 432);
    if (v48 != v49)
    {
      do
      {
        __int128 v50 = *((_OWORD *)v48 - 11);
        __int128 v51 = *((_OWORD *)v48 - 9);
        *((_OWORD *)v45 - 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *((_OWORD *)v48 - 10);
        *((_OWORD *)v45 - 9) = v51;
        *((_OWORD *)v45 - 11) = v50;
        __int128 v52 = *((_OWORD *)v48 - 8);
        __int128 v53 = *((_OWORD *)v48 - 7);
        __int128 v54 = *((_OWORD *)v48 - 5);
        *((_OWORD *)v45 - 6) = *((_OWORD *)v48 - 6);
        *((_OWORD *)v45 - 5) = v54;
        *((_OWORD *)v45 - _Block_object_dispose(va, 8) = v52;
        *((_OWORD *)v45 - 7) = v53;
        __int128 v55 = *((_OWORD *)v48 - 4);
        __int128 v56 = *((_OWORD *)v48 - 3);
        __int128 v57 = *((_OWORD *)v48 - 1);
        *((_OWORD *)v45 - 2) = *((_OWORD *)v48 - 2);
        *((_OWORD *)v45 - 1) = v57;
        *((_OWORD *)v45 - 4) = v55;
        *((_OWORD *)v45 - 3) = v56;
        v45 -= 176;
        v48 -= 176;
      }

      while (v48 != v49);
      int v48 = (char *)*v37;
    }

    *(void *)(a1 + 424) = v45;
    *(void *)(a1 + 432) = v36;
    *(void *)(a1 + 44sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v46;
    if (v48) {
      operator delete(v48);
    }
  }

  else
  {
    *(double *)unint64_t v32 = v24;
    *(double *)(v32 + _Block_object_dispose(va, 8) = v25;
    *(double *)(v32 + 16) = v116;
    *(_DWORD *)(v32 + 24) = v121;
    *(void *)(v32 + 32) = 0LL;
    *(double *)(v32 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v34;
    *(void *)(v32 + 4_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v32 + 56) = 0LL;
    *(_DWORD *)(v32 + 64) = v19;
    *(_DWORD *)(v32 + 6_Block_object_dispose(va, 8) = v23;
    *(double *)(v32 + 72) = v117;
    *(double *)(v32 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v26;
    *(double *)(v32 + 8_Block_object_dispose(va, 8) = v124;
    *(_DWORD *)(v32 + 96) = 0;
    *(void *)(v32 + 104) = 0LL;
    *(_WORD *)(v32 + 112) = 0;
    __int128 v35 = *(_OWORD *)buf;
    *(_OWORD *)(v32 + 12_Block_object_dispose(va, 8) = *(_OWORD *)&buf[14];
    *(_OWORD *)(v32 + 114) = v35;
    *(void *)(v32 + 144) = 0x1A00000000LL;
    *(_BYTE *)(v32 + 152) = v27;
    *(_DWORD *)(v32 + 156) = v28;
    *(_DWORD *)(v32 + 16sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v29;
    *(_BYTE *)(v32 + 164) = v30;
    *(_BYTE *)(v32 + 165) = v31;
    *(_BYTE *)(v32 + 166) = 0;
    uint64_t v36 = (char *)(v32 + 176);
    *(_DWORD *)(v32 + 16_Block_object_dispose(va, 8) = 0;
  }

  *(void *)(a1 + 432) = v36;
  int v58 = *(_DWORD *)(a2 + 16);
  if (v58 || *(_DWORD *)(a2 + 20))
  {
    double v59 = *(double *)(a1 + 352);
    if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      int v58 = *(_DWORD *)(a2 + 16);
    }

    double v60 = v59 + *(double *)(a1 + 664);
    int v61 = *(_DWORD *)(a2 + 20);
    int v62 = *(unsigned __int8 *)(a2 + 36);
    __int16 v63 = *(_WORD *)(a2 + 52);
    int v64 = *(_DWORD *)(a2 + 56);
    LODWORD(v1_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 60);
    char v65 = *(_BYTE *)(a1 + 859);
    unint64_t v66 = *(void *)(a1 + 456);
    unint64_t v67 = *(void *)(a1 + 464);
    if (v66 >= v67)
    {
      uint64_t v69 = *(void *)(a1 + 448);
      uint64_t v70 = (uint64_t)(v66 - v69) >> 6;
      unint64_t v71 = v70 + 1;
      uint64_t v72 = v67 - v69;
      if (v72 >> 5 > v71) {
        unint64_t v71 = v72 >> 5;
      }
      else {
        unint64_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)sub_10001275C(a1 + 464, v73);
      }
      else {
        uint64_t v74 = 0LL;
      }
      __int128 v75 = (double *)&v74[64 * v70];
      *__int128 v75 = v59;
      v75[1] = v60;
      *((_DWORD *)v75 + 4) = v58;
      *((_DWORD *)v75 + 5) = v61;
      __int128 v76 = &v74[64 * v73];
      *((_DWORD *)v75 + 6) = 0;
      v75[4] = 0.0;
      *((_DWORD *)v75 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
      *((_DWORD *)v75 + 11) = v62;
      *((_DWORD *)v75 + 12) = v64;
      *((_BYTE *)v75 + 52) = 0;
      *((_WORD *)v75 + 27) = v63;
      *((_DWORD *)v75 + 14) = LODWORD(v18);
      *((_BYTE *)v75 + 6sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
      *((_BYTE *)v75 + 61) = v65;
      uint64_t v68 = (char *)(v75 + 8);
      __int128 v78 = *(char **)(a1 + 448);
      __int128 v77 = *(char **)(a1 + 456);
      if (v77 != v78)
      {
        do
        {
          __int128 v79 = *((_OWORD *)v77 - 4);
          __int128 v80 = *((_OWORD *)v77 - 3);
          __int128 v81 = *((_OWORD *)v77 - 1);
          *((_OWORD *)v75 - 2) = *((_OWORD *)v77 - 2);
          *((_OWORD *)v75 - 1) = v81;
          *((_OWORD *)v75 - 4) = v79;
          *((_OWORD *)v75 - 3) = v80;
          v75 -= 8;
          v77 -= 64;
        }

        while (v77 != v78);
        __int128 v77 = *(char **)(a1 + 448);
      }

      *(void *)(a1 + 44_Block_object_dispose(va, 8) = v75;
      *(void *)(a1 + 456) = v68;
      *(void *)(a1 + 464) = v76;
      if (v77) {
        operator delete(v77);
      }
    }

    else
    {
      *(double *)unint64_t v66 = v59;
      *(double *)(v66 + _Block_object_dispose(va, 8) = v60;
      *(_DWORD *)(v66 + 16) = v58;
      *(_DWORD *)(v66 + 2sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v61;
      *(_DWORD *)(v66 + 24) = 0;
      *(void *)(v66 + 32) = 0LL;
      *(_DWORD *)(v66 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
      *(_DWORD *)(v66 + 44) = v62;
      *(_DWORD *)(v66 + 4_Block_object_dispose(va, 8) = v64;
      *(_BYTE *)(v66 + 52) = 0;
      *(_WORD *)(v66 + 54) = v63;
      *(_DWORD *)(v66 + 56) = LODWORD(v18);
      *(_BYTE *)(v66 + 6sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
      uint64_t v68 = (char *)(v66 + 64);
      *(_BYTE *)(v66 + 61) = v65;
    }

    *(void *)(a1 + 456) = v68;
  }

  unsigned int v82 = *(unsigned __int16 *)(a2 + 52);
  unsigned int v83 = *(unsigned __int8 *)(a2 + 37);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10187C118);
  }
  __int128 v84 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    double v18 = *(double *)(a1 + 352);
    LOBYTE(v85) = *(_BYTE *)(a2 + 1);
    int v122 = *(_DWORD *)(a2 + 8);
    int v125 = *(_DWORD *)(a2 + 4);
    int v118 = *(_DWORD *)(a2 + 12);
    LODWORD(v116) = *(_DWORD *)(a2 + 16);
    HIDWORD(v114) = *(_DWORD *)(a2 + 20);
    double v86 = (double)v85 / 100.0;
    double v87 = *(float *)(a2 + 28);
    double v88 = *(float *)(a2 + 32);
    int v89 = *(unsigned __int8 *)(a2 + 36);
    if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
    }

    double v90 = v18 + *(double *)(a1 + 664);
    double v91 = *(float *)(a2 + 40);
    uint64_t v92 = *(void *)(*(void *)(a1 + 432) - 160LL);
    int v93 = *(_DWORD *)(a2 + 44);
    unsigned int v94 = sub_1004F97F4();
    int v95 = *(_DWORD *)(a1 + 364);
    BOOL v276 = v95 > 0;
    int v280 = *(_DWORD *)(a1 + 388);
    *(_DWORD *)&_BYTE buf[14] = v125;
    int v208 = v122;
    int v210 = v118;
    int v212 = LODWORD(v116);
    int v214 = HIDWORD(v114);
    int v220 = v89;
    uint64_t v228 = v92;
    int v230 = v93;
    int v232 = (v94 >> 27) & 1;
    int v234 = *(unsigned __int8 *)(a2 + 2);
    int v236 = *(char *)(a2 + 3);
    int v238 = v82 & 1;
    int v240 = (v82 >> 12) & 1;
    int v242 = (v82 >> 2) & 1;
    int v244 = (v82 >> 8) & 1;
    int v246 = (v82 >> 9) & 1;
    int v248 = (v82 >> 10) & 1;
    int v250 = (v82 >> 11) & 1;
    int v256 = v83 & 1;
    int v260 = (v83 >> 2) & 1;
    int v264 = (v83 >> 4) & 1;
    int v268 = (v83 >> 6) & 1;
    int v272 = *(unsigned __int8 *)(a2 + 38);
    float v96 = *(float *)(a2 + 60);
    double v97 = *(float *)(a2 + 56);
    *(double *)&uint8_t buf[4] = v18;
    *(double *)&_BYTE buf[20] = v86;
    double v216 = v87;
    double v224 = v90;
    double v226 = v91;
    double v252 = v97;
    int v254 = *(__int16 *)(a2 + 54);
    int v258 = (v83 >> 1) & 1;
    int v262 = (v83 >> 3) & 1;
    int v266 = (v83 >> 5) & 1;
    unsigned int v270 = v83 >> 7;
    *(_WORD *)&_BYTE buf[18] = 2048;
    __int16 v215 = 2048;
    __int16 v217 = 2048;
    __int16 v221 = 2048;
    __int16 v223 = 2048;
    __int16 v225 = 2048;
    __int16 v227 = 2048;
    __int16 v251 = 2048;
    __int16 v273 = 2048;
    int v278 = v95;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_WORD *)&_BYTE buf[28] = 1024;
    __int16 v209 = 1024;
    __int16 v211 = 1024;
    __int16 v213 = 1024;
    __int16 v219 = 1024;
    __int16 v229 = 1024;
    __int16 v231 = 1024;
    __int16 v233 = 1024;
    __int16 v235 = 1024;
    __int16 v237 = 1024;
    __int16 v239 = 1024;
    __int16 v241 = 1024;
    __int16 v243 = 1024;
    __int16 v245 = 1024;
    __int16 v247 = 1024;
    __int16 v249 = 1024;
    __int16 v253 = 1024;
    __int16 v255 = 1024;
    __int16 v257 = 1024;
    __int16 v259 = 1024;
    __int16 v261 = 1024;
    __int16 v263 = 1024;
    __int16 v265 = 1024;
    __int16 v267 = 1024;
    __int16 v269 = 1024;
    __int16 v271 = 1024;
    __int16 v275 = 1024;
    __int16 v277 = 1024;
    __int16 v279 = 1024;
    *(_DWORD *)__n128 buf = 134227968;
    double v218 = v88;
    CFAbsoluteTime v222 = Current;
    double v274 = v96;
    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "Timestamp,%f,StepCount,%d,Stride,%0.2f,Ascended,%d,Descended,%d,ElevationUp,%d,ElevationDown,%d,Pace,%f,ActiveTime ,%f,DeltaSteps,%d,locationdGpsTime,%20.20f,startTime,%f,currentCadence,%f,FirstStepTime,%f,RelativeTimeOfLastStep, %d,FloorCountingSupported,%d,pedometerArmConstrainedState,%d,FlightState,%d,FlightFailResetUnknown,%d,FlightFailRe setWater,%d,FlightFailResetFrozen,%d,FlightFailInOutTrans,%u,FlightFailElevDelta,%u,FlightFailStepsPerElevRate,%u, FlightsFailElevRate,%u,PressureAmplitude,%f,PressureTemperature,%hd,FalseStepDetectorAccelPoseXHigh,%u,FalseStepDe tectorAccelVarXYZLow,%u,FalseStepDetectorGyroNumSamplesSufficient,%u,FalseStepDetectorGyroVarXHigh,%u,FalseStepDet ectorConsecutiveRequirement,%u,IsVehicularLowConfidence,%u,IsVehicularHighConfidence,%u,FalseStepDetectorConsisten tStepsProtection,%u,FalseStepsSuppressed,%u,AverageFilteredPressure,%f,StepCountCurrentlySimulated,%d,DefaultSteps PerHour,%i,DefaultStepDurationHours,%i",  buf,  0x11Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187C118);
    }
    double v126 = *(double *)&qword_101934518;
    double v98 = *(double *)(a1 + 352);
    LOBYTE(v1_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 1);
    int v99 = *(_DWORD *)(a2 + 4);
    int v123 = *(_DWORD *)(a2 + 8);
    int v100 = *(_DWORD *)(a2 + 16);
    int v119 = *(_DWORD *)(a2 + 12);
    int v101 = *(_DWORD *)(a2 + 20);
    float v102 = *(float *)(a2 + 28);
    float v103 = *(float *)(a2 + 32);
    int v104 = *(unsigned __int8 *)(a2 + 36);
    if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
    }

    double v105 = *(double *)(a1 + 664);
    float v106 = *(float *)(a2 + 40);
    uint64_t v107 = *(void *)(*(void *)(a1 + 432) - 160LL);
    int v108 = *(_DWORD *)(a2 + 44);
    unsigned int v109 = sub_1004F97F4();
    int v110 = *(_DWORD *)(a1 + 364);
    BOOL v202 = v110 > 0;
    int v206 = *(_DWORD *)(a1 + 388);
    int v162 = *(char *)(a2 + 3);
    int v166 = (v82 >> 12) & 1;
    int v170 = (v82 >> 8) & 1;
    int v174 = (v82 >> 10) & 1;
    int v182 = v83 & 1;
    int v186 = (v83 >> 2) & 1;
    int v190 = (v83 >> 4) & 1;
    int v194 = (v83 >> 6) & 1;
    int v198 = *(unsigned __int8 *)(a2 + 38);
    float v111 = *(float *)(a2 + 60);
    double v178 = *(float *)(a2 + 56);
    int v130 = v99;
    int v134 = v123;
    int v136 = v119;
    int v138 = v100;
    int v140 = v101;
    int v146 = v104;
    uint64_t v154 = v107;
    int v156 = v108;
    int v158 = (v109 >> 27) & 1;
    int v160 = *(unsigned __int8 *)(a2 + 2);
    int v164 = v82 & 1;
    int v168 = (v82 >> 2) & 1;
    int v172 = (v82 >> 9) & 1;
    int v176 = (v82 >> 11) & 1;
    int v180 = *(__int16 *)(a2 + 54);
    int v184 = (v83 >> 1) & 1;
    int v188 = (v83 >> 3) & 1;
    int v192 = (v83 >> 5) & 1;
    unsigned int v196 = v83 >> 7;
    __int16 v131 = 2048;
    __int16 v141 = 2048;
    __int16 v143 = 2048;
    __int16 v147 = 2048;
    __int16 v149 = 2048;
    __int16 v151 = 2048;
    __int16 v153 = 2048;
    __int16 v177 = 2048;
    __int16 v199 = 2048;
    int v204 = v110;
    __int16 v129 = 1024;
    __int16 v133 = 1024;
    __int16 v135 = 1024;
    __int16 v137 = 1024;
    __int16 v139 = 1024;
    __int16 v145 = 1024;
    __int16 v155 = 1024;
    __int16 v157 = 1024;
    __int16 v159 = 1024;
    __int16 v161 = 1024;
    __int16 v163 = 1024;
    __int16 v165 = 1024;
    __int16 v167 = 1024;
    __int16 v169 = 1024;
    __int16 v171 = 1024;
    __int16 v173 = 1024;
    __int16 v175 = 1024;
    __int16 v179 = 1024;
    __int16 v181 = 1024;
    __int16 v183 = 1024;
    __int16 v185 = 1024;
    __int16 v187 = 1024;
    __int16 v189 = 1024;
    __int16 v191 = 1024;
    __int16 v193 = 1024;
    __int16 v195 = 1024;
    __int16 v197 = 1024;
    __int16 v201 = 1024;
    __int16 v203 = 1024;
    __int16 v205 = 1024;
    int v127 = 134227968;
    double v128 = v98;
    double v132 = (double)*(unint64_t *)&v18 / 100.0;
    double v142 = v102;
    double v144 = v103;
    CFAbsoluteTime v148 = Current;
    double v150 = v98 + v105;
    double v152 = v106;
    double v200 = v111;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  *(void *)&v126,  1LL,  "Timestamp,%f,StepCount,%d,Stride,%0.2f,Ascended,%d,Descended,%d,ElevationUp,%d,ElevationDown,%d,Pace,%f,ActiveTime ,%f,DeltaSteps,%d,locationdGpsTime,%20.20f,startTime,%f,currentCadence,%f,FirstStepTime,%f,RelativeTimeOfLastStep, %d,FloorCountingSupported,%d,pedometerArmConstrainedState,%d,FlightState,%d,FlightFailResetUnknown,%d,FlightFailRe setWater,%d,FlightFailResetFrozen,%d,FlightFailInOutTrans,%u,FlightFailElevDelta,%u,FlightFailStepsPerElevRate,%u, FlightsFailElevRate,%u,PressureAmplitude,%f,PressureTemperature,%hd,FalseStepDetectorAccelPoseXHigh,%u,FalseStepDe tectorAccelVarXYZLow,%u,FalseStepDetectorGyroNumSamplesSufficient,%u,FalseStepDetectorGyroVarXHigh,%u,FalseStepDet ectorConsecutiveRequirement,%u,IsVehicularLowConfidence,%u,IsVehicularHighConfidence,%u,FalseStepDetectorConsisten tStepsProtection,%u,FalseStepsSuppressed,%u,AverageFilteredPressure,%f,StepCountCurrentlySimulated,%d,DefaultSteps PerHour,%i,DefaultStepDurationHours,%i",  COERCE_DOUBLE(&v127),  282,  v114,  LODWORD(Current),  LODWORD(v116),  v119,  v120,  v126);
    __int128 v113 = (char *)v112;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitStepCountUpdate(const CMMotionCoprocessorReply::StepCountUpdate *)",  "%s\n",  v112);
    if (v113 != buf) {
      free(v113);
    }
  }

void sub_100C9CAFC(uint64_t a1, uint64_t a2, float a3)
{
}

void sub_100C9CB04(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v10 = v4;
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v11 = v4 + *(double *)(a1 + 664);
  unsigned __int8 v12 = *(_BYTE *)(a2 + 1);
  sub_1006DD65C(a1, 7LL, (uint64_t)&v10, 24LL);
  sub_1006DD65C(a1, 9LL, (uint64_t)&v10, 24LL);
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10187C118);
  }
  float v5 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 134218496;
    double v20 = v10;
    __int16 v21 = 2048;
    double v22 = v11;
    __int16 v23 = 1024;
    int v24 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Timestamp,%.3f,StartTime,%.3f,ActivePedState,%u",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187C118);
    }
    int v13 = 134218496;
    double v14 = v10;
    __int16 v15 = 2048;
    double v16 = v11;
    __int16 v17 = 1024;
    int v18 = v12;
    LODWORD(v_Block_object_dispose(va, 8) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "Timestamp,%.3f,StartTime,%.3f,ActivePedState,%u",  COERCE_DOUBLE(&v13),  v8,  v9);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitActivePedStateUpdate(const CMMotionCoprocessorReply::ActivePedStateUpdate *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

void sub_100C9CD50(uint64_t a1, uint64_t a2)
{
}

void sub_100C9CD58(void *a1, uint64_t a2)
{
  if (qword_101934500 != -1) {
    dispatch_once(&qword_101934500, &stru_10187C218);
  }
  double v4 = (os_log_s *)qword_101934508;
  if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)__n128 buf = 67109376;
    int v18 = v5;
    __int16 v19 = 2048;
    uint64_t v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "trigger,%d,duration,%lld", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934500 != -1) {
      dispatch_once(&qword_101934500, &stru_10187C218);
    }
    int v9 = *(_DWORD *)(a2 + 4);
    uint64_t v10 = *(void *)(a2 + 8);
    v14[0] = 67109376;
    v14[1] = v9;
    __int16 v15 = 2048;
    uint64_t v16 = v10;
    LODWORD(v13) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  1LL,  "trigger,%d,duration,%lld",  v14,  v13);
    unsigned __int8 v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitAlarmTrigger(const CMMotionCoprocessorReply::AlarmTrigger *)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  uint64_t v7 = a1[156];
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 4);
    if ((*(double (**)(uint64_t, uint64_t, BOOL, double))(v7 + 16))( v7,  v8,  *(_BYTE *)(a2 + 1) != 0,  (double)*(unint64_t *)(a2 + 8) / 1000000.0) >= 0.0) {
      (*(void (**)(void *, uint64_t))(*a1 + 232LL))(a1, v8);
    }
  }

void sub_100C9CF80(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100C9CF88(uint64_t a1, uint64_t a2)
{
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_10187C0B8);
  }
  double v4 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionWakeReason,%u", (uint8_t *)buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    int v16 = *(unsigned __int8 *)(a2 + 1);
    LODWORD(v23[0]) = 67109120;
    HIDWORD(v23[0]) = v16;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "MotionWakeReason,%u",  v23);
    int v18 = (std::stringbuf::string_type *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitWakeReason(const CMMotionCoprocessorReply::WakeReason *)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  sub_10000CE18((uint64_t)v23);
  unint64_t v6 = *(unsigned __int8 *)(a2 + 1);
  if (v6 > 0xE || ((0x3D21uLL >> v6) & 1) != 0)
  {
    int v9 = sub_10000CF44(&v24, (uint64_t)"Unkown (", 8LL);
    buf[0].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 1);
    uint64_t v10 = sub_10000CF44(v9, (uint64_t)buf, 1LL);
    sub_10000CF44(v10, (uint64_t)")", 1LL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    double v11 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      int v12 = *(unsigned __int8 *)(a2 + 1);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Received bad wake reason from motion coprocessor,reason,%d",  (uint8_t *)buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      int v19 = *(unsigned __int8 *)(a2 + 1);
      LODWORD(v22[0]) = 67109120;
      HIDWORD(v22[0]) = v19;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "Received bad wake reason from motion coprocessor,reason,%d",  v22);
      __int16 v21 = (std::stringbuf::string_type *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitWakeReason(const CMMotionCoprocessorReply::WakeReason *)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

  else
  {
    uint64_t v7 = (const char *)qword_10187BEC8[v6];
    size_t v8 = strlen(v7);
    sub_10000CF44(&v24, (uint64_t)v7, v8);
    if (*(_BYTE *)(a2 + 1) == 3 && *(_BYTE *)(a1 + 863)) {
      sub_10000CF44( &v24,  (uint64_t)"(Frequent wakes are most likely caused by enabling AlwaysOnMotionSensorLogging!)",  80LL);
    }
  }

  if (sub_100E575B0())
  {
    sub_1002A5370(v22);
    std::stringbuf::str(buf, &v25);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v13 = buf;
    }
    else {
      uint64_t v13 = (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
    }
    sub_1002ACA84((uint64_t)v22, "OscarWakeReason", (char *)v13);
    sub_100E57614((uint64_t)v22, (uint64_t)"MotionWakeReason");
    sub_1002A5590(v22);
  }

  *(void *)((char *)v23
  uint64_t v24 = v14;
  std::streambuf::~streambuf(&v25);
  return std::ios::~ios(&v26);
}

void sub_100C9D40C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

uint64_t sub_100C9D45C(uint64_t a1, uint64_t a2)
{
  return sub_100C9CF88(a1 - 152, a2);
}

uint64_t sub_100C9D464(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 2);
  *(void *)&__int128 v10 = __PAIR64__(v4, v3);
  uint64_t v5 = *(void *)(a1 + 352);
  *((void *)&v10 + 1) = v5;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  unint64_t v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 67109632;
    unsigned int v17 = v3;
    __int16 v18 = 1024;
    unsigned int v19 = v4;
    __int16 v20 = 2048;
    uint64_t v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Type,CLOscar,onBodyStatus,%d,confidence,%d,timestamp,%f",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v11[0] = 67109632;
    v11[1] = v3;
    __int16 v12 = 1024;
    unsigned int v13 = v4;
    __int16 v14 = 2048;
    uint64_t v15 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Type,CLOscar,onBodyStatus,%d,confidence,%d,timestamp,%f",  v11,  24,  *(double *)&v10);
    int v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitOnBodyStatus(const CMMotionCoprocessorReply::OnBodyStatus *)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  uint64_t result = sub_1006DD65C(a1, 2LL, (uint64_t)&v10, 16LL);
  *(_OWORD *)(a1 + 84sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v10;
  return result;
}

uint64_t sub_100C9D680(uint64_t a1, uint64_t a2)
{
  return sub_100C9D464(a1 - 152, a2);
}

void sub_100C9D688(uint64_t a1, uint64_t a2)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_10187C158);
  }
  unsigned int v3 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a2 + 1);
    int v5 = *(unsigned __int8 *)(a2 + 2);
    char v6 = *(_BYTE *)(a2 + 3);
    int v7 = *(unsigned __int16 *)(a2 + 4);
    double v8 = *(float *)(a2 + 32);
    double v9 = *(float *)(a2 + 8);
    double v10 = *(float *)(a2 + 12);
    double v11 = *(float *)(a2 + 16);
    double v12 = *(float *)(a2 + 20);
    double v13 = *(float *)(a2 + 24);
    double v14 = *(float *)(a2 + 28);
    *(_DWORD *)__n128 buf = 67242752;
    int v50 = v4;
    __int16 v51 = 1026;
    int v52 = v5;
    __int16 v53 = 258;
    char v54 = v6;
    __int16 v55 = 1026;
    int v56 = v7;
    __int16 v57 = 2050;
    double v58 = v8;
    __int16 v59 = 2050;
    double v60 = v9;
    __int16 v61 = 2050;
    double v62 = v10;
    __int16 v63 = 2050;
    double v64 = v11;
    __int16 v65 = 2050;
    double v66 = v12;
    __int16 v67 = 2050;
    double v68 = v13;
    __int16 v69 = 2050;
    double v70 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Enabled,%{public}d,Proactive,%{public}u,EndCondition,%{public}hhu,SampleInterval,%{public}d,Temperature,%{public}f ,DynamicBias.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e,Covariance.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e",  buf,  0x5Du);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    int v15 = *(unsigned __int8 *)(a2 + 1);
    int v16 = *(unsigned __int8 *)(a2 + 2);
    char v17 = *(_BYTE *)(a2 + 3);
    int v18 = *(unsigned __int16 *)(a2 + 4);
    double v19 = *(float *)(a2 + 32);
    double v20 = *(float *)(a2 + 8);
    double v21 = *(float *)(a2 + 12);
    double v22 = *(float *)(a2 + 16);
    double v23 = *(float *)(a2 + 20);
    double v24 = *(float *)(a2 + 24);
    double v25 = *(float *)(a2 + 28);
    v28[0] = 67242752;
    v28[1] = v15;
    __int16 v29 = 1026;
    int v30 = v16;
    __int16 v31 = 258;
    char v32 = v17;
    __int16 v33 = 1026;
    int v34 = v18;
    __int16 v35 = 2050;
    double v36 = v19;
    __int16 v37 = 2050;
    double v38 = v20;
    __int16 v39 = 2050;
    double v40 = v21;
    __int16 v41 = 2050;
    double v42 = v22;
    __int16 v43 = 2050;
    double v44 = v23;
    __int16 v45 = 2050;
    double v46 = v24;
    __int16 v47 = 2050;
    double v48 = v25;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Enabled,%{public}d,Proactive,%{public}u,EndCondition,%{public}hhu,SampleInterval,%{public}d,Temperature,%{public}f ,DynamicBias.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e,Covariance.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e",  v28,  93);
    char v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitGyroBiasData(const CMMotionCoprocessorReply::GyroBiasData *)",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

uint64_t sub_100C9D968(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v5 = *(double *)(a1 + 664);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187C238);
  }
  double v6 = v4 + v5;
  int v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    double v8 = v6 + (double)*(__int16 *)(a2 + 1);
    int v9 = *(unsigned __int8 *)(a2 + 3);
    int v10 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)__n128 buf = 134218752;
    double v28 = v8;
    __int16 v29 = 2048;
    double v30 = v6;
    __int16 v31 = 1024;
    int v32 = v9;
    __int16 v33 = 1024;
    int v34 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Type,CLOscar,SedentaryAlarm:startTime,%f,firedTime,%f,type,%d,didWake,%d",  buf,  0x22u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187C238);
    }
    double v13 = v6 + (double)*(__int16 *)(a2 + 1);
    int v14 = *(unsigned __int8 *)(a2 + 3);
    int v15 = *(unsigned __int8 *)(a2 + 4);
    int v19 = 134218752;
    double v20 = v13;
    __int16 v21 = 2048;
    double v22 = v6;
    __int16 v23 = 1024;
    int v24 = v14;
    __int16 v25 = 1024;
    int v26 = v15;
    LODWORD(v1_Block_object_dispose(va, 8) = 34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Type,CLOscar,SedentaryAlarm:startTime,%f,firedTime,%f,type,%d,didWake,%d",  COERCE_DOUBLE(&v19),  v18);
    char v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitSedentaryAlarm(const CMMotionCoprocessorReply::SedentaryAlarm *)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  uint64_t result = *(void *)(a1 + 1288);
  if (result)
  {
    v11.n128_f64[0] = v6 + (double)*(__int16 *)(a2 + 1);
    return (*(uint64_t (**)(uint64_t, void, BOOL, __n128, double))(result + 16))( result,  *(unsigned __int8 *)(a2 + 3),  *(_BYTE *)(a2 + 4) != 0,  v11,  v6);
  }

  return result;
}

uint64_t sub_100C9DBDC(uint64_t a1, uint64_t a2)
{
  return sub_100C9D968(a1 - 152, a2);
}

__n128 sub_100C9DBE4(uint64_t a1, uint64_t a2)
{
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_10187C0B8);
  }
  double v4 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    uint64_t v6 = *(void *)(a2 + 9);
    *(_DWORD *)__n128 buf = 134218240;
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "MotionCoprocessor received TimeSync data machTimestamp,%llu,oscarTimestamp,%llu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    uint64_t v8 = *(void *)(a2 + 1);
    uint64_t v9 = *(void *)(a2 + 9);
    int v12 = 134218240;
    uint64_t v13 = v8;
    __int16 v14 = 2048;
    uint64_t v15 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  2LL,  "MotionCoprocessor received TimeSync data machTimestamp,%llu,oscarTimestamp,%llu",  &v12,  22);
    __n128 v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitTimeSync(const CMMotionCoprocessorReply::TimeSync *)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  __n128 result = *(__n128 *)a2;
  *(_BYTE *)(a1 + 140sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 16);
  *(__n128 *)(a1 + 1384) = result;
  return result;
}

double sub_100C9DDCC(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_100C9DBE4(a1 - 152, a2).n128_u64[0];
  return result;
}

uint64_t sub_100C9DDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 292;
  *(_BYTE *)(a1 + 283) = 1;
  uint64_t v4 = a1 + 284;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = *(__int128 *)((char *)&xmmword_101358CCC + 12);
  *(_OWORD *)(a1 + 30sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = unk_101358CBC;
  *(_OWORD *)(a1 + 316) = xmmword_101358CCC;
  *(_OWORD *)(a1 + 284) = xmmword_101358CAC;
  *(_DWORD *)(a1 + 284) = *(unsigned __int8 *)(a2 + 1);
  *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(unsigned __int8 *)(a2 + 2);
  int v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 292) = v5;
  uint64_t v6 = *(void *)(a2 + 12);
  *(void *)&__int128 v7 = v6;
  *((void *)&v7 + 1) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 296) = v7;
  *(void *)(a1 + 312) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 32sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 324) = *(unsigned __int8 *)(a2 + 3);
  *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 4) != 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 44);
  char v8 = *(_BYTE *)(a2 + 5);
  if ((v8 & 1) != 0)
  {
    *(_BYTE *)(a1 + 34sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1;
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((*(_BYTE *)(a2 + 5) & 2) == 0)
  {
    goto LABEL_3;
  }

  *(_BYTE *)(a1 + 341) = 1;
  *(_DWORD *)(a1 + 292) = v5;
  if ((v8 & 4) != 0)
  {
LABEL_4:
    *(_BYTE *)(a1 + 342) = 1;
    *(_DWORD *)(a1 + 296) = v6;
  }

void sub_100C9E2DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C9E2E8(uint64_t a1, uint64_t a2)
{
  return sub_100C9DDD4(a1 - 152, a2);
}

void sub_100C9E2F0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v5 = v4 + *(double *)(a1 + 664);
  int v6 = *(_DWORD *)(a2 + 17);
  char v8 = *(double **)(a1 + 480);
  unint64_t v7 = *(void *)(a1 + 488);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = *(double **)(a1 + 472);
    uint64_t v11 = ((char *)v8 - (char *)v10) >> 4;
    unint64_t v12 = v11 + 1;
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      double v15 = (char *)sub_100037038(a1 + 488, v14);
      int v10 = *(double **)(a1 + 472);
      char v8 = *(double **)(a1 + 480);
    }

    else
    {
      double v15 = 0LL;
    }

    double v16 = &v15[16 * v11];
    *(double *)double v16 = v5;
    double v17 = &v15[16 * v14];
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = 0;
    uint64_t v9 = (double *)(v16 + 16);
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 2;
      }

      while (v8 != v10);
      int v10 = *(double **)(a1 + 472);
    }

    *(void *)(a1 + 472) = v16;
    *(void *)(a1 + 48sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v9;
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = v17;
    if (v10) {
      operator delete(v10);
    }
  }

  else
  {
    *char v8 = v5;
    uint64_t v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 3) = 0;
  }

  *(void *)(a1 + 48sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v9;
  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_10187C1B8);
  }
  double v18 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134218240;
    double v26 = v5;
    __int16 v27 = 1024;
    int v28 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Coarse elevation,startTime,%f,ascended,%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187C1B8);
    }
    int v21 = 134218240;
    double v22 = v5;
    __int16 v23 = 1024;
    int v24 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "Coarse elevation,startTime,%f,ascended,%d",  COERCE_DOUBLE(&v21),  18);
    double v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitCoarseElevation(const CMMotionCoprocessorReply::CoarseElevation *)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

void sub_100C9E5DC(uint64_t a1, uint64_t a2)
{
}

void sub_100C9E5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = "<no name>";
  if (*(_BYTE *)(a2 + 1) && !*(_BYTE *)(a2 + 111)) {
    uint64_t v3 = (const char *)(a2 + 1);
  }
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 128);
  double v4 = objc_autoreleasePoolPush();
  double v5 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a2 + 112);
  if (qword_1019344C0 != -1) {
    dispatch_once(&qword_1019344C0, &stru_10187C0B8);
  }
  int v6 = (os_log_s *)qword_1019344C8;
  if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 136315394;
    double v15 = -[NSString UTF8String](-[NSUUID UUIDString](v5, "UUIDString"), "UTF8String");
    __int16 v16 = 2080;
    double v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "uuid,%s,name,%s", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    uint64_t v7 = qword_1019344C8;
    int v10 = 136315394;
    uint64_t v11 = -[NSString UTF8String](-[NSUUID UUIDString](v5, "UUIDString"), "UTF8String");
    __int16 v12 = 2080;
    uint64_t v13 = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  1LL,  "uuid,%s,name,%s",  (const char *)&v10,  22);
    uint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitFirmwareVersion(const CMMotionCoprocessorReply::FirmwareVersion *)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  objc_autoreleasePoolPop(v4);
}

void sub_100C9E81C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100C9E824(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 113);
  __int128 v16 = *(_OWORD *)(a2 + 97);
  __int128 v17 = v3;
  v18[0] = *(_OWORD *)(a2 + 129);
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a2 + 141);
  __int128 v4 = *(_OWORD *)(a2 + 49);
  __int128 v12 = *(_OWORD *)(a2 + 33);
  __int128 v13 = v4;
  __int128 v5 = *(_OWORD *)(a2 + 81);
  __int128 v14 = *(_OWORD *)(a2 + 65);
  __int128 v15 = v5;
  __int128 v6 = *(_OWORD *)(a2 + 17);
  __int128 v10 = *(_OWORD *)(a2 + 1);
  __int128 v11 = v6;
  double v7 = *(double *)(a1 + 352);
  double v8 = v7;
  if (*(_BYTE *)(a1 + 653))
  {
    double v8 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v8 = *(double *)(a1 + 352);
    }
  }

  *(double *)((char *)&v18[1] + 14) = v7 + *(double *)(a1 + 664);
  *(double *)((char *)&v18[2] + 6) = *(double *)((char *)&v18[1] + 14)
                                   + (double)(unint64_t)(*(void *)((char *)&v10 + 4)
  *(double *)((char *)&v18[2] + 14) = v8;
  uint64_t result = sub_1006DD65C(a1, 10LL, (uint64_t)&v10, 191LL);
  if (HIBYTE(v10))
  {
    if (BYTE13(v10)) {
      return sub_1006DD65C(a1, 11LL, (uint64_t)&v10, 191LL);
    }
  }

  return result;
}

uint64_t sub_100C9E93C(uint64_t a1, uint64_t a2)
{
  return sub_100C9E824(a1 - 152, a2);
}

uint64_t sub_100C9E944(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v20 = v4;
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v5 = v4 + *(double *)(a1 + 664);
  double v21 = v5;
  int v6 = *(unsigned __int8 *)(a2 + 1);
  LOBYTE(v22) = *(_BYTE *)(a2 + 1);
  uint64_t v7 = *(char *)(a2 + 2);
  unsigned int v8 = *(unsigned __int8 *)(a2 + 2);
  BYTE1(v22) = *(_BYTE *)(a2 + 2);
  int v9 = *(unsigned __int8 *)(a2 + 3);
  BYTE2(v22) = *(_BYTE *)(a2 + 3);
  int v10 = *(unsigned __int8 *)(a2 + 4);
  HIBYTE(v22) = *(_BYTE *)(a2 + 4);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  __int128 v11 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    __int128 v12 = "Undefined";
    __int128 v13 = "Above 30mph";
    if (v6 != 16) {
      __int128 v13 = "Undefined";
    }
    if (v6 == 1) {
      __int128 v13 = "Below 30mph";
    }
    if (v8 <= 5) {
      __int128 v12 = off_10187C408[v7];
    }
    *(_DWORD *)__n128 buf = 134219778;
    double v43 = v4;
    __int16 v44 = 2048;
    double v45 = v5;
    __int16 v46 = 256;
    char v47 = v6;
    __int16 v48 = 256;
    char v49 = v8;
    __int16 v50 = 1024;
    int v51 = v9;
    __int16 v52 = 1024;
    int v53 = v10;
    __int16 v54 = 2080;
    __int16 v55 = v13;
    __int16 v56 = 2080;
    __int16 v57 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Baseband speed,timestamp,%f,startTime,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0 x%02x,speedThresholdStr,%s,speedRangeStr,%s",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    __int128 v15 = "Undefined";
    __int128 v16 = "Above 30mph";
    if (v6 != 16) {
      __int128 v16 = "Undefined";
    }
    if (v6 == 1) {
      __int128 v16 = "Below 30mph";
    }
    if (v8 <= 5) {
      __int128 v15 = off_10187C408[v7];
    }
    int v26 = 134219778;
    double v27 = v4;
    __int16 v28 = 2048;
    double v29 = v5;
    __int16 v30 = 256;
    char v31 = v6;
    __int16 v32 = 256;
    char v33 = v8;
    __int16 v34 = 1024;
    int v35 = v9;
    __int16 v36 = 1024;
    int v37 = v10;
    __int16 v38 = 2080;
    __int16 v39 = v16;
    __int16 v40 = 2080;
    int v41 = v15;
    LODWORD(v19) = 60;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Baseband speed,timestamp,%f,startTime,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0 x%02x,speedThresholdStr,%s,speedRangeStr,%s",  COERCE_DOUBLE(&v26),  v19,  LODWORD(v20),  LODWORD(v21),  v22,  v23,  v24,  v25);
    double v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitBasebandSpeed(const CMMotionCoprocessorReply::BasebandSpeed *)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  return sub_1006DD65C(a1, 12LL, (uint64_t)&v20, 224LL);
}

uint64_t sub_100C9EC7C(uint64_t a1, uint64_t a2)
{
  return sub_100C9E944(a1 - 152, a2);
}

uint64_t sub_100C9EC84(uint64_t a1)
{
  double v2 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v3 = *(double *)(a1 + 664);
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_10187C258);
  }
  double v4 = v2 + v3;
  double v5 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 134217984;
    double v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "received SkiAlarm,timestamp,%f", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_10187C258);
    }
    int v9 = 134217984;
    double v10 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "received SkiAlarm,timestamp,%f",  COERCE_DOUBLE(&v9));
    unsigned int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitSkiAlarm(const CMMotionCoprocessorReply::SkiAlarm *)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  uint64_t result = *(void *)(a1 + 1296);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100C9EE6C(uint64_t a1)
{
  return sub_100C9EC84(a1 - 152);
}

uint64_t sub_100C9EE74(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }

  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a2 + 5), *(int8x16_t *)(a2 + 5), 8uLL);
  int v9 = *(_DWORD *)(a2 + 1);
  uint64_t v10 = *(void *)(a2 + 21);
  return sub_1006DD65C(a1, 22LL, (uint64_t)v7, 44LL);
}

uint64_t sub_100C9EF0C(uint64_t a1, uint64_t a2)
{
  return sub_100C9EE74(a1 - 152, a2);
}

uint64_t sub_100C9EF14(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }

  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  char v8 = 1;
  uint64_t v9 = *(void *)(a2 + 1);
  int v10 = *(_DWORD *)(a2 + 9);
  int v11 = 0;
  uint64_t v12 = *(void *)(a2 + 13);
  return sub_1006DD65C(a1, 16LL, (uint64_t)v7, 41LL);
}

uint64_t sub_100C9EFB4(uint64_t a1, uint64_t a2)
{
  return sub_100C9EF14(a1 - 152, a2);
}

uint64_t sub_100C9EFBC(uint64_t a1, uint64_t a2)
{
  double v4 = (_DWORD *)(a2 + 9);
  for (uint64_t i = 15LL; i != -1; --i)
  {
    double v6 = *(double *)(a1 + 352);
    double v7 = v6;
    if (*(_BYTE *)(a1 + 653))
    {
      double v7 = *(double *)(a1 + 352);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_100C93680(a1);
        *(_BYTE *)(a1 + 653) = 0;
        double v7 = *(double *)(a1 + 352);
      }
    }

    v10[0] = v6 + *(double *)(a1 + 664);
    v10[1] = v7;
    char v11 = 0;
    uint64_t v12 = *((void *)v4 - 1);
    int v8 = *v4;
    v4 += 3;
    int v13 = v8;
    int v14 = 0;
    unint64_t v15 = *(void *)(a2 + 193) - ((i * (unint64_t)*(unsigned int *)(a2 + 201)) >> 4);
    uint64_t result = sub_1006DD65C(a1, 15LL, (uint64_t)v10, 41LL);
  }

  return result;
}

uint64_t sub_100C9F080(uint64_t a1, uint64_t a2)
{
  return sub_100C9EFBC(a1 - 152, a2);
}

uint64_t sub_100C9F088(uint64_t a1, uint64_t a2)
{
  double v4 = (float *)(a2 + 9);
  for (uint64_t i = 14LL; i != -1; --i)
  {
    double v6 = *(double *)(a1 + 352);
    double v7 = v6;
    if (*(_BYTE *)(a1 + 653))
    {
      double v7 = *(double *)(a1 + 352);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_100C93680(a1);
        *(_BYTE *)(a1 + 653) = 0;
        double v7 = *(double *)(a1 + 352);
      }
    }

    v12[0] = v6 + *(double *)(a1 + 664);
    v12[1] = v7;
    char v13 = 3;
    uint64_t v14 = *((void *)v4 - 1);
    float v15 = *v4;
    int v16 = 0;
    unint64_t v17 = *(void *)(a2 + 181) - i * (unint64_t)*(unsigned int *)(a2 + 189) / 0xF;
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_10199D5A8);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_10199D5A8))
    {
      qword_10199D5A0 = v17;
      __cxa_guard_release(&qword_10199D5A8);
    }

    if (!(_BYTE)qword_10199D598++)
    {
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10187C278);
      }
      int v10 = (os_log_s *)qword_1019345D8;
      if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__n128 buf = 68290562;
        int v19 = 0;
        __int16 v20 = 2082;
        double v21 = "";
        __int16 v22 = 2050;
        double v23 = *(float *)&v14;
        __int16 v24 = 2050;
        double v25 = *((float *)&v14 + 1);
        __int16 v26 = 2050;
        double v27 = v15;
        __int16 v28 = 2050;
        unint64_t v29 = v17;
        __int16 v30 = 2050;
        unint64_t v31 = v17 - qword_10199D5A0;
        __int16 v32 = 2050;
        uint64_t v33 = qword_10199D598;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:visitHgal notifying clients (sampled), x:%{public}f, y:%{public}f,  z:%{public}f, ts:%{public}llu, dts:%{public}llu, index:%{public}llu}",  buf,  0x4Eu);
      }
    }

    qword_10199D5A0 = v17;
    uint64_t result = sub_1006DD65C(a1, 19LL, (uint64_t)v12, 41LL);
    v4 += 3;
  }

  return result;
}

uint64_t sub_100C9F2E8(uint64_t a1, uint64_t a2)
{
  return sub_100C9F088(a1 - 152, a2);
}

uint64_t sub_100C9F2F0(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }

  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  char v8 = 2;
  __int128 v9 = *(_OWORD *)(a2 + 1);
  uint64_t v10 = *(void *)(a2 + 17);
  return sub_1006DD65C(a1, 17LL, (uint64_t)v7, 41LL);
}

uint64_t sub_100C9F384(uint64_t a1, uint64_t a2)
{
  return sub_100C9F2F0(a1 - 152, a2);
}

uint64_t sub_100C9F38C(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 17);
  __int128 v4 = *(_OWORD *)(a2 + 49);
  _DWORD v8[2] = *(_OWORD *)(a2 + 33);
  _OWORD v8[3] = v4;
  int v9 = *(_DWORD *)(a2 + 65);
  v8[0] = *(_OWORD *)(a2 + 1);
  v8[1] = v3;
  double v5 = *(double *)(a1 + 352);
  double v6 = v5;
  if (*(_BYTE *)(a1 + 653))
  {
    double v6 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v6 = *(double *)(a1 + 352);
    }
  }

  double v10 = v5 + *(double *)(a1 + 664);
  double v11 = v6;
  return sub_1006DD65C(a1, 18LL, (uint64_t)v8, 84LL);
}

uint64_t sub_100C9F428(uint64_t a1, uint64_t a2)
{
  return sub_100C9F38C(a1 - 152, a2);
}

uint64_t sub_100C9F430(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)double v6 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 21);
  double v3 = *(double *)(a1 + 352);
  double v4 = v3;
  if (*(_BYTE *)(a1 + 653))
  {
    double v4 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v4 = *(double *)(a1 + 352);
    }
  }

  double v7 = v3 + *(double *)(a1 + 664);
  double v8 = v4;
  return sub_1006DD65C(a1, 23LL, (uint64_t)v6, 44LL);
}

uint64_t sub_100C9F4E8(uint64_t a1, uint64_t a2)
{
  return sub_100C9F430(a1 - 152, a2);
}

uint64_t sub_100C9F4F0(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 25);
  v7[0] = *(_OWORD *)(a2 + 9);
  v7[1] = v3;
  int v8 = *(_DWORD *)(a2 + 41);
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(_BYTE *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }

  double v9 = v4 + *(double *)(a1 + 664);
  double v10 = v5;
  return sub_1006DD65C(a1, 24LL, (uint64_t)v7, 52LL);
}

uint64_t sub_100C9F5AC(uint64_t a1, uint64_t a2)
{
  return sub_100C9F4F0(a1 - 152, a2);
}

uint64_t sub_100C9F5B4(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 57);
  __int128 v4 = *(_OWORD *)(a2 + 89);
  _DWORD v9[4] = *(_OWORD *)(a2 + 73);
  v9[5] = v4;
  uint64_t v10 = *(void *)(a2 + 105);
  __int128 v5 = *(_OWORD *)(a2 + 25);
  v9[0] = *(_OWORD *)(a2 + 9);
  v9[1] = v5;
  _DWORD v9[2] = *(_OWORD *)(a2 + 41);
  v9[3] = v3;
  double v6 = *(double *)(a1 + 352);
  double v7 = v6;
  if (*(_BYTE *)(a1 + 653))
  {
    double v7 = *(double *)(a1 + 352);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v7 = *(double *)(a1 + 352);
    }
  }

  double v11 = v6 + *(double *)(a1 + 664);
  double v12 = v7;
  return sub_1006DD65C(a1, 25LL, (uint64_t)v9, 120LL);
}

uint64_t sub_100C9F658(uint64_t a1, uint64_t a2)
{
  return sub_100C9F5B4(a1 - 152, a2);
}

uint64_t sub_100C9F660(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 9);
  int v4 = *(unsigned __int8 *)(a2 + 17);
  uint64_t v5 = *(void *)(a2 + 18);
  float v6 = *(float *)(a2 + 26);
  float v7 = *(float *)(a2 + 30);
  uint64_t v8 = *(void *)(a2 + 34);
  uint64_t v9 = *(void *)(a2 + 42);
  float v10 = *(float *)(a2 + 50);
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10187C278);
  }
  double v11 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)&double v14 = 68291075LL;
    *(_WORD *)float v15 = 2082;
    *(void *)&_DWORD v15[2] = "";
    *(_WORD *)&v15[10] = 2049;
    *(void *)&v15[12] = v3;
    LOWORD(v16) = 1025;
    *(_DWORD *)((char *)&v16 + 2) = v4;
    HIWORD(v16) = 2049;
    uint64_t v17 = v5;
    *(_WORD *)double v18 = 2049;
    *(double *)&v18[2] = v6;
    *(_WORD *)&v18[10] = 2049;
    double v19 = v7;
    __int16 v20 = 2049;
    uint64_t v21 = v8;
    __int16 v22 = 2049;
    uint64_t v23 = v9;
    __int16 v24 = 2049;
    double v25 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Fall distance event record, fFallTimestamp:%{private}llu, fOperatingMode:%{privat e}u, fPeakTimestamp:%{private}llu, fBeforeImpactElevation:%{private}.4f, fAfterImpactElevation:% {private}.4f, fBeforeImpactStaticPeriodStartTimestamp:%{private}llu, fAfterImpactStaticPeriodStartTimestam p:%{private}llu, fFallDistance:%{private}.4f}",  (uint8_t *)&v14,  0x5Eu);
  }

  double v12 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v14 = v12 + *(double *)(a1 + 664);
  *(void *)float v15 = v3;
  *(void *)&_WORD v15[8] = v5;
  *(_DWORD *)&v15[16] = v4;
  unint64_t v16 = __PAIR64__(LODWORD(v7), LODWORD(v6));
  uint64_t v17 = v8;
  *(void *)double v18 = v9;
  *(float *)&v18[8] = v10;
  return sub_1006DD65C(a1, 26LL, (uint64_t)&v14, 56LL);
}

uint64_t sub_100C9F82C(uint64_t a1, uint64_t a2)
{
  return sub_100C9F660(a1 - 152, a2);
}

uint64_t sub_100C9F834(uint64_t a1)
{
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10187C278);
  }
  double v2 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "CLMotionCoprocessor::visitHighResolutionImpactDataStart",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10187C278);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLMotionCoprocessor::visitHighResolutionImpactDataStart",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitHighResolutionImpactDataStart(const CMMotionCoprocessorReply::HighResolutio nImpactDataStart *)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  *(_OWORD *)__n128 buf = 0u;
  memset(v8, 0, sizeof(v8));
  return sub_1006DD65C(a1, 14LL, (uint64_t)buf, 41LL);
}

uint64_t sub_100C9F9E4(uint64_t a1)
{
  return sub_100C9F834(a1 - 152);
}

uint64_t sub_100C9F9EC(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 859))
  {
    uint64_t v3 = result;
    if (*(_BYTE *)(result + 653))
    {
      if (!*(_BYTE *)(result + 652))
      {
        sub_100C93680(result);
        *(_BYTE *)(v3 + 653) = 0;
      }
    }

    double v5 = v4 + *(double *)(v3 + 664);
    __int128 v6 = *(_OWORD *)(a2 + 48);
    _DWORD v8[2] = *(_OWORD *)(a2 + 32);
    _OWORD v8[3] = v6;
    int v9 = *(_DWORD *)(a2 + 64);
    __int128 v7 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v7;
    double v10 = v5;
    return sub_1006DD65C(v3, 27LL, (uint64_t)v8, 80LL);
  }

  return result;
}

uint64_t sub_100C9FA9C(uint64_t a1, uint64_t a2)
{
  return sub_100C9F9EC(a1 - 152, a2);
}

void sub_100C9FAA4(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 859)) {
    return;
  }
  double v4 = (double)*(unint64_t *)(a2 + 1);
  unint64_t v5 = *(void *)(a2 + 17);
  double v6 = (double)v5;
  double v7 = *(double *)(a1 + 352);
  if (!*(_BYTE *)(a1 + 653))
  {
    char v8 = 1;
    goto LABEL_6;
  }

  if (*(_BYTE *)(a1 + 652))
  {
    char v8 = 0;
LABEL_6:
    double v9 = (double)v5;
    double v10 = *(double *)(a1 + 352);
    goto LABEL_8;
  }

  sub_100C93680(a1);
  *(_BYTE *)(a1 + 653) = 0;
  double v10 = *(double *)(a1 + 352);
  double v9 = (double)*(unint64_t *)(a2 + 17);
  char v8 = 1;
LABEL_8:
  double v11 = v4 - v6;
  double v12 = *(double *)(a1 + 664);
  double v13 = (double)*(unint64_t *)(a2 + 9) - v9;
  double v14 = v12;
  if ((v8 & 1) == 0)
  {
    double v14 = *(double *)(a1 + 664);
    if (!*(_BYTE *)(a1 + 652))
    {
      sub_100C93680(a1);
      *(_BYTE *)(a1 + 653) = 0;
      double v14 = *(double *)(a1 + 664);
    }
  }

  double v15 = v11 / 1000000.0;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  double v16 = v7 + v15;
  double v17 = v10 + v13 / 1000000.0;
  double v18 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *(void *)(a2 + 17);
    uint64_t v20 = *(void *)(a2 + 1);
    uint64_t v21 = *(void *)(a2 + 9);
    double v22 = *(float *)(a2 + 25);
    double v23 = *(float *)(a2 + 29);
    double v24 = *(float *)(a2 + 33);
    double v25 = *(float *)(a2 + 37);
    int v26 = *(unsigned __int8 *)(a2 + 41);
    int v27 = *(unsigned __int8 *)(a2 + 42);
    *(_DWORD *)__n128 buf = 134351104;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&_BYTE buf[14] = v20;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&uint8_t buf[24] = v21;
    *(_WORD *)__int16 v61 = 2050;
    *(double *)&v61[2] = v22;
    *(_WORD *)&v61[10] = 2050;
    *(double *)&_BYTE v61[12] = v23;
    __int16 v62 = 2050;
    double v63 = v24;
    __int16 v64 = 2050;
    double v65 = v25;
    __int16 v66 = 1026;
    int v67 = v26;
    __int16 v68 = 1026;
    int v69 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "visitFlightSegment,now,%{public}llu,start,%{public}llu,end,%{public}llu,rate,%{public}f,probability, %{public}f, e levationChange, %{public}f, regressionMad, %{public}f, isValid, %{public}d, hasAtLeast2mElevChange, %{public}d",  buf,  0x54u);
  }

  double v28 = v16 + v12;
  double v29 = v17 + v14;
  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v31 = *(void *)(a2 + 17);
    uint64_t v32 = *(void *)(a2 + 1);
    uint64_t v33 = *(void *)(a2 + 9);
    double v34 = *(float *)(a2 + 25);
    double v35 = *(float *)(a2 + 29);
    double v36 = *(float *)(a2 + 33);
    double v37 = *(float *)(a2 + 37);
    int v38 = *(unsigned __int8 *)(a2 + 41);
    int v39 = *(unsigned __int8 *)(a2 + 42);
    int v42 = 134351104;
    uint64_t v43 = v31;
    __int16 v44 = 2050;
    uint64_t v45 = v32;
    __int16 v46 = 2050;
    uint64_t v47 = v33;
    __int16 v48 = 2050;
    double v49 = v34;
    __int16 v50 = 2050;
    double v51 = v35;
    __int16 v52 = 2050;
    double v53 = v36;
    __int16 v54 = 2050;
    double v55 = v37;
    __int16 v56 = 1026;
    int v57 = v38;
    __int16 v58 = 1026;
    int v59 = v39;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "visitFlightSegment,now,%{public}llu,start,%{public}llu,end,%{public}llu,rate,%{public}f,probability, %{public}f, e levationChange, %{public}f, regressionMad, %{public}f, isValid, %{public}d, hasAtLeast2mElevChange, %{public}d",  &v42,  84);
    int v41 = (char *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitFlightSegment(const CMMotionCoprocessorReply::FlightSegment *)",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

  *(double *)__n128 buf = v28;
  *(double *)&uint8_t buf[8] = v29;
  __int128 v30 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a2 + 1);
  *(_OWORD *)__int16 v61 = v30;
  v61[16] = *(_BYTE *)(a2 + 41);
  v61[17] = *(_BYTE *)(a2 + 42);
  if (v61[16]) {
    sub_1006DD65C(a1, 28LL, (uint64_t)buf, 56LL);
  }
}

void sub_100C9FE5C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100C9FE64(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = (double)*(unint64_t *)(a2 + 5) - (double)*(unint64_t *)(a2 + 41);
  double v6 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653))
  {
    if (*(_BYTE *)(a1 + 652))
    {
      char v7 = 0;
      goto LABEL_6;
    }

    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  char v7 = 1;
LABEL_6:
  double v8 = *(double *)(a1 + 664);
  unint64_t v9 = *(void *)(a2 + 33);
  double v10 = v5 / 1000000.0;
  if (v9)
  {
    double v11 = *(double *)(a1 + 352) + ((double)v9 - (double)*(unint64_t *)(a2 + 41)) / 1000000.0;
    double v12 = *(double *)(a1 + 664);
    if ((v7 & 1) == 0)
    {
      double v12 = *(double *)(a1 + 664);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_100C93680(a1);
        *(_BYTE *)(a1 + 653) = 0;
        double v12 = *(double *)(a1 + 664);
      }
    }

    double v13 = v11 + v12;
  }

  else
  {
    double v13 = 0.0;
  }

  double v14 = v6 + v10;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  double v15 = v14 + v8;
  double v16 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a2 + 41);
    double v18 = *(float *)(a2 + 1);
    uint64_t v19 = *(void *)(a2 + 5);
    double v20 = *(float *)(a2 + 25);
    double v21 = *(float *)(a2 + 17);
    double v22 = *(float *)(a2 + 29);
    *(_DWORD *)__n128 buf = 134351104;
    *(double *)int v69 = Current;
    *(_WORD *)&v69[8] = 2050;
    *(void *)&v69[10] = v17;
    *(_WORD *)&_BYTE v69[18] = 2050;
    double v70 = v18;
    *(_WORD *)__int16 v71 = 2050;
    *(void *)&v71[2] = v19;
    *(_WORD *)&v71[10] = 2050;
    *(double *)&v71[12] = v20;
    __int16 v72 = 2050;
    double v73 = v15;
    __int16 v74 = 2050;
    double v75 = v13;
    __int16 v76 = 2050;
    double v77 = v21;
    __int16 v78 = 2050;
    double v79 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{publi c}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDeriva tive,%{public}f,absAltUnc,%{public}f",  buf,  0x5Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v33 = *(void *)(a2 + 41);
    double v34 = *(float *)(a2 + 1);
    uint64_t v35 = *(void *)(a2 + 5);
    double v36 = *(float *)(a2 + 25);
    double v37 = *(float *)(a2 + 17);
    double v38 = *(float *)(a2 + 29);
    int v50 = 134351104;
    double v51 = Current;
    __int16 v52 = 2050;
    uint64_t v53 = v33;
    __int16 v54 = 2050;
    double v55 = v34;
    __int16 v56 = 2050;
    uint64_t v57 = v35;
    __int16 v58 = 2050;
    double v59 = v36;
    __int16 v60 = 2050;
    double v61 = v15;
    __int16 v62 = 2050;
    double v63 = v13;
    __int16 v64 = 2050;
    double v65 = v37;
    __int16 v66 = 2050;
    double v67 = v38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{publi c}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDeriva tive,%{public}f,absAltUnc,%{public}f",  &v50,  92);
    __int16 v40 = (uint8_t *)v39;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitKFFilteredPressure(const CMMotionCoprocessorReply::KFFilteredPressure *)",  "%s\n",  v39);
    if (v40 != buf) {
      free(v40);
    }
  }

  if (vabdd_f64(Current, *(double *)(a1 + 1424)) > 10.0)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    double v23 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a2 + 41);
      double v25 = *(float *)(a2 + 1);
      uint64_t v26 = *(void *)(a2 + 5);
      double v27 = *(float *)(a2 + 25);
      double v28 = *(float *)(a2 + 17);
      double v29 = *(float *)(a2 + 29);
      *(_DWORD *)__n128 buf = 134351104;
      *(double *)int v69 = Current;
      *(_WORD *)&v69[8] = 2050;
      *(void *)&v69[10] = v24;
      *(_WORD *)&_BYTE v69[18] = 2050;
      double v70 = v25;
      *(_WORD *)__int16 v71 = 2050;
      *(void *)&v71[2] = v26;
      *(_WORD *)&v71[10] = 2050;
      *(double *)&v71[12] = v27;
      __int16 v72 = 2050;
      double v73 = v15;
      __int16 v74 = 2050;
      double v75 = v13;
      __int16 v76 = 2050;
      double v77 = v28;
      __int16 v78 = 2050;
      double v79 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{pub lic}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDe rivative,%{public}f,absAltUnc,%{public}f",  buf,  0x5Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      uint64_t v41 = *(void *)(a2 + 41);
      double v42 = *(float *)(a2 + 1);
      uint64_t v43 = *(void *)(a2 + 5);
      double v44 = *(float *)(a2 + 25);
      double v45 = *(float *)(a2 + 17);
      double v46 = *(float *)(a2 + 29);
      int v50 = 134351104;
      double v51 = Current;
      __int16 v52 = 2050;
      uint64_t v53 = v41;
      __int16 v54 = 2050;
      double v55 = v42;
      __int16 v56 = 2050;
      uint64_t v57 = v43;
      __int16 v58 = 2050;
      double v59 = v44;
      __int16 v60 = 2050;
      double v61 = v15;
      __int16 v62 = 2050;
      double v63 = v13;
      __int16 v64 = 2050;
      double v65 = v45;
      __int16 v66 = 2050;
      double v67 = v46;
      LODWORD(v49) = 92;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{pub lic}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDe rivative,%{public}f,absAltUnc,%{public}f",  &v50,  v49);
      __int16 v48 = (uint8_t *)v47;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitKFFilteredPressure(const CMMotionCoprocessorReply::KFFilteredPressure *)",  "%s\n",  v47);
      if (v48 != buf) {
        free(v48);
      }
    }

    *(double *)(a1 + 1424) = Current;
  }

  *(_DWORD *)__n128 buf = *(_DWORD *)(a2 + 1);
  uint64_t v30 = *(void *)(a2 + 21);
  *(double *)&v69[4] = v15;
  *(void *)&v69[12] = v30;
  LODWORD(v7sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_DWORD *)(a2 + 29);
  uint64_t v31 = *(void *)(a2 + 13);
  *(double *)__int16 v71 = v13;
  *(void *)&v71[8] = v31;
  return sub_1006DD65C(a1, 30LL, (uint64_t)buf, 48LL);
}

uint64_t sub_100CA0424(uint64_t a1, uint64_t a2)
{
  return sub_100C9FE64(a1 - 152, a2);
}

void sub_100CA043C(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v5 = v4 + *(double *)(a1 + 664);
  double v6 = *(float *)(a2 + 4);
  double v7 = *(float *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 568);
  unint64_t v9 = *(double **)(a1 + 552);
  unint64_t v10 = *(void *)(a1 + 560);
  if ((unint64_t)v9 >= v10)
  {
    double v12 = *(double **)(a1 + 544);
    uint64_t v13 = ((char *)v9 - (char *)v12) >> 5;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 4 > v14) {
      unint64_t v14 = v15 >> 4;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_10000835C(a1 + 560, v16);
      unint64_t v9 = *(double **)(a1 + 552);
      double v12 = *(double **)(a1 + 544);
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    double v18 = (double *)&v17[32 * v13];
    *double v18 = v5;
    v18[1] = v6;
    uint64_t v19 = &v17[32 * v16];
    v18[2] = v7;
    *((void *)v18 + 3) = v8;
    double v11 = v18 + 4;
    if (v9 != v12)
    {
      do
      {
        __int128 v20 = *((_OWORD *)v9 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v18 - 1) = v20;
        v18 -= 4;
        v9 -= 4;
      }

      while (v9 != v12);
      double v12 = *(double **)(a1 + 544);
    }

    *(void *)(a1 + 544) = v18;
    *(void *)(a1 + 552) = v11;
    *(void *)(a1 + 56sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v19;
    if (v12) {
      operator delete(v12);
    }
  }

  else
  {
    double *v9 = v5;
    v9[1] = v6;
    double v11 = v9 + 4;
    _DWORD v9[2] = v7;
    *((void *)v9 + 3) = v8;
  }

  *(void *)(a1 + 552) = v11;
  if (qword_101934510 != -1) {
    dispatch_once(&qword_101934510, &stru_10187C118);
  }
  double v21 = (os_log_s *)qword_101934518;
  if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(a1 + 352);
    double v23 = *(float *)(a2 + 4);
    double v24 = *(float *)(a2 + 8);
    uint64_t v25 = *(void *)(a1 + 568);
    *(_DWORD *)__n128 buf = 134350080;
    uint64_t v43 = v22;
    __int16 v44 = 2050;
    double v45 = v23;
    __int16 v46 = 2050;
    double v47 = v24;
    __int16 v48 = 2050;
    uint64_t v49 = v25;
    __int16 v50 = 2050;
    double v51 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "timestamp,%{public}.3f,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187C118);
    }
    uint64_t v26 = *(void *)(a1 + 352);
    double v27 = *(float *)(a2 + 4);
    double v28 = *(float *)(a2 + 8);
    uint64_t v29 = *(void *)(a1 + 568);
    int v32 = 134350080;
    uint64_t v33 = v26;
    __int16 v34 = 2050;
    double v35 = v27;
    __int16 v36 = 2050;
    double v37 = v28;
    __int16 v38 = 2050;
    uint64_t v39 = v29;
    __int16 v40 = 2050;
    double v41 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "timestamp,%{public}.3f,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f",  &v32,  52);
    uint64_t v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitPathStraightness(const CMMotionCoprocessorReply::PathStraightness *)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

void sub_100CA0778(uint64_t a1, uint64_t a2)
{
}

void sub_100CA0780(uint64_t a1, _OWORD *a2)
{
}

void sub_100CA078C(uint64_t a1, _OWORD *a2)
{
}

uint64_t sub_100CA0798(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return sub_1006DD65C(a1, 29LL, (uint64_t)&v3, 8LL);
}

uint64_t sub_100CA07C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return sub_1006DD65C(a1 - 152, 29LL, (uint64_t)&v3, 8LL);
}

uint64_t sub_100CA07FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a2 + 80;
  do
  {
    unint64_t v5 = *(void *)(v4 + 8 * v3);
    if (v5 <= qword_10199D5B0) {
      unint64_t v5 = qword_10199D5B0 + 1000;
    }
    qword_10199D5B0 = v5;
    unint64_t v7 = v5;
    float v8 = sqrtf(*(float *)(v4 + 4 * v3 - 76));
    uint64_t result = sub_1006DD65C(a1, 34LL, (uint64_t)&v7, 16LL);
    ++v3;
  }

  while (v3 != 19);
  return result;
}

uint64_t sub_100CA0880(uint64_t a1, uint64_t a2)
{
  return sub_100CA07FC(a1 - 152, a2);
}

void sub_100CA0888(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = a1 + 1768;
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(_OWORD *)(a1 + 1796) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 176_Block_object_dispose(va, 8) = v4;
  *(_OWORD *)(a1 + 1784) = v5;
  *(_BYTE *)(a1 + 1812) = 1;
  double v6 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v7 = *(double *)(a1 + 664);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  float v8 = (float *)(a1 + 1779);
  double v9 = v6 + v7;
  unint64_t v10 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 1777);
    int v12 = *(unsigned __int8 *)(a1 + 1778);
    int v13 = *(unsigned __int8 *)(a1 + 1799);
    double v14 = *(float *)(a1 + 1800);
    double v15 = *(float *)(a1 + 1783);
    double v16 = *(float *)(a1 + 1787);
    double v17 = *(float *)(a1 + 1804);
    double v18 = *(float *)(a1 + 1791);
    double v19 = *v8;
    double v20 = *(float *)(a1 + 1808);
    *(_DWORD *)__n128 buf = 134351616;
    double v60 = v9;
    __int16 v61 = 1026;
    int v62 = v11;
    __int16 v63 = 1026;
    int v64 = v12;
    __int16 v65 = 1026;
    int v66 = v13;
    __int16 v67 = 2050;
    double v68 = v14;
    __int16 v69 = 2050;
    double v70 = v15;
    __int16 v71 = 2050;
    double v72 = v16;
    __int16 v73 = 2050;
    double v74 = v17;
    __int16 v75 = 2050;
    double v76 = v18;
    __int16 v77 = 2050;
    double v78 = v19;
    __int16 v79 = 2050;
    double v80 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "saving submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPre ssure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{p ublic}f,depth,%{public}f",  buf,  0x64u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v24 = *(unsigned __int8 *)(a1 + 1777);
    int v25 = *(unsigned __int8 *)(a1 + 1778);
    int v26 = *(unsigned __int8 *)(a1 + 1799);
    double v27 = *(float *)(a1 + 1800);
    double v28 = *(float *)(a1 + 1783);
    double v29 = *(float *)(a1 + 1787);
    double v30 = *(float *)(a1 + 1804);
    double v31 = *(float *)(a1 + 1791);
    double v32 = *v8;
    double v33 = *(float *)(a1 + 1808);
    int v37 = 134351616;
    double v38 = v9;
    __int16 v39 = 1026;
    int v40 = v24;
    __int16 v41 = 1026;
    int v42 = v25;
    __int16 v43 = 1026;
    int v44 = v26;
    __int16 v45 = 2050;
    double v46 = v27;
    __int16 v47 = 2050;
    double v48 = v28;
    __int16 v49 = 2050;
    double v50 = v29;
    __int16 v51 = 2050;
    double v52 = v30;
    __int16 v53 = 2050;
    double v54 = v31;
    __int16 v55 = 2050;
    double v56 = v32;
    __int16 v57 = 2050;
    double v58 = v33;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "saving submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPre ssure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{p ublic}f,depth,%{public}f",  &v37,  100);
    double v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitSubmersionState(const CMMotionCoprocessorReply::SubmersionState *)",  "%s\n",  v34);
    if (v35 != buf) {
      free(v35);
    }
  }

  if (*(_BYTE *)(a1 + 859) || *(_BYTE *)(a1 + 1756) || *(_BYTE *)(a1 + 1755))
  {
    *(_BYTE *)(a1 + 1756) = 0;
    sub_100CA0D08(a1, v3);
    *(_BYTE *)(a1 + 1812) = 0;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    double v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "fitness tracking off, not sending the submersion state from AOP to AP",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      LOWORD(v37) = 0;
      LODWORD(v36) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "fitness tracking off, not sending the submersion state from AOP to AP",  &v37,  v36);
      double v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitSubmersionState(const CMMotionCoprocessorReply::SubmersionState *)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

void sub_100CA0D08(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v5 = *(double *)(a1 + 664);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  double v6 = v4 + v5;
  double v7 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a2 + 9);
    int v9 = *(unsigned __int8 *)(a2 + 10);
    int v10 = *(unsigned __int8 *)(a2 + 31);
    double v11 = *(float *)(a2 + 32);
    double v12 = *(float *)(a2 + 15);
    double v13 = *(float *)(a2 + 19);
    double v14 = *(float *)(a2 + 36);
    double v15 = *(float *)(a2 + 23);
    double v16 = *(float *)(a2 + 11);
    double v17 = *(float *)(a2 + 40);
    *(_DWORD *)__n128 buf = 134351616;
    double v100 = v6;
    __int16 v101 = 1026;
    *(_DWORD *)float v102 = v8;
    *(_WORD *)&v102[4] = 1026;
    *(_DWORD *)&v102[6] = v9;
    LOWORD(v103) = 1026;
    *(_DWORD *)((char *)&v103 + 2) = v10;
    HIWORD(v103) = 2050;
    *(double *)int v104 = v11;
    *(_WORD *)&v104[8] = 2050;
    double v105 = v12;
    __int16 v106 = 2050;
    double v107 = v13;
    __int16 v108 = 2050;
    double v109 = v14;
    __int16 v110 = 2050;
    double v111 = v15;
    __int16 v112 = 2050;
    double v113 = v16;
    __int16 v114 = 2050;
    double v115 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "received submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfP ressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,% {public}f,depth,%{public}f",  buf,  0x64u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v28 = *(unsigned __int8 *)(a2 + 9);
    int v29 = *(unsigned __int8 *)(a2 + 10);
    int v30 = *(unsigned __int8 *)(a2 + 31);
    double v31 = *(float *)(a2 + 32);
    double v32 = *(float *)(a2 + 15);
    double v33 = *(float *)(a2 + 19);
    double v34 = *(float *)(a2 + 36);
    double v35 = *(float *)(a2 + 23);
    double v36 = *(float *)(a2 + 11);
    double v37 = *(float *)(a2 + 40);
    int v82 = 134351616;
    double v83 = v6;
    __int16 v84 = 1026;
    *(_DWORD *)__int16 v85 = v28;
    *(_WORD *)&v85[4] = 1026;
    *(_DWORD *)&v85[6] = v29;
    LOWORD(v86) = 1026;
    *(_DWORD *)((char *)&v86 + 2) = v30;
    HIWORD(v86) = 2050;
    *(double *)__int16 v87 = v31;
    *(_WORD *)&v87[8] = 2050;
    double v88 = v32;
    __int16 v89 = 2050;
    double v90 = v33;
    __int16 v91 = 2050;
    double v92 = v34;
    __int16 v93 = 2050;
    double v94 = v35;
    __int16 v95 = 2050;
    double v96 = v36;
    __int16 v97 = 2050;
    double v98 = v37;
    double v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "received submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{ public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,co rrelation,%{public}f,slope,%{public}f,depth,%{public}f",  &v82,  100);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)",  "%s\n",  v38);
  }

  double v80 = v6;
  unsigned __int8 v81 = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 1755) = v81 > 1u;
  *(_DWORD *)(a1 + 176sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(unsigned __int8 *)(a2 + 10);
  float v18 = *(float *)(a2 + 40);
  *(float *)(a1 + 1764) = v18;
  double v76 = 0LL;
  uint64_t v77 = 0LL;
  std::string __p = 0LL;
  sub_10001B72C(&__p, (const void *)qword_10199D530, qword_10199D538, (qword_10199D538 - qword_10199D530) >> 2);
  sub_1001B4760((uint64_t)&__p, &v78, v18);
  if (__p)
  {
    double v76 = __p;
    operator delete(__p);
  }

  float v19 = *(float *)(a2 + 19);
  __int16 v71 = 0LL;
  uint64_t v72 = 0LL;
  double v70 = 0LL;
  sub_10001B72C(&v70, (const void *)qword_10199D548, qword_10199D550, (qword_10199D550 - qword_10199D548) >> 2);
  sub_1001B4760((uint64_t)&v70, &v73, v19);
  if (v70)
  {
    __int16 v71 = v70;
    operator delete(v70);
  }

  float v20 = *(float *)(a2 + 15);
  int v66 = 0LL;
  uint64_t v67 = 0LL;
  __int16 v65 = 0LL;
  sub_10001B72C(&v65, (const void *)qword_10199D560, qword_10199D568, (qword_10199D568 - qword_10199D560) >> 2);
  sub_1001B4760((uint64_t)&v65, &v68, v20);
  if (v65)
  {
    int v66 = v65;
    operator delete(v65);
  }

  float v21 = *(float *)(a2 + 36);
  __int16 v61 = 0LL;
  uint64_t v62 = 0LL;
  double v60 = 0LL;
  sub_10001B72C(&v60, (const void *)qword_10199D578, qword_10199D580, (qword_10199D580 - qword_10199D578) >> 2);
  sub_1001B4760((uint64_t)&v60, &v63, v21);
  if (v60)
  {
    __int16 v61 = v60;
    operator delete(v60);
  }

  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  uint64_t v22 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    double v23 = &v78;
    if (v79 < 0) {
      double v23 = (__int128 *)v78;
    }
    int v24 = &v73;
    if (v74 < 0) {
      int v24 = (__int128 *)v73;
    }
    int v25 = &v68;
    if (v69 < 0) {
      int v25 = (__int128 *)v68;
    }
    int v26 = &v63;
    if (v64 < 0) {
      int v26 = (__int128 *)v63;
    }
    *(_DWORD *)__n128 buf = 136315906;
    double v100 = *(double *)&v23;
    __int16 v101 = 2080;
    *(void *)float v102 = v24;
    *(_WORD *)&v102[8] = 2080;
    float v103 = v25;
    *(_WORD *)int v104 = 2080;
    *(void *)&v104[2] = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Analytics submersion,depth,%s,maxAccel,%s,maxMinPressure,%s,touchDelay,%s",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    __int16 v39 = &v78;
    if (v79 < 0) {
      __int16 v39 = (__int128 *)v78;
    }
    int v40 = &v73;
    if (v74 < 0) {
      int v40 = (__int128 *)v73;
    }
    __int16 v41 = &v68;
    if (v69 < 0) {
      __int16 v41 = (__int128 *)v68;
    }
    int v42 = &v63;
    if (v64 < 0) {
      int v42 = (__int128 *)v63;
    }
    int v82 = 136315906;
    double v83 = *(double *)&v39;
    __int16 v84 = 2080;
    *(void *)__int16 v85 = v40;
    *(_WORD *)&v85[8] = 2080;
    int v86 = v41;
    *(_WORD *)__int16 v87 = 2080;
    *(void *)&v87[2] = v42;
    LODWORD(v45) = 42;
    __int16 v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Analytics submersion,depth,%s,maxAccel,%s,maxMinPressure,%s,touchDelay,%s",  (const char *)&v82,  v45,  v46,  v47);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)",  "%s\n",  v43);
  }

  double v46 = (const char *)_NSConcreteStackBlock;
  __int16 v47 = (const char *)3321888768LL;
  double v48 = sub_100CA17A0;
  __int16 v49 = &unk_10187BF40;
  uint64_t v50 = a1;
  if (SHIBYTE(v79) < 0)
  {
    sub_1010DD48C(&v51, (void *)v78, *((unint64_t *)&v78 + 1));
  }

  else
  {
    __int128 v51 = v78;
    uint64_t v52 = v79;
  }

  if (SHIBYTE(v74) < 0)
  {
    sub_1010DD48C(&v53, (void *)v73, *((unint64_t *)&v73 + 1));
  }

  else
  {
    __int128 v53 = v73;
    uint64_t v54 = v74;
  }

  if (SHIBYTE(v69) < 0)
  {
    sub_1010DD48C(&v55, (void *)v68, *((unint64_t *)&v68 + 1));
  }

  else
  {
    __int128 v55 = v68;
    uint64_t v56 = v69;
  }

  if (SHIBYTE(v64) < 0)
  {
    sub_1010DD48C(&v57, (void *)v63, *((unint64_t *)&v63 + 1));
  }

  else
  {
    __int128 v57 = v63;
    uint64_t v58 = v64;
  }

  uint64_t v59 = a2;
  AnalyticsSendEventLazy(@"com.apple.Motion.Charon.SubmersionEvent", &v46);
  if (*(int *)(a1 + 1744) >= 1)
  {
    unsigned __int8 v81 = *(_DWORD *)(a1 + 1744);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    double v27 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 67240192;
      LODWORD(v10sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "overriding submersion state, %{public}u",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      int v82 = 67240192;
      LODWORD(v83) = v81;
      LODWORD(v45) = 8;
      int v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "overriding submersion state, %{public}u",  &v82,  v45,  v46,  v47,  v48,  v49,  v50,  (void)v51,  *((void *)&v51 + 1),  v52,  (void)v53,  *((void *)&v53 + 1),  v54,  (void)v55,  *((void *)&v55 + 1),  v56,  (void)v57,  *((void *)&v57 + 1),  v58);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)",  "%s\n",  v44);
    }
  }

  sub_1006DD65C(a1, 37LL, (uint64_t)&v80, 16LL);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete((void *)v55);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)v68);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
}

void sub_100CA1670( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *__p, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  _Unwind_Resume(a1);
}

void sub_100CA1798(uint64_t a1, __int128 *a2)
{
}

NSDictionary *sub_100CA17A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v8[0] = @"depth";
  uint64_t v3 = (void *)(a1 + 40);
  v9[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  v8[1] = @"maxAccel";
  double v4 = (void *)(a1 + 64);
  v9[1] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  _DWORD v8[2] = @"maxMinPressure";
  double v5 = (void *)(a1 + 88);
  _DWORD v9[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5);
  _OWORD v8[3] = @"touchDelay";
  double v6 = (void *)(a1 + 112);
  v9[3] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6);
  _OWORD v8[4] = @"submerged";
  _DWORD v9[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 1755));
  v8[5] = @"modelUsed";
  v9[5] = +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(*(void *)(a1 + 136) + 10LL));
  void v8[6] = @"modelUsedBounded";
  _OWORD v9[6] = +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(*(void *)(a1 + 136) + 10LL));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  7LL);
}

_BYTE *sub_100CA1918(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v4;
  }

  if (*(char *)(a2 + 87) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }

  if (*(char *)(a2 + 111) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 88), *(void **)(a2 + 88), *(void *)(a2 + 96));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v6;
  }

  uint64_t result = (_BYTE *)(a1 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_OWORD *)uint64_t result = v8;
  return result;
}

void sub_100CA1A04(_Unwind_Exception *exception_object)
{
  if (v2[111] < 0) {
    operator delete(*v4);
  }
  if (v2[87] < 0) {
    operator delete(*v3);
  }
  if (v2[63] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CA1A50(uint64_t a1)
{
}

uint64_t sub_100CA1AB4(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 859))
  {
    uint64_t v3 = result;
    double v4 = *(double *)(result + 352);
    if (*(_BYTE *)(result + 653) && !*(_BYTE *)(result + 652))
    {
      sub_100C93680(result);
      *(_BYTE *)(v3 + 653) = 0;
    }

    double v5 = *(double *)(v3 + 664);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    double v6 = v4 + v5;
    double v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      double v8 = *(float *)(a2 + 9);
      uint64_t v9 = *(void *)(a2 + 1);
      *(_DWORD *)__n128 buf = 134349568;
      *(double *)&uint8_t buf[4] = v6;
      __int16 v21 = 2050;
      double v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "received surface pressure from the AOP,timestamp,%{public}f,pressure,%{public}f,aopTime,%{public}llu",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      double v10 = *(float *)(a2 + 9);
      uint64_t v11 = *(void *)(a2 + 1);
      int v14 = 134349568;
      double v15 = v6;
      __int16 v16 = 2050;
      double v17 = v10;
      __int16 v18 = 2050;
      uint64_t v19 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "received surface pressure from the AOP,timestamp,%{public}f,pressure,%{public}f,aopTime,%{public}llu",  &v14,  32);
      double v13 = (char *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitSurfacePressure(const CMMotionCoprocessorReply::SurfacePressure *)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    *(double *)__n128 buf = v6;
    *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 9);
    return sub_1006DD65C(v3, 38LL, (uint64_t)buf, 16LL);
  }

  return result;
}

uint64_t sub_100CA1CF8(uint64_t a1, uint64_t a2)
{
  return sub_100CA1AB4(a1 - 152, a2);
}

uint64_t sub_100CA1D00(uint64_t a1, uint64_t a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  double v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    int v6 = *(unsigned __int8 *)(a2 + 9);
    *(_DWORD *)__n128 buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v18 = 1026;
    v19[0] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "received face covered event from the AOP,timestamp,%{public}llu,isCovered,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v9 = *(void *)(a2 + 1);
    int v10 = *(unsigned __int8 *)(a2 + 9);
    int v13 = 134349312;
    uint64_t v14 = v9;
    __int16 v15 = 1026;
    int v16 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "received face covered event from the AOP,timestamp,%{public}llu,isCovered,%{public}d",  &v13,  18);
    double v12 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitFaceCoveredEvent(const CMMotionCoprocessorReply::FaceCoveredEvent *)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  *(void *)__n128 buf = *(void *)(a2 + 1);
  uint8_t buf[8] = *(_BYTE *)(a2 + 9);
  double v7 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  *(double *)((char *)v19 + 2) = v7 + *(double *)(a1 + 664);
  return sub_1006DD65C(a1, 39LL, (uint64_t)buf, 24LL);
}

uint64_t sub_100CA1F2C(uint64_t a1, uint64_t a2)
{
  return sub_100CA1D00(a1 - 152, a2);
}

uint64_t sub_100CA1F34(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 6);
  unint64_t v5 = *(void *)(a2 + 14);
  double v6 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  double v7 = *(double *)(a1 + 664);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  double v8 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a2 + 14);
    uint64_t v10 = *(void *)(a2 + 6);
    double v11 = *(float *)(a2 + 2);
    double v12 = *(float *)(a2 + 22);
    *(_DWORD *)__n128 buf = 134349824;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&_BYTE buf[14] = v10;
    __int16 v29 = 2050;
    double v30 = v11;
    __int16 v31 = 2050;
    double v32 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "visitStairsEscalationEvent,now,%{public}llu,start,%{public}llu,stairMetric,%{public}f,vertSpeed,%{public}f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v14 = *(void *)(a2 + 14);
    uint64_t v15 = *(void *)(a2 + 6);
    double v16 = *(float *)(a2 + 2);
    double v17 = *(float *)(a2 + 22);
    int v20 = 134349824;
    uint64_t v21 = v14;
    __int16 v22 = 2050;
    uint64_t v23 = v15;
    __int16 v24 = 2050;
    double v25 = v16;
    __int16 v26 = 2050;
    double v27 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "visitStairsEscalationEvent,now,%{public}llu,start,%{public}llu,stairMetric,%{public}f,vertSpeed,%{public}f",  &v20,  42);
    uint64_t v19 = (char *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitStairsEscalationEvent(const CMMotionCoprocessorReply::StairsEscalationEvent *)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  *(double *)__n128 buf = v6 + ((double)v4 - (double)v5) / 1000000.0 + v7;
  *(void *)&uint8_t buf[8] = *(void *)(a2 + 6);
  *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a2 + 2);
  _BYTE buf[20] = *(_BYTE *)(a2 + 1);
  LODWORD(v3sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_DWORD *)(a2 + 22);
  return sub_1006DD65C(a1, 47LL, (uint64_t)buf, 32LL);
}

uint64_t sub_100CA21DC(uint64_t a1, uint64_t a2)
{
  return sub_100CA1F34(a1 - 152, a2);
}

uint64_t sub_100CA21E4(uint64_t a1, uint64_t a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  unint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    double v5 = *(float *)(a2 + 1);
    double v6 = *(float *)(a2 + 5);
    *(_DWORD *)__n128 buf = 134218240;
    *(double *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&_BYTE buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "received mean sea level pressure,mslp,%f,uncertainty,%f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    double v10 = *(float *)(a2 + 1);
    double v11 = *(float *)(a2 + 5);
    int v15 = 134218240;
    double v16 = v10;
    __int16 v17 = 2048;
    double v18 = v11;
    LODWORD(v14) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "received mean sea level pressure,mslp,%f,uncertainty,%f",  COERCE_DOUBLE(&v15),  v14);
    int v13 = (char *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitMeanSeaLevelPressure(const CMMotionCoprocessorReply::MeanSeaLevelPressure *)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  double v7 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }

  uint64_t v8 = *(void *)(a2 + 1);
  *(double *)__n128 buf = v7 + *(double *)(a1 + 664);
  *(void *)&uint8_t buf[8] = v8;
  return sub_1006DD65C(a1, 48LL, (uint64_t)buf, 16LL);
}

uint64_t sub_100CA2414(uint64_t a1, uint64_t a2)
{
  return sub_100CA21E4(a1 - 152, a2);
}

void sub_100CA241C(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2488;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2488(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 124_Block_object_dispose(va, 8) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100CA24C0(uint64_t a1, void *a2)
{
}

void sub_100CA24C8(uint64_t a1, int a2, double a3)
{
  if (qword_101934500 != -1) {
    dispatch_once(&qword_101934500, &stru_10187C218);
  }
  double v6 = (os_log_s *)qword_101934508;
  if (os_log_type_enabled((os_log_t)qword_101934508, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 67109376;
    int v14 = a2;
    LOWORD(v15[0]) = 2048;
    *(double *)((char *)v15 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "trigger,%u,duration,%f", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934500 != -1) {
      dispatch_once(&qword_101934500, &stru_10187C218);
    }
    v10[0] = 67109376;
    v10[1] = a2;
    __int16 v11 = 2048;
    double v12 = a3;
    LODWORD(v9) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934508,  1LL,  "trigger,%u,duration,%f",  v10,  v9);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::setActivityAlarm(CMActivityAlarmTrigger, NSTimeInterval)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  *(_DWORD *)__n128 buf = 3;
  int v14 = a2;
  v15[0] = (unint64_t)(a3 * 1000000.0);
  sub_100CAB2BC(a1 + 192, (__int128 *)buf, 0LL);
}

void sub_100CA26C4(uint64_t a1, int a2, double a3)
{
}

void sub_100CA26CC(uint64_t a1, int a2)
{
  LODWORD(v2) = 259;
  DWORD1(v2) = a2;
  *((void *)&v2 + 1) = 0LL;
  sub_100CAB2BC(a1 + 192, &v2, 0LL);
}

void sub_100CA2700(uint64_t a1, int a2)
{
  LODWORD(v2) = 259;
  DWORD1(v2) = a2;
  *((void *)&v2 + 1) = 0LL;
  sub_100CAB2BC(a1 + 152, &v2, 0LL);
}

void sub_100CA2734(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA279C;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA279C(uint64_t a1)
{
  __int128 v2 = *(_BYTE **)(a1 + 32);
  BOOL v16 = 0;
  uint64_t v3 = sub_1006E27E8();
  sub_100413284(v3, &v14);
  int v4 = sub_1002A6F64(v14, "OscarStepCounting", &v16);
  int v5 = v4;
  char v6 = v15;
  if (!v15) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    unint64_t v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
    {
LABEL_6:
      if (v16 == *(_BYTE *)(a1 + 40)) {
        return;
      }
    }
  }

  else
  {
LABEL_5:
    if (v4) {
      goto LABEL_6;
    }
  }

  uint64_t v9 = sub_1006E27E8();
  sub_100413284(v9, &v14);
  double v10 = (_BYTE *)(a1 + 40);
  sub_1002AB3FC(v14, "OscarStepCounting", v10);
  __int16 v11 = v15;
  if (v15)
  {
    double v12 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  v2[219] = *v10;
  (*(void (**)(_BYTE *, void))(*(void *)v2 + 552LL))(v2, 0LL);
}

void sub_100CA28C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CA28DC(uint64_t a1, char a2)
{
}

void sub_100CA28E4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA294C;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

uint64_t sub_100CA294C(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  v1[264] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, void))(*(void *)v1 + 552LL))(v1, 0LL);
}

void sub_100CA296C(uint64_t a1, char a2)
{
}

uint64_t sub_100CA2974()
{
  if ((sub_1004F75F8() & 1) != 0 || (sub_1004F76B8() & 1) != 0) {
    return 0LL;
  }
  char v8 = 1;
  uint64_t v1 = sub_1006E27E8();
  sub_100413284(v1, &v6);
  int v2 = sub_1002A6F64(v6, "OscarStepCounting", (BOOL *)&v8);
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v8) {
    return 1LL;
  }
  else {
    return v2 ^ 1u;
  }
}

void sub_100CA2A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CA2A3C(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2AA8;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2AA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1256) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100CA2AE0(uint64_t a1, void *a2)
{
}

void sub_100CA2AE8(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2B54;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2B54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1264) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100CA2B8C(uint64_t a1, void *a2)
{
}

uint64_t sub_100CA2B94(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
  if ((_DWORD)result) {
    return sub_1005BDE54() != 0;
  }
  return result;
}

uint64_t sub_100CA2BC0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 72) + 192LL))(a1 - 72);
  if ((_DWORD)result) {
    return sub_1005BDE54() != 0;
  }
  return result;
}

void sub_100CA2BEC(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2C58;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2C58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1272) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100CA2C90(uint64_t a1, void *a2)
{
}

void sub_100CA2C98(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2D04;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2D04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 128sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = [*(id *)(a1 + 32) copy];
  _Block_release(*(const void **)(a1 + 32));
}

void sub_100CA2D3C(uint64_t a1, void *a2)
{
}

void sub_100CA2D44(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2DAC;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

uint64_t sub_100CA2DAC(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  v1[245] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, void))(*(void *)v1 + 552LL))(v1, 0LL);
}

void sub_100CA2DCC(uint64_t a1, char a2)
{
}

void sub_100CA2DD4(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2E3C;
  void v5[3] = &unk_1018598F8;
  unsigned __int8 v5[4] = a1;
  __int16 v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2E3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int16 *)(a1 + 40);
  *(_WORD *)(v1 + 344) = v2;
  sub_100C946F8(v1, v2);
}

void sub_100CA2E50(uint64_t a1, __int16 a2)
{
  uint64_t v3 = a1 - 56;
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA2E3C;
  void v5[3] = &unk_1018598F8;
  unsigned __int8 v5[4] = v3;
  __int16 v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA2EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 176;
  *(void *)&double v41 = a1 + 176;
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16LL))(a1 + 176);
  LOWORD(v43) = 256;
  *(_BYTE *)(v4 + 417) = *(_DWORD *)a2;
  *(_BYTE *)(v4 + 41_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 4);
  *(void *)(v4 + 424) = *(void *)(a2 + 8);
  *(_DWORD *)(v4 + 432) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 44sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_OWORD *)(a2 + 20);
  *(_DWORD *)(v4 + 456) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(v4 + 419) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 436) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(v4 + 42sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(v4 + 46_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(v4 + 421) = *(_BYTE *)(a2 + 56) | (2 * *(_BYTE *)(a2 + 57)) | (4 * *(_BYTE *)(a2 + 58));
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  unint64_t v5 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    int v6 = *(unsigned __int8 *)(a1 + 593);
    double v7 = *(float *)(a1 + 600);
    double v8 = *(float *)(a1 + 604);
    double v9 = *(float *)(a1 + 608);
    double v10 = *(float *)(a1 + 616);
    double v11 = *(float *)(a1 + 620);
    double v12 = *(float *)(a1 + 624);
    double v13 = *(float *)(a1 + 628);
    double v14 = *(float *)(a1 + 632);
    int v15 = *(unsigned __int8 *)(a1 + 595);
    double v16 = *(float *)(a1 + 612);
    int v17 = *(unsigned __int8 *)(a1 + 596);
    int v18 = *(unsigned __int8 *)(a1 + 594);
    int v19 = *(unsigned __int8 *)(a1 + 597);
    double v20 = *(float *)(a1 + 644);
    *(_DWORD *)__n128 buf = 67112704;
    int v79 = v6;
    __int16 v80 = 2048;
    double v81 = v7;
    __int16 v82 = 2048;
    double v83 = v8;
    __int16 v84 = 2048;
    double v85 = v9;
    __int16 v86 = 2048;
    double v87 = v10;
    __int16 v88 = 2048;
    double v89 = v11;
    __int16 v90 = 2048;
    double v91 = v12;
    __int16 v92 = 2048;
    double v93 = v13;
    __int16 v94 = 2048;
    double v95 = v14;
    __int16 v96 = 1024;
    int v97 = v15;
    __int16 v98 = 2048;
    double v99 = v16;
    __int16 v100 = 1024;
    int v101 = v17;
    __int16 v102 = 1024;
    int v103 = v18;
    __int16 v104 = 1024;
    int v105 = v19;
    __int16 v106 = 2048;
    double v107 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Sending user info,fGender,%d,fHeightM,%f,fWeightKG,%f,fVo2Max,%f,fAge,%f,HRMin,%f,HRMax,%f,fHROnset,%f,fPal,%f,fCo ndition,%d,fRunVo2Max,%f,fBetaBlockerUse,%d,fBiologicalSex,%d,fIsBodyMetricSet,%d ,fAdaptiveExerciseMinuteThreshold,%f",  buf,  0x84u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v22 = *(unsigned __int8 *)(a1 + 593);
    double v23 = *(float *)(a1 + 600);
    double v24 = *(float *)(a1 + 604);
    double v25 = *(float *)(a1 + 608);
    double v26 = *(float *)(a1 + 616);
    double v27 = *(float *)(a1 + 620);
    double v28 = *(float *)(a1 + 624);
    double v29 = *(float *)(a1 + 628);
    double v30 = *(float *)(a1 + 632);
    int v31 = *(unsigned __int8 *)(a1 + 595);
    double v32 = *(float *)(a1 + 612);
    int v33 = *(unsigned __int8 *)(a1 + 596);
    int v34 = *(unsigned __int8 *)(a1 + 594);
    int v35 = *(unsigned __int8 *)(a1 + 597);
    double v36 = *(float *)(a1 + 644);
    LODWORD(v49) = 67112704;
    HIDWORD(v49) = v22;
    __int16 v50 = 2048;
    double v51 = v23;
    __int16 v52 = 2048;
    double v53 = v24;
    __int16 v54 = 2048;
    double v55 = v25;
    __int16 v56 = 2048;
    double v57 = v26;
    __int16 v58 = 2048;
    double v59 = v27;
    __int16 v60 = 2048;
    double v61 = v28;
    __int16 v62 = 2048;
    double v63 = v29;
    __int16 v64 = 2048;
    double v65 = v30;
    __int16 v66 = 1024;
    int v67 = v31;
    __int16 v68 = 2048;
    double v69 = v32;
    __int16 v70 = 1024;
    int v71 = v33;
    __int16 v72 = 1024;
    int v73 = v34;
    __int16 v74 = 1024;
    int v75 = v35;
    __int16 v76 = 2048;
    double v77 = v36;
    LODWORD(v39) = 132;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Sending user info,fGender,%d,fHeightM,%f,fWeightKG,%f,fVo2Max,%f,fAge,%f,HRMin,%f,HRMax,%f,fHROnset,%f,fPal,%f,fCo ndition,%d,fRunVo2Max,%f,fBetaBlockerUse,%d,fBiologicalSex,%d,fIsBodyMetricSet,%d ,fAdaptiveExerciseMinuteThreshold,%f",  &v49,  v39,  v40,  v41,  *(double *)&v42,  v43,  *(double *)&v44,  *((double *)&v44 + 1),  *(double *)&v45,  DWORD2(v45),  *(double *)&v46,  DWORD2(v46),  v47,  v48,  v49);
    double v38 = (uint8_t *)v37;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::setUserInfo(const CLBodyMetrics &)",  "%s\n",  v37);
    if (v38 != buf) {
      free(v38);
    }
  }

  __int128 v21 = *(_OWORD *)(a1 + 608);
  __int128 v44 = *(_OWORD *)(a1 + 592);
  __int128 v45 = v21;
  __int128 v46 = *(_OWORD *)(a1 + 624);
  uint64_t v47 = *(void *)(a1 + 640);
  if (BYTE1(v43))
  {
    if (LOBYTE(v43)) {
      pthread_mutex_unlock(v42);
    }
    else {
      (*(void (**)(double))(**(void **)&v41 + 24LL))(COERCE_DOUBLE(*(void *)&v41));
    }
  }

  sub_100CAB438(a1 + 192, &v44, 0LL);
}

void sub_100CA3304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100CA3334(uint64_t a1, uint64_t a2)
{
}

void sub_100CA333C(uint64_t a1, void *a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending user info + walk stride length step cadence pair",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Sending user info + walk stride length step cadence pair",  v7,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::setUserStrideLengthStepCadencePairWalk(const CLStrideLengthStepCadencePair &)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16LL))(a1 + 176);
  *(void *)(a1 + 636) = *a2;
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 24LL))(a1 + 176);
  if (*(_BYTE *)(a1 + 283)) {
    sub_100CAB438(a1 + 192, (__int128 *)(a1 + 592), 0LL);
  }
}

void sub_100CA3518(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100CA3524(uint64_t a1, void *a2)
{
}

void sub_100CA352C(uint64_t a1, unsigned int *a2)
{
  BYTE5(v15) = 28;
  unsigned int v4 = a2[4];
  BYTE6(v15) = a2[3];
  HIBYTE(v15) = sub_100673310(v4);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  unint64_t v5 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    int isTypeInVehicle = CLMotionActivity::isTypeInVehicle(a2[2], v6);
    unsigned int v8 = a2[3];
    *(_DWORD *)__n128 buf = 67240448;
    int v20 = isTypeInVehicle;
    __int16 v21 = 1026;
    unsigned int v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sending isVehicular %{public}d, vehicularConfidence %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v10 = qword_1019344B8;
    int v11 = CLMotionActivity::isTypeInVehicle(a2[2], v9);
    unsigned int v12 = a2[3];
    v16[0] = 67240448;
    v16[1] = v11;
    __int16 v17 = 1026;
    unsigned int v18 = v12;
    LODWORD(v15) = 14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "Sending isVehicular %{public}d, vehicularConfidence %{public}d",  v16,  v15);
    double v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::setVehicularData(const CLMotionStateUpdate &)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  sub_100CAB5D8(a1 + 192, (__int16 *)((char *)&v15 + 5), 0LL);
}

void sub_100CA3734(uint64_t a1, unsigned int *a2)
{
}

BOOL sub_100CA373C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = a1 + 176;
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16LL))(a1 + 176);
  if (*(_BYTE *)(v4 + 107))
  {
    __int128 v5 = *(_OWORD *)(a1 + 284);
    __int128 v6 = *(_OWORD *)(a1 + 300);
    __int128 v7 = *(_OWORD *)(a1 + 316);
    *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)(a1 + 328);
    a2[1] = v6;
    a2[2] = v7;
    *a2 = v5;
  }

  else
  {
    *a2 = xmmword_101358CAC;
    a2[1] = unk_101358CBC;
    a2[2] = xmmword_101358CCC;
    *(_OWORD *)((char *)a2 + 44) = *(__int128 *)((char *)&xmmword_101358CCC + 12);
  }

  int v8 = *(unsigned __int8 *)(a1 + 283);
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 24LL))(v4);
  return v8 != 0;
}

BOOL sub_100CA37E0(uint64_t a1, _OWORD *a2)
{
  return sub_100CA373C(a1 - 56, a2);
}

void sub_100CA37E8(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = sub_1006E27E8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_100CA3860;
  void v7[3] = &unk_10187BF70;
  _DWORD v7[4] = a1;
  char v9 = a2;
  int v8 = a3;
  sub_1006E2970(v6, (uint64_t)v7);
}

void sub_100CA3860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 44);
  *(_BYTE *)(v2 + 861) = *(_BYTE *)(a1 + 44) != 0;
  if (v3 || *(unsigned __int8 *)(v2 + 862) - 17 > 1 || sub_1006DD950(v2, 7) <= 0)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v4 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 44);
      int v6 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)__n128 buf = 67109376;
      int v15 = v5;
      __int16 v16 = 1024;
      int v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "MotionStateObserver, Sending down ActivityOverride,session,%d,hkActivityType,%d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      int v7 = *(unsigned __int8 *)(a1 + 44);
      int v8 = *(_DWORD *)(a1 + 40);
      v11[0] = 67109376;
      v11[1] = v7;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "MotionStateObserver, Sending down ActivityOverride,session,%d,hkActivityType,%d",  v11,  14);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::setActivityOverride(const CMMotionContext::ActivitySession, const CMMotionCont ext::CMHKWorkoutActivityType)_block_invoke",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    sub_100C973E4(v2, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
  }

void sub_100CA3A7C(uint64_t a1, char a2, int a3)
{
  uint64_t v5 = a1 - 56;
  uint64_t v6 = sub_1006E27E8();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_100CA3860;
  void v7[3] = &unk_10187BF70;
  _DWORD v7[4] = v5;
  char v9 = a2;
  int v8 = a3;
  sub_1006E2970(v6, (uint64_t)v7);
}

void sub_100CA3AF4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA3B5C;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA3B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  LOBYTE(v_Block_object_dispose(va, 8) = 67;
  HIBYTE(v_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 40);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  int v3 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)__n128 buf = 67109120;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[LOIStateChange]transition,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v5 = *(unsigned __int8 *)(a1 + 40);
    v9[0] = 67109120;
    v9[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "[LOIStateChange]transition,%d",  v9);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendLoiTransition(const uint8_t)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100CAB764(v2 + 192, &v8, 0LL);
}

void sub_100CA3D30(uint64_t a1, char a2)
{
  uint64_t v3 = a1 - 128;
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA3B5C;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = v3;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA3D98(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA3E04;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA3E04(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 40);

    *(void *)(v3 + 128_Block_object_dispose(va, 8) = [*(id *)(a1 + 32) copy];
    _Block_release(*(const void **)(a1 + 32));
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_1019344B0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    sub_1012695A0();
  }

  dispatch_once(&qword_1019344B0, &stru_10187C0D8);
LABEL_3:
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[SedentaryTimerTriage] SedentaryAlarm, setSedentaryAlarmHandler!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "[SedentaryTimerTriage] SedentaryAlarm, setSedentaryAlarmHandler!",  v7,  2);
    char v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::setSedentaryAlarmHandler(SedentaryAlarmHandler)_block_invoke",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

void sub_100CA3FB8(uint64_t a1, void *a2)
{
}

void sub_100CA3FC0(uint64_t a1, uint64_t a2)
{
  LOBYTE(v7) = 13;
  *(_WORD *)((char *)&v7 + 1) = *(_WORD *)a2;
  *(_DWORD *)((char *)&v7 + 3) = *(_DWORD *)(a2 + 2);
  HIBYTE(v7) = *(_BYTE *)(a2 + 6);
  __int16 v8 = *(_WORD *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 10);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v3 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[SedentaryTimerTriage] SedentaryAlarm, startSedentaryAlarm!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    __int16 v6 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "[SedentaryTimerTriage] SedentaryAlarm, startSedentaryAlarm!",  &v6,  2);
    int v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::startSedentaryAlarm(const CLSedentaryAlarmParams &)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100CAB8E0(a1 + 192, &v7, 0LL);
}

void sub_100CA4190(uint64_t a1, uint64_t a2)
{
}

void sub_100CA4198(uint64_t a1)
{
  *(uint64_t *)((char *)v6 + 6) = 0LL;
  v6[0] = 13LL;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v2 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[SedentaryTimerTriage] SedentaryAlarm, stopSedentaryAlarm!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "[SedentaryTimerTriage] SedentaryAlarm, stopSedentaryAlarm!",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionCoprocessor::stopSedentaryAlarm()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100CAB8E0(a1 + 192, v6, 0LL);
}

void sub_100CA4344(uint64_t a1)
{
}

void sub_100CA434C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA43B0;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = a2;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA43B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
}

void sub_100CA43F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 48;
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA43B0;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = a2;
  void v5[5] = v3;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA4454(uint64_t a1)
{
  char v6 = 20;
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10187C1D8);
  }
  uint64_t v2 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending reset compass to AOP", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10187C1D8);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "Sending reset compass to AOP",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionCoprocessor::resetCompass()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_100CABC1C(a1 + 192, &v6, 0LL);
}

void sub_100CA45FC(uint64_t a1)
{
}

void sub_100CA4604(uint64_t a1)
{
  char v1 = 23;
  sub_100CABD98(a1 + 192, &v1, 0LL);
}

void sub_100CA4634(uint64_t a1)
{
  char v1 = 23;
  sub_100CABD98(a1 + 112, &v1, 0LL);
}

void sub_100CA4664(uint64_t a1)
{
  char v1 = 24;
  sub_100CABF14(a1 + 192, &v1, 0LL);
}

void sub_100CA4694(uint64_t a1)
{
  char v1 = 24;
  sub_100CABF14(a1 + 112, &v1, 0LL);
}

void sub_100CA46C4(uint64_t a1, int a2)
{
  BYTE6(v9) = 21;
  HIBYTE(v9) = a2;
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_10187C158);
  }
  uint64_t v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    int v5 = "stopping";
    if (a2) {
      int v5 = "starting";
    }
    *(_DWORD *)__n128 buf = 136446210;
    int v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "CLMotionCoprocessor %{public}s gyro bias and variance updates",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10187C158);
    }
    char v6 = "stopping";
    if (a2) {
      char v6 = "starting";
    }
    int v10 = 136446210;
    int v11 = v6;
    LODWORD(v9) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLMotionCoprocessor %{public}s gyro bias and variance updates",  &v10,  v9);
    __int16 v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::startStopGyroBiasAndVariance(const BOOL)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100CAC090(a1 + 192, (__int16 *)&v9 + 3, 0LL);
}

void sub_100CA48BC(uint64_t a1, int a2)
{
}

void sub_100CA48C4(uint64_t a1)
{
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187C2D8);
  }
  uint64_t v2 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending command to reset workout detector.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187C2D8);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Sending command to reset workout detector.",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionCoprocessor::resetTier1WorkoutDetector()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  buf[0] = 33;
  sub_100CAC20C(a1 + 192, (char *)buf, 0LL);
}

void sub_100CA4A6C(uint64_t a1)
{
}

void sub_100CA4A74(uint64_t a1, float *a2)
{
  unsigned int v3 = *(unsigned __int16 *)a2;
  if (v3 > 0x21C || ((unsigned int v4 = *((unsigned __int16 *)a2 + 1), v4 <= 0x347) ? (v5 = v4 > v3) : (v5 = 1), v5))
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187C2D8);
    }
    char v6 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(unsigned __int16 *)a2;
      int v8 = *((unsigned __int16 *)a2 + 1);
      double v9 = a2[1];
      *(_DWORD *)__n128 buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v31 = v8;
      __int16 v32 = 2048;
      double v33 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Cannot update alternate escalation parameters: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187C2D8);
      }
      int v10 = *(unsigned __int16 *)a2;
      int v11 = *((unsigned __int16 *)a2 + 1);
      double v12 = a2[1];
      LODWORD(v25) = 67109632;
      HIDWORD(v25) = v10;
      __int16 v26 = 1024;
      int v27 = v11;
      __int16 v28 = 2048;
      double v29 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  16LL,  "Cannot update alternate escalation parameters: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f",  &v25,  24,  v25);
      double v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLMotionCoprocessor::updateAlternateEscalationParameters(const EscalationRules &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187C2D8);
    }
    __int16 v16 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(unsigned __int16 *)a2;
      int v18 = *((unsigned __int16 *)a2 + 1);
      double v19 = a2[1];
      *(_DWORD *)__n128 buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v31 = v18;
      __int16 v32 = 2048;
      double v33 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Sending updated alternate escalation parameters to the AOP: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,ac tiveSpeedInMPH,%f",  buf,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10187C2D8);
      }
      int v20 = *(unsigned __int16 *)a2;
      int v21 = *((unsigned __int16 *)a2 + 1);
      double v22 = a2[1];
      LODWORD(v25) = 67109632;
      HIDWORD(v25) = v20;
      __int16 v26 = 1024;
      int v27 = v21;
      __int16 v28 = 2048;
      double v29 = v22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "Sending updated alternate escalation parameters to the AOP: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,ac tiveSpeedInMPH,%f",  &v25,  24,  v25);
      double v24 = (char *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::updateAlternateEscalationParameters(const EscalationRules &)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    buf[0] = 38;
    *(void *)&buf[1] = *(void *)a2;
    sub_100CAC388(a1 + 192, (uint64_t *)buf, 0LL);
  }

void sub_100CA4E4C(uint64_t a1, float *a2)
{
}

void sub_100CA4E54(uint64_t a1, int *a2)
{
  char v2 = 82;
  int v3 = *a2;
  int v4 = a2[1];
  sub_100CAC510(a1 + 192, (uint64_t *)&v2, 0LL);
}

void sub_100CA4E94(uint64_t a1, int *a2)
{
  char v2 = 82;
  int v3 = *a2;
  int v4 = a2[1];
  sub_100CAC510(a1 + 96, (uint64_t *)&v2, 0LL);
}

void sub_100CA4ED4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA4F3C;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

uint64_t sub_100CA4F3C(uint64_t a1)
{
  char v1 = *(_BYTE **)(a1 + 32);
  v1[270] = *(_BYTE *)(a1 + 40);
  return (*(uint64_t (**)(_BYTE *, void))(*(void *)v1 + 552LL))(v1, 0LL);
}

void sub_100CA4F5C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    LODWORD(buf) = 67109120;
    HIDWORD(buf) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending cycling state,%d", (uint8_t *)&buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v6 = *a2;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Sending cycling state,%d",  v9);
    int v8 = (uint64_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendCyclingState(const CMMotionContext::CyclingStateDetectorMessage &)",  "%s\n",  v7);
    if (v8 != &buf) {
      free(v8);
    }
  }

  LOBYTE(buf) = 42;
  BYTE1(buf) = *a2;
  WORD1(buf) = 0;
  HIDWORD(buf) = *((_DWORD *)a2 + 1);
  int v11 = *((_DWORD *)a2 + 2);
  sub_100CAC698(a1 + 192, &buf, 0LL);
}

void sub_100CA5144(uint64_t a1, unsigned __int8 *a2)
{
}

void sub_100CA514C(uint64_t a1, uint8_t *a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  uint64_t v4 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109120;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending workout pause/resume,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    int v6 = *a2;
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Sending workout pause/resume,%d",  v9);
    int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendWorkoutPauseResumeTransition(const CMMotionContext::Transition &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  buf[0] = 44;
  buf[1] = *a2;
  sub_100CAC820(a1 + 192, (__int16 *)buf, 0LL);
}

void sub_100CA5320(uint64_t a1, uint8_t *a2)
{
}

void sub_100CA5330(uint64_t a1, void *aBlock)
{
  int v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA539C;
  void v5[3] = &unk_10181FA90;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA539C(uint64_t a1)
{
  uint64_t v4 = a1 + 32;
  char v2 = *(const void **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  int v5 = *(void **)(v3 + 1296);
  if (v2 != v5)
  {

    *(void *)(v3 + 1296) = [*(id *)(a1 + 32) copy];
    char v2 = *(const void **)(a1 + 32);
  }

  _Block_release(v2);
}

void sub_100CA53DC(uint64_t a1, void *a2)
{
}

void sub_100CA53E4(uint64_t a1, int a2)
{
  LOBYTE(v7) = 26;
  HIBYTE(v7) = a2;
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_10187C258);
  }
  uint64_t v4 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending ski transition %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_10187C258);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "Sending ski transition %d",  v8);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendSkiTransition(const CLSkiTransitions)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100CAC99C(a1 + 192, &v7, 0LL);
}

void sub_100CA55AC(uint64_t a1, int a2)
{
}

void sub_100CA55B4(uint64_t a1, unsigned __int8 a2)
{
  LOBYTE(v7) = 39;
  HIBYTE(v7) = a2;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  uint64_t v4 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending altimeter command to the AOP,%u", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  2LL,  "Sending altimeter command to the AOP,%u",  v8);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendAltimeterCommand(const CLAltimeterCommand)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100CACB18(a1 + 192, &v7, 0LL);
}

void sub_100CA5784(uint64_t a1, unsigned __int8 a2)
{
}

void sub_100CA578C(uint64_t a1, int a2)
{
  BYTE6(v7) = 68;
  HIBYTE(v7) = a2;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  uint64_t v4 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending water state to the AOP,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    v8[0] = 67240192;
    v8[1] = a2;
    LODWORD(v7) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Sending water state to the AOP,%{public}d",  v8,  v7);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionCoprocessor::sendWaterState(BOOL)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100CACC94(a1 + 192, (__int16 *)&v7 + 3, 0LL);
}

void sub_100CA5954(uint64_t a1, int a2)
{
}

void sub_100CA595C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  uint64_t v4 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    double v6 = *((float *)a2 + 1);
    double v7 = *((float *)a2 + 2);
    double v8 = *((float *)a2 + 3);
    *(_DWORD *)uint64_t buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)&uint8_t buf[8] = 2050;
    double v23 = v6;
    __int16 v24 = 2050;
    double v25 = v7;
    __int16 v26 = 2050;
    double v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending wetConfig to the AOP,useShower,%{public}d,wetTimeout,%{public}f,pressureAmplitude,%{public}f,tDot,%{public}f",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    int v9 = *a2;
    double v10 = *((float *)a2 + 1);
    double v11 = *((float *)a2 + 2);
    double v12 = *((float *)a2 + 3);
    v15[0] = 67240960;
    v15[1] = v9;
    __int16 v16 = 2050;
    double v17 = v10;
    __int16 v18 = 2050;
    double v19 = v11;
    __int16 v20 = 2050;
    double v21 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Sending wetConfig to the AOP,useShower,%{public}d,wetTimeout,%{public}f,pressureAmplitude,%{public}f,tDot,%{public}f",  v15,  38);
    double v14 = (char *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendWetConfig(const CLAltimeterInterface::WetConfig &)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  buf[0] = 69;
  buf[1] = *a2;
  *(void *)&buf[2] = *(void *)(a2 + 4);
  LODWORD(v23) = *((_DWORD *)a2 + 3);
  sub_100CACE10(a1 + 192, (uint64_t *)buf, 0LL);
}

void sub_100CA5BA0(uint64_t a1, unsigned __int8 *a2)
{
}

void sub_100CA5BA8(uint64_t a1, int a2, float a3, float a4)
{
  char v13 = 77;
  float v14 = a3;
  float v15 = a4;
  char v16 = a2;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  double v8 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134218496;
    double v24 = a3;
    __int16 v25 = 2048;
    double v26 = a4;
    __int16 v27 = 1024;
    int v28 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Sending MSLP to the AOP,%f,uncertainty,%f,resetInVisitReference,%d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    int v17 = 134218496;
    double v18 = a3;
    __int16 v19 = 2048;
    double v20 = a4;
    __int16 v21 = 1024;
    int v22 = a2;
    LODWORD(v11) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Sending MSLP to the AOP,%f,uncertainty,%f,resetInVisitReference,%d",  COERCE_DOUBLE(&v17),  v11,  v12);
    double v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendMeanSeaLevelPressure(float, float, BOOL)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  sub_100CACF98(a1 + 192, (uint64_t *)&v13, 0LL);
}

void sub_100CA5DC8(uint64_t a1, int a2, float a3, float a4)
{
}

void sub_100CA5DD0(uint64_t a1, int a2)
{
  LOBYTE(v7) = 78;
  HIBYTE(v7) = a2;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  uint64_t v4 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending in visit status,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Sending in visit status,%d",  v8);
    double v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionCoprocessor::sendInVisit(BOOL)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100CAD120(a1 + 192, &v7, 0LL);
}

void sub_100CA5F98(uint64_t a1, int a2)
{
}

void sub_100CA5FA0(uint64_t a1, float a2, float a3)
{
  char v10 = 79;
  float v11 = a2;
  float v12 = a3;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  double v6 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    double v18 = a2;
    __int16 v19 = 2048;
    double v20 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending elevation thresholds,lower,%f,upper,%f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    int v13 = 134218240;
    double v14 = a2;
    __int16 v15 = 2048;
    double v16 = a3;
    LODWORD(v9) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Sending elevation thresholds,lower,%f,upper,%f",  COERCE_DOUBLE(&v13),  v9);
    double v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendElevationThreshold(float, float)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100CAD29C(a1 + 192, (uint64_t *)&v10, 0LL);
}

void sub_100CA619C(uint64_t a1, float a2, float a3)
{
}

void sub_100CA61A4(uint64_t a1, uint64_t a2)
{
  LOBYTE(v9) = 47;
  *(_WORD *)((char *)&v9 + 1) = 0;
  BYTE3(v9) = 0;
  float v3 = *(double *)a2;
  float v4 = *(float *)(a2 + 8);
  *((float *)&v9 + 1) = v3;
  float v10 = v4;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  int v5 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    double v16 = v3;
    __int16 v17 = 2048;
    double v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Sending surface calibration to the AOP,timestamp,%f,surfacePressure,%f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    int v11 = 134218240;
    double v12 = v3;
    __int16 v13 = 2048;
    double v14 = v4;
    LODWORD(v_Block_object_dispose(va, 8) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  1LL,  "Sending surface calibration to the AOP,timestamp,%f,surfacePressure,%f",  COERCE_DOUBLE(&v11),  v8);
    __int16 v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendSurfaceCalibrationUpdate(const CLWaterSubmersion_Types::CMSurfaceCalibrationSample &)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100CAD424(a1 + 192, &v9, 0LL);
}

void sub_100CA63AC(uint64_t a1, uint64_t a2)
{
}

void sub_100CA63B4(uint64_t a1, uint64_t a2)
{
  v9[0] = 48;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  v9[1] = *(_BYTE *)(a2 + 8);
  __int16 v10 = 0;
  char v11 = 0;
  float v5 = *(double *)a2;
  float v12 = v5;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  double v6 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349312;
    double v18 = v5;
    __int16 v19 = 1026;
    int v20 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending submersion state to the AOP,timestamp,%{public}f,submersionState,%{public}hu",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    int v13 = 134349312;
    double v14 = v5;
    __int16 v15 = 1026;
    int v16 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  0LL,  "Sending submersion state to the AOP,timestamp,%{public}f,submersionState,%{public}hu",  &v13,  18);
    double v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendSubmersionStateUpdate(const CLWaterSubmersion_Types::CMSubmersionState &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  sub_100CAD5AC(a1 + 192, (uint64_t *)v9, 0LL);
}

void sub_100CA65D8(uint64_t a1, uint64_t a2)
{
}

void sub_100CA65E0(uint64_t a1, int a2)
{
  LOBYTE(v7) = 70;
  HIBYTE(v7) = a2;
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10187C298);
  }
  int v4 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Sending easy submersion to the AOP,easySubmersionState,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10187C298);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  1LL,  "Sending easy submersion to the AOP,easySubmersionState,%d",  v8);
    double v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::sendEasySubmersionUpdate(BOOL)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100CAD734(a1 + 192, &v7, 0LL);
}

void sub_100CA67A8(uint64_t a1, int a2)
{
}

void sub_100CA67B0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1006E27E8();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100CA6818;
  void v5[3] = &unk_101833458;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1006E2970(v4, (uint64_t)v5);
}

void sub_100CA6818(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_BYTE *)(v1 + 1419) = *(_BYTE *)(a1 + 40);
  LOBYTE(v6) = 41;
  int v2 = *(unsigned __int8 *)(a1 + 40);
  HIBYTE(v6) = *(_BYTE *)(a1 + 40);
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187C2D8);
  }
  float v3 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "Sending update for ALS active scans to the AOP,shouldEnable,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187C2D8);
    }
    v7[0] = 67109120;
    v7[1] = v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Sending update for ALS active scans to the AOP,shouldEnable,%d",  v7);
    float v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::enableALSActiveScans(BOOL)_block_invoke",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_100CAD8B0(v1 + 192, &v6, 0LL);
}

void sub_100CA69E8(uint64_t a1, char a2)
{
}

void sub_100CA69F0(uint64_t a1, int a2)
{
  LOBYTE(v7) = 80;
  HIBYTE(v7) = a2;
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_10187C2D8);
  }
  uint64_t v4 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sending stair escalation toggle update to the AOP,should enable,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_10187C2D8);
    }
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Sending stair escalation toggle update to the AOP,should enable,%d",  v8);
    __int16 v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionCoprocessor::enableStairsEscalation(BOOL)", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100CADA2C(a1 + 192, &v7, 0LL);
}

void sub_100CA6BB8(uint64_t a1, _BYTE *a2, uint64_t a3, void *a4)
{
  if (a3) {
    int v8 = *a2;
  }
  else {
    int v8 = 0;
  }
  HIBYTE(v14) = v8;
  *(void *)(a1 + 352) = *a4;
  if ((sub_100ED4C8C(a1 + 152, a2, a3) & 1) == 0)
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_10187C0B8);
    }
    int v9 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v8;
      __int16 v19 = 2048;
      uint64_t v20 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "CMMotionCoprocessorReply::visit() type %d, length %lu failed.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_10187C0B8);
      }
      v15[0] = 67109376;
      v15[1] = v8;
      __int16 v16 = 2048;
      uint64_t v17 = a3;
      LODWORD(v14) = 18;
      int v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  17LL,  "CMMotionCoprocessorReply::visit() type %d, length %lu failed.",  v15,  v14);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::onMotionCoprocessor(const uint8_t *, size_t, const CFTimeInterval &)",  "%s\n",  v13);
    }
  }

  if (*(_BYTE *)(a1 + 652))
  {
    *(void *)uint64_t buf = (char *)&v14 + 7;
    int v10 = sub_100CADBA8(a1 + 1832, (unsigned __int8 *)&v14 + 7, (uint64_t)&unk_1012CF090, (_BYTE **)buf);
    ++v10[3];
  }

  else
  {
    sub_100C93BC0(a1);
    *(void *)uint64_t buf = (char *)&v14 + 7;
    char v11 = sub_100CADBA8(a1 + 1872, (unsigned __int8 *)&v14 + 7, (uint64_t)&unk_1012CF090, (_BYTE **)buf);
    ++v11[3];
    double v12 = sub_101171D38();
    if (v12 - *(double *)(a1 + 1824) > 300.0)
    {
      sub_100CA6E70(a1, 0LL);
      *(double *)(a1 + 1824) = v12;
    }
  }

uint64_t sub_100CA6E70(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v5 = 1872LL;
  if ((_DWORD)a2) {
    uint64_t v5 = 1832LL;
  }
  __int16 v6 = (void *)(a1 + v5);
  for (uint64_t i = *(uint64_t **)(a1 + v5 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v8 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", i[3]);
    int v9 = @"Unknown";
    [v4 setObject:v8 forKeyedSubscript:v9];
  }

  sub_10001CE40(v6);
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2),  @"IsHistorical");
  if ((a2 & 1) != 0)
  {
    size_t v23 = 256LL;
    if (*(_DWORD *)(a1 + 672))
    {
      if (!sysctlbyname("kern.wakereason", __big, &v23, 0LL, 0LL))
      {
        snprintf(__str, 0x20uLL, "spu_queue_overflow_ep%u", *(_DWORD *)(a1 + 672));
        int v10 = strstr(__big, __str);
        if (v10)
        {
          int v11 = v10[strlen(__str)];
          if (v11 < 0 || (_DefaultRuneLocale.__runetype[v11] & 0x400) == 0)
          {
            double v12 = sub_100CA9B0C(1);
            double v13 = sub_100CA9B0C(0);
            double v14 = v13;
            if (v12 <= v13)
            {
              double v16 = v13 - v12;
            }

            else
            {
              if (qword_1019344C0 != -1) {
                dispatch_once(&qword_1019344C0, &stru_10187C0B8);
              }
              __int16 v15 = (os_log_s *)qword_1019344C8;
              if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t buf = 134218240;
                double v29 = *(char **)&v12;
                __int16 v30 = 2048;
                double v31 = v14;
                _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "kern.sleeptime is greater than kern.waketime: %f > %f",  buf,  0x16u);
              }

              double v16 = 0.0;
              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019344C0 != -1) {
                  dispatch_once(&qword_1019344C0, &stru_10187C0B8);
                }
                int v24 = 134218240;
                __int16 v25 = *(char **)&v12;
                __int16 v26 = 2048;
                double v27 = v14;
                LODWORD(v21) = 22;
                uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  16LL,  "kern.sleeptime is greater than kern.waketime: %f > %f",  COERCE_DOUBLE(&v24),  v21);
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::sendCoprocessorReplyAnalytics(BOOL)",  "%s\n",  v17);
              }
            }

            objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(v16 * 1000.0)),  @"SleepDuration");
            if (qword_1019344C0 != -1) {
              dispatch_once(&qword_1019344C0, &stru_10187C0B8);
            }
            double v18 = (os_log_s *)qword_1019344C8;
            if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t buf = 136446466;
              double v29 = __str;
              __int16 v30 = 2050;
              double v31 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "wakeReason,%{public}s,sleepDuration,%{public}f",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019344C0 != -1) {
                dispatch_once(&qword_1019344C0, &stru_10187C0B8);
              }
              int v24 = 136446466;
              __int16 v25 = __str;
              __int16 v26 = 2050;
              double v27 = v16;
              LODWORD(v21) = 22;
              uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  0LL,  "wakeReason,%{public}s,sleepDuration,%{public}f",  &v24,  *(void *)&v21);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::sendCoprocessorReplyAnalytics(BOOL)",  "%s\n",  v20);
            }
          }
        }
      }
    }
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  void v22[2] = sub_100CA9B88;
  v22[3] = &unk_101820740;
  v22[4] = +[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v4);
  return AnalyticsSendEventLazy(@"com.apple.CoreMotion.MotionCoprocessorReply", v22);
}

CLOSTransaction *sub_100CA7390(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_100C93680(a1);
    *(_BYTE *)(a1 + 652) = 1;
    float v3 = *(void **)(a1 + 656);
    if (v3) {

    }
    uint64_t result = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "CLMotionCoprocessor.fHistoricalPacketsTransaction");
    *(void *)(a1 + 656) = result;
  }

  else
  {
    *(_BYTE *)(a1 + 652) = 0;
    sub_100C93BC0(a1);

    *(void *)(a1 + 656) = 0LL;
    return (CLOSTransaction *)sub_100CA6E70(a1, 1LL);
  }

  return result;
}

void sub_100CA7414(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 == 14)
  {
    (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 576LL))(a1, *(_BYTE *)a3 == 0);
  }

  else if (*a2 == 7)
  {
    LOBYTE(v9) = 4;
    BYTE1(v9) = *(_BYTE *)(a3 + 9);
    BYTE2(v9) = *(_BYTE *)(a3 + 8);
    HIBYTE(v9) = sub_1003CB7CC(*(_DWORD *)(a3 + 12));
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187C0F8);
    }
    uint64_t v5 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
    {
      int v6 = *(unsigned __int8 *)(a3 + 9);
      *(_DWORD *)uint64_t buf = 67109120;
      int v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Sending battery connection update, connected,%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187C0F8);
      }
      int v7 = *(unsigned __int8 *)(a3 + 9);
      v10[0] = 67109120;
      v10[1] = v7;
      int v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "Sending battery connection update, connected,%d",  v10);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::N otificationData &)",  "%s\n",  v8);
    }

    sub_100CADDCC(a1 + 192, &v9, 0LL);
  }

uint64_t sub_100CA7658(void *a1, unint64_t a2, unint64_t a3, float *a4)
{
  v74.n128_u64[0] = a2;
  v74.n128_u64[1] = a3;
  if (*((float *)&a3 + 1) < 4.0 && *(float *)&a3 >= 0.0)
  {
    sub_100CA7AD8(a1 + 179, &v74);
    unint64_t v6 = a1[184];
    if (v6 >= 3)
    {
      uint64_t v7 = a1[180];
      unint64_t v8 = a1[183];
      int v9 = (char *)(v7 + 8 * (v8 >> 8));
      if (a1[181] == v7) {
        uint64_t v10 = 0LL;
      }
      else {
        uint64_t v10 = *(void *)v9 + 16LL * v8;
      }
      uint64_t v69 = v7 + 8 * (v8 >> 8);
      uint64_t v70 = v10;
      int v11 = sub_10025C760((uint64_t)&v69, v6);
      uint64_t v13 = v12 - *v11;
      uint64_t v14 = v13 >> 4;
      if (v13 < 49)
      {
        unint64_t v18 = 258 - v14;
        double v16 = (char *)&v11[-(v18 >> 8)];
        uint64_t v17 = *(void *)v16 + 16LL * ~(_BYTE)v18;
      }

      else
      {
        unint64_t v15 = v14 - 3;
        double v16 = (char *)&v11[v15 >> 8];
        uint64_t v17 = *(void *)v16 + 16LL * v15;
      }

      sub_10025A918(a1 + 179, v9, v10, v16, v17);
      sub_100CAE25C((uint64_t)&v69, a1 + 179);
      if (v71 == v70) {
        uint64_t v19 = 0LL;
      }
      else {
        uint64_t v19 = *(void *)(v70 + 8 * (v72 >> 8)) + 16LL * v72;
      }
      v68[0] = v70 + 8 * (v72 >> 8);
      v68[1] = v19;
      uint64_t v20 = (char *)sub_10025C760((uint64_t)v68, v73 >> 1);
      int v22 = v21;
      size_t v23 = (void *)(v70 + 8 * (v72 >> 8));
      if (v71 == v70)
      {
        int v24 = 0LL;
        __int16 v26 = 0LL;
        __int16 v25 = (char *)(v70 + 8 * ((v73 + v72) >> 8));
      }

      else
      {
        int v24 = (__int128 *)(*v23 + 16LL * v72);
        __int16 v25 = (char *)(v70 + 8 * ((v73 + v72) >> 8));
        __int16 v26 = (__int128 *)(*(void *)v25 + 16LL * (v73 + v72));
      }

      v68[0] = &stru_10187BFB0;
      if (v22 != v26) {
        sub_100CAE9E4((uint64_t)v23, v24, v20, v22, v25, v26, (uint64_t)v68);
      }
      sub_100CA7AD8(a1 + 185, (__n128 *)v22);
      sub_100231C10(&v69);
    }
  }

  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v28 = a1[186];
  unint64_t v29 = a1[189];
  __int16 v30 = (void *)(v28 + 8 * (v29 >> 8));
  uint64_t v31 = a1[187];
  if (v31 == v28)
  {
    uint64_t v32 = 0LL;
    double v33 = a1 + 190;
  }

  else
  {
    uint64_t v32 = *v30 + 16LL * v29;
    double v33 = a1 + 190;
    uint64_t v34 = *(void *)(v28 + (((a1[190] + v29) >> 5) & 0x7FFFFFFFFFFFFF8LL))
        + 16LL * (*((_BYTE *)a1 + 1520) + v29);
    if (v32 != v34)
    {
      while (Current + -30.0 <= *(float *)(v32 + 4))
      {
        v32 += 16LL;
        if (v32 - *v30 == 4096)
        {
          uint64_t v35 = v30[1];
          ++v30;
          uint64_t v32 = v35;
        }

        if (v32 == v34) {
          goto LABEL_36;
        }
      }
    }

    if (v32 == v34)
    {
LABEL_36:
      uint64_t v32 = *(void *)(v28 + (((a1[190] + v29) >> 5) & 0x7FFFFFFFFFFFFF8LL))
          + 16LL * (*((_BYTE *)a1 + 1520) + v29);
    }

    else
    {
      double v36 = Current + -30.0;
      uint64_t v37 = v32;
      double v38 = v30;
      while (1)
      {
        v37 += 16LL;
        if (v37 - *v38 == 4096)
        {
          uint64_t v39 = v38[1];
          ++v38;
          uint64_t v37 = v39;
        }

        if (v37 == v34) {
          break;
        }
        if (v36 <= *(float *)(v37 + 4))
        {
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v37;
          v32 += 16LL;
          if (v32 - *v30 == 4096)
          {
            uint64_t v40 = v30[1];
            ++v30;
            uint64_t v32 = v40;
          }
        }
      }

      unint64_t v29 = a1[189];
      uint64_t v28 = a1[186];
      uint64_t v31 = a1[187];
    }
  }

  unint64_t v41 = v29 + *v33;
  int v42 = (char *)(v28 + 8 * (v41 >> 8));
  uint64_t v43 = v31 == v28 ? 0LL : *(void *)v42 + 16LL * v41;
  sub_10025A918(a1 + 185, (char *)v30, v32, v42, v43);
  uint64_t v44 = *v33;
  uint64_t v45 = a1[186];
  unint64_t v46 = a1[189];
  uint64_t v47 = (char *)(v45 + 8 * (v46 >> 8));
  if (a1[187] == v45) {
    uint64_t v48 = 0LL;
  }
  else {
    uint64_t v48 = *(void *)v47 + 16LL * v46;
  }
  uint64_t v69 = v45 + 8 * (v46 >> 8);
  uint64_t v70 = v48;
  __int16 v50 = sub_10025C760((uint64_t)&v69, v44);
  uint64_t v52 = v51 - *v50;
  uint64_t v53 = v52 >> 4;
  if (v52 < 161)
  {
    unint64_t v57 = 265 - v53;
    double v55 = (char *)&v50[-(v57 >> 8)];
    uint64_t v56 = *(void *)v55 + 16LL * ~(_BYTE)v57;
  }

  else
  {
    unint64_t v54 = v53 - 10;
    double v55 = (char *)&v50[v54 >> 8];
    uint64_t v56 = *(void *)v55 + 16LL * v54;
  }

  sub_10025A918(a1 + 185, v47, v48, v55, v56);
  uint64_t v58 = a1[186];
  if (a1[187] == v58)
  {
    unint64_t v63 = *v33;
  }

  else
  {
    unint64_t v59 = a1[189];
    __int16 v60 = (uint64_t *)(v58 + 8 * (v59 >> 8));
    uint64_t v61 = *v60;
    uint64_t v62 = *v60 + 16LL * v59;
    unint64_t v63 = a1[190];
    uint64_t v64 = *(void *)(v58 + (((v63 + v59) >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * (v63 + v59);
    if (v62 != v64)
    {
      float v65 = 0.0;
      do
      {
        uint64_t v66 = v62 + 16;
        if (v62 + 16 - v61 == 4096)
        {
          uint64_t v67 = v60[1];
          ++v60;
          uint64_t v61 = v67;
          uint64_t v66 = v67;
        }

        float v65 = v65 + (float)(*(float *)(v62 + 8) - *(float *)(v62 + 12));
        uint64_t v62 = v66;
      }

      while (v66 != v64);
      goto LABEL_58;
    }
  }

  float v65 = 0.0;
LABEL_58:
  *a4 = v65 / (float)v63;
  return 1LL;
}

void sub_100CA7AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

__n128 sub_100CA7AD8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CADF48(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

BOOL sub_100CA7B60(id a1, const SpeedData *a2, const SpeedData *a3)
{
  return (float)(a2->var2 - a2->var3) < (float)(a3->var2 - a3->var3);
}

void sub_100CA7B7C(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  if (*a2 == 5 || *a2 == 22 && sub_100CBED60(*((int **)a3 + 100)))
  {
    __int128 v5 = a3[7];
    __int128 v46 = a3[6];
    __int128 v47 = v5;
    v48[0] = a3[8];
    *(_OWORD *)((char *)v48 + 12) = *(__int128 *)((char *)a3 + 140);
    __int128 v6 = a3[3];
    __int128 v42 = a3[2];
    __int128 v43 = v6;
    __int128 v7 = a3[5];
    __int128 v44 = a3[4];
    __int128 v45 = v7;
    __int128 v8 = a3[1];
    __int128 v40 = *a3;
    __int128 v41 = v8;
    unsigned int v9 = sub_1006732DC((uint64_t)&v40, *((double *)a3 + 117));
    if (v9)
    {
      unsigned int v10 = v9;
      int v11 = (double *)((char *)a3 + 44);
      if (v9 == 2) {
        int v11 = (double *)a3 + 117;
      }
      double v12 = *v11;
      uint64_t v13 = (double *)a3 + 119;
      if (v9 != 2) {
        uint64_t v13 = (double *)((char *)a3 + 52);
      }
      float v14 = *v13;
      unint64_t v15 = (double *)(a3 + 59);
      if (v9 != 2) {
        unint64_t v15 = (double *)((char *)a3 + 76);
      }
      float v16 = *v15;
      float v17 = CFAbsoluteTimeGetCurrent() - v16;
      if (v14 <= 0.0) {
        float v14 = 1.5;
      }
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187C0F8);
      }
      float v18 = v12;
      float v19 = fabsf(v17);
      uint64_t v20 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)((char *)a3 + 76);
        int v22 = "Location derived speed";
        *(_DWORD *)uint64_t buf = 136316418;
        if (v10 == 1) {
          int v22 = "GPS speed";
        }
        __int16 v60 = v22;
        *(_WORD *)uint64_t v61 = 2048;
        *(void *)&v61[2] = v21;
        *(_WORD *)&v61[10] = 2048;
        double v62 = v18;
        __int16 v63 = 2048;
        double v64 = v14;
        __int16 v65 = 1024;
        unsigned int v66 = v10;
        __int16 v67 = 2048;
        double v68 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s accepted, timestamp, %f, speed, %f, speedUnc, %f, speedSource, %d, ageOfEstimation, %f",  buf,  0x3Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10187C0F8);
        }
        double v36 = "Location derived speed";
        uint64_t v37 = *(void *)((char *)a3 + 76);
        if (v10 == 1) {
          double v36 = "GPS speed";
        }
        int v49 = 136316418;
        __int16 v50 = v36;
        *(_WORD *)uint64_t v51 = 2048;
        *(void *)&v51[2] = v37;
        *(_WORD *)&v51[10] = 2048;
        double v52 = v18;
        __int16 v53 = 2048;
        double v54 = v14;
        __int16 v55 = 1024;
        unsigned int v56 = v10;
        __int16 v57 = 2048;
        double v58 = v19;
        LODWORD(v39) = 58;
        double v38 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "%s accepted, timestamp, %f, speed, %f, speedUnc, %f, speedSource, %d, ageOfEstimation, %f",  (const char *)&v49,  v39,  *(double *)&v40,  *((double *)&v40 + 1),  (_DWORD)v41,  *((double *)&v41 + 1));
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::sendGpsSpeed(const CLLocationProvider_Type::Notification &, const CLLocationProvider _Type::NotificationData &)",  "%s\n",  v38);
      }

      double v23 = *(double *)((char *)a3 + 116);
      if (v23 >= 0.0) {
        double v23 = sub_100292B94(v23, (float)-*(float *)(a1 + 864));
      }
      float v24 = v23;
      buf[0] = 5;
      buf[1] = v10;
      *(_WORD *)&buf[2] = 0;
      if (v18 <= 128.0) {
        float v25 = v18;
      }
      else {
        float v25 = 128.0;
      }
      float v26 = v25 * 16777000.0;
      BOOL v27 = v25 < -128.0;
      float v28 = -2147500000.0;
      if (!v27) {
        float v28 = v26;
      }
      float v29 = 2147500000.0;
      if (v14 <= 128.0) {
        float v29 = v14 * 16777000.0;
      }
      int v30 = (int)v29;
      LODWORD(v6sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = (int)v28;
      HIDWORD(v6sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = (int)v29;
      float v31 = *(double *)((char *)a3 + 68);
      *(float *)uint64_t v61 = v24;
      *(float *)&v61[4] = v31;
      *(float *)&v61[8] = v19;
      sub_100CAF21C(a1 + 192, (__int128 *)buf, 0LL);
      HIDWORD(v39) = 0;
      if (sub_100CA7658( (void *)a1,  v10 | ((unint64_t)LODWORD(v16) << 32),  LODWORD(v18) | ((unint64_t)LODWORD(v14) << 32),  (float *)&v39 + 1))
      {
        float v32 = *((float *)&v39 + 1);
        float v33 = v32 * 16777000.0;
        BOOL v27 = v32 < -128.0;
        float v34 = -2147500000.0;
        if (!v27) {
          float v34 = v33;
        }
        int v49 = 1029;
        LODWORD(v5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = (int)v34;
        HIDWORD(v5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v30;
        float v35 = *(double *)((char *)a3 + 68);
        *(float *)uint64_t v51 = v24;
        *(float *)&v51[4] = v35;
        *(float *)&v51[8] = v19;
        sub_100CAF21C(a1 + 192, (__int128 *)&v49, 0LL);
      }
    }
  }

void sub_100CA7FF8(_BYTE *a1, int *a2, int *a3)
{
  int v5 = *a2;
  if (*a2 == 4)
  {
    BYTE6(v19) = 36;
    int v9 = *a3;
    HIBYTE(v19) = *a3 == 2;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187C0F8);
    }
    unsigned int v10 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v23) = v9 == 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Youth Fitness Mode, %{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10187C0F8);
      }
      int v20 = 67240192;
      LODWORD(v21) = v9 == 2;
      LODWORD(v19) = 8;
      float v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "Youth Fitness Mode, %{public}d",  &v20,  v19);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, co nst CLFitnessTrackingNotifier_Type::NotificationData &)",  "%s\n",  v16);
    }

    sub_100CAF3A8((uint64_t)(a1 + 192), (__int16 *)&v19 + 3, 0LL);
  }

  else if (v5 == 3)
  {
    a1[863] = *(_BYTE *)a3;
  }

  else if (!v5)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    __int128 v6 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      if (*((_BYTE *)a3 + 3)) {
        __int128 v7 = "on";
      }
      else {
        __int128 v7 = "off";
      }
      *(_DWORD *)uint64_t buf = 136446210;
      double v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fitness tracking is %{public}s", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      if (*((_BYTE *)a3 + 3)) {
        float v14 = "on";
      }
      else {
        float v14 = "off";
      }
      int v20 = 136446210;
      uint64_t v21 = v14;
      LODWORD(v19) = 12;
      unint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "fitness tracking is %{public}s",  &v20,  v19);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, co nst CLFitnessTrackingNotifier_Type::NotificationData &)",  "%s\n",  v15);
    }

    a1[859] = *((_BYTE *)a3 + 3);
    if (*((_BYTE *)a3 + 3))
    {
      if (a1[1812])
      {
        sub_100CA0D08((uint64_t)a1, (uint64_t)(a1 + 1768));
        a1[1812] = 0;
      }

      char v8 = 1;
    }

    else
    {
      if (*(_BYTE *)a3) {
        BOOL v11 = *((_BYTE *)a3 + 1) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      char v8 = !v11;
    }

    a1[860] = v8;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    double v12 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      if (a1[860]) {
        uint64_t v13 = "on";
      }
      else {
        uint64_t v13 = "off";
      }
      *(_DWORD *)uint64_t buf = 136446210;
      double v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "elevation tracking is %{public}s", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      if (a1[860]) {
        float v17 = "on";
      }
      else {
        float v17 = "off";
      }
      int v20 = 136446210;
      uint64_t v21 = v17;
      LODWORD(v19) = 12;
      float v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "elevation tracking is %{public}s",  &v20,  v19);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, co nst CLFitnessTrackingNotifier_Type::NotificationData &)",  "%s\n",  v18);
    }
  }

void sub_100CA857C(uint64_t a1, int a2)
{
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187C0F8);
  }
  uint64_t v4 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "isVehicleConnected,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187C0F8);
    }
    v6[0] = 67109120;
    v6[1] = a2;
    int v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "isVehicleConnected,%d",  v6);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionCoprocessor::setIsVehicleConnected(BOOL)", "%s\n", v5);
  }

  buf[0] = 9;
  buf[1] = a2;
  buf[2] = a2 ^ 1;
  sub_100CAF524(a1 + 192, (__int16 *)buf, 0LL);
}

void sub_100CA874C(uint64_t a1, int *a2, double *a3)
{
  int v6 = a3[1] < 0.0 && *a3 > 0.0;
  if (qword_1019344F0 != -1) {
    dispatch_once(&qword_1019344F0, &stru_10187C0F8);
  }
  __int128 v7 = (os_log_s *)qword_1019344F8;
  if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a2;
    double v9 = *a3;
    uint64_t v10 = *((void *)a3 + 1);
    LODWORD(buf) = 67109632;
    HIDWORD(buf) = v8;
    __int16 v24 = 2048;
    double v25 = v9;
    __int16 v26 = 2048;
    uint64_t v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Received VehicleConnection notification,%d,startTime, %f,endTime,%f",  (uint8_t *)&buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10187C0F8);
    }
    int v18 = *a2;
    double v19 = *a3;
    uint64_t v20 = *((void *)a3 + 1);
    LODWORD(v31) = 67109632;
    HIDWORD(v31) = v18;
    *(_WORD *)float v32 = 2048;
    *(double *)&void v32[2] = v19;
    __int16 v33 = 2048;
    *(void *)float v34 = v20;
    LODWORD(v22) = 28;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  2LL,  "Received VehicleConnection notification,%d,startTime, %f,endTime,%f",  &v31,  v22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onVehicleConnection(const CLVehicleConnectionNotifier_Type::Notification &, const CLVehi cleConnectionNotifier_Type::NotificationData &)",  "%s\n",  v21);
  }

  if (*(_BYTE *)(a1 + 868))
  {
    float v31 = &off_101857D20;
    *(void *)float v32 = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v34[4] = *(_OWORD *)a3;
    char v35 = v6;
    uint64_t v11 = sub_100E00E14();
    sub_100E022E0(v11, (uint64_t)&v31);
    sub_101125260(&buf);
    sub_10113AA28(&buf);
    v30 |= 1u;
    uint64_t v29 = *(void *)v32;
    uint64_t v12 = v28;
    double v13 = *a3;
    *(_BYTE *)(v28 + 28) |= 2u;
    *(double *)(v12 + 16) = v13;
    uint64_t v14 = v28;
    uint64_t v15 = *((void *)a3 + 1);
    *(_BYTE *)(v28 + 28) |= 1u;
    *(void *)(v14 + _Block_object_dispose(va, 8) = v15;
    uint64_t v16 = v28;
    *(_BYTE *)(v28 + 28) |= 4u;
    *(_BYTE *)(v16 + 24) = v6;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10187C198);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)&buf);
    }
    sub_101127D00((PB::Base *)&buf);
  }

  sub_100CA857C(a1, v6);
  if ((v6 & 1) != 0) {
    double Current = 1.79769313e308;
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  *(double *)(a1 + 140_Block_object_dispose(va, 8) = Current;
}

void sub_100CA8A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100CA8A84(uint64_t a1, _DWORD *a2, void *__src)
{
  if (!*a2)
  {
    memcpy((void *)(a1 + 920), __src, 0x140uLL);
    uint64_t v4 = sub_1006E27E8();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_100CA8AFC;
    void v5[3] = &unk_10181D3D0;
    unsigned __int8 v5[4] = a1;
    sub_1006E2970(v4, (uint64_t)v5);
  }

void sub_100CA8AFC(uint64_t a1)
{
}

uint64_t sub_100CA8B04(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 868))
  {
    uint64_t v2 = result;
    uint64_t v16 = &off_1018578A8;
    int v20 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v18 = *(void *)result;
    uint64_t v19 = v3;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    __int16 v21 = *(_WORD *)(v2 + 20);
    char v22 = *(_BYTE *)(v2 + 22);
    uint64_t v4 = sub_100E00E14();
    sub_100E022E0(v4, (uint64_t)&v16);
    sub_101125260(v13);
    sub_10113A5E4(v13);
    v15 |= 1u;
    *(CFAbsoluteTime *)&v13[77] = Current;
    uint64_t v5 = v14;
    uint64_t v6 = *(void *)v2;
    *(_BYTE *)(v14 + 36) |= 1u;
    *(void *)(v5 + _Block_object_dispose(va, 8) = v6;
    uint64_t v7 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 8);
    *(_BYTE *)(v14 + 36) |= 4u;
    *(_DWORD *)(v7 + 2sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v6;
    uint64_t v8 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 12);
    *(_BYTE *)(v14 + 36) |= 8u;
    *(_DWORD *)(v8 + 24) = v6;
    uint64_t v9 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 16);
    *(_BYTE *)(v14 + 36) |= 0x10u;
    *(_DWORD *)(v9 + 2_Block_object_dispose(va, 8) = v6;
    uint64_t v10 = v14;
    int v11 = *(unsigned __int16 *)(v2 + 20);
    *(_BYTE *)(v14 + 36) |= 2u;
    *(_DWORD *)(v10 + 16) = v11;
    uint64_t v12 = v14;
    LOBYTE(v11) = *(_BYTE *)(v2 + 22);
    *(_BYTE *)(v14 + 36) |= 0x20u;
    *(_BYTE *)(v12 + 32) = v11;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10187C198);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v13);
    }
    return sub_101127D00((PB::Base *)v13);
  }

  return result;
}

void sub_100CA8C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100CA8C8C(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 868))
  {
    uint64_t v2 = result;
    uint64_t v14 = &off_101858658;
    int v18 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v16 = *(void *)result;
    uint64_t v17 = v3;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = sub_100E00E14();
    sub_100E022E0(v4, (uint64_t)&v14);
    sub_101125260(v10);
    sub_10113A53C(v10);
    v13 |= 1u;
    CFAbsoluteTime v12 = Current;
    sub_1010E0B98(v11);
    uint64_t v5 = *((void *)v11 + 1);
    uint64_t v6 = *(void *)v2;
    *(_BYTE *)(v5 + 32) |= 1u;
    *(void *)(v5 + _Block_object_dispose(va, 8) = v6;
    uint64_t v7 = *((void *)v11 + 1);
    LODWORD(v6) = *(_DWORD *)(v2 + 8);
    *(_BYTE *)(v7 + 32) |= 4u;
    *(_DWORD *)(v7 + 2sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v6;
    uint64_t v8 = *((void *)v11 + 1);
    LODWORD(v6) = *(_DWORD *)(v2 + 12);
    *(_BYTE *)(v8 + 32) |= 8u;
    *(_DWORD *)(v8 + 24) = v6;
    uint64_t v9 = *((void *)v11 + 1);
    LODWORD(v6) = *(_DWORD *)(v2 + 16);
    *(_BYTE *)(v9 + 32) |= 0x10u;
    *(_DWORD *)(v9 + 2_Block_object_dispose(va, 8) = v6;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10187C198);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v10);
    }
    return sub_101127D00((PB::Base *)v10);
  }

  return result;
}

void sub_100CA8DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CA8DEC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v26) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Unexpected CLPressureBias notification.notification,%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      int v7 = *a3;
      int v19 = 67109120;
      LODWORD(v2sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v7;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "Unexpected CLPressureBias notification.notification,%d",  &v19);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Ty pe::NotificationData &)",  "%s\n",  v8);
    }
  }

  else
  {
    __int128 v18 = *(_OWORD *)a4;
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187C1B8);
    }
    int v11 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134218496;
      double v26 = *((float *)&v18 + 1);
      __int16 v27 = 2048;
      double v28 = *((float *)&v18 + 2);
      __int16 v29 = 2048;
      double v30 = *((float *)&v18 + 3);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "pressureBiasFit.fMedianTemperatureOffsetCoefficient,%f,pressureBiasFit.fMedToc_FactoryTemp,%f,fMaxTemp,%f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187C1B8);
      }
      int v19 = 134218496;
      double v20 = *((float *)&v18 + 1);
      __int16 v21 = 2048;
      double v22 = *((float *)&v18 + 2);
      __int16 v23 = 2048;
      double v24 = *((float *)&v18 + 3);
      LODWORD(v16) = 32;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  1LL,  "pressureBiasFit.fMedianTemperatureOffsetCoefficient,%f,pressureBiasFit.fMedToc_FactoryTemp,%f,fMaxTemp,%f",  COERCE_DOUBLE(&v19),  v16,  *(double *)v17);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Ty pe::NotificationData &)",  "%s\n",  v14);
    }

    uint64_t v12 = a1 + 192;
    sub_100CAF6B0(v12, &v18, 0LL);
    *(void *)uint64_t v17 = *(void *)(a4 + 16);
    *(void *)&v17[5] = *(void *)(a4 + 21);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10187C1B8);
    }
    char v13 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134218496;
      double v26 = *(float *)&v17[1];
      __int16 v27 = 2048;
      double v28 = *(float *)&v17[5];
      __int16 v29 = 2048;
      double v30 = *(float *)&v17[9];
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "PressureInertialFit,compensationOnX,%f,compensationOnY,%f,compensationOnZ,%f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10187C1B8);
      }
      int v19 = 134218496;
      double v20 = *(float *)&v17[1];
      __int16 v21 = 2048;
      double v22 = *(float *)&v17[5];
      __int16 v23 = 2048;
      double v24 = *(float *)&v17[9];
      LODWORD(v16) = 32;
      char v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  1LL,  "PressureInertialFit,compensationOnX,%f,compensationOnY,%f,compensationOnZ,%f",  COERCE_DOUBLE(&v19),  v16,  *(double *)v17);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Ty pe::NotificationData &)",  "%s\n",  v15);
    }

    sub_100CAF82C(v12, (uint64_t *)v17, 0LL);
  }

void sub_100CA9320(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  if (!*a3)
  {
    __int128 v5 = a4[1];
    __int128 v9 = *a4;
    __int128 v10 = v5;
    __int128 v6 = a4[3];
    __int128 v11 = a4[2];
    __int128 v12 = v6;
    uint64_t v7 = sub_1006E27E8();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_100CA9398;
    _OWORD v8[3] = &unk_10184DA38;
    _DWORD v8[4] = a1;
    sub_1006E2970(v7, (uint64_t)v8);
  }

void sub_100CA9398(uint64_t a1)
{
}

void sub_100CA93A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 10)
  {
    if (objc_opt_class(&OBJC_CLASS___MCProfileConnection)) {
      *(_BYTE *)(v1 + 1736) = objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection"),  "isHealthDataSubmissionAllowed");
    }
  }

  else if (v2 == 6)
  {
    *(_BYTE *)(v1 + 653) = 1;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v4 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %d.", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      int v6 = *(_DWORD *)(a1 + 40);
      v8[0] = 67109120;
      v8[1] = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning Unhandled notification %d.",  v8);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onDarwinNotification(const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifi er_Type::NotificationData &)_block_invoke",  "%s\n",  v7);
    }
  }

void sub_100CA95A0(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  if (*a2 == 6)
  {
    *(_BYTE *)(a1 + 1417) = *a3;
    int v4 = *(unsigned __int8 *)(a1 + 1416);
    goto LABEL_5;
  }

  if (*a2 == 5)
  {
    int v4 = *a3;
    *(_BYTE *)(a1 + 1416) = v4;
LABEL_5:
    BYTE6(v13) = 25;
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = *(_BYTE *)(a1 + 1417) != 0;
    }
    HIBYTE(v13) = v5;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int8 *)(a1 + 1417);
      int v10 = *(unsigned __int8 *)(a1 + 1416);
      *(_DWORD *)uint64_t buf = 67109632;
      int v20 = v9;
      __int16 v21 = 1024;
      int v22 = v10;
      __int16 v23 = 1024;
      BOOL v24 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Sending induced motion: touch, %d, vibe, %d, sum, %d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187C0D8);
      }
      int v11 = *(unsigned __int8 *)(a1 + 1416);
      __int16 v15 = 1024;
      int v16 = v11;
      __int16 v17 = 1024;
      BOOL v18 = v5;
      __int128 v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Sending induced motion: touch, %d, vibe, %d, sum, %d",  &v14,  20,  67109632);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onInducedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionSt ate_Type::NotificationData &)",  "%s\n",  v12);
    }

    sub_100CAF9B4(a1 + 192, (__int16 *)&v13 + 3, 0LL);
    return;
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  int v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Unhandled notification from CLMotionState in CLMotionCoprocessor.",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    LOWORD(v14) = 0;
    LODWORD(v13) = 2;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Unhandled notification from CLMotionState in CLMotionCoprocessor.",  &v14,  v13);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionCoprocessor::onInducedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionStat e_Type::NotificationData &)",  "%s\n",  v7);
  }

void sub_100CA9910(uint64_t a1, uint64_t a2, _DWORD *a3, uint8_t *a4)
{
  if (!*a3)
  {
    sub_1004F2598();
    if (sub_1004FC230())
    {
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10187C2F8);
      }
      int v6 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *a4;
        *(_DWORD *)uint64_t buf = 67109120;
        int v12 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Resetting compass on pencil state update, isAttached, %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10187C2F8);
        }
        int v8 = *a4;
        v10[0] = 67109120;
        v10[1] = v8;
        int v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  2LL,  "Resetting compass on pencil state update, isAttached, %d",  v10);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionCoprocessor::onPencilStateNotification(int, const CLPencilState_Type::Notification &, const CLPen cilState_Type::NotificationData &)",  "%s\n",  v9);
      }

      (*(void (**)(uint64_t))(*(void *)a1 + 456LL))(a1);
      buf[0] = 45;
      buf[1] = *a4;
      sub_100CAFB30(a1 + 192, (__int16 *)buf, 0LL);
    }
  }

double sub_100CA9B0C(int a1)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  size_t v6 = 16LL;
  if (a1) {
    uint64_t v1 = "kern.sleeptime";
  }
  else {
    uint64_t v1 = "kern.waketime";
  }
  int v2 = sysctlbyname(v1, &v7, &v6, 0LL, 0LL);
  double v3 = (double)v7;
  double v4 = (double)(int)v8;
  if (v2)
  {
    double v4 = 0.0;
    double v3 = 0.0;
  }

  return v3 + v4 * 0.000001;
}

uint64_t sub_100CA9B88(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100CA9B90(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 856LL) = 0;
  return result;
}

uint64_t sub_100CA9B9C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 857LL) = 0;
  return result;
}

uint64_t sub_100CA9BA8(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 858LL) = 0;
  return result;
}

void sub_100CA9BB4(id a1)
{
  qword_1019344C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void sub_100CA9BE0(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100CA9C0C(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100CA9C38(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100CA9C64(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100CA9C90(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100CA9CBC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CA9CEC(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100CA9D18(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100CA9D44(id a1)
{
  qword_1019347C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void sub_100CA9D70(id a1)
{
  qword_101934508 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

void sub_100CA9D9C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CA9DC8(id a1)
{
  qword_101934668 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_100CA9DF4(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100CA9E20(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100CA9E4C(id a1)
{
  qword_101934708 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_100CA9E78(id a1)
{
  qword_101934688 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100CA9EA4(id a1)
{
  qword_1019345C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_100CA9ED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10187C328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CA9EE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10187C328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100CA9F08(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

void sub_100CA9F24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10187C378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CA9F38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10187C378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100CA9F5C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

void sub_100CA9F78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10187C3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CA9F8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10187C3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100CA9FB0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

void sub_100CA9FCC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAA0D8;
    _DWORD v7[4] = nullsub_1042;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    char v9 = *((_BYTE *)a2 + 2);
    if (aBlock) {
      double v4 = _Block_copy(aBlock);
    }
    else {
      double v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAA0F0;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAA0C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAA0D8(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAA0F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 11;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 3LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAA158(uint64_t a1, _OWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAA264;
    _DWORD v7[4] = nullsub_1043;
    _OWORD v7[2] = 0x4C12000000LL;
    void v7[5] = &unk_10175E27B;
    v8[0] = *a2;
    *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a2 + 12);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAA27C;
    block[3] = &unk_1018344C8;
    void block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAA24C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

__n128 sub_100CAA264(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 6sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_OWORD *)(a2 + 60);
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100CAA27C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 10;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 28LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAA2E4(uint64_t a1, const void *a2, void (**a3)(void, void))
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x15012000000LL;
    _OWORD v8[3] = sub_100CAA3FC;
    _DWORD v8[4] = nullsub_1044;
    void v8[5] = &unk_10175E27B;
    memcpy(v9, a2, sizeof(v9));
    if (a3) {
      BOOL v5 = _Block_copy(a3);
    }
    else {
      BOOL v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAA410;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (a3)
  {
    a3[2](a3, 0LL);
  }

void sub_100CAA3E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void *sub_100CAA3FC(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x11AuLL);
}

void sub_100CAA410(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 22;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 282LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAA478(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x3C12000000LL;
    _OWORD v8[3] = sub_100CAA580;
    _DWORD v8[4] = nullsub_1045;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    int v9 = *((_DWORD *)a2 + 2);
    if (aBlock) {
      BOOL v5 = _Block_copy(aBlock);
    }
    else {
      BOOL v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAA598;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAA568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAA580(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAA598(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 17;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 12LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAA600(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAA708;
    _DWORD v8[4] = nullsub_1046;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    char v9 = *((_BYTE *)a2 + 8);
    if (aBlock) {
      BOOL v5 = _Block_copy(aBlock);
    }
    else {
      BOOL v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAA720;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAA6F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAA708(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAA720(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 15;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 9LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAA788(int a1, void **__p)
{
  if (__p)
  {
    operator delete(__p);
  }

void sub_100CAA7C0(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAA8C4;
    _DWORD v7[4] = nullsub_1047;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAA8D4;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAA8AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAA8C4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAA8D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 66;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAA93C(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAAA48;
    _DWORD v7[4] = nullsub_1048;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    char v9 = *((_BYTE *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAAA60;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAAA30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAAA48(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAAA60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 76;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 3LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAAAC8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAABD4;
    _DWORD v7[4] = nullsub_1049;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    char v9 = *((_BYTE *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAABEC;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAABBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAABD4(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAABEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 2;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 3LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAAC54(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAAD60;
    _DWORD v7[4] = nullsub_1050;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    int v8 = *a2;
    __int16 v9 = *((_WORD *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAAD78;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAAD48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAAD60(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAAD78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 19;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 6LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAADE0(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAAEEC;
    _DWORD v7[4] = nullsub_1051;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    char v9 = *((_BYTE *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAAF04;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAAED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAAEEC(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAAF04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 34;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 3LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAAF6C(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAB070;
    _DWORD v7[4] = nullsub_1052;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAB080;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAB070(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAB080(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 73;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void *sub_100CAB0E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    sub_1000070D4();
  }
  return operator new(176 * a2);
}

void sub_100CAB130(uint64_t a1, _OWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAB23C;
    _DWORD v7[4] = nullsub_1053;
    _OWORD v7[2] = 0x5012000000LL;
    void v7[5] = &unk_10175E27B;
    v8[0] = *a2;
    *(_OWORD *)((char *)v8 + 13) = *(_OWORD *)((char *)a2 + 13);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAB254;
    block[3] = &unk_1018344C8;
    void block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB224( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

__n128 sub_100CAB23C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100CAB254(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 35;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 29LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAB2BC(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x4012000000LL;
    void v7[3] = sub_100CAB3C0;
    _DWORD v7[4] = nullsub_1054;
    void v7[5] = &unk_10175E27B;
    __int128 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAB3D0;
    block[3] = &unk_1018344C8;
    void block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB3A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

__n128 sub_100CAB3C0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100CAB3D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 3;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 16LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAB438(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x6812000000LL;
    _OWORD v8[3] = sub_100CAB550;
    _DWORD v8[4] = nullsub_1055;
    void v8[5] = &unk_10175E27B;
    __int128 v4 = a2[1];
    __int128 v9 = *a2;
    __int128 v10 = v4;
    __int128 v11 = a2[2];
    uint64_t v12 = *((void *)a2 + 6);
    if (aBlock) {
      BOOL v5 = _Block_copy(aBlock);
    }
    else {
      BOOL v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _OWORD v7[2] = sub_100CAB570;
    void v7[3] = &unk_1018344C8;
    void v7[5] = v8;
    void v7[6] = a1;
    _DWORD v7[4] = v5;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB538( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

__n128 sub_100CAB550(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 64);
  __int128 v4 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v4;
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

void sub_100CAB570(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 16;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 56LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAB5D8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAB6E4;
    _DWORD v7[4] = nullsub_1056;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    char v9 = *((_BYTE *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAB6FC;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB6CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAB6E4(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAB6FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 28;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 3LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAB764(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAB868;
    _DWORD v7[4] = nullsub_1057;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    BOOL v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAB878;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAB868(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAB878(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 67;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAB8E0(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAB9E8;
    _DWORD v8[4] = nullsub_1058;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    v9[0] = v4;
    *(void *)((char *)v9 + 6) = *(uint64_t *)((char *)a2 + 6);
    if (aBlock) {
      BOOL v5 = _Block_copy(aBlock);
    }
    else {
      BOOL v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CABA00;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAB9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAB9E8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 54) = *(void *)(a2 + 54);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CABA00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 13;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 14LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CABA68(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v9[0] = 0LL;
    v9[1] = v9;
    void v9[2] = 0x8812000000LL;
    v9[3] = sub_100CABB8C;
    _DWORD v9[4] = nullsub_1059;
    v9[5] = &unk_10175E27B;
    __int128 v4 = a2[3];
    __int128 v12 = a2[2];
    __int128 v13 = v4;
    __int128 v14 = a2[4];
    char v15 = *((_BYTE *)a2 + 80);
    __int128 v5 = a2[1];
    __int128 v10 = *a2;
    __int128 v11 = v5;
    if (aBlock) {
      size_t v6 = _Block_copy(aBlock);
    }
    else {
      size_t v6 = 0LL;
    }
    uint64_t v7 = *(dispatch_queue_s **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _OWORD v8[2] = sub_100CABBB4;
    _OWORD v8[3] = &unk_1018344C8;
    void v8[5] = v9;
    void v8[6] = a1;
    _DWORD v8[4] = v6;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CABB74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

__n128 sub_100CABB8C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = result;
  return result;
}

void sub_100CABBB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 12;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 81LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CABC1C(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CABD20;
    _DWORD v7[4] = nullsub_1060;
    void v7[5] = &unk_10175E27B;
    char v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CABD30;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CABD08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CABD20(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_100CABD30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 20;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 1LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CABD98(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CABE9C;
    _DWORD v7[4] = nullsub_1061;
    void v7[5] = &unk_10175E27B;
    char v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CABEAC;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CABE84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CABE9C(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_100CABEAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 23;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 1LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CABF14(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAC018;
    _DWORD v7[4] = nullsub_1062;
    void v7[5] = &unk_10175E27B;
    char v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAC028;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC000( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAC018(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_100CAC028(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 24;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 1LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC090(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAC194;
    _DWORD v7[4] = nullsub_1063;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAC1A4;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC17C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAC194(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAC1A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 21;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC20C(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAC310;
    _DWORD v7[4] = nullsub_1064;
    void v7[5] = &unk_10175E27B;
    char v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAC320;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC2F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAC310(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  return result;
}

void sub_100CAC320(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 33;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 1LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC388(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAC490;
    _DWORD v8[4] = nullsub_1065;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    char v9 = *((_BYTE *)a2 + 8);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAC4A8;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAC490(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAC4A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 38;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 9LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC510(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAC618;
    _DWORD v8[4] = nullsub_1066;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    char v9 = *((_BYTE *)a2 + 8);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAC630;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC600( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAC618(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAC630(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 82;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 9LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC698(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x3C12000000LL;
    _OWORD v8[3] = sub_100CAC7A0;
    _DWORD v8[4] = nullsub_1067;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    int v9 = *((_DWORD *)a2 + 2);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAC7B8;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAC7A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAC7B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 42;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 12LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC820(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAC924;
    _DWORD v7[4] = nullsub_1068;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAC934;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAC90C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAC924(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAC934(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 44;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAC99C(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CACAA0;
    _DWORD v7[4] = nullsub_1069;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CACAB0;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CACA88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CACAA0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CACAB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 26;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CACB18(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CACC1C;
    _DWORD v7[4] = nullsub_1070;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CACC2C;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CACC04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CACC1C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CACC2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 39;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CACC94(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CACD98;
    _DWORD v7[4] = nullsub_1071;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CACDA8;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CACD80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CACD98(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CACDA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 68;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CACE10(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CACF18;
    _DWORD v8[4] = nullsub_1072;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    v9[0] = v4;
    *(void *)((char *)v9 + 6) = *(uint64_t *)((char *)a2 + 6);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CACF30;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CACF00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CACF18(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 54) = *(void *)(a2 + 54);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CACF30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 69;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 14LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CACF98(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAD0A0;
    _DWORD v8[4] = nullsub_1073;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    __int16 v9 = *((_WORD *)a2 + 4);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAD0B8;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD088( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAD0A0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAD0B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 77;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 10LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAD120(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAD224;
    _DWORD v7[4] = nullsub_1074;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAD234;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD20C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAD224(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAD234(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 78;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAD29C(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAD3A4;
    _DWORD v8[4] = nullsub_1075;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    char v9 = *((_BYTE *)a2 + 8);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAD3BC;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD38C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAD3A4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAD3BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 79;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 9LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAD424(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x3C12000000LL;
    _OWORD v8[3] = sub_100CAD52C;
    _DWORD v8[4] = nullsub_1076;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    int v9 = *((_DWORD *)a2 + 2);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAD544;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAD52C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAD544(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 47;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 12LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAD5AC(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAD6B4;
    _DWORD v8[4] = nullsub_1077;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    void v8[6] = v4;
    char v9 = *((_BYTE *)a2 + 8);
    if (aBlock) {
      __int128 v5 = _Block_copy(aBlock);
    }
    else {
      __int128 v5 = 0LL;
    }
    size_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAD6CC;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD69C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAD6B4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAD6CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 48;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 9LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAD734(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAD838;
    _DWORD v7[4] = nullsub_1078;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAD848;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAD838(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAD848(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 70;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAD8B0(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAD9B4;
    _DWORD v7[4] = nullsub_1079;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAD9C4;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAD99C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAD9B4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAD9C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 41;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CADA2C(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CADB30;
    _DWORD v7[4] = nullsub_1080;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CADB40;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CADB18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CADB30(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CADB40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 80;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void *sub_100CADBA8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    __int128 v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      __int128 v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          __int128 v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  __int128 v11 = operator new(0x20uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  void v11[3] = 0LL;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100019E10(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    *int v20 = v11;
    goto LABEL_39;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_100CADDB8(_Unwind_Exception *a1)
{
}

void sub_100CADDCC(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CADED0;
    _DWORD v7[4] = nullsub_1081;
    void v7[5] = &unk_10175E27B;
    int v8 = *a2;
    if (aBlock) {
      unint64_t v4 = _Block_copy(aBlock);
    }
    else {
      unint64_t v4 = 0LL;
    }
    __int128 v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CADEE0;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CADEB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CADED0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_100CADEE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 4;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 4LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CADF48(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    size_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint8x8_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000071BC(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100CAE210( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CAE25C(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    int v8 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }

  else
  {
    int v8 = (__int128 *)(*(void *)v7 + 16LL * v4);
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 8));
    uint64_t v11 = (__int128 *)(*(void *)v10 + 16LL * v9);
  }

  sub_100CAE2FC((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100CAE2E8(_Unwind_Exception *a1)
{
}

void *sub_100CAE2FC(void *a1, char *a2, __int128 *a3, char *a4, __int128 *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_100CAE330(a1, a2, a3, v5);
}

void *sub_100CAE330(void *a1, void *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100CAE45C(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 16LL * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  __n128 result = sub_10025C760((uint64_t)v22, a4);
  while (v14 != v16)
  {
    uint64_t v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096LL);
    if ((_OWORD *)v14 == v17)
    {
      uint64_t v17 = (_OWORD *)v14;
    }

    else
    {
      uint64_t v18 = (_OWORD *)v14;
      do
      {
        __int128 v19 = *a3++;
        *uint64_t v18 = v19;
        if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4096)
        {
          int64_t v20 = (__int128 *)a2[1];
          ++a2;
          a3 = v20;
        }

        ++v18;
      }

      while (v18 != v17);
    }

    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }

  return result;
}

void sub_100CAE45C(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int16 v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          __int128 v31 = &v29[8 * (v28 >> 2)];
          __int128 v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            char v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)char v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }

          __int16 v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 255LL;
          }
          else {
            uint64_t v64 = 256LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        unsigned int v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          double v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              double v81 = &v79[8 * (v78 >> 2)];
              __int16 v82 = (uint64_t *)a1[1];
              unsigned int v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                unsigned int v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                double v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)double v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              double v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                unsigned int v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              int v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                unsigned int v66 = (char *)a1[1];
              }

              double v77 = &v66[-8 * (v74 >> 1)];
              unsigned int v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)unsigned int v66 = v69;
          unsigned int v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      double v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int16 v88 = operator new(0x1000uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                __int128 v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)__int128 v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              unsigned int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }

              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      __int16 v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      unint64_t v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_100CAE970( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CAE9E4( uint64_t result, __int128 *a2, char *a3, __int128 *a4, char *a5, __int128 *a6, uint64_t a7)
{
  unsigned int v56 = (void *)result;
  __int16 v57 = a2;
  if (a6 != a4)
  {
    unint64_t v8 = a6;
    do
    {
      if (v8 == v57) {
        break;
      }
      __n128 result = (uint64_t)v56;
      uint64_t v11 = *(__int128 **)a5;
      uint64_t v12 = (((uint64_t)v8 - *(void *)a5) >> 4) + 32 * (a5 - (char *)v56) - (((uint64_t)v57 - *v56) >> 4);
      if (v12 == 3)
      {
        uint64_t v49 = v57 + 1;
        uint64_t v50 = v56;
        if ((__int128 *)((char *)v57 - *v56 + 16) == (__int128 *)4096)
        {
          uint64_t v50 = v56 + 1;
          uint64_t v49 = (__int128 *)v56[1];
        }

        if (v8 == v11)
        {
          uint64_t v51 = *((void *)a5 - 1);
          a5 -= 8;
          unint64_t v8 = (__int128 *)(v51 + 4096);
        }

        return sub_100CAEFBC((uint64_t)v56, v57, (uint64_t)v50, v49, (uint64_t)a5, v8 - 1, a7);
      }

      if (v12 == 2)
      {
        uint64_t v52 = *(void *)a7;
        if (v8 == v11) {
          unint64_t v8 = (__int128 *)(*((void *)a5 - 1) + 4096LL);
        }
        uint64_t v53 = v8 - 1;
        __n128 result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(v52 + 16))(v52, v8 - 1, v57);
        if ((_DWORD)result)
        {
          __int128 v58 = *v57;
          __int128 v54 = v58;
          *__int16 v57 = *v53;
          *uint64_t v53 = v54;
        }

        return result;
      }

      if (v12 <= 7) {
        return (uint64_t)sub_100CAF0C8(v56, v57, a5, (uint64_t)v8, a7);
      }
      unint64_t v13 = a3;
      uint64_t v15 = sub_10025C760((uint64_t)&v56, (unint64_t)v12 >> 1);
      uint64_t v16 = v14;
      uint64_t v17 = a5;
      uint64_t v18 = (uint64_t)v8;
      if (v8 == *(__int128 **)a5)
      {
        uint64_t v17 = a5 - 8;
        uint64_t v18 = *((void *)a5 - 1) + 4096LL;
      }

      uint64_t v19 = (__int128 *)(v18 - 16);
      int v20 = sub_100CAEFBC((uint64_t)v56, v57, (uint64_t)v15, v14, (uint64_t)v17, (__int128 *)(v18 - 16), a7);
      uint64_t v21 = (char *)v56;
      BOOL v22 = v57;
      __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
      if ((result & 1) == 0)
      {
        do
        {
          if (v19 == *(__int128 **)v17)
          {
            uint64_t v23 = *((void *)v17 - 1);
            v17 -= 8;
            uint64_t v19 = (__int128 *)(v23 + 4096);
          }

          if (v22 == --v19)
          {
            uint64_t v39 = v22 + 1;
            if ((__int128 *)((char *)v39 - *(void *)v21) == (__int128 *)4096)
            {
              uint64_t v40 = (__int128 *)*((void *)v21 + 1);
              v21 += 8;
              uint64_t v39 = v40;
            }

            a3 = v13;
            int64_t v41 = a5;
            uint64_t v42 = (uint64_t)v8;
            uint64_t v30 = a4;
            if (v8 == *(__int128 **)a5)
            {
              int64_t v41 = a5 - 8;
              uint64_t v42 = *((void *)a5 - 1) + 4096LL;
            }

            uint64_t v43 = (__int128 *)(v42 - 16);
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
            if ((result & 1) == 0)
            {
              while (1)
              {
                if (v39 == v43) {
                  return result;
                }
                __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
                if ((_DWORD)result) {
                  break;
                }
                if ((__int128 *)((char *)++v39 - *(void *)v21) == (__int128 *)4096)
                {
                  int64_t v46 = (__int128 *)*((void *)v21 + 1);
                  v21 += 8;
                  uint64_t v39 = v46;
                }
              }

              __int128 v58 = *v39;
              *v39++ = *v43;
              *uint64_t v43 = v58;
              if ((__int128 *)((char *)v39 - *(void *)v21) == (__int128 *)4096)
              {
                unint64_t v48 = (__int128 *)*((void *)v21 + 1);
                v21 += 8;
                uint64_t v39 = v48;
              }
            }

            if (v39 == v43) {
              return result;
            }
            while (1)
            {
              if (((*(uint64_t (**)(void))(*(void *)a7 + 16LL))() & 1) != 0)
              {
                do
                {
                  if (v43 == *(__int128 **)v41)
                  {
                    uint64_t v45 = *((void *)v41 - 1);
                    v41 -= 8;
                    uint64_t v43 = (__int128 *)(v45 + 4096);
                  }

                  --v43;
                  __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
                }

                while ((result & 1) != 0);
                if (v21 >= v41 && (v21 != v41 || v39 >= v43))
                {
                  if (v21 > a3 || v39 > a4 && v21 == a3) {
                    return result;
                  }
LABEL_85:
                  unsigned int v56 = v21;
                  __int16 v57 = v39;
                  goto LABEL_86;
                }

                __int128 v58 = *v39;
                __int128 *v39 = *v43;
                *uint64_t v43 = v58;
              }

              if ((__int128 *)((char *)++v39 - *(void *)v21) == (__int128 *)4096)
              {
                uint64_t v44 = (__int128 *)*((void *)v21 + 1);
                v21 += 8;
                uint64_t v39 = v44;
              }
            }
          }

          __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
        }

        while (!(_DWORD)result);
        __int128 v58 = *v22;
        __int128 v24 = v58;
        *BOOL v22 = *v19;
        *uint64_t v19 = v24;
        ++v20;
      }

      unint64_t v25 = v22 + 1;
      if ((__int128 *)((char *)v25 - *(void *)v21) == (__int128 *)4096)
      {
        int64_t v26 = (__int128 *)*((void *)v21 + 1);
        v21 += 8;
        unint64_t v25 = v26;
      }

      if (v21 < v17 || v21 == v17 && v25 < v19)
      {
        while (1)
        {
          if ((*(unsigned int (**)(void))(*(void *)a7 + 16LL))())
          {
            do
            {
              if ((__int128 *)((char *)++v25 - *(void *)v21) == (__int128 *)4096)
              {
                __int16 v27 = (__int128 *)*((void *)v21 + 1);
                v21 += 8;
                unint64_t v25 = v27;
              }
            }

            while (((*(uint64_t (**)(void))(*(void *)a7 + 16LL))() & 1) != 0);
          }

          do
          {
            if (v19 == *(__int128 **)v17)
            {
              uint64_t v28 = *((void *)v17 - 1);
              v17 -= 8;
              uint64_t v19 = (__int128 *)(v28 + 4096);
            }

            --v19;
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
          }

          while (!(_DWORD)result);
          if (v21 >= v17 && (v21 != v17 || v25 >= v19)) {
            break;
          }
          __int128 v58 = *v25;
          __int128 *v25 = *v19;
          *uint64_t v19 = v58;
          ++v20;
          if (v16 == v25) {
            uint64_t v16 = v19;
          }
          if ((__int128 *)((char *)++v25 - *(void *)v21) == (__int128 *)4096)
          {
            __int16 v29 = (__int128 *)*((void *)v21 + 1);
            v21 += 8;
            unint64_t v25 = v29;
          }
        }
      }

      a3 = v13;
      uint64_t v30 = a4;
      if (v25 != v16)
      {
        __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
        if ((_DWORD)result)
        {
          __int128 v58 = *v25;
          __int128 *v25 = *v16;
          *uint64_t v16 = v58;
          ++v20;
        }
      }

      if (v25 == a4) {
        return result;
      }
      if (!v20)
      {
        if (v21 > a3 || (__int128 v31 = v25, v32 = v21, v25 > a4) && (__int128 v31 = v25, v32 = v21, v21 == a3))
        {
          uint64_t v34 = v56;
          uint64_t v33 = v57;
          while (1)
          {
            char v35 = v33 + 1;
            if ((__int128 *)((char *)v33 - *v34 + 16) == (__int128 *)4096)
            {
              uint64_t v36 = (__int128 *)v34[1];
              ++v34;
              char v35 = v36;
            }

            if (v35 == v25) {
              break;
            }
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
            uint64_t v33 = v35;
            if ((result & 1) != 0) {
              goto LABEL_40;
            }
          }
        }

        else
        {
          while (1)
          {
            uint64_t v37 = v31 + 1;
            if ((__int128 *)((char *)v31 - *(void *)v32 + 16) == (__int128 *)4096)
            {
              uint64_t v38 = (__int128 *)*((void *)v32 + 1);
              v32 += 8;
              uint64_t v37 = v38;
            }

            if (v37 == v8) {
              break;
            }
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
            __int128 v31 = v37;
            if ((_DWORD)result) {
              goto LABEL_40;
            }
          }
        }

        return result;
      }

uint64_t sub_100CAEFBC( uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  char v11 = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a7 + 16LL))();
  if ((v11 & 1) == 0)
  {
    if (!(_DWORD)result) {
      return result;
    }
    __int128 v14 = *a4;
    *a4 = *a6;
    *a6 = v14;
    __int128 v15 = *a2;
    *a2 = *a4;
    *a4 = v15;
    return 2LL;
  }

  if (!(_DWORD)result)
  {
    __int128 v16 = *a2;
    *a2 = *a4;
    *a4 = v16;
    __int128 v17 = *a4;
    *a4 = *a6;
    *a6 = v17;
    return 2LL;
  }

  __int128 v13 = *a2;
  *a2 = *a6;
  *a6 = v13;
  return 1LL;
}

void *sub_100CAF0C8(void *result, __int128 *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = a2;
  unint64_t v9 = result;
  uint64_t v10 = a4;
  if (*a3 == a4) {
    uint64_t v10 = *(a3 - 1) + 4096LL;
  }
  char v11 = (__int128 *)(v10 - 16);
  if ((__int128 *)(v10 - 16) != a2)
  {
    do
    {
      uint64_t result = sub_100CAF188(v9, (uint64_t)v8, (uint64_t)a3, a4, a5);
      if (v8 != v12)
      {
        __int128 v14 = *v8;
        *unint64_t v8 = *v12;
        *uint64_t v12 = v14;
      }

      if ((__int128 *)((char *)++v8 - *v9) == (__int128 *)4096)
      {
        __int128 v13 = (__int128 *)v9[1];
        ++v9;
        unint64_t v8 = v13;
      }
    }

    while (v8 != v11);
  }

  return result;
}

void *sub_100CAF188(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a1;
  if (a2 != a4)
  {
    uint64_t v8 = a2;
    unint64_t v9 = a1;
    while (1)
    {
      v8 += 16LL;
      if (v8 - *v9 == 4096)
      {
        uint64_t v10 = v9[1];
        ++v9;
        uint64_t v8 = v10;
      }

      if (v8 == a4) {
        break;
      }
    }
  }

  return v5;
}

void sub_100CAF21C(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAF328;
    _DWORD v7[4] = nullsub_1082;
    _OWORD v7[2] = 0x4812000000LL;
    void v7[5] = &unk_10175E27B;
    __int128 v8 = *a2;
    uint64_t v9 = *((void *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAF340;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAF310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

__n128 sub_100CAF328(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_100CAF340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 5;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 24LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAF3A8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAF4AC;
    _DWORD v7[4] = nullsub_1083;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAF4BC;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAF494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAF4AC(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAF4BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 36;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAF524(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    void v7[3] = sub_100CAF630;
    _DWORD v7[4] = nullsub_1084;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    char v9 = *((_BYTE *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAF648;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAF618( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAF630(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(_BYTE *)(result + 5sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAF648(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 9;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 3LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAF6B0(uint64_t a1, __int128 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x4012000000LL;
    void v7[3] = sub_100CAF7B4;
    _DWORD v7[4] = nullsub_1085;
    void v7[5] = &unk_10175E27B;
    __int128 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAF7C4;
    block[3] = &unk_1018344C8;
    void block[5] = v7;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v5, block);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAF79C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

__n128 sub_100CAF7B4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100CAF7C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 14;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 16LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAF82C(uint64_t a1, uint64_t *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _OWORD v8[2] = 0x4012000000LL;
    _OWORD v8[3] = sub_100CAF934;
    _DWORD v8[4] = nullsub_1086;
    uint64_t v4 = *a2;
    void v8[5] = &unk_10175E27B;
    v9[0] = v4;
    *(void *)((char *)v9 + 5) = *(uint64_t *)((char *)a2 + 5);
    if (aBlock) {
      unint64_t v5 = _Block_copy(aBlock);
    }
    else {
      unint64_t v5 = 0LL;
    }
    unint64_t v6 = *(dispatch_queue_s **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100CAF94C;
    block[3] = &unk_1018344C8;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAF91C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100CAF934(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 53) = *(void *)(a2 + 53);
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_100CAF94C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 30;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 13LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAF9B4(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAFAB8;
    _DWORD v7[4] = nullsub_1087;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAFAC8;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAFAA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAFAB8(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAFAC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 25;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAFB30(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAFC34;
    _DWORD v7[4] = nullsub_1088;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAFC44;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAFC1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAFC34(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAFC44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 45;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAFCAC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAFDB0;
    _DWORD v7[4] = nullsub_1089;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAFDC0;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAFD98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAFDB0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAFDC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 49;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAFE28(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CAFF2C;
    _DWORD v7[4] = nullsub_1090;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CAFF3C;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CAFF14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CAFF2C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CAFF3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 52;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CAFFA4(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CB00A8;
    _DWORD v7[4] = nullsub_1091;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CB00B8;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CB0090( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CB00A8(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CB00B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 54;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CB0120(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CB0224;
    _DWORD v7[4] = nullsub_1092;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CB0234;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CB020C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CB0224(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CB0234(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 55;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CB029C(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v7[0] = 0LL;
    v7[1] = v7;
    _OWORD v7[2] = 0x3812000000LL;
    void v7[3] = sub_100CB03A0;
    _DWORD v7[4] = nullsub_1093;
    void v7[5] = &unk_10175E27B;
    __int16 v8 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0LL;
    }
    unint64_t v5 = *(dispatch_queue_s **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    uint64_t v6[2] = sub_100CB03B0;
    void v6[3] = &unk_1018344C8;
    void v6[5] = v7;
    _OWORD v6[6] = a1;
    _DWORD v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }

  else if (aBlock)
  {
    (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  }

void sub_100CB0388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_100CB03A0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100CB03B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 56;
  BOOL v3 = sub_1008FFA28(v2, *(void *)(*(void *)(a1 + 40) + 8LL) + 48LL, 2LL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    _Block_release(*(const void **)(a1 + 32));
  }

void sub_100CB0418()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013589F0;
      v1[3] = unk_101358A00;
      v1[4] = xmmword_101358A10;
      v1[0] = xmmword_1013589D0;
      v1[1] = unk_1013589E0;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100CB04EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100CB0504()
{
  qword_10199D538 = 0LL;
  unk_10199D540 = 0LL;
  qword_10199D530 = 0LL;
  unsigned __int8 v0 = operator new(0x48uLL);
  qword_10199D538 = (uint64_t)v0 + 72;
  unk_10199D540 = (char *)v0 + 72;
  v0[2] = xmmword_101358B88;
  v0[3] = unk_101358B98;
  *((void *)v0 + _Block_object_dispose(va, 8) = 0x4120000040A00000LL;
  *unsigned __int8 v0 = xmmword_101358B68;
  v0[1] = unk_101358B78;
  qword_10199D530 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D530, (void *)&_mh_execute_header);
  qword_10199D550 = 0LL;
  unk_10199D558 = 0LL;
  qword_10199D548 = 0LL;
  uint64_t v1 = operator new(0x44uLL);
  qword_10199D550 = (uint64_t)(v1 + 17);
  unk_10199D558 = v1 + 17;
  v1[16] = 1120403456;
  *(_OWORD *)uint64_t v1 = xmmword_101358BB0;
  *((_OWORD *)v1 + 1) = unk_101358BC0;
  *((_OWORD *)v1 + 2) = xmmword_101358BD0;
  *((_OWORD *)v1 + 3) = unk_101358BE0;
  qword_10199D548 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D548, (void *)&_mh_execute_header);
  qword_10199D568 = 0LL;
  unk_10199D570 = 0LL;
  qword_10199D560 = 0LL;
  uint64_t v2 = operator new(0x64uLL);
  qword_10199D568 = (uint64_t)(v2 + 25);
  unk_10199D570 = v2 + 25;
  v2[24] = 1203982336;
  *((_OWORD *)v2 + 2) = xmmword_101358C14;
  *((_OWORD *)v2 + 3) = unk_101358C24;
  *((_OWORD *)v2 + 4) = xmmword_101358C34;
  *((_OWORD *)v2 + 5) = unk_101358C44;
  *(_OWORD *)uint64_t v2 = xmmword_101358BF4;
  *((_OWORD *)v2 + 1) = unk_101358C04;
  qword_10199D560 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D560, (void *)&_mh_execute_header);
  qword_10199D580 = 0LL;
  unk_10199D588 = 0LL;
  qword_10199D578 = 0LL;
  BOOL v3 = operator new(0x54uLL);
  qword_10199D580 = (uint64_t)(v3 + 21);
  unk_10199D588 = v3 + 21;
  v3[20] = 1092616192;
  *((_OWORD *)v3 + 2) = xmmword_101358C78;
  *((_OWORD *)v3 + 3) = unk_101358C88;
  *((_OWORD *)v3 + 4) = xmmword_101358C98;
  *(_OWORD *)BOOL v3 = xmmword_101358C58;
  *((_OWORD *)v3 + 1) = unk_101358C68;
  qword_10199D578 = (uint64_t)v3;
  return __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_10199D578, (void *)&_mh_execute_header);
}

void *sub_100CB06C0(uint64_t a1, uint64_t a2, void *a3)
{
  __n128 result = (void *)sub_100CB06E8(a1, "CLWifiService", a3);
  *__n128 result = off_10187C9B0;
  return result;
}

uint64_t sub_100CB06E8(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10187CAC0;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_100CB0768(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100CB0784(void *a1)
{
  *a1 = off_10187C9B0;
  if (qword_1019A2050) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A2050 + 8LL))(qword_1019A2050);
  }
  qword_1019A2050 = 0LL;
  return sub_100CB07CC((uint64_t)a1);
}

uint64_t sub_100CB07CC(uint64_t a1)
{
  *(void *)a1 = off_10187CAC0;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100CB0848(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100CB08BC;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199D5B8 != -1) {
    dispatch_once(&qword_10199D5B8, block);
  }
  return qword_1019A2050;
}

uint64_t sub_100CB08BC(uint64_t a1)
{
  uint64_t v2 = operator new(0x350uLL);
  uint64_t result = sub_10033274C((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A2050 = (uint64_t)v2;
  return result;
}

void sub_100CB08F4(_Unwind_Exception *a1)
{
}

uint64_t sub_100CB0908(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 28);
  uint64_t v3 = *(unsigned __int16 *)(result + 30);
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(result + 32);
  }
  else {
    uint64_t v5 = 0LL;
  }
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + _Block_object_dispose(va, 8) = *a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(result + 2_Block_object_dispose(va, 8) = v6 - v4;
  }

  else
  {
    *(_WORD *)(result + 3sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v3 + 1;
  }

  *(_BYTE *)(result + 12) = 1;
  uint64_t v7 = *(unsigned __int16 *)(result + 1078);
  unint64_t v8 = *(unsigned int *)(result + 1080);
  uint64_t v9 = *(unsigned __int16 *)(result + 1076);
  if (v9 + v7 >= v8) {
    uint64_t v10 = *(unsigned int *)(result + 1080);
  }
  else {
    uint64_t v10 = 0LL;
  }
  *(_DWORD *)(result + 1076 + 4 * (v9 + v7 - v10) + _Block_object_dispose(va, 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8) {
      LOWORD(v_Block_object_dispose(va, 8) = 0;
    }
    *(_WORD *)(result + 1076) = v9 + 1 - v8;
  }

  else
  {
    *(_WORD *)(result + 107_Block_object_dispose(va, 8) = v7 + 1;
  }

  *(_BYTE *)(result + 106sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 1;
  uint64_t v11 = *(unsigned __int16 *)(result + 2126);
  unint64_t v12 = *(unsigned int *)(result + 2128);
  uint64_t v13 = *(unsigned __int16 *)(result + 2124);
  if (v13 + v11 >= v12) {
    uint64_t v14 = *(unsigned int *)(result + 2128);
  }
  else {
    uint64_t v14 = 0LL;
  }
  *(_DWORD *)(result + 2124 + 4 * (v13 + v11 - v14) + _Block_object_dispose(va, 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12) {
      LOWORD(v12) = 0;
    }
    *(_WORD *)(result + 2124) = v13 + 1 - v12;
  }

  else
  {
    *(_WORD *)(result + 2126) = v11 + 1;
  }

  *(_BYTE *)(result + 210_Block_object_dispose(va, 8) = 1;
  return result;
}

void sub_100CB0A60(id a1)
{
  if (sub_1004F804C()) {
    qword_10199D5C0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLOdometerAlarmManagerSilo");
  }
}

uint64_t sub_100CB0BA0()
{
  uint64_t result = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = v2;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
    return 0LL;
  }

  return result;
}

void sub_100CB0BF0(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  if (*a2 == 5)
  {
LABEL_8:
    [a4 handleLocationData:a3];
    return;
  }

  if (!*a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187CBD0);
    }
    unint64_t v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "BATCH: Should not be registered for location",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187CBD0);
      }
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BATCH: Should not be registered for location",  v15,  2);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLL ocationProvider_Type::NotificationData &, void *)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    goto LABEL_8;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187CBD0);
  }
  unint64_t v8 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    int v9 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "BATCH: Unexpected notification: %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187CBD0);
    }
    int v12 = *a2;
    v15[0] = 67240192;
    v15[1] = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BATCH: Unexpected notification: %{public}d",  v15,  8);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLoc ationProvider_Type::NotificationData &, void *)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

void sub_100CB0EF8(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  if (*a2 == 16)
  {
    _objc_msgSend(a4, "handleOdometerData:");
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187CBD0);
    }
    uint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v6 = *a2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "BATCH: Unexpected notification: %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187CBD0);
      }
      int v7 = *a2;
      v10[0] = 67240192;
      v10[1] = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BATCH: Unexpected notification: %{public}d",  v10,  8);
      int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void (anonymous namespace)::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocati onProvider_Type::NotificationData &, void *)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

void sub_100CB11D4(_Unwind_Exception *a1)
{
}

int64_t sub_100CB11E8(id a1, id a2, id a3)
{
  double v6 = v5;
  [a3 odometerTarget];
  if (v6 < v7) {
    return -1LL;
  }
  [a2 odometerTarget];
  double v10 = v9;
  [a3 odometerTarget];
  return v10 != v11;
}

void sub_100CB1294(_Unwind_Exception *a1)
{
}

void sub_100CB1848(_Unwind_Exception *a1)
{
}

void sub_100CB1BA4(_Unwind_Exception *a1)
{
}

id sub_100CB1C98(uint64_t a1)
{
  return _objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "firstAlarm"), "fire:withError:", 0, *(double *)(a1 + 40));
}

id sub_100CB1E1C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "fire:withError:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  11,  0),  -1.0);
}

void sub_100CB1F68(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100CB1F94()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_100CB1FF8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_100CB206C(_Unwind_Exception *a1)
{
}

void sub_100CB2084()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101358FD8;
      v1[3] = unk_101358FE8;
      v1[4] = xmmword_101358FF8;
      v1[0] = xmmword_101358FB8;
      v1[1] = unk_101358FC8;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100CB2158(_Unwind_Exception *a1)
{
}

uint64_t sub_100CB2170(uint64_t a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10187CC00;
  *(void *)(a1 + 72) = off_10187CCC8;
  *(void *)(a1 + 36sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = off_10187CD18;
  *(_BYTE *)(a1 + 36_Block_object_dispose(va, 8) = 0;
  sub_100CB2C30(a1);
  return a1;
}

void sub_100CB2204( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_100CB2230(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 8));
  *int v12 = &off_101826EF8;
  *(void *)a1 = off_10187CF88;
  *(void *)(a1 + 72) = off_10187D030;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10187CF88;
  *(void *)(a1 + 72) = off_10187D030;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = 0LL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 272) = 3;
  *(_DWORD *)(a1 + 28sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 12000;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = off_101826EC8;
  sub_1001B9AC4((void *)(a1 + 296));
  *(void *)(a1 + 296) = &off_101826EF8;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  __int128 v15 = (int *)(a1 + 280);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 280));
  int v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    *__int128 v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187D070);
  }
  int v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D070);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    int64_t v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::CLActivityRecorderDb(const char *, BOOL, float, const std::string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = HRRecoveryInputWR, D ataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100CB25EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[36] = off_101826EC8;
  sub_1001B9C98(v27);
  sub_1003580A0(v26);
  sub_100D8A88C(a12);
  *int v24 = off_101826EC8;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100CB2690()
{
}

void *sub_100CB2698(void *a1)
{
  a1[9] = off_10187D030;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10187CF88;
  a1[36] = off_101826EC8;
  sub_1001B9C98(a1 + 37);
  sub_1003580A0(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_101826EC8;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100CB2718(uint64_t a1)
{
  return sub_100CB2698((void *)(a1 - 72));
}

void *sub_100CB2720(uint64_t a1)
{
  return sub_100CB2698((void *)(a1 - 360));
}

void sub_100CB2728(void *a1)
{
  uint64_t v1 = sub_100CB2698(a1);
  operator delete(v1);
}

void sub_100CB273C(uint64_t a1)
{
  uint64_t v1 = sub_100CB2698((void *)(a1 - 72));
  operator delete(v1);
}

void sub_100CB2754(uint64_t a1)
{
  uint64_t v1 = sub_100CB2698((void *)(a1 - 360));
  operator delete(v1);
}

uint64_t sub_100CB276C(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 368)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  }
  sub_1003C0454(*(void *)(a1 + 80));
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM HRRecoveryInputWRHistory WHERE startTime < ?", &v13);
  uint64_t v5 = v13;
  char v6 = (sqlite3_stmt *)sub_100019240(v13);
  if (sub_1003B7480(v6, 1, Current - *(double *)(*(void *)(a2 + 8) - 24LL)))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    unint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
    sub_1003BB2BC(v7, v8);
    uint64_t v9 = (*(int (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  }

  else
  {
    uint64_t v9 = -1LL;
  }

  sub_1003C05BC(*(void *)(a1 + 80));
  uint64_t v10 = *(void *)(a1 + 80);
  else {
    uint64_t v11 = *(void *)(v10 + 88);
  }
  sub_1003C1EC0(v10, v11);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v9;
}

void sub_100CB289C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CB28BC(uint64_t a1, uint64_t a2)
{
  return sub_100CB276C(a1 - 72, a2);
}

uint64_t sub_100CB28C4(uint64_t a1, char **a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from HRRecoveryInputWRHistory ORDER BY startTime ASC", &v21);
    uint64_t v5 = v21;
    uint64_t v25 = v21;
    sub_1003C0454(*(void *)(a1 + 80));
    __int128 v21 = 0uLL;
    DWORD2(v22) = 0;
    *(void *)&__int128 v22 = 0LL;
    __int128 v23 = 0uLL;
    LODWORD(v24) = 3;
    while (!sub_100CB2B08(&v25, (uint64_t)&v21))
    {
      unint64_t v6 = (unint64_t)a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if (v6 >= v7)
      {
        uint64_t v9 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v6 - (void)*a2) >> 3);
        unint64_t v10 = v9 + 1;
        unint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v7 - (void)*a2) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x249249249249249LL) {
          unint64_t v12 = 0x492492492492492LL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_1000AC8F0((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = &v13[56 * v9];
        *(_OWORD *)uint64_t v14 = v21;
        *((_OWORD *)v14 + 1) = v22;
        *((_OWORD *)v14 + 2) = v23;
        *((void *)v14 + 6) = v24;
        char v16 = *a2;
        __int128 v15 = a2[1];
        int v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            __int128 v18 = *(_OWORD *)(v15 - 56);
            __int128 v19 = *(_OWORD *)(v15 - 40);
            __int128 v20 = *(_OWORD *)(v15 - 24);
            *((_DWORD *)v17 - 2) = *((_DWORD *)v15 - 2);
            *(_OWORD *)(v17 - 24) = v20;
            *(_OWORD *)(v17 - 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v19;
            *(_OWORD *)(v17 - 56) = v18;
            v17 -= 56;
            v15 -= 56;
          }

          while (v15 != v16);
          __int128 v15 = *a2;
        }

        unint64_t v8 = v14 + 56;
        *a2 = v17;
        a2[1] = v14 + 56;
        a2[2] = &v13[56 * v12];
        if (v15) {
          operator delete(v15);
        }
      }

      else
      {
        *(_OWORD *)unint64_t v6 = v21;
        *(_OWORD *)(v6 + 16) = v22;
        *(_OWORD *)(v6 + 32) = v23;
        *(void *)(v6 + 4_Block_object_dispose(va, 8) = v24;
        unint64_t v8 = (char *)(v6 + 56);
      }

      a2[1] = v8;
    }

    uint64_t result = sub_1003C05BC(*(void *)(a1 + 80));
    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100CB2AE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CB2B08(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1LL;
  }
  if (v5 != 100) {
    return 2LL;
  }
  sub_100CB334C(a1, a2);
  return 0LL;
}

uint64_t sub_100CB2B64(uint64_t a1)
{
  uint64_t v3 = v8;
  unint64_t v4 = (sqlite3_stmt *)sub_100019240(v8);
  int v5 = sqlite3_step(v4);
  if (v5 == 100)
  {
    unint64_t v6 = (sqlite3_stmt *)sub_100019240(v3);
    uint64_t v1 = sqlite3_column_int(v6, 0);
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  if (v5 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100CB2C04(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CB2C28(uint64_t a1)
{
  return sub_100CB2B64(a1 - 72);
}

uint64_t sub_100CB2C30(uint64_t a1)
{
  uint64_t result = sub_1003C1048(*(void *)(a1 + 80));
  if ((_DWORD)result)
  {
    sub_100CB2C8C(a1);
    uint64_t result = sub_1003B59A0( *(void *)(a1 + 80),  "HRRecoveryInputWRHistory",  (const char **)&off_10187CDB8,  (const std::string::value_type **)&off_1019900E0,  0);
    *(_BYTE *)(a1 + 36_Block_object_dispose(va, 8) = 1;
  }

  return result;
}

uint64_t sub_100CB2C8C(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "HRRecoveryInputWRHistory");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    uint64_t v8 = "userMets";
    do
    {
      uint64_t v42 = v8;
      int v43 = 5;
      __int16 v44 = 0;
      char v45 = 0;
      char v46 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "HRRecoveryInputWRHistory", v8, (uint64_t)&v42) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v38);
        uint64_t v9 = sub_10000CF44(&v39, (uint64_t)"ALTER TABLE ", 12LL);
        unint64_t v10 = sub_10000CF44(v9, (uint64_t)"HRRecoveryInputWRHistory", 24LL);
        unint64_t v11 = sub_10000CF44(v10, (uint64_t)" ADD COLUMN ", 12LL);
        size_t v12 = strlen(v8);
        uint64_t v13 = sub_10000CF44(v11, (uint64_t)v8, v12);
        uint64_t v14 = sub_10000CF44(v13, (uint64_t)" ", 1LL);
        __int128 v15 = (const char *)sub_1003BCC40((int)(&off_10187CDB8)[v3 + 31]);
        size_t v16 = strlen(v15);
        int v17 = sub_10000CF44(v14, (uint64_t)v15, v16);
        sub_10000CF44(v17, (uint64_t)";", 1LL);
        uint64_t v18 = *(void *)(a1 + 80);
        std::stringbuf::str(&v35, &v40);
        if ((v35.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v19 = &v35;
        }
        else {
          __int128 v19 = (std::stringbuf::string_type *)v35.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v18, (char *)v19, &v33);
        uint64_t v20 = v33.__r_.__value_.__r.__words[0];
        v33.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v21 = *(void *)(a1 + 80);
        __int128 v22 = (sqlite3_stmt *)sub_100019240(v20);
        sub_1003BB2BC(v21, v22);
        sub_10000CE18((uint64_t)&v35);
        __int128 v23 = sub_10000CF44(&v35.__r_.__value_.__l.__cap_, (uint64_t)"UPDATE ", 7LL);
        uint64_t v24 = sub_10000CF44(v23, (uint64_t)"HRRecoveryInputWRHistory", 24LL);
        uint64_t v25 = sub_10000CF44(v24, (uint64_t)" SET ", 5LL);
        size_t v26 = strlen(v8);
        __int16 v27 = sub_10000CF44(v25, (uint64_t)v8, v26);
        sub_10000CF44(v27, (uint64_t)" = 0;", 5LL);
        uint64_t v28 = *(void *)(a1 + 80);
        std::stringbuf::str(&v33, &v36);
        if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v29 = &v33;
        }
        else {
          uint64_t v29 = (std::stringbuf::string_type *)v33.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v28, (char *)v29, &v34);
        uint64_t v30 = v34;
        uint64_t v34 = 0LL;
        uint64_t v31 = *(void *)(a1 + 80);
        __int128 v32 = (sqlite3_stmt *)sub_100019240(v30);
        sub_1003BB2BC(v31, v32);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
        }
        v35.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + *(void *)(v5 - 24)) = v7;
        v35.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        }
        v38[0] = v5;
        *(void *)((char *)v38 + *(void *)(v5 - 24)) = v7;
        std::string::size_type v39 = v6;
        std::streambuf::~streambuf(&v40);
        std::ios::~ios(&v41);
        int v4 = 1;
      }

      uint64_t v8 = (&off_10187CDB8)[v3 + 36];
      v3 += 6LL;
    }

    while (v3 != 12);
    uint64_t result = sub_100CB3C64( a1,  "HRRecoveryInputWRHistory",  (const char **)&off_10187CDB8,  (const std::string::value_type **)&off_1019900E0);
  }

  return result;
}

void sub_100CB3070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
  }
  sub_1011F8850((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void *sub_100CB3108@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "HRRecoveryInputWRHistory");
}

void *sub_100CB3118@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "HRRecoveryInputWRHistory");
}

uint64_t sub_100CB3128(uint64_t a1)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "DELETE FROM HRRecoveryInputWRHistory", &v8);
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(a1 + 80);
    std::string::size_type v5 = (sqlite3_stmt *)sub_100019240(v8);
    sub_1003BB2BC(v4, v5);
    uint64_t v6 = *(void *)(a1 + 80);
    else {
      uint64_t v7 = *(void *)(v6 + 88);
    }
    uint64_t result = sub_1003C1EC0(v6, v7);
    if (v3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return result;
}

void sub_100CB31BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CB31DC(uint64_t a1)
{
  return sub_100CB3128(a1 - 72);
}

id *sub_100CB31E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (id *)sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100222B94(v15, (uint64_t)"CLHRRecoveryInputWRRecorderDb.insertRecord", 0);
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO HRRecoveryInputWRHistory (startTime, mets, gradeType, grade, userMets, userMetsSource) VALUES (?, ?, ?, ?, ?, ?)",  &v14);
    uint64_t v5 = v14;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(v14);
    if (sub_1003B7480(v6, 1, *(double *)(a2 + 8)))
    {
      uint64_t v7 = (sqlite3_stmt *)sub_100019240(v5);
      if (sub_1003B7480(v7, 2, *(double *)(a2 + 16)))
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
        if (sub_1003C28BC(v8, 3, *(_DWORD *)(a2 + 24)))
        {
          uint64_t v9 = (sqlite3_stmt *)sub_100019240(v5);
          if (sub_1003B7480(v9, 4, *(double *)(a2 + 32)))
          {
            unint64_t v10 = (sqlite3_stmt *)sub_100019240(v5);
            if (sub_1003B7480(v10, 5, *(double *)(a2 + 40)))
            {
              unint64_t v11 = (sqlite3_stmt *)sub_100019240(v5);
              if (sub_1003C28BC(v11, 6, *(_DWORD *)(a2 + 48)))
              {
                uint64_t v12 = *(void *)(a1 + 80);
                uint64_t v13 = (sqlite3_stmt *)sub_100019240(v5);
                sub_1003BB2BC(v12, v13);
              }
            }
          }
        }
      }
    }

    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    return sub_1001BA1BC(v15);
  }

  return result;
}

void sub_100CB3310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100CB3340(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100CB334C(a2, a3);
}

uint64_t sub_100CB334C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_100019240(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + _Block_object_dispose(va, 8) = sqlite3_column_double(v5, 1);
  uint64_t v6 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_100019240(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v7, 3);
  uint64_t v8 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  uint64_t v9 = (sqlite3_stmt *)sub_100019240(*a1);
  *(double *)(a2 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = sqlite3_column_double(v9, 5);
  unint64_t v10 = (sqlite3_stmt *)sub_100019240(*a1);
  uint64_t result = sqlite3_column_int(v10, 6);
  *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_100CB33FC(uint64_t a1, int a2, void **a3, double a4, double a5)
{
  uint64_t v11 = a1 + 112;
  uint64_t v10 = *(void *)(a1 + 112);
  uint64_t v12 = a1 + 72;
  v37[1] = a1 + 112;
  (*(void (**)(uint64_t))(v10 + 16))(a1 + 112);
  __int16 v38 = 256;
  if ((sub_100D8A92C(v12) & 1) != 0)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "SELECT * FROM HRRecoveryInputWRHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?",  buf);
    uint64_t v13 = *(void *)buf;
    v37[0] = *(void *)buf;
    memset(buf, 0, sizeof(buf));
    DWORD2(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
    *(void *)&__int128 v40 = 0LL;
    __int128 v41 = 0uLL;
    LODWORD(v42) = 3;
    if (a5 >= a4)
    {
      uint64_t v14 = (sqlite3_stmt *)sub_100019240(v13);
      if (sub_1003B7480(v14, 1, a4))
      {
        __int128 v15 = (sqlite3_stmt *)sub_100019240(v13);
        if (sub_1003B7480(v15, 2, a5))
        {
          size_t v16 = (sqlite3_stmt *)sub_100019240(v13);
          if (sub_1003C28BC(v16, 3, a2))
          {
            while (!sub_100CB2B08(v37, (uint64_t)buf))
            {
              int v17 = (char *)a3[1];
              uint64_t v18 = (char *)a3[2];
              if (v17 >= v18)
              {
                uint64_t v20 = 0x6DB6DB6DB6DB6DB7LL * ((v17 - (_BYTE *)*a3) >> 3);
                unint64_t v21 = v20 + 1;
                unint64_t v22 = 0x6DB6DB6DB6DB6DB7LL * ((v18 - (_BYTE *)*a3) >> 3);
                if (2 * v22 > v21) {
                  unint64_t v21 = 2 * v22;
                }
                if (v22 >= 0x249249249249249LL) {
                  unint64_t v23 = 0x492492492492492LL;
                }
                else {
                  unint64_t v23 = v21;
                }
                if (v23) {
                  uint64_t v24 = (char *)sub_1000AC8F0((uint64_t)(a3 + 2), v23);
                }
                else {
                  uint64_t v24 = 0LL;
                }
                uint64_t v25 = &v24[56 * v20];
                *(_OWORD *)uint64_t v25 = *(_OWORD *)buf;
                *((_OWORD *)v25 + 1) = v40;
                *((_OWORD *)v25 + 2) = v41;
                *((void *)v25 + 6) = v42;
                __int16 v27 = (char *)*a3;
                size_t v26 = (char *)a3[1];
                uint64_t v28 = v25;
                if (v26 != *a3)
                {
                  do
                  {
                    __int128 v29 = *(_OWORD *)(v26 - 56);
                    __int128 v30 = *(_OWORD *)(v26 - 40);
                    __int128 v31 = *(_OWORD *)(v26 - 24);
                    *((_DWORD *)v28 - 2) = *((_DWORD *)v26 - 2);
                    *(_OWORD *)(v28 - 24) = v31;
                    *(_OWORD *)(v28 - 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v30;
                    *(_OWORD *)(v28 - 56) = v29;
                    v28 -= 56;
                    v26 -= 56;
                  }

                  while (v26 != v27);
                  size_t v26 = (char *)*a3;
                }

                __int128 v19 = v25 + 56;
                *a3 = v28;
                a3[1] = v25 + 56;
                a3[2] = &v24[56 * v23];
                if (v26) {
                  operator delete(v26);
                }
              }

              else
              {
                *(_OWORD *)int v17 = *(_OWORD *)buf;
                *((_OWORD *)v17 + 1) = v40;
                *((_OWORD *)v17 + 2) = v41;
                *((void *)v17 + 6) = v42;
                __int128 v19 = v17 + 56;
              }

              a3[1] = v19;
            }
          }
        }
      }
    }

    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
    uint64_t v33 = 100LL;
  }

  else
  {
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_10187CF38);
    }
    __int128 v32 = (os_log_s *)qword_101934778;
    if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934770 != -1) {
        dispatch_once(&qword_101934770, &stru_10187CF38);
      }
      LOWORD(v37[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  2LL,  "StepCountHistory not accessible",  v37,  2);
      std::stringbuf v36 = (uint8_t *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLHRRecoveryInputWRRecorderDb::queryHRRecoveryInputWRInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoveryInputWR> &) const",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    uint64_t v33 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
  return v33;
}

void sub_100CB3804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100CB3850(uint64_t a1, int a2, void **a3, double a4, double a5)
{
  return sub_100CB33FC(a1 - 360, a2, a3, a4, a5);
}

uint64_t sub_100CB3858(uint64_t a1, void **a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v28[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v29 = 256;
  if ((sub_100D8A92C(v6) & 1) != 0)
  {
    sub_1003C0D54(*(void *)(a1 + 80), "SELECT * from HRRecoveryInputWRHistory ORDER BY startTime ASC", buf);
    uint64_t v7 = *(void *)buf;
    v28[0] = *(void *)buf;
    sub_1003C0454(*(void *)(a1 + 80));
    memset(buf, 0, sizeof(buf));
    DWORD2(v31) = 0;
    *(void *)&__int128 v31 = 0LL;
    __int128 v32 = 0uLL;
    LODWORD(v33) = 3;
    while (!sub_100CB2B08(v28, (uint64_t)buf))
    {
      uint64_t v8 = (char *)a2[1];
      uint64_t v9 = (char *)a2[2];
      if (v8 >= v9)
      {
        uint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((v8 - (_BYTE *)*a2) >> 3);
        unint64_t v12 = v11 + 1;
        unint64_t v13 = 0x6DB6DB6DB6DB6DB7LL * ((v9 - (_BYTE *)*a2) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x249249249249249LL) {
          unint64_t v14 = 0x492492492492492LL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          __int128 v15 = (char *)sub_1000AC8F0((uint64_t)(a2 + 2), v14);
        }
        else {
          __int128 v15 = 0LL;
        }
        size_t v16 = &v15[56 * v11];
        *(_OWORD *)size_t v16 = *(_OWORD *)buf;
        *((_OWORD *)v16 + 1) = v31;
        *((_OWORD *)v16 + 2) = v32;
        *((void *)v16 + 6) = v33;
        uint64_t v18 = (char *)*a2;
        int v17 = (char *)a2[1];
        __int128 v19 = v16;
        if (v17 != *a2)
        {
          do
          {
            __int128 v20 = *(_OWORD *)(v17 - 56);
            __int128 v21 = *(_OWORD *)(v17 - 40);
            __int128 v22 = *(_OWORD *)(v17 - 24);
            *((_DWORD *)v19 - 2) = *((_DWORD *)v17 - 2);
            *(_OWORD *)(v19 - 24) = v22;
            *(_OWORD *)(v19 - 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v21;
            *(_OWORD *)(v19 - 56) = v20;
            v19 -= 56;
            v17 -= 56;
          }

          while (v17 != v18);
          int v17 = (char *)*a2;
        }

        uint64_t v10 = v16 + 56;
        *a2 = v19;
        a2[1] = v16 + 56;
        a2[2] = &v15[56 * v14];
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)buf;
        *((_OWORD *)v8 + 1) = v31;
        *((_OWORD *)v8 + 2) = v32;
        *((void *)v8 + 6) = v33;
        uint64_t v10 = v8 + 56;
      }

      a2[1] = v10;
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v24 = 100LL;
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_10187CF58);
    }
    unint64_t v23 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "HRRecoveryInputWRHistory not accessible",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187CF58);
      }
      LOWORD(v28[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "HRRecoveryInputWRHistory not accessible",  v28,  2);
      __int16 v27 = (uint8_t *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CMError CLHRRecoveryInputWRRecorderDb::queryHRRecoveryInputWRAllRecords(std::vector<HRRecoveryInputWR> &) const",  "%s\n",  v26);
      if (v27 != buf) {
        free(v27);
      }
    }

    uint64_t v24 = 109LL;
  }

  (*(void (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  return v24;
}

void sub_100CB3C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100CB3C5C(uint64_t a1, void **a2)
{
  return sub_100CB3858(a1 - 360, a2);
}

uint64_t sub_100CB3C64(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D070);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      double v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(con st char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoveryInputWR, DataProtectionPolicy = C LActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int16 v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int16 v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      unint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      size_t v16 = v143;
    }
    else {
      size_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      __int128 v21 = &__p;
    }
    else {
      __int128 v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    __int128 v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    size_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      size_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v27 = &__p;
      }
      else {
        __int16 v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    __int128 v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v34 = &v139;
    }
    else {
      uint64_t v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v41 = &__p;
    }
    else {
      __int128 v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    uint64_t v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    char v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      unint64_t v48 = v143;
    }
    else {
      unint64_t v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    uint64_t v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v54 = buf;
    }
    else {
      __int128 v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    unsigned int v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v60 = buf;
    }
    else {
      __int128 v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    __int128 v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    unsigned int v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v69 = &__p;
    }
    else {
      uint64_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    uint64_t v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v75 = &__p;
      }
      else {
        int v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    int64_t v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      int v79 = &__p;
    }
    else {
      int v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    uint64_t v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v85 = &__p;
      }
      else {
        double v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      uint64_t v86 = v143;
    }
    else {
      uint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    __int16 v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      double v95 = &__p;
    }
    else {
      double v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    __int16 v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      __int16 v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v103 = &__p;
        }
        else {
          int v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        __int16 v104 = v141;
      }
      else {
        __int16 v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      __int16 v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v114 = buf;
      }
      else {
        __int16 v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      double v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      int v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned int v121 = &__p;
      }
      else {
        unsigned int v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      int v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
      int v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        int v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(c onst char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
      int v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        int v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(c onst char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100CB4DFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CB511C(void *a1, void **a2, double a3, double a4)
{
  __int128 v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v49);
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if (HIBYTE(v50)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_101269714(v10);
    goto LABEL_41;
  }

  uint64_t v4 = (std::stringbuf *)v49[1];
  operator delete(v49[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v49);
  uint64_t v11 = sub_10000CF44(&v50, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if ((SBYTE7(v44) & 0x80u) == 0) {
    __int128 v12 = __p;
  }
  else {
    __int128 v12 = (void **)__p[0];
  }
  if ((SBYTE7(v44) & 0x80u) == 0) {
    uint64_t v13 = BYTE7(v44);
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if (SBYTE7(v44) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1[10];
  uint64_t v4 = &v51;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v51);
  if ((SBYTE7(v44) & 0x80u) == 0) {
    size_t v16 = (char *)__p;
  }
  else {
    size_t v16 = (char *)__p[0];
  }
  sub_1003C0D54(v15, v16, &v47);
  uint64_t v5 = v47;
  uint64_t v47 = 0LL;
  uint64_t v48 = v5;
  if (SBYTE7(v44) < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    uint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      __p[0] = 0LL;
      __p[1] = 0LL;
      DWORD2(v44) = 0;
      *(void *)&__int128 v44 = 0LL;
      __int128 v45 = 0uLL;
      LODWORD(v46) = 3;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v48, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        signed __int8 v20 = (char *)a2[1];
        __int128 v21 = (char *)a2[2];
        if (v20 >= v21)
        {
          uint64_t v26 = 0x6DB6DB6DB6DB6DB7LL * ((v20 - (_BYTE *)*a2) >> 3);
          unint64_t v27 = v26 + 1;
          unint64_t v28 = 0x6DB6DB6DB6DB6DB7LL * ((v21 - (_BYTE *)*a2) >> 3);
          if (2 * v28 > v27) {
            unint64_t v27 = 2 * v28;
          }
          if (v28 >= 0x249249249249249LL) {
            unint64_t v29 = 0x492492492492492LL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29) {
            __int128 v30 = (char *)sub_1000AC8F0((uint64_t)(a2 + 2), v29);
          }
          else {
            __int128 v30 = 0LL;
          }
          __int128 v31 = &v30[56 * v26];
          __int128 v32 = *(_OWORD *)__p;
          __int128 v33 = v44;
          __int128 v34 = v45;
          *((void *)v31 + 6) = v46;
          *((_OWORD *)v31 + 1) = v33;
          *((_OWORD *)v31 + 2) = v34;
          *(_OWORD *)__int128 v31 = v32;
          std::stringbuf v36 = (char *)*a2;
          std::string::size_type v35 = (char *)a2[1];
          __int128 v37 = v31;
          if (v35 != *a2)
          {
            do
            {
              __int128 v38 = *(_OWORD *)(v35 - 56);
              __int128 v39 = *(_OWORD *)(v35 - 40);
              __int128 v40 = *(_OWORD *)(v35 - 24);
              *((_DWORD *)v37 - 2) = *((_DWORD *)v35 - 2);
              *(_OWORD *)(v37 - 24) = v40;
              *(_OWORD *)(v37 - 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v39;
              *(_OWORD *)(v37 - 56) = v38;
              v37 -= 56;
              v35 -= 56;
            }

            while (v35 != v36);
            std::string::size_type v35 = (char *)*a2;
          }

          size_t v25 = v31 + 56;
          *a2 = v37;
          a2[1] = v31 + 56;
          a2[2] = &v30[56 * v29];
          if (v35) {
            operator delete(v35);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)__p;
          __int128 v23 = v44;
          __int128 v24 = v45;
          *((void *)v20 + 6) = v46;
          *((_OWORD *)v20 + 1) = v23;
          *((_OWORD *)v20 + 2) = v24;
          *(_OWORD *)signed __int8 v20 = v22;
          size_t v25 = v20 + 56;
        }

        a2[1] = v25;
      }

      uint64_t v5 = v48;
      goto LABEL_43;
    }
  }

void sub_100CB54AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100CB5514(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v40 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D070);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 88);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
      uint64_t v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)__int128 v44 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        uint64_t v35 = *(void *)(a1 + 216);
        int v41 = 134349056;
        uint64_t v42 = v35;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v41,  12);
        __int128 v37 = (uint8_t *)v36;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAcc essible() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v36);
        if (v37 != buf) {
          free(v37);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D070);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v11;
      __int16 v47 = 2049;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    unint64_t v13 = *(void *)(a1 + 208);
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = *(void *)(a1 + 192);
    size_t v16 = (void *)(v14 + 8 * (v13 / 0x49));
    unsigned int v39 = v9;
    if (v15 == v14) {
      unint64_t v17 = 0LL;
    }
    else {
      unint64_t v17 = *v16 + 56 * (v13 % 0x49);
    }
    while (1)
    {
      if (v15 == v14)
      {
        unint64_t v23 = 0LL;
      }

      else
      {
        unint64_t v22 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        unint64_t v23 = *(void *)(v14 + 8 * (v22 / 0x49)) + 56 * (v22 % 0x49);
      }

      if (v17 == v23) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10187CF58);
      }
      __int128 v24 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10187CF58);
        }
        LOWORD(v41) = 0;
        LODWORD(v3_Block_object_dispose(va, 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v41,  v38);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAcc essible() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v17, 1LL);
      v17 += 56LL;
      if (v17 - *v16 == 4088)
      {
        unint64_t v25 = v16[1];
        ++v16;
        unint64_t v17 = v25;
      }

      uint64_t v14 = *(void *)(a1 + 184);
      uint64_t v15 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
    uint64_t v9 = v39;
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D070);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = (void *)(a1 + 88);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
    }

    signed __int8 v20 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      __int128 v21 = (void *)(a1 + 88);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)__int128 v44 = 0;
      *(_WORD *)&v44[4] = 2082;
      *(void *)&v44[6] = "";
      __int16 v45 = 2082;
      uint64_t v46 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 1;
  }

  unint64_t v28 = *(void ***)(a1 + 184);
  uint64_t v29 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v30 = v29 - (void)v28;
  if (v30 >= 0x11)
  {
    do
    {
      operator delete(*v28);
      uint64_t v31 = *(void *)(a1 + 192);
      unint64_t v28 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v28;
      unint64_t v30 = v31 - (void)v28;
    }

    while (v30 > 0x10);
  }

  if (v30 >> 3 == 1)
  {
    uint64_t v32 = 36LL;
  }

  else
  {
    if (v30 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v32 = 73LL;
  }

  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v32;
LABEL_61:
  __int128 v33 = *(void **)(a1 + 144);
  if (v33)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100CB5C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

__n128 sub_100CB5C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 16);
  __int128 v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_100CB5C98(uint64_t a1, __int128 *a2, char a3)
{
  v41[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v41[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v41);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  uint64_t v34 = 0LL;
  double v35 = 0.0;
  int v37 = 0;
  uint64_t v36 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v39 = 0LL;
  int v40 = 3;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v34);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        LOWORD(v42) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v42,  2);
        size_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *((double *)a2 + 1);
    double v8 = v35;
    double v9 = v7 - v35;
    if (v7 - v35 < 0.0) {
      double v9 = -(v7 - v35);
    }
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D070);
      }
      __int128 v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)uint64_t buf = 134349312;
        double v47 = v35;
        __int16 v48 = 2050;
        uint64_t v49 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        uint64_t v25 = *((void *)a2 + 1);
        int v42 = 134349312;
        double v43 = v35;
        __int16 v44 = 2050;
        uint64_t v45 = v25;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v42,  22);
        unint64_t v27 = (uint8_t *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v26);
        if (v27 != buf) {
          free(v27);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *((double *)a2 + 1);
      double v8 = v35;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)uint64_t buf = 134217984;
          double v47 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10187D070);
          }
          double v28 = *((double *)a2 + 1);
          int v42 = 134217984;
          double v43 = v28;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v42));
          unint64_t v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndS toreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }

        (*(void (**)(uint64_t, __int128 *))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10187D070);
        double v18 = v33;
      }

      double v19 = v17 - v18;
      signed __int8 v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v47 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10187D070);
        }
        int v42 = 134217984;
        double v43 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v42));
        uint64_t v32 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndSto reRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]",  "%s\n",  v31);
        if (v32 != buf) {
          free(v32);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, uint64_t *, uint64_t, __int128 *))(*(void *)a1 + 144LL))(a1, &v34, a1 + 224, a2);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_100CB63FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100CB6428(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    signed __int8 v20 = (_Unwind_Exception *)sub_101269880(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_100CB6688(void *a1, double a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_1012699EC(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100CB68C0(void *a1, uint64_t a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_101269B58(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  __int128 v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

uint64_t sub_100CB6AE8(uint64_t a1)
{
  return sub_100CB5514(a1 - 72);
}

void sub_100CB6AF0(id a1)
{
  qword_101934778 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_100CB6B1C(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100CB6B48(uint64_t *a1, char **a2)
{
  __int128 v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v43);
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if (HIBYTE(v44)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_101269CC4(v4);
LABEL_44:
    sub_100007008();
  }

  uint64_t v36 = v43[1];
  operator delete(v43[0]);
  if (!v36) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v43);
    int v6 = sub_10000CF44(&v44, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v38) & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((SBYTE7(v38) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v38);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v45);
    if ((SBYTE7(v38) & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    sub_1003C0D54(v10, v11, &v41);
    uint64_t v12 = v41;
    uint64_t v41 = 0LL;
    uint64_t v42 = v12;
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    sub_1003C0454(a1[10]);
    __p[0] = 0LL;
    __p[1] = 0LL;
    DWORD2(v3_Block_object_dispose(va, 8) = 0;
    *(void *)&__int128 v38 = 0LL;
    __int128 v39 = 0uLL;
    LODWORD(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 3;
    while (!sub_1001BA11C((uint64_t)a1, &v42, (uint64_t)__p))
    {
      unint64_t v13 = (unint64_t)a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if (v13 >= v14)
      {
        uint64_t v19 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v13 - (void)*a2) >> 3);
        unint64_t v20 = v19 + 1;
        unint64_t v21 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v14 - (void)*a2) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x249249249249249LL) {
          unint64_t v22 = 0x492492492492492LL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          uint64_t v23 = (char *)sub_1000AC8F0((uint64_t)(a2 + 2), v22);
        }
        else {
          uint64_t v23 = 0LL;
        }
        std::stringbuf v24 = &v23[56 * v19];
        __int128 v25 = *(_OWORD *)__p;
        __int128 v26 = v38;
        __int128 v27 = v39;
        *((void *)v24 + 6) = v40;
        *((_OWORD *)v24 + 1) = v26;
        *((_OWORD *)v24 + 2) = v27;
        *(_OWORD *)std::stringbuf v24 = v25;
        uint64_t v29 = *a2;
        double v28 = a2[1];
        unint64_t v30 = v24;
        if (v28 != *a2)
        {
          do
          {
            __int128 v31 = *(_OWORD *)(v28 - 56);
            __int128 v32 = *(_OWORD *)(v28 - 40);
            __int128 v33 = *(_OWORD *)(v28 - 24);
            *((_DWORD *)v30 - 2) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v30 - 24) = v33;
            *(_OWORD *)(v30 - 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v32;
            *(_OWORD *)(v30 - 56) = v31;
            v30 -= 56;
            v28 -= 56;
          }

          while (v28 != v29);
          double v28 = *a2;
        }

        uint64_t v18 = v24 + 56;
        *a2 = v30;
        a2[1] = v24 + 56;
        a2[2] = &v23[56 * v22];
        if (v28) {
          operator delete(v28);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)__p;
        __int128 v16 = v38;
        __int128 v17 = v39;
        *(void *)(v13 + 4_Block_object_dispose(va, 8) = v40;
        *(_OWORD *)(v13 + 16) = v16;
        *(_OWORD *)(v13 + 32) = v17;
        *(_OWORD *)unint64_t v13 = v15;
        uint64_t v18 = (char *)(v13 + 56);
      }

      a2[1] = v18;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v34 = v42;
    uint64_t v42 = 0LL;
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    }
    *(void **)((char *)v43
    uint64_t v44 = v35;
    std::streambuf::~streambuf(&v45);
    return std::ios::~ios(&v46);
  }

  return result;
}

void sub_100CB6E94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  sub_1011F8850((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_100CB6EFC(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100CB6FCC(id a1)
{
  qword_10199D5D0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLProxPDPAndALSPhoneNotifierSilo");
}

uint64_t sub_100CB7080(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100CB71E0;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_10199D5E0 != -1) {
    dispatch_once(&qword_10199D5E0, block);
  }
  return qword_1019A2058;
}

uint64_t sub_100CB71E0(uint64_t a1)
{
  uint64_t v2 = operator new(0x80uLL);
  uint64_t result = sub_100CB722C((uint64_t)v2, *(void **)(a1 + 32));
  qword_1019A2058 = (uint64_t)v2;
  return result;
}

void sub_100CB7218(_Unwind_Exception *a1)
{
}

uint64_t sub_100CB722C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_100CB72F8(a1, "CLProxPDPAndALSPhoneNotifier", a2);
  void *v3 = off_10187D0C0;
  v3[14] = 0LL;
  __int128 v4 = v3 + 14;
  v3[15] = 0LL;
  __int128 v5 = operator new(0x38uLL);
  sub_1003DE40C(v5, *(void **)(a1 + 40), (uint64_t)sub_100CB7394, a1, 0LL);
  void *v4 = v5;
  int v6 = operator new(0x38uLL);
  sub_1003DE40C(v6, *(void **)(a1 + 40), (uint64_t)sub_100CB7564, a1, 0LL);
  *(void *)(a1 + 12sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v6;
  return a1;
}

void sub_100CB72CC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  sub_100CB7734(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CB72F8(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10187D268;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_100CB7378(_Unwind_Exception *exception_object)
{
}

void sub_100CB7394(uint64_t *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187D218);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    __int128 v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLProxPDPAndALSPhoneNotifier::onProxPDPData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    __int128 v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLProxPDPAndALSPhoneNotifier::onProxPDPData, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_100CB8054(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CB7544( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CB7564(uint64_t *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187D218);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    __int128 v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLProxPDPAndALSPhoneNotifier::onALSPhoneData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    __int128 v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLProxPDPAndALSPhoneNotifier::onALSPhoneData, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_100CB80E0(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CB7714( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CB7734(uint64_t a1)
{
  *(void *)a1 = off_10187D268;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100CB77A8(void *a1)
{
  *a1 = off_10187D0C0;
  sub_100CB77F4((uint64_t)a1);
  return sub_100CB7734((uint64_t)a1);
}

void sub_100CB77E0(void *a1)
{
  uint64_t v1 = (void *)sub_100CB77A8(a1);
  operator delete(v1);
}

void sub_100CB77F4(uint64_t a1)
{
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 1;
  uint64_t v2 = sub_1008FA854(0);
  sub_1006DD2A0(v2, 40, *(void *)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)(a1 + 112) = 0LL;
  uint64_t v4 = sub_1008FA854(0);
  sub_1006DD2A0(v4, 41, *(void *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void *)(a1 + 12sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187D238);
  }
  int v6 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CLProxPDPAndALSPhoneNotifier is shutting down",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D238);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "CLProxPDPAndALSPhoneNotifier is shutting down",  v9,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLProxPDPAndALSPhoneNotifier::shutdown()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

void *sub_100CB79DC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100CB7A54(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D238);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Received register for ALS Phone notification request",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D238);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Received register for ALS Phone notification request",  v14,  2);
      unint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLProxPDPAndALSPhoneNotifier::registerForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Ty pe::Notification &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    uint64_t v4 = sub_1008FA854(0);
    uint64_t v5 = *(void *)(a1 + 120);
    double v6 = -1.0;
    int v7 = 41;
    goto LABEL_15;
  }

  if (!*a2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D238);
    }
    uint64_t v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Received register for prox PDP notification request",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D238);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Received register for prox PDP notification request",  v14,  2);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLProxPDPAndALSPhoneNotifier::registerForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Ty pe::Notification &)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    uint64_t v4 = sub_1008FA854(0);
    uint64_t v5 = *(void *)(a1 + 112);
    double v6 = -1.0;
    int v7 = 40;
LABEL_15:
    sub_1006DCB40(v4, v7, v5, v6);
  }

  return 1LL;
}

uint64_t sub_100CB7D58(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D238);
    }
    int v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Received unregister for ALS Phone notification request",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D238);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Received unregister for ALS Phone notification request",  v13,  2);
      __int16 v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLProxPDPAndALSPhoneNotifier::unregisterForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_ Type::Notification &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    uint64_t v4 = sub_1008FA854(0);
    uint64_t v5 = *(void *)(a1 + 120);
    int v6 = 41;
    goto LABEL_15;
  }

  if (!*a2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187D238);
    }
    uint64_t v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Received unregister for prox PDP notification request",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D238);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Received unregister for prox PDP notification request",  v13,  2);
      __int16 v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLProxPDPAndALSPhoneNotifier::unregisterForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_ Type::Notification &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    uint64_t v4 = sub_1008FA854(0);
    uint64_t v5 = *(void *)(a1 + 112);
    int v6 = 40;
LABEL_15:
    sub_1006DD2A0(v4, v6, v5);
  }

  return 1LL;
}

uint64_t sub_100CB8054(uint64_t a1, uint64_t *a2)
{
  LODWORD(v_Block_object_dispose(va, 8) = 0;
  uint64_t result = sub_100247620(a1, (int *)&v8, 1LL);
  if ((_DWORD)result)
  {
    uint64_t v5 = *a2;
    int v6 = *(_DWORD *)((char *)a2 + 19);
    __int16 v7 = *(_WORD *)((char *)a2 + 17);
    int v13 = 0;
    uint64_t v8 = v5;
    __int128 v9 = *(_OWORD *)((char *)a2 + 23);
    uint64_t v10 = *(uint64_t *)((char *)a2 + 39);
    int v11 = v6;
    __int16 v12 = v7;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v13,  &v8,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

uint64_t sub_100CB80E0(uint64_t a1, uint64_t *a2)
{
  LODWORD(v7) = 1;
  uint64_t result = sub_100247620(a1, (int *)&v7, 1LL);
  if ((_DWORD)result)
  {
    uint64_t v5 = *a2;
    int v6 = *((_DWORD *)a2 + 5);
    int v9 = 1;
    uint64_t v7 = v5;
    int v8 = v6;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v9,  &v7,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

uint64_t sub_100CB8160(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_10187D3B8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100CB8234(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLProxPDPAndALSPhoneNotifier");
  sub_100CB8160((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  *int v8 = off_10187D1A0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100CB82D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_100CB82FC(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187D218);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10187D218);
        }
        __int16 v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        __int128 v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::No tificationData, char, char>::removeClient(int) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notificati on, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, Regis trationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100CB8570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_1019901B0);
}

uint64_t sub_100CB8584(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)double v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          std::stringbuf v24 = (uint64_t *)v18;
        }
        else {
          std::stringbuf v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        uint64_t v47 = 0LL;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v36 = sub_100CBACB4((uint64_t)buf);
          sub_100CBA2DC((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_1019901B1;
        HIDWORD(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v17;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v30;
        HIDWORD(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        __int128 v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *a3;
        *(void *)uint64_t buf = (char *)&v40 + 4;
        __int128 v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)uint64_t buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10187D218);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&_BYTE buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    int v37 = (void *)(a1 + 8);
    *(_DWORD *)double v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    __int128 v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::Notifi cationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notific ation_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type: :NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_100CB89E8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187D218);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      std::stringbuf v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::Noti ficationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLProxPDPAndALSPhoneN otifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, Notificati onInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100CB8C68(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187D218);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                int v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10187D218);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int128 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_ Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notificat ion_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNoti fier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100CB8FF0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(__int128 **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = *v11;
  __int128 v13 = v11[1];
  *(void *)(a3 + 32) = *((void *)v11 + 4);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  return 1LL;
}

uint64_t sub_100CB9058(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x40uLL);
  __int128 v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_10187D348;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v7;
  *((void *)v6 + 7) = *(void *)(a3 + 32);
  *(void *)&__int128 v14 = v6 + 24;
  *((void *)&v14 + 1) = v6;
  int v13 = *a2;
  int v15 = &v13;
  int v8 = sub_10023347C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_1012CF090, &v15);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  BOOL v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_100CB9138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100CB914C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0LL;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_100CB918C(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v12 = (void *)(a1 + 8);
      int v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&_BYTE buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&_BYTE buf[20] = "activity";
      __int16 v68 = 2082;
      uint64_t v69 = v12;
      __int16 v70 = 2050;
      int v71 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    __int128 v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      __int128 v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)std::string::size_type v72 = &v72[8];
      memset(&v72[8], 0, 24);
      size_t v73 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v72);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v71;
      if (v71)
      {
        p_shared_owners = (unint64_t *)&v71->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v73;
      if (v73)
      {
        int v25 = (unint64_t *)&v73->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v72, *(void **)&v72[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0x40uLL);
      __int128 v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)a3;
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_10187D348;
      *((void *)v27 + 1) = 0LL;
      *(_OWORD *)(v27 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v28;
      *((void *)v27 + 7) = *(void *)(a3 + 32);
      *(void *)uint64_t buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      uint64_t v29 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v30 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    int v32 = sub_100CB9E80(a3);
    if (a5 == -1)
    {
      sub_100CB9F08((void *)a1, (int *)a2, v32);
    }

    else
    {
      uint64_t v33 = a1 + 88;
      uint64_t v34 = *(void *)(a1 + 88);
      if (!v34) {
        goto LABEL_48;
      }
      uint64_t v35 = a1 + 88;
      do
      {
        int v36 = *(_DWORD *)(v34 + 32);
        BOOL v37 = v36 < a5;
        if (v36 >= a5) {
          char v38 = (uint64_t *)v34;
        }
        else {
          char v38 = (uint64_t *)(v34 + 8);
        }
        if (!v37) {
          uint64_t v35 = v34;
        }
        uint64_t v34 = *v38;
      }

      while (*v38);
      if (v35 == v33 || *(_DWORD *)(v35 + 32) > a5) {
LABEL_48:
      }
        uint64_t v35 = a1 + 88;
      uint64_t v65 = v35;
      unint64_t v39 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v40 = *a2;
      __int16 v41 = (__n128 *)(a1 + 64);
      do
      {
        int v42 = *(_DWORD *)(v39 + 32);
        BOOL v43 = v42 < v40;
        if (v42 >= v40) {
          char v44 = (unint64_t *)v39;
        }
        else {
          char v44 = (unint64_t *)(v39 + 8);
        }
        if (!v43) {
          __int16 v41 = (__n128 *)v39;
        }
        unint64_t v39 = *v44;
      }

      while (*v44);
      if (v41 == v15 || v40 < (signed __int32)v41[2].n128_u32[0])
      {
LABEL_59:
        uint64_t v64 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10187D218);
        }
        int v45 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v46 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v72, a1, a2);
          if (v72[23] >= 0) {
            uint64_t v47 = v72;
          }
          else {
            uint64_t v47 = *(_BYTE **)v72;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v46;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&_BYTE buf[20] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v72[23] & 0x80000000) != 0) {
            operator delete(*(void **)v72);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10187D218);
          }
          __int16 v48 = (void *)(a1 + 8);
          uint64_t v49 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v63 >= 0) {
            uint64_t v50 = __p;
          }
          else {
            uint64_t v50 = (void **)__p[0];
          }
          *(_DWORD *)std::string::size_type v72 = 136315650;
          *(void *)&v72[4] = v48;
          *(_WORD *)&v72[12] = 1024;
          *(_DWORD *)&v72[14] = a5;
          *(_WORD *)&_BYTE v72[18] = 2080;
          *(void *)&v72[20] = v50;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v49,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v72,
            28,
            v61);
          uint64_t v52 = v51;
          if (v63 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type:: NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, boo l, int, BOOL) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProx PDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v52);
          if (v52 != buf) {
            free(v52);
          }
        }

        goto LABEL_83;
      }

      uint64_t v64 = v41;
      if (v35 == v33) {
        goto LABEL_60;
      }
      uint64_t v55 = v41[3].n128_i64[0];
      __int128 v53 = v41 + 3;
      __int128 v54 = (__n128 *)v55;
      if (!v55) {
        goto LABEL_60;
      }
      int v56 = *(_DWORD *)(v35 + 32);
      __int128 v57 = v53;
      do
      {
        int v58 = v54[1].n128_i32[3];
        BOOL v59 = v58 < v56;
        if (v58 >= v56) {
          __int128 v60 = v54;
        }
        else {
          __int128 v60 = (__n128 *)&v54->n128_i8[8];
        }
        if (!v59) {
          __int128 v57 = v54;
        }
        __int128 v54 = (__n128 *)v60->n128_u64[0];
      }

      while (v60->n128_u64[0]);
      sub_100CBA2DC((_BYTE *)a1, (uint64_t)&v65, (uint64_t)&v64, v32);
    }

void sub_100CB97D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100CB981C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187D218);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::Noti ficationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, Noti ficationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10187D218);
    }
    __int128 v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187D218);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::Noti ficationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, Noti ficationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        __int128 v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10187D218);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              __int128 v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187D218);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Ty pe::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::No tification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                __int128 v12 = v18;
              }

              while (!v19);
            }

            __int128 v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100CB9DC8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100CBAC54(a1);
  operator delete(v1);
}

id sub_100CB9DDC(uint64_t a1, int a2, void *a3)
{
  id result = sub_100CBA408(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100CB9E28(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CB9E54(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

CLCppContainer *sub_100CB9E80(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *uint64_t v2 = *(_OWORD *)a1;
  v2[1] = v3;
  *((void *)v2 + 4) = *(void *)(a1 + 32);
  uint64_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472LL;
  __int128 v7 = sub_100CBA3F8;
  int v8 = &unk_10181D3D0;
  uint64_t v9 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100CB9F08(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          __int128 v12 = (uint64_t *)v4;
        }
        else {
          __int128 v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        std::stringbuf v51 = v9;
        id v13 = sub_100CBA408(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        __int128 v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_100CBA2DC(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              std::stringbuf v51 = v29;
              uint64_t v34 = v29[6];
              __int128 v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    unint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    unint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      __int128 v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  BOOL v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      __int128 v14 = v43;
                      BOOL v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      __int128 v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10187D218);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                __int128 v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10187D218);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                __int128 v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                __int16 v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::No tificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notifica tion_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNot ifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_100CBA2DC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    __int128 v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100CBA408(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    __int128 v14 = (int *)(*(void *)a2 + 32LL);
    __int128 v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100CBA3B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10187D348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CBA3CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10187D348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_100CBA3F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100CBA408(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100CBA480(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100CBA808(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100CBA480(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100CBABB4((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    __int128 v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101359230LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101359230LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  __int128 v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationD ata, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100CBA808(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    __int128 v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101359230LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101359230LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_10187D388);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  __int128 v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationD ata, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100CBABB4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D44A8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)40) {
      sub_101269FB8();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100CBAC28(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100CBAC54(uint64_t a1)
{
  *(void *)a1 = &off_10187D3B8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_100CBACB4(uint64_t a1)
{
  id v2 = operator new(0x28uLL);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *id v2 = *(_OWORD *)a1;
  v2[1] = v3;
  *((void *)v2 + 4) = *(void *)(a1 + 32);
  uint64_t v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472LL;
  __int128 v7 = sub_100CBAD3C;
  uint64_t v8 = &unk_10181D3D0;
  uint64_t v9 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100CBAD3C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_100CBAD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_101359278;
  *(_OWORD *)(a1 + 16) = unk_101359288;
  *(_OWORD *)(a1 + 32) = xmmword_101359298;
  *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)&xmmword_101359298 + 12);
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 224) = xmmword_101359358;
  *(_OWORD *)(a1 + 24sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = unk_101359368;
  *(_OWORD *)(a1 + 256) = xmmword_101359378;
  *(_OWORD *)(a1 + 272) = unk_101359388;
  *(_OWORD *)(a1 + 16sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = xmmword_101359318;
  *(_OWORD *)(a1 + 176) = unk_101359328;
  *(_OWORD *)(a1 + 192) = xmmword_101359338;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = unk_101359348;
  *(_OWORD *)(a1 + 96) = xmmword_1013592D8;
  *(_OWORD *)(a1 + 112) = unk_1013592E8;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = xmmword_1013592F8;
  *(_OWORD *)(a1 + 144) = unk_101359308;
  *(_OWORD *)(a1 + 64) = xmmword_1013592B8;
  *(_OWORD *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = unk_1013592C8;
  *(_OWORD *)(a1 + 36sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 392) = a2;
  *(void *)(a1 + 40sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = a3;
  *(void *)(a1 + 432) = 0LL;
  *(_WORD *)(a1 + 44sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  *(_WORD *)(a1 + 424) = 0;
  sub_10059E648(a1 + 448, a2);
  sub_100999DC4(a1 + 3120, 10LL);
  sub_100999DC4(a1 + 3176, 10LL);
  sub_100999DC4(a1 + 3232, 10LL);
  *(_OWORD *)(a1 + 328_Block_object_dispose(va, 8) = 0u;
  uint64_t v4 = sub_1006E27E8();
  sub_100413284(v4, &v15);
  uint64_t v5 = (unsigned __int8 *)(a1 + 424);
  if (sub_1002A6F64(v15, "MotionLoggerLogRunningForm", (BOOL *)(a1 + 424)))
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v6 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_INFO))
    {
      int v7 = *v5;
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = "MotionLoggerLogRunningForm";
      __int16 v23 = 1024;
      int v24 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[FormController] MSL Logging: %s: %d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      int v12 = *v5;
      int v17 = 136315394;
      int v18 = "MotionLoggerLogRunningForm";
      __int16 v19 = 1024;
      int v20 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  1LL,  "[FormController] MSL Logging: %s: %d",  (const char *)&v17,  18);
      unint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLRunning::FormController::FormController(const CLNatalieInput<CLElevationChangeEntry> &, CLRunningFormHealthKitWriter *)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  uint64_t v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return a1;
}

void sub_100CBB058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100CBB0C8(void *a1)
{
  return a1;
}

void *sub_100CBB134(void *a1)
{
  a1[51] = 0LL;
  sub_100210578(a1 + 405);
  sub_100210578(a1 + 398);
  sub_100210578(a1 + 391);
  sub_100C69D48(a1 + 383);
  nullsub_10((char *)a1 + 3063);
  sub_1005A8D88(a1 + 99);
  sub_1005A8CF4(a1 + 93);
  sub_100231C10(a1 + 87);
  sub_100231C10(a1 + 81);
  sub_100210A00(a1 + 75);
  sub_100210A00(a1 + 69);
  sub_100210A00(a1 + 63);
  sub_1003580A0(a1 + 43);
  sub_10046CA00(a1 + 37);
  return a1;
}

uint64_t sub_100CBB1CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001B9A1C();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 3300) != 2) {
      *(void *)(a1 + 40_Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

void sub_100CBB208(uint64_t a1, uint64_t a2)
{
  if (sub_1001B9A1C() && *(_DWORD *)(a1 + 3300) != 2)
  {
    int v5 = sub_100BEF640(a2);
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v6 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      sub_100BEF7EC(*(void *)(a2 + 16), &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      id v8 = objc_msgSend( +[CMWorkout workoutName:](CMWorkout, "workoutName:", *(void *)(a2 + 112)),  "UTF8String");
      *(_DWORD *)uint64_t buf = 136446722;
      uint64_t v36 = p_p;
      __int16 v37 = 2082;
      id v38 = v8;
      __int16 v39 = 2050;
      uint64_t v40 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[FormController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}s,labelState,%{public}ld,",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      uint64_t v24 = qword_101934748;
      int v25 = &v32;
      sub_100BEF7EC(*(void *)(a2 + 16), &v32);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      id v26 = objc_msgSend( +[CMWorkout workoutName:](CMWorkout, "workoutName:", *(void *)(a2 + 112)),  "UTF8String");
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v34 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  2LL,  "[FormController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}s,labelState,%{public}ld,",  &__p,  32);
      int v28 = v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v28);
    }

    if (v5)
    {
      __int128 v9 = *(_OWORD *)a2;
      __int128 v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 64) = v9;
      __int128 v11 = *(_OWORD *)(a2 + 48);
      __int128 v12 = *(_OWORD *)(a2 + 64);
      __int128 v13 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 16sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v13;
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v12;
      __int128 v14 = *(_OWORD *)(a2 + 112);
      __int128 v15 = *(_OWORD *)(a2 + 128);
      __int128 v16 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 224) = v16;
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 192) = v15;
      __int128 v17 = *(_OWORD *)(a2 + 176);
      __int128 v18 = *(_OWORD *)(a2 + 192);
      __int128 v19 = *(_OWORD *)(a2 + 208);
      *(void *)(a1 + 28_Block_object_dispose(va, 8) = *(void *)(a2 + 224);
      *(_OWORD *)(a1 + 256) = v18;
      *(_OWORD *)(a1 + 272) = v19;
      *(_OWORD *)(a1 + 24sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v17;
      if (sub_100A178EC(a1 + 64))
      {
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_10187D3D0);
        }
        int v20 = (os_log_s *)qword_101934748;
        if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "[FormController] Beginning outdoor run",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934740 != -1) {
            dispatch_once(&qword_101934740, &stru_10187D3D0);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v31) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  1LL,  "[FormController] Beginning outdoor run",  &__p,  v31);
          int v30 = (uint8_t *)v29;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v29);
          if (v30 != buf) {
            free(v30);
          }
        }

        sub_100CBB7D4(a1);
      }

      else
      {
        sub_100CBBAE0((_BYTE *)a1);
      }
    }
  }

  else
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v4 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004F2598();
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v36) = sub_1001B9A1C();
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[FormController] Form Metrics not available (supportBoltRunning=%d)",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      uint64_t v21 = qword_101934748;
      sub_1004F2598();
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_1001B9A1C();
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v21,  0LL,  "[FormController] Form Metrics not available (supportBoltRunning=%d)",  &__p);
      __int16 v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

void sub_100CBB79C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CBB7D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 425)) {
    goto LABEL_15;
  }
  if (*(void *)(a1 + 408))
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    id v2 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[FormController] Enabling FormMetrics sources",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  0LL,  "[FormController] Enabling FormMetrics sources",  v9,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRunning::FormController::enableFormMetrics()", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    (*(void (**)(void))(**(void **)(a1 + 408) + 16LL))(*(void *)(a1 + 408));
    *(_BYTE *)(a1 + 425) = 1;
    sub_100CBCC74(a1);
    sub_10059E64C(a1 + 448);
  }

  else
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    __int128 v3 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[FormController] Cannot enable FormMetrics, no DM source specified",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  16LL,  "[FormController] Cannot enable FormMetrics, no DM source specified",  v9,  2);
      id v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLRunning::FormController::enableFormMetrics()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  if (*(_BYTE *)(a1 + 425))
  {
LABEL_15:
    uint64_t v4 = *(void *)(a1 + 408);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 32LL))(v4);
    }
  }

_BYTE *sub_100CBBAE0(_BYTE *result)
{
  if (result[425])
  {
    uint64_t v1 = result;
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    id v2 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[FormController] Disabling Form sources, resetting state",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  0LL,  "[FormController] Disabling Form sources, resetting state",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRunning::FormController::disableFormMetrics()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    v1[425] = 0;
    sub_100CBCA80(v1);
    uint64_t result = (_BYTE *)*((void *)v1 + 51);
    if (result) {
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(void *)result + 24LL))(result);
    }
  }

  return result;
}

void *sub_100CBBC98(uint64_t a1, __int128 *a2)
{
  uint64_t result = (void *)sub_1001B9A1C();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 3300) != 2)
    {
      __int128 v5 = *a2;
      __int128 v6 = a2[1];
      __int128 v7 = a2[2];
      *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)a2 + 44);
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)a1 = v5;
      return memmove((void *)(a1 + 2976), a2, 0x3CuLL);
    }
  }

  return result;
}

void sub_100CBBD00(uint64_t a1, uint64_t a2)
{
  if (!sub_100A178EC(a1 + 64))
  {
    sub_100CBBAE0((_BYTE *)a1);
    return;
  }

  sub_100CBB7D4(a1);
  sub_10046CDA4((void *)(a1 + 296), (__int128 *)a2);
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a1 + 416);
  if (v4 - v5 < 0.0)
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    __int128 v6 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a1 + 416);
      *(_DWORD *)uint64_t buf = 134349312;
      uint64_t v22 = v7;
      __int16 v23 = 2050;
      uint64_t v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[FormController] #warning: Time Rollback: %{public}f->%{public}f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a1 + 416);
      int v17 = 134349312;
      uint64_t v18 = v9;
      __int16 v19 = 2050;
      uint64_t v20 = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  1LL,  "[FormController] #warning: Time Rollback: %{public}f->%{public}f",  &v17,  22);
      __int128 v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedStepCountEntry(const CLStepCountEntry &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    goto LABEL_19;
  }

  if (v5 == 0.0 || v4 - v5 >= 5.0)
  {
    sub_100CBC018(a1, (void *)(a1 + 296));
LABEL_19:
    double v4 = *(double *)(a2 + 8);
    *(double *)(a1 + 416) = v4;
  }

  uint64_t v13 = *(void *)(a1 + 336);
  if (v13)
  {
    double v14 = v4 + -46.08;
    do
    {
      unint64_t v15 = *(void *)(a1 + 328);
      uint64_t v16 = (v15 * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      if (*(double *)(*(void *)(*(void *)(a1 + 304) + 8 * ((v16 + ((v15 - v16) >> 1)) >> 4))
                     + 176 * (v15 - 23 * ((v16 + ((v15 - v16) >> 1)) >> 4))
                     + 8) >= v14)
        break;
      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v15 + 1;
      *(void *)(a1 + 336) = v13 - 1;
      sub_100ABDAF8(a1 + 296, 1);
      uint64_t v13 = *(void *)(a1 + 336);
    }

    while (v13);
  }

void sub_100CBC018(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[5];
  if (!v3)
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    unint64_t v15 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[FormController] No steps in queue, cannot compute Form Metrics",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  16LL,  "[FormController] No steps in queue, cannot compute Form Metrics",  &v47,  2);
    goto LABEL_49;
  }

  unint64_t v5 = a2[4];
  unint64_t v6 = v3 + v5 - 1;
  unint64_t v7 = v6 / 0x17;
  unint64_t v8 = v6 % 0x17;
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  double v67 = *(double *)(*(void *)(v9 + 8 * v7) + 176 * v8 + 8) + -5.12;
  if (v10 == v9)
  {
    uint64_t v11 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v13 = (void *)(v9 + 8 * ((v5 + v3) / 0x17));
  }

  else
  {
    uint64_t v11 = *(void *)(v9 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
    unint64_t v12 = v5 + v3;
    uint64_t v13 = (void *)(v9 + 8 * (v12 / 0x17));
    uint64_t v14 = *v13 + 176 * (v12 % 0x17);
  }

  LOBYTE(v47) = 0;
  sub_1005AACEC((void *)(v9 + 8 * (v5 / 0x17)), v11, v13, v14, &v67);
  uint64_t v18 = a2[1];
  if (a2[2] == v18)
  {
    unint64_t v20 = 0LL;
  }

  else
  {
    unint64_t v19 = a2[5] + a2[4];
    unint64_t v20 = *(void *)(v18 + 8 * (v19 / 0x17)) + 176 * (v19 % 0x17);
  }

  if (v20 == v17)
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v22 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[FormController] Not enough steps in queue",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  16LL,  "[FormController] Not enough steps in queue",  &v47,  2);
LABEL_49:
    int v30 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRunning::FormController::computeFormMetrics(const StepQueue &, const DeviceMotionQueue &)",  "%s\n",  v16);
    if (v30 != buf) {
      free(v30);
    }
LABEL_26:
    sub_100CBD394(a1);
    return;
  }

  double v50 = 0.0;
  uint64_t v51 = 0LL;
  int v52 = 0;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  int32x2_t v56 = vdup_n_s32(0x3E8u);
  int v55 = 0;
  int v57 = 1000;
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  uint64_t v58 = 0LL;
  int8x16_t v64 = 0u;
  __int128 v65 = 0u;
  double v47 = v67;
  sub_1005A4B98(a1 + 448, a2, (uint64_t)&v41, v67);
  LODWORD(vsub_100C69D48(v2 + 51) = v41;
  double v66 = sub_100940428(v43 * 0.5, 0.01);
  double v48 = v66;
  *((void *)&v53 + 1) = v46;
  *(double *)&__int128 v54 = v42 * 0.5;
  char v61 = v45;
  int8x16_t v63 = vextq_s8(v44, v44, 8uLL);
  sub_1005A6304(a1 + 448, a2, (uint64_t)v38, v67);
  double v49 = v38[0] * 1000.0;
  *(double *)&__int128 v65 = v38[0] * 1000.0;
  HIDWORD(vsub_100C69D48(v2 + 51) = v39;
  int8x16_t v62 = vextq_s8(v40, v40, 8uLL);
  if ((v39 & 0x100) != 0) {
    sub_100CBD878(a1, (uint64_t)&v47, 0);
  }
  sub_1005A3FE4(a1 + 448, a2, (uint64_t)&v34, v67);
  int v52 = v34;
  double v50 = v35;
  *((double *)&v65 + 1) = v35;
  *(void *)&__int128 v53 = v37;
  int8x16_t v64 = vextq_s8(v36, v36, 8uLL);
  if (*(_BYTE *)(*(void *)(a1 + 392) + 80LL))
  {
    sub_100CBD988(a1, (uint64_t)&v47, 1);
    sub_100CBD988(a1, (uint64_t)&v47, 2);
    sub_100CBD988(a1, (uint64_t)&v47, 0);
  }

  else
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    __int16 v23 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[FormController] Cannot determine grade, ElevationSource not active",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      v33[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  16LL,  "[FormController] Cannot determine grade, ElevationSource not active",  v33,  2);
      std::string v32 = (uint8_t *)v31;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLRunning::FormController::computeFormMetrics(const StepQueue &, const DeviceMotionQueue &)",  "%s\n",  v31);
      if (v32 != buf) {
        free(v32);
      }
    }
  }

  sub_100CBDCB4(a1, (uint64_t)&v47, 1, v21);
  sub_100CBDCB4(a1, (uint64_t)&v47, 2, v24);
  sub_100CBDCB4(a1, (uint64_t)&v47, 0, v25);
  id v26 = (unint64_t *)(a1 + 3232);
  if ((v51 & 0xFFFFFFBF) != 0)
  {
    sub_100999E3C((uint64_t)v26);
    *(_DWORD *)(a1 + 3296) = 0;
  }

  else
  {
    sub_100999DDC(v26, v48);
  }

  if (!HIDWORD(v51) || HIDWORD(v51) == 256 || HIDWORD(v51) == 64)
  {
    sub_100999DDC((unint64_t *)(a1 + 3120), v49);
  }

  else
  {
    sub_100999E3C(a1 + 3120);
    *(_DWORD *)(a1 + 328_Block_object_dispose(va, 8) = 0;
  }

  uint64_t v27 = (unint64_t *)(a1 + 3176);
  if ((v52 & 0xFFFFFFBF) != 0)
  {
    uint64_t v28 = sub_100999E3C((uint64_t)v27);
    *(_DWORD *)(a1 + 3292) = 0;
  }

  else
  {
    sub_100999DDC(v27, v50);
  }

  sub_100CBD49C(v28, (uint64_t *)&v47);
  sub_100CBD790(a1, (uint64_t)&v47);
  sub_100CBD3D4((id *)a1, (uint64_t)&v47);
  uint64_t v29 = *(void *)(a1 + 408);
  if (v29) {
    (*(void (**)(uint64_t, double *))(*(void *)v29 + 40LL))(v29, &v47);
  }
}

void sub_100CBC758(uint64_t a1, uint64_t a2)
{
  if (sub_1001B9A1C() && *(_DWORD *)(a1 + 3300) != 2)
  {
    uint64_t v4 = *(void *)(a1 + 384);
    if (v4)
    {
      double v5 = *(double *)(a2 + 40)
         - *(double *)(*(void *)(*(void *)(a1 + 352) + 8 * ((v4 + *(void *)(a1 + 376) - 1) / 0x49uLL))
                     + 56 * ((v4 + *(void *)(a1 + 376) - 1) % 0x49uLL)
                     + 40);
      if (v5 < 0.0 || v5 > 1.0)
      {
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_10187D3D0);
        }
        unint64_t v7 = (os_log_s *)qword_101934748;
        if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a2 + 40);
          unint64_t v9 = *(void *)(a1 + 384) + *(void *)(a1 + 376) - 1LL;
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 352) + 8 * (v9 / 0x49)) + 56 * (v9 % 0x49) + 40);
          *(_DWORD *)uint64_t buf = 134349312;
          uint64_t v22 = v8;
          __int16 v23 = 2050;
          uint64_t v24 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[FormController] #warning: unexpected change in timestamp (%{public}.2f->%{public}.2f)",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934740 != -1) {
            dispatch_once(&qword_101934740, &stru_10187D3D0);
          }
          uint64_t v12 = *(void *)(a2 + 40);
          unint64_t v13 = *(void *)(a1 + 384) + *(void *)(a1 + 376) - 1LL;
          uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 352) + 8 * (v13 / 0x49)) + 56 * (v13 % 0x49) + 40);
          int v17 = 134349312;
          uint64_t v18 = v12;
          __int16 v19 = 2050;
          uint64_t v20 = v14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  0LL,  "[FormController] #warning: unexpected change in timestamp (%{public}.2f->%{public}.2f)",  &v17,  22);
          uint64_t v16 = (uint8_t *)v15;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedDeviceMotion(const CLWorkoutPredictorDMInput &)",  "%s\n",  v15);
          if (v16 != buf) {
            free(v16);
          }
        }

        sub_100CBCA80((void *)a1);
      }
    }

    sub_100CBCB54((void *)(a1 + 344), a2);
    sub_10059EA3C(a1 + 448, (void *)(a1 + 344), (void *)(a1 + 296));
    unint64_t v11 = *(void *)(a1 + 384);
    if (v11 >= 0x501)
    {
      do
      {
        ++*(void *)(a1 + 376);
        *(void *)(a1 + 384) = v11 - 1;
        sub_10079E85C(a1 + 344, 1);
        unint64_t v11 = *(void *)(a1 + 384);
      }

      while (v11 > 0x500);
    }
  }

void sub_100CBCA80(void *a1)
{
  a1[52] = 0LL;
  id v2 = (void **)a1[38];
  uint64_t v3 = a1[39];
  a1[42] = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[39];
      id v2 = (void **)(a1[38] + 8LL);
      a1[38] = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 11LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 23LL;
  }

  a1[41] = v6;
LABEL_8:
  unint64_t v7 = (void **)a1[44];
  uint64_t v8 = a1[45];
  a1[48] = 0LL;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a1[45];
      unint64_t v7 = (void **)(a1[44] + 8LL);
      a1[44] = v7;
      unint64_t v9 = v10 - (void)v7;
    }

    while (v9 > 0x10);
  }

  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 36LL;
    goto LABEL_14;
  }

  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 73LL;
LABEL_14:
    a1[47] = v11;
  }

  sub_10059E83C((uint64_t)(a1 + 56));
}

__n128 sub_100CBCB54(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CBDFD8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v10 = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_100CBCC10(uint64_t a1, void *a2)
{
  return sub_10059EA30(a1 + 448, a2);
}

uint64_t sub_100CBCC18(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1001B9A1C();
  return result;
}

uint64_t sub_100CBCC74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 408);
  if (v2)
  {
    std::string __p = 0LL;
    unint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 48LL))(v2, &__p);
    if ((v3 & 1) != 0)
    {
      sub_1005A3AC0(a1 + 448, (uint64_t *)&__p);
    }

    else
    {
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      uint64_t v5 = (os_log_s *)qword_101934748;
      if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[FormController] CLStrideCal database query failed, unable to calibrate StrideLength",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_10187D3D0);
        }
        v11[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  16LL,  "[FormController] CLStrideCal database query failed, unable to calibrate StrideLength",  v11,  2);
        __int128 v10 = (uint8_t *)v9;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLRunning::FormController::calibrateStrideLength()", "%s\n", v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }

    if (__p)
    {
      unint64_t v13 = __p;
      operator delete(__p);
    }
  }

  else
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v4 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[FormController] No delegate, cannot calibrate StrideLength",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  16LL,  "[FormController] No delegate, cannot calibrate StrideLength",  &__p,  2);
      unint64_t v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLRunning::FormController::calibrateStrideLength()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    return 0LL;
  }

  return v3;
}

void sub_100CBCF88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CBCFB0(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if ((a3 & 0xFE) == 2)
  {
    *(CFAbsoluteTime *)(a1 + 432) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(a1 + 44sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = a3;
    *(_BYTE *)(a1 + 441) = a4;
  }

  if (qword_101934740 != -1) {
    dispatch_once(&qword_101934740, &stru_10187D3D0);
  }
  unint64_t v8 = (os_log_s *)qword_101934748;
  if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 432);
    char v10 = *(_BYTE *)(a1 + 440);
    char v11 = *(_BYTE *)(a1 + 441);
    *(_DWORD *)uint64_t buf = 134218752;
    uint64_t v26 = v9;
    __int16 v27 = 2048;
    uint64_t v28 = a2;
    __int16 v29 = 256;
    char v30 = v10;
    __int16 v31 = 256;
    char v32 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "gesture %f (%llul) - state: %hhu type: %hhu\n",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v12 = *(void *)(a1 + 432);
    char v13 = *(_BYTE *)(a1 + 440);
    char v14 = *(_BYTE *)(a1 + 441);
    int v17 = 134218752;
    uint64_t v18 = v12;
    __int16 v19 = 2048;
    uint64_t v20 = a2;
    __int16 v21 = 256;
    char v22 = v13;
    __int16 v23 = 256;
    char v24 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  1LL,  "gesture %f (%llul) - state: %hhu type: %hhu\n",  COERCE_DOUBLE(&v17),  28);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedWakeGesture(uint64_t, CMSPU::GestureState, CMSPU::GestureType)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

void sub_100CBD1D8(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 3300) != a2)
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v4 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[FormController] Setting ActivityMoveMode: %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      v7[0] = 67240192;
      v7[1] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  1LL,  "[FormController] Setting ActivityMoveMode: %{public}d",  v7,  8);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    *(_DWORD *)(a1 + 330sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = a2;
  }

double sub_100CBD394(uint64_t a1)
{
  double result = 0.0;
  *(void *)(a1 + 328_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 3296) = 0;
  return result;
}

id *sub_100CBD3D4(id *result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(a2 + 32) & 0xFFFFFFBF) == 0)
  {
    uint64_t v4 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *(double *)(a2 + 56));
    double result = (id *)[v3[50] writeToHealthRunningStrideLength:v4 startDate:v4 endDate:*(double *)(a2 + 8)];
  }

  int v5 = *(_DWORD *)(a2 + 36);
  if (!v5 || v5 == 256 || v5 == 64)
  {
    uint64_t v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *(double *)a2);
    double result = (id *)[v3[50] writeToHealthRunningGroundContactTime:v6 startDate:v6 endDate:*(double *)(a2 + 16)];
  }

  if ((*(_DWORD *)(a2 + 40) & 0xFFFFFFBF) == 0)
  {
    +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *(double *)(a2 + 48));
    return (id *)_objc_msgSend( v3[50],  "writeToHealthRunningVerticalOscillation:startDate:endDate:",  *(double *)(a2 + 24));
  }

  return result;
}

void sub_100CBD49C(uint64_t a1, uint64_t *a2)
{
  if (qword_101934740 != -1) {
    dispatch_once(&qword_101934740, &stru_10187D3D0);
  }
  uint64_t v3 = (os_log_s *)qword_101934748;
  if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    int v6 = *((_DWORD *)a2 + 8);
    int v7 = *((_DWORD *)a2 + 9);
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    int v10 = *((_DWORD *)a2 + 10);
    uint64_t v11 = a2[7];
    uint64_t v12 = a2[8];
    int v13 = *((_DWORD *)a2 + 18);
    int v14 = *((_DWORD *)a2 + 21);
    uint64_t v15 = a2[12];
    uint64_t v17 = a2[16];
    uint64_t v16 = a2[17];
    uint64_t v18 = a2[6];
    *(_DWORD *)uint64_t buf = 134352640;
    uint64_t v67 = v4;
    __int16 v68 = 2048;
    uint64_t v69 = v5;
    __int16 v70 = 1026;
    int v71 = v6;
    __int16 v72 = 2048;
    uint64_t v73 = v8;
    __int16 v74 = 1026;
    int v75 = v7;
    __int16 v76 = 2048;
    uint64_t v77 = v9;
    __int16 v78 = 1026;
    int v79 = v10;
    __int16 v80 = 2048;
    uint64_t v81 = v12;
    __int16 v82 = 1026;
    int v83 = v13;
    __int16 v84 = 1026;
    int v85 = v14;
    __int16 v86 = 2048;
    uint64_t v87 = v15;
    __int16 v88 = 2048;
    uint64_t v89 = v16;
    __int16 v90 = 2048;
    uint64_t v91 = v17;
    __int16 v92 = 2050;
    uint64_t v93 = v11;
    __int16 v94 = 2050;
    uint64_t v95 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "FormMetrics,gctWindowEndTime,%{public}.2f,strideLength,%.2f,rejectionStatus,%{public}d,groundContactTime,%.2f,reje ctionStatus,%{public}d,verticalOscillation,%.2f,rejectionStatus,%{public}d,strideLengthUncalibrated,%.2f,gctGradeT ype,%{public}d,gctGradeSource,%{public}d,gctGrade,%.2f,gctCadence,%.2f,gctPace,%.2f,slWindowEndTime,%{public}.2f,v oWindowEndTime,%{public}.2f",  buf,  0x84u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v19 = *a2;
    uint64_t v20 = a2[1];
    int v21 = *((_DWORD *)a2 + 8);
    int v22 = *((_DWORD *)a2 + 9);
    uint64_t v23 = a2[2];
    uint64_t v24 = a2[3];
    int v25 = *((_DWORD *)a2 + 10);
    uint64_t v26 = a2[7];
    uint64_t v27 = a2[8];
    int v28 = *((_DWORD *)a2 + 18);
    int v29 = *((_DWORD *)a2 + 21);
    uint64_t v30 = a2[12];
    uint64_t v32 = a2[16];
    uint64_t v31 = a2[17];
    uint64_t v33 = a2[6];
    int v36 = 134352640;
    uint64_t v37 = v19;
    __int16 v38 = 2048;
    uint64_t v39 = v20;
    __int16 v40 = 1026;
    int v41 = v21;
    __int16 v42 = 2048;
    uint64_t v43 = v23;
    __int16 v44 = 1026;
    int v45 = v22;
    __int16 v46 = 2048;
    uint64_t v47 = v24;
    __int16 v48 = 1026;
    int v49 = v25;
    __int16 v50 = 2048;
    uint64_t v51 = v27;
    __int16 v52 = 1026;
    int v53 = v28;
    __int16 v54 = 1026;
    int v55 = v29;
    __int16 v56 = 2048;
    uint64_t v57 = v30;
    __int16 v58 = 2048;
    uint64_t v59 = v31;
    __int16 v60 = 2048;
    uint64_t v61 = v32;
    __int16 v62 = 2050;
    uint64_t v63 = v26;
    __int16 v64 = 2050;
    uint64_t v65 = v33;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  0LL,  "FormMetrics,gctWindowEndTime,%{public}.2f,strideLength,%.2f,rejectionStatus,%{public}d,groundContactTime,%.2f,reje ctionStatus,%{public}d,verticalOscillation,%.2f,rejectionStatus,%{public}d,strideLengthUncalibrated,%.2f,gctGradeT ype,%{public}d,gctGradeSource,%{public}d,gctGrade,%.2f,gctCadence,%.2f,gctPace,%.2f,slWindowEndTime,%{public}.2f,v oWindowEndTime,%{public}.2f",  &v36,  132);
    double v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::logFormMetricsResult(const FormMetrics &) const",  "%s\n",  v34);
    if (v35 != buf) {
      free(v35);
    }
  }

void sub_100CBD790(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 424))
  {
    sub_10116FD40(a2, v8);
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10187D3F0);
    }
    uint64_t v2 = qword_1019A1D08;
    if (qword_1019A1D08)
    {
      uint64_t v3 = operator new(0xE8uLL);
      sub_1011AC238((uint64_t)v3, (uint64_t)v8);
      uint64_t v7 = v4;
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100B50D14(v2, &v7, Current);
      uint64_t v6 = v7;
      uint64_t v7 = 0LL;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      }
    }

    PB::Base::~Base((PB::Base *)v8);
  }

void sub_100CBD844(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CBD878(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 2:
      double v6 = sub_100999E68((void *)(a1 + 3232));
      if (v6 <= 0.0 || *(int *)(a1 + 3296) > 4)
      {
        *(_DWORD *)(a2 + 32) |= 0x80u;
      }

      else
      {
        *(double *)(a2 + _Block_object_dispose(va, 8) = sub_100940428(v6, 0.01);
        ++*(_DWORD *)(a1 + 3296);
      }

      break;
    case 1:
      double v7 = sub_100999E68((void *)(a1 + 3176));
      if (v7 <= 0.0 || *(int *)(a1 + 3292) > 4)
      {
        *(_DWORD *)(a2 + 40) |= 0x80u;
      }

      else
      {
        *(double *)(a2 + 24) = sub_100940428(v7, 0.001);
        ++*(_DWORD *)(a1 + 3292);
      }

      break;
    case 0:
      double v5 = sub_100999E68((void *)(a1 + 3120));
      if (v5 <= 0.0 || *(int *)(a1 + 3288) > 4)
      {
        *(_DWORD *)(a2 + 36) |= 0x80u;
      }

      else
      {
        *(double *)(a2 + 16) = sub_100940428(v5, 1.0);
        ++*(_DWORD *)(a1 + 3288);
      }

      break;
  }

void sub_100CBD988(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  DWORD2(v16) = 1000;
  LODWORD(v17) = -1082130432;
  double v5 = (double *)a2;
  if (a3)
  {
    if (a3 == 1) {
      double v5 = (double *)(a2 + 48);
    }
    else {
      double v5 = (double *)(a2 + 56);
    }
  }

  if ((sub_1005A579C((uint64_t)&v14, *(void **)(a1 + 392), *v5) & 1) == 0)
  {
    if (a3 == 2) {
      goto LABEL_40;
    }
LABEL_11:
    if (a3 == 1)
    {
      *(_DWORD *)(a2 + 40) |= 4u;
    }

    else if (!a3)
    {
      *(_DWORD *)(a2 + 36) |= 4u;
    }

    return;
  }

  if (a3 == 2)
  {
    double v6 = (double *)(a2 + 144);
  }

  else if (a3 == 1)
  {
    double v6 = (double *)(a2 + 160);
  }

  else
  {
    if (a3) {
      return;
    }
    double v6 = (double *)(a2 + 128);
  }

  if (*v6 > 0.0)
  {
    int v7 = DWORD2(v15);
    double v9 = sub_100A178C4(1.0 / *v6 * 2.23693991, *(double *)&v16 * 2.23693991);
    int v10 = DWORD2(v16);
    if (a3 == 2)
    {
      *(double *)(a2 + 112) = v9;
      *(_DWORD *)(a2 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v7;
      *(_DWORD *)(a2 + 92) = v10;
    }

    else if (a3 == 1)
    {
      *(double *)(a2 + 104) = v9;
      *(_DWORD *)(a2 + 76) = v7;
      *(_DWORD *)(a2 + 8_Block_object_dispose(va, 8) = v10;
    }

    else
    {
      *(double *)(a2 + 96) = v9;
      *(_DWORD *)(a2 + 72) = v7;
      *(_DWORD *)(a2 + 84) = v10;
    }

    if (v7 == 3)
    {
      if (v9 >= 0.0) {
        return;
      }
    }

    else
    {
      if (v7 != 1)
      {
        if (!v7)
        {
          if (qword_101934740 != -1) {
            dispatch_once(&qword_101934740, &stru_10187D3D0);
          }
          uint64_t v11 = (os_log_s *)qword_101934748;
          if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349312;
            uint64_t v23 = *((void *)&v14 + 1);
            __int16 v24 = 1026;
            int v25 = DWORD2(v16);
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[FormController] Unable to determine grade -- startTime,%{public}.2f,source,%{public}d",  buf,  0x12u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934740 != -1) {
              dispatch_once(&qword_101934740, &stru_10187D3D0);
            }
            int v18 = 134349312;
            uint64_t v19 = *((void *)&v14 + 1);
            __int16 v20 = 1026;
            int v21 = DWORD2(v16);
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] Unable to determine grade -- startTime,%{public}.2f,source,%{public}d",  &v18,  18,  (void)v14);
            int v13 = (uint8_t *)v12;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::checkExcessiveGrade(FormMetrics &, FormMetricType) const",  "%s\n",  v12);
            if (v13 != buf) {
              free(v13);
            }
          }
        }

        return;
      }

      if (v9 <= 0.0) {
        return;
      }
    }

    if (!sub_100CBDF3C(v9, v8, a3)) {
      return;
    }
    if (a3 == 2)
    {
LABEL_40:
      *(_DWORD *)(a2 + 32) |= 4u;
      return;
    }

    goto LABEL_11;
  }

void sub_100CBDCB4(uint64_t a1, uint64_t a2, int a3, double a4)
{
  switch(a3)
  {
    case 2:
      a4 = *(double *)(a2 + 56);
      break;
    case 1:
      a4 = *(double *)(a2 + 48);
      break;
    case 0:
      a4 = *(double *)a2;
      break;
  }

  double v7 = *(double *)(a1 + 432);
  double v8 = a4 + -10.24;
  double v9 = a4 + 5.12;
  BOOL v10 = v7 > v8 && v7 < v9;
  if (v10 && (*(_BYTE *)(a1 + 440) & 0xFE) == 2)
  {
    if (qword_101934740 != -1) {
      dispatch_once(&qword_101934740, &stru_10187D3D0);
    }
    uint64_t v11 = (os_log_s *)qword_101934748;
    if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 432);
      *(_DWORD *)uint64_t buf = 67109376;
      int v21 = a3;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[FormController] Suppresing metric: %d, glanceTime: %.2f",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_10187D3D0);
      }
      uint64_t v13 = *(void *)(a1 + 432);
      v17[0] = 67109376;
      v17[1] = a3;
      __int16 v18 = 2048;
      uint64_t v19 = v13;
      LODWORD(v16) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] Suppresing metric: %d, glanceTime: %.2f",  v17,  v16);
      __int128 v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRunning::FormController::checkForGlances(FormMetrics &, FormMetricType)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    switch(a3)
    {
      case 2:
        *(_DWORD *)(a2 + 32) |= 0x40u;
        break;
      case 1:
        *(_DWORD *)(a2 + 40) |= 0x40u;
        break;
      case 0:
        *(_DWORD *)(a2 + 36) |= 0x40u;
        break;
    }

    sub_100CBD878(a1, a2, a3);
  }

BOOL sub_100CBDF3C(double a1, uint64_t a2, int a3)
{
  BOOL v3 = a1 > 9.0;
  if (a1 <= 0.0) {
    BOOL v3 = a1 < -9.0;
  }
  BOOL v4 = a1 > 9.0;
  if (a1 <= 0.0) {
    BOOL v4 = a1 < -9.0;
  }
  BOOL v5 = a1 > 9.0;
  if (a1 <= 0.0) {
    BOOL v5 = a1 < -9.0;
  }
  if (a3) {
    BOOL v5 = 0;
  }
  if (a3 != 1) {
    BOOL v4 = v5;
  }
  if (a3 == 2) {
    return v3;
  }
  else {
    return v4;
  }
}

void sub_100CBDFA8(id a1)
{
  qword_101934748 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

void sub_100CBDFD8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    double v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000071BC(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100CBE2A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CBE2EC(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  size_t v3 = 156LL * a2;
  size_t v4 = 560LL * a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = malloc(v3);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = malloc(v4);
  *(void *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = dispatch_data_create(v5, v3, 0LL, _dispatch_data_destructor_free);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = dispatch_data_create( *(const void **)(a1 + 32),  *(void *)(a1 + 16),  0LL,  _dispatch_data_destructor_free);
  return a1;
}

uint64_t sub_100CBE384(uint64_t a1, const void *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  size_t v6 = 156LL * a3;
  size_t v7 = 560LL * a3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  *(void *)(a1 + 16) = v7;
  double v8 = malloc(v6);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = malloc(v7);
  *(void *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = dispatch_data_create(v8, v6, 0LL, _dispatch_data_destructor_free);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = dispatch_data_create( *(const void **)(a1 + 32),  *(void *)(a1 + 16),  0LL,  _dispatch_data_destructor_free);
  memcpy(*(void **)(a1 + 24), a2, *(void *)(a1 + 8));
  if (a3)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = a3;
    do
    {
      memcpy((void *)(*(void *)(a1 + 32) + v9), &unk_1013593A0, 0x230uLL);
      v9 += 560LL;
      --v10;
    }

    while (v10);
  }

  return a1;
}

uint64_t sub_100CBE474(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = 0LL;
    do
    {
      size_t v7 = (_OWORD *)(*(void *)(a1 + 24) + v6);
      __int128 v8 = *(_OWORD *)(v4 + v6 + 16);
      _OWORD *v7 = *(_OWORD *)(v4 + v6);
      v7[1] = v8;
      __int128 v9 = *(_OWORD *)(v4 + v6 + 32);
      __int128 v10 = *(_OWORD *)(v4 + v6 + 48);
      __int128 v11 = *(_OWORD *)(v4 + v6 + 80);
      _DWORD v7[4] = *(_OWORD *)(v4 + v6 + 64);
      void v7[5] = v11;
      _OWORD v7[2] = v9;
      void v7[3] = v10;
      __int128 v12 = *(_OWORD *)(v4 + v6 + 96);
      __int128 v13 = *(_OWORD *)(v4 + v6 + 112);
      __int128 v14 = *(_OWORD *)(v4 + v6 + 128);
      *(_OWORD *)((char *)v7 + 14sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_OWORD *)(v4 + v6 + 140);
      void v7[7] = v13;
      _WORD v7[8] = v14;
      void v7[6] = v12;
      v6 += 156LL;
    }

    while (v4 + v6 != v5);
    if (a2[1] != *a2)
    {
      unint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      do
      {
        memcpy((void *)(*(void *)(a1 + 32) + v16), &unk_1013593A0, 0x230uLL);
        v16 += 560LL;
        ++v15;
      }

      while (v15 < 0x6F96F96F96F96F97LL * ((a2[1] - *a2) >> 2));
    }
  }

  return a1;
}

void *sub_100CBE580(void *a1)
{
  unint64_t v2 = (dispatch_object_s *)a1[5];
  if (v2)
  {
    dispatch_release(v2);
  }

  else
  {
    size_t v3 = (void *)a1[3];
    if (v3) {
      free(v3);
    }
  }

  uint64_t v4 = (dispatch_object_s *)a1[6];
  if (v4)
  {
    dispatch_release(v4);
  }

  else
  {
    uint64_t v5 = (void *)a1[4];
    if (v5) {
      free(v5);
    }
  }

  return a1;
}

__n128 sub_100CBE5DC@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = *(void *)(a1 + 24) + 156 * a2;
    __int128 v7 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a3 + 112) = v7;
    *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a3 + 14sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_OWORD *)(v6 + 140);
    __int128 v8 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v8;
    __int128 v9 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a3 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v9;
    __n128 result = *(__n128 *)v6;
    __int128 v11 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v6;
    *(_OWORD *)(a3 + 16) = v11;
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10187D430);
    }
    __int128 v12 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      unint64_t v21 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "#batchedlocations,requested location index %{public}zu but buffer is empty, return default value",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10187D430);
      }
      int v18 = 134349056;
      unint64_t v19 = a2;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#batchedlocations,requested location index %{public}zu but buffer is empty, return default value",  &v18,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLDaemonLocation CLBatchedLocations::daemonLocationForIndex(size_t) const",  "%s\n",  v17);
    }

    *(_DWORD *)a3 = 0xFFFF;
    *(void *)(a3 + 12) = 0LL;
    *(void *)(a3 + 4) = 0LL;
    *(_OWORD *)(a3 + 2sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = xmmword_1012E0070;
    __asm { FMOV            V0.2D, #-1.0 }

    *(__n128 *)(a3 + 36) = result;
    *(__n128 *)(a3 + 52) = result;
    *(__n128 *)(a3 + 6_Block_object_dispose(va, 8) = result;
    *(_DWORD *)(a3 + 84) = 0;
    *(void *)(a3 + 96) = 0LL;
    *(void *)(a3 + 104) = 0LL;
    *(void *)(a3 + 8_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
    *(_DWORD *)(a3 + 112) = 0;
    *(void *)(a3 + 116) = 0xBFF0000000000000LL;
    *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
    *(void *)(a3 + 136) = 0LL;
    *(void *)(a3 + 144) = 0LL;
    *(void *)(a3 + 12_Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(a3 + 152) = 0;
  }

  return result;
}

int *sub_100CBE830(int *result, unint64_t a2)
{
  if (*result <= a2)
  {
    size_t v3 = result;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10187D430);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *v3;
      *(_DWORD *)uint64_t buf = 68290051;
      int v11 = 0;
      __int16 v12 = 2082;
      __int128 v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v5;
      __int16 v18 = 2082;
      unint64_t v19 = "assert";
      __int16 v20 = 2081;
      unint64_t v21 = "index < fNumEntries";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:out of bounds index entry in #batchedlocations, index:%{public}ld, batchedLocatio nsSize:%{public}ld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10187D430);
      }
    }

    uint64_t v6 = (os_log_s *)qword_101934838;
    if (os_signpost_enabled((os_log_t)qword_101934838))
    {
      uint64_t v7 = *v3;
      *(_DWORD *)uint64_t buf = 68290051;
      int v11 = 0;
      __int16 v12 = 2082;
      __int128 v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v7;
      __int16 v18 = 2082;
      unint64_t v19 = "assert";
      __int16 v20 = 2081;
      unint64_t v21 = "index < fNumEntries";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "out of bounds index entry in #batchedlocations",  "{msg%{public}.0s:out of bounds index entry in #batchedlocations, index:%{public}ld, batchedLocatio nsSize:%{public}ld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10187D430);
      }
    }

    __int128 v8 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *v3;
      *(_DWORD *)uint64_t buf = 68290051;
      int v11 = 0;
      __int16 v12 = 2082;
      __int128 v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v9;
      __int16 v18 = 2082;
      unint64_t v19 = "assert";
      __int16 v20 = 2081;
      unint64_t v21 = "index < fNumEntries";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:out of bounds index entry in #batchedlocations, index:%{public}ld, batchedLocatio nsSize:%{public}ld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLBatchedLocations.cpp",  177,  "assertNotOutOfBounds");
  }

  return result;
}

void sub_100CBEAEC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    sub_10086A0D8(a3, *(void *)(a1 + 32) + 560 * a2);
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10187D430);
    }
    uint64_t v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      unint64_t v11 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "#batchedlocations,requested location private index %{public}zu but buffer is empty, return default value",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10187D430);
      }
      int v8 = 134349056;
      unint64_t v9 = a2;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  16LL,  "#batchedlocations,requested location private index %{public}zu but buffer is empty, return default value",  &v8,  12);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLDaemonLocationPrivate CLBatchedLocations::daemonLocationPrivateForIndex(size_t) const",  "%s\n",  v7);
    }

    sub_100869DC8(a3);
  }

__n128 sub_100CBECF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24) + 156 * a3;
  __int128 v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  __int128 v8 = *(_OWORD *)(a2 + 32);
  __int128 v9 = *(_OWORD *)(a2 + 48);
  __int128 v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v10;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 4_Block_object_dispose(va, 8) = v9;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v12 = *(_OWORD *)(a2 + 112);
  __int128 v13 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 14sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 12_Block_object_dispose(va, 8) = v13;
  *(__n128 *)(v6 + 96) = result;
  return result;
}

uint64_t sub_100CBED60(int *a1)
{
  return *a1;
}

BOOL sub_100CBED68(int *a1, int a2)
{
  int v2 = *a1;
  if (*a1 >= a2) {
    *a1 = a2;
  }
  return v2 >= a2;
}

void sub_100CBED84(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100CBFC58(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = (void *)PBReaderReadData(a2);

      *(void *)(a1 + _Block_object_dispose(va, 8) = Data;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_42;
          }
          v19 += 7;
          BOOL v9 = v20++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v24 = 20LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v24 = 16LL;
      }

      *(_DWORD *)(a1 + v24) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100CC0268(uint64_t a1, __int128 *a2, uint64_t *a3, double a4)
{
  double v13 = a4;
  sub_100400554(a1, a3, &v13);
  *(void *)a1 = off_10187D490;
  unint64_t v6 = (_OWORD *)(a1 + 232);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 232), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v7 = *a2;
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = *((void *)a2 + 2);
    *unint64_t v6 = v7;
  }

  if (sub_1003C1048(a1 + 64))
  {
    char v8 = (char *)(a1 + 232);
    sub_1003B59A0(a1 + 64, v8, (const char **)&qword_10199D5E8, 0LL, 0);
    sub_100400684(a1);
  }

  else
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
    BOOL v9 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning CLWifiHarvestDatabase is not valid; not initializing! Please add retry logic if needed!",
        buf,
        2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      __int16 v12 = 0;
      unint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  0LL,  "#Warning CLWifiHarvestDatabase is not valid; not initializing! Please add retry logic if needed!",
                      &v12,
                      2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiHarvestDatabase::CLWifiHarvestDatabase(std::string, const CLSqliteDatabase::SqliteProperties &, double)",  "%s\n",  v11);
    }
  }

  return a1;
}

void sub_100CC0490(_Unwind_Exception *a1)
{
}

char *sub_100CC04C8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 29), *((void *)result + 30));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(void *)(a2 + 16) = *((void *)result + 31);
  return result;
}

uint64_t sub_100CC04F4(uint64_t a1, uint64_t a2)
{
  if (sub_100400B64(a1))
  {
    sub_10000CE18((uint64_t)v59);
    char v4 = sub_10000CF44(&v60, (uint64_t)"INSERT OR REPLACE INTO ", 23LL);
    unsigned int v5 = (const char *)(a1 + 232);
    size_t v6 = strlen(v5);
    __int128 v7 = sub_10000CF44(v4, (uint64_t)v5, v6);
    char v8 = sub_10000CF44(v7, (uint64_t)"(", 3LL);
    BOOL v9 = sub_10000CF44(v8, (uint64_t)"MAC", 3LL);
    int v10 = sub_10000CF44(v9, (uint64_t)",", 1LL);
    unint64_t v11 = sub_10000CF44(v10, (uint64_t)"Channel", 7LL);
    __int16 v12 = sub_10000CF44(v11, (uint64_t)",", 1LL);
    double v13 = sub_10000CF44(v12, (uint64_t)"Rssi", 4LL);
    unsigned int v14 = sub_10000CF44(v13, (uint64_t)",", 1LL);
    uint64_t v15 = sub_10000CF44(v14, (uint64_t)"ScanTimestamp", 13LL);
    unint64_t v16 = sub_10000CF44(v15, (uint64_t)",", 1LL);
    size_t v17 = strlen("Timestamp");
    __int16 v18 = sub_10000CF44(v16, (uint64_t)"Timestamp", v17);
    char v19 = sub_10000CF44(v18, (uint64_t)",", 1LL);
    size_t v20 = strlen("Latitude");
    unint64_t v21 = sub_10000CF44(v19, (uint64_t)"Latitude", v20);
    char v22 = sub_10000CF44(v21, (uint64_t)",", 1LL);
    size_t v23 = strlen("Longitude");
    uint64_t v24 = sub_10000CF44(v22, (uint64_t)"Longitude", v23);
    unint64_t v25 = sub_10000CF44(v24, (uint64_t)",", 1LL);
    size_t v26 = strlen("HorizontalAccuracy");
    uint64_t v27 = sub_10000CF44(v25, (uint64_t)"HorizontalAccuracy", v26);
    uint64_t v28 = sub_10000CF44(v27, (uint64_t)",", 1LL);
    size_t v29 = strlen("Altitude");
    __int128 v30 = sub_10000CF44(v28, (uint64_t)"Altitude", v29);
    __int128 v31 = sub_10000CF44(v30, (uint64_t)",", 1LL);
    size_t v32 = strlen("VerticalAccuracy");
    unint64_t v33 = sub_10000CF44(v31, (uint64_t)"VerticalAccuracy", v32);
    int v34 = sub_10000CF44(v33, (uint64_t)",", 1LL);
    double v35 = sub_10000CF44(v34, (uint64_t)"LoiType", 7LL);
    uint64_t v36 = sub_10000CF44(v35, (uint64_t)") VALUES ", 9LL);
    sub_10000CF44(v36, (uint64_t)"(?,?,?,?,?,?,?,?,?,?,?);", 24LL);
    std::stringbuf::str(&v58, &v61);
    uint64_t v37 = a1 + 64;
    if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v38 = &v58;
    }
    else {
      __int16 v38 = (std::stringbuf::string_type *)v58.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v37, (char *)v38, &v57);
    uint64_t v39 = (sqlite3_stmt *)sub_100019240(v57);
    double v40 = *(double *)(a2 + 12);
    double v41 = *(double *)(a2 + 20);
    double v42 = *(double *)(a2 + 28);
    double v43 = *(double *)(a2 + 36);
    double v44 = *(double *)(a2 + 44);
    double v45 = *(double *)(a2 + 84);
    *(void *)uint64_t buf = *(void *)a2;
    sqlite3_int64 v46 = sub_1005B46E8((uint64_t)buf);
    if (sub_1003C2D24(v39, 1, v46)
      && sub_1003C28BC(v39, 2, *(_DWORD *)(a2 + 164))
      && sub_1003C28BC(v39, 3, *(_DWORD *)(a2 + 168))
      && sub_1003B7480(v39, 4, *(double *)(a2 + 176))
      && sub_1003B7480(v39, 5, v45)
      && sub_1003B7480(v39, 6, v40)
      && sub_1003B7480(v39, 7, v41)
      && sub_1003B7480(v39, 8, v42)
      && sub_1003B7480(v39, 9, v43)
      && sub_1003B7480(v39, 10, v44)
      && sub_1003C28BC(v39, 11, *(_DWORD *)(a2 + 184)))
    {
      sub_1003BB2BC(v37, v39);
      if (sub_1003C10E4(v37) > 0)
      {
        uint64_t v47 = 1LL;
LABEL_32:
        uint64_t v50 = v57;
        uint64_t v57 = 0LL;
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
        }
        *(void *)((char *)v59
        uint64_t v60 = v51;
        std::streambuf::~streambuf(&v61);
        std::ios::~ios(&v62);
        return v47;
      }

      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      __int128 v55 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "Could not successfully insert or replace CLWifiHarvestDatabaseEntry in CLWifiHarvestDatabase!",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0))
      {
LABEL_31:
        uint64_t v47 = 0LL;
        goto LABEL_32;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      v56[0] = 0;
      __int128 v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  16LL,  "Could not successfully insert or replace CLWifiHarvestDatabaseEntry in CLWifiHarvestDatabase!",  v56,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiHarvestDatabase::insertOrReplace(const CLWifiHarvestDatabaseEntry &)",  "%s\n",  v54);
    }

    else
    {
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      uint64_t v49 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Could not bind CLWifiHarvestDatabaseEntry fields when addding to CLWifiHarvestDatabase!",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      v56[0] = 0;
      __int128 v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  16LL,  "Could not bind CLWifiHarvestDatabaseEntry fields when addding to CLWifiHarvestDatabase!",  v56,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiHarvestDatabase::insertOrReplace(const CLWifiHarvestDatabaseEntry &)",  "%s\n",  v54);
    }

    goto LABEL_31;
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10187D4C0);
  }
  __int16 v48 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiHarvestDatabase!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
    LOWORD(v59[0]) = 0;
    int v53 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  2LL,  "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiHarvestDatabase!",  v59,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiHarvestDatabase::insertOrReplace(const CLWifiHarvestDatabaseEntry &)",  "%s\n",  v53);
  }

  return 0LL;
}

void sub_100CC0D54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC0DBC(uint64_t a1, uint64_t a2, double *a3)
{
  if (sub_100400B64(a1))
  {
    sub_10000CE18((uint64_t)buf);
    size_t v6 = sub_10000CF44(&v30, (uint64_t)"DELETE FROM ", 12LL);
    __int128 v7 = (const char *)(a1 + 232);
    size_t v8 = strlen(v7);
    BOOL v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    int v10 = sub_10000CF44(v9, (uint64_t)" WHERE ", 7LL);
    unint64_t v11 = sub_10000CF44(v10, (uint64_t)"MAC", 3LL);
    __int16 v12 = sub_10000CF44(v11, (uint64_t)" = ? AND ", 9LL);
    size_t v13 = strlen("Timestamp");
    unsigned int v14 = sub_10000CF44(v12, (uint64_t)"Timestamp", v13);
    sub_10000CF44(v14, (uint64_t)"< ?;", 4LL);
    std::stringbuf::str(&v28, &v31);
    if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v15 = &v28;
    }
    else {
      uint64_t v15 = (std::stringbuf::string_type *)v28.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(a1 + 64, (char *)v15, &v27);
    uint64_t v16 = v27;
    size_t v17 = (sqlite3_stmt *)sub_100019240(v27);
    sqlite3_int64 v18 = sub_1005B46E8(a2);
    if (sub_1003C2D24(v17, 1, v18)
      && (char v19 = (sqlite3_stmt *)sub_100019240(v16), sub_1003B7480(v19, 2, *a3))
      && (size_t v20 = (sqlite3_stmt *)sub_100019240(v16), j__sqlite3_step(v20) == 101))
    {
      else {
        uint64_t v21 = *(void *)(a1 + 152);
      }
      sub_1003C1EC0(a1 + 64, v21);
      uint64_t v22 = 1LL;
      if (!v16) {
        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
      if (!v16)
      {
LABEL_23:
        uint64_t v30 = v24;
        std::streambuf::~streambuf(&v31);
        std::ios::~ios(&v32);
        return v22;
      }
    }

    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    goto LABEL_23;
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10187D4C0);
  }
  size_t v23 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call deleteByMacAndTimestampLessThan() without a backing database in CLWifiHarvestDatabase!",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    size_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  2LL,  "#Warning Attempt to call deleteByMacAndTimestampLessThan() without a backing database in CLWifiHarvestDatabase!",  &v28,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiHarvestDatabase::deleteByMacAndTimestampLessThan(const CLMacAddress &, const CFAbsoluteTime &)",  "%s\n",  v26);
  }

  return 0LL;
}

void sub_100CC115C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC11B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0x7FEFFFFFFFFFFFFFLL;
  return sub_100CC0DBC(a1, a2, (double *)&v3);
}

uint64_t sub_100CC11D8@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  char v4 = sub_10000CF44(&v42, (uint64_t)"SELECT ", 7LL);
  unsigned int v5 = sub_10000CF44(v4, (uint64_t)"MAC", 3LL);
  size_t v6 = sub_10000CF44(v5, (uint64_t)",", 1LL);
  __int128 v7 = sub_10000CF44(v6, (uint64_t)"Channel", 7LL);
  size_t v8 = sub_10000CF44(v7, (uint64_t)",", 1LL);
  BOOL v9 = sub_10000CF44(v8, (uint64_t)"Rssi", 4LL);
  int v10 = sub_10000CF44(v9, (uint64_t)",", 1LL);
  unint64_t v11 = sub_10000CF44(v10, (uint64_t)"ScanTimestamp", 13LL);
  __int16 v12 = sub_10000CF44(v11, (uint64_t)",", 1LL);
  size_t v13 = strlen("Timestamp");
  unsigned int v14 = sub_10000CF44(v12, (uint64_t)"Timestamp", v13);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)",", 1LL);
  size_t v16 = strlen("Latitude");
  size_t v17 = sub_10000CF44(v15, (uint64_t)"Latitude", v16);
  sqlite3_int64 v18 = sub_10000CF44(v17, (uint64_t)",", 1LL);
  size_t v19 = strlen("Longitude");
  size_t v20 = sub_10000CF44(v18, (uint64_t)"Longitude", v19);
  uint64_t v21 = sub_10000CF44(v20, (uint64_t)",", 1LL);
  size_t v22 = strlen("HorizontalAccuracy");
  size_t v23 = sub_10000CF44(v21, (uint64_t)"HorizontalAccuracy", v22);
  uint64_t v24 = sub_10000CF44(v23, (uint64_t)",", 1LL);
  size_t v25 = strlen("Altitude");
  size_t v26 = sub_10000CF44(v24, (uint64_t)"Altitude", v25);
  uint64_t v27 = sub_10000CF44(v26, (uint64_t)",", 1LL);
  size_t v28 = strlen("VerticalAccuracy");
  size_t v29 = sub_10000CF44(v27, (uint64_t)"VerticalAccuracy", v28);
  uint64_t v30 = sub_10000CF44(v29, (uint64_t)",", 1LL);
  std::stringbuf v31 = sub_10000CF44(v30, (uint64_t)"LoiType", 7LL);
  uint64_t v32 = sub_10000CF44(v31, (uint64_t)" FROM ", 6LL);
  uint64_t v35 = *(void *)(a1 + 232);
  uint64_t v34 = a1 + 232;
  uint64_t v33 = v35;
  int v36 = *(char *)(v34 + 23);
  if (v36 >= 0) {
    uint64_t v37 = v34;
  }
  else {
    uint64_t v37 = v33;
  }
  if (v36 >= 0) {
    uint64_t v38 = *(unsigned __int8 *)(v34 + 23);
  }
  else {
    uint64_t v38 = *(void *)(v34 + 8);
  }
  sub_10000CF44(v32, v37, v38);
  std::stringbuf::str(a2, &v43);
  *(void *)((char *)v41
  uint64_t v42 = v39;
  std::streambuf::~streambuf(&v43);
  return std::ios::~ios(&v44);
}

void sub_100CC14B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100CC14C4(uint64_t a1@<X0>, char **a2@<X8>)
{
  if (sub_100400B64(a1))
  {
    sub_100CC11D8(a1, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(a1 + 64, (char *)p_p, &v79);
    unsigned int v5 = (sqlite3_stmt *)sub_100019240(v79);
    int v6 = j__sqlite3_step(v5);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    if (v6 == 100)
    {
      __asm { FMOV            V0.2D, #-1.0 }

      __int128 v59 = _Q0;
      do
      {
        sqlite3_int64 v12 = sqlite3_column_int64(v5, 0);
        uint64_t v78 = nullsub_10(v12);
        int v13 = sqlite3_column_int(v5, 1);
        int v14 = sqlite3_column_int(v5, 2);
        double v15 = sqlite3_column_double(v5, 3);
        int v60 = 0xFFFF;
        double v61 = 0.0;
        double v62 = 0.0;
        __int128 v63 = xmmword_1012E0070;
        __int128 v64 = v59;
        __int128 v65 = v59;
        __int128 v66 = v59;
        int v67 = 0;
        unint64_t v68 = 0xBFF0000000000000LL;
        uint64_t v69 = 0LL;
        uint64_t v70 = 0LL;
        int v71 = 0;
        unint64_t v72 = 0xBFF0000000000000LL;
        int v73 = 0x7FFFFFFF;
        uint64_t v75 = 0LL;
        uint64_t v76 = 0LL;
        uint64_t v74 = 0LL;
        char v77 = 0;
        *((void *)&v66 + 1) = sqlite3_column_double(v5, 4);
        double v61 = sqlite3_column_double(v5, 5);
        double v62 = sqlite3_column_double(v5, 6);
        *(void *)&__int128 v63 = sqlite3_column_double(v5, 7);
        *((void *)&v63 + 1) = sqlite3_column_double(v5, 8);
        *(void *)&__int128 v64 = sqlite3_column_double(v5, 9);
        int v16 = sqlite3_column_int(v5, 10);
        sub_100B60CDC((uint64_t)buf, &v78, (__int128 *)&v60, v13, v14, v16, v15);
        sqlite3_int64 v18 = a2[1];
        unint64_t v17 = (unint64_t)a2[2];
        if ((unint64_t)v18 >= v17)
        {
          size_t v29 = *a2;
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a2) >> 6);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0x155555555555555LL) {
            sub_100007008();
          }
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v29) >> 6);
          if (2 * v32 > v31) {
            unint64_t v31 = 2 * v32;
          }
          if (v32 >= 0xAAAAAAAAAAAAAALL) {
            unint64_t v33 = 0x155555555555555LL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            uint64_t v34 = (char *)sub_10001DF10((uint64_t)(a2 + 2), v33);
            size_t v29 = *a2;
            sqlite3_int64 v18 = a2[1];
          }

          else
          {
            uint64_t v34 = 0LL;
          }

          uint64_t v35 = &v34[192 * v30];
          __int128 v36 = *(_OWORD *)buf;
          __int128 v37 = v82;
          __int128 v38 = v84;
          *((_OWORD *)v35 + 2) = v83;
          *((_OWORD *)v35 + 3) = v38;
          *(_OWORD *)uint64_t v35 = v36;
          *((_OWORD *)v35 + 1) = v37;
          __int128 v39 = v85;
          __int128 v40 = v86;
          __int128 v41 = v88;
          *((_OWORD *)v35 + 6) = v87;
          *((_OWORD *)v35 + 7) = v41;
          *((_OWORD *)v35 + 4) = v39;
          *((_OWORD *)v35 + 5) = v40;
          __int128 v42 = v89;
          __int128 v43 = v90;
          __int128 v44 = v92;
          *((_OWORD *)v35 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v91;
          *((_OWORD *)v35 + 11) = v44;
          *((_OWORD *)v35 + _Block_object_dispose(va, 8) = v42;
          *((_OWORD *)v35 + 9) = v43;
          if (v18 == v29)
          {
            __int128 v55 = &v34[192 * v30];
          }

          else
          {
            double v45 = &v34[192 * v30];
            do
            {
              __int128 v46 = *((_OWORD *)v18 - 12);
              __int128 v47 = *((_OWORD *)v18 - 11);
              __int128 v48 = *((_OWORD *)v18 - 9);
              *((_OWORD *)v45 - 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *((_OWORD *)v18 - 10);
              *((_OWORD *)v45 - 9) = v48;
              *((_OWORD *)v45 - 12) = v46;
              *((_OWORD *)v45 - 11) = v47;
              __int128 v49 = *((_OWORD *)v18 - 8);
              __int128 v50 = *((_OWORD *)v18 - 7);
              __int128 v51 = *((_OWORD *)v18 - 5);
              *((_OWORD *)v45 - 6) = *((_OWORD *)v18 - 6);
              *((_OWORD *)v45 - 5) = v51;
              *((_OWORD *)v45 - _Block_object_dispose(va, 8) = v49;
              *((_OWORD *)v45 - 7) = v50;
              __int128 v52 = *((_OWORD *)v18 - 4);
              __int128 v53 = *((_OWORD *)v18 - 3);
              __int128 v54 = *((_OWORD *)v18 - 1);
              __int128 v55 = v45 - 192;
              *((_OWORD *)v45 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v45 - 1) = v54;
              *((_OWORD *)v45 - 4) = v52;
              *((_OWORD *)v45 - 3) = v53;
              v18 -= 192;
              v45 -= 192;
            }

            while (v18 != v29);
          }

          size_t v28 = v35 + 192;
          *a2 = v55;
          a2[1] = v35 + 192;
          a2[2] = &v34[192 * v33];
          if (v29) {
            operator delete(v29);
          }
        }

        else
        {
          __int128 v19 = *(_OWORD *)buf;
          __int128 v20 = v82;
          __int128 v21 = v84;
          *((_OWORD *)v18 + 2) = v83;
          *((_OWORD *)v18 + 3) = v21;
          *(_OWORD *)sqlite3_int64 v18 = v19;
          *((_OWORD *)v18 + 1) = v20;
          __int128 v22 = v85;
          __int128 v23 = v86;
          __int128 v24 = v88;
          *((_OWORD *)v18 + 6) = v87;
          *((_OWORD *)v18 + 7) = v24;
          *((_OWORD *)v18 + 4) = v22;
          *((_OWORD *)v18 + 5) = v23;
          __int128 v25 = v89;
          __int128 v26 = v90;
          __int128 v27 = v92;
          *((_OWORD *)v18 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v91;
          *((_OWORD *)v18 + 11) = v27;
          *((_OWORD *)v18 + _Block_object_dispose(va, 8) = v25;
          *((_OWORD *)v18 + 9) = v26;
          size_t v28 = v18 + 192;
        }

        a2[1] = v28;
      }

      while (sqlite3_step(v5) == 100);
    }

    uint64_t v56 = v79;
    uint64_t v79 = 0LL;
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
    }
  }

  else
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
    uint64_t v57 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call getAllEntries() without a backing database in CLWifiHarvestDatabase!",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      LOWORD(v6sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
      std::stringbuf::string_type v58 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934A28,  2LL,  "#Warning Attempt to call getAllEntries() without a backing database in CLWifiHarvestDatabase!",  &v60,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLWifiHarvestDatabaseEntry> CLWifiHarvestDatabase::getAllEntries()",  "%s\n",  v58);
    }

    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

void sub_100CC19C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CC1A3C(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  if (sub_100400B64(a1))
  {
    sub_100CC11D8(a1, &v85);
    int v6 = std::string::append(&v85, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    *(void *)&v69[16] = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)uint64_t v69 = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    size_t v8 = std::string::append((std::string *)v69, "MAC");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(void *)&v88[16] = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 v88 = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    int v10 = std::string::append((std::string *)v88, " = ? ");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t cap = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::stringbuf::string_type __p = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if ((v88[23] & 0x80000000) != 0) {
      operator delete(*(void **)v88);
    }
    if ((v69[23] & 0x80000000) != 0) {
      operator delete(*(void **)v69);
    }
    if (cap >= 0) {
      sqlite3_int64 v12 = (char *)__p;
    }
    else {
      sqlite3_int64 v12 = (char *)__p[0];
    }
    sub_1003C0D54(a1 + 64, v12, &v85);
    int v13 = (sqlite3_stmt *)sub_100019240((uint64_t)v85.__r_.__value_.__l.__data_);
    sqlite3_int64 v14 = sub_1005B46E8((uint64_t)a2);
    if (sub_1003C2D24(v13, 1, v14))
    {
      int v15 = j__sqlite3_step(v13);
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      if (v15 == 100)
      {
        __asm { FMOV            V0.2D, #-1.0 }

        __int128 v68 = _Q0;
        do
        {
          sqlite3_int64 v21 = sqlite3_column_int64(v13, 0);
          uint64_t v84 = nullsub_10(v21);
          if (!sub_1007EC0B0(a2, &v84))
          {
            sub_10126A128();
            abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLWifiHarvestDatabase.mm",  232,  "getEntriesForMac");
            __break(1u);
          }

          int v22 = sqlite3_column_int(v13, 1);
          int v23 = sqlite3_column_int(v13, 2);
          double v24 = sqlite3_column_double(v13, 3);
          *(_DWORD *)uint64_t v69 = 0xFFFF;
          *(_OWORD *)&v69[4] = 0uLL;
          *(_OWORD *)&_BYTE v69[20] = xmmword_1012E0070;
          __int128 v70 = v68;
          __int128 v71 = v68;
          __int128 v72 = v68;
          int v73 = 0;
          unint64_t v74 = 0xBFF0000000000000LL;
          uint64_t v75 = 0LL;
          uint64_t v76 = 0LL;
          int v77 = 0;
          unint64_t v78 = 0xBFF0000000000000LL;
          int v79 = 0x7FFFFFFF;
          uint64_t v81 = 0LL;
          uint64_t v82 = 0LL;
          uint64_t v80 = 0LL;
          char v83 = 0;
          *((void *)&v72 + 1) = sqlite3_column_double(v13, 4);
          *(void *)&v69[4] = sqlite3_column_double(v13, 5);
          *(void *)&v69[12] = sqlite3_column_double(v13, 6);
          *(void *)&_BYTE v69[20] = sqlite3_column_double(v13, 7);
          *(void *)&v69[28] = sqlite3_column_double(v13, 8);
          *(void *)&__int128 v70 = sqlite3_column_double(v13, 9);
          int v25 = sqlite3_column_int(v13, 10);
          sub_100B60CDC((uint64_t)v88, a2, (__int128 *)v69, v22, v23, v25, v24);
          __int128 v27 = a3[1];
          unint64_t v26 = (unint64_t)a3[2];
          if ((unint64_t)v27 >= v26)
          {
            __int128 v38 = *a3;
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v27 - *a3) >> 6);
            unint64_t v40 = v39 + 1;
            if (v39 + 1 > 0x155555555555555LL) {
              sub_100007008();
            }
            unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (void)v38) >> 6);
            if (2 * v41 > v40) {
              unint64_t v40 = 2 * v41;
            }
            if (v41 >= 0xAAAAAAAAAAAAAALL) {
              unint64_t v42 = 0x155555555555555LL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              __int128 v43 = (char *)sub_10001DF10((uint64_t)(a3 + 2), v42);
              __int128 v38 = *a3;
              __int128 v27 = a3[1];
            }

            else
            {
              __int128 v43 = 0LL;
            }

            __int128 v44 = &v43[192 * v39];
            __int128 v45 = *(_OWORD *)v88;
            __int128 v46 = *(_OWORD *)&v88[16];
            __int128 v47 = v90;
            *((_OWORD *)v44 + 2) = v89;
            *((_OWORD *)v44 + 3) = v47;
            *(_OWORD *)__int128 v44 = v45;
            *((_OWORD *)v44 + 1) = v46;
            __int128 v48 = v91;
            __int128 v49 = v92;
            __int128 v50 = v94;
            *((_OWORD *)v44 + 6) = v93;
            *((_OWORD *)v44 + 7) = v50;
            *((_OWORD *)v44 + 4) = v48;
            *((_OWORD *)v44 + 5) = v49;
            __int128 v51 = v95;
            __int128 v52 = v96;
            __int128 v53 = v98;
            *((_OWORD *)v44 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v97;
            *((_OWORD *)v44 + 11) = v53;
            *((_OWORD *)v44 + _Block_object_dispose(va, 8) = v51;
            *((_OWORD *)v44 + 9) = v52;
            if (v27 == v38)
            {
              __int128 v64 = &v43[192 * v39];
            }

            else
            {
              __int128 v54 = &v43[192 * v39];
              do
              {
                __int128 v55 = *((_OWORD *)v27 - 12);
                __int128 v56 = *((_OWORD *)v27 - 11);
                __int128 v57 = *((_OWORD *)v27 - 9);
                *((_OWORD *)v54 - 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *((_OWORD *)v27 - 10);
                *((_OWORD *)v54 - 9) = v57;
                *((_OWORD *)v54 - 12) = v55;
                *((_OWORD *)v54 - 11) = v56;
                __int128 v58 = *((_OWORD *)v27 - 8);
                __int128 v59 = *((_OWORD *)v27 - 7);
                __int128 v60 = *((_OWORD *)v27 - 5);
                *((_OWORD *)v54 - 6) = *((_OWORD *)v27 - 6);
                *((_OWORD *)v54 - 5) = v60;
                *((_OWORD *)v54 - _Block_object_dispose(va, 8) = v58;
                *((_OWORD *)v54 - 7) = v59;
                __int128 v61 = *((_OWORD *)v27 - 4);
                __int128 v62 = *((_OWORD *)v27 - 3);
                __int128 v63 = *((_OWORD *)v27 - 1);
                __int128 v64 = v54 - 192;
                *((_OWORD *)v54 - 2) = *((_OWORD *)v27 - 2);
                *((_OWORD *)v54 - 1) = v63;
                *((_OWORD *)v54 - 4) = v61;
                *((_OWORD *)v54 - 3) = v62;
                v27 -= 192;
                v54 -= 192;
              }

              while (v27 != v38);
            }

            __int128 v37 = v44 + 192;
            *a3 = v64;
            a3[1] = v44 + 192;
            a3[2] = &v43[192 * v42];
            if (v38) {
              operator delete(v38);
            }
          }

          else
          {
            __int128 v28 = *(_OWORD *)v88;
            __int128 v29 = *(_OWORD *)&v88[16];
            __int128 v30 = v90;
            *((_OWORD *)v27 + 2) = v89;
            *((_OWORD *)v27 + 3) = v30;
            *(_OWORD *)__int128 v27 = v28;
            *((_OWORD *)v27 + 1) = v29;
            __int128 v31 = v91;
            __int128 v32 = v92;
            __int128 v33 = v94;
            *((_OWORD *)v27 + 6) = v93;
            *((_OWORD *)v27 + 7) = v33;
            *((_OWORD *)v27 + 4) = v31;
            *((_OWORD *)v27 + 5) = v32;
            __int128 v34 = v95;
            __int128 v35 = v96;
            __int128 v36 = v98;
            *((_OWORD *)v27 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v97;
            *((_OWORD *)v27 + 11) = v36;
            *((_OWORD *)v27 + _Block_object_dispose(va, 8) = v34;
            *((_OWORD *)v27 + 9) = v35;
            __int128 v37 = v27 + 192;
          }

          a3[1] = v37;
        }

        while (sqlite3_step(v13) == 100);
      }
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
    }

    std::string::size_type v66 = v85.__r_.__value_.__r.__words[0];
    v85.__r_.__value_.__r.__words[0] = 0LL;
    if (v66) {
      (*(void (**)(std::string::size_type))(*(void *)v66 + 8LL))(v66);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
    __int128 v65 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 v88 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call getEntriesForMac() without a backing database in CLWifiHarvestDatabase!",  v88,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v88, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10187D4C0);
      }
      *(_WORD *)uint64_t v69 = 0;
      int v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v88,  1628LL,  &_mh_execute_header,  off_101934A28,  2LL,  "#Warning Attempt to call getEntriesForMac() without a backing database in CLWifiHarvestDatabase!",  v69,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLWifiHarvestDatabaseEntry> CLWifiHarvestDatabase::getEntriesForMac(const CLMacAddress &)",  "%s\n",  v67);
      if (v67 != v88) {
        free(v67);
      }
    }

    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

void sub_100CC2050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CC2114(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_100CC14C4(a1, &v47);
  uint64_t v3 = v47;
  char v4 = v48;
  if (v47 != v48)
  {
    do
    {
      uint64_t v46 = *(void *)v3;
      __int128 v49 = &v46;
      unsigned int v5 = sub_100CC241C(a2, &v46, (uint64_t)&unk_1012CF090, &v49);
      int v6 = (_OWORD *)v5[4];
      unint64_t v7 = v5[5];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v18 = v5[3];
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v18) >> 6);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0x155555555555555LL) {
          sub_100007008();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v18) >> 6);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v22 = 0x155555555555555LL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          int v23 = (char *)sub_10001DF10((uint64_t)(v5 + 5), v22);
        }
        else {
          int v23 = 0LL;
        }
        double v24 = &v23[192 * v19];
        __int128 v25 = *(_OWORD *)v3;
        __int128 v26 = *((_OWORD *)v3 + 1);
        __int128 v27 = *((_OWORD *)v3 + 3);
        *((_OWORD *)v24 + 2) = *((_OWORD *)v3 + 2);
        *((_OWORD *)v24 + 3) = v27;
        *(_OWORD *)double v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        __int128 v28 = *((_OWORD *)v3 + 4);
        __int128 v29 = *((_OWORD *)v3 + 5);
        __int128 v30 = *((_OWORD *)v3 + 7);
        *((_OWORD *)v24 + 6) = *((_OWORD *)v3 + 6);
        *((_OWORD *)v24 + 7) = v30;
        *((_OWORD *)v24 + 4) = v28;
        *((_OWORD *)v24 + 5) = v29;
        __int128 v31 = *((_OWORD *)v3 + 8);
        __int128 v32 = *((_OWORD *)v3 + 9);
        __int128 v33 = *((_OWORD *)v3 + 11);
        *((_OWORD *)v24 + 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *((_OWORD *)v3 + 10);
        *((_OWORD *)v24 + 11) = v33;
        *((_OWORD *)v24 + _Block_object_dispose(va, 8) = v31;
        *((_OWORD *)v24 + 9) = v32;
        __int128 v35 = (char *)v5[3];
        __int128 v34 = (char *)v5[4];
        __int128 v36 = v24;
        if (v34 != v35)
        {
          do
          {
            __int128 v37 = *((_OWORD *)v34 - 12);
            __int128 v38 = *((_OWORD *)v34 - 11);
            __int128 v39 = *((_OWORD *)v34 - 9);
            *((_OWORD *)v36 - 1sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = *((_OWORD *)v34 - 10);
            *((_OWORD *)v36 - 9) = v39;
            *((_OWORD *)v36 - 12) = v37;
            *((_OWORD *)v36 - 11) = v38;
            __int128 v40 = *((_OWORD *)v34 - 8);
            __int128 v41 = *((_OWORD *)v34 - 7);
            __int128 v42 = *((_OWORD *)v34 - 5);
            *((_OWORD *)v36 - 6) = *((_OWORD *)v34 - 6);
            *((_OWORD *)v36 - 5) = v42;
            *((_OWORD *)v36 - _Block_object_dispose(va, 8) = v40;
            *((_OWORD *)v36 - 7) = v41;
            __int128 v43 = *((_OWORD *)v34 - 4);
            __int128 v44 = *((_OWORD *)v34 - 3);
            __int128 v45 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v36 - 1) = v45;
            *((_OWORD *)v36 - 4) = v43;
            *((_OWORD *)v36 - 3) = v44;
            v36 -= 192;
            v34 -= 192;
          }

          while (v34 != v35);
          __int128 v34 = (char *)v5[3];
        }

        unint64_t v17 = v24 + 192;
        void v5[3] = v36;
        unsigned __int8 v5[4] = v24 + 192;
        void v5[5] = &v23[192 * v22];
        if (v34) {
          operator delete(v34);
        }
      }

      else
      {
        __int128 v8 = *(_OWORD *)v3;
        __int128 v9 = *((_OWORD *)v3 + 1);
        __int128 v10 = *((_OWORD *)v3 + 3);
        uint64_t v6[2] = *((_OWORD *)v3 + 2);
        void v6[3] = v10;
        *int v6 = v8;
        v6[1] = v9;
        __int128 v11 = *((_OWORD *)v3 + 4);
        __int128 v12 = *((_OWORD *)v3 + 5);
        __int128 v13 = *((_OWORD *)v3 + 7);
        _OWORD v6[6] = *((_OWORD *)v3 + 6);
        void v6[7] = v13;
        _DWORD v6[4] = v11;
        void v6[5] = v12;
        __int128 v14 = *((_OWORD *)v3 + 8);
        __int128 v15 = *((_OWORD *)v3 + 9);
        __int128 v16 = *((_OWORD *)v3 + 11);
        v6[10] = *((_OWORD *)v3 + 10);
        v6[11] = v16;
        _WORD v6[8] = v14;
        v6[9] = v15;
        unint64_t v17 = v6 + 12;
      }

      unsigned __int8 v5[4] = v17;
      v3 += 192;
    }

    while (v3 != v4);
    uint64_t v3 = v47;
  }

  if (v3)
  {
    __int128 v48 = v3;
    operator delete(v3);
  }

void sub_100CC2344( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_100CC2374(uint64_t a1)
{
  *(void *)a1 = off_10187D490;
  return sub_10040063C(a1);
}

void sub_100CC23B0(uint64_t a1)
{
  *(void *)a1 = off_10187D490;
  int v2 = (void *)sub_10040063C(a1);
  operator delete(v2);
}

void sub_100CC23F0(id a1)
{
  off_101934A28 = os_log_create("com.apple.locationd.Utility", "Database");
}

void *sub_100CC241C(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = sub_1005B46E8((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }

    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }

    __int128 v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (sub_1007EC0B0(i + 2, a2)) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }

  __int128 v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0LL;
  i[1] = v9;
  uint64_t v17 = **a4;
  i[4] = 0LL;
  i[5] = 0LL;
  i[2] = v17;
  i[3] = 0LL;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1LL;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100019E10(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }

    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }

  uint64_t v24 = *(void *)a1;
  __int128 v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v16;
  *__int128 v16 = i;
  *(void *)(v24 + 8 * v4) = v16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8LL);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }

    else
    {
      v26 &= v10 - 1;
    }

    __int128 v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }

void sub_100CC2664( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_100CC2680()
{
  qword_10199D5E8 = (uint64_t)"MAC";
  dword_10199D5F0 = 1;
  word_10199D5F4 = 1;
  byte_10199D5F8 = 0;
  byte_10199D610 = 0;
  qword_10199D618 = (uint64_t)"Channel";
  dword_10199D620 = 1;
  word_10199D624 = 0;
  byte_10199D628 = 0;
  byte_10199D640 = 0;
  qword_10199D648 = (uint64_t)"Rssi";
  dword_10199D650 = 1;
  word_10199D654 = 0;
  byte_10199D658 = 0;
  byte_10199D670 = 0;
  qword_10199D678 = (uint64_t)"ScanTimestamp";
  dword_10199D680 = 2;
  word_10199D684 = 0;
  byte_10199D688 = 0;
  byte_10199D6A0 = 0;
  qword_10199D6A8 = (uint64_t)"Timestamp";
  dword_10199D6B0 = 2;
  word_10199D6B4 = 1;
  byte_10199D6B8 = 0;
  byte_10199D6D0 = 0;
  qword_10199D6D8 = (uint64_t)"Latitude";
  dword_10199D6E0 = 2;
  word_10199D6E4 = 0;
  byte_10199D6E8 = 0;
  byte_10199D700 = 0;
  qword_10199D708 = (uint64_t)"Longitude";
  dword_10199D710 = 2;
  word_10199D714 = 0;
  byte_10199D718 = 0;
  byte_10199D730 = 0;
  qword_10199D738 = (uint64_t)"HorizontalAccuracy";
  dword_10199D740 = 2;
  word_10199D744 = 0;
  byte_10199D748 = 0;
  byte_10199D760 = 0;
  qword_10199D768 = (uint64_t)"Altitude";
  dword_10199D770 = 2;
  word_10199D774 = 0;
  byte_10199D778 = 0;
  byte_10199D790 = 0;
  qword_10199D798 = (uint64_t)"VerticalAccuracy";
  dword_10199D7A0 = 2;
  word_10199D7A4 = 0;
  byte_10199D7A8 = 0;
  byte_10199D7C0 = 0;
  qword_10199D7C8 = (uint64_t)"LoiType";
  dword_10199D7D0 = 1;
  word_10199D7D4 = 0;
  byte_10199D7D8 = 0;
  byte_10199D7F0 = 0;
  qword_10199D7F8 = 0LL;
  dword_10199D800 = 5;
  word_10199D804 = 0;
  byte_10199D808 = 0;
  byte_10199D820 = 0;
}

char *sub_100CC27F8(char *__dst, uint64_t a2, __int128 *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)__uuid_t dst = v5;
  }

  *((void *)__dst + 3) = 0LL;
  *((void *)__dst + 4) = 0LL;
  *((void *)__dst + 5) = a2;
  *((void *)__dst + 46) = 0x800000000LL;
  *((void *)__dst + 63) = 0x800000000LL;
  *((void *)__dst + 8sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0x800000000LL;
  *((void *)__dst + 89) = 0x800000000LL;
  *((void *)__dst + 9_Block_object_dispose(va, 8) = 0x800000000LL;
  *((void *)__dst + 107) = 0x800000000LL;
  *((void *)__dst + 116) = 0x800000000LL;
  *((void *)__dst + 125) = 0x800000000LL;
  *((void *)__dst + 13sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0x3200000000LL;
  *((_DWORD *)__dst + 48sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  *((void *)__dst + 234) = 0LL;
  *(_OWORD *)(__dst + 188sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0u;
  *(_OWORD *)(__dst + 192_Block_object_dispose(va, 8) = 0u;
  uint64_t v6 = 1960LL;
  *((void *)__dst + 2sub_1003580A0(v3 + 43) = 0LL;
  do
  {
    unint64_t v7 = &__dst[v6];
    *(void *)unint64_t v7 = 0x800000000LL;
    *((void *)v7 + 17) = 0x800000000LL;
    *((void *)v7 + 3sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
    *((void *)v7 + 27) = 0LL;
    *((void *)v7 + 2_Block_object_dispose(va, 8) = 0LL;
    *((void *)v7 + 26) = 0LL;
    v6 += 248LL;
    *((_DWORD *)v7 + 5_Block_object_dispose(va, 8) = 0;
  }

  while (v7 + 248 != __dst + 2952);
  double v8 = 0.0;
  double v9 = 0.0;
  do
  {
    double v9 = v9 + exp(v8 * -10.0) * 10.0;
    double v8 = v8 + 0.01;
  }

  while (v8 <= 1.0);
  *((double *)__dst + 3) = v9;
  double v10 = 0.0;
  int v11 = 62;
  do
  {
    double v10 = v10 + 0.00000555555556;
    --v11;
  }

  while (v11);
  int v12 = 180;
  do
  {
    double v10 = v10 + 0.00555555556;
    --v12;
  }

  while (v12);
  *((double *)__dst + 4) = v10;
  sub_100CC2968((uint64_t)__dst);
  return __dst;
}

int64x2_t sub_100CC2968(uint64_t a1)
{
  uint64_t v1 = 0LL;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 64sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 92_Block_object_dispose(va, 8) = 0;
  int v2 = (_DWORD *)(a1 + 2192);
  *(_DWORD *)(a1 + 100sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
  do
  {
    *(v2 - 5_Block_object_dispose(va, 8) = 0;
    *(v2 - 24) = 0;
    *((void *)v2 - 2) = 0LL;
    *((void *)v2 - 1) = 0LL;
    *int v2 = v1;
    v1 += 2LL;
    *((void *)v2 - 3) = 0LL;
    v2 += 62;
  }

  while (v1 != 8);
  *(void *)(a1 + 192_Block_object_dispose(va, 8) = 0x7FF8000000000000LL;
  *(int64x2_t *)(a1 + 1936) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 1872) = 0u;
  *(void *)(a1 + 1896) = 0LL;
  *(void *)(a1 + 188_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1952) = 0;
  int64x2_t result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 1904) = result;
  *(void *)(a1 + 184_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 1864) = 0LL;
  *(void *)(a1 + 1856) = 0LL;
  return result;
}

void sub_100CC29FC(uint64_t a1, double a2)
{
  double v4 = 0.0;
  int v5 = 361;
  double v6 = -180.0;
  do
  {
    double v4 = v4 + sub_100DEA714(v6, 0.0, 40.0);
    double v6 = v6 + 1.0;
    --v5;
  }

  while (v5);
  double v7 = sub_100DEA714(a2, 0.0, 40.0) / v4;
  double v8 = dbl_101359660[a2 < 0.0];
  if (a2 < -60.0) {
    double v8 = 0.0;
  }
  log10(v7 / (v8 / *(double *)(a1 + 32)));
}

double sub_100CC2AD0(uint64_t *a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40LL))(a1[5]);
  int v5 = sub_100798BA4(v4, &v49, a2);
  double v6 = *((double *)&v49 + 1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40LL))(a1[5]);
  int v8 = sub_100798BA4(v7, &v36, a2 + 1.0 + 0.5);
  if (v5) {
    BOOL v9 = v6 == -1.0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 1.79769313e308;
  }
  int v10 = *((double *)&v36 + 1) == -1.0 ? 0 : v8;
  if (v10 != 1) {
    return 1.79769313e308;
  }
  double v11 = v51;
  if (vabdd_f64(v51, v41) > 0.001) {
    double v11 = sub_100DEA6D8(a2, v52, v43, v51, v41);
  }
  uint64_t v12 = v48;
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_10187D4E0);
  }
  __int128 v13 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEBUG))
  {
    __int128 v14 = a1;
    int v15 = *((_DWORD *)a1 + 468);
    *(_DWORD *)uint64_t buf = 136318722;
    std::string v85 = v14;
    __int16 v86 = 1024;
    int v87 = v15;
    __int16 v88 = 2080;
    __int128 v89 = "GOOD";
    __int16 v90 = 2048;
    double v91 = v52;
    __int16 v92 = 2048;
    double v93 = v51;
    __int16 v94 = 2048;
    uint64_t v95 = v53;
    __int16 v96 = 2048;
    uint64_t v97 = v50;
    __int16 v98 = 2080;
    std::string::size_type v99 = "GOOD";
    __int16 v100 = 2048;
    double v101 = v43;
    __int16 v102 = 2048;
    double v103 = v41;
    __int16 v104 = 2048;
    uint64_t v105 = v48;
    __int16 v106 = 2048;
    double v107 = v37;
    __int16 v108 = 2048;
    double v109 = a2;
    __int16 v110 = 2048;
    double v111 = v11;
    __int16 v112 = 2048;
    uint64_t v113 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "IndoorOutdoor,context,%s,[%d][gps-current],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[B-%s],t imestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f",  buf,  0x94u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    __int128 v32 = a1;
    int v33 = *((_DWORD *)a1 + 468);
    int v54 = 136318722;
    __int128 v55 = v32;
    __int16 v56 = 1024;
    int v57 = v33;
    __int16 v58 = 2080;
    __int128 v59 = "GOOD";
    __int16 v60 = 2048;
    double v61 = v52;
    __int16 v62 = 2048;
    double v63 = v51;
    __int16 v64 = 2048;
    uint64_t v65 = v53;
    __int16 v66 = 2048;
    uint64_t v67 = v50;
    __int16 v68 = 2080;
    uint64_t v69 = "GOOD";
    __int16 v70 = 2048;
    double v71 = v43;
    __int16 v72 = 2048;
    double v73 = v41;
    __int16 v74 = 2048;
    uint64_t v75 = v48;
    __int16 v76 = 2048;
    double v77 = v37;
    __int16 v78 = 2048;
    double v79 = a2;
    __int16 v80 = 2048;
    double v81 = v11;
    __int16 v82 = 2048;
    uint64_t v83 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  2LL,  "IndoorOutdoor,context,%s,[%d][gps-current],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[B-%s],t imestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f",  (const char *)&v54,  148,  (const char *)v36,  *((double *)&v36 + 1),  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47);
    __int128 v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<double, double> CLIndoorOutdoorGPSModel::getGpsDeltaDistanceAndHeading(const CFAbsoluteTime) const",  "%s\n",  v34);
    if (v35 != buf) {
      free(v35);
    }
  }

  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40LL))(a1[5]);
  int v17 = sub_100798BA4(v16, &v49, a2 + -2.56);
  double v18 = *((double *)&v49 + 1);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 40LL))(a1[5]);
  int v20 = sub_100798BA4(v19, &v36, a2 + -2.56 + 1.0 + 0.5);
  double v21 = 1.79769313e308;
  if (v17 && v18 != -1.0)
  {
    else {
      int v22 = v20;
    }
    if (v22 == 1)
    {
      double v23 = v51;
      if (vabdd_f64(v51, v41) > 0.001) {
        double v23 = sub_100DEA6D8(a2 + -2.56, v52, v43, v51, v41);
      }
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10187D4E0);
      }
      uint64_t v24 = (os_log_s *)qword_101934758;
      if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEBUG))
      {
        __int128 v25 = a1;
        int v26 = *((_DWORD *)a1 + 468);
        *(_DWORD *)uint64_t buf = 136318722;
        std::string v85 = v25;
        __int16 v86 = 1024;
        int v87 = v26;
        __int16 v88 = 2080;
        __int128 v89 = "GOOD";
        __int16 v90 = 2048;
        double v91 = v52;
        __int16 v92 = 2048;
        double v93 = v51;
        __int16 v94 = 2048;
        uint64_t v95 = v53;
        __int16 v96 = 2048;
        uint64_t v97 = v50;
        __int16 v98 = 2080;
        std::string::size_type v99 = "GOOD";
        __int16 v100 = 2048;
        double v101 = v43;
        __int16 v102 = 2048;
        double v103 = v41;
        __int16 v104 = 2048;
        uint64_t v105 = v48;
        __int16 v106 = 2048;
        double v107 = v37;
        __int16 v108 = 2048;
        double v109 = a2;
        __int16 v110 = 2048;
        double v111 = v23;
        __int16 v112 = 2048;
        uint64_t v113 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "IndoorOutdoor,context,%s,[%d][gps-previous],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[B -%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f",  buf,  0x94u);
      }

      double v21 = v11 - v23;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934750 != -1) {
          dispatch_once(&qword_101934750, &stru_10187D4E0);
        }
        __int128 v27 = a1;
        int v28 = *((_DWORD *)a1 + 468);
        int v54 = 136318722;
        __int128 v55 = v27;
        __int16 v56 = 1024;
        int v57 = v28;
        __int16 v58 = 2080;
        __int128 v59 = "GOOD";
        __int16 v60 = 2048;
        double v61 = v52;
        __int16 v62 = 2048;
        double v63 = v51;
        __int16 v64 = 2048;
        uint64_t v65 = v53;
        __int16 v66 = 2048;
        uint64_t v67 = v50;
        __int16 v68 = 2080;
        uint64_t v69 = "GOOD";
        __int16 v70 = 2048;
        double v71 = v43;
        __int16 v72 = 2048;
        double v73 = v41;
        __int16 v74 = 2048;
        uint64_t v75 = v48;
        __int16 v76 = 2048;
        double v77 = v37;
        __int16 v78 = 2048;
        double v79 = a2;
        __int16 v80 = 2048;
        double v81 = v23;
        __int16 v82 = 2048;
        uint64_t v83 = v12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  2LL,  "IndoorOutdoor,context,%s,[%d][gps-previous],[A-%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[B -%s],timestampGps,%f,odometer,%f,gpsHeadingRad,%f,accuracy,%f,[interp],startTime,%f,gpsDistance,%f,gpsHeadingRad,%f",  (const char *)&v54,  148,  (const char *)v36,  *((double *)&v36 + 1),  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47);
        __int128 v30 = (uint8_t *)v29;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<double, double> CLIndoorOutdoorGPSModel::getGpsDeltaDistanceAndHeading(const CFAbsoluteTime) const",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      return v21;
    }

    return 1.79769313e308;
  }

  return v21;
}

void *sub_100CC323C(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 1876) = a2[8];
  return memcpy((void *)(a1 + 48), a2, 0x140uLL);
}

void sub_100CC3250(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(a1 + 304);
  uint64_t v81 = 0LL;
  double v82 = 0.0;
  double v83 = 0.0;
  double v84 = 2.84809454e-306;
  uint64_t v85 = 0LL;
  double v86 = 0.0;
  __int128 v87 = xmmword_1012E1EA0;
  uint64_t v88 = 0x80000000800000LL;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 56LL))(*(void *)(a1 + 40));
  int v9 = sub_100798CD4(v8, (uint64_t)&v81, v6 + -15.0);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)(a1 + 786);
    unint64_t v11 = *(unsigned int *)(a1 + 788);
    uint64_t v12 = *(unsigned __int16 *)(a1 + 784);
    if (v12 + v10 >= v11) {
      uint64_t v13 = *(unsigned int *)(a1 + 788);
    }
    else {
      uint64_t v13 = 0LL;
    }
    *(double *)(a1 + 784 + 8 * (v12 + v10 - v13) + _Block_object_dispose(va, 8) = *((float *)&v87 + 2);
    if (v11 <= v10)
    {
      if (v12 + 1 < v11) {
        LOWORD(v11) = 0;
      }
      *(_WORD *)(a1 + 784) = v12 + 1 - v11;
    }

    else
    {
      *(_WORD *)(a1 + 786) = v10 + 1;
    }

    double v18 = *((float *)&v82 + 1);
  }

  else
  {
    uint64_t v14 = *(unsigned __int16 *)(a1 + 786);
    unint64_t v15 = *(unsigned int *)(a1 + 788);
    uint64_t v16 = *(unsigned __int16 *)(a1 + 784);
    if (v16 + v14 >= v15) {
      uint64_t v17 = *(unsigned int *)(a1 + 788);
    }
    else {
      uint64_t v17 = 0LL;
    }
    *(void *)(a1 + 784 + 8 * (v16 + v14 - v17) + _Block_object_dispose(va, 8) = 0LL;
    if (v15 <= v14)
    {
      if (v16 + 1 < v15) {
        LOWORD(v15) = 0;
      }
      *(_WORD *)(a1 + 784) = v16 + 1 - v15;
    }

    else
    {
      *(_WORD *)(a1 + 786) = v14 + 1;
    }

    double v18 = 0.0;
  }

  double v19 = sub_100CC2AD0((uint64_t *)a1, v6);
  double v21 = v20;
  sub_100CC3D28( a1,  *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 1876),  v7,  v18,  v19,  v20,  *(double *)(a1 + 1880),  *(double *)(a1 + 1888),  v6,  a3);
  *(_DWORD *)(a1 + 1876) = *(_DWORD *)(a1 + 80);
  *(double *)(a1 + 188sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v18;
  *(double *)(a1 + 188_Block_object_dispose(va, 8) = v21;
  int v22 = (double *)((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32LL))(*(void *)(a1 + 40)) + 96);
  if (*v22 != -1.0) {
    memcpy((void *)(a1 + 48), v22, 0x140uLL);
  }
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_10187D4E0);
  }
  double v23 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = a1;
    int v25 = *(_DWORD *)(a1 + 1872);
    uint64_t v26 = *(void *)(a1 + 48);
    int v27 = *(_DWORD *)(a1 + 80);
    uint64_t v28 = *(void *)(a1 + 88);
    uint64_t v29 = *(void *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 136316418;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = v25;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(void *)&_BYTE buf[20] = v26;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)&_BYTE buf[30] = v27;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = v28;
    *(_WORD *)__int16 v110 = 2048;
    *(void *)&v110[2] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "IndoorOutdoor,context,%s,[%d][step],startTime,%f,stepCount,%u,stepDistance,%f,rawStepDistance,%f,",  buf,  0x36u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    uint64_t v53 = a1;
    int v54 = *(_DWORD *)(a1 + 1872);
    uint64_t v55 = *(void *)(a1 + 48);
    int v56 = *(_DWORD *)(a1 + 80);
    uint64_t v57 = *(void *)(a1 + 88);
    uint64_t v58 = *(void *)(a1 + 96);
    int v89 = 136316418;
    uint64_t v90 = v53;
    __int16 v91 = 1024;
    *(_DWORD *)__int16 v92 = v54;
    *(_WORD *)&v92[4] = 2048;
    *(void *)&v92[6] = v55;
    *(_WORD *)&v92[14] = 1024;
    *(_DWORD *)&v92[16] = v56;
    *(_WORD *)&v92[20] = 2048;
    *(void *)&v92[22] = v57;
    *(_WORD *)double v93 = 2048;
    *(void *)&v93[2] = v58;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  2LL,  "IndoorOutdoor,context,%s,[%d][step],startTime,%f,stepCount,%u,stepDistance,%f,rawStepDistance,%f,",  (const char *)&v89,  54,  v76,  LODWORD(v77),  v78,  v79);
    __int16 v60 = (char *)v59;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)",  "%s\n",  v59);
    if (v60 != buf) {
      free(v60);
    }
  }

  if (v9)
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    __int128 v30 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = a1;
      int v32 = *(_DWORD *)(a1 + 1872);
      *(_DWORD *)uint64_t buf = 136315906;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v32;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&_BYTE buf[20] = v81;
      *(_WORD *)&_BYTE buf[28] = 2048;
      *(double *)&_BYTE buf[30] = *((float *)&v82 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "IndoorOutdoor,context,%s[%d][turn-recv],startTime,%f,gyroHeadingRad,%f",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10187D4E0);
      }
      uint64_t v33 = a1;
      int v34 = *(_DWORD *)(a1 + 1872);
      int v89 = 136315906;
      uint64_t v90 = v33;
      __int16 v91 = 1024;
      *(_DWORD *)__int16 v92 = v34;
      *(_WORD *)&v92[4] = 2048;
      *(void *)&v92[6] = v81;
      *(_WORD *)&v92[14] = 2048;
      *(double *)&v92[16] = *((float *)&v82 + 1);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  2LL,  "IndoorOutdoor,context,%s[%d][turn-recv],startTime,%f,gyroHeadingRad,%f",  (const char *)&v89,  38,  v76,  v77);
      __int128 v36 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)",  "%s\n",  v35);
LABEL_86:
      if (v36 != buf) {
        free(v36);
      }
    }
  }

  else
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    double v37 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v38 = a1;
      int v39 = *(_DWORD *)(a1 + 1872);
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = v39;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(double *)&_BYTE buf[20] = v6 + -15.0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "IndoorOutdoor,context,%s,[%d][turn-none],requestedSampleTime,%f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10187D4E0);
      }
      uint64_t v72 = a1;
      int v73 = *(_DWORD *)(a1 + 1872);
      int v89 = 136315650;
      uint64_t v90 = v72;
      __int16 v91 = 1024;
      *(_DWORD *)__int16 v92 = v73;
      *(_WORD *)&v92[4] = 2048;
      *(double *)&v92[6] = v6 + -15.0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  2LL,  "IndoorOutdoor,context,%s,[%d][turn-none],requestedSampleTime,%f",  (const char *)&v89,  28,  v76);
      __int128 v36 = (char *)v74;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)",  "%s\n",  v74);
      goto LABEL_86;
    }
  }

  *(double *)uint64_t buf = v19;
  *(double *)&uint8_t buf[8] = v7;
  sub_100483268((unsigned __int16 *)(a1 + 1040), buf);
  double v40 = sub_100CC4408(a1);
  sub_100CC44BC(a1, (uint64_t)&v77);
  double v41 = v77;
  *(double *)a2 = v40;
  *(double *)(a2 + _Block_object_dispose(va, 8) = v41;
  int v42 = *(_DWORD *)(a1 + 1872);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 1952);
  *(_DWORD *)(a2 + 2sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v42;
  if (qword_101934750 != -1) {
    dispatch_once(&qword_101934750, &stru_10187D4E0);
  }
  double v43 = (os_log_s *)qword_101934758;
  if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_INFO))
  {
    uint64_t v44 = a1;
    uint64_t v45 = *(void *)&v19;
    uint64_t v46 = *(void *)(a1 + 1944);
    if (v19 >= 9999.0) {
      uint64_t v45 = 0x40C3878000000000LL;
    }
    unint64_t v47 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    unint64_t v48 = *(unsigned int *)(a1 + 372);
    if (v47 < v48) {
      unint64_t v48 = 0LL;
    }
    uint64_t v49 = a1 + 368 + 16 * (v47 - v48);
    uint64_t v51 = *(void *)(v49 + 8);
    uint64_t v50 = *(void *)(v49 + 16);
    int v52 = *(_DWORD *)(a1 + 1952);
    *(_DWORD *)uint64_t buf = 136318210;
    *(void *)&uint8_t buf[4] = v44;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(double *)&_BYTE buf[14] = v7;
    *(_WORD *)&_BYTE buf[22] = 2048;
    *(void *)&uint8_t buf[24] = v45;
    *(_WORD *)&uint8_t buf[32] = 2048;
    *(void *)&buf[34] = v46;
    *(_WORD *)&buf[42] = 2048;
    *(void *)__int16 v110 = v51;
    *(_WORD *)&v110[8] = 2048;
    uint64_t v111 = v50;
    __int16 v112 = 2048;
    double v113 = v6;
    __int16 v114 = 1024;
    int v115 = v52;
    __int16 v116 = 2048;
    double v117 = v41;
    __int16 v118 = 2048;
    double v119 = v78;
    __int16 v120 = 2048;
    double v121 = v80;
    __int16 v122 = 1024;
    int v123 = LODWORD(v79);
    __int16 v124 = 2048;
    double v125 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "IndoorOutdoor,GPSResult,context,%s,stepDeltaDistance,%f,gpsDeltaDistance,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUD istanceY,%f,stepTimestamp,%f,fGpsState,%d,gpsDiscordanceProbability,%f,gpsDiscordanceRawProbability,%f,gpsDiscorda nce,%f,numValidDiscordanceSamples,%d,llrBufferSumProbability,%f",  buf,  0x7Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    uint64_t v61 = a1;
    uint64_t v62 = *(void *)&v19;
    uint64_t v63 = *(void *)(a1 + 1944);
    if (v19 >= 9999.0) {
      uint64_t v62 = 0x40C3878000000000LL;
    }
    unint64_t v64 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    unint64_t v65 = *(unsigned int *)(a1 + 372);
    if (v64 < v65) {
      unint64_t v65 = 0LL;
    }
    uint64_t v66 = a1 + 368 + 16 * (v64 - v65);
    uint64_t v68 = *(void *)(v66 + 8);
    uint64_t v67 = *(void *)(v66 + 16);
    int v69 = *(_DWORD *)(a1 + 1952);
    int v89 = 136318210;
    uint64_t v90 = v61;
    __int16 v91 = 2048;
    *(double *)__int16 v92 = v7;
    *(_WORD *)&v92[8] = 2048;
    *(void *)&v92[10] = v62;
    *(_WORD *)&v92[18] = 2048;
    *(void *)&v92[20] = v63;
    *(_WORD *)&v92[28] = 2048;
    *(void *)double v93 = v68;
    *(_WORD *)&v93[8] = 2048;
    uint64_t v94 = v67;
    __int16 v95 = 2048;
    double v96 = v6;
    __int16 v97 = 1024;
    int v98 = v69;
    __int16 v99 = 2048;
    double v100 = v77;
    __int16 v101 = 2048;
    double v102 = v78;
    __int16 v103 = 2048;
    double v104 = v80;
    __int16 v105 = 1024;
    int v106 = LODWORD(v79);
    __int16 v107 = 2048;
    double v108 = v40;
    LODWORD(v75) = 124;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  1LL,  "IndoorOutdoor,GPSResult,context,%s,stepDeltaDistance,%f,gpsDeltaDistance,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUD istanceY,%f,stepTimestamp,%f,fGpsState,%d,gpsDiscordanceProbability,%f,gpsDiscordanceRawProbability,%f,gpsDiscorda nce,%f,numValidDiscordanceSamples,%d,llrBufferSumProbability,%f",  (const char *)&v89,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86);
    double v71 = (char *)v70;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLIndoorOutdoorGPSModel::GpsModelResults CLIndoorOutdoorGPSModel::computeProbabilities(CFAbsoluteTime)",  "%s\n",  v70);
    if (v71 != buf) {
      free(v71);
    }
  }

void sub_100CC3D28( uint64_t a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v14 = (unsigned __int16 *)(a1 + 368);
  if (*(_WORD *)(a1 + 370))
  {
    uint64_t v20 = a1 + 376;
    unint64_t v21 = *(unsigned __int16 *)(a1 + 370) + (unint64_t)*(unsigned __int16 *)(a1 + 368) - 1;
    unint64_t v22 = *(unsigned int *)(a1 + 372);
    if (v21 < v22) {
      unint64_t v22 = 0LL;
    }
    double v23 = (double *)(v20 + 16 * (v21 - v22));
    double v24 = *v23;
    __double2 v25 = __sincos_stret(a4);
    double v26 = v23[1] + v25.__sinval * a3;
    *(double *)&__int128 v91 = v24 + v25.__cosval * a3;
    *((double *)&v91 + 1) = v26;
    sub_100483268(v14, &v91);
    if ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || a6 == 1.79769313e308
      || (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || a5 == 1.79769313e308)
    {
      unint64_t v33 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v34 = *(unsigned int *)(a1 + 508);
      if (v33 < v34) {
        unint64_t v34 = 0LL;
      }
      uint64_t v35 = a1 + 504 + 16 * (v33 - v34);
      double v32 = *(double *)(v35 + 16);
      *(void *)&__int128 v91 = *(void *)(v35 + 8);
    }

    else
    {
      unint64_t v27 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v28 = *(unsigned int *)(a1 + 508);
      if (v27 < v28) {
        unint64_t v28 = 0LL;
      }
      uint64_t v29 = a1 + 504 + 16 * (v27 - v28);
      double v30 = *(double *)(v29 + 8);
      __double2 v31 = __sincos_stret(a6);
      *(double *)&__int128 v91 = v30 + v31.__cosval * a5;
      double v32 = *(double *)(v29 + 16) + v31.__sinval * a5;
    }

    *((double *)&v91 + 1) = v32;
    sub_100483268((unsigned __int16 *)(a1 + 504), &v91);
    double v36 = *(double *)(a1 + 1912);
    if (v36 == -1.79769313e308 || a10 - v36 <= 23.04) {
      *(void *)(a1 + 192_Block_object_dispose(va, 8) = 0x7FF8000000000000LL;
    }
    else {
      sub_100CC491C(a1, v14, 1, (unsigned __int16 *)(a1 + 640), (double *)(a1 + 1928));
    }
    sub_100CC491C(a1, (unsigned __int16 *)(a1 + 504), 0, (unsigned __int16 *)(a1 + 712), (double *)(a1 + 1936));
    sub_100CC4CB8(a1, a5, a6, a7, a8);
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    int v39 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = a1;
      double v41 = a5;
      if (a5 >= 9999.0) {
        double v41 = 9999.0;
      }
      unint64_t v42 = *(unsigned int *)(a1 + 788);
      unint64_t v43 = *(unsigned __int16 *)(a1 + 784) + (unint64_t)*(unsigned __int16 *)(a1 + 786) - 1;
      if (v43 < v42) {
        unint64_t v42 = 0LL;
      }
      uint64_t v44 = *(void *)(a1 + 784 + 8 * (v43 - v42) + 8);
      uint64_t v45 = *(void *)(a1 + 1928);
      uint64_t v46 = *(void *)(a1 + 1936);
      uint64_t v47 = *(void *)(a1 + 1944);
      unint64_t v48 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
      unint64_t v49 = *(unsigned int *)(a1 + 372);
      if (v48 < v49) {
        unint64_t v49 = 0LL;
      }
      uint64_t v50 = (uint64_t *)(v20 + 16 * (v48 - v49));
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      unint64_t v53 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v54 = *(unsigned int *)(a1 + 508);
      if (v53 < v54) {
        unint64_t v54 = 0LL;
      }
      uint64_t v55 = a1 + 504 + 16 * (v53 - v54);
      uint64_t v56 = *(void *)(v55 + 8);
      uint64_t v57 = *(void *)(v55 + 16);
      uint64_t v58 = *(void *)(a1 + 1848);
      uint64_t v59 = *(void *)(a1 + 1856);
      uint64_t v60 = *(void *)(a1 + 1864);
      int v61 = *(_DWORD *)(a1 + 1952);
      *(_DWORD *)uint64_t buf = 136319490;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&_BYTE buf[14] = a3;
      __int16 v129 = 2048;
      double v130 = a4;
      __int16 v131 = 2048;
      double v132 = v41;
      __int16 v133 = 2048;
      double v134 = a6;
      __int16 v135 = 2048;
      uint64_t v136 = v44;
      __int16 v137 = 2048;
      uint64_t v138 = v45;
      __int16 v139 = 2048;
      uint64_t v140 = v46;
      __int16 v141 = 2048;
      uint64_t v142 = v47;
      __int16 v143 = 2048;
      uint64_t v144 = v52;
      __int16 v145 = 2048;
      uint64_t v146 = v51;
      __int16 v147 = 2048;
      uint64_t v148 = v56;
      __int16 v149 = 2048;
      uint64_t v150 = v57;
      __int16 v151 = 2048;
      uint64_t v152 = v58;
      __int16 v153 = 2048;
      uint64_t v154 = v59;
      __int16 v155 = 2048;
      uint64_t v156 = v60;
      __int16 v157 = 2048;
      double v158 = a9;
      __int16 v159 = 1024;
      int v160 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "in-out-metrics,context,%s,stepDeltaDistance,%f,gyroHeadingRadians,%f,gpsDeltaDistance,%f,gpsHeadingRadians,%f,bo dySum,%f,fTurnEnv,%f,fGPSTurnEnv,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,fGPSDistanceX,%f,fGPSDista nceY,%f,fGpsWanderLLRBufferSum,%f,fGpsLLRBufferSum,%f,fGpsFixBufferSum,%f,stepTimestamp,%f,fGpsState,%d",  buf,  0xB2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10187D4E0);
      }
      uint64_t v62 = a1;
      double v63 = a5;
      if (a5 >= 9999.0) {
        double v63 = 9999.0;
      }
      unint64_t v64 = *(unsigned int *)(a1 + 788);
      unint64_t v65 = *(unsigned __int16 *)(a1 + 784) + (unint64_t)*(unsigned __int16 *)(a1 + 786) - 1;
      if (v65 < v64) {
        unint64_t v64 = 0LL;
      }
      uint64_t v66 = *(void *)(a1 + 784 + 8 * (v65 - v64) + 8);
      uint64_t v67 = *(void *)(a1 + 1928);
      uint64_t v68 = *(void *)(a1 + 1936);
      uint64_t v69 = *(void *)(a1 + 1944);
      unint64_t v70 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
      unint64_t v71 = *(unsigned int *)(a1 + 372);
      if (v70 < v71) {
        unint64_t v71 = 0LL;
      }
      uint64_t v72 = (uint64_t *)(v20 + 16 * (v70 - v71));
      uint64_t v74 = *v72;
      uint64_t v73 = v72[1];
      unint64_t v75 = *(unsigned __int16 *)(a1 + 504) + (unint64_t)*(unsigned __int16 *)(a1 + 506) - 1;
      unint64_t v76 = *(unsigned int *)(a1 + 508);
      if (v75 < v76) {
        unint64_t v76 = 0LL;
      }
      uint64_t v77 = a1 + 504 + 16 * (v75 - v76);
      uint64_t v79 = *(void *)(v77 + 8);
      uint64_t v78 = *(void *)(v77 + 16);
      uint64_t v80 = *(void *)(a1 + 1848);
      uint64_t v81 = *(void *)(a1 + 1856);
      uint64_t v82 = *(void *)(a1 + 1864);
      int v83 = *(_DWORD *)(a1 + 1952);
      int v92 = 136319490;
      uint64_t v93 = v62;
      __int16 v94 = 2048;
      double v95 = a3;
      __int16 v96 = 2048;
      double v97 = a4;
      __int16 v98 = 2048;
      double v99 = v63;
      __int16 v100 = 2048;
      double v101 = a6;
      __int16 v102 = 2048;
      uint64_t v103 = v66;
      __int16 v104 = 2048;
      uint64_t v105 = v67;
      __int16 v106 = 2048;
      uint64_t v107 = v68;
      __int16 v108 = 2048;
      uint64_t v109 = v69;
      __int16 v110 = 2048;
      uint64_t v111 = v74;
      __int16 v112 = 2048;
      uint64_t v113 = v73;
      __int16 v114 = 2048;
      uint64_t v115 = v79;
      __int16 v116 = 2048;
      uint64_t v117 = v78;
      __int16 v118 = 2048;
      uint64_t v119 = v80;
      __int16 v120 = 2048;
      uint64_t v121 = v81;
      __int16 v122 = 2048;
      uint64_t v123 = v82;
      __int16 v124 = 2048;
      double v125 = a9;
      __int16 v126 = 1024;
      int v127 = v83;
      LODWORD(v8_Block_object_dispose(va, 8) = 178;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934758,  2LL,  "in-out-metrics,context,%s,stepDeltaDistance,%f,gyroHeadingRadians,%f,gpsDeltaDistance,%f,gpsHeadingRadians,%f,bo dySum,%f,fTurnEnv,%f,fGPSTurnEnv,%f,fResidScalar,%f,fIMUDistanceX,%f,fIMUDistanceY,%f,fGPSDistanceX,%f,fGPSDista nceY,%f,fGpsWanderLLRBufferSum,%f,fGpsLLRBufferSum,%f,fGpsFixBufferSum,%f,stepTimestamp,%f,fGpsState,%d",  (const char *)&v92,  v88,  v89,  a4,  *(double *)&v91,  *((double *)&v91 + 1));
      uint64_t v85 = (char *)v84;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLIndoorOutdoorGPSModel::processSamples(const double, const double, const double, const double, const doubl e, const double, const CFAbsoluteTime, const CFAbsoluteTime, const uint32_t)",  "%s\n",  v84);
      if (v85 != buf) {
        free(v85);
      }
    }
  }

  else
  {
    __double2 v37 = __sincos_stret(a4);
    *(double *)uint64_t buf = v37.__cosval * a3;
    *(double *)&uint8_t buf[8] = v37.__sinval * a3;
    sub_100483268(v14, buf);
    if (a6 == 1.79769313e308 || a5 == 1.79769313e308)
    {
      *(void *)uint64_t buf = 0LL;
      double v87 = 0.0;
    }

    else
    {
      __double2 v86 = __sincos_stret(a6);
      *(double *)uint64_t buf = v86.__cosval * a5;
      double v87 = v86.__sinval * a5;
    }

    *(double *)&uint8_t buf[8] = v87;
    sub_100483268((unsigned __int16 *)(a1 + 504), buf);
  }

  ++*(_DWORD *)(a1 + 1872);
}

double sub_100CC4408(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 1952))
  {
    case 0:
      double result = -1.0;
      break;
    case 1:
    case 5:
      double result = 0.49;
      break;
    case 2:
    case 3:
    case 4:
      __int128 v2 = xmmword_101359670;
      uint64_t v3 = *(void *)(a1 + 1856);
      sub_100CC57E4((uint64_t)&v3, v4, (uint64_t *)&v2, 2LL, 1LL);
      double result = v4[1];
      break;
    default:
      double result = 0.0;
      break;
  }

  return result;
}

void sub_100CC44BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_101359698;
  *(_OWORD *)(a2 + 16) = unk_1013596A8;
  if (*(unsigned __int16 *)(a1 + 1042) >= 5u)
  {
    int v4 = 0;
    unint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    double v7 = (unsigned __int16 *)(a1 + 1040);
    double v8 = 0.0;
    double v9 = 0.0;
    do
    {
      uint64_t v10 = (double *)sub_100CC5344(v7, v5);
      double v11 = *v10;
      double v12 = v10[1];
      if (v12 <= 0.0 || v11 == 1.79769313e308)
      {
        uint64_t v14 = v6;
      }

      else
      {
        uint64_t v14 = (v6 + 1);
        if ((int)v6 >= 2)
        {
          double v9 = v9 + v12;
          double v8 = v8 + v11;
          *(_DWORD *)(a2 + 16) = ++v4;
        }
      }

      ++v5;
      uint64_t v6 = v14;
    }

    while (v5 < *(unsigned __int16 *)(a1 + 1042));
    if (v9 > 0.0)
    {
      double v15 = fmin(vabdd_f64(v9, v8) / v9, 1.0);
      *(double *)(a2 + 24) = v15;
      __int128 v19 = xmmword_101359680;
      double v20 = v15;
      sub_100CC57E4((uint64_t)&v20, &v21, (uint64_t *)&v19, 2LL, 1LL);
      double v16 = v22;
      *(double *)(a2 + _Block_object_dispose(va, 8) = v22;
      if (v4 > 5)
      {
        if (v4 > 0x11)
        {
LABEL_18:
          *(double *)a2 = v16;
          return;
        }

        double v17 = fmax(v16, 0.110000001);
        double v18 = 0.889999976;
      }

      else
      {
        double v17 = fmax(v16, 0.310000012);
        double v18 = 0.689999988;
      }

      double v16 = fmin(v17, v18);
      goto LABEL_18;
    }
  }

double sub_100CC4650(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4)
{
  if (a2[1] <= a3) {
    sub_10126A2EC();
  }
  if (!a4) {
    return 0.0;
  }
  uint64_t v5 = a3;
  uint64_t v6 = -a4;
  double v7 = 0.0;
  do
  {
    double v8 = *(double *)sub_100CC4724(a2, v5 + v6 + 1);
    double v9 = *(double *)(sub_100CC4724(a2, v5 + v6 + 1) + 8);
    double v10 = *(double *)sub_100CC4724(a2, v5 + v6);
    uint64_t v11 = sub_100CC4724(a2, v5 + v6);
    double v7 = v7 + sqrt((v8 - v10) * (v8 - v10) + (v9 - *(double *)(v11 + 8)) * (v9 - *(double *)(v11 + 8)));
  }

  while (!__CFADD__(v6++, 1LL));
  return v7;
}

uint64_t sub_100CC4724(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187D520);
    }
    double v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187D520);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CMVector<double, 2>>::operator[](const size_t) const [T = CMVector<double, 2>]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

void sub_100CC491C(uint64_t a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4, double *a5)
{
  unsigned int v5 = a2[1];
  if (v5 >= 7)
  {
    unsigned int v11 = v5 - 1;
    if (sub_100CC4650(a1, a2, v5 - 1, 6LL) > 7.62947002)
    {
      int v12 = a2 + 4;
      uint64_t v13 = a2[1];
      unint64_t v14 = *a2 + v13 - 1;
      unint64_t v15 = *((unsigned int *)a2 + 1);
      if (v14 < v15) {
        unint64_t v15 = 0LL;
      }
      double v16 = *(double *)&v12[8 * (v14 - v15)];
      double v17 = *(double *)sub_100CC4724(a2, v13 - 6);
      uint64_t v18 = a2[1];
      unint64_t v19 = *a2 + v18 - 1;
      unint64_t v20 = *((unsigned int *)a2 + 1);
      if (v19 < v20) {
        unint64_t v20 = 0LL;
      }
      double v21 = *(double *)&v12[8 * (v19 - v20) + 4];
      uint64_t v22 = sub_100CC4724(a2, v18 - 6);
      double v23 = *(double *)(v22 + 8);
      double v24 = sub_100CC4650(v22, a2, v11, 5LL);
      if (fabs(v24) > 0.0001)
      {
        double v25 = sqrt((v16 - v17) * (v16 - v17) + (v21 - v23) * (v21 - v23)) / v24;
        uint64_t v26 = a4[1];
        unint64_t v27 = *((unsigned int *)a4 + 1);
        uint64_t v28 = *a4;
        if (v28 + v26 >= v27) {
          uint64_t v29 = *((unsigned int *)a4 + 1);
        }
        else {
          uint64_t v29 = 0LL;
        }
        *(double *)&a4[4 * (v28 + v26 - v29) + 4] = v25;
        if (v27 <= v26)
        {
          if (v28 + 1 < v27) {
            LOWORD(v27) = 0;
          }
          *a4 = v28 + 1 - v27;
          if (!a3) {
            goto LABEL_13;
          }
        }

        else
        {
          a4[1] = v26 + 1;
          if (!a3)
          {
LABEL_13:
            BOOL v30 = 0;
            goto LABEL_18;
          }
        }

        BOOL v30 = sub_100CC55D0( (unsigned __int16 *)(a1 + 784),  (unsigned int (*)(double, double))sub_100CC57CC,  0LL) >= 0.349065848;
LABEL_18:
        if (*(_DWORD *)(a1 + 1872) >= 9u && !v30)
        {
          double v31 = sub_100CC55D0(a4, (unsigned int (*)(double, double))sub_100CC57D8, 0LL);
          double v32 = acos(v31);
          *a5 = (v32 + v32) * 57.2957802;
        }
      }
    }
  }

unsigned __int16 *sub_100CC4B08(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  if (a4 == 1.79769313e308) {
    a4 = a2[27];
  }
  else {
    a2[27] = a4;
  }
  double v8 = a4;
  if (a3 != 1.79769313e308)
  {
    a2[27] = a3;
    double v8 = a3;
  }

  if ((*(_DWORD *)(a1 + 1872) & 7) == *((_DWORD *)a2 + 58))
  {
    a2[26] = a5 - a4;
    unint64_t v9 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    unint64_t v10 = *(unsigned int *)(a1 + 372);
    if (v9 < v10) {
      unint64_t v10 = 0LL;
    }
    uint64_t v11 = a1 + 368 + 16 * (v9 - v10);
    double v12 = *(double *)(v11 + 8);
    double v13 = a5 - a4 + v8;
  }

  else
  {
    unint64_t v14 = *(unsigned __int16 *)a2 + (unint64_t)*((unsigned __int16 *)a2 + 1) - 1;
    unint64_t v15 = *((unsigned int *)a2 + 1);
    if (v14 < v15) {
      unint64_t v15 = 0LL;
    }
    uint64_t v11 = (uint64_t)&a2[2 * (v14 - v15)];
    double v12 = *(double *)(v11 + 8);
    double v13 = v8 + a2[26];
  }

  __double2 v16 = __sincos_stret(v13);
  double v17 = *(double *)(v11 + 16) + v16.__sinval * a6;
  *(double *)&__int128 v19 = v12 + v16.__cosval * a6;
  *((double *)&v19 + 1) = v17;
  return sub_100483268((unsigned __int16 *)a2, &v19);
}

BOOL sub_100CC4C14(uint64_t a1, uint64_t a2)
{
  int v2 = (*(_DWORD *)(a1 + 1872) + 1) & 7;
  int v3 = *(_DWORD *)(a2 + 232);
  if (v2 == v3)
  {
    int v5 = *(unsigned __int16 *)(a2 + 2);
    double v6 = sub_100CC4650(a1, (unsigned __int16 *)(a1 + 368), *(unsigned __int16 *)(a1 + 370) - 1, 7LL);
    double v8 = sub_100CC4650(v7, (unsigned __int16 *)a2, v5 - 1, 7LL);
    if (v6 <= 12.207152) {
      double v9 = NAN;
    }
    else {
      double v9 = vabdd_f64(v8, v6) / v6;
    }
    *(double *)(a2 + 224) = v9;
    *(double *)(a2 + 24sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v6;
  }

  return v2 == v3;
}

void sub_100CC4CB8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a2 == 1.79769313e308)
  {
    uint64_t v7 = a1 + 2952;
    uint64_t v8 = a1 + 1952;
    do
    {
      unint64_t v9 = *(unsigned __int16 *)(v8 + 8) + (unint64_t)*(unsigned __int16 *)(v8 + 10);
      else {
        uint64_t v10 = 0LL;
      }
      sub_100483268((unsigned __int16 *)(v8 + 8), (_OWORD *)(v8 - 16 * v10 + 16 * v9));
      uint64_t v11 = v8 + 256;
      v8 += 248LL;
    }

    while (v11 != v7);
  }

  else
  {
    for (uint64_t i = 1960LL; i != 2952; i += 248LL)
      sub_100CC4B08(a1, (double *)(a1 + i), a3, a4, a5, a2);
  }

  if (*(_DWORD *)(a1 + 1872) < 9u) {
    return;
  }
  uint64_t v16 = 0LL;
  uint64_t v17 = a1 + 1960;
  unsigned int v18 = -1;
  do
  {
    if (sub_100CC4C14(a1, v17))
    {
      if (v18 != -1) {
        sub_10126A46C();
      }
      unsigned int v18 = v16;
    }

    ++v16;
    v17 += 248LL;
  }

  while (v16 != 4);
  if (v18 == -1)
  {
    *(void *)(a1 + 1944) = 0x7FF8000000000000LL;
    return;
  }

  double v19 = *(double *)(a1 + 248LL * v18 + 2184);
  if (v19 > 1.0) {
    double v19 = 1.0;
  }
  *(double *)(a1 + 1944) = v19;
  unsigned int v20 = *(_DWORD *)(a1 + 1952) - 5;
  double v21 = *(double *)(a1 + 1936) - *(double *)(a1 + 1928);
  BOOL v22 = COERCE__INT64(fabs(v21)) > 0x7FEFFFFFFFFFFFFFLL;
  if (v20 >= 0xFFFFFFFD && !v22)
  {
    sub_100CC29FC(a1, v21);
    uint64_t v24 = *(unsigned __int16 *)(a1 + 858);
    unint64_t v25 = *(unsigned int *)(a1 + 860);
    uint64_t v26 = *(unsigned __int16 *)(a1 + 856);
    if (v26 + v24 >= v25) {
      uint64_t v27 = *(unsigned int *)(a1 + 860);
    }
    else {
      uint64_t v27 = 0LL;
    }
    *(void *)(a1 + 856 + 8 * (v26 + v24 - v27) + _Block_object_dispose(va, 8) = v23;
    if (v25 <= v24)
    {
      if (v26 + 1 < v25) {
        LOWORD(v25) = 0;
      }
      *(_WORD *)(a1 + 856) = v26 + 1 - v25;
    }

    else
    {
      *(_WORD *)(a1 + 85_Block_object_dispose(va, 8) = v24 + 1;
    }
  }

  double v28 = *(double *)(a1 + 1944);
  uint64_t v29 = (_WORD *)(a1 + 928);
  if (v20 < 0xFFFFFFFD || (*(void *)(a1 + 1944) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    uint64_t v36 = *(unsigned __int16 *)(a1 + 930);
    unint64_t v37 = *(unsigned int *)(a1 + 932);
    uint64_t v38 = *(unsigned __int16 *)(a1 + 928);
    if (v38 + v36 >= v37) {
      uint64_t v40 = *(unsigned int *)(a1 + 932);
    }
    else {
      uint64_t v40 = 0LL;
    }
    *(void *)&v29[4 * (v38 + v36 - v40) + 4] = 0LL;
  }

  else
  {
    double v30 = exp(v28 * -10.0) * 10.0;
    double v31 = *(double *)(a1 + 24);
    double v32 = (1.0 - v28) * -10.0;
    double v33 = v30 / v31;
    double v34 = exp(v32);
    double v35 = log10(v33 / (v34 * 10.0 / v31));
    if ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL) {
      double v35 = 0.0;
    }
    uint64_t v36 = *(unsigned __int16 *)(a1 + 930);
    unint64_t v37 = *(unsigned int *)(a1 + 932);
    uint64_t v38 = *(unsigned __int16 *)(a1 + 928);
    if (v38 + v36 >= v37) {
      uint64_t v39 = *(unsigned int *)(a1 + 932);
    }
    else {
      uint64_t v39 = 0LL;
    }
    *(double *)(a1 + 928 + 8 * (v38 + v36 - v39) + _Block_object_dispose(va, 8) = v35;
  }

  if (v37 <= v36)
  {
    if (v38 + 1 < v37) {
      LOWORD(v37) = 0;
    }
    *uint64_t v29 = v38 + 1 - v37;
  }

  else
  {
    *(_WORD *)(a1 + 93sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v36 + 1;
  }

  v52[0] = a2 != 1.79769313e308 && *(double *)(a1 + 1904) != -1.79769313e308;
  sub_10032E068((unsigned __int16 *)(a1 + 1000), v52);
  *(double *)(a1 + 184_Block_object_dispose(va, 8) = sub_100CC5278((unsigned __int16 *)(a1 + 856));
  *(double *)(a1 + 1856) = sub_100CC5278((unsigned __int16 *)(a1 + 928));
  double v41 = sub_100CC52DC((unsigned __int16 *)(a1 + 1000));
  *(double *)(a1 + 1864) = v41;
  int v42 = *(_DWORD *)(a1 + 1952);
  if (!v42 && v41 < 6.0) {
    goto LABEL_53;
  }
  if (!v42 && v41 >= 6.0 || v42 == 1 && v41 >= 6.0) {
    goto LABEL_60;
  }
  if (v42 == 1)
  {
    if (*(_DWORD *)(a1 + 1920) <= 0x19u)
    {
      int v43 = 1;
      goto LABEL_55;
    }

    int v43 = 5;
LABEL_54:
    *(_DWORD *)(a1 + 1952) = v43;
LABEL_55:
    ++*(_DWORD *)(a1 + 1920);
    goto LABEL_63;
  }

  if (v42 == 2 && v41 < 6.0) {
    goto LABEL_53;
  }
  if (v42 == 2)
  {
    double v51 = *(double *)(a1 + 1856);
    if (v51 <= -20.0)
    {
      int v43 = 3;
    }

    else
    {
      if (v51 < 22.0 || *(double *)(a1 + 1848) < -5.0)
      {
        int v43 = 2;
        goto LABEL_62;
      }

      int v43 = 4;
    }

    goto LABEL_61;
  }

  if (v42 == 3 && v41 >= 6.0)
  {
    if (*(double *)(a1 + 1856) < 0.0 || *(double *)(a1 + 1848) < -5.0)
    {
      int v43 = 3;
      goto LABEL_62;
    }

    goto LABEL_60;
  }

  if (v42 == 4 && v41 < 6.0)
  {
LABEL_53:
    int v43 = 1;
    goto LABEL_54;
  }

  if (v42 == 4)
  {
LABEL_60:
    int v43 = 2;
LABEL_61:
    *(_DWORD *)(a1 + 1952) = v43;
    goto LABEL_62;
  }

  if (v42 == 5 && v41 >= 6.0) {
    goto LABEL_60;
  }
LABEL_97:
  int v43 = *(_DWORD *)(a1 + 1952);
  if (v42 == 5) {
    goto LABEL_55;
  }
LABEL_62:
  *(_DWORD *)(a1 + 192sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
LABEL_63:
  if (v42 != v43)
  {
    if (qword_101934750 != -1) {
      dispatch_once(&qword_101934750, &stru_10187D4E0);
    }
    uint64_t v44 = (os_log_s *)qword_101934758;
    if (os_log_type_enabled((os_log_t)qword_101934758, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = a1;
      int v46 = *(_DWORD *)(a1 + 1952);
      int v47 = *(_DWORD *)(a1 + 1920);
      uint64_t v48 = *(void *)(a1 + 1864);
      uint64_t v49 = *(void *)(a1 + 1848);
      uint64_t v50 = *(void *)(a1 + 1856);
      v52[0] = 68290818;
      v52[1] = 0;
      __int16 v53 = 2082;
      unint64_t v54 = "";
      __int16 v55 = 2082;
      uint64_t v56 = v45;
      __int16 v57 = 1026;
      int v58 = v42;
      __int16 v59 = 1026;
      int v60 = v46;
      __int16 v61 = 1026;
      int v62 = v47;
      __int16 v63 = 2050;
      uint64_t v64 = v48;
      __int16 v65 = 2050;
      uint64_t v66 = v49;
      __int16 v67 = 2050;
      uint64_t v68 = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:IndoorOutdoorGpsChange, Context:%{public, location:escape_only}s, Old GPS State :%{public}d, New GPS State:%{public}d, Epochs No Fix:%{public}d, GPS fix buffer sum:%{public}.9f , GPS wander LLR sum:%{public}.9f, GPS LLR sum:%{public}.9f}",  (uint8_t *)v52,  0x4Cu);
    }
  }

double sub_100CC5278(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  unint64_t v2 = 0LL;
  double v3 = 0.0;
  do
    double v3 = v3 + *(double *)sub_1006B4618(a1, v2++);
  while (v2 < a1[1]);
  return v3;
}

double sub_100CC52DC(unsigned __int16 *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  unint64_t v2 = 0LL;
  double v3 = 0.0;
  do
    double v3 = v3 + (double)*(int *)sub_10032DE70(a1, v2++);
  while (v2 < a1[1]);
  return v3;
}

uint64_t sub_100CC5344(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187D520);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187D520);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CLIndoorOutdoorGPSModel::GpsStepDistancePair>::operator[](const size_t) const [T = CLIndoorOutd oorGPSModel::GpsStepDistancePair]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

uint64_t sub_100CC5540()
{
  return 0LL;
}

void sub_100CC554C(id a1)
{
  qword_101934758 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

void sub_100CC5578(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100CC55A4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_100CC55D0( unsigned __int16 *a1, unsigned int (*a2)(double, double), unint64_t a3)
{
  unint64_t v6 = a1[1];
  if (!a1[1])
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187D520);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187D520);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.",  v14,  2);
      unint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "T CMQueue<double>::getComparison(int (*)(const T, const T), size_t) const [T = double]",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  double v7 = *(double *)sub_1006B4618(a1, a3);
  if (v6 > a3)
  {
    do
    {
      int v8 = (double *)sub_1006B4618(a1, a3);
      double v9 = *v8;
      if (a2(*v8, v7)) {
        double v7 = v9;
      }
      ++a3;
    }

    while (v6 != a3);
  }

  return v7;
}

BOOL sub_100CC57CC(double a1, double a2)
{
  return a2 < a1;
}

BOOL sub_100CC57D8(double a1, double a2)
{
  return a1 < a2;
}

void sub_100CC57E4(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a4 - 1;
  if (a4 != 1)
  {
    int v8 = a3;
    double v9 = a2;
    uint64_t v10 = a4 - 1;
    do
    {
      uint64_t v11 = *v8++;
      *(void *)v9++ = v11;
      --v10;
    }

    while (v10);
  }

  if (a5)
  {
    uint64_t v12 = 0LL;
    do
    {
      if (a4 == 1)
      {
        uint64_t v13 = v12 + 1;
      }

      else
      {
        uint64_t v13 = v12 + 1;
        __int16 v14 = (double *)((char *)a3 + 8 * v7 * (v12 + 1));
        int v15 = a2;
        uint64_t v16 = a4 - 1;
        do
        {
          double v17 = *v14++;
          *int v15 = *v15 + *(double *)(a1 + 8 * v12) * v17;
          ++v15;
          --v16;
        }

        while (v16);
      }

      uint64_t v12 = v13;
    }

    while (v13 != a5);
  }

  a2[v7] = 1.0;
  if (a4 == 1)
  {
    double v19 = 1.0;
    do
    {
LABEL_18:
      *unint64_t v6 = *v6 / v19;
      ++v6;
      --v5;
    }

    while (v5);
    return;
  }

  uint64_t v18 = 0LL;
  double v19 = 1.0;
  do
  {
    double v20 = exp(v6[v18]);
    v6[v18] = v20;
    double v19 = v19 + v20;
    ++v18;
  }

  while (v7 != v18);
  if (v5) {
    goto LABEL_18;
  }
}

double sub_100CC58D8(void *a1, uint64_t *a2)
{
  unint64_t v2 = sub_10101B9AC(a1, a2);
  *unint64_t v2 = off_10187D550;
  v2[11] = 0LL;
  v2[12] = 0LL;
  *(int64x2_t *)(v2 + 13) = vdupq_n_s64(0x7FF8000000000000uLL);
  v2[15] = 0xBFF0000000000000LL;
  v2[16] = 0LL;
  *((_DWORD *)v2 + 34) = 0;
  v2[18] = 0LL;
  *((_DWORD *)v2 + 3_Block_object_dispose(va, 8) = 0;
  v2[20] = 0LL;
  *((_DWORD *)v2 + 42) = 0;
  v2[22] = 0LL;
  double result = 0.0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)((char *)v2 + 6_Block_object_dispose(va, 8) = 0u;
  return result;
}

uint64_t sub_100CC593C()
{
  return 1LL;
}

uint64_t sub_100CC5944(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  double v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v4 + 16LL))(&v18, v4, a1);
  sub_1000F2F30((void *)(a1 + 88), &v18);
  int v8 = v19;
  if (v19)
  {
    double v9 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  if (v17)
  {
    uint64_t v11 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  __int128 v13 = *a2;
  __int128 v14 = a2[1];
  __int128 v15 = a2[2];
  *(_OWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  return 1LL;
}

void sub_100CC5A48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100CC5A5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    sub_100AE5528(v1);
  }
  return 1LL;
}

__n128 sub_100CC5A7C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 104);
  __int128 v3 = *(_OWORD *)(a1 + 120);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_100CC5A8C(uint64_t a1)
{
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 16sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 176) = 0LL;
  return 1LL;
}

BOOL sub_100CC5AA8(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3 - 12;
  if (a3 < 0xC) {
    return 0LL;
  }
  unint64_t v4 = a3 + 12;
  double v5 = 0.0;
  if (v3 <= v4)
  {
    unint64_t v6 = (float *)(*a2 + (a3 << 6) - 752);
    double v5 = 0.0;
    do
    {
      float v7 = *v6;
      v6 += 16;
      ++v3;
    }

    while (v3 <= v4);
  }

  return v5 / 25.0 >= 0.5;
}

uint64_t sub_100CC5B30(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 144) = *(void *)(a2 + 72);
  unint64_t v2 = *(uint64_t **)(a2 + 48);
  uint64_t v3 = *v2;
  if (*v2 != v2[1])
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    double v8 = *(double *)(v3 + 8);
    double v9 = (__int128 *)(a1 + 24);
    do
    {
      unint64_t v10 = (uint64_t *)(v3 + v6);
      double v11 = *(double *)v10;
      double v12 = *((double *)v10 + 1);
      float v13 = *((float *)v10 + 4);
      float v14 = *((float *)v10 + 5);
      uint64_t v15 = v10[3];
      float v16 = *((float *)v10 + 8);
      v34[0] = *(_OWORD *)((char *)v10 + 36);
      *(_OWORD *)((char *)v34 + 12) = *((_OWORD *)v10 + 3);
      *(double *)double v28 = v11;
      *(double *)&v28[1] = v12;
      float v29 = v13;
      float v30 = v14;
      uint64_t v31 = v15;
      float v32 = v16;
      *(_OWORD *)double v33 = v34[0];
      *(_OWORD *)&v33[12] = *(_OWORD *)((char *)v34 + 12);
      __int128 v17 = *v9;
      __int128 v18 = v9[1];
      __int128 v19 = v9[2];
      *(_OWORD *)&_BYTE v27[12] = *(__int128 *)((char *)v9 + 44);
      v26[1] = v18;
      *(_OWORD *)uint64_t v27 = v19;
      v26[0] = v17;
      BOOL v20 = sub_100F291B8((uint64_t)v28, (uint64_t)v26);
      if (v12 - v8 < 2700.0 && v16 >= 0.0 && v16 <= 1500.0 && v20 && v14 > 0.39)
      {
        double v21 = v13;
        double v22 = *(double *)(a1 + 144);
        uint64_t v23 = *(uint64_t **)(a2 + 48);
        if (v22 * 0.77 <= v21 && v22 + v22 >= v21 && sub_100CC5AA8(a1, *(void **)(a2 + 48), v7))
        {
          float v24 = v21 / v22;
          *(float *)(a1 + 16_Block_object_dispose(va, 8) = *(float *)(a1 + 168) + v24;
          ++*(void *)(a1 + 176);
          *(float *)(a1 + 152) = v16 + *(float *)(a1 + 152);
          ++*(void *)(a1 + 160);
        }
      }

      else
      {
        uint64_t v23 = *(uint64_t **)(a2 + 48);
      }

      ++v7;
      uint64_t v3 = *v23;
      v6 += 64LL;
    }

    while (v7 < (v23[1] - *v23) >> 6);
  }

  return 1LL;
}

uint64_t sub_100CC5D5C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 160);
  if (qword_1019347A0 != -1) {
    dispatch_once(&qword_1019347A0, &stru_10187D5B0);
  }
  uint64_t v3 = (os_log_s *)qword_1019347A8;
  if (os_log_type_enabled((os_log_t)qword_1019347A8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = *(void *)(a1 + 160);
    double v5 = 0.0;
    double v6 = 0.0;
    if (v4) {
      double v6 = (float)(*(float *)(a1 + 152) / (float)v4);
    }
    uint64_t v7 = *(void *)(a1 + 144);
    unint64_t v8 = *(void *)(a1 + 176);
    if (v8) {
      double v5 = (float)(*(float *)(a1 + 168) / (float)v8);
    }
    *(_DWORD *)uint64_t buf = 67110912;
    BOOL v30 = v2 > 0xE;
    __int16 v31 = 2048;
    unint64_t v32 = v4;
    __int16 v33 = 1024;
    int v34 = 15;
    __int16 v35 = 2048;
    double v36 = v6;
    __int16 v37 = 2048;
    uint64_t v38 = v7;
    __int16 v39 = 2048;
    uint64_t v40 = 0x3FE8A3D70A3D70A4LL;
    __int16 v41 = 2048;
    uint64_t v42 = 0x4000000000000000LL;
    __int16 v43 = 2048;
    double v44 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "powerValid,%d,sampleCount,%zu,requiredSampleCount,%d,meanPower,%f,hrmax,%f,hrPctLow,%f,hrPctHigh,%f,meanHRMaxPercent,%f",  buf,  0x4Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347A0 != -1) {
      dispatch_once(&qword_1019347A0, &stru_10187D5B0);
    }
    unint64_t v14 = *(void *)(a1 + 160);
    double v15 = 0.0;
    double v16 = 0.0;
    if (v14) {
      double v16 = (float)(*(float *)(a1 + 152) / (float)v14);
    }
    uint64_t v17 = *(void *)(a1 + 144);
    unint64_t v18 = *(void *)(a1 + 176);
    if (v18) {
      double v15 = (float)(*(float *)(a1 + 168) / (float)v18);
    }
    LOWORD(v23) = 2048;
    *(void *)((char *)&v23 + 2) = v14;
    WORD5(v23) = 1024;
    HIDWORD(v23) = 15;
    *(_WORD *)float v24 = 2048;
    *(double *)&__n128 v24[2] = v16;
    *(_WORD *)&v24[10] = 2048;
    *(void *)&v24[12] = v17;
    *(_WORD *)&v24[20] = 2048;
    *(void *)&v24[22] = 0x3FE8A3D70A3D70A4LL;
    __int16 v25 = 2048;
    uint64_t v26 = 0x4000000000000000LL;
    __int16 v27 = 2048;
    double v28 = v15;
    LODWORD(v21) = 74;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347A8,  0LL,  "powerValid,%d,sampleCount,%zu,requiredSampleCount,%d,meanPower,%f,hrmax,%f,hrPctLow,%f,hrPctHigh,%f,meanHRMaxPercent,%f",  &v22,  v21,  67110912,  *(double *)&v23,  *((double *)&v23 + 1),  *(double *)v24,  *(double *)&v24[8],  *(double *)&v24[16]);
    BOOL v20 = (uint8_t *)v19;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLCyclingFTPHRMax::execute()", "%s\n", v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  if (v2 < 0xF)
  {
    double v10 = -1.0;
    double v11 = NAN;
  }

  else
  {
    unint64_t v9 = *(void *)(a1 + 160);
    double v10 = 0.5;
    if (v9) {
      double v11 = (float)(*(float *)(a1 + 152) / (float)v9);
    }
    else {
      double v11 = 0.0;
    }
  }

  int v12 = *(_DWORD *)(a1 + 136);
  *(double *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = 0x7FF8000000000000LL;
  *(double *)(a1 + 12sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = v10;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v12;
  *(_DWORD *)(a1 + 132) = 11;
  return 1LL;
}

void *sub_100CC6098(void *a1)
{
  *a1 = off_10187D550;
  sub_10000AE14((uint64_t)(a1 + 11));
  *a1 = off_101868780;
  sub_10000AE14((uint64_t)(a1 + 1));
  return a1;
}

void sub_100CC60E0(void *a1)
{
  *a1 = off_10187D550;
  sub_10000AE14((uint64_t)(a1 + 11));
  *a1 = off_101868780;
  sub_10000AE14((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100CC6128(id a1)
{
  qword_1019347A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

double sub_100CC6154(uint64_t a1)
{
  *(_DWORD *)a1 = 28;
  double result = 0.333333333;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = xmmword_1013596E0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_100CC61D8(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = CMDistributedSensingVehicleStateUpdateKey;
  uint64_t v18 = a2;
  double v16 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL);
  sub_100CC6E3C("DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate", &v16, &v14);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v12 = v14;
  float v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  CLConnection::sendMessage(v3, &v12);
  double v6 = v13;
  if (v13)
  {
    uint64_t v7 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  unint64_t v9 = v15;
  if (v15)
  {
    double v10 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

void sub_100CC6308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CC633C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_10187D5E0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = a3;
  if (+[CLDistributedSensingService isSupported](&OBJC_CLASS___CLDistributedSensingService, "isSupported"))
  {
    *(void *)(a1 + 32) = -[CLDistributedSensingSubscriptionClient initWithSubscription:]( objc_alloc(&OBJC_CLASS___CLDistributedSensingSubscriptionClient),  "initWithSubscription:",  a1);
    id v4 =  objc_msgSend( objc_msgSend(*(id *)(a1 + 16), "vendor"),  "proxyForService:",  @"CLDistributedSensingService");
    *(void *)(a1 + 24) = v4;
    objc_msgSend(v4, "registerDelegate:inSilo:", *(void *)(a1 + 32), objc_msgSend(*(id *)(a1 + 16), "silo"));
  }

  uint64_t v5 = *(void *)(a1 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _OWORD v7[2] = sub_100CC6434;
  void v7[3] = &unk_10182B3E0;
  _DWORD v7[4] = a1;
  CLConnection::setDefaultMessageHandler(v5, v7);
  return a1;
}

void sub_100CC6420(_Unwind_Exception *a1)
{
}

void sub_100CC6434(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  double v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16LL))(v2, &v9);
  double v6 = v10;
  if (v10)
  {
    uint64_t v7 = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_100CC64C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100CC64D8(uint64_t a1)
{
  *(void *)a1 = off_10187D5E0;
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {

    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 32) = 0LL;
  }

  return sub_100213E60((void *)a1);
}

void sub_100CC6534(uint64_t a1)
{
  uint64_t v1 = sub_100CC64D8(a1);
  operator delete(v1);
}

void sub_100CC6548(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unint64_t v5 = (void *)CLConnectionMessage::name(*a2);
  int v6 = *((char *)v5 + 23);
  if (v6 < 0)
  {
    if (v5[1] != 75LL)
    {
LABEL_7:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187D620);
      }
      uint64_t v7 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*a2);
        int v9 = *((char *)v8 + 23);
        double v10 = (uint64_t *)*v8;
        CLConnection::getName(*(CLConnection **)(a1 + 8));
        if (v9 >= 0) {
          unint64_t v11 = v8;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v26 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        int v29 = 0;
        __int16 v30 = 2082;
        __int16 v31 = "";
        __int16 v32 = 2082;
        __int16 v33 = v11;
        __int16 v34 = 2082;
        __int16 v35 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unhandled message, name:%{public, location:escape_only}s, client:%{public, lo cation:escape_only}s}",  buf,  0x26u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10187D620);
        }
      }

      float v13 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        uint64_t v14 = (uint64_t *)CLConnectionMessage::name(*a2);
        int v15 = *((char *)v14 + 23);
        double v16 = (uint64_t *)*v14;
        CLConnection::getName(*(CLConnection **)(a1 + 8));
        if (v15 >= 0) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = v16;
        }
        if (v26 >= 0) {
          uint64_t v18 = __p;
        }
        else {
          uint64_t v18 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        int v29 = 0;
        __int16 v30 = 2082;
        __int16 v31 = "";
        __int16 v32 = 2082;
        __int16 v33 = v17;
        __int16 v34 = 2082;
        __int16 v35 = v18;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unhandled message",  "{msg%{public}.0s:Unhandled message, name:%{public, location:escape_only}s, client:%{public, lo cation:escape_only}s}",  buf,  0x26u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }

      goto LABEL_37;
    }

    unint64_t v5 = (void *)*v5;
  }

  else if (v6 != 75)
  {
    goto LABEL_7;
  }

  if (memcmp(v5, "DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate", 0x4BuLL)) {
    goto LABEL_7;
  }
  __int128 v19 = *a2;
  BOOL v20 = a2[1];
  v27[0] = v19;
  v27[1] = v20;
  if (v20)
  {
    uint64_t v21 = (unint64_t *)((char *)v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  sub_100CC688C(a1, v27);
  if (v20)
  {
    __int128 v23 = (unint64_t *)((char *)v20 + 8);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v20 + 16LL))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
  }

void sub_100CC6844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _Unwind_Resume(a1);
}

void sub_100CC688C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *(void *)(a1 + 8);
  sub_1010DDBC0(buf, "com.apple.locationd.activity");
  char isEntitled = CLConnection::isEntitled(v5, buf);
  char v7 = isEntitled;
  if ((SBYTE3(v31) & 0x80000000) == 0)
  {
    if ((isEntitled & 1) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    float v13 = *a2;
    uint64_t v36 = CMErrorMessage;
    __int16 v37 = &off_1018D44C0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL);
LABEL_26:
    CLConnectionMessage::sendReply(v13);
    goto LABEL_46;
  }

  operator delete(*(void **)buf);
  if ((v7 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  if (!+[CLDistributedSensingService isSupported](&OBJC_CLASS___CLDistributedSensingService, "isSupported"))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187D620);
    }
    uint64_t v14 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      int v15 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      int v29 = "";
      __int16 v30 = 2082;
      __int16 v31 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#distributedSensing Service unavailable, client:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    float v13 = *a2;
    uint64_t v34 = CMErrorMessage;
    __int16 v35 = &off_1018D44D8;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL);
    goto LABEL_26;
  }

  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v22, Dictionary);
  BOOL v21 = 0;
  if ((sub_1002A6F64((uint64_t)v22, "kCLConnectionMessageSubscribeKey", &v21) & 1) != 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187D620);
    }
    int v9 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v24 >= 0) {
        double v10 = __p;
      }
      else {
        double v10 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      int v29 = "";
      __int16 v30 = 2082;
      __int16 v31 = v10;
      __int16 v32 = 1026;
      BOOL v33 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#distributedSensing Client subscribe, client:%{public, location:escape_only}s, su bscribe:%{public}hhd}",  buf,  0x22u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v11 = *(void **)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    if (v21) {
      [v11 registerClient:v12 forNotification:0];
    }
    else {
      [v11 unregisterClient:v12 forNotification:0];
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10187D620);
    }
    double v16 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      if (v24 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      int v29 = "";
      __int16 v30 = 2082;
      __int16 v31 = v17;
      __int16 v32 = 1026;
      BOOL v33 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#distributedSensing Error obtaining subscription key, client:%{public, location:esc ape_only}s, subscribe:%{public}hhd}",  buf,  0x22u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10187D620);
      }
    }

    uint64_t v18 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      CLConnection::getName(*(CLConnection **)(a1 + 8));
      __int128 v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      int v29 = "";
      __int16 v30 = 2082;
      __int16 v31 = v19;
      __int16 v32 = 1026;
      BOOL v33 = v21;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#distributedSensing Error obtaining subscription key",  "{msg%{public}.0s:#distributedSensing Error obtaining subscription key, client:%{public, location:esc ape_only}s, subscribe:%{public}hhd}",  buf,  0x22u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v20 = *a2;
    uint64_t v25 = CMErrorMessage;
    char v26 = &off_1018D44F0;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL);
    CLConnectionMessage::sendReply(v20);
  }

  sub_1002A5590(v22);
LABEL_46:
}

void sub_100CC6DA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_100CC6E10(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_100CC6E3C@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x70uLL);
  double result = sub_100215340(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100CC6E88(_Unwind_Exception *a1)
{
}

uint64_t sub_100CC6EB0()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10199D828, (void *)&_mh_execute_header);
}

void *sub_100CC6EF4(void *a1)
{
  *a1 = off_10187D650;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 0LL;
  uint64_t v2 = sub_1006E27E8();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  double v4[2] = sub_100CC6F84;
  v4[3] = &unk_10181D3D0;
  void v4[4] = a1;
  sub_1006E28B8(v2, (uint64_t)v4);
  return a1;
}

void sub_100CC6F70(_Unwind_Exception *a1)
{
}

BOOL sub_100CC6F84(uint64_t a1)
{
  return sub_100CC6F8C(*(void *)(a1 + 32));
}

BOOL sub_100CC6F8C(uint64_t a1)
{
  BOOL v2 = sub_1004F962C();
  if (v2)
  {
    if (!*(void *)(a1 + 8))
    {
      uint64_t v3 = (uint64_t *)sub_10071542C();
      uint64_t v11 = 0x160000FF0CLL;
      char v12 = 0;
      sub_10121B774(v3, (uint64_t)&v11, (uint64_t *)buf);
      sub_10005F550(a1 + 8, (__int128 *)buf);
      id v4 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v5 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      sub_100719D78(*(uint64_t **)(a1 + 8), (uint64_t)sub_100CC7254, a1);
    }
  }

  else
  {
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_10187D698);
    }
    char v7 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_10187D698);
      }
      v13[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  17LL,  "Service unavailable.",  v13,  2);
      double v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLSPUInertialOdometryInterface::openHidDevice()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  return v2;
}

void *sub_100CC71C0(void *a1)
{
  *a1 = off_10187D650;
  sub_10000AE14((uint64_t)(a1 + 1));
  return a1;
}

void *sub_100CC71F0(void *a1)
{
  *a1 = off_10187D650;
  sub_10000AE14((uint64_t)(a1 + 1));
  return a1;
}

void sub_100CC7220(void *a1)
{
  *a1 = off_10187D650;
  sub_10000AE14((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_100CC7254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100CC725C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int64_t v15 = 0LL;
    v16[0] = 0LL;
    IOHIDEventGetVendorDefinedData(a2, v16, &v15);
    if (v16[0]) {
      BOOL v4 = v15 <= 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      unint64_t TimeStamp = IOHIDEventGetTimeStamp(a2);
      double v13 = sub_101171C7C(TimeStamp);
      sub_100CC7544(a1, v16[0], v15, v13);
      return;
    }

    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_10187D698);
    }
    uint64_t v5 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_10187D698);
      }
      __int16 v14 = 0;
      double v6 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  1LL,  "Empty payload, returning",  &v14,  2);
      unint64_t v8 = v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)",  "%s\n",  v6);
LABEL_23:
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_10187D698);
    }
    int v9 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_10187D698);
      }
      LOWORD(v16[0]) = 0;
      double v10 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934798,  17LL,  "Event ref invalid",  v16,  2);
      unint64_t v8 = v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)",  "%s\n",  v10);
      goto LABEL_23;
    }
  }

void sub_100CC7544(uint64_t a1, unsigned __int8 *a2, size_t a3, double a4)
{
  *(double *)(a1 + 24) = a4;
  sub_1009832F8(__dst, a2, a3);
  if (a3) {
    int v7 = *a2;
  }
  else {
    int v7 = 0;
  }
  if (qword_101934790 != -1) {
    dispatch_once(&qword_101934790, &stru_10187D698);
  }
  unint64_t v8 = (os_log_s *)qword_101934798;
  if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_DEBUG))
  {
    int buf = 67240448;
    int v22 = v7;
    __int16 v23 = 2050;
    size_t v24 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "type,%{public}d,size,%{public}lu",  (uint8_t *)&buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_10187D698);
    }
    int v17 = 67240448;
    int v18 = v7;
    __int16 v19 = 2050;
    size_t v20 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934798,  2LL,  "type,%{public}d,size,%{public}lu",  &v17,  18);
    double v13 = (int *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSPUInertialOdometryInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)",  "%s\n",  v12);
    if (v13 != &buf) {
      free(v13);
    }
  }

  if (v7 == 255)
  {
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_10187D698);
    }
    int v9 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_FAULT))
    {
      int buf = 67240448;
      int v22 = 255;
      __int16 v23 = 2050;
      size_t v24 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Bad report,type,%{public}d,size,%{public}lu",  (uint8_t *)&buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_10187D698);
      }
      int v17 = 67240448;
      int v18 = 255;
      __int16 v19 = 2050;
      size_t v20 = a3;
      LODWORD(v15) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934798,  17LL,  "Bad report,type,%{public}d,size,%{public}lu",  &v17,  v15);
LABEL_32:
      __int16 v14 = (int *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLSPUInertialOdometryInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)",  "%s\n",  v10);
      if (v14 != &buf) {
        free(v14);
      }
    }
  }

  else if ((sub_10067FA68(__dst, (void *)a1) & 1) == 0)
  {
    if (qword_101934790 != -1) {
      dispatch_once(&qword_101934790, &stru_10187D698);
    }
    uint64_t v11 = (os_log_s *)qword_101934798;
    if (os_log_type_enabled((os_log_t)qword_101934798, OS_LOG_TYPE_FAULT))
    {
      int buf = 67240192;
      int v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "CMInertialOdometryReport::visit() type %{public}d failed.",  (uint8_t *)&buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934790 != -1) {
        dispatch_once(&qword_101934790, &stru_10187D698);
      }
      int v17 = 67240192;
      int v18 = v7;
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934798,  17LL,  "CMInertialOdometryReport::visit() type %{public}d failed.",  &v17,  v15);
      goto LABEL_32;
    }
  }

void sub_100CC7998(id a1)
{
  qword_101934798 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

uint64_t sub_100CC79C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  uint64_t v8 = a1 + 40;
  sub_10001A504(a1 + 8, a3);
  sub_10001A504(v8, a4);
  sub_10001A504(a1 + 72, a5);
  *(void *)(a1 + 12sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  int v9 = +[NSURLSessionConfiguration defaultSessionConfiguration]( &OBJC_CLASS___NSURLSessionConfiguration,  "defaultSessionConfiguration");
  -[NSURLSessionConfiguration setAllowsCellularAccess:](v9, "setAllowsCellularAccess:", 1LL);
  *(void *)(a1 + 104) =  +[NSURLSession sessionWithConfiguration:]( &OBJC_CLASS___NSURLSession,  "sessionWithConfiguration:",  v9);
  return a1;
}

void sub_100CC7A74(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void **)(v2 + 64);
  if (v5 == v3)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = v3;
  }

  else
  {
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  int v7 = *(void **)(v2 + 32);
  if (v7 == v1)
  {
    uint64_t v8 = 4LL;
    int v7 = v1;
  }

  else
  {
    if (!v7) {
      goto LABEL_11;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CC7B2C(uint64_t a1)
{
  *(void *)(a1 + 104) = 0LL;
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2 == (void *)(a1 + 72))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 72);
  }

  else
  {
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
  BOOL v4 = *(void **)(a1 + 64);
  if (v4 == (void *)(a1 + 40))
  {
    uint64_t v5 = 4LL;
    BOOL v4 = (void *)(a1 + 40);
  }

  else
  {
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6 == (void *)(a1 + 8))
  {
    uint64_t v7 = 4LL;
    uint64_t v6 = (void *)(a1 + 8);
    goto LABEL_17;
  }

  if (v6)
  {
    uint64_t v7 = 5LL;
LABEL_17:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return a1;
}

void sub_100CC7C00(uint64_t a1, int a2)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  BOOL v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    sub_100775158(a2, __p);
    uint64_t v5 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#EED2Control,handleCommTypeChange,comm type changed to %{public}s",  buf,  0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    uint64_t v6 = qword_101934898;
    sub_100775158(a2, buf);
    if (v11 >= 0) {
      uint64_t v7 = buf;
    }
    else {
      uint64_t v7 = *(_BYTE **)buf;
    }
    int v12 = 136446210;
    double v13 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v6,  2LL,  "#EED2Control,handleCommTypeChange,comm type changed to %{public}s",  &v12,  12);
    int v9 = v8;
    if (v11 < 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2Control::handleCommTypeChange(Emergency::CommunicationType)",  "%s\n",  v9);
  }

  *(_DWORD *)(a1 + 112) = a2;
}

std::string *sub_100CC7E20(std::string *a1, const std::string *a2)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  BOOL v4 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136380675;
    double v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "#EED2Control,handleCompanionNumberChange,companion phone number changed to %{private}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v10 = 136380675;
    char v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#EED2Control,handleCompanionNumberChange,companion phone number changed to %{private}s",  &v10,  12);
    int v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2Control::handleCompanionNumberChange(const std::string &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  return std::string::operator=(a1 + 5, a2);
}

uint64_t sub_100CC7FF8( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  if (a3 && a6 && a5 && *(void *)(a8 + 24))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (!v14
      || (uint64_t v21 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 48LL))(v14),
          int v22 = sub_100CC8E78(a1, v21),
          __int16 v23 = v22,
          *(_DWORD *)int buf = v21,
          (uint64_t v24 = *(void *)(a1 + 64)) == 0))
    {
      sub_100008BDC();
    }

    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v24 + 48LL))(v24, buf);
    if (*(char *)(v25 + 159) < 0)
    {
      sub_1010DD48C(__p, *(void **)(v25 + 136), *(void *)(v25 + 144));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(v25 + 136);
      uint64_t v73 = *(void *)(v25 + 152);
    }

    if (v73 >= 0) {
      __int16 v28 = (void *)HIBYTE(v73);
    }
    else {
      __int16 v28 = __p[1];
    }
    if (!v28)
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      uint64_t v40 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,sendControlData,native number is empty, not sending control data",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        v71[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,sendControlData,native number is empty, not sending control data",  v71,  2);
        __int16 v63 = (uint8_t *)v62;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray <CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v62);
        if (v63 != buf) {
          free(v63);
        }
      }

      HIDWORD(v7sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 0;
LABEL_57:
      else {
        uint64_t v43 = *(unsigned __int8 *)(a1 + 143);
      }
      if (!v43 || byte_1019A4098)
      {
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        __int16 v53 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,sendControlData,companion number is empty or device supports alternate account, not sending control data",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10187D720);
          }
          v71[0] = 0;
          LODWORD(v7sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,sendControlData,companion number is empty or device supports alternate account, not sending control data",  v71,  v70);
          __int16 v67 = (uint8_t *)v66;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArr ay<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v66);
          if (v67 != buf) {
            free(v67);
          }
        }

        BOOL v50 = 0;
        goto LABEL_80;
      }

      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      double v44 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,sendControlData,sending control data for companion number",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        v71[0] = 0;
        LODWORD(v7sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,sendControlData,sending control data for companion number",  v71,  v70);
        __int16 v65 = (uint8_t *)v64;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray <CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v64);
        if (v65 != buf) {
          free(v65);
        }
      }

      uint64_t v45 = sub_100CC93C0(a1, (uint64_t *)(a1 + 120), a4, a5, a6);
      uint64_t v46 = (uint64_t)v45;
      if (v45 && (id v47 = -[NSMutableArray count](v45, "count")) != 0LL)
      {
        uint64_t v48 = sub_100CC9A08(a9, a10, (uint64_t)v47, a2, (uint64_t *)(a1 + 120), a3, v46, (uint64_t)v22, a7);
        uint64_t v49 = v48;
        if (v48 && -[NSMutableDictionary count](v48, "count"))
        {
          sub_10001A504((uint64_t)v74, a8);
          BOOL v50 = sub_100CC9E0C(a1, 1, (uint64_t)v49, (uint64_t)v74);
          double v51 = v75;
          if (v75 == v74)
          {
            uint64_t v52 = 4LL;
            double v51 = v74;
          }

          else
          {
            if (!v75)
            {
LABEL_100:

LABEL_80:
              uint64_t v27 = HIDWORD(v70) | v50;
              goto LABEL_95;
            }

            uint64_t v52 = 5LL;
          }

          (*(void (**)(void))(*v51 + 8 * v52))();
          goto LABEL_100;
        }

        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        uint64_t v56 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "#EED2Control,sendControlData,nil or empty companionNumberDict,early return",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0))
        {
LABEL_94:
          uint64_t v27 = 0LL;
LABEL_95:
          if (SHIBYTE(v73) < 0) {
            operator delete(__p[0]);
          }
          return v27;
        }

        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        v71[0] = 0;
        LODWORD(v7sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,sendControlData,nil or empty companionNumberDict,early return",  v71,  v70);
        __int16 v39 = (uint8_t *)v68;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray <CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v68);
      }

      else
      {
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        unint64_t v54 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "#EED2Control,sendControlData,fCompanionNumber,nil or empty perPartnerDataArray,early return",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_94;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        v71[0] = 0;
        LODWORD(v7sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,sendControlData,fCompanionNumber,nil or empty perPartnerDataArray,early return",  v71,  v70);
        __int16 v39 = (uint8_t *)v55;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray <CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v55);
      }

void sub_100CC8DCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSMutableDictionary *sub_100CC8E78(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)int buf = a2;
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    sub_100008BDC();
  }
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v3 + 48LL))(v3, buf);
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2),  @"sim");
  -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *v5),  @"rat");
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7) {
    sub_100008BDC();
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48LL))(v7);
  sub_1010DDBC0(__p, "carrier");
  int v9 = sub_100757034(v8, a2, (uint64_t *)__p);
  else {
    __uuid_t dst = *(std::string *)(v9 + 4);
  }
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = __dst.__r_.__value_.__s.__size_;
  signed __int8 v11 = __dst.__r_.__value_.__s.__size_;
  if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    signed __int8 v11 = __dst.__r_.__value_.__s.__size_;
  }

  if (v11 >= 0) {
    p_uuid_t dst = &__dst;
  }
  else {
    p_uuid_t dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_dst),  @"sim_bundle_id");
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13) {
    sub_100008BDC();
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48LL))(v13);
  sub_1010DDBC0(v32, "operator");
  char v15 = sub_100757034(v14, a2, (uint64_t *)v32);
  else {
    std::string v34 = *(std::string *)(v15 + 4);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  std::string::size_type v16 = v34.__r_.__value_.__s.__size_;
  signed __int8 v17 = v34.__r_.__value_.__s.__size_;
  if ((v34.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v16 = v34.__r_.__value_.__l.__size_;
  }
  if (!v16)
  {
    std::string::assign(&v34, "Unavailable");
    signed __int8 v17 = v34.__r_.__value_.__s.__size_;
  }

  if (v17 >= 0) {
    int v18 = &v34;
  }
  else {
    int v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18),  @"operator_bundle_id");
  __int16 v19 = (__CFString *)sub_100BF5BD8();
  -[NSMutableDictionary setValue:forKey:](v6, "setValue:forKey:", v19, @"sim_country");
  size_t v20 = (__CFString *)sub_100BF5BD8();
  -[NSMutableDictionary setValue:forKey:](v6, "setValue:forKey:", v20, @"operator_country");
  sub_1004F2598();
  uint64_t v21 = sub_1004F5C4C();
  -[NSMutableDictionary setValue:forKey:]( v6,  "setValue:forKey:",  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v21),  @"release_type");
  sub_1004F2598();
  sub_1004F6370((uint64_t)buf);
  if (v42 >= 0) {
    int v22 = buf;
  }
  else {
    int v22 = *(uint8_t **)buf;
  }
  __int16 v23 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v22);
  if (SHIBYTE(v42) < 0) {
    operator delete(*(void **)buf);
  }
  -[NSMutableDictionary setValue:forKey:](v6, "setValue:forKey:", v23, @"product_type");
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  uint64_t v24 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v31 = *v5;
    if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v25 = &__dst;
    }
    else {
      uint64_t v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    id v26 = -[__CFString UTF8String](v19, "UTF8String");
    if ((v34.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v27 = &v34;
    }
    else {
      uint64_t v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    id v28 = -[__CFString UTF8String](v20, "UTF8String");
    int v29 = -[NSString UTF8String](v23, "UTF8String");
    *(_DWORD *)int buf = 68291075;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v39 = 2082;
    uint64_t v40 = "";
    __int16 v41 = 1026;
    int v42 = a2;
    __int16 v43 = 1026;
    unsigned int v44 = v31;
    __int16 v45 = 2082;
    uint64_t v46 = v25;
    __int16 v47 = 2082;
    id v48 = v26;
    __int16 v49 = 2082;
    BOOL v50 = v27;
    __int16 v51 = 2082;
    id v52 = v28;
    __int16 v53 = 1026;
    int v54 = v21;
    __int16 v55 = 2081;
    uint64_t v56 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#EED2Control,createControlInternalDict, sim:%{public}d, rat:%{public}d, sim_bun dle_id:%{public, location:escape_only}s, sim_country:%{public, location:escape_only}s, operator_bundle_id :%{public, location:escape_only}s, operator_country:%{public, location:escape_only}s, release_type:%{publi c}d, product_type:%{private, location:escape_only}s}",  buf,  0x56u);
  }

  return v6;
}

void sub_100CC9324( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_100CC93C0(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  if (a4 && a5)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_100008BDC();
    }
    signed __int8 v11 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 48LL))(v7);
    int v12 = sub_100756E48(v11);
    sub_100781FD0((uint64_t)v32, (uint64_t)(v12 + 20));
    id v13 = +[CLEEDCryptoUtilities copyPublicKeyFromPrivateKey:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "copyPublicKeyFromPrivateKey:",  a5);
    if (v13)
    {
      id v14 = +[CLEEDCryptoUtilities getKeyExternalRepresentation:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "getKeyExternalRepresentation:",  v13);
      CFRelease(v13);
      if (v14)
      {
        char v15 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v34);
        for (uint64_t i = v33; i; uint64_t i = (void *)*i)
        {
          id v17 = sub_100CCA718(a1, (uint64_t)(i + 5), (uint64_t)v14, a3, a2, a4);
          if (v17)
          {
            -[NSMutableArray addObject:](v15, "addObject:", v17);
          }

          else
          {
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_10187D720);
            }
            int v18 = (os_log_s *)qword_101934898;
            if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedControlData,nil perPartnerControlDataDict,ignore and continue",  buf,  2u);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_10187D720);
              }
              v31[0] = 0;
              LODWORD(v3sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedControlData,nil perPartnerControlDataDict,ignore and continue",  v31,  v30);
              size_t v20 = (uint8_t *)v19;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)",  "%s\n",  v19);
              if (v20 != buf) {
                free(v20);
              }
            }
          }
        }

        goto LABEL_40;
      }

      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      uint64_t v25 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKeyRep,early return",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0))
      {
LABEL_39:
        char v15 = 0LL;
LABEL_40:
        sub_100782514((uint64_t)v32);
        return v15;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v31[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKeyRep,early return",  v31,  2);
      uint64_t v24 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsol uteTime, NSData *, SecKeyRef)",  "%s\n",  v29);
    }

    else
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      int v22 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKey,early return",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_39;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v31[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKey,early return",  v31,  2);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsol uteTime, NSData *, SecKeyRef)",  "%s\n",  v23);
    }

    if (v24 != buf) {
      free(v24);
    }
    goto LABEL_39;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  uint64_t v21 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedControlData,one more more input parameters is nil,early return",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    v32[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedControlData,one more more input parameters is nil,early return",  v32,  2);
    id v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsolut eTime, NSData *, SecKeyRef)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  return 0LL;
}

void sub_100CC99D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

NSMutableDictionary *sub_100CC9A08( double a1, double a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *((unsigned __int8 *)a5 + 23);
  if ((v9 & 0x80u) != 0LL) {
    uint64_t v9 = a5[1];
  }
  if (a8 && a7 && a6 && v9)
  {
    unint64_t v17 = sub_100775134();
    int v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    else {
      __int16 v19 = (uint64_t *)*a5;
    }
    -[NSMutableDictionary setValue:forKey:]( v18,  "setValue:forKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19),  @"call_ID");
    -[NSMutableDictionary setValue:forKey:]( v18,  "setValue:forKey:",  +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v17),  @"session_start_time");
    if (a2 > 0.0) {
      -[NSMutableDictionary setValue:forKey:]( v18,  "setValue:forKey:",  +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", sub_100775134()),  @"session_end_time");
    }
    -[NSMutableDictionary setValue:forKey:](v18, "setValue:forKey:", a6, @"location");
    if (a4) {
      size_t v20 = (__CFString *)objc_msgSend(a4, "__imHexString");
    }
    else {
      size_t v20 = &stru_1018A4B00;
    }
    -[NSMutableDictionary setValue:forKey:](v18, "setValue:forKey:", v20, @"apns_token");
    -[NSMutableDictionary setValue:forKey:](v18, "setValue:forKey:", @"1", @"data_version");
    if (byte_10199D887 >= 0) {
      int v22 = &qword_10199D870;
    }
    else {
      int v22 = (uint64_t *)qword_10199D870;
    }
    -[NSMutableDictionary setValue:forKey:]( v18,  "setValue:forKey:",  a7,  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v22));
    -[NSMutableDictionary setValue:forKey:](v18, "setValue:forKey:", a8, @"internal");
    if (a9) {
      -[NSMutableDictionary setValue:forKey:](v18, "setValue:forKey:", a9, @"capabilities");
    }
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    __int16 v23 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = -[__CFString UTF8String](v20, "UTF8String");
      else {
        uint64_t v25 = (uint64_t *)*a5;
      }
      *(_DWORD *)int buf = 68289795;
      int v31 = 0;
      __int16 v32 = 2082;
      char v33 = "";
      __int16 v34 = 2081;
      id v35 = v24;
      __int16 v36 = 2081;
      __int16 v37 = v25;
      __int16 v38 = 2050;
      unint64_t v39 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#EED2Control,createControlDataDict, APNS Token:%{private, location:escape_only}s,  phone number:%{private, location:escape_only}s, session start time:%{public}lld}",  buf,  0x30u);
    }
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    uint64_t v21 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "#EED2Control,createControlDict,missing required info for forming control data POST dict",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v29[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,createControlDict,missing required info for forming control data POST dict",  v29,  2);
      id v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSDictionary *CLEmergencyEED2Control::createControlDict(NSData *, const std::string &, CFAbsoluteTime, CFAbsolut eTime, NSDictionary *, NSArray *, NSDictionary *, NSArray *) const",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }

    return 0LL;
  }

  return v18;
}

BOOL sub_100CC9E0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    int v12 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "#EED2Control,postControlData,nil controlDataDict,early return",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,postControlData,nil controlDataDict,early return",  __p,  2);
    id v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const",  "%s\n",  v13);
    goto LABEL_51;
  }

  uint64_t v7 = sub_100775488(a3);
  if (!v7)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    char v15 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "#EED2Control,postControlData,failed to serialize control data dict into JSON",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,postControlData,failed to serialize control data dict into JSON",  __p,  2);
    id v14 = (uint8_t *)v32;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const",  "%s\n",  v32);
LABEL_51:
    if (v14 != buf) {
      free(v14);
    }
    return 0LL;
  }

  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    sub_100008BDC();
  }
  int v10 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48LL))(v9);
  signed __int8 v11 = sub_100756E48(v10);
  if (*((char *)v11 + 135) < 0)
  {
    sub_1010DD48C(__p, (void *)v11[14], v11[15]);
  }

  else
  {
    *(_OWORD *)std::stringbuf::string_type __p = *((_OWORD *)v11 + 7);
    uint64_t v36 = v11[16];
  }

  if (v36 >= 0) {
    unint64_t v17 = __p;
  }
  else {
    unint64_t v17 = (void **)__p[0];
  }
  __int16 v34 = +[NSMutableURLRequest requestWithURL:]( &OBJC_CLASS___NSMutableURLRequest,  "requestWithURL:",  +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17)));
  -[NSMutableURLRequest setHTTPMethod:](v34, "setHTTPMethod:", @"POST");
  sub_100CCC238(a1 + 72, (uint64_t)v8, (uint64_t)&v34);
  uint64_t v18 = *(void *)(a1 + 104);
  BOOL v16 = v18 != 0;
  if (!v18)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    id v28 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_FAULT,  "#EED2Control,postControlData,missing NSURLSession",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      __int16 v33 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  17LL,  "#EED2Control,postControlData,missing NSURLSession",  &v33,  2);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    goto LABEL_45;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  __int16 v19 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = SHIBYTE(v36);
    uint64_t v21 = (void **)__p[0];
    id v22 = -[NSData length](v8, "length");
    *(_DWORD *)int buf = 68289539;
    __int16 v23 = __p;
    if (v20 < 0) {
      __int16 v23 = v21;
    }
    int v42 = 0;
    __int16 v43 = 2082;
    unsigned int v44 = "";
    __int16 v45 = 2081;
    uint64_t v46 = v23;
    __int16 v47 = 2049;
    id v48 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#EED2Control,postControlData,sending Control Data POST, URL:%{private, location:escap e_only}s, length:%{private}lld}",  buf,  0x26u);
  }

  id v24 = *(void **)(a1 + 104);
  uint64_t v25 = v34;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3321888768LL;
  v37[2] = sub_100CCC274;
  uint64_t v37[3] = &unk_10187D6F0;
  v37[4] = a1;
  int v40 = a2;
  id v26 = v38;
  sub_10001A504((uint64_t)v38, a4);
  objc_msgSend(objc_msgSend(v24, "uploadTaskWithRequest:fromData:completionHandler:", v25, v8, v37), "resume");
  if (v39 == v38)
  {
    uint64_t v27 = 4LL;
  }

  else
  {
    if (!v39) {
      goto LABEL_45;
    }
    uint64_t v27 = 5LL;
    id v26 = v39;
  }

  (*(void (**)(void *))(*v26 + 8 * v27))(v26);
LABEL_45:
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  return v16;
}

void sub_100CCA43C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_100CCA4AC(uint64_t a1, void *a2, void *a3)
{
  if ([a2 count])
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v6 = [a2 countByEnumeratingWithState:&v15 objects:v20 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(a2);
          }
          int v10 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        }

        id v7 = [a2 countByEnumeratingWithState:&v15 objects:v20 count:16];
      }

      while (v7);
    }
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    signed __int8 v11 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#EED2,createResponseData, no EED Requests, nil responseData",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v19[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,createResponseData, no EED Requests, nil responseData",  v19,  2);
      id v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray *CLEmergencyEED2Control::createResponseData(NSArray<CLEEDRequest *> *, NSString *) const",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    return 0LL;
  }

  return v5;
}

id sub_100CCA718(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (!a3 || !a6)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    id v26 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "#EED2Control,getPerPartnerControlDataDict,one more more input parameters is nil,early return",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    *(_WORD *)__int16 v41 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getPerPartnerControlDataDict,one more more input parameters is nil,early return",  v41,  2,  *(void *)v41);
    goto LABEL_70;
  }

  id v12 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  else {
    uint64_t v13 = *(void *)a2;
  }
  id v14 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13);
  [v12 setValue:v14 forKey:kEEDPartnerIDKey];
  id v15 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (byte_10199D857 >= 0) {
    __int128 v16 = &qword_10199D840;
  }
  else {
    __int128 v16 = (uint64_t *)qword_10199D840;
  }
  __int128 v17 = sub_100CCADC4( (uint64_t)objc_msgSend( v15,  "setValue:forKey:",  a3,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)),  (uint64_t *)a2,  a5,  a6);
  if (!v17)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    id v28 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "#EED2Control,getPerPartnerControlDataDict,nil deviceSessionSecretForPartner,early return",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    *(_WORD *)__int16 v41 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getPerPartnerControlDataDict,nil deviceSessionSecretForPartner,early return",  v41,  2,  *(void *)v41);
    goto LABEL_70;
  }

  id v18 = [v17 base64EncodedStringWithOptions:0];
  if (byte_10199D86F >= 0) {
    __int16 v19 = &qword_10199D858;
  }
  else {
    __int16 v19 = (uint64_t *)qword_10199D858;
  }
  objc_msgSend( v15,  "setValue:forKey:",  v18,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
  else {
    uint64_t v20 = *(void *)a2;
  }
  uint64_t v21 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v20);
  id v22 = sub_100CCA4AC((uint64_t)v21, a4, v21);
  __int16 v23 = v22;
  if (-[NSMutableArray count](v22, "count"))
  {
    if (byte_10199D89F >= 0) {
      id v24 = &qword_10199D888;
    }
    else {
      id v24 = (uint64_t *)qword_10199D888;
    }
    objc_msgSend( v15,  "setValue:forKey:",  v22,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24));
  }

  uint64_t v25 = (void *)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    if (!*(void *)(a2 + 64)) {
      goto LABEL_46;
    }
    uint64_t v25 = (void *)*v25;
  }

  else if (!*(_BYTE *)(a2 + 79))
  {
    goto LABEL_46;
  }

  int v29 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v25);
  if (byte_10199D8B7 >= 0) {
    uint64_t v30 = &qword_10199D8A0;
  }
  else {
    uint64_t v30 = (uint64_t *)qword_10199D8A0;
  }
  objc_msgSend( v15,  "setValue:forKey:",  v29,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30));
LABEL_46:
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  int v31 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138412290;
    id v43 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,getPerPartnerControlDataDict,partner control data (pre-encryption),%@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    *(_DWORD *)__int16 v41 = 138412290;
    *(void *)&v41[4] = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,getPerPartnerControlDataDict,partner control data (pre-encryption),%@",  v41,  12);
    __int16 v38 = (uint8_t *)v37;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSDictionary *CLEmergencyEED2Control::getPerPartnerControlDataDict(const CLEEDPartnerInfo &, NSString *, NSArray<C LEEDRequest *> *, const std::string &, CFAbsoluteTime, NSData *) const",  "%s\n",  v37);
    if (v38 != buf) {
      free(v38);
    }
  }

  id v32 = sub_100CCB7EC(a1, a2, (uint64_t)v15, a5);
  if (!v32)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    id v35 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "#EED2Control,getPerPartnerControlDataDict,nil encryptedPartnerControlData,early return",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    *(_WORD *)__int16 v41 = 0;
    LODWORD(v4sub_10023AE2C(v5, "OverrideSkiLiftDetectionForSeconds", &dword_10199D590, 0) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getPerPartnerControlDataDict,nil encryptedPartnerControlData,early return",  v41,  v40,  *(void *)v41);
LABEL_70:
    unint64_t v39 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSDictionary *CLEmergencyEED2Control::getPerPartnerControlDataDict(const CLEEDPartnerInfo &, NSString *, NSArray<C LEEDRequest *> *, const std::string &, CFAbsoluteTime, NSData *) const",  "%s\n",  v27);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  id v33 = [v32 base64EncodedStringWithOptions:0];
  if (byte_10199D8CF >= 0) {
    __int16 v34 = &qword_10199D8B8;
  }
  else {
    __int16 v34 = (uint64_t *)qword_10199D8B8;
  }
  objc_msgSend( v12,  "setValue:forKey:",  v33,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
  return v12;
}

uint64_t *sub_100CCADC4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (!a4)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    int v29 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "#EED2Control,getDeviceSessionSecretForPartner,nil rootSecret,early return",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(v47) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getDeviceSessionSecretForPartner,nil rootSecret,early return",  &v47,  2);
    goto LABEL_104;
  }

  id v6 = (NSMutableData *)+[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "getSessionIDWithPhoneNumber:sessionStartTime:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3),  sub_100775134());
  id v7 = sub_1007536D4(a2 + 3);
  if (!v7)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    uint64_t v30 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      else {
        int v31 = (NSMutableData *)*a2;
      }
      *(_DWORD *)int buf = 136446210;
      int v54 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#EED2Control,getDeviceSessionSecretForPartner unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    else {
      id v32 = (NSMutableData *)*a2;
    }
    int v47 = 136446210;
    id v48 = v32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getDeviceSessionSecretForPartner unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s",  &v47,  12);
    goto LABEL_104;
  }

  uint64_t v8 = v7;
  uint64_t v9 = SecCertificateCopyKey(v7);
  if (!v9)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    id v33 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "#EED2Control,getDeviceSessionSecretForPartner,nil publicKey obtained from SecCertificateCopyKey,early return",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      LOWORD(v47) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getDeviceSessionSecretForPartner,nil publicKey obtained from SecCertificateCopyKey,early return",  &v47,  2);
      id v43 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const",  "%s\n",  v42);
      if (v43 != buf) {
        free(v43);
      }
    }

    CFRelease(v8);
    return 0LL;
  }

  int v10 = v9;
  CFErrorRef error = 0LL;
  CFDataRef v11 = SecKeyCopyExternalRepresentation(v9, &error);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  id v12 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v13 = (uint64_t *)*a2;
    }
    id v14 = &qword_10199D8D0;
    if (byte_10199D8E7 < 0) {
      id v14 = (uint64_t *)qword_10199D8D0;
    }
    *(_DWORD *)int buf = 138412802;
    int v54 = v6;
    __int16 v55 = 2080;
    uint64_t v56 = v13;
    __int16 v57 = 2080;
    int v58 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,getDeviceSessionSecretForPartner,session ID = %@, partner ID = %s, device session secret const string = %s",  buf,  0x20u);
  }

  if (!sub_1002921D0(115, 2))
  {
    if (v11) {
      goto LABEL_17;
    }
LABEL_86:
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    __int16 v38 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "#EED2Control,getDeviceSessionSecretForPartner,nil adrPublicKeyRep,early return",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(v47) = 0;
    LODWORD(v45) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getDeviceSessionSecretForPartner,nil adrPublicKeyRep,early return",  &v47,  v45);
    goto LABEL_104;
  }

  bzero(buf, 0x65CuLL);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  else {
    __int16 v34 = (uint64_t *)*a2;
  }
  id v35 = &qword_10199D8D0;
  if (byte_10199D8E7 < 0) {
    id v35 = (uint64_t *)qword_10199D8D0;
  }
  int v47 = 138412802;
  id v48 = v6;
  __int16 v49 = 2080;
  BOOL v50 = v34;
  __int16 v51 = 2080;
  id v52 = v35;
  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,getDeviceSessionSecretForPartner,session ID = %@, partner ID = %s, device session secret const string = %s",  &v47,  32);
  __int16 v37 = (uint8_t *)v36;
  sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAb soluteTime, NSData *) const",  "%s\n",  v36);
  if (v37 != buf) {
    free(v37);
  }
  if (!v11) {
    goto LABEL_86;
  }
LABEL_17:
  id v15 = -[NSMutableData length](v6, "length");
  else {
    uint64_t v16 = a2[1];
  }
  __int128 v17 = &v15[(void)-[__CFData length](v11, "length") + v16];
  uint64_t v18 = byte_10199D8E7;
  if (byte_10199D8E7 < 0) {
    uint64_t v18 = qword_10199D8D8;
  }
  __int16 v19 = +[NSMutableData dataWithCapacity:](&OBJC_CLASS___NSMutableData, "dataWithCapacity:", &v17[v18]);
  -[NSMutableData appendData:](v19, "appendData:", v6);
  int v20 = *((char *)a2 + 23);
  if (v20 >= 0) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = (uint64_t *)*a2;
  }
  if (v20 >= 0) {
    uint64_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v22 = a2[1];
  }
  -[NSMutableData appendBytes:length:](v19, "appendBytes:length:", v21, v22);
  -[NSMutableData appendData:](v19, "appendData:", v11);
  if (byte_10199D8E7 >= 0) {
    __int16 v23 = &qword_10199D8D0;
  }
  else {
    __int16 v23 = (uint64_t *)qword_10199D8D0;
  }
  if (byte_10199D8E7 >= 0) {
    uint64_t v24 = byte_10199D8E7;
  }
  else {
    uint64_t v24 = qword_10199D8D8;
  }
  -[NSMutableData appendBytes:length:](v19, "appendBytes:length:", v23, v24);

  uint64_t v25 = (uint64_t *)+[CLEEDCryptoUtilities getDerivedKeyWithLength:secretData:additionalInfo:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "getDerivedKeyWithLength:secretData:additionalInfo:",  32LL,  a4,  v19);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  id v26 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138412802;
    int v54 = v19;
    __int16 v55 = 2112;
    uint64_t v56 = a4;
    __int16 v57 = 2112;
    int v58 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,getDeviceSessionSecretForPartner,additional info = %@, root secret = %@, device device session secret for partner = %@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    int v47 = 138412802;
    id v48 = v19;
    __int16 v49 = 2112;
    BOOL v50 = a4;
    __int16 v51 = 2112;
    id v52 = v25;
    LODWORD(v45) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,getDeviceSessionSecretForPartner,additional info = %@, root secret = %@, device device session secret for partner = %@",  &v47,  v45);
    __int16 v41 = (uint8_t *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CF AbsoluteTime, NSData *) const",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

  CFRelease(v8);
  CFRelease(v10);
  if (!v25)
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    uint64_t v27 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "#EED2Control,getDeviceSessionSecretForPartner,nil deviceSessionSecret",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(v47) = 0;
    LODWORD(v45) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getDeviceSessionSecretForPartner,nil deviceSessionSecret",  &v47,  v45);
LABEL_104:
    unsigned int v44 = (uint8_t *)v28;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CF AbsoluteTime, NSData *) const",  "%s\n",  v28);
    if (v44 != buf) {
      free(v44);
    }
    return 0LL;
  }

  return v25;
}

id sub_100CCB7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (!v4) {
      sub_100008BDC();
    }
    uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 48LL))(v4);
    uint64_t v9 = sub_100756E48(v8);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1010DD48C(__p, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)a2;
      uint64_t v48 = *(void *)(a2 + 16);
    }

    sub_100752D3C((int *)v9, (unsigned __int8 *)__p, (uint64_t)v49);
    if (SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v12 = v50;
    if ((v50 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v49[1];
    }
    if (v12)
    {
      uint64_t v13 = sub_1007536D4((uint64_t *)(a2 + 24));
      id v14 = v13;
      if (v13)
      {
        SecKeyRef v15 = SecCertificateCopyKey(v13);
        if (!v15)
        {
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10187D720);
          }
          __int16 v38 = (os_log_s *)qword_101934898;
          if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedPartnerControlData,nil partnerKey obtained from SecCertificateCopyKey,early return",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_10187D720);
            }
            LOWORD(vsub_100C69D48(v2 + 51) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedPartnerControlData,nil partnerKey obtained from SecCertificateCopyKey,early return",  &v51,  2);
            unsigned int v44 = (uint8_t *)v43;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, c onst std::string &, CFAbsoluteTime) const",  "%s\n",  v43);
            if (v44 != buf) {
              free(v44);
            }
          }

          CFRelease(v14);
          goto LABEL_82;
        }

        id v16 = +[CLEEDCryptoUtilities getKeyFingerprint:](&OBJC_CLASS___CLEEDCryptoUtilities, "getKeyFingerprint:", v15);
        if (!v16)
        {
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10187D720);
          }
          unint64_t v39 = (os_log_s *)qword_101934898;
          if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedPartnerControlData,nil keyFingerprint obtained from getKeyFingerprint,early return",  buf,  2u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_10187D720);
            }
            LOWORD(vsub_100C69D48(v2 + 51) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedPartnerControlData,nil keyFingerprint obtained from getKeyFingerprint,early return",  &v51,  2);
            uint64_t v46 = (uint8_t *)v45;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, c onst std::string &, CFAbsoluteTime) const",  "%s\n",  v45);
            if (v46 != buf) {
              free(v46);
            }
          }

          CFRelease(v14);
          CFRelease(v15);
          goto LABEL_82;
        }

        __int128 v17 = sub_100775488(a3);
        else {
          uint64_t v18 = (uint64_t *)*a4;
        }
        id v19 = +[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "getSessionIDWithPhoneNumber:sessionStartTime:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v18),  sub_100775134());
        int v20 = (char *)[v19 length];
        uint64_t v21 = &v20[(void)[v16 length]];
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
        if ((v22 & 0x80u) != 0LL) {
          uint64_t v22 = *(void *)(a2 + 8);
        }
        __int16 v23 = +[NSMutableData dataWithCapacity:](&OBJC_CLASS___NSMutableData, "dataWithCapacity:", &v21[v22]);
        -[NSMutableData appendData:](v23, "appendData:", v19);
        -[NSMutableData appendData:](v23, "appendData:", v16);
        int v24 = *(char *)(a2 + 23);
        if (v24 >= 0) {
          uint64_t v25 = (void *)a2;
        }
        else {
          uint64_t v25 = *(void **)a2;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v26 = *(void *)(a2 + 8);
        }
        -[NSMutableData appendBytes:length:](v23, "appendBytes:length:", v25, v26);
        id v11 = +[CLEEDCryptoUtilities getECIESEncryptedData:key:sharedInfo:prependKeyFingerprint:]( &OBJC_CLASS___CLEEDCryptoUtilities,  "getECIESEncryptedData:key:sharedInfo:prependKeyFingerprint:",  v17,  v15,  v23,  1LL);
        CFRelease(v14);
        CFRelease(v15);
        if (v11) {
          goto LABEL_83;
        }
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        uint64_t v27 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedPartnerControlData,nil encryptedPartnerControlData obtained from getECIESEncryptedData",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0))
        {
LABEL_82:
          id v11 = 0LL;
LABEL_83:
          return v11;
        }

        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        LOWORD(vsub_100C69D48(v2 + 51) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedPartnerControlData,nil encryptedPartnerControlData obtained from getECIESEncryptedData",  &v51,  2);
        int v29 = (uint8_t *)v28;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const",  "%s\n",  v28);
      }

      else
      {
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        __int16 v34 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
        {
          else {
            id v35 = *(void **)a2;
          }
          *(_DWORD *)int buf = 136446210;
          int v54 = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedPartnerControlData unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_82;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10187D720);
        }
        else {
          uint64_t v36 = *(void **)a2;
        }
        int v51 = 136446210;
        id v52 = v36;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedPartnerControlData unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s",  &v51,  12);
        int v29 = (uint8_t *)v37;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const",  "%s\n",  v37);
      }
    }

    else
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      uint64_t v30 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        else {
          int v31 = *(void **)a2;
        }
        *(_DWORD *)int buf = 136315138;
        int v54 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedPartnerControlData,valid cert not found for partner: %s",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_82;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      else {
        id v32 = *(void **)a2;
      }
      int v51 = 136315138;
      id v52 = v32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedPartnerControlData,valid cert not found for partner: %s",  (const char *)&v51);
      int v29 = (uint8_t *)v33;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const s td::string &, CFAbsoluteTime) const",  "%s\n",  v33);
    }

    if (v29 != buf) {
      free(v29);
    }
    goto LABEL_82;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  int v10 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#EED2Control,getEncryptedPartnerControlData,nil partnerControlData,early return",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(v49[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,getEncryptedPartnerControlData,nil partnerControlData,early return",  v49,  2);
    int v42 = (uint8_t *)v41;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std ::string &, CFAbsoluteTime) const",  "%s\n",  v41);
    if (v42 != buf) {
      free(v42);
    }
  }

  return 0LL;
}