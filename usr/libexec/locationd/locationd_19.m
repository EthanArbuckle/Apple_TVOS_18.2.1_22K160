void sub_10089BBD4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  v2 = __p + 8;
  v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4LL;
    v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089BC24(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089BC2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089BC68()
{
}

void sub_10089BC74(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089BCFC(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089BCE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089BCFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089BF24((void **)a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089BEFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089BF24(void **a1)
{
  *(void *)buf = &v8;
  v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"21CLGestureSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x98uLL);
    sub_10070A2B4((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_1012510DC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089C0CC(_Unwind_Exception *a1)
{
}

void *sub_10089C0E8(void *a1)
{
  *a1 = &off_10185BEA0;
  v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089C148(char *__p)
{
  *(void *)__p = &off_10185BEA0;
  v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089C1A8(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BEA0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089C200(_Unwind_Exception *a1)
{
}

uint64_t sub_10089C214(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BEA0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089C258(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089C28C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089C2DC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089C2E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089C320()
{
}

uint64_t sub_10089C32C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089C390(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089C418(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089C400( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089C418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089C640((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089C618( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089C640(void *a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"27CLActivityAlarmSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x60uLL);
    sub_10103B070(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_1012513AC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089C7E8(_Unwind_Exception *a1)
{
}

void *sub_10089C804(void *a1)
{
  *a1 = &off_10185BF20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089C864(char *__p)
{
  *(void *)__p = &off_10185BF20;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089C8C4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BF20;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089C91C(_Unwind_Exception *a1)
{
}

uint64_t sub_10089C930(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BF20;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089C974(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089C9A8(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089C9F8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089CA00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089CA3C()
{
}

uint64_t sub_10089CA48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089CAAC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089CB34(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089CB1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089CB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089CD5C((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089CD34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089CD5C(void *a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"29CLOnBodyDetectionSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x40uLL);
    sub_100D05CB8(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10125167C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089CF04(_Unwind_Exception *a1)
{
}

void *sub_10089CF20(void *a1)
{
  *a1 = &off_10185BFA0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089CF80(char *__p)
{
  *(void *)__p = &off_10185BFA0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089CFE0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BFA0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089D038(_Unwind_Exception *a1)
{
}

uint64_t sub_10089D04C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BFA0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089D090(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089D0C4(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089D114(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089D11C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089D158()
{
}

uint64_t sub_10089D164(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089D1C8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089D250(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089D238( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089D250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089D478((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089D450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089D478(void **a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"27CLSafetyAnomalySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x30uLL);
    sub_100BDF6FC((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10125194C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089D620(_Unwind_Exception *a1)
{
}

void *sub_10089D63C(void *a1)
{
  *a1 = &off_10185C020;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089D69C(char *__p)
{
  *(void *)__p = &off_10185C020;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089D6FC(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185C020;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089D754(_Unwind_Exception *a1)
{
}

uint64_t sub_10089D768(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185C020;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089D7AC(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089D7E0(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089D830(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089D838(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089D874()
{
}

uint64_t sub_10089D880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089D8E4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089D96C(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089D954( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089D96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089DB94((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089DB6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089DB94(void *a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"27CLIndoorOutdoorSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100B81EF8(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_101251C1C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089DD3C(_Unwind_Exception *a1)
{
}

void *sub_10089DD58(void *a1)
{
  *a1 = &off_10185C0A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089DDB8(char *__p)
{
  *(void *)__p = &off_10185C0A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089DE18(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185C0A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089DE70(_Unwind_Exception *a1)
{
}

uint64_t sub_10089DE84(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185C0A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089DEC8(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089DEFC(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089DF4C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089DF54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089DF90()
{
}

uint64_t sub_10089DF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089E000(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089E088(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089E070( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089E088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089E2B0((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089E288( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089E2B0(void *a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"20CLVO2MaxSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x40uLL);
    sub_100B8EF60(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_101251EEC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089E458(_Unwind_Exception *a1)
{
}

void *sub_10089E474(void *a1)
{
  *a1 = &off_10185C120;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089E4D4(char *__p)
{
  *(void *)__p = &off_10185C120;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089E534(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185C120;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089E58C(_Unwind_Exception *a1)
{
}

uint64_t sub_10089E5A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185C120;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089E5E4(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089E618(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089E668(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089E670(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089E6AC()
{
}

uint64_t sub_10089E6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089E71C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089E7A4(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089E78C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089E7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089E9CC((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089E9A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089E9CC(void **a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"21CLEclipseSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100E91ED0((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_1012521BC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089EB74(_Unwind_Exception *a1)
{
}

void *sub_10089EB90(void *a1)
{
  *a1 = &off_10185C1A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089EBF0(char *__p)
{
  *(void *)__p = &off_10185C1A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089EC50(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185C1A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089ECA8(_Unwind_Exception *a1)
{
}

uint64_t sub_10089ECBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185C1A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089ED00(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089ED34(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089ED84(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089ED8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089EDC8()
{
}

void sub_10089EDD4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089EE5C(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089EE44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089EE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089F084((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089F05C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089F084(void **a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"32CLProxPDPAndALSPhoneSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_10074E3CC((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10125248C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089F22C(_Unwind_Exception *a1)
{
}

void *sub_10089F248(void *a1)
{
  *a1 = &off_10185C220;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089F2A8(char *__p)
{
  *(void *)__p = &off_10185C220;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089F308(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185C220;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089F360(_Unwind_Exception *a1)
{
}

uint64_t sub_10089F374(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185C220;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089F3B8(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089F3EC(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089F43C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089F444(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089F480()
{
}

uint64_t sub_10089F48C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089F4F0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089F578(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089F560( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089F578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089F7A0((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089F778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089F7A0(void **a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"24CLMagicMountSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x30uLL);
    sub_100B0E868((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10125275C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089F948(_Unwind_Exception *a1)
{
}

void *sub_10089F964(void *a1)
{
  *a1 = &off_10185C2A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089F9C4(char *__p)
{
  *(void *)__p = &off_10185C2A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089FA24(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185C2A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089FA7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10089FA90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185C2A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089FAD4(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089FB08(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089FB58(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089FB60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089FB9C()
{
}

uint64_t sub_10089FBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089FC0C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089FC94(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089FC7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089FC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    v25 = "";
    __int16 v26 = 2082;
    v27 = "activity";
    __int16 v28 = 2082;
    v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_10089FEBC((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089FE94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089FEBC(void *a1)
{
  *(void *)buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"27CLBatchedSensorSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x138uLL);
    sub_100E415FC(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_101252A2C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_1008A0064(_Unwind_Exception *a1)
{
}

void *sub_1008A0088()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C320;
  return result;
}

void sub_1008A00AC(uint64_t a1, void *a2)
{
  *a2 = &off_10185C320;
}

void sub_1008A00C4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: LocationManager/kCLConnectionMessageRegistration",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    v19 = "";
    __int16 v20 = 2082;
    v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocationManager/kCLConnectionMessageRegistration, event:%{public, location:escape_onl y}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008798B0(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A02AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A0320(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A035C()
{
}

uint64_t sub_1008A0368(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a2 + 16;
  __int16 v26 = (void *)(a1 + 24);
  unint64_t v5 = sub_10004B1A4(a1 + 24, (uint64_t)(a2 + 16));
  *((void *)a2 + 1) = v5;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v5;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v5;
      if (v6 <= v5) {
        unint64_t v10 = v5 % v6;
      }
    }

    else
    {
      unint64_t v10 = (v6 - 1) & v5;
    }

    v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if ((sub_100022A24(a1 + 32, i + 16, v4) & 1) != 0) {
            return 0LL;
          }
        }

        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6) {
              v13 %= v6;
            }
          }

          else
          {
            v13 &= v6 - 1;
          }

          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }

  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    BOOL v16 = 1LL;
    if (v6 >= 3) {
      BOOL v16 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_1008909DC(a1, v19);
  }

  int8x8_t v20 = *(int8x8_t *)(a1 + 8);
  unint64_t v21 = *((void *)a2 + 1);
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    if (v21 >= *(void *)&v20) {
      v21 %= *(void *)&v20;
    }
  }

  else
  {
    v21 &= *(void *)&v20 - 1LL;
  }

  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v21);
  if (v23)
  {
    *(void *)a2 = *v23;
LABEL_37:
    *uint64_t v23 = a2;
    goto LABEL_38;
  }

  *(void *)a2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2;
  *(void *)(*(void *)a1 + 8 * v21) = a1 + 16;
  if (*(void *)a2)
  {
    unint64_t v24 = *(void *)(*(void *)a2 + 8LL);
    if (v22.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&v20) {
        v24 %= *(void *)&v20;
      }
    }

    else
    {
      v24 &= *(void *)&v20 - 1LL;
    }

    uint64_t v23 = (unsigned __int8 **)(*(void *)a1 + 8 * v24);
    goto LABEL_37;
  }

void *sub_1008A05A4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C3A0;
  return result;
}

void sub_1008A05C8(uint64_t a1, void *a2)
{
  *a2 = &off_10185C3A0;
}

void sub_1008A05E0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageAllowsLocationPrompts",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    size_t v19 = "";
    __int16 v20 = 2082;
    unint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageAllowsLocationPrompts, event:%{public, location:escape_only}s,  this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_10087DF2C(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A07C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A083C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A0878()
{
}

void *sub_1008A088C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C420;
  return result;
}

void sub_1008A08B0(uint64_t a1, void *a2)
{
  *a2 = &off_10185C420;
}

void sub_1008A08C8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageShowLocationPrompt",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    size_t v19 = "";
    __int16 v20 = 2082;
    unint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageShowLocationPrompt, event:%{public, location:escape_only}s, thi s:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_10087E448(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A0AB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A0B24(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A0B60()
{
}

void *sub_1008A0B74()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C4A0;
  return result;
}

void sub_1008A0B98(uint64_t a1, void *a2)
{
  *a2 = &off_10185C4A0;
}

void sub_1008A0BB0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessagePurpose",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessagePurpose, event:%{public, location:escape_only}s, this:%{pub lic}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087A0D8(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A0DB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A0E2C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A0E68()
{
}

void *sub_1008A0E7C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C520;
  return result;
}

void sub_1008A0EA0(uint64_t a1, void *a2)
{
  *a2 = &off_10185C520;
}

void sub_1008A0EB8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageIsActuallyAWatchKitExtension",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageIsActuallyAWatchKitExtension, event:%{public, location:escape_onl y}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087A314(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A10C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A1134(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A1170()
{
}

void *sub_1008A1184()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C5A0;
  return result;
}

void sub_1008A11A8(uint64_t a1, void *a2)
{
  *a2 = &off_10185C5A0;
}

void sub_1008A11C0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageProxyForRemoteClient",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageProxyForRemoteClient, event:%{public, location:escape_only}s, t his:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_10087A83C(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A13A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A141C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A1458()
{
}

void *sub_1008A146C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C620;
  return result;
}

void sub_1008A1490(uint64_t a1, void *a2)
{
  *a2 = &off_10185C620;
}

void sub_1008A14A8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  unint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageRequestAuthorization",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageRequestAuthorization, event:%{public, location:escape_only}s, t his:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087B0D8(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A16B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A1724(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A1760()
{
}

void *sub_1008A1774()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C6A0;
  return result;
}

void sub_1008A1798(uint64_t a1, void *a2)
{
  *a2 = &off_10185C6A0;
}

void sub_1008A17B0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageRequestTemporaryPrecise",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageRequestTemporaryPrecise, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }

    sub_10087CBC8((void *)v3, (uint64_t)v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)&v4->__shared_owners_;
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

void sub_1008A19B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A1A2C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A1A68()
{
}

void *sub_1008A1A7C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C720;
  return result;
}

void sub_1008A1AA0(uint64_t a1, void *a2)
{
  *a2 = &off_10185C720;
}

void sub_1008A1AB8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMarkAsHavingReceivedLocation",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v14);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v16 = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 2082;
    __int16 v20 = "activity";
    __int16 v21 = 2050;
    uint64_t v22 = v3;
    __int16 v23 = 1026;
    int v24 = 1;
    __int16 v25 = 1026;
    int v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMarkAsHavingReceivedLocation, event:%{public, location:escape_onl y}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    sub_10087AD34(v3);
    if (!v4)
    {
      os_activity_scope_leave(&v14);
      return;
    }

    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v14);
  }

  else
  {
    os_activity_scope_leave(&v14);
    if (!v4) {
      return;
    }
  }

  unint64_t v12 = (unint64_t *)&v4->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

void sub_1008A1CB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A1D2C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A1D68()
{
}

void *sub_1008A1D7C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C7A0;
  return result;
}

void sub_1008A1DA0(uint64_t a1, void *a2)
{
  *a2 = &off_10185C7A0;
}

void sub_1008A1DB8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMatchInfoEnabled",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    uint64_t v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMatchInfoEnabled, event:%{public, location:escape_only}s, this :%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087D170(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A1FC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A2034(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A2070()
{
}

void *sub_1008A2084()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C820;
  return result;
}

void sub_1008A20A8(uint64_t a1, void *a2)
{
  *a2 = &off_10185C820;
}

void sub_1008A20C0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageGroundAltitudeEnabled",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    uint64_t v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageGroundAltitudeEnabled, event:%{public, location:escape_only}s,  this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087D5F0(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A22C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A233C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A2378()
{
}

void *sub_1008A238C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C8A0;
  return result;
}

void sub_1008A23B0(uint64_t a1, void *a2)
{
  *a2 = &off_10185C8A0;
}

void sub_1008A23C8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageFusionInfoEnabled",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    uint64_t v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageFusionInfoEnabled, event:%{public, location:escape_only}s, this :%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087D904(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A25D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A2644(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A2680()
{
}

void *sub_1008A2694()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C920;
  return result;
}

void sub_1008A26B8(uint64_t a1, void *a2)
{
  *a2 = &off_10185C920;
}

void sub_1008A26D0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageTrackRunInfoEnabled",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    uint64_t v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageTrackRunInfoEnabled, event:%{public, location:escape_only}s, th is:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087DC18(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A28D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A294C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A2988()
{
}

void *sub_1008A299C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185C9A0;
  return result;
}

void sub_1008A29C0(uint64_t a1, void *a2)
{
  *a2 = &off_10185C9A0;
}

void sub_1008A29D8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageRegisterAsLocationClient",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v14);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v16 = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 2082;
    __int16 v20 = "activity";
    __int16 v21 = 2050;
    uint64_t v22 = v3;
    __int16 v23 = 1026;
    int v24 = 1;
    __int16 v25 = 1026;
    int v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageRegisterAsLocationClient, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    sub_10087E964(v3);
    if (!v4)
    {
      os_activity_scope_leave(&v14);
      return;
    }

    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v14);
  }

  else
  {
    os_activity_scope_leave(&v14);
    if (!v4) {
      return;
    }
  }

  unint64_t v12 = (unint64_t *)&v4->__shared_owners_;
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

void sub_1008A2BD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A2C4C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A2C88()
{
}

void *sub_1008A2C9C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CA20;
  return result;
}

void sub_1008A2CC0(uint64_t a1, void *a2)
{
  *a2 = &off_10185CA20;
}

void sub_1008A2CD8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageFetchEstimatedLocationAtDate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageFetchEstimatedLocationAtDate, event:%{public, location:escape_onl y}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10087EB60(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A2EC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A2F34(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A2F70()
{
}

void *sub_1008A2F84()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CAA0;
  return result;
}

void sub_1008A2FA8(uint64_t a1, void *a2)
{
  *a2 = &off_10185CAA0;
}

void sub_1008A2FC0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageCurrentClientDictionary",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageCurrentClientDictionary, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }

    sub_10087ED18(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)&v4->__shared_owners_;
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }

void sub_1008A31C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A323C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A3278()
{
}

void *sub_1008A328C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CB20;
  return result;
}

void sub_1008A32B0(uint64_t a1, void *a2)
{
  *a2 = &off_10185CB20;
}

void sub_1008A32C8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleHeading",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleHeading, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087F4C4((void *)v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A34D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A3544(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A3580()
{
}

void *sub_1008A3594()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CBA0;
  return result;
}

void sub_1008A35B8(uint64_t a1, void *a2)
{
  *a2 = &off_10185CBA0;
}

void sub_1008A35D0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleSpeed",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 1;
    __int16 v27 = 1026;
    int v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleSpeed, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      unint64_t v9 = (unint64_t *)((char *)v4 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_10087EDA0((void *)v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }

    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
  }

  else
  {
    os_activity_scope_leave(&state);
    if (!v4) {
      return;
    }
  }

  unint64_t v13 = (unint64_t *)((char *)v4 + 8);
  do
    unint64_t v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }

void sub_1008A37D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A384C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A3888()
{
}

void *sub_1008A389C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CC20;
  return result;
}

void sub_1008A38C0(uint64_t a1, void *a2)
{
  *a2 = &off_10185CC20;
}

void sub_1008A38D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageRequestMicroLocation",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageRequestMicroLocation, event:%{public, location:escape_only}s, t his:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100888E38((void *)v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A3AC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A3B34(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A3B70()
{
}

void *sub_1008A3B84()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CCA0;
  return result;
}

void sub_1008A3BA8(uint64_t a1, void *a2)
{
  *a2 = &off_10185CCA0;
}

void sub_1008A3BC0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageRequestMicroLocationRecordingScan",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageRequestMicroLocationRecordingScan, event:%{public, location:escap e_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008893D0((void *)v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A3DA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A3E1C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A3E58()
{
}

void *sub_1008A3E6C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CD20;
  return result;
}

void sub_1008A3E90(uint64_t a1, void *a2)
{
  *a2 = &off_10185CD20;
}

void sub_1008A3EA8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMicroLocationDonateTruthLabelEvent",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMicroLocationDonateTruthLabelEvent, event:%{public, location:esca pe_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008899E4((void *)v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A4090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A4104(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A4140()
{
}

void *sub_1008A4154()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CDA0;
  return result;
}

void sub_1008A4178(uint64_t a1, void *a2)
{
  *a2 = &off_10185CDA0;
}

void sub_1008A4190(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent, event:%{public, l ocation:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088A0DC((void *)v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A4378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A43EC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A4428()
{
}

void *sub_1008A443C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CE20;
  return result;
}

void sub_1008A4460(uint64_t a1, void *a2)
{
  *a2 = &off_10185CE20;
}

void sub_1008A4478(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessagePurgeMicroLocationSemiSupervisedData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2082;
    __int16 v19 = "activity";
    __int16 v20 = 2050;
    uint64_t v21 = v3;
    __int16 v22 = 1026;
    int v23 = 0;
    __int16 v24 = 1026;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessagePurgeMicroLocationSemiSupervisedData, event:%{public, location:es cape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_10088A7D0((void *)v3);
  if (v4)
  {
    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v13);
    do
      unint64_t v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&v13);
  }

void sub_1008A4658( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A46CC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A4708()
{
}

void *sub_1008A471C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CEA0;
  return result;
}

void sub_1008A4740(uint64_t a1, void *a2)
{
  *a2 = &off_10185CEA0;
}

void sub_1008A4758(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessagePurgeMicroLocationData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2082;
    __int16 v19 = "activity";
    __int16 v20 = 2050;
    uint64_t v21 = v3;
    __int16 v22 = 1026;
    int v23 = 0;
    __int16 v24 = 1026;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessagePurgeMicroLocationData, event:%{public, location:escape_only}s,  this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_10088A9F8((void *)v3);
  if (v4)
  {
    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v13);
    do
      unint64_t v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&v13);
  }

void sub_1008A4938( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A49AC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A49E8()
{
}

void *sub_1008A49FC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CF20;
  return result;
}

void sub_1008A4A20(uint64_t a1, void *a2)
{
  *a2 = &off_10185CF20;
}

void sub_1008A4A38(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMicroLocationExportDatabaseTables",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMicroLocationExportDatabaseTables, event:%{public, location:escap e_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088ACFC((void *)v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A4C20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A4C94(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A4CD0()
{
}

void *sub_1008A4CE4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185CFA0;
  return result;
}

void sub_1008A4D08(uint64_t a1, void *a2)
{
  *a2 = &off_10185CFA0;
}

void sub_1008A4D20(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMicroLocationExportDataForMigration",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMicroLocationExportDataForMigration, event:%{public, location:esc ape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088B2C8((void *)v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A4F08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A4F7C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A4FB8()
{
}

void *sub_1008A4FCC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D020;
  return result;
}

void sub_1008A4FF0(uint64_t a1, void *a2)
{
  *a2 = &off_10185D020;
}

void sub_1008A5008(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics, event:%{public, loca tion:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088B894((void *)v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A51F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A5264(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A52A0()
{
}

void *sub_1008A52B4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D0A0;
  return result;
}

void sub_1008A52D8(uint64_t a1, void *a2)
{
  *a2 = &off_10185D0A0;
}

void sub_1008A52F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMicroLocationRequestLearning",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMicroLocationRequestLearning, event:%{public, location:escape_onl y}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088BE60((void *)v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A54D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A554C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A5588()
{
}

void *sub_1008A559C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D120;
  return result;
}

void sub_1008A55C0(uint64_t a1, void *a2)
{
  *a2 = &off_10185D120;
}

void sub_1008A55D8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageGmm",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageGmm, event:%{public, location:escape_only}s, this:%{public} p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_100880510(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A57C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A5834(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A5870()
{
}

void *sub_1008A5884()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D1A0;
  return result;
}

void sub_1008A58A8(uint64_t a1, void *a2)
{
  *a2 = &off_10185D1A0;
}

void sub_1008A58C0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessagePressureBias",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessagePressureBias, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_1008809E4(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A5AA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A5B1C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A5B58()
{
}

void *sub_1008A5B6C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D220;
  return result;
}

void sub_1008A5B90(uint64_t a1, void *a2)
{
  *a2 = &off_10185D220;
}

void sub_1008A5BA8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageGyroBiasEstimation",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageGyroBiasEstimation, event:%{public, location:escape_only}s, thi s:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_10087FBE8(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A5D90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A5E04(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A5E40()
{
}

void *sub_1008A5E54()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D2A0;
  return result;
}

void sub_1008A5E78(uint64_t a1, void *a2)
{
  *a2 = &off_10185D2A0;
}

void sub_1008A5E90(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageHasRunMiniCal",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageHasRunMiniCal, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088407C(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A6078( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A60EC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A6128()
{
}

void *sub_1008A613C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D320;
  return result;
}

void sub_1008A6160(uint64_t a1, void *a2)
{
  *a2 = &off_10185D320;
}

void sub_1008A6178(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageStartMiniCal",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageStartMiniCal, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008847D4(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A6360( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A63D4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A6410()
{
}

void *sub_1008A6424()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D3A0;
  return result;
}

void sub_1008A6448(uint64_t a1, void *a2)
{
  *a2 = &off_10185D3A0;
}

void sub_1008A6460(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageCatherineData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageCatherineData, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_1008843BC((void *)v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A6648( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A66BC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A66F8()
{
}

void *sub_1008A670C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D420;
  return result;
}

void sub_1008A6730(uint64_t a1, void *a2)
{
  *a2 = &off_10185D420;
}

void sub_1008A6748(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleConnectionMostRecent",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleConnectionMostRecent, event:%{public, location:escape_only }s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008814E0(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A6930( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A69A4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A69E0()
{
}

void *sub_1008A69F4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D4A0;
  return result;
}

void sub_1008A6A18(uint64_t a1, void *a2)
{
  *a2 = &off_10185D4A0;
}

void sub_1008A6A30(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleStateIsAvailable",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleStateIsAvailable, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100883664(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A6C18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A6C8C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A6CC8()
{
}

void *sub_1008A6CDC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D520;
  return result;
}

void sub_1008A6D00(uint64_t a1, void *a2)
{
  *a2 = &off_10185D520;
}

void sub_1008A6D18(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleStateMostRecentVehicleConnection",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleStateMostRecentVehicleConnection, event:%{public, location :escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008814E0(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A6F00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A6F74(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A6FB0()
{
}

void *sub_1008A6FC4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D5A0;
  return result;
}

void sub_1008A6FE8(uint64_t a1, void *a2)
{
  *a2 = &off_10185D5A0;
}

void sub_1008A7000(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleStateMostRecentInVehicle",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleStateMostRecentInVehicle, event:%{public, location:escape_ only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100881B34(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A71E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A725C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A7298()
{
}

void *sub_1008A72AC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D620;
  return result;
}

void sub_1008A72D0(uint64_t a1, void *a2)
{
  *a2 = &off_10185D620;
}

void sub_1008A72E8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicleStateIsVehicle",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicleStateIsVehicle, event:%{public, location:escape_only}s,  this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100882188(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A74D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A7544(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A7580()
{
}

void *sub_1008A7594()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D6A0;
  return result;
}

void sub_1008A75B8(uint64_t a1, void *a2)
{
  *a2 = &off_10185D6A0;
}

void sub_1008A75D0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicularState",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicularState, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100882EF0(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A77B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A782C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A7868()
{
}

void *sub_1008A787C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D720;
  return result;
}

void sub_1008A78A0(uint64_t a1, void *a2)
{
  *a2 = &off_10185D720;
}

void sub_1008A78B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVehicularOperatorState",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVehicularOperatorState, event:%{public, location:escape_only}s,  this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_1008827A8(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A7AA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A7B14(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A7B50()
{
}

void *sub_1008A7B64()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D7A0;
  return result;
}

void sub_1008A7B88(uint64_t a1, void *a2)
{
  *a2 = &off_10185D7A0;
}

void sub_1008A7BA0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey, event:%{public, locatio n:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_100884EE0(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A7D88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A7DFC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A7E38()
{
}

void *sub_1008A7E4C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D820;
  return result;
}

void sub_1008A7E70(uint64_t a1, void *a2)
{
  *a2 = &off_10185D820;
}

void sub_1008A7E88(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageHealthAssessmentParkinsonsResultQuery",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2082;
    __int16 v19 = "activity";
    __int16 v20 = 2050;
    uint64_t v21 = v3;
    __int16 v22 = 1026;
    int v23 = 0;
    __int16 v24 = 1026;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageHealthAssessmentParkinsonsResultQuery, event:%{public, location:e scape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_100885124();
  if (v4)
  {
    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v13);
    do
      unint64_t v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&v13);
  }

void sub_1008A8064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A80D8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A8114()
{
}

void *sub_1008A8128()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D8A0;
  return result;
}

void sub_1008A814C(uint64_t a1, void *a2)
{
  *a2 = &off_10185D8A0;
}

void sub_1008A8164(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMovementDisorderLastProcessedDate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2082;
    __int16 v19 = "activity";
    __int16 v20 = 2050;
    uint64_t v21 = v3;
    __int16 v22 = 1026;
    int v23 = 0;
    __int16 v24 = 1026;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMovementDisorderLastProcessedDate, event:%{public, location:escap e_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_100885148();
  if (v4)
  {
    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v13);
    do
      unint64_t v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&v13);
  }

void sub_1008A8340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A83B4(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A83F0()
{
}

void *sub_1008A8404()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D920;
  return result;
}

void sub_1008A8428(uint64_t a1, void *a2)
{
  *a2 = &off_10185D920;
}

void sub_1008A8440(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2082;
    __int16 v19 = "activity";
    __int16 v20 = 2050;
    uint64_t v21 = v3;
    __int16 v22 = 1026;
    int v23 = 0;
    __int16 v24 = 1026;
    int v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate, event:%{public, lo cation:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  sub_10088516C();
  if (v4)
  {
    unint64_t v10 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&v13);
    do
      unint64_t v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&v13);
  }

void sub_1008A861C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  if (v9)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    os_activity_scope_leave(&a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A8690(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A86CC()
{
}

void *sub_1008A86E0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185D9A0;
  return result;
}

void sub_1008A8704(uint64_t a1, void *a2)
{
  *a2 = &off_10185D9A0;
}

void sub_1008A871C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderAuthorized",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderAuthorized, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100885190(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A8904( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A8978(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A89B4()
{
}

void *sub_1008A89C8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DA20;
  return result;
}

void sub_1008A89EC(uint64_t a1, void *a2)
{
  *a2 = &off_10185DA20;
}

void sub_1008A8A04(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderSensorAvailable",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderSensorAvailable, event:%{public, location:escape_on ly}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_100885280(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A8BEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A8C60(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A8C9C()
{
}

void *sub_1008A8CB0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DAA0;
  return result;
}

void sub_1008A8CD4(uint64_t a1, void *a2)
{
  *a2 = &off_10185DAA0;
}

void sub_1008A8CEC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderGetMetaByID",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderGetMetaByID, event:%{public, location:escape_only}s , this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100885498(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A8ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A8F48(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A8F84()
{
}

void *sub_1008A8F98()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DB20;
  return result;
}

void sub_1008A8FBC(uint64_t a1, void *a2)
{
  *a2 = &off_10185DB20;
}

void sub_1008A8FD4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderGetMetaSinceID",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderGetMetaSinceID, event:%{public, location:escape_onl y}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100885990(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A91BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A9230(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A926C()
{
}

void *sub_1008A9280()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DBA0;
  return result;
}

void sub_1008A92A4(uint64_t a1, void *a2)
{
  *a2 = &off_10185DBA0;
}

void sub_1008A92BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderGetMetasByDateRange",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderGetMetasByDateRange, event:%{public, location:escap e_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100885E68(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A94A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A9518(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A9554()
{
}

void *sub_1008A9568()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DC20;
  return result;
}

void sub_1008A958C(uint64_t a1, void *a2)
{
  *a2 = &off_10185DC20;
}

void sub_1008A95A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderGetDataByID",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderGetDataByID, event:%{public, location:escape_only}s , this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100886E80(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A978C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A9800(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A983C()
{
}

void *sub_1008A9850()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DCA0;
  return result;
}

void sub_1008A9874(uint64_t a1, void *a2)
{
  *a2 = &off_10185DCA0;
}

void sub_1008A988C(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderRecordFor",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderRecordFor, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    unint64_t v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_1008879E0(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A9A74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A9AE8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A9B24()
{
}

void *sub_1008A9B38()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DD20;
  return result;
}

void sub_1008A9B5C(uint64_t a1, void *a2)
{
  *a2 = &off_10185DD20;
}

void sub_1008A9B74(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange, event:%{public, l ocation:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088652C(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008A9D5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008A9DD0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008A9E0C()
{
}

void *sub_1008A9E20()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DDA0;
  return result;
}

void sub_1008A9E44(uint64_t a1, void *a2)
{
  *a2 = &off_10185DDA0;
}

void sub_1008A9E5C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSensorRecorderSetSensorSampleRate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSensorRecorderSetSensorSampleRate, event:%{public, location:escap e_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100886A5C(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AA044( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AA0B8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AA0F4()
{
}

void *sub_1008AA108()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DE20;
  return result;
}

void sub_1008AA12C(uint64_t a1, void *a2)
{
  *a2 = &off_10185DE20;
}

void sub_1008AA144(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageDeviceHasOriginalCamera",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 0;
    __int16 v27 = 1026;
    int v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageDeviceHasOriginalCamera, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v15[0] = v5;
  v15[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  sub_100877264(v8, v15);
  if (v4)
  {
    unint64_t v12 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AA328( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AA39C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AA3D8()
{
}

void *sub_1008AA3EC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DEA0;
  return result;
}

void sub_1008AA410(uint64_t a1, void *a2)
{
  *a2 = &off_10185DEA0;
}

void sub_1008AA428(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageCameraVcmActuatorId",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 0;
    __int16 v27 = 1026;
    int v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageCameraVcmActuatorId, event:%{public, location:escape_only}s, th is:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v15[0] = v5;
  v15[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  sub_100877344(v8, v15);
  if (v4)
  {
    unint64_t v12 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AA60C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AA680(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AA6BC()
{
}

void *sub_1008AA6D0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DF20;
  return result;
}

void sub_1008AA6F4(uint64_t a1, void *a2)
{
  *a2 = &off_10185DF20;
}

void sub_1008AA70C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageCompassCalibrationData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 0;
    __int16 v27 = 1026;
    int v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageCompassCalibrationData, event:%{public, location:escape_only}s,  this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v15[0] = v5;
  v15[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  sub_100877494(v8, v15);
  if (v4)
  {
    unint64_t v12 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AA8F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AA964(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AA9A0()
{
}

void *sub_1008AA9B4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185DFA0;
  return result;
}

void sub_1008AA9D8(uint64_t a1, void *a2)
{
  *a2 = &off_10185DFA0;
}

void sub_1008AA9F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageFitnessMachineData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageFitnessMachineData, event:%{public, location:escape_only}s, thi s:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100883C68((uint64_t *)v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AABD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AAC4C(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AAC88()
{
}

void *sub_1008AAC9C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E020;
  return result;
}

void sub_1008AACC0(uint64_t a1, void *a2)
{
  *a2 = &off_10185E020;
}

void sub_1008AACD8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessagePredictedWalkDistanceReset",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = "activity";
    __int16 v23 = 2050;
    uint64_t v24 = v3;
    __int16 v25 = 1026;
    int v26 = 0;
    __int16 v27 = 1026;
    int v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessagePredictedWalkDistanceReset, event:%{public, location:escape_only} s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v15[0] = v5;
  v15[1] = v4;
  if (v4)
  {
    unint64_t v10 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  sub_100887D10(v8, v15);
  if (v4)
  {
    unint64_t v12 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AAEBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AAF30(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AAF6C()
{
}

void *sub_1008AAF80()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E0A0;
  return result;
}

void sub_1008AAFA4(uint64_t a1, void *a2)
{
  *a2 = &off_10185E0A0;
}

void sub_1008AAFBC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageWriteDbToFile",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageWriteDbToFile, event:%{public, location:escape_only}s, this: %{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_100888034(v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AB1A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AB218(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AB254()
{
}

void *sub_1008AB268()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E120;
  return result;
}

void sub_1008AB28C(uint64_t a1, void *a2)
{
  *a2 = &off_10185E120;
}

void sub_1008AB2A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageTriggerVO2MaxRetrocompute",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageTriggerVO2MaxRetrocompute, event:%{public, location:escape_only}s , this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088C32C(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AB48C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AB500(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AB53C()
{
}

void *sub_1008AB550()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E1A0;
  return result;
}

void sub_1008AB574(uint64_t a1, void *a2)
{
  *a2 = &off_10185E1A0;
}

void sub_1008AB58C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageVO2MaxRetrocomputeStatusQuery",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageVO2MaxRetrocomputeStatusQuery, event:%{public, location:escape_on ly}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088C784(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AB774( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AB7E8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AB824()
{
}

void *sub_1008AB838()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E220;
  return result;
}

void sub_1008AB85C(uint64_t a1, void *a2)
{
  *a2 = &off_10185E220;
}

void sub_1008AB874(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageWriteContextConfiguration",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageWriteContextConfiguration, event:%{public, location:escape_only}s , this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    int v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_10088CB98(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008ABA5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008ABAD0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008ABB0C()
{
}

void *sub_1008ABB20()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E2A0;
  return result;
}

void sub_1008ABB44(uint64_t a1, void *a2)
{
  *a2 = &off_10185E2A0;
}

void sub_1008ABB5C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageColdStorageQueryConfiguration",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageColdStorageQueryConfiguration, event:%{public, location:escape_on ly}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088D190((id *)v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008ABD44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008ABDB8(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008ABDF4()
{
}

void *sub_1008ABE08()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E320;
  return result;
}

void sub_1008ABE2C(uint64_t a1, void *a2)
{
  *a2 = &off_10185E320;
}

void sub_1008ABE44(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageCollectMetricsForFunction",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageCollectMetricsForFunction, event:%{public, location:escape_only}s , this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    int v9 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_10088D75C(v3, v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)((char *)v4 + 8);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AC02C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AC0A0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AC0DC()
{
}

void *sub_1008AC0F0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_10185E3A0;
  return result;
}

void sub_1008AC114(uint64_t a1, void *a2)
{
  *a2 = &off_10185E3A0;
}

void sub_1008AC12C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0LL;
  a3[1] = 0LL;
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageSimulateMotionSensorData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2082;
    __int16 v21 = "activity";
    __int16 v22 = 2050;
    uint64_t v23 = v3;
    __int16 v24 = 1026;
    int v25 = 0;
    __int16 v26 = 1026;
    int v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageSimulateMotionSensorData, event:%{public, location:escape_only}s, this:%{public}p, registrationRequired:%{public}hhd, registrationReceived:%{public}hhd}",  buf,  0x32u);
  }

  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  sub_10088D958((id *)v3, (uint64_t)v14);
  if (v4)
  {
    unint64_t v11 = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }

    os_activity_scope_leave(&state);
    do
      unint64_t v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

void sub_1008AC314( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  if (v11)
  {
    sub_101252B94();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  else
  {
    os_activity_scope_leave(&state);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008AC388(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008AC3C4()
{
}

void sub_1008AC3D0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100890700(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void *sub_1008AC424(uint64_t a1)
{
  uint64_t result = sub_1008AC484((void *)(a1 + 288), (uint64_t *)&v5);
  if (result)
  {
    uint64_t v2 = (const void *)result[3];
    if (v2)
    {
      if (result) {
        return result;
      }
    }

    else
    {
      uint64_t result = (void *)sub_101252BC4();
    }

    uint64_t v3 = (void *)sub_101252D24(result);
    return sub_1008AC484(v3, v4);
  }

  return result;
}

void *sub_1008AC484(void *a1, uint64_t *a2)
{
  unint64_t v3 = *(void *)(*a2 + 8);
  if ((v3 & 0x8000000000000000LL) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381LL;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }

    while (v6);
  }

  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0LL;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v3;
    if (v3 >= *(void *)&v7) {
      unint64_t v10 = v3 % *(void *)&v7;
    }
  }

  else
  {
    unint64_t v10 = (*(void *)&v7 - 1LL) & v3;
  }

  unint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0LL;
  }
  unint64_t v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v3 == v13)
      {
        if (sub_10001A4B8(v12[2], *a2)) {
          return v12;
        }
      }

      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v7) {
            v13 %= *(void *)&v7;
          }
        }

        else
        {
          v13 &= *(void *)&v7 - 1LL;
        }

        if (v13 != v10) {
          return 0LL;
        }
      }

      unint64_t v12 = (void *)*v12;
    }

    while (v12);
  }

  return v12;
}

__int128 *sub_1008AC594(__int128 *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v2;
  __int128 v3 = *result;
  void *result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((void *)result + 2))
  {
    **((void **)result + 1) = result;
    uint64_t v4 = *(__int128 **)result;
  }

  else
  {
    *(void *)uint64_t result = result;
    uint64_t v4 = result;
  }

  *((void *)v4 + 1) = result;
  if (a2[2])
  {
    *(void *)a2[1] = a2;
    uint64_t v5 = (uint64_t *)*a2;
  }

  else
  {
    *a2 = (uint64_t)a2;
    uint64_t v5 = a2;
  }

  v5[1] = (uint64_t)a2;
  return result;
}

void *sub_1008AC608(uint64_t a1)
{
  uint64_t result = sub_1008AC484((void *)(a1 + 288), (uint64_t *)&v4);
  if (result)
  {
    uint64_t v2 = (const void *)result[3];
    if (v2)
    {
      if (result) {
        return result;
      }
    }

    else
    {
      uint64_t result = (void *)sub_101252BC4();
    }

    uint64_t v3 = sub_101252D24(result);
    return (void *)sub_1008AC668(v3);
  }

  return result;
}

void sub_1008AC668(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1008AC6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008AC708(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1008AC794(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008AC7A8(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1008AC834(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008AC848(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1008AC8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008AC8E8(uint64_t a1, void *a2)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_1008AC974(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1008AC988()
{
  return os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT);
}

BOOL sub_1008AC99C()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2424), OS_LOG_TYPE_INFO);
}

void sub_1008AC9AC(unint64_t *a1@<X8>)
{
  unint64_t v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

BOOL sub_1008AC9BC()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2424));
}

  ;
}

uint64_t sub_1008AC9D8()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

  ;
}

void sub_1008ACA20()
{
}

void sub_1008ACA28()
{
}

  ;
}

void sub_1008ACA44()
{
}

  ;
}

  ;
}

void sub_1008ACA68( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1008ACAA0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1008ACAB4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void *sub_1008ACAC8(void *result)
{
  void *result = 0LL;
  result[1] = 0LL;
  return result;
}

  ;
}

void sub_1008ACAEC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10133992C;
      v1[3] = unk_10133993C;
      v1[4] = xmmword_10133994C;
      v1[0] = xmmword_10133990C;
      v1[1] = unk_10133991C;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1008ACBC0(_Unwind_Exception *a1)
{
}

void sub_1008ACBD8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1008ACC3C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1008ACCB0(_Unwind_Exception *a1)
{
}

NSDictionary *sub_1008ACCC8()
{
  dword_101999138 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_101999120, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_101999140, "DmFp");
  dword_101999158 = 200;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_101999140, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_1018D6E38;
  v1[1] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_1018D6E50;
  v1[2] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_1018D6E68;
  v1[3] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_1018D6E80;
  v1[4] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1018D6E98;
  _OWORD v1[5] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1018D6EB0;
  v1[6] = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1018D6EC8;
  uint64_t result = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v2,  v1,  7LL);
  qword_101999160 = (uint64_t)result;
  return result;
}

uint64_t sub_1008ACE90(uint64_t result, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a4;
  return result;
}

uint64_t sub_1008ACE9C(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  *(void *)(a1 + 4) = -1LL;
  *(void *)(a1 + 16) = -1LL;
  sub_1010DDBC0((void *)(a1 + 24), "");
  return a1;
}

uint64_t sub_1008ACEE4(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = -1LL;
  sub_1010DDBC0((void *)(a1 + 24), "");
  return a1;
}

uint64_t sub_1008ACF24(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_100292A34(v9, a2, 24);
  uint64_t v3 = std::istream::operator>>(v9, &v8);
  uint64_t v4 = std::istream::operator>>(v3, a1 + 8);
  uint64_t v5 = std::istream::operator>>(v4, a1 + 4);
  std::istream::operator>>(v5, a1 + 16);
  *(_DWORD *)a1 = v8;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v9
  v9[2] = v6;
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf(v10);
  std::ios::~ios(&v12);
  return a1;
}

void sub_1008AD000( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1008AD030@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = (void *)std::ostream::operator<<(&v13, *a1);
  char v16 = 32;
  uint64_t v5 = sub_10000CF44(v4, (uint64_t)&v16, 1LL);
  uint64_t v6 = (void *)std::ostream::operator<<(v5, a1[2]);
  char v16 = 32;
  int8x8_t v7 = sub_10000CF44(v6, (uint64_t)&v16, 1LL);
  int v8 = (void *)std::ostream::operator<<(v7, a1[1]);
  char v16 = 32;
  unint64_t v9 = sub_10000CF44(v8, (uint64_t)&v16, 1LL);
  std::ostream::operator<<(v9, *((void *)a1 + 2));
  std::stringbuf::str(a2, &v14);
  *(void *)((char *)v12
  uint64_t v13 = v10;
  std::streambuf::~streambuf(&v14);
  return std::ios::~ios(&v15);
}

void sub_1008AD13C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_1008AD150(uint64_t a1)
{
  LODWORD(v4) = *(_DWORD *)a1;
  *(void *)((char *)&v4 + 4) = -1LL;
  sub_1010DDBC0(&v5, "");
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = -1LL;
  uint64_t v2 = (void **)(a1 + 24);
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v2 = v5;
  *(void *)(a1 + 40) = v6;
  return result;
}

BOOL sub_1008AD1E0(unsigned int *a1)
{
  return sub_1008AD224(a1) && sub_1008AD450(a1) && sub_1008AD614((uint64_t)a1);
}

BOOL sub_1008AD224(unsigned int *a1)
{
  if ((a1[1] & 0x80000000) == 0 && (a1[2] & 0x80000000) == 0) {
    return 1LL;
  }
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10185E478);
  }
  uint64_t v3 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    sub_1008AD840(a1, __p);
    __int128 v4 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
       ? __p
       : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile x, y: %s", (uint8_t *)&buf, 0xCu);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10185E478);
    }
    uint64_t v5 = qword_101934858;
    sub_1008AD840(a1, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    int v9 = 136315138;
    uint64_t v10 = p_buf;
    int8x8_t v7 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  0LL,  "Invalid tile x, y: %s",  (const char *)&v9);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL TileId::isXYValid() const", "%s\n", (const char *)v7);
    if (v7 != __p) {
      free(v7);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_1008AD450(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (*a1 >= 0xD)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10185E478);
    }
    uint64_t v3 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = *a1;
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      unsigned int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile type: %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10185E478);
      }
      unsigned int v6 = *a1;
      v8[0] = 67109120;
      v8[1] = v6;
      int8x8_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "Invalid tile type: %d",  v8);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL TileId::isTileTypeValid() const", "%s\n", v7);
    }
  }

  return v1 < 0xD;
}

BOOL sub_1008AD614(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 7) && !*(_BYTE *)(a1 + 11)) {
    return 1LL;
  }
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10185E478);
  }
  uint64_t v3 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    sub_1008AD840((unsigned int *)a1, __p);
    unsigned int v4 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
       ? __p
       : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid tile hash: %s", (uint8_t *)&buf, 0xCu);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10185E478);
    }
    uint64_t v5 = qword_101934858;
    sub_1008AD840((unsigned int *)a1, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    int v9 = 136315138;
    unsigned int v10 = p_buf;
    int8x8_t v7 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v5,  0LL,  "Invalid tile hash: %s",  (const char *)&v9);
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL TileId::isHashValid() const", "%s\n", (const char *)v7);
    if (v7 != __p) {
      free(v7);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_1008AD840@<X0>(unsigned int *a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  unsigned int v4 = sub_10000CF44(&v32, (uint64_t)"TileId(", 7LL);
  uint64_t v5 = sub_10000CF44(v4, (uint64_t)"type=", 5LL);
  unsigned int v6 = (void *)std::ostream::operator<<(v5, *a1);
  int8x8_t v7 = sub_10000CF44(v6, (uint64_t)", typeStr=", 10LL);
  int v8 = sub_100DD8CC8(*a1);
  size_t v9 = strlen(v8);
  sub_10000CF44(v7, (uint64_t)v8, v9);
  if (*((char *)a1 + 47) < 0)
  {
    if (*((void *)a1 + 4)) {
      goto LABEL_3;
    }
  }

  else if (*((_BYTE *)a1 + 47))
  {
LABEL_3:
    unsigned int v10 = sub_10000CF44(&v32, (uint64_t)", path=", 7LL);
    int v11 = *((char *)a1 + 47);
    if (v11 >= 0) {
      uint64_t v12 = (uint64_t)(a1 + 6);
    }
    else {
      uint64_t v12 = *((void *)a1 + 3);
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)a1 + 47);
    }
    else {
      uint64_t v13 = *((void *)a1 + 4);
    }
    sub_10000CF44(v10, v12, v13);
    goto LABEL_12;
  }

  std::stringbuf v14 = sub_10000CF44(&v32, (uint64_t)", corner=(", 10LL);
  uint64_t v15 = *v14;
  *(uint64_t *)((char *)v14 + *(void *)(*v14 - 24) + 16) = 4LL;
  *(_DWORD *)((char *)v14 + *(void *)(v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(void *)(v15 - 24) + 8) & 0xFFFFFEFB | 4;
  char v16 = (void *)std::ostream::operator<<((double)(int)a1[2] / 10000.0 + -90.0);
  int v17 = sub_10000CF44(v16, (uint64_t)", ", 2LL);
  uint64_t v18 = *v17;
  *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + 16) = 4LL;
  *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  __int16 v19 = (void *)std::ostream::operator<<((double)(int)a1[1] / 10000.0 + -180.0);
  __int16 v20 = sub_10000CF44(v19, (uint64_t)")", 1LL);
  __int16 v21 = sub_10000CF44(v20, (uint64_t)", tileY=", 8LL);
  __int16 v22 = (void *)std::ostream::operator<<(v21, a1[2]);
  uint64_t v23 = sub_10000CF44(v22, (uint64_t)", tileX=", 8LL);
  __int16 v24 = (void *)std::ostream::operator<<(v23, a1[1]);
  int v25 = sub_10000CF44(v24, (uint64_t)", skey=", 7LL);
  char v30 = 48;
  __int16 v26 = sub_1007EC2C0(v25, &v30);
  uint64_t v27 = *v26;
  *(uint64_t *)((char *)v26 + *(void *)(*v26 - 24) + 24) = 16LL;
  *(_DWORD *)((char *)v26 + *(void *)(v27 - 24) + 8) = *(_DWORD *)((_BYTE *)v26 + *(void *)(v27 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v26 + *(void *)(v27 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<();
LABEL_12:
  sub_10000CF44(&v32, (uint64_t)")", 1LL);
  std::stringbuf::str(a2, &v33);
  *(void *)((char *)v31
  uint64_t v32 = v28;
  std::streambuf::~streambuf(&v33);
  return std::ios::~ios(&v34);
}

void sub_1008ADB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_1008ADB4C(uint64_t a1)
{
  return (double)*(int *)(a1 + 8) / 10000.0 + -90.0;
}

double sub_1008ADB70(uint64_t a1)
{
  return (double)*(int *)(a1 + 4) / 10000.0 + -180.0;
}

uint64_t sub_1008ADB94(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16))
  {
    return 0LL;
  }

  uint64_t v2 = *(unsigned __int8 *)(a1 + 47);
  if ((v2 & 0x80u) == 0LL) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 47);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a2 + 32);
  }
  if (v3 != v4) {
    return 0LL;
  }
  unsigned int v6 = (const void **)(a1 + 24);
  size_t v9 = *(unsigned __int8 **)(a2 + 24);
  int8x8_t v7 = (unsigned __int8 *)(a2 + 24);
  int v8 = v9;
  if (v5 < 0) {
    int8x8_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 32)) == 0;
  }
  if (!*(_BYTE *)(a1 + 47)) {
    return 1LL;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    unsigned int v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }

  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_1008ADC74(uint64_t a1, uint64_t a2)
{
  if (!sub_1008AD1E0((unsigned int *)a1))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10185E478);
    }
    uint64_t v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      sub_1008AD840((unsigned int *)a1, __p);
      int v5 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
         ? __p
         : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Invalid tile ID: %{private}s, #CloneMe",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10185E478);
      }
      uint64_t v31 = qword_101934858;
      sub_1008AD840((unsigned int *)a1, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::stringbuf::string_type buf = &buf;
      }
      else {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      int v39 = 136380675;
      v40 = p_buf;
      std::stringbuf v33 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v31,  17LL,  "Invalid tile ID: %{private}s, #CloneMe",  &v39,  12);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL TileId::operator<(const TileId &) const", "%s\n", (const char *)v33);
      if (v33 != __p) {
        free(v33);
      }
    }
  }

  if (!sub_1008AD1E0((unsigned int *)a2))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10185E478);
    }
    unsigned int v6 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      sub_1008AD840((unsigned int *)a2, __p);
      int8x8_t v7 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
         ? __p
         : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Invalid tile ID: %{private}s, #CloneMe",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_10185E478);
      }
      uint64_t v34 = qword_101934858;
      sub_1008AD840((unsigned int *)a2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v35 = &buf;
      }
      else {
        v35 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      int v39 = 136380675;
      v40 = v35;
      LODWORD(v37) = 12;
      v36 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v34,  17LL,  "Invalid tile ID: %{private}s, #CloneMe",  &v39,  v37);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL TileId::operator<(const TileId &) const", "%s\n", (const char *)v36);
      if (v36 != __p) {
        free(v36);
      }
    }
  }

  BOOL v8 = *(_DWORD *)a1 < *(_DWORD *)a2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return v8;
  }
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a2 + 8);
  BOOL v8 = v9 < v10;
  if (v9 != v10) {
    return v8;
  }
  int v11 = *(_DWORD *)(a1 + 4);
  int v12 = *(_DWORD *)(a2 + 4);
  BOOL v8 = v11 < v12;
  if (v11 != v12) {
    return v8;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a2 + 16);
  if (v13 != v14) {
    return v13 < v14;
  }
  uint64_t v15 = (const void **)(a1 + 24);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  size_t v17 = *(void *)(a1 + 32);
  if ((v16 & 0x80u) == 0LL) {
    size_t v18 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v18 = *(void *)(a1 + 32);
  }
  __int16 v21 = *(unsigned __int8 **)(a2 + 24);
  __int16 v20 = (unsigned __int8 *)(a2 + 24);
  __int16 v19 = v21;
  int v22 = (char)v20[23];
  if (v22 >= 0) {
    size_t v23 = v20[23];
  }
  else {
    size_t v23 = *((void *)v20 + 1);
  }
  if (v22 < 0) {
    __int16 v20 = v19;
  }
  if (v18 == v23)
  {
    if ((v16 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v15, v20, v17);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      if (!(_DWORD)v16) {
        return 0LL;
      }
      __int16 v24 = v20;
      int v25 = v15;
      uint64_t v26 = v16;
      while (*(unsigned __int8 *)v25 == *v24)
      {
        uint64_t result = 0LL;
        int v25 = (const void **)((char *)v25 + 1);
        ++v24;
        if (!--v26) {
          return result;
        }
      }
    }
  }

  if ((v16 & 0x80u) == 0LL) {
    uint64_t v28 = v15;
  }
  else {
    uint64_t v28 = *v15;
  }
  if (v23 >= v18) {
    size_t v29 = v18;
  }
  else {
    size_t v29 = v23;
  }
  int v30 = memcmp(v28, v20, v29);
  if (v30) {
    return v30 < 0;
  }
  else {
    return v18 < v23;
  }
}

uint64_t sub_1008AE164@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a1 + 8);
  sub_10000CE18((uint64_t)v32);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }

  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    unsigned int v6 = sub_10000CF44(&v33, (uint64_t)"/", 1LL);
    int8x8_t v7 = (const char **)(a1 + 24);
    BOOL v8 = (const char *)(a1 + 24);
    size_t v9 = strlen(v8);
    sub_10000CF44(v6, (uint64_t)v8, v9);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185E498);
    }
    int v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v11 = a1 + 24;
      std::stringbuf::str(&v41, &v34);
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v12 = &v41;
      }
      else {
        int v12 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "TmmFile, name, path, %s, servername, %s",  (uint8_t *)&buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v41, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E498);
      }
      uint64_t v13 = qword_101934A78;
      std::stringbuf::str(&buf, &v34);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::stringbuf::string_type buf = &buf;
      }
      else {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      int v37 = 136315394;
      v38 = v7;
      __int16 v39 = 2080;
      v40 = p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v41,  1628LL,  &_mh_execute_header,  v13,  2LL,  "TmmFile, name, path, %s, servername, %s",  (const char *)&v37,  22);
      uint64_t v16 = v15;
      sub_10029211C("Generic", 1LL, 0, 2LL, "std::string TileId::getServerFileName() const", "%s\n", (const char *)v16);
      if (v16 != &v41) {
        free(v16);
      }
    }

    goto LABEL_30;
  }

  size_t v17 = sub_10000CF44(&v33, (uint64_t)"/", 1LL);
  size_t v18 = (void *)std::ostream::operator<<(v17, (int)((double)v5 / 10000.0));
  __int16 v19 = sub_10000CF44(v18, (uint64_t)"/", 1LL);
  __int16 v20 = (void *)std::ostream::operator<<(v19, (int)((double)v4 / 10000.0));
  __int16 v21 = sub_10000CF44(v20, (uint64_t)"/", 1LL);
  v41.__r_.__value_.__s.__data_[0] = 48;
  int v22 = sub_1007EC2C0(v21, (char *)&v41);
  *(void *)((char *)v22 + *(void *)(*v22 - 24LL) + 24) = 7LL;
  size_t v23 = (void *)std::ostream::operator<<(v22, *(unsigned int *)(a1 + 8));
  __int16 v24 = sub_10000CF44(v23, (uint64_t)"_", 1LL);
  buf.__r_.__value_.__s.__data_[0] = 48;
  int v25 = sub_1007EC2C0(v24, (char *)&buf);
  *(void *)((char *)v25 + *(void *)(*v25 - 24LL) + 24) = 7LL;
  std::ostream::operator<<(v25, *(unsigned int *)(a1 + 4));
  if (*(void *)(a1 + 16) != -1LL)
  {
    uint64_t v26 = sub_10000CF44(&v33, (uint64_t)"_", 1LL);
    v41.__r_.__value_.__s.__data_[0] = 48;
    uint64_t v27 = sub_1007EC2C0(v26, (char *)&v41);
    uint64_t v28 = *v27;
    *(uint64_t *)((char *)v27 + *(void *)(*v27 - 24) + 24) = 16LL;
    *(_DWORD *)((char *)v27 + *(void *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(void *)(v28 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v27 + *(void *)(v28 - 24) + 8) |= 0x4000u;
    std::ostream::operator<<(v27, *(void *)(a1 + 16));
  }

void sub_1008AE618( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
}

uint64_t sub_1008AE674(int *a1)
{
  return sub_100C3A6F0(*a1);
}

void sub_1008AE67C(int *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = sub_100C3A6F0(*a1);
  unsigned int v6 = (char *)v5;
  else {
    size_t v7 = *(void *)(v5 + 8);
  }
  p_p = &__p;
  sub_1000392EC((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (v6[23] >= 0) {
      size_t v9 = v6;
    }
    else {
      size_t v9 = *(char **)v6;
    }
    memmove(p_p, v9, v7);
  }

  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 47;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    std::string::size_type v11 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::append(&__p, v11, v12);
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_1008AE768( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t sub_1008AE784(uint64_t a1, unsigned int a2, unsigned int a3, float32_t a4, float32x2_t a5)
{
  a5.f32[1] = a4;
  int32x2_t result = vcvt_s32_f32( vmla_f32( vcvt_f32_s32(*(int32x2_t *)(a1 + 4)),  a5,  vcvt_f32_s32(vmul_s32((int32x2_t)__PAIR64__(a2, a3), vdup_n_s32(0x2710u)))));
  *(int32x2_t *)(a1 + 4) = result;
  return result;
}

void sub_1008AE7B8(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1008AE7E4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1008AE8E4(uint64_t a1, char *a2, void *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8 = sub_100479C24(a1, a2, a3);
  *(void *)uint64_t v8 = off_10185E4C8;
  *(_OWORD *)(v8 + 120) = 0u;
  size_t v9 = (uint64_t *)(v8 + 120);
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(void *)(a1 + 168) = -[CLBundleLocationProviderContext initWithBundleLocationProvider:inSilo:]( objc_alloc(&OBJC_CLASS___CLBundleLocationProviderContext),  "initWithBundleLocationProvider:inSilo:",  a1,  *(void *)(a1 + 40));
  *(_BYTE *)(a1 + 176) = 0;
  *(void *)(a1 + 180) = 0xFFFFFFFF00000000LL;
  *(_BYTE *)(a1 + 188) = 0;
  if (a4 | a5)
  {
    if (a5)
    {
      if (-[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  a5))
      {
        *(void *)(a1 + 152) = [(id)a5 copy];
        *(_BYTE *)(a1 + 176) = 1;
      }

      else
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185E640);
        }
        uint64_t v13 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 136446210;
          id v28 = [(id)a5 UTF8String];
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "#BLP bundle path does not exist, %{public}s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10185E640);
          }
          uint64_t v17 = qword_101934988;
          int v25 = 136446210;
          id v26 = [(id)a5 UTF8String];
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v17,  17LL,  "#BLP bundle path does not exist, %{public}s",  &v25,  12);
          __int16 v19 = (uint8_t *)v18;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)",  "%s\n",  v18);
          if (v19 != buf) {
            free(v19);
          }
        }
      }
    }

    if (a4)
    {
      if (sub_100D916B0((void *)a4))
      {
        *(void *)(a1 + 160) = [(id)a4 copy];
        *(_BYTE *)(a1 + 176) = 1;
        goto LABEL_28;
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185E640);
      }
      unint64_t v14 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        id v15 = [(id)a4 UTF8String];
        *(_DWORD *)std::stringbuf::string_type buf = 136446210;
        id v28 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "#BLP no application installed backed by bundle identifier, %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185E640);
        }
        uint64_t v20 = qword_101934988;
        id v21 = [(id)a4 UTF8String];
        int v25 = 136446210;
        id v26 = v21;
        LODWORD(v24) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  17LL,  "#BLP no application installed backed by bundle identifier, %{public}s",  &v25,  v24);
        size_t v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }
    }

    if (!*(_BYTE *)(a1 + 176)) {
      return a1;
    }
LABEL_28:
    uint64_t *v9 = sub_1008AEE38((void *)a1);
    return a1;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185E640);
  }
  int v10 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185E640);
    }
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier",  &v25,  2);
    std::string::size_type v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return a1;
}

void sub_1008AEE08(_Unwind_Exception *a1)
{
}

uint64_t sub_1008AEE38(void *a1)
{
  if (*(_OWORD *)(a1 + 19) == 0LL)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185E660);
    }
    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "BLP: Need a bundle path or a bundle identifier.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BLP: Need a bundle path or a bundle identifier.",  v16,  2);
      int v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "CLClientRef CLBundleLocationProvider::createClient()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
    }

    return 0LL;
  }

  else
  {
    uint64_t v4 = a1[21];
    v16[0] = 0LL;
    v16[1] = v4;
    v16[2] = sub_1008AF2A0;
    v16[3] = j__objc_release;
    v16[4] = 0LL;
    uint64_t v5 = CLClientCreateWithBundleIdentifierAndPathOnSilo(kCFAllocatorDefault, sub_1008AF2C8, v16);
    uint64_t v2 = v5;
    if (v5)
    {
      CLClientSetAllowsMapCorrection(v5, 0LL);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      unsigned int v6 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        size_t v7 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
        *(_DWORD *)std::stringbuf::string_type buf = 136446210;
        uint64_t v20 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "BLP: Couldn't create client for bundle path %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        uint64_t v11 = qword_101934A78;
        std::string::size_type v12 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
        int v17 = 136446210;
        size_t v18 = v12;
        LODWORD(v15) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  17LL,  "BLP: Couldn't create client for bundle path %{public}s",  &v17,  v15);
        unint64_t v14 = (uint8_t *)v13;
        sub_10029211C("Generic", 1LL, 0, 0LL, "CLClientRef CLBundleLocationProvider::createClient()", "%s\n", v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

  return v2;
}

uint64_t sub_1008AF1C4(uint64_t a1)
{
  *(void *)a1 = off_10185E4C8;
  [*(id *)(a1 + 168) invalidate];

  *(void *)(a1 + 168) = 0LL;
  if (*(void *)(a1 + 120))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(void *)(a1 + 120) = 0LL;
  }

  if (*(void *)(a1 + 128))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 128));
    *(void *)(a1 + 128) = 0LL;
  }

  if (*(void *)(a1 + 136))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 136));
    *(void *)(a1 + 136) = 0LL;
  }

  if (*(void *)(a1 + 144))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 144));
    *(void *)(a1 + 144) = 0LL;
  }

  uint64_t v2 = *(const void **)(a1 + 152);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 152) = 0LL;
  }

  uint64_t v3 = *(const void **)(a1 + 160);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 160) = 0LL;
  }

  return sub_10047A1C0(a1);
}

void sub_1008AF28C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008AF1C4(a1);
  operator delete(v1);
}

void *sub_1008AF2A0(void *a1)
{
  id v2 = a1;
  return a1;
}

id sub_1008AF2C8(const void *a1, int a2, void *a3, uint64_t a4)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1008B0BB4;
  v9[3] = &unk_10185E608;
  v9[5] = a4;
  v9[6] = a1;
  int v10 = a2;
  v9[4] = a3;
  return objc_msgSend(objc_msgSend(a3, "silo"), "async:", v9);
}

void sub_1008AF34C(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 0;
    BOOL v2 = 1;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }

    else
    {
      *(_DWORD *)std::stringbuf::string_type buf = 1;
      if (sub_100247620(a1, (int *)buf, 1LL))
      {
        uint64_t v3 = 100LL;
        BOOL v2 = 1;
      }

      else
      {
        *(_DWORD *)std::stringbuf::string_type buf = 2;
        int v4 = sub_100247620(a1, (int *)buf, 1LL);
        BOOL v2 = v4 != 0;
        if (v4) {
          uint64_t v3 = 3000LL;
        }
        else {
          uint64_t v3 = 2147483646LL;
        }
      }
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185E660);
    }
    uint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v6 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
      *(_DWORD *)std::stringbuf::string_type buf = 67109378;
      *(_DWORD *)v94 = v3;
      *(_WORD *)&v94[4] = 2080;
      *(void *)&v94[6] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "BLP: Registering with desired accuracy %d (%s)",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      uint64_t v52 = qword_101934A78;
      v53 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
      int v89 = 67109378;
      *(_DWORD *)v90 = v3;
      *(_WORD *)&v90[4] = 2080;
      *(void *)&v90[6] = v53;
      LODWORD(v85) = 18;
      v54 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v52,  2LL,  "BLP: Registering with desired accuracy %d (%s)",  &v89,  v85);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v54);
    }

    if (v2)
    {
      double v7 = sub_1008B0A24(a1, (uint64_t)&unk_10133F358, 3);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      uint64_t v8 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        size_t v9 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)std::stringbuf::string_type buf = 134218242;
        *(double *)v94 = v7;
        *(_WORD *)&v94[8] = 2080;
        *(void *)&v94[10] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "BLP: Location distance filter is now %.2f (%s)",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        uint64_t v68 = qword_101934A78;
        v69 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 134218242;
        *(double *)v90 = v7;
        *(_WORD *)&v90[8] = 2080;
        *(void *)&v90[10] = v69;
        LODWORD(v87) = 22;
        v70 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v68,  2LL,  "BLP: Location distance filter is now %.2f (%s)",  COERCE_DOUBLE(&v89),  v87);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v70);
      }

      CLClientStartLocationUpdates(*(void *)(a1 + 120), v3, v7);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      int v10 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)std::stringbuf::string_type buf = 136315138;
        *(void *)v94 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "BLP: Stopping location updates (%s)",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        uint64_t v71 = qword_101934A78;
        v72 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 136315138;
        *(void *)v90 = v72;
        v73 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v71,  2LL,  "BLP: Stopping location updates (%s)",  (const char *)&v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v73);
      }

      CLClientStopLocationUpdates(*(void *)(a1 + 120));
    }
  }

  if (*(void *)(a1 + 128))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 4;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
LABEL_35:
      uint64_t v14 = 2147483646LL;
LABEL_36:
      double v15 = sub_1008B0A24(a1, (uint64_t)&unk_10133F364, 3);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      uint64_t v16 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        int v17 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)std::stringbuf::string_type buf = 134218242;
        *(double *)v94 = v15;
        *(_WORD *)&v94[8] = 2080;
        *(void *)&v94[10] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "BLP: Bystander distance filter is now %.2f (%s)",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        uint64_t v55 = qword_101934A78;
        v56 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 134218242;
        *(double *)v90 = v15;
        *(_WORD *)&v90[8] = 2080;
        *(void *)&v90[10] = v56;
        LODWORD(v86) = 22;
        v57 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v55,  2LL,  "BLP: Bystander distance filter is now %.2f (%s)",  COERCE_DOUBLE(&v89),  v86);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v57);
      }

      CLClientStartLocationUpdates(*(void *)(a1 + 128), v14, v15);
      goto LABEL_42;
    }

    *(_DWORD *)std::stringbuf::string_type buf = 3;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      std::string::size_type v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        *(_DWORD *)std::stringbuf::string_type buf = 136315138;
        *(void *)v94 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning BLP: CLBundleLocationProvider does not support spectators (%s)",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        uint64_t v77 = qword_101934A78;
        v78 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
        int v89 = 136315138;
        *(void *)v90 = v78;
        v79 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v77,  0LL,  "#Warning BLP: CLBundleLocationProvider does not support spectators (%s)",  (const char *)&v89);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v79);
      }

      goto LABEL_35;
    }

    *(_DWORD *)std::stringbuf::string_type buf = 5;
    if (sub_100247620(a1, (int *)buf, 1LL))
    {
      int v46 = *(_DWORD *)(a1 + 184);
      if (v46 == 1)
      {
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_10185E680);
        }
        v50 = (os_log_s *)qword_101934A48;
        if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicWaking",  buf,  2u);
        }

        uint64_t v14 = 2147483641LL;
        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A40 != -1) {
            dispatch_once(&qword_101934A40, &stru_10185E680);
          }
          LOWORD(v89) = 0;
          LODWORD(v84) = 2;
          v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicWaking",  &v89,  v84);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v51);
        }
      }

      else if (v46)
      {
        uint64_t v14 = 0x7FFFFFFFLL;
      }

      else
      {
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_10185E680);
        }
        v47 = (os_log_s *)qword_101934A48;
        if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicNonWaking",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A40 != -1) {
            dispatch_once(&qword_101934A40, &stru_10185E680);
          }
          LOWORD(v89) = 0;
          LODWORD(v84) = 2;
          v83 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicNonWaking",  &v89,  v84);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v83);
        }

        uint64_t v14 = 2147483642LL;
      }

      goto LABEL_36;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185E660);
    }
    v48 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      v49 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      *(void *)v94 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "BLP: Stopping bystander location updates (%s)",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      uint64_t v80 = qword_101934A78;
      v81 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  *(void *)(a1 + 160),  *(void *)(a1 + 152)),  "UTF8String");
      int v89 = 136315138;
      *(void *)v90 = v81;
      v82 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v80,  2LL,  "BLP: Stopping bystander location updates (%s)",  (const char *)&v89);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()",  "%s\n",  v82);
    }

    CLClientStopLocationUpdates(*(void *)(a1 + 128));
  }

double sub_1008B0A24(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 1.79769313e308;
  }
  uint64_t v3 = 0LL;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v4 = a1 + 64;
  uint64_t v5 = v6;
  double result = 1.79769313e308;
  do
  {
    if (v5)
    {
      int v8 = *(_DWORD *)(a2 + 4 * v3);
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      do
      {
        int v11 = *(_DWORD *)(v10 + 32);
        BOOL v12 = v11 < v8;
        if (v11 >= v8) {
          uint64_t v13 = (uint64_t *)v10;
        }
        else {
          uint64_t v13 = (uint64_t *)(v10 + 8);
        }
        if (!v12) {
          uint64_t v9 = v10;
        }
        uint64_t v10 = *v13;
      }

      while (*v13);
      if (v9 != v4 && v8 >= *(_DWORD *)(v9 + 32))
      {
        uint64_t v14 = *(double **)(v9 + 40);
        double v15 = (double *)(v9 + 48);
        if (v14 != v15)
        {
          do
          {
            if (v14[6] < result) {
              double result = v14[6];
            }
            uint64_t v16 = (double *)*((void *)v14 + 1);
            if (v16)
            {
              do
              {
                int v17 = v16;
                uint64_t v16 = *(double **)v16;
              }

              while (v16);
            }

            else
            {
              do
              {
                int v17 = (double *)*((void *)v14 + 2);
                BOOL v18 = *(void *)v17 == (void)v14;
                uint64_t v14 = v17;
              }

              while (!v18);
            }

            uint64_t v14 = v17;
          }

          while (v17 != v15);
        }
      }
    }

    ++v3;
  }

  while (v3 != a3);
  return result;
}

uint64_t sub_1008B0AEC(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if ((*a2 - 3) >= 3)
  {
    if (v3 == 22)
    {
      if (*(void *)(a1 + 136)) {
        return sub_10047A690();
      }
      uint64_t v4 = sub_1008AEE38((void *)a1);
      *(void *)(a1 + 136) = v4;
    }

    else
    {
      if (v3 != 39 || *(void *)(a1 + 144)) {
        return sub_10047A690();
      }
      uint64_t v4 = sub_1008AEE38((void *)a1);
      *(void *)(a1 + 144) = v4;
    }
  }

  else
  {
    if (*(void *)(a1 + 128)) {
      return sub_10047A690();
    }
    uint64_t v4 = sub_1008AEE38((void *)a1);
    *(void *)(a1 + 128) = v4;
  }

  if (*(_BYTE *)(a1 + 188)) {
    CLClientSetMatchInfoEnabled(v4, 1LL);
  }
  return sub_10047A690();
}

uint64_t sub_1008B0B88(uint64_t a1)
{
  return sub_10047A698(a1);
}

void sub_1008B0BB4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isValid]) {
    sub_1008B0BF4( [*(id *)(a1 + 32) provider],  *(void *)(a1 + 48),  *(_DWORD *)(a1 + 56),  *(void **)(a1 + 40));
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_1008B0BF4(void *a1, uint64_t a2, int a3, void *a4)
{
  if (a3 > 24)
  {
    if (a3 == 25)
    {
      if (CLClientGetError(a4, v75) && v75[0] <= 1)
      {
        LODWORD(__src[0]) = 9;
        (*(void (**)(void *, void *, uint64_t, uint64_t))(*a1 + 144LL))(a1, __src, 1LL, 0xFFFFFFFFLL);
      }
    }

    else if (a3 == 27)
    {
      if (CLClientGetAuthorizationStatus(a4, &v74))
      {
        int v6 = v74;
        *((_DWORD *)a1 + 45) = v74;
        if (v6 == 3)
        {
          LODWORD(__src[0]) = 9;
          (*(void (**)(void *, void *))(*a1 + 120LL))(a1, __src);
          *(void *)((char *)&__src[1] + 4) = 0LL;
          *(void *)((char *)__src + 4) = 0LL;
          *(_OWORD *)((char *)&__src[2] + 4) = xmmword_1012E0070;
          __asm { FMOV            V0.2D, #-1.0 }

          *(_OWORD *)((char *)&__src[4] + 4) = _Q0;
          *(_OWORD *)((char *)&__src[6] + 4) = _Q0;
          *(_OWORD *)((char *)&__src[8] + 4) = _Q0;
          LODWORD(__src[0]) = 0xFFFF;
          HIDWORD(__src[10]) = 0;
          __src[11] = 0xBFF0000000000000LL;
          memset(&__src[12], 0, 20);
          *(void *)((char *)&__src[14] + 4) = 0xBFF0000000000000LL;
          HIDWORD(__src[15]) = 0x7FFFFFFF;
          memset(&__src[16], 0, 25);
        }

        else
        {
          (*(void (**)(void *))(*a1 + 304LL))(a1);
          LODWORD(__src[0]) = 9;
          (*(void (**)(void *, void *, uint64_t, uint64_t))(*a1 + 144LL))(a1, __src, 1LL, 0xFFFFFFFFLL);
        }
      }

      else
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        id v35 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v36 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
          LODWORD(__src[0]) = 136315138;
          *(void *)((char *)__src + 4) = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#Warning BLP: Could not get authorization status (%s)",  (uint8_t *)__src,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185E660);
          }
          uint64_t v37 = qword_101934A78;
          uint64_t v38 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
          int v93 = 136315138;
          *(void *)v94 = v38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  v37,  0LL,  "#Warning BLP: Could not get authorization status (%s)",  (const char *)&v93);
          v40 = (char *)v39;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)",  "%s\n",  v39);
        }
      }

      LODWORD(__src[0]) = 14;
      (*(void (**)(void *, void *, void, uint64_t))(*a1 + 144LL))(a1, __src, 0LL, 0xFFFFFFFFLL);
    }

    return;
  }

  if (a3)
  {
    if (a3 == 3)
    {
      LODWORD(__src[0]) = 9;
      (*(void (**)(void *, void *, void, uint64_t))(*a1 + 144LL))(a1, __src, 0LL, 0xFFFFFFFFLL);
    }

    return;
  }

  if (a1[17] == a2)
  {
    int v20 = objc_msgSend(objc_msgSend(a4, "objectForKey:", @"LocationCount"), "integerValue");
    id v21 = objc_msgSend(objc_msgSend(a4, "objectForKey:", @"Locations"), "bytes");
    sub_100246564((uint64_t)__src);
    int v22 = operator new(0x38uLL);
    sub_100CBE470((uint64_t)v22, v21, v20);
    sub_1008B1B00(&v93, (uint64_t)v22);
    sub_1000F2F30(&v87, (uint64_t *)&v93);
    int v76 = 22;
    (*(void (**)(void *, int *, void *, void, uint64_t, void))(*a1 + 152LL))( a1,  &v76,  __src,  0LL,  0xFFFFFFFFLL,  0LL);
    size_t v23 = *(std::__shared_weak_count **)&v94[4];
    if (*(void *)&v94[4])
    {
      int v24 = (unint64_t *)(*(void *)&v94[4] + 8LL);
      do
        unint64_t v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }

    id v26 = v91;
    if (v91)
    {
      p_shared_owners = (unint64_t *)&v91->__shared_owners_;
      do
        unint64_t v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    if (v90 < 0) {
      operator delete(__p);
    }
    size_t v29 = v88;
    if (v88)
    {
      uint64_t v30 = (unint64_t *)&v88->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }

    uint64_t v32 = v86;
    if (!v86) {
      return;
    }
    uint64_t v33 = (unint64_t *)&v86->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
LABEL_113:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }

    return;
  }

  if (a1[18] == a2)
  {
    sub_100246564((uint64_t)&v93);
    if (CLClientGetLocation(a2, a4, &v93))
    {
      sub_1008B1888(a4, &v76);
      sub_10086A0D8((uint64_t)__src, (uint64_t)&v76);
      memcpy(v95, __src, sizeof(v95));
      __int128 v41 = v79;
      __int128 v79 = 0u;
      v42 = (std::__shared_weak_count *)*((void *)&v96 + 1);
      __int128 v96 = v41;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          unint64_t v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }

      __int128 v101 = v84;
      v102[0] = v85[0];
      *(void *)((char *)v102 + 13) = *(void *)((char *)v85 + 13);
      __int128 v97 = v80;
      __int128 v98 = v81;
      __int128 v99 = v82;
      __int128 v100 = v83;
      v45 = (std::__shared_weak_count *)*((void *)&v79 + 1);
      if (*((void *)&v79 + 1))
      {
        int v46 = (unint64_t *)(*((void *)&v79 + 1) + 8LL);
        do
          unint64_t v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }

      LODWORD(__src[0]) = 39;
      (*(void (**)(void *, void *, int *, void, uint64_t, void))(*a1 + 152LL))( a1,  __src,  &v93,  0LL,  0xFFFFFFFFLL,  0LL);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      v57 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v58 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
        LODWORD(__src[0]) = 136315138;
        *(void *)((char *)__src + 4) = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "#Warning Could not get location from location event (%s)",  (uint8_t *)__src,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__src, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185E660);
        }
        uint64_t v70 = qword_101934A78;
        uint64_t v71 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
        int v76 = 136315138;
        uint64_t v77 = v71;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  v70,  0LL,  "#Warning Could not get location from location event (%s)",  (const char *)&v76);
        v73 = (char *)v72;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)",  "%s\n",  v72);
      }
    }

    id v59 = v106;
    if (v106)
    {
      uint64_t v60 = (unint64_t *)&v106->__shared_owners_;
      do
        unint64_t v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }

    if (v105 < 0) {
      operator delete(v104);
    }
    uint64_t v62 = v103;
    if (v103)
    {
      v63 = (unint64_t *)&v103->__shared_owners_;
      do
        unint64_t v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }

    uint64_t v32 = (std::__shared_weak_count *)*((void *)&v96 + 1);
    if (!*((void *)&v96 + 1)) {
      return;
    }
    uint64_t v65 = (unint64_t *)(*((void *)&v96 + 1) + 8LL);
    do
      unint64_t v34 = __ldaxr(v65);
    while (__stlxr(v34 - 1, v65));
    goto LABEL_113;
  }

  sub_100246564((uint64_t)&v93);
  if (CLClientGetLocation(a2, a4, &v93))
  {
    sub_1008B1888(a4, &v76);
    sub_10086A0D8((uint64_t)__src, (uint64_t)&v76);
    memcpy(v95, __src, sizeof(v95));
    __int128 v13 = v79;
    __int128 v79 = 0u;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v96 + 1);
    __int128 v96 = v13;
    if (v14)
    {
      double v15 = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    __int128 v101 = v84;
    v102[0] = v85[0];
    *(void *)((char *)v102 + 13) = *(void *)((char *)v85 + 13);
    __int128 v97 = v80;
    __int128 v98 = v81;
    __int128 v99 = v82;
    __int128 v100 = v83;
    int v17 = (std::__shared_weak_count *)*((void *)&v79 + 1);
    if (*((void *)&v79 + 1))
    {
      BOOL v18 = (unint64_t *)(*((void *)&v79 + 1) + 8LL);
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }

    LODWORD(__src[0]) = 0;
    (*(void (**)(void *, void *, int *, void, uint64_t, void))(*a1 + 152LL))( a1,  __src,  &v93,  0LL,  0xFFFFFFFFLL,  0LL);
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185E660);
    }
    v48 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      v49 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
      LODWORD(__src[0]) = 136315138;
      *(void *)((char *)__src + 4) = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "#Warning Could not get location from location event (%s)",  (uint8_t *)__src,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185E660);
      }
      uint64_t v66 = qword_101934A78;
      v67 = -[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"bundleIdentifier, %@, bundlePath, %@",  a1[20],  a1[19]),  "UTF8String");
      int v76 = 136315138;
      uint64_t v77 = v67;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __src,  1628LL,  &_mh_execute_header,  v66,  0LL,  "#Warning Could not get location from location event (%s)",  (const char *)&v76);
      v69 = (char *)v68;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent, id)",  "%s\n",  v68);
    }
  }

  v50 = v106;
  if (v106)
  {
    v51 = (unint64_t *)&v106->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  if (v105 < 0) {
    operator delete(v104);
  }
  v53 = v103;
  if (v103)
  {
    v54 = (unint64_t *)&v103->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  uint64_t v32 = (std::__shared_weak_count *)*((void *)&v96 + 1);
  if (*((void *)&v96 + 1))
  {
    v56 = (unint64_t *)(*((void *)&v96 + 1) + 8LL);
    do
      unint64_t v34 = __ldaxr(v56);
    while (__stlxr(v34 - 1, v56));
    goto LABEL_113;
  }

void sub_1008B17FC(_Unwind_Exception *a1)
{
}

uint64_t sub_1008B1888@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)[a1 objectForKey:@"LocationsPrivate"];
  if (result)
  {
    uint64_t v5 = (void *)result;
    uint64_t result = (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKey:", @"LocationCount"), "integerValue");
    if (result >= 1)
    {
      uint64_t v6 = result;
      uint64_t result = (uint64_t)[v5 bytes];
      if (result) {
        return (uint64_t)memcpy(a2, (const void *)(result + 560 * v6 - 560), 0x230uLL);
      }
    }
  }

  return result;
}

void sub_1008B192C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 184) = a2;
  sub_1008AF34C(a1);
}

uint64_t sub_1008B1934(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 188) != (_DWORD)a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 120);
    if (v4) {
      CLClientSetMatchInfoEnabled(v4, a2);
    }
    uint64_t v5 = *(void *)(v3 + 128);
    if (v5) {
      CLClientSetMatchInfoEnabled(v5, a2);
    }
    uint64_t v6 = *(void *)(v3 + 136);
    if (v6) {
      CLClientSetMatchInfoEnabled(v6, a2);
    }
    uint64_t result = *(void *)(v3 + 144);
    if (result) {
      uint64_t result = CLClientSetMatchInfoEnabled(result, a2);
    }
    *(_BYTE *)(v3 + 188) = a2;
  }

  return result;
}

uint64_t sub_1008B19A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v10 = 0;
  int v11 = 0;
  int v12 = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v9 = _Q0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(void *)a1 + 96LL))(a1, a2, a3, &v9);
}

BOOL sub_1008B19E0(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  BOOL v6 = sub_10023FEB8(a1, a2, a3, a4);
  if (v6)
  {
    int v7 = *a3;
  }

  return v6;
}

uint64_t sub_1008B1A38(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_1008B1A40(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result) {
    return CLClientMarkAsHavingReceivedLocation();
  }
  return result;
}

void sub_1008B1A50(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1008B1A7C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1008B1AA8(id a1)
{
  qword_101934A48 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1008B1AD4(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void *sub_1008B1B00(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &off_10185E6D0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1008B1B48(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_100CBE5D8(v1);
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_1008B1B64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    BOOL v2 = (void *)sub_100CBE5D8(v1);
    operator delete(v2);
  }

uint64_t sub_1008B1B88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1008B1C34(uint64_t a1, void *a2, int a3)
{
  double v7 = v6;
  [a2 coordinate];
  double v9 = v8;
  char v10 = *(_BYTE *)(a1 + 1795);
  if (v10)
  {
    double v7 = (double)sub_100DEA75C(COERCE_UNSIGNED_INT64(ceil(v7 * 500.0) / 500.0));
    double v9 = (double)sub_100DEA75C(COERCE_UNSIGNED_INT64(ceil(v9 * 500.0) / 500.0));
  }

  uint64_t v65 = &off_101858550;
  double v67 = v7;
  double v68 = v9;
  objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
  uint64_t v69 = v11;
  objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
  uint64_t v70 = v12;
  [a2 horizontalAccuracy];
  uint64_t v71 = v13;
  char v72 = a3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v14 = sub_100E00E14();
  sub_100E022E0(v14, (uint64_t)&v65);
  sub_101125260(v62);
  sub_10113B0B8(v62);
  v64 |= 1u;
  *(CFAbsoluteTime *)&v62[77] = Current;
  uint64_t v15 = v63;
  *(_WORD *)(v63 + 92) |= 0x40u;
  *(double *)(v15 + 56) = v7;
  uint64_t v16 = v63;
  *(_WORD *)(v63 + 92) |= 0x20u;
  *(double *)(v16 + 48) = v9;
  uint64_t v17 = v63;
  *(_WORD *)(v63 + 92) |= 0x800u;
  *(_BYTE *)(v17 + 88) = v10;
  uint64_t v18 = v63;
  objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
  *(_WORD *)(v18 + 92) |= 4u;
  *(void *)(v18 + 24) = v19;
  uint64_t v20 = v63;
  objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
  *(_WORD *)(v20 + 92) |= 1u;
  *(void *)(v20 + 8) = v21;
  uint64_t v22 = v63;
  [a2 horizontalAccuracy];
  *(_WORD *)(v22 + 92) |= 0x10u;
  *(void *)(v22 + 40) = v23;
  uint64_t v24 = v63;
  *(_WORD *)(v63 + 92) |= 0x200u;
  *(_DWORD *)(v24 + 80) = a3;
  uint64_t v25 = v63;
  *(_WORD *)(v63 + 92) |= 0x400u;
  *(_DWORD *)(v25 + 84) = -1;
  uint64_t v26 = v63;
  *(_WORD *)(v63 + 92) |= 0x100u;
  *(void *)(v26 + 72) = 0x407F400000000000LL;
  uint64_t v27 = objc_alloc(&OBJC_CLASS___CLLocation);
  [a2 coordinate];
  double v29 = v28;
  [a2 coordinate];
  uint64_t v30 = -[CLLocation initWithLatitude:longitude:](v27, "initWithLatitude:longitude:", v29);
  unint64_t v31 = *(void **)(a1 + 2032);
  v56 = _NSConcreteStackBlock;
  uint64_t v57 = 3321888768LL;
  uint64_t v58 = sub_1008CC270;
  id v59 = &unk_10185E888;
  sub_10112D8FC(v61, v62);
  uint64_t v60 = v30;
  [v31 fetchLocationsOfInterestWithinDistance:v30 ofLocation:&v56 withReply:500.0];

  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v62);
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }
  uint64_t v32 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    [a2 coordinate];
    uint64_t v34 = v33;
    [a2 coordinate];
    uint64_t v36 = v35;
    objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
    uint64_t v38 = v37;
    objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
    uint64_t v40 = v39;
    [a2 horizontalAccuracy];
    int v85 = 134219264;
    uint64_t v86 = v34;
    __int16 v87 = 2048;
    uint64_t v88 = v36;
    __int16 v89 = 2048;
    uint64_t v90 = v38;
    __int16 v91 = 2048;
    uint64_t v92 = v40;
    __int16 v93 = 2048;
    uint64_t v94 = v41;
    __int16 v95 = 1024;
    int v96 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Received an LOI notification:longitude,%f,lattitude,%f,\t\t\t\t\tdepartureDate,%f,arrivalDate,%f,\t\t\t\t\thorizon talAccuracy,%f,confidence,%d",  (uint8_t *)&v85,  0x3Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v85, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v43 = qword_1019344B8;
    [a2 coordinate];
    uint64_t v45 = v44;
    [a2 coordinate];
    uint64_t v47 = v46;
    objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
    uint64_t v49 = v48;
    objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
    uint64_t v51 = v50;
    [a2 horizontalAccuracy];
    int v73 = 134219264;
    uint64_t v74 = v45;
    __int16 v75 = 2048;
    uint64_t v76 = v47;
    __int16 v77 = 2048;
    uint64_t v78 = v49;
    __int16 v79 = 2048;
    uint64_t v80 = v51;
    __int16 v81 = 2048;
    uint64_t v82 = v52;
    __int16 v83 = 1024;
    int v84 = a3;
    LODWORD(v55) = 58;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v85,  1628LL,  &_mh_execute_header,  v43,  0LL,  "Received an LOI notification:longitude,%f,lattitude,%f,\t\t\t\t\tdepartureDate,%f,arrivalDate,%f,\t\t\t\t\thorizon talAccuracy,%f,confidence,%d",  COERCE_DOUBLE(&v73),  v55,  *(double *)&v56,  *(double *)&v57,  *(double *)&v58,  (_DWORD)v59);
    v54 = (int *)v53;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)",  "%s\n",  v53);
    if (v54 != &v85) {
      free(v54);
    }
  }

  sub_101127D00((PB::Base *)v61);
  return sub_101127D00((PB::Base *)v62);
}

void sub_1008B21C0(_Unwind_Exception *a1)
{
}

_BYTE *sub_1008B2230(_BYTE *result, uint64_t a2)
{
  if (result[1846])
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_10116FB18(a2, &v9);
    sub_101125260(v6);
    v8 |= 1u;
    *(CFAbsoluteTime *)&v6[77] = Current;
    uint64_t v4 = v9;
    double v9 = 0LL;
    uint64_t v5 = v7;
    double v7 = v4;
    if (v5) {
      (*(void (**)(_BYTE *))(*(void *)v5 + 8LL))(v5);
    }
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v6);
    }
    sub_101127D00((PB::Base *)v6);
    uint64_t result = v9;
    double v9 = 0LL;
    if (result) {
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1008B2314( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(v9 - 40);
  *(void *)(v9 - 40) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008B234C(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 1895))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_100B56F70(a2, (uint64_t)v10);
    sub_101125260(v7);
    v9 |= 1u;
    *(CFAbsoluteTime *)&v7[77] = Current;
    uint64_t v4 = operator new(0xF8uLL);
    uint64_t v5 = sub_1011655F4(v4, v10);
    uint64_t v6 = v8;
    uint64_t v8 = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v7);
    }
    sub_101127D00((PB::Base *)v7);
    return sub_10116512C((PB::Base *)v10);
  }

  return result;
}

void sub_1008B242C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008B2454(uint64_t a1)
{
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10185E9F0);
  }
  uint64_t v1 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "onPedestrianFenceNotification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "onPedestrianFenceNotification",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::onPedestrianFenceExit()", "%s\n", v2);
    if (v3 != buf) {
      free(v3);
    }
  }

uint64_t sub_1008B25E8(uint64_t a1, void *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v33 |= 1u;
  *(CFAbsoluteTime *)&v31[77] = Current;
  sub_10113A0F8(v31);
  uint64_t v4 = v32;
  [a2 timestamp];
  *(_WORD *)(v4 + 68) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v32;
  if ([a2 deltaPositionX]) {
    objc_msgSend(objc_msgSend(a2, "deltaPositionX"), "floatValue");
  }
  else {
    int v7 = 2143289344;
  }
  *(_WORD *)(v6 + 68) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  uint64_t v8 = v32;
  if ([a2 deltaPositionY]) {
    objc_msgSend(objc_msgSend(a2, "deltaPositionY"), "floatValue");
  }
  else {
    int v9 = 2143289344;
  }
  *(_WORD *)(v8 + 68) |= 4u;
  *(_DWORD *)(v8 + 20) = v9;
  uint64_t v10 = v32;
  if ([a2 deltaPositionZ]) {
    objc_msgSend(objc_msgSend(a2, "deltaPositionZ"), "floatValue");
  }
  else {
    int v11 = 2143289344;
  }
  *(_WORD *)(v10 + 68) |= 8u;
  *(_DWORD *)(v10 + 24) = v11;
  uint64_t v12 = v32;
  if ([a2 deltaVelocityX]) {
    objc_msgSend(objc_msgSend(a2, "deltaVelocityX"), "floatValue");
  }
  else {
    int v13 = 2143289344;
  }
  *(_WORD *)(v12 + 68) |= 0x10u;
  *(_DWORD *)(v12 + 28) = v13;
  uint64_t v14 = v32;
  if ([a2 deltaVelocityY]) {
    objc_msgSend(objc_msgSend(a2, "deltaVelocityY"), "floatValue");
  }
  else {
    int v15 = 2143289344;
  }
  *(_WORD *)(v14 + 68) |= 0x20u;
  *(_DWORD *)(v14 + 32) = v15;
  uint64_t v16 = v32;
  if ([a2 deltaVelocityZ]) {
    objc_msgSend(objc_msgSend(a2, "deltaVelocityZ"), "floatValue");
  }
  else {
    int v17 = 2143289344;
  }
  *(_WORD *)(v16 + 68) |= 0x40u;
  *(_DWORD *)(v16 + 36) = v17;
  uint64_t v18 = v32;
  if ([a2 quaternionX]) {
    objc_msgSend(objc_msgSend(a2, "quaternionX"), "floatValue");
  }
  else {
    int v19 = 2143289344;
  }
  *(_WORD *)(v18 + 68) |= 0x100u;
  *(_DWORD *)(v18 + 44) = v19;
  uint64_t v20 = v32;
  if ([a2 quaternionY]) {
    objc_msgSend(objc_msgSend(a2, "quaternionY"), "floatValue");
  }
  else {
    int v21 = 2143289344;
  }
  *(_WORD *)(v20 + 68) |= 0x200u;
  *(_DWORD *)(v20 + 48) = v21;
  uint64_t v22 = v32;
  if ([a2 quaternionZ]) {
    objc_msgSend(objc_msgSend(a2, "quaternionZ"), "floatValue");
  }
  else {
    int v23 = 2143289344;
  }
  *(_WORD *)(v22 + 68) |= 0x400u;
  *(_DWORD *)(v22 + 52) = v23;
  uint64_t v24 = v32;
  if ([a2 quaternionW]) {
    objc_msgSend(objc_msgSend(a2, "quaternionW"), "floatValue");
  }
  else {
    int v25 = 2143289344;
  }
  *(_WORD *)(v24 + 68) |= 0x80u;
  *(_DWORD *)(v24 + 40) = v25;
  uint64_t v26 = v32;
  unsigned int v27 = [a2 referenceFrame];
  *(_WORD *)(v26 + 68) |= 0x800u;
  *(_DWORD *)(v26 + 56) = v27;
  uint64_t v28 = v32;
  unsigned int v29 = [a2 staticFlag];
  *(_WORD *)(v28 + 68) |= 0x1000u;
  *(_DWORD *)(v28 + 60) = v29;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v31);
  }
  return sub_101127D00((PB::Base *)v31);
}

void sub_1008B2908(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008B2938(uint64_t a1, void *a2)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)a1 = &off_10185E748;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 248) = a2;
  sub_100AD558C(a1 + 256, (uint64_t)"MotionDataCollection", a1, 0.0);
  *(void *)(a1 + 704) = 0LL;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 768) = 0LL;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 776) = 0xBFF0000000000000LL;
  *(_BYTE *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 816) = @"CLMotionLogger";
  *(_BYTE *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  sub_100AEB404(a1 + 896, "MotionCalibration", *(void *)(a1 + 248));
  uint64_t v4 = (uint64_t *)(a1 + 1088);
  *(_OWORD *)(a1 + 1104) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 1136);
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1113) = 0u;
  bzero((void *)(a1 + 1136), 0x378uLL);
  sub_1008D2AB0((unsigned __int8 *)(a1 + 1264));
  *(void *)(a1 + 2032) = 0LL;
  *(void *)(a1 + 2064) = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "silo"), "newTimer");
  *(void *)(a1 + 2072) = 0LL;
  *(void *)(a1 + 2304) = 0LL;
  *(_OWORD *)(a1 + 2240) = xmmword_10133F5E0;
  *(_OWORD *)(a1 + 2256) = unk_10133F5F0;
  *(_OWORD *)(a1 + 2272) = xmmword_10133F600;
  *(_OWORD *)(a1 + 2288) = unk_10133F610;
  *(_OWORD *)(a1 + 2176) = xmmword_10133F5A0;
  *(_OWORD *)(a1 + 2192) = unk_10133F5B0;
  *(_OWORD *)(a1 + 2208) = xmmword_10133F5C0;
  *(_OWORD *)(a1 + 2224) = unk_10133F5D0;
  *(_OWORD *)(a1 + 2112) = xmmword_10133F560;
  *(_OWORD *)(a1 + 2128) = unk_10133F570;
  *(_OWORD *)(a1 + 2144) = xmmword_10133F580;
  *(_OWORD *)(a1 + 2160) = unk_10133F590;
  *(_OWORD *)(a1 + 2080) = xmmword_10133F540;
  *(_OWORD *)(a1 + 2096) = unk_10133F550;
  *(_OWORD *)(a1 + 656) = xmmword_10133F638;
  *(_OWORD *)(a1 + 672) = unk_10133F648;
  *(_OWORD *)(a1 + 684) = unk_10133F654;
  *(_OWORD *)(a1 + 640) = xmmword_10133F628;
  *(_DWORD *)(a1 + 684) = 1088421888;
  *(void *)(a1 + 712) = 0x200000002LL;
  sub_100468458((uint64_t)sub_1008B3A04, a1, *(void **)(a1 + 248), buf);
  uint64_t v6 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v7 = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    uint64_t v8 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  sub_10027EB5C((uint64_t)sub_1008B3BDC, a1, *(void **)(a1 + 248), buf);
  uint64_t v9 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v10 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    uint64_t v11 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  sub_10070EDF0((uint64_t)sub_1008B3DB0, a1, *(void **)(a1 + 248), buf);
  uint64_t v12 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v13 = *(void *)(a1 + 880);
  *(void *)(a1 + 880) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    uint64_t v14 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  sub_100AEB408(a1 + 896, (uint64_t)sub_1008B3F84, a1, *(void **)(a1 + 248), buf);
  uint64_t v15 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v16 = *v4;
  uint64_t *v4 = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    uint64_t v17 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
  }

  sub_1008B1934(a1 + 896, 1LL);
  sub_1004F2598();
  if ((sub_1004F64FC() & 8) != 0) {
    sub_100A9E608();
  }
  sub_100E18F18((uint64_t)sub_1008B4500, a1, *(void **)(a1 + 248), buf);
  uint64_t v18 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v19 = *v5;
  uint64_t *v5 = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    uint64_t v20 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
  }

  sub_10036B3B4((uint64_t)sub_1008B46D8, a1, *(void **)(a1 + 248), buf);
  uint64_t v21 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v22 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    uint64_t v23 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
  }

  sub_10043AC3C((uint64_t)sub_1008B48AC, a1, *(void **)(a1 + 248), buf);
  uint64_t v24 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v25 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = v24;
  if (v25)
  {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    uint64_t v26 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
    }
  }

  sub_1005C4E40((uint64_t)sub_1008B4A84, a1, *(void **)(a1 + 248), buf);
  uint64_t v27 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v28 = *(void *)(a1 + 1160);
  *(void *)(a1 + 1160) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    uint64_t v29 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
  }

  sub_100A15BEC((uint64_t)sub_1008B4C5C, a1, *(void **)(a1 + 248), buf);
  uint64_t v30 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v31 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1168) = v30;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    uint64_t v32 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
    }
  }

  sub_101037234((uint64_t)sub_1008B4E38, a1, a2, buf);
  uint64_t v33 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v34 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = v33;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    uint64_t v35 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
    }
  }

  sub_100A1C6E0((uint64_t)sub_1008B5010, a1, *(void **)(a1 + 248), buf);
  uint64_t v36 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v37 = *(void *)(a1 + 1176);
  *(void *)(a1 + 1176) = v36;
  if (v37)
  {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
    uint64_t v38 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
    }
  }

  sub_10043AC3C((uint64_t)sub_1008B51E4, a1, *(void **)(a1 + 248), buf);
  uint64_t v39 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v40 = *(void *)(a1 + 1112);
  *(void *)(a1 + 1112) = v39;
  if (v40)
  {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
    uint64_t v41 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
    }
  }

  sub_100D3BE3C((uint64_t)sub_1008B53B8, a1, *(void **)(a1 + 248), buf);
  uint64_t v42 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v43 = *(void *)(a1 + 1208);
  *(void *)(a1 + 1208) = v42;
  if (v43)
  {
    (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
    uint64_t v44 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
    }
  }

  *(void *)(a1 + 2024) =  -[CLMotionLoggerAdapter initWithMotionLogger:]( objc_alloc(&OBJC_CLASS___CLMotionLoggerAdapter),  "initWithMotionLogger:",  a1);
  id v45 = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "vendor"), "proxyForService:", @"CLRoutineMonitor");
  *(void *)(a1 + 2032) = v45;
  objc_msgSend(v45, "registerDelegate:inSilo:", *(void *)(a1 + 2024), objc_msgSend(*(id *)(a1 + 248), "silo"));
  [*(id *)(a1 + 2032) setDelegateEntityName:"CLMotionLogger"];
  id v46 =  objc_msgSend( objc_msgSend(*(id *)(a1 + 248), "vendor"),  "proxyForService:",  @"CLMobilityWalkingBoutService");
  *(void *)(a1 + 2040) = v46;
  objc_msgSend(v46, "registerDelegate:inSilo:", *(void *)(a1 + 2024), objc_msgSend(*(id *)(a1 + 248), "silo"));
  [*(id *)(a1 + 2040) setDelegateEntityName:"CLMotionLogger"];
  id v47 = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "vendor"), "proxyForService:", @"CLPedestrianFenceService");
  *(void *)(a1 + 2048) = v47;
  objc_msgSend(v47, "registerDelegate:inSilo:", *(void *)(a1 + 2024), objc_msgSend(*(id *)(a1 + 248), "silo"));
  objc_msgSend(*(id *)(a1 + 2048), "setDelegateEntityName:", objc_msgSend(*(id *)(a1 + 816), "UTF8String"));
  id v48 =  objc_msgSend( objc_msgSend(*(id *)(a1 + 248), "vendor"),  "proxyForService:",  @"CLBackgroundInertialOdometryService");
  *(void *)(a1 + 2056) = v48;
  objc_msgSend(v48, "registerDelegate:inSilo:", *(void *)(a1 + 2024), objc_msgSend(*(id *)(a1 + 248), "silo"));
  [*(id *)(a1 + 2056) setDelegateEntityName:"CLMotionLogger"];
  sub_10099570C((uint64_t)sub_1008B558C, a1, *(void **)(a1 + 248), buf);
  uint64_t v49 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v50 = *(void *)(a1 + 1216);
  *(void *)(a1 + 1216) = v49;
  if (v50)
  {
    (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
    uint64_t v51 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
    }
  }

  sub_1003CC884((uint64_t)sub_1008B5760, a1, *(void **)(a1 + 248), buf);
  uint64_t v52 = *(void *)buf;
  *(void *)std::stringbuf::string_type buf = 0LL;
  uint64_t v53 = *(void *)(a1 + 1232);
  *(void *)(a1 + 1232) = v52;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
    uint64_t v54 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
    }
  }

  if (sub_1001B9A1C())
  {
    sub_1005BB360((uint64_t)sub_1008B5934, a1, *(void **)(a1 + 248), buf);
    uint64_t v55 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    uint64_t v56 = *(void *)(a1 + 1240);
    *(void *)(a1 + 1240) = v55;
    if (v56)
    {
      (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
      uint64_t v57 = *(void *)buf;
      *(void *)std::stringbuf::string_type buf = 0LL;
      if (v57) {
        (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1271) || (sub_1008B5CA0(a1), *(_BYTE *)(a1 + 1274))) {
    sub_1008B5B08(a1);
  }
  sub_1008BAAB0(a1);
  uint64_t v58 = operator new(0x20uLL);
  *uint64_t v58 = off_1018A2210;
  *uint64_t v58 = &off_10185EB00;
  v58[1] = 0LL;
  v58[2] = sub_1008BCC3C;
  v58[3] = a1;
  *(void *)(a1 + 400) = v58;
  uint64_t v59 = sub_100E45498();
  sub_1006DCB40(v59, 0, *(void *)(a1 + 400), -1.0);
  uint64_t v60 = sub_100E45498();
  sub_1006DCB40(v60, 1, *(void *)(a1 + 400), -1.0);
  uint64_t v61 = sub_100E45498();
  sub_1006DCB40(v61, 2, *(void *)(a1 + 400), -1.0);
  if (*(_BYTE *)(a1 + 1871))
  {
    *(void *)(a1 + 784) = IOPMScheduleUserActivityLevelNotificationWithTimeout( &_dispatch_main_q,  300LL,  &stru_10185E760);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v62 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      if (*(void *)(a1 + 784)) {
        uint64_t v63 = "SUCCESS";
      }
      else {
        uint64_t v63 = "FAILURE";
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      *(void *)&uint8_t buf[4] = v63;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "Logging power management user activity, status: %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      if (*(void *)(a1 + 784)) {
        double v67 = "SUCCESS";
      }
      else {
        double v67 = "FAILURE";
      }
      int v72 = 136315138;
      int v73 = v67;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging power management user activity, status: %s",  (const char *)&v72);
      uint64_t v69 = (char *)v68;
      sub_10029211C("Generic", 1LL, 0, 2LL, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)", "%s\n", v68);
    }
  }

  if (*(_BYTE *)(a1 + 1874))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    char v64 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_INFO,  "Registering for focus modes user activity",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v72) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for focus modes user activity",  &v72,  2);
      uint64_t v71 = (char *)v70;
      sub_10029211C("Generic", 1LL, 0, 2LL, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)", "%s\n", v70);
    }

    uint64_t v65 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *(void *)(a1 + 1256) = dispatch_queue_create("com.apple.FocusModes.queue", v65);
    *(void *)(a1 + 1248) = objc_msgSend( objc_msgSend( objc_msgSend( +[BMStreams userFocusComputedMode](BMStreams, "userFocusComputedMode"),  "publisher"),  "subscribeOn:",  -[BMBiomeScheduler initWithIdentifier:targetQueue:waking:]( [BMBiomeScheduler alloc],  "initWithIdentifier:targetQueue:waking:",  @"com.apple.donotdisturb.mode",  *(void *)(a1 + 1256),  0)),  "sinkWithCompletion:receiveInput:",  &stru_10185E780,  &stru_10185E7C0);
  }

  if (*(_BYTE *)(a1 + 1946))
  {
    [*(id *)(a1 + 2048) startSessionForClient:*(void *)(a1 + 2024) withIdentifier:@"CLMotionLoggerSession"];
    sub_1008BD6AC((id)a1);
  }

  if (*(_BYTE *)(a1 + 2001)) {
    [*(id *)(a1 + 2056) startBackgroundInertialOdometryUpdatesForClient:*(void *)(a1 + 2024) withIdentifier:@"CLMotionLogger" usingReferenceFrame:*(int *)(a1 + 2008)];
  }
  return a1;
}

void sub_1008B36D4(_Unwind_Exception *a1)
{
  uint64_t v7 = v1[155];
  v1[155] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = v1[154];
  v1[154] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = v1[153];
  v1[153] = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = v1[152];
  v1[152] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = v1[151];
  v1[151] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = v1[150];
  v1[150] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = v1[149];
  v1[149] = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  sub_1008D493C(v1 + 148, 0LL);
  uint64_t v14 = v1[147];
  v1[147] = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = v1[146];
  v1[146] = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  uint64_t v16 = v1[145];
  v1[145] = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  uint64_t v17 = v1[144];
  v1[144] = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  uint64_t v18 = v1[143];
  v1[143] = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = *v4;
  uint64_t *v4 = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = v1[140];
  v1[140] = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = v1[139];
  v1[139] = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = v1[138];
  v1[138] = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  uint64_t v23 = v1[137];
  v1[137] = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  uint64_t v24 = *v5;
  uint64_t *v5 = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  sub_1008AF1C4(v3);
  uint64_t v25 = v1[111];
  v1[111] = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = v1[110];
  v1[110] = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = v1[109];
  v1[109] = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  uint64_t v28 = v1[108];
  v1[108] = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  uint64_t v29 = v1[69];
  v1[69] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  uint64_t v30 = v1[65];
  v1[65] = 0LL;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  uint64_t v31 = v1[57];
  v1[57] = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  uint64_t v32 = v1[56];
  v1[56] = 0LL;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
  }
  sub_100AD5650(v2);
  sub_1005EDAA4(v1);
  _Unwind_Resume(a1);
}

void sub_1008B3A04(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onMotionStateMediatorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onMotionStateMediatorNotification, event:%{public, location:escape_ only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C5A34(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B3BBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B3BDC(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onOdometerNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onOdometerNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008C7684(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B3D90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B3DB0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onCatherineNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onCatherineNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008C7BCC(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B3F64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B3F84(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onLocationNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C804C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B413C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B415C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification, event:%{public, lo cation:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C9978(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B4314( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B4334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onGnssLeechLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onGnssLeechLocationNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008CA2E8(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B44E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B4500(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onCalorieUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onCalorieUpdate, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C9AC8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B46B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B46D8(uint64_t a1, _DWORD *a2, char *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onMotionStateUpdate",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onMotionStateUpdate, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008CB308(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B488C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B48AC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onLocationDerivedNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onLocationDerivedNotification, event:%{public, location:escape_only }s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C8648(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B4A64( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B4A84(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onWatchOrientationSettingsNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onWatchOrientationSettingsNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C9D60(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B4C3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B4C5C(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onGeomagneticModelNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onGeomagneticModelNotification, event:%{public, location:escape_onl y}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v13 = 0;
  }

  if (!*a2)
  {
    __int128 v9 = *a3;
    __int128 v10 = a3[1];
    __int128 v11 = a3[3];
    *(_OWORD *)(a4 + 752) = a3[2];
    *(_OWORD *)(a4 + 768) = v11;
    *(_OWORD *)(a4 + 720) = v9;
    *(_OWORD *)(a4 + 736) = v10;
  }

  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B4E1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B4E38(uint64_t a1, _DWORD *a2, _OWORD *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onStepCountNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onStepCountNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008C9FD8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B4FF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B5010(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int128 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onSignalEnvironmentNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onSignalEnvironmentNotification, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008CA104(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B51C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B51E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int128 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onGnssAvailabilityPredictorNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onGnssAvailabilityPredictorNotification, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008CA1D0(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B5398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B53B8(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int128 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onFitnessMachineNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onFitnessMachineNotification, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008CAA74(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B556C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B558C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int128 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onMagneticAccessoryEvent",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onMagneticAccessoryEvent, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008CAD24(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B5740( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B5760(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int128 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onDaemonStatus",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onDaemonStatus, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008D16F0(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B5914( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B5934(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int128 v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onBLSData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    __int128 v10 = (os_log_s *)qword_1019349D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onBLSData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v12 = 0;
  }

  sub_1008D1F4C(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008B5AE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B5B08(uint64_t a1)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }
  uint64_t v1 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "logging workout events", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "logging workout events",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::registerForWorkoutEvents()", "%s\n", v2);
    if (v3 != buf) {
      free(v3);
    }
  }

void sub_1008B5CA0(uint64_t a1)
{
  *(_OWORD *)(a1 + 656) = xmmword_10133F638;
  *(_OWORD *)(a1 + 672) = unk_10133F648;
  *(_OWORD *)(a1 + 684) = unk_10133F654;
  *(_OWORD *)(a1 + 640) = xmmword_10133F628;
  *(_DWORD *)(a1 + 684) = 1088421888;
  *(void *)(a1 + 712) = 0x200000002LL;
  if (*(_BYTE *)(a1 + 1265))
  {
    if (!*(_BYTE *)(a1 + 792))
    {
      sub_1010DDBC0(__p, "ctor");
      sub_100AD5668(a1 + 256, (uint64_t *)__p);
      if (v270 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1268))
  {
    sub_1004F2598();
    if (sub_1001B9A1C())
    {
      sub_1004F2598();
      if (sub_1004F8A40())
      {
        *(void *)(a1 + 704) = +[CLLocationIndependenceAssertion newAssertionWithReason:]( &OBJC_CLASS___CLLocationIndependenceAssertion,  "newAssertionWithReason:",  @"Log GPS on both devices");
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185E910);
        }
        uint64_t v2 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Taking a CLLocationIndependenceAssertion",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10185E910);
          }
          *(_WORD *)v275 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Taking a CLLocationIndependenceAssertion",  v275,  2);
          v253 = (char *)v252;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v252);
          if (v253 != buf) {
            free(v253);
          }
        }
      }
    }
  }

  if (*(_DWORD *)(a1 + 1732) == 1)
  {
    sub_1004F2598();
    if (sub_1004F8A40())
    {
      if (!*(_BYTE *)(a1 + 792))
      {
        [*(id *)(*(void *)(a1 + 1088) + 16) unregister:*(void *)(*(void *)(a1 + 1088) + 8) forNotification:5];
        if (*(void *)(a1 + 1096))
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10185E930);
          }
          uint64_t v3 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#wigo,on,MotionLoggerLocal", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10185E930);
            }
            *(_WORD *)v275 = 0;
            LODWORD(v261) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,on,MotionLoggerLocal",  v275,  *(void *)&v261);
            v257 = (char *)v256;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v256);
            if (v257 != buf) {
              free(v257);
            }
          }

          AnalyticsSendEventLazy(@"com.apple.locationd.position.GNSS.WIGO", &stru_10185E7E0);
          [*(id *)(*(void *)(a1 + 1096) + 16) register:*(void *)(*(void *)(a1 + 1096) + 8) forNotification:0 registrationInfo:0];
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10185E910);
          }
          uint64_t v4 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Logging GPS: Local source", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10185E910);
            }
            *(_WORD *)v275 = 0;
            LODWORD(v261) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging GPS: Local source",  v275,  *(void *)&v261);
            BOOL v6 = (char *)v5;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v5);
LABEL_525:
            if (v6 != buf) {
              free(v6);
            }
          }
        }

        else
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10185E930);
          }
          BOOL v7 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#wigo,on,MotionLoggerMediated", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10185E930);
            }
            *(_WORD *)v275 = 0;
            LODWORD(v261) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,on,MotionLoggerMediated",  v275,  *(void *)&v261);
            v259 = (char *)v258;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v258);
            if (v259 != buf) {
              free(v259);
            }
          }

          AnalyticsSendEventLazy(@"com.apple.locationd.position.GNSS.WIGO", &stru_10185E800);
          [*(id *)(*(void *)(a1 + 1088) + 16) register:*(void *)(*(void *)(a1 + 1088) + 8) forNotification:0 registrationInfo:0];
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10185E910);
          }
          uint64_t v8 = (os_log_s *)qword_1019344B8;
          if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Logging GPS: Mediated source", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019344B0 != -1) {
              dispatch_once(&qword_1019344B0, &stru_10185E910);
            }
            *(_WORD *)v275 = 0;
            LODWORD(v261) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging GPS: Mediated source",  v275,  *(void *)&v261);
            BOOL v6 = (char *)v260;
            sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v260);
            goto LABEL_525;
          }
        }
      }
    }
  }

  if (*(double *)(a1 + 1288) > 0.0 && sub_1006E5C40())
  {
    double v9 = *(double *)(a1 + 1288);
    __int128 v10 = operator new(0x20uLL);
    *__int128 v10 = off_1018A2210;
    *__int128 v10 = &off_10185EB50;
    v10[1] = 0LL;
    v10[2] = sub_1008BD904;
    v10[3] = a1;
    *(void *)(a1 + 312) = v10;
    uint64_t v11 = sub_1006E5C40();
    sub_1006DCB40(v11, 0, *(void *)(a1 + 312), v9);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    char v12 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Logging accelerometer at interval, %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134217984;
      *(double *)&v275[4] = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accelerometer at interval, %f",  COERCE_DOUBLE(v275));
      v219 = (char *)v218;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v218);
      if (v219 != buf) {
        free(v219);
      }
    }
  }

  if (*(double *)(a1 + 1312) > 0.0 && sub_100403FC0())
  {
    double v13 = *(double *)(a1 + 1312);
    int v14 = operator new(0x20uLL);
    *int v14 = off_1018A2210;
    *int v14 = &off_10185EBA0;
    v14[1] = 0LL;
    void v14[2] = sub_1008BDA38;
    v14[3] = a1;
    *(void *)(a1 + 320) = v14;
    uint64_t v15 = sub_100403FC0();
    sub_1006DCB40(v15, 0, *(void *)(a1 + 320), v13);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v16 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Logging HA at interval, %f", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134217984;
      *(double *)&v275[4] = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging HA at interval, %f",  COERCE_DOUBLE(v275));
      v221 = (char *)v220;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v220);
      if (v221 != buf) {
        free(v221);
      }
    }
  }

  if (*(double *)(a1 + 1336) > 0.0 && sub_1006FE6A0())
  {
    double v268 = *(double *)(a1 + 1336);
    __int16 v17 = operator new(0x20uLL);
    void *v17 = off_1018A2210;
    void *v17 = &off_10185EBF0;
    v17[1] = 0LL;
    v17[2] = sub_1008BDB5C;
    v17[3] = a1;
    *(void *)(a1 + 328) = v17;
    uint64_t v18 = sub_1006FE6A0();
    sub_1006DCB40(v18, 0, *(void *)(a1 + 328), v268);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v19 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v268;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Logging gyro at interval, %f", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134217984;
      *(double *)&v275[4] = v268;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging gyro at interval, %f",  COERCE_DOUBLE(v275));
      v223 = (char *)v222;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v222);
      if (v223 != buf) {
        free(v223);
      }
    }

    uint64_t v20 = sub_1006FE6A0();
    double v21 = sub_1006FE6E4(v20, (uint64_t)&v268);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v22 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Logging gyrodt, %f", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134217984;
      *(double *)&v275[4] = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging gyrodt, %f",  COERCE_DOUBLE(v275));
      v225 = (char *)v224;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v224);
      if (v225 != buf) {
        free(v225);
      }
    }

    v265 = &off_1018579B0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    float v23 = v21;
    float v267 = v23;
    uint64_t v24 = sub_100E00E14();
    sub_100E022E0(v24, (uint64_t)&v265);
    sub_101125260(buf);
    sub_10113A734(buf);
    v279 |= 1u;
    CFAbsoluteTime v277 = Current;
    uint64_t v25 = v278;
    *(_BYTE *)(v278 + 12) |= 1u;
    *(float *)(v25 + 8) = v23;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    uint64_t v26 = operator new(0x20uLL);
    *uint64_t v26 = off_1018A2210;
    *uint64_t v26 = &off_10185EC40;
    v26[1] = 0LL;
    v26[2] = sub_1008BDD18;
    v26[3] = a1;
    *(void *)(a1 + 336) = v26;
    uint64_t v27 = sub_1006FE6A0();
    sub_1006DCB40(v27, 1, *(void *)(a1 + 336), 1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v28 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v275 = 134217984;
      *(void *)&v275[4] = 0x3FF0000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Logging gyro temperature at interval, %f",  v275,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v275, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v273 = 134217984;
      uint64_t v274 = 0x3FF0000000000000LL;
      _os_log_send_and_compose_impl( 2LL,  0LL,  v275,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging gyro temperature at interval, %f",  COERCE_DOUBLE(&v273));
      v231 = (char *)v230;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v230);
      if (v231 != v275) {
        free(v231);
      }
    }

    uint64_t v29 = sub_1006E2838();
    if (sub_1003957C0(v29))
    {
      uint64_t v30 = (void *)sub_1006E2838();
      sub_100395860((uint64_t)sub_1008BDE08, a1, v30, v275);
      uint64_t v31 = *(void *)v275;
      *(void *)v275 = 0LL;
      uint64_t v32 = *(void *)(a1 + 1224);
      *(void *)(a1 + 1224) = v31;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
        uint64_t v33 = *(void *)v275;
        *(void *)v275 = 0LL;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
        }
      }

      [*(id *)(*(void *)(a1 + 1224) + 16) register:*(void *)(*(void *)(a1 + 1224) + 8) forNotification:0 registrationInfo:0];
    }

    else
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10185E950);
      }
      uint64_t v34 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v275 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_FAULT,  "CLGyroCalibrationDatabase is not available.",  v275,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(v275, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_10185E950);
        }
        LOWORD(v273) = 0;
        LODWORD(v261) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  v275,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "CLGyroCalibrationDatabase is not available.",  &v273,  *(void *)&v261);
        v255 = (char *)v254;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v254);
        if (v255 != v275) {
          free(v255);
        }
      }
    }

    sub_101127D00((PB::Base *)buf);
  }

  if (*(double *)(a1 + 1360) > 0.0 && sub_1007C3B70())
  {
    double v35 = *(double *)(a1 + 1360);
    uint64_t v36 = operator new(0x20uLL);
    void *v36 = off_1018A2210;
    void *v36 = &off_10183E9D0;
    v36[1] = 0LL;
    v36[2] = sub_1008BE518;
    v36[3] = a1;
    *(void *)(a1 + 344) = v36;
    uint64_t v37 = sub_1007C3B70();
    sub_1006DCB40(v37, 0, *(void *)(a1 + 344), v35);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v38 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "Logging magnetometer at interval, %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134217984;
      *(double *)&v275[4] = v35;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging magnetometer at interval, %f",  COERCE_DOUBLE(v275));
      v227 = (char *)v226;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v226);
      if (v227 != buf) {
        free(v227);
      }
    }
  }

  if (*(double *)(a1 + 1384) > 0.0 && sub_1005BDE54())
  {
    double v39 = *(double *)(a1 + 1384);
    uint64_t v40 = operator new(0x20uLL);
    void *v40 = off_1018A2210;
    void *v40 = &off_10185EC90;
    v40[1] = 0LL;
    v40[2] = sub_1008BE670;
    v40[3] = a1;
    *(void *)(a1 + 352) = v40;
    uint64_t v41 = sub_1005BDE54();
    sub_1006DCB40(v41, 0, *(void *)(a1 + 352), v39);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v42 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Logging Pressure at interval, %f", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134217984;
      *(double *)&v275[4] = v39;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging Pressure at interval, %f",  COERCE_DOUBLE(v275));
      v229 = (char *)v228;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v228);
      if (v229 != buf) {
        free(v229);
      }
    }
  }

  if (*(double *)(a1 + 1408) > 0.0)
  {
    if (sub_100DDA4D4())
    {
      int v43 = *(_DWORD *)(a1 + 1704);
      if (v43)
      {
        double v44 = *(double *)(a1 + 1408);
        if (v43 == 15) {
          [*(id *)(*(void *)(a1 + 1168) + 16) register:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:0 registrationInfo:0];
        }
        id v45 = -[CLDeviceMotionProperties initWithMode:]( objc_alloc(&OBJC_CLASS___CLDeviceMotionProperties),  "initWithMode:",  *(unsigned int *)(a1 + 1704));
        id v46 = operator new(0x20uLL);
        *id v46 = off_1018A2210;
        id v47 = v45;
        *id v46 = &off_10185ECE0;
        v46[1] = v47;
        v46[2] = sub_1008BE778;
        v46[3] = a1;
        *(void *)(a1 + 304) = v46;

        uint64_t v48 = sub_100DDA4D4();
        sub_100DDAEA4(v48, *(void *)(a1 + 304), v44);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185E910);
        }
        uint64_t v49 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          int v50 = *(_DWORD *)(a1 + 1704);
          *(_DWORD *)std::stringbuf::string_type buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v50;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "Logging sensor fusion variant, %d, at interval, %f",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10185E910);
          }
          int v235 = *(_DWORD *)(a1 + 1704);
          *(_DWORD *)v275 = 67109376;
          *(_DWORD *)&v275[4] = v235;
          *(_WORD *)&v275[8] = 2048;
          *(double *)&v275[10] = v44;
          LODWORD(v261) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging sensor fusion variant, %d, at interval, %f",  v275,  v261);
          v237 = (char *)v236;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v236);
          if (v237 != buf) {
            free(v237);
          }
        }
      }
    }
  }

  if (*(_BYTE *)(a1 + 1768))
  {
    uint64_t v51 = operator new(0x38uLL);
    sub_1003DE40C(v51, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008BEB84, a1, 0);
    *(void *)(a1 + 416) = v51;
    uint64_t v52 = sub_1008FA854(0);
    sub_1006DCB40(v52, 0, *(void *)(a1 + 416), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v53 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "Logging MotionState", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging MotionState",  v275,  *(void *)&v261);
      v178 = (char *)v177;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v177);
      if (v178 != buf) {
        free(v178);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1780))
  {
    uint64_t v54 = operator new(0x20uLL);
    void *v54 = off_1018A2210;
    void *v54 = &off_10185ED30;
    v54[1] = 0LL;
    v54[2] = sub_1008BED54;
    v54[3] = a1;
    *(void *)(a1 + 360) = v54;
    uint64_t v55 = sub_1002F34E0();
    sub_1006DCB40(v55, 9, *(void *)(a1 + 360), -1.0);
    uint64_t v56 = operator new(0x20uLL);
    void *v56 = off_1018A2210;
    void *v56 = &off_10185ED80;
    v56[1] = 0LL;
    v56[2] = sub_1008BF1A8;
    v56[3] = a1;
    *(void *)(a1 + 368) = v56;
    uint64_t v57 = sub_1002F34E0();
    sub_1006DCB40(v57, 4, *(void *)(a1 + 368), -1.0);
    uint64_t v58 = operator new(0x20uLL);
    *uint64_t v58 = off_1018A2210;
    *uint64_t v58 = &off_10185EDD0;
    v58[1] = 0LL;
    v58[2] = sub_1008BF300;
    v58[3] = a1;
    *(void *)(a1 + 376) = v58;
    uint64_t v59 = sub_1002F34E0();
    sub_1006DCB40(v59, 5, *(void *)(a1 + 376), -1.0);
    uint64_t v60 = operator new(0x20uLL);
    *uint64_t v60 = off_1018A2210;
    *uint64_t v60 = &off_10185EE20;
    v60[1] = 0LL;
    v60[2] = sub_1008BF59C;
    v60[3] = a1;
    *(void *)(a1 + 384) = v60;
    uint64_t v61 = sub_1002F34E0();
    sub_1006DCB40(v61, 6, *(void *)(a1 + 384), -1.0);
    uint64_t v62 = operator new(0x20uLL);
    *uint64_t v62 = off_1018A2210;
    *uint64_t v62 = &off_1018A2348;
    v62[1] = 0LL;
    v62[2] = sub_1008BF700;
    v62[3] = a1;
    *(void *)(a1 + 392) = v62;
    uint64_t v63 = sub_1002F34E0();
    sub_1006DCB40(v63, 0, *(void *)(a1 + 392), -1.0);
    uint64_t v64 = sub_1002F34E0();
    sub_1002F3644(v64, 2);
  }

  if (*(double *)(a1 + 1432) > 0.0 && *(_DWORD *)(a1 + 1452) && sub_100E93770())
  {
    double v65 = *(double *)(a1 + 1432);
    unsigned int v66 = *(_DWORD *)(a1 + 1452);
    double v67 = operator new(0x48uLL);
    sub_1008D4968((uint64_t)v67, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008BFA68, v66, a1);
    *(void *)(a1 + 536) = v67;
    uint64_t v68 = sub_100E93770();
    sub_1006DCB40(v68, 0, *(void *)(a1 + 536), v65);
    uint64_t v69 = operator new(0x20uLL);
    void *v69 = off_1018A2210;
    void *v69 = &off_10185EED8;
    v69[1] = 0LL;
    v69[2] = sub_1008BFC3C;
    v69[3] = a1;
    *(void *)(a1 + 544) = v69;
    uint64_t v70 = sub_100E93770();
    sub_1006DCB40(v70, 1, *(void *)(a1 + 544), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v71 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v65;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v66;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_INFO,  "Logging accessory accelerometer at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v65;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v66;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory accelerometer at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v239 = (char *)v238;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v238);
      if (v239 != buf) {
        free(v239);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1461) && sub_100E7C15C())
  {
    id v72 = [*(id *)(a1 + 248) silo];
    int v73 = operator new(0x38uLL);
    sub_1008D4C70(v73, v72, (uint64_t)sub_1008BFD7C, a1, 0LL);
    uint64_t v74 = *(void *)(a1 + 552);
    *(void *)(a1 + 552) = v73;
    if (v74) {
      (*(void (**)(uint64_t))(*(void *)v74 + 8LL))(v74);
    }
    uint64_t v75 = sub_100E7C15C();
    sub_1006DCB40(v75, 0, *(void *)(a1 + 552), 1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v76 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "Logging accessory monitor", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory monitor",  v275,  *(void *)&v261);
      v214 = (char *)v213;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v213);
      if (v214 != buf) {
        free(v214);
      }
    }
  }

  if (*(double *)(a1 + 1472) > 0.0 && *(_DWORD *)(a1 + 1492) && sub_1004C71B0())
  {
    double v77 = *(double *)(a1 + 1472);
    unsigned int v78 = *(_DWORD *)(a1 + 1492);
    __int16 v79 = operator new(0x48uLL);
    sub_1008D51AC((uint64_t)v79, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008BFF48, v78, a1);
    *(void *)(a1 + 560) = v79;
    uint64_t v80 = sub_1004C71B0();
    sub_1006DCB40(v80, 0, *(void *)(a1 + 560), v77);
    __int16 v81 = operator new(0x20uLL);
    void *v81 = off_1018A2210;
    void *v81 = &off_10185EFF0;
    v81[1] = 0LL;
    v81[2] = sub_1008C011C;
    v81[3] = a1;
    *(void *)(a1 + 568) = v81;
    uint64_t v82 = sub_1004C71B0();
    sub_1006DCB40(v82, 1, *(void *)(a1 + 568), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v83 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v77;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v78;
      _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_INFO,  "Logging accessory proximity at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v77;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v78;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory proximity at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v241 = (char *)v240;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v240);
      if (v241 != buf) {
        free(v241);
      }
    }
  }

  if (*(double *)(a1 + 1512) > 0.0 && *(_DWORD *)(a1 + 1532) && sub_100998F14())
  {
    double v84 = *(double *)(a1 + 1512);
    unsigned int v85 = *(_DWORD *)(a1 + 1532);
    uint64_t v86 = operator new(0x48uLL);
    sub_1008D54A0((uint64_t)v86, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C0290, v85, a1);
    *(void *)(a1 + 576) = v86;
    uint64_t v87 = sub_100998F14();
    sub_1006DCB40(v87, 0, *(void *)(a1 + 576), v84);
    uint64_t v88 = operator new(0x20uLL);
    *uint64_t v88 = off_1018A2210;
    *uint64_t v88 = &off_10185F090;
    v88[1] = 0LL;
    v88[2] = sub_1008C0464;
    v88[3] = a1;
    *(void *)(a1 + 584) = v88;
    uint64_t v89 = sub_100998F14();
    sub_1006DCB40(v89, 1, *(void *)(a1 + 584), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v90 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v84;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v85;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_INFO,  "Logging accessory gyro at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v84;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v85;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory gyro at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v247 = (char *)v246;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v246);
      if (v247 != buf) {
        free(v247);
      }
    }
  }

  if (*(double *)(a1 + 1632) > 0.0 && *(_DWORD *)(a1 + 1652) && sub_1003E1F48())
  {
    double v91 = *(double *)(a1 + 1632);
    unsigned int v92 = *(_DWORD *)(a1 + 1652);
    __int16 v93 = operator new(0x48uLL);
    sub_1008D57A8((uint64_t)v93, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C0554, v92, a1);
    *(void *)(a1 + 624) = v93;
    uint64_t v94 = sub_1003E1F48();
    sub_1006DCB40(v94, 0, *(void *)(a1 + 624), v91);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v95 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v91;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v92;
      _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "Logging accessory heart rate at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v91;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v92;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory heart rate at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v243 = (char *)v242;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v242);
      if (v243 != buf) {
        free(v243);
      }
    }
  }

  if (*(double *)(a1 + 1672) > 0.0 && *(_DWORD *)(a1 + 1692) && sub_100510A70())
  {
    double v96 = *(double *)(a1 + 1672);
    unsigned int v97 = *(_DWORD *)(a1 + 1692);
    __int128 v98 = operator new(0x48uLL);
    sub_1008D5A9C((uint64_t)v98, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C0728, v97, a1);
    *(void *)(a1 + 632) = v98;
    uint64_t v99 = sub_100510A70();
    sub_1006DCB40(v99, 0, *(void *)(a1 + 632), v96);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int128 v100 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v96;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v97;
      _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_INFO,  "Logging accessory PPG at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v96;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v97;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory PPG at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v245 = (char *)v244;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v244);
      if (v245 != buf) {
        free(v245);
      }
    }
  }

  if (*(double *)(a1 + 1552) > 0.0 && *(_DWORD *)(a1 + 1572) && sub_10080C788())
  {
    double v101 = *(double *)(a1 + 1552);
    unsigned int v102 = *(_DWORD *)(a1 + 1572);
    v103 = operator new(0x48uLL);
    sub_1008D5DA4((uint64_t)v103, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C08FC, v102, a1);
    *(void *)(a1 + 592) = v103;
    uint64_t v104 = sub_10080C788();
    sub_1006DCB40(v104, 0, *(void *)(a1 + 592), v101);
    char v105 = operator new(0x20uLL);
    *char v105 = off_1018A2210;
    *char v105 = &off_10185F090;
    v105[1] = 0LL;
    v105[2] = sub_1008C0AD0;
    v105[3] = a1;
    *(void *)(a1 + 600) = v105;
    uint64_t v106 = sub_10080C788();
    sub_1006DCB40(v106, 1, *(void *)(a1 + 600), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    id v107 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v101;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v102;
      _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_INFO,  "Logging accessory Magnetometer at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v101;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v102;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory Magnetometer at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v249 = (char *)v248;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v248);
      if (v249 != buf) {
        free(v249);
      }
    }
  }

  if (*(double *)(a1 + 1592) > 0.0 && *(_DWORD *)(a1 + 1612) && sub_100FD4930())
  {
    double v108 = *(double *)(a1 + 1592);
    unsigned int v109 = *(_DWORD *)(a1 + 1612);
    char v110 = *(_BYTE *)(a1 + 1621);
    *(_BYTE *)(sub_100FD4930() + 28) = v110;
    v111 = operator new(0x48uLL);
    sub_1011FF9FC((uint64_t)v111, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C0BC0, v109, a1);
    *(void *)(a1 + 608) = v111;
    uint64_t v112 = sub_100FD4930();
    sub_1006DCB40(v112, 0, *(void *)(a1 + 608), v108);
    v113 = operator new(0x20uLL);
    void *v113 = off_1018A2210;
    void *v113 = &off_10185F1E8;
    v113[1] = 0LL;
    v113[2] = sub_1008C0D94;
    v113[3] = a1;
    *(void *)(a1 + 616) = v113;
    uint64_t v114 = sub_100FD4930();
    sub_1006DCB40(v114, 1, *(void *)(a1 + 616), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v115 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(double *)&uint8_t buf[4] = v108;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v109;
      _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_INFO,  "Logging accessory device motion at interval, %{public}f, buffer size, %{public}u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_DWORD *)v275 = 134349312;
      *(double *)&v275[4] = v108;
      *(_WORD *)&v275[12] = 1026;
      *(_DWORD *)&v275[14] = v109;
      LODWORD(v261) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging accessory device motion at interval, %{public}f, buffer size, %{public}u",  v275,  *(void *)&v261);
      v251 = (char *)v250;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v250);
      if (v251 != buf) {
        free(v251);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1786))
  {
    sub_10034FF34((uint64_t)sub_1008C0F0C, a1, *(void **)(a1 + 248), buf);
    uint64_t v116 = *(void *)buf;
    *(void *)std::stringbuf::string_type buf = 0LL;
    uint64_t v117 = *(void *)(a1 + 1192);
    *(void *)(a1 + 1192) = v116;
    if (v117)
    {
      (*(void (**)(uint64_t))(*(void *)v117 + 8LL))(v117);
      uint64_t v118 = *(void *)buf;
      *(void *)std::stringbuf::string_type buf = 0LL;
      if (v118) {
        (*(void (**)(uint64_t))(*(void *)v118 + 8LL))(v118);
      }
    }

    [*(id *)(*(void *)(a1 + 1192) + 16) register:*(void *)(*(void *)(a1 + 1192) + 8) forNotification:3 registrationInfo:0];
    if (*(_BYTE *)(a1 + 1789))
    {
      v264[0] = _NSConcreteStackBlock;
      v264[1] = 3221225472LL;
      v264[2] = sub_1008C10DC;
      v264[3] = &unk_10181D3D0;
      v264[4] = a1;
      [*(id *)(a1 + 2064) setHandler:v264];
      [*(id *)(a1 + 2064) setNextFireDelay:1.0 interval:8.0];
    }
  }

  if (*(_BYTE *)(a1 + 1828))
  {
    v119 = operator new(0x20uLL);
    void *v119 = off_1018A2210;
    void *v119 = &off_10185F238;
    v119[1] = 0LL;
    v119[2] = nullsub_858;
    v119[3] = a1;
    *(void *)(a1 + 408) = v119;
    uint64_t v120 = sub_101002274();
    sub_1006DCB40(v120, 0, *(void *)(a1 + 408), -1.0);
  }

  if (*(_BYTE *)(a1 + 1834))
  {
    [*(id *)(*(void *)(a1 + 1176) + 16) register:*(void *)(*(void *)(a1 + 1176) + 8) forNotification:0 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v121 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_INFO,  "Registering for SignalEnvironment notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for SignalEnvironment notifications",  v275,  *(void *)&v261);
      v180 = (char *)v179;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v179);
      if (v180 != buf) {
        free(v180);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1837))
  {
    uint64_t v122 = *(void *)(a1 + 1112);
    if (v122) {
      [*(id *)(v122 + 16) register:*(void *)(v122 + 8) forNotification:36 registrationInfo:0];
    }
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v123 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_INFO,  "Registering for Gnss Availability notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Gnss Availability notifications",  v275,  *(void *)&v261);
      v182 = (char *)v181;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v181);
      if (v182 != buf) {
        free(v182);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1840))
  {
    uint64_t v124 = *(void *)(a1 + 1120);
    if (v124) {
      [*(id *)(v124 + 16) register:*(void *)(v124 + 8) forNotification:5 registrationInfo:0];
    }
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v125 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_INFO,  "Registering for Gnss Leech Location notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Gnss Leech Location notifications",  v275,  *(void *)&v261);
      v184 = (char *)v183;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v183);
      if (v184 != buf) {
        free(v184);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1843) && !*(_BYTE *)(a1 + 1128))
  {
    uint64_t v126 = sub_1006088E8();
    sub_1010DDBC0(v262, "CLMotionLogger");
    id v127 = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "silo"), "queue");
    v271[0] = &off_10185F288;
    v271[1] = a1;
    v272 = v271;
    sub_100608C04(v126, (char *)v262, (uint64_t)v127, (uint64_t)v271);
    v128 = v272;
    if (v272 == v271)
    {
      uint64_t v129 = 4LL;
      v128 = v271;
    }

    else
    {
      if (!v272)
      {
LABEL_220:
        if (v263 < 0) {
          operator delete(v262[0]);
        }
        *(_BYTE *)(a1 + 1128) = 1;
        goto LABEL_223;
      }

      uint64_t v129 = 5LL;
    }

    (*(void (**)(void))(*v128 + 8 * v129))();
    goto LABEL_220;
  }

LABEL_244:
  if (*(_BYTE *)(a1 + 1877))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) register:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:10 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v138 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_INFO,  "Registering for display state notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for display state notifications",  v275,  *(void *)&v261);
      v186 = (char *)v185;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v185);
      if (v186 != buf) {
        free(v186);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1880))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) register:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:2 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v139 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_INFO,  "Registering for AP sleep notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for AP sleep notifications",  v275,  *(void *)&v261);
      v188 = (char *)v187;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v187);
      if (v188 != buf) {
        free(v188);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1883))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) register:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:3 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v140 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v140,  OS_LOG_TYPE_INFO,  "Registering for AP wake notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for AP wake notifications",  v275,  *(void *)&v261);
      v190 = (char *)v189;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v189);
      if (v190 != buf) {
        free(v190);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1862))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) register:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:7 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v141 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_INFO,  "Registering for battery status notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for battery status notifications",  v275,  *(void *)&v261);
      v192 = (char *)v191;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v191);
      if (v192 != buf) {
        free(v192);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1865))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) register:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:11 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v142 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_INFO,  "Registering for screen lock status notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for screen lock status notifications",  v275,  *(void *)&v261);
      v194 = (char *)v193;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v193);
      if (v194 != buf) {
        free(v194);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1868))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) register:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:15 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v143 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_INFO,  "Registering for battery saver mode status notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for battery saver mode status notifications",  v275,  *(void *)&v261);
      v196 = (char *)v195;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v195);
      if (v196 != buf) {
        free(v196);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1901))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v144 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_INFO,  "Registering for AOP SPL notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for AOP SPL notifications",  v275,  *(void *)&v261);
      v198 = (char *)v197;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v197);
      if (v198 != buf) {
        free(v198);
      }
    }

    v145 = operator new(0x38uLL);
    sub_1003DE40C(v145, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C145C, a1, 0);
    *(void *)(a1 + 440) = v145;
    uint64_t v146 = sub_1008FA854(0);
    sub_1006DCB40(v146, 34, *(void *)(a1 + 440), -1.0);
  }

  if (*(_BYTE *)(a1 + 1910))
  {
    v147 = operator new(0x38uLL);
    sub_1003DE40C(v147, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C1628, a1, 0);
    *(void *)(a1 + 472) = v147;
    uint64_t v148 = sub_1008FA854(0);
    sub_1006DCB40(v148, 40, *(void *)(a1 + 472), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v149 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v149,  OS_LOG_TYPE_INFO,  "Registering for prox PDP notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for prox PDP notifications",  v275,  *(void *)&v261);
      v200 = (char *)v199;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v199);
      if (v200 != buf) {
        free(v200);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1913))
  {
    v150 = operator new(0x38uLL);
    sub_1003DE40C(v150, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C17F4, a1, 0);
    *(void *)(a1 + 480) = v150;
    uint64_t v151 = sub_1008FA854(0);
    sub_1006DCB40(v151, 41, *(void *)(a1 + 480), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v152 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_INFO, "Registering for ALS notifications", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for ALS notifications",  v275,  *(void *)&v261);
      v202 = (char *)v201;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v201);
      if (v202 != buf) {
        free(v202);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1916))
  {
    if (sub_1001B9A1C())
    {
      [*(id *)(*(void *)(a1 + 1240) + 16) register:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:0 registrationInfo:0];
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_10185E970);
      }
      v153 = (os_log_s *)qword_1019344A8;
      if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_INFO,  "Registering for backlight state notifications",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344A0 != -1) {
          dispatch_once(&qword_1019344A0, &stru_10185E970);
        }
        *(_WORD *)v275 = 0;
        LODWORD(v261) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  1LL,  "Registering for backlight state notifications",  v275,  *(void *)&v261);
        v155 = (char *)v154;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v154);
LABEL_468:
        if (v155 != buf) {
          free(v155);
        }
      }
    }

    else
    {
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_10185E970);
      }
      v156 = (os_log_s *)qword_1019344A8;
      if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_ERROR,  "Backlight state notifications are not available on this platform",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344A0 != -1) {
          dispatch_once(&qword_1019344A0, &stru_10185E970);
        }
        *(_WORD *)v275 = 0;
        LODWORD(v261) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  16LL,  "Backlight state notifications are not available on this platform",  v275,  *(void *)&v261);
        v155 = (char *)v232;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v232);
        goto LABEL_468;
      }
    }
  }

  if (*(_BYTE *)(a1 + 1919))
  {
    v157 = operator new(0x38uLL);
    sub_1003DE40C(v157, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C19C0, a1, 0);
    *(void *)(a1 + 488) = v157;
    uint64_t v158 = sub_1008FA854(0);
    sub_1006DCB40(v158, 42, *(void *)(a1 + 488), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v159 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v159,  OS_LOG_TYPE_INFO,  "Registering for view obstructed state notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for view obstructed state notifications",  v275,  *(void *)&v261);
      v204 = (char *)v203;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v203);
      if (v204 != buf) {
        free(v204);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1922))
  {
    v160 = operator new(0x38uLL);
    sub_1003DE40C(v160, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C1B8C, a1, 0);
    *(void *)(a1 + 496) = v160;
    uint64_t v161 = sub_1008FA854(0);
    sub_1006DCB40(v161, 43, *(void *)(a1 + 496), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v162 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v162,  OS_LOG_TYPE_INFO,  "Registering for orientation notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for orientation notifications",  v275,  *(void *)&v261);
      v206 = (char *)v205;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v205);
      if (v206 != buf) {
        free(v206);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1925))
  {
    v163 = operator new(0x38uLL);
    sub_1003DE40C(v163, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C1D58, a1, 0);
    *(void *)(a1 + 504) = v163;
    uint64_t v164 = sub_1008FA854(0);
    sub_1006DCB40(v164, 44, *(void *)(a1 + 504), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v165 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_INFO,  "Registering for DeviceMotionAlwaysOn notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for DeviceMotionAlwaysOn notifications",  v275,  *(void *)&v261);
      v208 = (char *)v207;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v207);
      if (v208 != buf) {
        free(v208);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1928))
  {
    v166 = operator new(0x38uLL);
    sub_1003DE40C(v166, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C1F24, a1, 0);
    *(void *)(a1 + 512) = v166;
    uint64_t v167 = sub_1008FA854(0);
    sub_1006DCB40(v167, 45, *(void *)(a1 + 512), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v168 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v168,  OS_LOG_TYPE_INFO,  "Registering for Significant User Interaction notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Significant User Interaction notifications",  v275,  *(void *)&v261);
      v212 = (char *)v211;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v211);
      if (v212 != buf) {
        free(v212);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1943))
  {
    [*(id *)(*(void *)(a1 + 1208) + 16) register:*(void *)(*(void *)(a1 + 1208) + 8) forNotification:0 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v169 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v169,  OS_LOG_TYPE_INFO,  "Registering for Fitness Machine update notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Fitness Machine update notifications",  v275,  *(void *)&v261);
      v210 = (char *)v209;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v209);
      if (v210 != buf) {
        free(v210);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1937))
  {
    v170 = operator new(0x38uLL);
    sub_1008D6150(v170, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C20E0, a1, 0);
    *(void *)(a1 + 832) = v170;
    v171 = operator new(0x38uLL);
    sub_1008D6608(v171, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C22AC, a1, 0);
    *(void *)(a1 + 840) = v171;
    v172 = operator new(0x38uLL);
    sub_1008D6AB0(v172, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C2478, a1, 0);
    *(void *)(a1 + 848) = v172;
    v173 = operator new(0x38uLL);
    sub_1008D6F58(v173, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C2644, a1, 0);
    *(void *)(a1 + 856) = v173;
    uint64_t v174 = sub_1006A64D8();
    uint64_t v175 = v174;
    if (v174)
    {
      sub_1006DCB40(v174, 0, *(void *)(a1 + 832), -1.0);
      sub_1006DCB40(v175, 1, *(void *)(a1 + 840), -1.0);
      sub_1006DCB40(v175, 3, *(void *)(a1 + 848), -1.0);
      sub_1006DCB40(v175, 2, *(void *)(a1 + 856), -1.0);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v176 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v176,  OS_LOG_TYPE_INFO,  "Registering for keyboard motion notifications",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185E910);
        }
        *(_WORD *)v275 = 0;
        LODWORD(v261) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for keyboard motion notifications",  v275,  *(void *)&v261);
        v216 = (char *)v215;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v215);
        if (v216 != buf) {
          free(v216);
        }
      }
    }
  }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          BOOL v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 0xDu:
          *(_WORD *)(a1 + 116) |= 4u;
          uint64_t v104 = *((void *)this + 1);
          char v105 = *((void *)this + 2);
          uint64_t v106 = *(void *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5LL && v104 + 10 <= v105)
          {
            id v107 = 0;
            double v108 = 0;
            unsigned int v109 = 0LL;
            do
            {
              char v110 = v104 + 1;
              *((void *)this + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0) {
                goto LABEL_223;
              }
              v107 += 7;
              uint64_t v104 = v110;
              uint64_t v20 = v108++ > 8;
            }

            while (!v20);
LABEL_179:
            LODWORD(v109) = 0;
            goto LABEL_223;
          }

          v141 = 0;
          v142 = 0;
          unsigned int v109 = 0LL;
          if (v105 <= v104) {
            char v105 = *((void *)this + 1);
          }
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v143 = v104 + 1;
              v144 = *(_BYTE *)(v106 + v104);
              *((void *)this + 1) = v143;
              v109 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                uint64_t v104 = v143;
                uint64_t v20 = v142++ > 8;
                if (v20) {
                  goto LABEL_179;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v109) = 0;
              }
            }

            break;
          }

void sub_1008BA964(_Unwind_Exception *a1)
{
}

void sub_1008BAAB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1762))
  {
    [*(id *)(*(void *)(a1 + 1136) + 16) register:*(void *)(*(void *)(a1 + 1136) + 8) forNotification:2 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Logging body metrics", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging body metrics",  &v102,  2);
      uint64_t v61 = (uint8_t *)v60;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v60);
      if (v61 != buf) {
        free(v61);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1713))
  {
    [*(id *)(*(void *)(a1 + 872) + 16) register:*(void *)(*(void *)(a1 + 872) + 8) forNotification:3 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Logging elevation change active", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging elevation change active",  &v102,  v97);
      uint64_t v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v4);
LABEL_266:
      if (v5 != buf) {
        free(v5);
      }
    }
  }

  else if (*(_BYTE *)(a1 + 1716))
  {
    [*(id *)(*(void *)(a1 + 872) + 16) register:*(void *)(*(void *)(a1 + 872) + 8) forNotification:7 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    BOOL v6 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Logging elevation change spectator", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging elevation change spectator",  &v102,  v97);
      uint64_t v5 = (uint8_t *)v94;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v94);
      goto LABEL_266;
    }
  }

  if (*(_BYTE *)(a1 + 1719))
  {
    [*(id *)(*(void *)(a1 + 872) + 16) register:*(void *)(*(void *)(a1 + 872) + 8) forNotification:5 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    BOOL v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Logging coarse elevation change", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging coarse elevation change",  &v102,  v97);
      uint64_t v63 = (uint8_t *)v62;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v62);
      if (v63 != buf) {
        free(v63);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1722))
  {
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:6 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 880) + 16) register:*(void *)(*(void *)(a1 + 880) + 8) forNotification:10 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Logging HR spectator", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging HR spectator",  &v102,  v97);
      double v65 = (uint8_t *)v64;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v64);
      if (v65 != buf) {
        free(v65);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1725))
  {
    [*(id *)(*(void *)(a1 + 888) + 16) register:*(void *)(*(void *)(a1 + 888) + 8) forNotification:0 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    double v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Loggging BT vehicle connections", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Loggging BT vehicle connections",  &v102,  v97);
      double v67 = (uint8_t *)v66;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v66);
      if (v67 != buf) {
        free(v67);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1753) || *(_BYTE *)(a1 + 1756) || *(_DWORD *)(a1 + 1732))
  {
    [*(id *)(*(void *)(a1 + 1152) + 16) register:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:22 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1152) + 16) register:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:4 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1152) + 16) register:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:33 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int128 v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Logging WiFi locations", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging WiFi locations",  &v102,  v97);
      uint64_t v57 = (uint8_t *)v56;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v56);
      if (v57 != buf) {
        free(v57);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1759))
  {
    [*(id *)(*(void *)(a1 + 1152) + 16) register:*(void *)(*(void *)(a1 + 1152) + 8) forNotification:23 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Logging Buffered Odometer Locations", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging Buffered Odometer Locations",  &v102,  v97);
      uint64_t v69 = (uint8_t *)v68;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v68);
      if (v69 != buf) {
        free(v69);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1765))
  {
    [*(id *)(*(void *)(a1 + 872) + 16) register:*(void *)(*(void *)(a1 + 872) + 8) forNotification:4 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    char v12 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Logging GPS odometer", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging GPS odometer",  &v102,  v97);
      uint64_t v71 = (uint8_t *)v70;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v70);
      if (v71 != buf) {
        free(v71);
      }
    }
  }

  if (*(_DWORD *)(a1 + 1732))
  {
    [*(id *)(*(void *)(a1 + 1088) + 16) register:*(void *)(*(void *)(a1 + 1088) + 8) forNotification:5 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    double v13 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Logging GPS locations (leech)", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging GPS locations (leech)",  &v102,  v97);
      int v73 = (uint8_t *)v72;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v72);
      if (v73 != buf) {
        free(v73);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1774))
  {
    [*(id *)(*(void *)(a1 + 1144) + 16) register:*(void *)(*(void *)(a1 + 1144) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1144) + 16) register:*(void *)(*(void *)(a1 + 1144) + 8) forNotification:6 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v14 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Logging motion state hints, e.g., vibration and touch events",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging motion state hints, e.g., vibration and touch events",  &v102,  v97);
      uint64_t v75 = (uint8_t *)v74;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v74);
      if (v75 != buf) {
        free(v75);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1771))
  {
    uint64_t v15 = operator new(0x38uLL);
    sub_1003DE40C(v15, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C5270, a1, 0);
    *(void *)(a1 + 424) = v15;
    uint64_t v16 = sub_1008FA854(0);
    sub_1006DCB40(v16, 12, *(void *)(a1 + 424), -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v17 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Logging baseband speed", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging baseband speed",  &v102,  v97);
      double v77 = (uint8_t *)v76;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v76);
      if (v77 != buf) {
        free(v77);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1777))
  {
    [*(id *)(*(void *)(a1 + 1160) + 16) register:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:0 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 1160) + 16) register:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:1 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v18 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Logging watch orientation settings", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging watch orientation settings",  &v102,  v97);
      __int16 v79 = (uint8_t *)v78;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v78);
      if (v79 != buf) {
        free(v79);
      }
    }
  }

  if (!*(_BYTE *)(a1 + 1783)) {
    goto LABEL_95;
  }
  __int16 v19 = (int *)operator new(0x20uLL);
  *(void *)__int16 v19 = &off_10185F498;
  *((void *)v19 + 1) = sub_1008CB4F0;
  *((void *)v19 + 2) = 0LL;
  *((void *)v19 + 3) = a1;
  uint64_t v104 = v19;
  uint64_t v20 = operator new(0x98uLL);
  uint64_t v21 = *(void *)(a1 + 248);
  sub_1008D74D8((uint64_t)buf, (uint64_t)&v102);
  sub_101023E00(v20, v21, buf);
  uint64_t v22 = v107;
  if (v107 == buf)
  {
    uint64_t v23 = 4LL;
    uint64_t v22 = buf;
    goto LABEL_89;
  }

  if (v107)
  {
    uint64_t v23 = 5LL;
LABEL_89:
    (*(void (**)(void))(*(void *)v22 + 8 * v23))();
  }

  sub_1008D493C((uint64_t *)(a1 + 1184), (uint64_t)v20);
  uint64_t v24 = v104;
  if (v104 == &v102)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = &v102;
  }

  else
  {
    if (!v104) {
      goto LABEL_95;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_95:
  if (*(_BYTE *)(a1 + 1792))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v26 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Registering for lois", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for lois",  &v102,  v97);
      __int16 v81 = (uint8_t *)v80;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v80);
      if (v81 != buf) {
        free(v81);
      }
    }

    [*(id *)(a1 + 2032) startMonitoringVisitsForClient:*(void *)(a1 + 2024)];
    [*(id *)(a1 + 2032) startLeechingLowConfidenceVisitsForClient:*(void *)(a1 + 2024)];
  }

  if (*(_BYTE *)(a1 + 1831))
  {
    [*(id *)(*(void *)(a1 + 1200) + 16) register:*(void *)(*(void *)(a1 + 1200) + 8) forNotification:0 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v27 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "CLMotionLogger: Registering for Step Count Updates",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "CLMotionLogger: Registering for Step Count Updates",  &v102,  v97);
      __int16 v83 = (uint8_t *)v82;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v82);
      if (v83 != buf) {
        free(v83);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1834))
  {
    [*(id *)(*(void *)(a1 + 1176) + 16) register:*(void *)(*(void *)(a1 + 1176) + 8) forNotification:0 registrationInfo:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v28 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "Registering for SignalEnvironment notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for SignalEnvironment notifications",  &v102,  v97);
      unsigned int v85 = (uint8_t *)v84;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v84);
      if (v85 != buf) {
        free(v85);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1837))
  {
    uint64_t v29 = *(void *)(a1 + 1112);
    if (v29) {
      [*(id *)(v29 + 16) register:*(void *)(v29 + 8) forNotification:36 registrationInfo:0];
    }
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v30 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "Registering for Gnss Availability notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Gnss Availability notifications",  &v102,  v97);
      uint64_t v87 = (uint8_t *)v86;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v86);
      if (v87 != buf) {
        free(v87);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1840))
  {
    uint64_t v31 = *(void *)(a1 + 1120);
    if (v31) {
      [*(id *)(v31 + 16) register:*(void *)(v31 + 8) forNotification:5 registrationInfo:0];
    }
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v32 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "Registering for Gnss Leech Location notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v102) = 0;
      LODWORD(v97) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for Gnss Leech Location notifications",  &v102,  v97);
      uint64_t v89 = (uint8_t *)v88;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v88);
      if (v89 != buf) {
        free(v89);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1843) && !*(_BYTE *)(a1 + 1128))
  {
    uint64_t v33 = sub_1006088E8();
    sub_1010DDBC0(__p, "CLMotionLogger");
    id v34 = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "silo"), "queue");
    v100[0] = &off_10185F530;
    v100[1] = a1;
    double v101 = v100;
    sub_100608C04(v33, (char *)__p, (uint64_t)v34, (uint64_t)v100);
    double v35 = v101;
    if (v101 == v100)
    {
      uint64_t v36 = 4LL;
      double v35 = v100;
    }

    else
    {
      if (!v101)
      {
LABEL_137:
        if (v99 < 0) {
          operator delete(__p[0]);
        }
        *(_BYTE *)(a1 + 1128) = 1;
        goto LABEL_140;
      }

      uint64_t v36 = 5LL;
    }

    (*(void (**)(void))(*v35 + 8 * v36))();
    goto LABEL_137;
  }

void sub_1008BCB50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
}

void sub_1008BCC3C(unsigned __int8 *a1, uint64_t a2)
{
}

void sub_1008BCC4C(id a1, unint64_t a2, unint64_t a3)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v8 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  uint64_t v5 = v7;
  *(_BYTE *)(v7 + 16) |= 1u;
  *(void *)(v5 + 8) = a2;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v6);
  }
  sub_101127D00((PB::Base *)v6);
}

void sub_1008BCCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008BCD0C(id a1, BPSCompletion *a2)
{
  if (-[BPSCompletion state](a2, "state"))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      id v12 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Unregistering for focus modes user activity with an error: %s\n",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v4 = qword_1019344B8;
    int v9 = 136315138;
    id v10 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  1LL,  "Unregistering for focus modes user activity with an error: %s\n",  (const char *)&v9);
    BOOL v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v5);
    if (v6 == buf) {
      return;
    }
LABEL_20:
    free(v6);
    return;
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }
  uint64_t v7 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Unregistering for focus modes user activity",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    LOWORD(v9) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for focus modes user activity",  &v9,  2);
    BOOL v6 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v8);
    if (v6 != buf) {
      goto LABEL_20;
    }
  }

void sub_1008BD000(id a1, BMStoreEvent *a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }
  uint64_t v3 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "mode"), "UTF8String");
    id v5 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "semanticModeIdentifier"), "UTF8String");
    id v6 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateReason");
    id v7 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeSemanticType");
    id v8 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateSource");
    else {
      int v9 = "0";
    }
    -[BMStoreEvent timestamp](a2, "timestamp");
    *(_DWORD *)std::stringbuf::string_type buf = 136316674;
    id v41 = v4;
    __int16 v42 = 2080;
    id v43 = v5;
    __int16 v44 = 2048;
    id v45 = v6;
    __int16 v46 = 2048;
    id v47 = v7;
    __int16 v48 = 2048;
    id v49 = v8;
    __int16 v50 = 2080;
    uint64_t v51 = v9;
    __int16 v52 = 2048;
    uint64_t v53 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[Focus Mode] mode: %s | semanticModeIdentifier: %s | modeUpdateReason: %llu | modeSemanticType: %lld | modeUpdateS ource: %lld | starting: %s | timestamp: %f",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v27 = qword_1019344B8;
    id v28 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "mode"), "UTF8String");
    id v29 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "semanticModeIdentifier"), "UTF8String");
    id v30 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateReason");
    id v31 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeSemanticType");
    id v32 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateSource");
    else {
      uint64_t v33 = "0";
    }
    -[BMStoreEvent timestamp](a2, "timestamp");
    *(_DWORD *)uint64_t v57 = 136316674;
    *(void *)&v57[4] = v28;
    __int16 v58 = 2080;
    id v59 = v29;
    __int16 v60 = 2048;
    id v61 = v30;
    __int16 v62 = 2048;
    id v63 = v31;
    __int16 v64 = 2048;
    id v65 = v32;
    __int16 v66 = 2080;
    double v67 = v33;
    __int16 v68 = 2048;
    uint64_t v69 = v34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v27,  0LL,  "[Focus Mode] mode: %s | semanticModeIdentifier: %s | modeUpdateReason: %llu | modeSemanticType: %lld | modeUpdateS ource: %lld | starting: %s | timestamp: %f",  v57,  72);
    uint64_t v36 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v35);
    if (v36 != buf) {
      free(v36);
    }
  }

  if (a2 && -[BMStoreEvent eventBody](a2, "eventBody"))
  {
    sub_101125260(buf);
    sub_101139918(buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v56 |= 1u;
    CFAbsoluteTime v54 = Current;
    uint64_t v12 = v55;
    sub_1010DDBC0( v57,  (char *)objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "mode"), "UTF8String"));
    *(void *)&double v13 = sub_1007A71E8(v12, (__n128 *)v57).n128_u64[0];
    if (SHIBYTE(v60) < 0) {
      operator delete(*(void **)v57);
    }
    uint64_t v14 = v55;
    sub_1010DDBC0( v57,  (char *)objc_msgSend( objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody", v13), "semanticModeIdentifier"),  "UTF8String"));
    *(void *)&double v15 = sub_1008BD63C(v14, (__n128 *)v57).n128_u64[0];
    if (SHIBYTE(v60) < 0) {
      operator delete(*(void **)v57);
    }
    uint64_t v16 = v55;
    unsigned int v17 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody", v15), "modeUpdateReason");
    *(_BYTE *)(v16 + 48) |= 4u;
    *(_DWORD *)(v16 + 36) = v17;
    uint64_t v18 = v55;
    unsigned int v19 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeSemanticType");
    *(_BYTE *)(v18 + 48) |= 2u;
    *(_DWORD *)(v18 + 32) = v19;
    uint64_t v20 = v55;
    unsigned int v21 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateSource");
    *(_BYTE *)(v20 + 48) |= 8u;
    *(_DWORD *)(v20 + 40) = v21;
    uint64_t v22 = v55;
    unsigned __int8 v23 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "isStarting");
    *(_BYTE *)(v22 + 48) |= 0x10u;
    *(_BYTE *)(v22 + 44) = v23;
    uint64_t v24 = v55;
    -[BMStoreEvent timestamp](a2, "timestamp");
    *(_BYTE *)(v24 + 48) |= 1u;
    *(void *)(v24 + 24) = v25;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v26 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Corrupted data package for focus modes user activity event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)uint64_t v57 = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Corrupted data package for focus modes user activity event",  v57,  v39);
      uint64_t v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }
  }

void sub_1008BD5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

__n128 sub_1008BD63C(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void ***)(a1 + 16);
  if (!v3)
  {
    uint64_t v3 = (void **)operator new(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *uint64_t v3 = 0LL;
    *(void *)(a1 + 16) = v3;
  }

  __n128 result = *a2;
  v3[2] = (void *)a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

id sub_1008BD6AC(id result)
{
  if (!*((void *)result + 100))
  {
    id v1 = result;
    __n128 result = (id)+[CMActivityAlarmLocal activityAlarmAvailable]( &OBJC_CLASS___CMActivityAlarmLocal,  "activityAlarmAvailable");
    if ((_DWORD)result)
    {
      int v2 = *((_DWORD *)v1 + 489);
      if (qword_101934780 != -1) {
        dispatch_once(&qword_101934780, &stru_10185E9F0);
      }
      float v3 = (float)v2;
      id v4 = (os_log_s *)qword_101934788;
      if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134217984;
        double v14 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "createActivityAlarmStatic,duration,%0.3f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934780 != -1) {
          dispatch_once(&qword_101934780, &stru_10185E9F0);
        }
        double v5 = v3;
        int v11 = 134217984;
        double v12 = v5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "createActivityAlarmStatic,duration,%0.3f",  COERCE_DOUBLE(&v11));
        int v9 = (uint8_t *)v8;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::createActivityAlarmStatic()", "%s\n", v8);
        if (v9 != buf) {
          free(v9);
        }
      }

      else
      {
        double v5 = v3;
      }

      id v6 = objc_alloc(&OBJC_CLASS___CMActivityAlarmLocal);
      id v7 = objc_msgSend(objc_msgSend(*((id *)v1 + 31), "silo"), "queue");
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_1008C5FEC;
      v10[3] = &unk_10182FA08;
      v10[4] = v1;
      __n128 result = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]( v6,  "initWithTrigger:duration:onQueue:withHandler:",  0LL,  v7,  v10,  v5);
      *((void *)v1 + 100) = result;
    }
  }

  return result;
}

NSDictionary *__cdecl sub_1008BD8EC(id a1)
{
  return (NSDictionary *)&off_1018D6A08;
}

NSDictionary *__cdecl sub_1008BD8F8(id a1)
{
  return (NSDictionary *)&off_1018D6A30;
}

uint64_t sub_1008BD904(uint64_t *a1)
{
  double v12 = &off_1018577E8;
  int v16 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v14 = *a1;
  uint64_t v15 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v12);
  sub_101125260(v8);
  sub_10113A4E8(v8);
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v4 = v9;
  uint64_t v5 = *a1;
  char v6 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v9 + 32) = v6 | 1;
  *(void *)(v4 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v4 + 32) = v6 | 5;
  *(_DWORD *)(v4 + 20) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v4 + 32) = v6 | 0xD;
  *(_DWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v4 + 32) = v6 | 0x1D;
  *(_DWORD *)(v4 + 28) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
  }
  return sub_101127D00((PB::Base *)v8);
}

void sub_1008BDA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008BDA38(uint64_t *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  sub_101082C6C(v10);
  uint64_t v3 = v10[1];
  uint64_t v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 1u;
  *(void *)(v3 + 8) = v4;
  uint64_t v5 = v10[1];
  LODWORD(v4) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v5 + 32) |= 4u;
  *(_DWORD *)(v5 + 20) = v4;
  uint64_t v6 = v10[1];
  LODWORD(v4) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v6 + 32) |= 8u;
  *(_DWORD *)(v6 + 24) = v4;
  uint64_t v7 = v10[1];
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v7 + 32) |= 0x10u;
  *(_DWORD *)(v7 + 28) = v4;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v9);
  }
  return sub_101127D00((PB::Base *)v9);
}

void sub_1008BDB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008BDB5C(uint64_t *a1)
{
  uint64_t v18 = &off_101857850;
  int v22 = *((_DWORD *)a1 + 4);
  v23[0] = 0;
  *(_DWORD *)((char *)v23 + 3) = 0;
  uint64_t v2 = a1[1];
  uint64_t v20 = *a1;
  uint64_t v21 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v18);
  sub_101125260(v15);
  sub_10113A590(v15);
  v17 |= 1u;
  *(CFAbsoluteTime *)&v15[77] = Current;
  uint64_t v4 = v16;
  uint64_t v5 = *a1;
  *(_WORD *)(v16 + 44) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v16;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_WORD *)(v16 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 28) = v5;
  uint64_t v7 = v16;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_WORD *)(v16 + 44) |= 0x20u;
  *(_DWORD *)(v7 + 32) = v5;
  uint64_t v8 = v16;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_WORD *)(v16 + 44) |= 0x40u;
  *(_DWORD *)(v8 + 36) = v5;
  uint64_t v9 = v16;
  *(_WORD *)(v16 + 44) |= 8u;
  *(_DWORD *)(v9 + 24) = 0;
  uint64_t v10 = v16;
  int v11 = HIWORD(*(_DWORD *)(v16 + 24));
  *(_WORD *)(v16 + 44) |= 4u;
  *(_DWORD *)(v10 + 20) = (unsigned __int16)v11 % 3u;
  uint64_t v12 = v16;
  *(_WORD *)(v16 + 44) |= 0x80u;
  *(_BYTE *)(v12 + 40) = 0;
  uint64_t v13 = v16;
  *(_WORD *)(v16 + 44) |= 0x100u;
  *(_BYTE *)(v13 + 41) = 0;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v15);
  }
  return sub_101127D00((PB::Base *)v15);
}

void sub_1008BDD00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1008BDD18(uint64_t a1)
{
  uint64_t v9 = &off_101857900;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v11 = *(_DWORD *)(a1 + 8);
  uint64_t v2 = sub_100E00E14();
  sub_100E022E0(v2, (uint64_t)&v9);
  sub_101125260(v6);
  sub_10113A638(v6);
  v8 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  uint64_t v3 = v7;
  int v4 = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) |= 2u;
  *(_DWORD *)(v3 + 12) = v4;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v6);
  }
  return sub_101127D00((PB::Base *)v6);
}

void sub_1008BDDF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008BDE08(uint64_t a1, _DWORD *a2, double *a3)
{
  if (*a2) {
    return;
  }
  int v3 = *(_DWORD *)a3;
  if (*(_DWORD *)a3)
  {
    unsigned int v5 = *((_DWORD *)a3 + 8);
    unsigned int v4 = *((_DWORD *)a3 + 9);
    int v7 = *((_DWORD *)a3 + 10);
    unsigned int v6 = *((_DWORD *)a3 + 11);
    unsigned int v9 = *((_DWORD *)a3 + 12);
    int v8 = *((_DWORD *)a3 + 13);
    if (v3 != 2)
    {
      if (v3 != 1) {
        return;
      }
      double v10 = a3[1];
      *(void *)__int16 v60 = &off_101857958;
      *(void *)&v60[8] = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)((char *)v61 + 1) = v5;
      *(_DWORD *)((char *)&v61[1] + 1) = v4;
      *(_DWORD *)((char *)&v61[2] + 1) = v7;
      *(_DWORD *)((char *)&v61[3] + 1) = v6;
      *(_DWORD *)((char *)&v61[4] + 1) = v9;
      *(_DWORD *)((char *)&v61[5] + 1) = v8;
      *(float *)&double v10 = v10;
      *(_DWORD *)((char *)&v61[6] + 1) = LODWORD(v10);
      uint64_t v11 = sub_100E00E14();
      sub_100E022E0(v11, (uint64_t)v60);
      sub_101125260(buf);
      sub_10113A6E0(buf);
      v72 |= 1u;
      uint64_t v69 = *(void *)&v60[8];
      __src = (uint64_t (**)())__PAIR64__(v4, v5);
      LODWORD(v63[0]) = v7;
      sub_10004C5F8(v70 + 32, (char *)&__src, (uint64_t)v63 + 4, 3uLL);
      __src = (uint64_t (**)())__PAIR64__(v9, v6);
      LODWORD(v63[0]) = v8;
      sub_10004C5F8(v70 + 8, (char *)&__src, (uint64_t)v63 + 4, 3uLL);
      uint64_t v12 = v70;
      v70[60] |= 1u;
      *((_DWORD *)v12 + 14) = LODWORD(v10);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
      }
LABEL_66:
      sub_101127D00((PB::Base *)buf);
      return;
    }

    v60[2] = HIBYTE(*((_DWORD *)a3 + 8));
    *(_WORD *)__int16 v60 = v5 >> 8;
    *(_DWORD *)&v60[3] = v4;
    *(_DWORD *)&v60[7] = v7;
    *(_DWORD *)&v60[11] = v6;
    *(_DWORD *)&v60[15] = v9;
    v61[0] = v8;
    memcpy(&v61[1], a3 + 7, 0x103uLL);
    __src = &off_101857E28;
    v63[0] = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = &v64;
    unint64_t v14 = 4LL;
    do
    {
      uint64_t v15 = &v60[v14];
      *((void *)v13 - 13) = *(void *)&v60[v14];
      *(v13 - 24) = *(_DWORD *)&v60[v14 + 8];
      *((void *)v13 - 1) = *(void *)&v60[v14 + 12];
      *uint64_t v13 = *(_DWORD *)((char *)&v61[v14 / 4] + 1);
      v13 += 3;
      v14 += 24LL;
    }

    while (v15 + 24 != (char *)&v61[44] + 1);
    *(_OWORD *)id v65 = *(_OWORD *)((char *)&v61[44] + 1);
    *(_OWORD *)&v65[12] = *(_OWORD *)((char *)&v61[47] + 1);
    v67[0] = *(void *)((char *)&v61[52] + 1);
    *(void *)((char *)v67 + 5) = *(void *)((char *)&v61[53] + 2);
    int v66 = *(_DWORD *)((char *)&v61[51] + 1);
    uint64_t v16 = sub_100E00E14();
    sub_100E022E0(v16, (uint64_t)&__src);
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v17 = qword_1019A1D08;
    if (qword_1019A1D08)
    {
      sub_100E5EAD4((uint64_t)&__src, (uint64_t)buf);
      uint64_t v18 = 0LL;
      v71[11] = v71[10];
      v71[2] = v71[1];
      v71[5] = v71[4];
      v71[8] = v71[7];
      do
      {
        unsigned int v19 = v71;
        uint64_t v20 = (char *)v71[2];
        unint64_t v21 = v71[3];
        if ((unint64_t)v20 >= v21)
        {
          unsigned __int8 v23 = (char *)v71[1];
          uint64_t v24 = (v20 - v23) >> 2;
          unint64_t v25 = v21 - (void)v23;
          unint64_t v26 = (uint64_t)(v21 - (void)v23) >> 1;
          if (v26 <= v24 + 1) {
            unint64_t v26 = v24 + 1;
          }
          if (v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            id v28 = (char *)sub_10000956C((uint64_t)(v71 + 3), v27);
            unsigned __int8 v23 = (char *)v19[1];
            uint64_t v20 = (char *)v19[2];
          }

          else
          {
            id v28 = 0LL;
          }

          id v29 = &v28[4 * v24];
          *(_DWORD *)id v29 = *((unsigned __int8 *)&v61[52] + v18 + 1);
          int v22 = v29 + 4;
          while (v20 != v23)
          {
            int v30 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }

          v19[1] = v29;
          v19[2] = v22;
          v19[3] = &v28[4 * v27];
          if (v23) {
            operator delete(v23);
          }
        }

        else
        {
          *(_DWORD *)uint64_t v20 = *((unsigned __int8 *)&v61[52] + v18 + 1);
          int v22 = v20 + 4;
        }

        v19[2] = v22;
        id v31 = v71;
        id v32 = (unsigned __int8 *)&v61[56] + v18 + 3;
        uint64_t v33 = (char *)v71[5];
        unint64_t v34 = v71[6];
        if ((unint64_t)v33 >= v34)
        {
          uint64_t v36 = (char *)v71[4];
          uint64_t v37 = (v33 - v36) >> 2;
          unint64_t v38 = v34 - (void)v36;
          unint64_t v39 = (uint64_t)(v34 - (void)v36) >> 1;
          if (v39 <= v37 + 1) {
            unint64_t v39 = v37 + 1;
          }
          if (v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40)
          {
            id v41 = (char *)sub_10000956C((uint64_t)(v71 + 6), v40);
            uint64_t v36 = (char *)v31[4];
            uint64_t v33 = (char *)v31[5];
          }

          else
          {
            id v41 = 0LL;
          }

          __int16 v42 = &v41[4 * v37];
          *(_DWORD *)__int16 v42 = *v32;
          double v35 = v42 + 4;
          while (v33 != v36)
          {
            int v43 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }

          v31[4] = v42;
          v31[5] = v35;
          v31[6] = &v41[4 * v40];
          if (v36) {
            operator delete(v36);
          }
        }

        else
        {
          *(_DWORD *)uint64_t v33 = *v32;
          double v35 = v33 + 4;
        }

        v31[5] = v35;
        __int16 v44 = v71;
        id v45 = (unsigned __int8 *)&v61[61] + v18 + 1;
        __int16 v46 = (char *)v71[8];
        unint64_t v47 = v71[9];
        if ((unint64_t)v46 >= v47)
        {
          id v49 = (char *)v71[7];
          uint64_t v50 = (v46 - v49) >> 2;
          if ((unint64_t)(v50 + 1) >> 62) {
LABEL_76:
          }
            sub_100007008();
          unint64_t v51 = v47 - (void)v49;
          unint64_t v52 = (uint64_t)(v47 - (void)v49) >> 1;
          if (v52 <= v50 + 1) {
            unint64_t v52 = v50 + 1;
          }
          if (v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53)
          {
            CFAbsoluteTime v54 = (char *)sub_10000956C((uint64_t)(v71 + 9), v53);
            id v49 = (char *)v44[7];
            __int16 v46 = (char *)v44[8];
          }

          else
          {
            CFAbsoluteTime v54 = 0LL;
          }

          uint64_t v55 = &v54[4 * v50];
          *(_DWORD *)uint64_t v55 = *v45;
          __int16 v48 = v55 + 4;
          while (v46 != v49)
          {
            int v56 = *((_DWORD *)v46 - 1);
            v46 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }

          v44[7] = v55;
          v44[8] = v48;
          v44[9] = &v54[4 * v53];
          if (v49) {
            operator delete(v49);
          }
        }

        else
        {
          *(_DWORD *)__int16 v46 = *v45;
          __int16 v48 = v46 + 4;
        }

        v44[8] = v48;
        ++v18;
      }

      while (v18 != 18);
      sub_1011CF3D0(v17, (uint64_t)buf);
      goto LABEL_66;
    }
  }

  else
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_10185EA50);
    }
    uint64_t v57 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Invalid gyro bias fit type", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_10185EA50);
      }
      *(_WORD *)__int16 v60 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  16LL,  "Invalid gyro bias fit type",  v60,  2);
      id v59 = (uint8_t *)v58;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLMotionLogger::onGyroCalibrationDatabase(int, const CLGyroCalibrationDatabase_Type::Notification &, const CLGyroCalibrationDatabase_Type::NotificationData &, void *)",  "%s\n",  v58);
      if (v59 != buf) {
        free(v59);
      }
    }
  }

void sub_1008BE4D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1008BE518(uint64_t *a1)
{
  unint64_t v14 = &off_101857A08;
  int v18 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v14);
  sub_101125260(v11);
  sub_10113A788(v11);
  v13 |= 1u;
  *(CFAbsoluteTime *)&v11[77] = Current;
  uint64_t v4 = v12;
  uint64_t v5 = *a1;
  *(_BYTE *)(v12 + 36) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v12 + 36) |= 8u;
  *(_DWORD *)(v6 + 24) = v5;
  uint64_t v7 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v12 + 36) |= 0x10u;
  *(_DWORD *)(v7 + 28) = v5;
  uint64_t v8 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v12 + 36) |= 0x20u;
  *(_DWORD *)(v8 + 32) = v5;
  uint64_t v9 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 5);
  *(_BYTE *)(v12 + 36) |= 4u;
  *(_DWORD *)(v9 + 20) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v11);
  }
  return sub_101127D00((PB::Base *)v11);
}

void sub_1008BE658(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008BE670(uint64_t *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v10 |= 1u;
  *(CFAbsoluteTime *)&v8[77] = Current;
  sub_10119FFA8(v9);
  uint64_t v3 = *((void *)v9 + 1);
  uint64_t v4 = *a1;
  *(_BYTE *)(v3 + 24) |= 1u;
  *(void *)(v3 + 8) = v4;
  uint64_t v5 = *((void *)v9 + 1);
  LODWORD(v4) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v5 + 24) |= 2u;
  *(_DWORD *)(v5 + 16) = v4;
  uint64_t v6 = *((void *)v9 + 1);
  LODWORD(v4) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v6 + 24) |= 4u;
  *(_DWORD *)(v6 + 20) = v4;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
  }
  return sub_101127D00((PB::Base *)v8);
}

void sub_1008BE760(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008BE778(uint64_t *a1, uint64_t a2)
{
  __int16 v48 = &off_101857C70;
  int8x16_t v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 1)), *(float64x2_t *)(a1 + 3));
  int8x16_t v5 = vextq_s8(v4, v4, 4uLL);
  __int128 v6 = *(_OWORD *)(a1 + 5);
  int8x16_t v51 = v5;
  __int128 v52 = v6;
  __int128 v53 = *(_OWORD *)(a1 + 7);
  int v54 = *((_DWORD *)a1 + 18);
  char v55 = *((_DWORD *)a1 + 19);
  float v7 = *((float *)a1 + 21);
  float v56 = v7;
  int v58 = *((_DWORD *)a1 + 24);
  float v57 = -1.0;
  if (v7 >= 0.0)
  {
    double v8 = 0.0;
    float v9 = sub_100292B94(v7, v8);
    float v57 = v9;
  }

  __int16 v62 = *((_WORD *)a1 + 55);
  int v10 = *((_DWORD *)a1 + 26);
  int v60 = *((unsigned __int8 *)a1 + 108);
  int v61 = v10;
  int v59 = *(_DWORD *)(a2 + 1704);
  uint64_t v50 = *a1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = sub_100E00E14();
  sub_100E022E0(v11, (uint64_t)&v48);
  sub_101125260(v45);
  sub_10113A980(v45);
  v47 |= 1u;
  *(CFAbsoluteTime *)&v45[77] = Current;
  uint64_t v12 = v46;
  uint64_t v13 = *a1;
  *(_DWORD *)(v46 + 124) |= 0x10u;
  *(void *)(v12 + 40) = v13;
  uint64_t v14 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 2);
  *(_DWORD *)(v46 + 124) |= 2u;
  *(double *)(v14 + 16) = *(float *)&v13;
  uint64_t v15 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 3);
  *(_DWORD *)(v46 + 124) |= 4u;
  *(double *)(v15 + 24) = *(float *)&v13;
  uint64_t v16 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 4);
  *(_DWORD *)(v46 + 124) |= 8u;
  *(double *)(v16 + 32) = *(float *)&v13;
  uint64_t v17 = v46;
  *(float *)&uint64_t v13 = *((double *)a1 + 1);
  *(_DWORD *)(v46 + 124) |= 1u;
  *(double *)(v17 + 8) = *(float *)&v13;
  uint64_t v18 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 10);
  *(_DWORD *)(v46 + 124) |= 0x40000u;
  *(_DWORD *)(v18 + 100) = v13;
  uint64_t v19 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 11);
  *(_DWORD *)(v46 + 124) |= 0x80000u;
  *(_DWORD *)(v19 + 104) = v13;
  uint64_t v20 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v46 + 124) |= 0x100000u;
  *(_DWORD *)(v20 + 108) = v13;
  uint64_t v21 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v46 + 124) |= 0x2000u;
  *(_DWORD *)(v21 + 80) = v13;
  uint64_t v22 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v46 + 124) |= 0x4000u;
  *(_DWORD *)(v22 + 84) = v13;
  uint64_t v23 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 15);
  *(_DWORD *)(v46 + 124) |= 0x8000u;
  *(_DWORD *)(v23 + 88) = v13;
  uint64_t v24 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 16);
  *(_DWORD *)(v46 + 124) |= 0x100u;
  *(_DWORD *)(v24 + 60) = v13;
  uint64_t v25 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 17);
  *(_DWORD *)(v46 + 124) |= 0x200u;
  *(_DWORD *)(v25 + 64) = v13;
  uint64_t v26 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 18);
  *(_DWORD *)(v46 + 124) |= 0x400u;
  *(_DWORD *)(v26 + 68) = v13;
  uint64_t v27 = v46;
  int v28 = *((_DWORD *)a1 + 19);
  *(_DWORD *)(v46 + 124) |= 0x80u;
  *(_DWORD *)(v27 + 56) = v28;
  uint64_t v29 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 21);
  *(_DWORD *)(v46 + 124) |= 0x800u;
  *(_DWORD *)(v29 + 72) = v13;
  uint64_t v30 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 24);
  *(_DWORD *)(v46 + 124) |= 0x20u;
  *(_DWORD *)(v30 + 48) = v13;
  uint64_t v31 = v46;
  *(_DWORD *)(v46 + 124) |= 0x20000u;
  *(_DWORD *)(v31 + 96) = -1082130432;
  if (*((float *)a1 + 21) >= 0.0)
  {
    double v32 = 0.0;
    uint64_t v33 = v46;
    float v34 = sub_100292B94(v56, v32);
    *(_DWORD *)(v33 + 124) |= 0x20000u;
    *(float *)(v33 + 96) = v34;
  }

  uint64_t v35 = v46;
  int v36 = *((unsigned __int8 *)a1 + 108);
  *(_DWORD *)(v46 + 124) |= 0x1000u;
  *(_DWORD *)(v35 + 76) = v36;
  uint64_t v37 = v46;
  int v38 = *((_DWORD *)a1 + 26);
  *(_DWORD *)(v46 + 124) |= 0x40u;
  *(_DWORD *)(v37 + 52) = v38;
  uint64_t v39 = v46;
  int v40 = *((unsigned __int16 *)a1 + 55);
  *(_DWORD *)(v46 + 124) |= 0x10000u;
  *(_DWORD *)(v39 + 92) = v40;
  uint64_t v41 = v46;
  int v42 = *(_DWORD *)(a2 + 1704);
  *(_DWORD *)(v46 + 124) |= 0x200000u;
  *(_DWORD *)(v41 + 112) = v42;
  uint64_t v43 = v46;
  *(_DWORD *)(v46 + 124) |= 0x800000u;
  *(_BYTE *)(v43 + 120) = 1;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v45);
  }
  return sub_101127D00((PB::Base *)v45);
}

void sub_1008BEB68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008BEB84(double *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    int8x16_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onMotionStateNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    int8x16_t v5 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onMotionStateNotification, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v7 = 0;
  }

  sub_1008C6DE8(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008BED34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008BED54(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 25);
  unsigned int v3 = *(_DWORD *)(a1 + 29);
  int v4 = *(_DWORD *)(a1 + 33);
  id v63 = &off_101857958;
  uint64_t v66 = 0LL;
  int v65 = 0;
  unsigned int v67 = v2;
  unsigned int v68 = v3;
  int v69 = v4;
  int v70 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = sub_100E00E14();
  sub_100E022E0(v5, (uint64_t)&v63);
  sub_101125260(v60);
  sub_10113A6E0(v60);
  v62 |= 1u;
  *(CFAbsoluteTime *)&v60[77] = Current;
  unint64_t __src = 0LL;
  int v72 = 0;
  sub_10004C5F8(v61 + 32, (char *)&__src, (uint64_t)v73, 3uLL);
  unint64_t __src = __PAIR64__(v3, v2);
  int v72 = v4;
  sub_10004C5F8(v61 + 8, (char *)&__src, (uint64_t)v73, 3uLL);
  __int128 v6 = v61;
  v61[60] |= 1u;
  *((_DWORD *)v6 + 14) = 0;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v60);
  }
  float v7 = *(float *)(a1 + 37);
  float v8 = *(float *)(a1 + 53);
  float v9 = *(float *)(a1 + 69);
  float v10 = *(float *)(a1 + 73);
  float v11 = *(float *)(a1 + 77);
  float v12 = *(float *)(a1 + 81);
  id v45 = &off_101857AB8;
  int v13 = *(unsigned __int8 *)(a1 + 126);
  int v14 = *(_DWORD *)(a1 + 85);
  int v15 = *(_DWORD *)(a1 + 97);
  float v16 = *(float *)(a1 + 105);
  int v17 = *(_DWORD *)(a1 + 93);
  float v18 = (float)-v10 / v7;
  float v19 = (float)-v11 / v8;
  float v47 = v18;
  float v48 = v19;
  float v20 = (float)-v12 / v9;
  float v49 = v20;
  float v50 = v7;
  float v51 = v8;
  float v52 = v9;
  int v53 = v14;
  int v54 = v15;
  int v43 = v15;
  int v44 = v17;
  if (v13 == 2) {
    float v21 = 0.0;
  }
  else {
    float v21 = v16;
  }
  float v55 = v21;
  int v56 = v17;
  uint64_t v57 = 0LL;
  int v58 = 0;
  char v59 = 5;
  CFAbsoluteTime v46 = CFAbsoluteTimeGetCurrent();
  uint64_t v22 = sub_100E00E14();
  sub_100E022E0(v22, (uint64_t)&v45);
  sub_101125260(&__src);
  sub_10113A884(&__src);
  HIDWORD(v23) = HIDWORD(v46);
  v75 |= 1u;
  *(CFAbsoluteTime *)&v73[604] = v46;
  uint64_t v24 = v74;
  LODWORD(v23) = *(_DWORD *)(a1 + 17);
  *(_DWORD *)(v74 + 80) |= 1u;
  *(double *)(v24 + 8) = (double)v23;
  uint64_t v25 = v74;
  *(_DWORD *)(v74 + 80) |= 2u;
  *(float *)(v25 + 16) = v18;
  uint64_t v26 = v74;
  *(_DWORD *)(v74 + 80) |= 4u;
  *(float *)(v26 + 20) = v19;
  uint64_t v27 = v74;
  *(_DWORD *)(v74 + 80) |= 8u;
  *(float *)(v27 + 24) = v20;
  uint64_t v28 = v74;
  *(_DWORD *)(v74 + 80) |= 0x2000u;
  *(float *)(v28 + 64) = v7;
  uint64_t v29 = v74;
  *(_DWORD *)(v74 + 80) |= 0x4000u;
  *(float *)(v29 + 68) = v8;
  uint64_t v30 = v74;
  *(_DWORD *)(v74 + 80) |= 0x8000u;
  *(float *)(v30 + 72) = v9;
  uint64_t v31 = v74;
  *(_DWORD *)(v74 + 80) |= 0x1000u;
  *(_DWORD *)(v31 + 60) = v14;
  uint64_t v32 = v74;
  *(_DWORD *)(v74 + 80) |= 0x20u;
  *(_DWORD *)(v32 + 32) = v43;
  uint64_t v33 = v74;
  *(_DWORD *)(v74 + 80) |= 0x40u;
  *(float *)(v33 + 36) = v21;
  uint64_t v34 = v74;
  *(_DWORD *)(v74 + 80) |= 0x80u;
  *(_DWORD *)(v34 + 40) = v44;
  uint64_t v35 = v74;
  *(_DWORD *)(v74 + 80) |= 0x200u;
  *(_DWORD *)(v35 + 48) = 0;
  uint64_t v36 = v74;
  *(_DWORD *)(v74 + 80) |= 0x400u;
  *(_DWORD *)(v36 + 52) = 0;
  uint64_t v37 = v74;
  *(_DWORD *)(v74 + 80) |= 0x800u;
  *(_DWORD *)(v37 + 56) = 0;
  uint64_t v38 = v74;
  *(_DWORD *)(v74 + 80) |= 0x10u;
  *(_DWORD *)(v38 + 28) = 5;
  uint64_t v39 = v74;
  char v40 = *(_BYTE *)(a1 + 125);
  *(_DWORD *)(v74 + 80) |= 0x20000u;
  *(_BYTE *)(v39 + 77) = v40;
  uint64_t v41 = v74;
  *(_DWORD *)(v74 + 80) |= 0x100u;
  *(_DWORD *)(v41 + 44) = 0;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)&__src);
  }
  sub_101127D00((PB::Base *)&__src);
  return sub_101127D00((PB::Base *)v60);
}

void sub_1008BF168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_1008BF1A8(uint64_t a1)
{
  float v12 = &off_1018577E8;
  uint64_t v2 = *(void *)(a1 + 16);
  int v16 = *(_DWORD *)(a1 + 24);
  double v14 = (double)*(unint64_t *)a1 / 1000000.0;
  uint64_t v15 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v12);
  sub_101125260(v8);
  sub_10113A4E8(v8);
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v4 = v9;
  double v5 = (double)*(unint64_t *)a1 / 1000000.0;
  char v6 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v9 + 32) = v6 | 1;
  *(double *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 32) = v6 | 5;
  *(_DWORD *)(v4 + 20) = LODWORD(v5);
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v4 + 32) = v6 | 0xD;
  *(_DWORD *)(v4 + 24) = LODWORD(v5);
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 32) = v6 | 0x1D;
  *(_DWORD *)(v4 + 28) = LODWORD(v5);
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
  }
  return sub_101127D00((PB::Base *)v8);
}

void sub_1008BF2E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008BF300(uint64_t a1)
{
  uint64_t v26 = &off_101857850;
  uint64_t v2 = *(void *)(a1 + 20);
  int v30 = *(_DWORD *)(a1 + 28);
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 3) = 0;
  double v28 = (double)*(unint64_t *)a1 / 1000000.0;
  uint64_t v29 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v26);
  sub_101125260(v23);
  sub_10113A590(v23);
  v25 |= 1u;
  *(CFAbsoluteTime *)&v23[77] = Current;
  uint64_t v4 = v24;
  double v5 = (double)*(unint64_t *)a1 / 1000000.0;
  *(_WORD *)(v24 + 44) |= 1u;
  *(double *)(v4 + 8) = v5;
  uint64_t v6 = v24;
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(_WORD *)(v24 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 28) = LODWORD(v5);
  uint64_t v7 = v24;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(v24 + 44) |= 0x20u;
  *(_DWORD *)(v7 + 32) = LODWORD(v5);
  uint64_t v8 = v24;
  LODWORD(v5) = *(_DWORD *)(a1 + 28);
  *(_WORD *)(v24 + 44) |= 0x40u;
  *(_DWORD *)(v8 + 36) = LODWORD(v5);
  uint64_t v9 = v24;
  *(_WORD *)(v24 + 44) |= 8u;
  *(_DWORD *)(v9 + 24) = 0;
  uint64_t v10 = v24;
  *(_WORD *)(v24 + 44) |= 4u;
  *(_DWORD *)(v10 + 20) = 0;
  uint64_t v11 = v24;
  *(_WORD *)(v24 + 44) |= 0x80u;
  *(_BYTE *)(v11 + 40) = 0;
  uint64_t v12 = v24;
  *(_WORD *)(v24 + 44) |= 0x100u;
  *(_BYTE *)(v12 + 41) = 0;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v23);
  }
  float v20 = &off_101857900;
  CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent();
  int v22 = *(_DWORD *)(a1 + 16);
  uint64_t v13 = sub_100E00E14();
  sub_100E022E0(v13, (uint64_t)&v20);
  sub_101125260(v17);
  sub_10113A638(v17);
  v19 |= 1u;
  *(CFAbsoluteTime *)&v17[77] = v21;
  uint64_t v14 = v18;
  int v15 = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v18 + 16) |= 2u;
  *(_DWORD *)(v14 + 12) = v15;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v17);
  }
  sub_101127D00((PB::Base *)v17);
  return sub_101127D00((PB::Base *)v23);
}

void sub_1008BF56C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1008BF59C(uint64_t a1)
{
  uint64_t v13 = &off_101857A08;
  uint64_t v2 = *(void *)(a1 + 16);
  int v17 = *(_DWORD *)(a1 + 24);
  double v15 = (double)*(unint64_t *)a1 / 1000000.0;
  uint64_t v16 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_100E00E14();
  sub_100E022E0(v3, (uint64_t)&v13);
  sub_101125260(v10);
  sub_10113A788(v10);
  v12 |= 1u;
  *(CFAbsoluteTime *)&v10[77] = Current;
  uint64_t v4 = v11;
  double v5 = (double)*(unint64_t *)a1 / 1000000.0;
  *(_BYTE *)(v11 + 36) |= 1u;
  *(double *)(v4 + 8) = v5;
  uint64_t v6 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v11 + 36) |= 8u;
  *(_DWORD *)(v6 + 24) = LODWORD(v5);
  uint64_t v7 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v11 + 36) |= 0x10u;
  *(_DWORD *)(v7 + 28) = LODWORD(v5);
  uint64_t v8 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v11 + 36) |= 0x20u;
  *(_DWORD *)(v8 + 32) = LODWORD(v5);
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v10);
  }
  return sub_101127D00((PB::Base *)v10);
}

void sub_1008BF6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008BF700(uint64_t a1)
{
  uint64_t v35 = &off_101857C70;
  int8x16_t v2 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a1), *(float64x2_t *)(a1 + 16));
  int8x16_t v3 = vextq_s8(v2, v2, 4uLL);
  v2.i64[0] = *(void *)(a1 + 48);
  __int128 v4 = *(_OWORD *)(a1 + 32);
  int8x16_t v38 = v3;
  __int128 v39 = v4;
  v2.i64[1] = *(void *)(a1 + 100);
  int8x16_t v40 = v2;
  int v41 = *(_DWORD *)(a1 + 108);
  unint64_t v43 = 0xBF80000000000000LL;
  int v44 = 1127481344;
  int v5 = *(unsigned __int8 *)(a1 + 114);
  int v6 = *(unsigned __int8 *)(a1 + 113) | (v5 << 8);
  __int16 v46 = *(unsigned __int8 *)(a1 + 113) | (unsigned __int16)((_WORD)v5 << 8);
  int v7 = (v5 << 29 >> 31) & 5;
  char v42 = (v5 << 29 >> 31) & 5;
  uint64_t v45 = 4LL;
  double v37 = (double)*(unint64_t *)(a1 + 80);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v8 = sub_100E00E14();
  sub_100E022E0(v8, (uint64_t)&v35);
  sub_101125260(v32);
  sub_10113A980(v32);
  v34 |= 1u;
  *(CFAbsoluteTime *)&v32[77] = Current;
  uint64_t v9 = v33;
  double v10 = (double)*(unint64_t *)(a1 + 80);
  *(_DWORD *)(v33 + 124) |= 0x10u;
  *(double *)(v9 + 40) = v10;
  uint64_t v11 = v33;
  *(float *)&double v10 = *(double *)(a1 + 8);
  *(_DWORD *)(v33 + 124) |= 2u;
  *(double *)(v11 + 16) = *(float *)&v10;
  uint64_t v12 = v33;
  *(float *)&double v10 = *(double *)(a1 + 16);
  *(_DWORD *)(v33 + 124) |= 4u;
  *(double *)(v12 + 24) = *(float *)&v10;
  uint64_t v13 = v33;
  *(float *)&double v10 = *(double *)(a1 + 24);
  *(_DWORD *)(v33 + 124) |= 8u;
  *(double *)(v13 + 32) = *(float *)&v10;
  uint64_t v14 = v33;
  *(float *)&double v10 = *(double *)a1;
  *(_DWORD *)(v33 + 124) |= 1u;
  *(double *)(v14 + 8) = *(float *)&v10;
  uint64_t v15 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v33 + 124) |= 0x40000u;
  *(_DWORD *)(v15 + 100) = LODWORD(v10);
  uint64_t v16 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v33 + 124) |= 0x80000u;
  *(_DWORD *)(v16 + 104) = LODWORD(v10);
  uint64_t v17 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v33 + 124) |= 0x100000u;
  *(_DWORD *)(v17 + 108) = LODWORD(v10);
  uint64_t v18 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v33 + 124) |= 0x2000u;
  *(_DWORD *)(v18 + 80) = LODWORD(v10);
  uint64_t v19 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v33 + 124) |= 0x4000u;
  *(_DWORD *)(v19 + 84) = LODWORD(v10);
  uint64_t v20 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v33 + 124) |= 0x8000u;
  *(_DWORD *)(v20 + 88) = LODWORD(v10);
  uint64_t v21 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(v33 + 124) |= 0x100u;
  *(_DWORD *)(v21 + 60) = LODWORD(v10);
  uint64_t v22 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v33 + 124) |= 0x200u;
  *(_DWORD *)(v22 + 64) = LODWORD(v10);
  uint64_t v23 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v33 + 124) |= 0x400u;
  *(_DWORD *)(v23 + 68) = LODWORD(v10);
  uint64_t v24 = v33;
  *(_DWORD *)(v33 + 124) |= 0x80u;
  *(_DWORD *)(v24 + 56) = v7;
  uint64_t v25 = v33;
  *(_DWORD *)(v33 + 124) |= 0x800u;
  *(_DWORD *)(v25 + 72) = 0;
  uint64_t v26 = v33;
  *(_DWORD *)(v33 + 124) |= 0x20000u;
  *(_DWORD *)(v26 + 96) = -1082130432;
  uint64_t v27 = v33;
  *(_DWORD *)(v33 + 124) |= 0x20u;
  *(_DWORD *)(v27 + 48) = 1127481344;
  uint64_t v28 = v33;
  *(_DWORD *)(v33 + 124) |= 0x1000u;
  *(_DWORD *)(v28 + 76) = 4;
  uint64_t v29 = v33;
  *(_DWORD *)(v33 + 124) |= 0x40u;
  *(_DWORD *)(v29 + 52) = 0;
  uint64_t v30 = v33;
  *(_DWORD *)(v33 + 124) |= 0x10000u;
  *(_DWORD *)(v30 + 92) = v6;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v32);
  }
  return sub_101127D00((PB::Base *)v32);
}

void sub_1008BFA50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008BFA68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryAccelerometerData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryAccelerometerData, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008CC9B0(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008BFC1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008BFC3C(int *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v12 |= 1u;
  CFAbsoluteTime v11 = Current;
  int8x16_t v3 = v10;
  sub_1010DDBC0(&__p, (char *)a1 + 60);
  sub_1008BD63C((uint64_t)v3, &__p);
  if (v8 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_1010E2834(v10);
  uint64_t v4 = v10[3];
  int v5 = *a1;
  *(_BYTE *)(v4 + 32) |= 2u;
  *(_DWORD *)(v4 + 28) = v5;
  sub_1008D2030(v10[3], (std::string *)(a1 + 2));
  sub_1008D2070(v10[3], (std::string *)(a1 + 8));
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v9);
  }
  return sub_101127D00((PB::Base *)v9);
}

void sub_1008BFD48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1008BFD7C(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    int v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryMonitorLogEvent",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    BOOL v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryMonitorLogEvent, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008CCB2C(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008BFF28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008BFF48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryProximityData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    char v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryProximityData, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008D052C(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C00FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C011C(int *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v13 |= 1u;
  CFAbsoluteTime v12 = Current;
  int8x16_t v3 = v11;
  sub_1010DDBC0(&__p, (char *)a1 + 60);
  sub_1008D06CC((uint64_t)v3, &__p);
  if (v9 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  BOOL v4 = v11;
  sub_1010DDBC0(&__p, (char *)a1 + 135);
  sub_1008D073C((uint64_t)v4, &__p);
  if (v9 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_1010E58D8(v11);
  uint64_t v5 = v11[1];
  int v6 = *a1;
  *(_BYTE *)(v5 + 32) |= 2u;
  *(_DWORD *)(v5 + 28) = v6;
  sub_1008D2030(v11[1], (std::string *)(a1 + 2));
  sub_1008D2070(v11[1], (std::string *)(a1 + 8));
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v10);
  }
  return sub_101127D00((PB::Base *)v10);
}

void sub_1008C0254( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1008C0290(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryGyroData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    char v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryGyroData, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008D07AC(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C0444( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C0464(int *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  CFAbsoluteTime v8 = Current;
  sub_1010E58D8(v7);
  uint64_t v3 = v7[1];
  int v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  sub_1008D2030(v7[1], (std::string *)(a1 + 2));
  sub_1008D2070(v7[1], (std::string *)(a1 + 8));
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v6);
  }
  return sub_101127D00((PB::Base *)v6);
}

void sub_1008C053C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008C0554(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryHeartRateData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    CFAbsoluteTime v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryHeartRateData, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008D0940(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C0708( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C0728(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryPPGData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    CFAbsoluteTime v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryPPGData, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008D0A64(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C08DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C08FC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryMagnetometerData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    CFAbsoluteTime v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryMagnetometerData, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008D0D24(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C0AB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C0AD0(int *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  CFAbsoluteTime v8 = Current;
  sub_1010E58D8(v7);
  uint64_t v3 = v7[1];
  int v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  sub_1008D2030(v7[1], (std::string *)(a1 + 2));
  sub_1008D2070(v7[1], (std::string *)(a1 + 8));
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v6);
  }
  return sub_101127D00((PB::Base *)v6);
}

void sub_1008C0BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008C0BC0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAccessoryDeviceMotionData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    CFAbsoluteTime v8 = (os_log_s *)qword_1019349D8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAccessoryDeviceMotionData, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008D0EBC(v6, a1, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C0D74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C0D94(int *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v12 |= 1u;
  CFAbsoluteTime v11 = Current;
  sub_1010E4A40(v10);
  uint64_t v3 = v10[4];
  int v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  sub_1008D2030(v10[4], (std::string *)(a1 + 2));
  sub_1008D2070(v10[4], (std::string *)(a1 + 8));
  uint64_t v5 = v10[4];
  int v6 = a1[14];
  *(_BYTE *)(v5 + 32) |= 1u;
  *(_DWORD *)(v5 + 24) = v6;
  int v7 = v10;
  LOBYTE(v6) = *((_BYTE *)a1 + 76);
  *((_BYTE *)v10 + 44) |= 1u;
  *((_BYTE *)v7 + 40) = v6;
  __int128 __src = *((_OWORD *)a1 + 5);
  sub_10004C5F8((char *)v10 + 8, (char *)&__src, (uint64_t)&v14, 4uLL);
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v9);
  }
  return sub_101127D00((PB::Base *)v9);
}

void sub_1008C0EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008C0F0C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onWifiScanNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    CFAbsoluteTime v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onWifiScanNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  sub_1008CB7C0(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C10BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008C10DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }
  int8x16_t v2 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Triggering wifi scan", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Triggering wifi scan",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::enableRuntimeSwitchableLogging()_block_invoke",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return [*(id *)(*(void *)(v1 + 1192) + 16) syncgetStartScanWithType:8 lowPriority:0 passive:0 requester:"motionlog"];
}

void sub_1008C1290(uint64_t *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onAveragedALSData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onAveragedALSData, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D146C(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C143C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C145C(uint64_t *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onSPL",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onSPL, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D1BF8(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C1608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C1628(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onProxPDPData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onProxPDPData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D1CD4(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C17D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C17F4(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onALSData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onALSData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D1E70(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C19A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C19C0(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onViewObstructedStateData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onViewObstructedStateData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D20B0(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C1B6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C1B8C(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onOrientationData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onOrientationData, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D227C(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C1D38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C1D58(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onDeviceMotionAlwaysOnData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onDeviceMotionAlwaysOnData, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D2368(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C1F04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C1F24(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onSignificantUserInteractionData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    BOOL v4 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onSignificantUserInteractionData, event:%{public, location:escape_o nly}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v6 = 0;
  }

  sub_1008D25A0();
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C20C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C20E0(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onKeyboardMotion",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    char v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onKeyboardMotion, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D2648(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C228C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C22AC(char *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onKeyboardKeyPress",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    char v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onKeyboardKeyPress, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D2864(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C2458( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C2478(char *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onTrackpad",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    char v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onTrackpad, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D2928(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C2624( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C2644(char *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onKeyboardAttach",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    char v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onKeyboardAttach, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008D29EC(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C27F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1008C2810(uint64_t a1)
{
  *(void *)a1 = &off_10185E748;
  sub_1008C2B24(a1);
  sub_1008C4B80(a1);

  *(void *)(a1 + 2032) = 0LL;
  *(void *)(a1 + 2040) = 0LL;

  *(void *)(a1 + 2024) = 0LL;
  if (*(void *)(a1 + 784)) {
    IOPMUnregisterNotification();
  }
  sub_1008C4E1C(a1);
  sub_1008C4FD0(a1);

  *(void *)(a1 + 2056) = 0LL;
  uint64_t v2 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1232);
  *(void *)(a1 + 1232) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1216);
  *(void *)(a1 + 1216) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 1208);
  *(void *)(a1 + 1208) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  sub_1008D493C((uint64_t *)(a1 + 1184), 0LL);
  uint64_t v9 = *(void *)(a1 + 1176);
  *(void *)(a1 + 1176) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1168) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 1160);
  *(void *)(a1 + 1160) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 1136);
  *(void *)(a1 + 1136) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1120);
  *(void *)(a1 + 1120) = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 1112);
  *(void *)(a1 + 1112) = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 1104);
  *(void *)(a1 + 1104) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 1096);
  *(void *)(a1 + 1096) = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 1088);
  *(void *)(a1 + 1088) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_1008AF1C4(a1 + 896);
  uint64_t v20 = *(void *)(a1 + 888);
  *(void *)(a1 + 888) = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 880);
  *(void *)(a1 + 880) = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v25 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  sub_100AD5650(a1 + 256);
  return sub_1005EDAA4((void *)a1);
}

BOOL sub_1008C2B24(uint64_t a1)
{
  if (*(void *)(a1 + 304))
  {
    uint64_t v2 = sub_100DDA4D4();
    sub_100DDB140(v2, *(void *)(a1 + 304));
    uint64_t v3 = *(void *)(a1 + 304);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    *(void *)(a1 + 304) = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 1168);
  if (v4) {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:0];
  }
  if (*(void *)(a1 + 312))
  {
    uint64_t v5 = sub_1006E5C40();
    sub_1006DD2A0(v5, 0, *(void *)(a1 + 312));
    uint64_t v6 = *(void *)(a1 + 312);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *(void *)(a1 + 312) = 0LL;
  }

  if (*(void *)(a1 + 320))
  {
    uint64_t v7 = sub_100403FC0();
    sub_1006DD2A0(v7, 0, *(void *)(a1 + 320));
    uint64_t v8 = *(void *)(a1 + 320);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    *(void *)(a1 + 320) = 0LL;
  }

  if (*(void *)(a1 + 328))
  {
    uint64_t v9 = sub_1006FE6A0();
    sub_1006DD2A0(v9, 0, *(void *)(a1 + 328));
    uint64_t v10 = *(void *)(a1 + 328);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    *(void *)(a1 + 328) = 0LL;
  }

  if (*(void *)(a1 + 336))
  {
    uint64_t v11 = sub_1006FE6A0();
    sub_1006DD2A0(v11, 1, *(void *)(a1 + 336));
    uint64_t v12 = *(void *)(a1 + 336);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void *)(a1 + 336) = 0LL;
  }

  if (*(void *)(a1 + 344))
  {
    uint64_t v13 = sub_1007C3B70();
    sub_1006DD2A0(v13, 0, *(void *)(a1 + 344));
    uint64_t v14 = *(void *)(a1 + 344);
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    *(void *)(a1 + 344) = 0LL;
  }

  if (*(void *)(a1 + 352))
  {
    uint64_t v15 = sub_1005BDE54();
    sub_1006DD2A0(v15, 0, *(void *)(a1 + 352));
    uint64_t v16 = *(void *)(a1 + 352);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    *(void *)(a1 + 352) = 0LL;
  }

  if (*(void *)(a1 + 1096))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10185E930);
    }
    uint64_t v17 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#wigo,off,MotionLoggerLocal", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10185E930);
      }
      v154[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,off,MotionLoggerLocal",  v154,  2);
      uint64_t v116 = (uint8_t *)v115;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v115);
      if (v116 != buf) {
        free(v116);
      }
    }

    AnalyticsSendEventLazy(@"com.apple.locationd.position.GNSS.WIGO", &stru_10185E820);
    [*(id *)(*(void *)(a1 + 1096) + 16) unregister:*(void *)(*(void *)(a1 + 1096) + 8) forNotification:0];
  }

  if (*(void *)(a1 + 1088))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10185E930);
    }
    uint64_t v18 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#wigo,off,MotionLoggerMediated", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10185E930);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,off,MotionLoggerMediated",  v154,  v151);
      uint64_t v118 = (uint8_t *)v117;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v117);
      if (v118 != buf) {
        free(v118);
      }
    }

    AnalyticsSendEventLazy(@"com.apple.locationd.position.GNSS.WIGO", &stru_10185E840);
    [*(id *)(*(void *)(a1 + 1088) + 16) unregister:*(void *)(*(void *)(a1 + 1088) + 8) forNotification:0];
    if (*(_DWORD *)(a1 + 1732))
    {
      [*(id *)(*(void *)(a1 + 1088) + 16) register:*(void *)(*(void *)(a1 + 1088) + 8) forNotification:5 registrationInfo:0];
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      uint64_t v19 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Logging GPS: Mediated leech", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185E910);
        }
        v154[0] = 0;
        LODWORD(v151) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Logging GPS: Mediated leech",  v154,  v151);
        v134 = (uint8_t *)v133;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v133);
        if (v134 != buf) {
          free(v134);
        }
      }
    }
  }

  uint64_t v20 = *(void *)(a1 + 1176);
  if (v20) {
    [*(id *)(v20 + 16) unregister:*(void *)(v20 + 8) forNotification:0];
  }
  uint64_t v21 = *(void *)(a1 + 1112);
  if (v21) {
    [*(id *)(v21 + 16) unregister:*(void *)(v21 + 8) forNotification:36];
  }
  uint64_t v22 = *(void *)(a1 + 1120);
  if (v22) {
    [*(id *)(v22 + 16) unregister:*(void *)(v22 + 8) forNotification:5];
  }
  if (*(_BYTE *)(a1 + 1128))
  {
    uint64_t v23 = sub_1006088E8();
    sub_1010DDBC0(__p, "CLMotionLogger");
    sub_100608F8C(v23, (uint64_t *)__p);
    if (v153 < 0) {
      operator delete(__p[0]);
    }
    *(_BYTE *)(a1 + 1128) = 0;
  }

  if (*(void *)(a1 + 416))
  {
    uint64_t v24 = sub_1008FA854(0);
    sub_1006DD2A0(v24, 0, *(void *)(a1 + 416));
    uint64_t v25 = *(void *)(a1 + 416);
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
    *(void *)(a1 + 416) = 0LL;
  }

  if (*(void *)(a1 + 360))
  {
    uint64_t v26 = sub_1002F34E0();
    sub_1006DD2A0(v26, 9, *(void *)(a1 + 360));
    uint64_t v27 = *(void *)(a1 + 360);
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
    *(void *)(a1 + 360) = 0LL;
  }

  if (*(void *)(a1 + 368))
  {
    uint64_t v28 = sub_1002F34E0();
    sub_1006DD2A0(v28, 4, *(void *)(a1 + 368));
    uint64_t v29 = *(void *)(a1 + 368);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    *(void *)(a1 + 368) = 0LL;
  }

  if (*(void *)(a1 + 376))
  {
    uint64_t v30 = sub_1002F34E0();
    sub_1006DD2A0(v30, 5, *(void *)(a1 + 376));
    uint64_t v31 = *(void *)(a1 + 376);
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    *(void *)(a1 + 376) = 0LL;
  }

  if (*(void *)(a1 + 384))
  {
    uint64_t v32 = sub_1002F34E0();
    sub_1006DD2A0(v32, 6, *(void *)(a1 + 384));
    uint64_t v33 = *(void *)(a1 + 384);
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
    }
    *(void *)(a1 + 384) = 0LL;
  }

  if (*(void *)(a1 + 392))
  {
    uint64_t v34 = sub_1002F34E0();
    sub_1006DD2A0(v34, 0, *(void *)(a1 + 392));
    uint64_t v35 = *(void *)(a1 + 392);
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
    }
    *(void *)(a1 + 392) = 0LL;
  }

  if (*(void *)(a1 + 536))
  {
    uint64_t v36 = sub_100E93770();
    sub_1006DD2A0(v36, 0, *(void *)(a1 + 536));
    uint64_t v37 = *(void *)(a1 + 536);
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
    }
    *(void *)(a1 + 536) = 0LL;
  }

  if (*(void *)(a1 + 544))
  {
    uint64_t v38 = sub_100E93770();
    sub_1006DD2A0(v38, 1, *(void *)(a1 + 544));
    uint64_t v39 = *(void *)(a1 + 544);
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
    }
    *(void *)(a1 + 544) = 0LL;
  }

  if (*(void *)(a1 + 552))
  {
    uint64_t v40 = sub_100E7C15C();
    sub_1006DD2A0(v40, 0, *(void *)(a1 + 552));
    uint64_t v41 = *(void *)(a1 + 552);
    *(void *)(a1 + 552) = 0LL;
    if (v41) {
      (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
    }
  }

  if (*(void *)(a1 + 560))
  {
    uint64_t v42 = sub_1004C71B0();
    sub_1006DD2A0(v42, 0, *(void *)(a1 + 560));
    uint64_t v43 = *(void *)(a1 + 560);
    if (v43) {
      (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
    }
    *(void *)(a1 + 560) = 0LL;
  }

  if (*(void *)(a1 + 568))
  {
    uint64_t v44 = sub_1004C71B0();
    sub_1006DD2A0(v44, 1, *(void *)(a1 + 568));
    uint64_t v45 = *(void *)(a1 + 568);
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
    }
    *(void *)(a1 + 568) = 0LL;
  }

  if (*(void *)(a1 + 576))
  {
    uint64_t v46 = sub_100998F14();
    sub_1006DD2A0(v46, 0, *(void *)(a1 + 576));
    uint64_t v47 = *(void *)(a1 + 576);
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
    }
    *(void *)(a1 + 576) = 0LL;
  }

  if (*(void *)(a1 + 584))
  {
    uint64_t v48 = sub_100998F14();
    sub_1006DD2A0(v48, 1, *(void *)(a1 + 584));
    uint64_t v49 = *(void *)(a1 + 584);
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
    }
    *(void *)(a1 + 584) = 0LL;
  }

  if (*(void *)(a1 + 624))
  {
    uint64_t v50 = sub_1003E1F48();
    sub_1006DD2A0(v50, 0, *(void *)(a1 + 624));
    uint64_t v51 = *(void *)(a1 + 624);
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
    }
    *(void *)(a1 + 624) = 0LL;
  }

  if (*(void *)(a1 + 632))
  {
    uint64_t v52 = sub_100510A70();
    sub_1006DD2A0(v52, 0, *(void *)(a1 + 632));
    uint64_t v53 = *(void *)(a1 + 632);
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
    }
    *(void *)(a1 + 632) = 0LL;
  }

  if (*(void *)(a1 + 592))
  {
    uint64_t v54 = sub_10080C788();
    sub_1006DD2A0(v54, 0, *(void *)(a1 + 592));
    uint64_t v55 = *(void *)(a1 + 592);
    if (v55) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
    }
    *(void *)(a1 + 592) = 0LL;
  }

  if (*(void *)(a1 + 600))
  {
    uint64_t v56 = sub_10080C788();
    sub_1006DD2A0(v56, 1, *(void *)(a1 + 600));
    uint64_t v57 = *(void *)(a1 + 600);
    if (v57) {
      (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
    }
    *(void *)(a1 + 600) = 0LL;
  }

  if (*(void *)(a1 + 608))
  {
    uint64_t v58 = sub_100FD4930();
    sub_1006DD2A0(v58, 0, *(void *)(a1 + 608));
    uint64_t v59 = *(void *)(a1 + 608);
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
    }
    *(void *)(a1 + 608) = 0LL;
  }

  if (*(void *)(a1 + 616))
  {
    uint64_t v60 = sub_100FD4930();
    sub_1006DD2A0(v60, 1, *(void *)(a1 + 616));
    uint64_t v61 = *(void *)(a1 + 616);
    if (v61) {
      (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
    }
    *(void *)(a1 + 616) = 0LL;
  }

  if (*(void *)(a1 + 400))
  {
    uint64_t v62 = sub_100E45498();
    sub_1006DD2A0(v62, 0, *(void *)(a1 + 400));
    uint64_t v63 = sub_100E45498();
    sub_1006DD2A0(v63, 1, *(void *)(a1 + 400));
    uint64_t v64 = sub_100E45498();
    sub_1006DD2A0(v64, 2, *(void *)(a1 + 400));
    uint64_t v65 = *(void *)(a1 + 400);
    if (v65) {
      (*(void (**)(uint64_t))(*(void *)v65 + 8LL))(v65);
    }
    *(void *)(a1 + 400) = 0LL;
  }

  [*(id *)(a1 + 704) invalidate];

  [*(id *)(a1 + 2064) invalidate];
  *(void *)(a1 + 2064) = 0LL;
  [*(id *)(a1 + 2040) unregisterForMobilityBoutMetrics:*(void *)(a1 + 2024)];
  if (*(void *)(a1 + 448))
  {
    uint64_t v66 = sub_1008FA854(0);
    sub_1006DD2A0(v66, 27, *(void *)(a1 + 448));
    uint64_t v67 = *(void *)(a1 + 448);
    *(void *)(a1 + 448) = 0LL;
    if (v67) {
      (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
    }
  }

  if (*(void *)(a1 + 456))
  {
    uint64_t v68 = sub_1008FA854(0);
    sub_1006DD2A0(v68, 39, *(void *)(a1 + 456));
    uint64_t v69 = *(void *)(a1 + 456);
    *(void *)(a1 + 456) = 0LL;
    if (v69) {
      (*(void (**)(uint64_t))(*(void *)v69 + 8LL))(v69);
    }
  }

  if (*(void *)(a1 + 432))
  {
    BOOL v70 = *(_BYTE *)(a1 + 1857) == 0;
    uint64_t v71 = sub_1008FA854(0);
    if (v70) {
      int v72 = 32;
    }
    else {
      int v72 = 31;
    }
    sub_1006DD2A0(v71, v72, *(void *)(a1 + 432));
    uint64_t v73 = *(void *)(a1 + 432);
    if (v73) {
      (*(void (**)(uint64_t))(*(void *)v73 + 8LL))(v73);
    }
    *(void *)(a1 + 432) = 0LL;
  }

  if (*(_BYTE *)(a1 + 1874))
  {
    uint64_t v74 = *(void **)(a1 + 1248);
    if (v74)
    {
      [v74 cancel];
      *(void *)(a1 + 1248) = 0LL;
    }

    char v75 = *(dispatch_object_s **)(a1 + 1256);
    if (v75)
    {
      dispatch_release(v75);
      *(void *)(a1 + 1256) = 0LL;
    }
  }

  if (*(_BYTE *)(a1 + 1877))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) unregister:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:10];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v76 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "Unregistering for display state notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for display state notifications",  v154,  v151);
      uint64_t v120 = (uint8_t *)v119;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v119);
      if (v120 != buf) {
        free(v120);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1880))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) unregister:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:2];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    double v77 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_INFO,  "Unregistering for AP sleep notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for AP sleep notifications",  v154,  v151);
      uint64_t v122 = (uint8_t *)v121;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v121);
      if (v122 != buf) {
        free(v122);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1883))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) unregister:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:3];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    unsigned int v78 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_INFO,  "Unregistering for AP wake notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for AP wake notifications",  v154,  v151);
      uint64_t v124 = (uint8_t *)v123;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v123);
      if (v124 != buf) {
        free(v124);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1862))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) unregister:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:7];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v79 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_INFO,  "Unregistering for battery status notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for battery status notifications",  v154,  v151);
      uint64_t v126 = (uint8_t *)v125;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v125);
      if (v126 != buf) {
        free(v126);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1865))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) unregister:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:11];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v80 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_INFO,  "Unregistering for screen lock status notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for screen lock status notifications",  v154,  v151);
      v128 = (uint8_t *)v127;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v127);
      if (v128 != buf) {
        free(v128);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1868))
  {
    [*(id *)(*(void *)(a1 + 1232) + 16) unregister:*(void *)(*(void *)(a1 + 1232) + 8) forNotification:15];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int16 v81 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "Unregistering for battery saver mode status notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for battery saver mode status notifications",  v154,  v151);
      v130 = (uint8_t *)v129;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v129);
      if (v130 != buf) {
        free(v130);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1910) && *(void *)(a1 + 472))
  {
    uint64_t v82 = sub_1008FA854(0);
    sub_1006DD2A0(v82, 40, *(void *)(a1 + 472));
    uint64_t v83 = *(void *)(a1 + 472);
    if (v83) {
      (*(void (**)(uint64_t))(*(void *)v83 + 8LL))(v83);
    }
    *(void *)(a1 + 472) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    double v84 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "Unregistering for prox PDP notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for prox PDP notifications",  v154,  v151);
      v136 = (uint8_t *)v135;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v135);
      if (v136 != buf) {
        free(v136);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1913) && *(void *)(a1 + 480))
  {
    uint64_t v85 = sub_1008FA854(0);
    sub_1006DD2A0(v85, 41, *(void *)(a1 + 480));
    uint64_t v86 = *(void *)(a1 + 480);
    if (v86) {
      (*(void (**)(uint64_t))(*(void *)v86 + 8LL))(v86);
    }
    *(void *)(a1 + 480) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v87 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "Unregistering for ALS notifications", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for ALS notifications",  v154,  v151);
      v138 = (uint8_t *)v137;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v137);
      if (v138 != buf) {
        free(v138);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1916) && sub_1001B9A1C())
  {
    [*(id *)(*(void *)(a1 + 1240) + 16) unregister:*(void *)(*(void *)(a1 + 1240) + 8) forNotification:0];
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_10185E970);
    }
    uint64_t v88 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_INFO,  "Unregistering for backlight state notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_10185E970);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  1LL,  "Unregistering for backlight state notifications",  v154,  v151);
      uint64_t v148 = (uint8_t *)v147;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v147);
      if (v148 != buf) {
        free(v148);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1919) && *(void *)(a1 + 488))
  {
    uint64_t v89 = sub_1008FA854(0);
    sub_1006DD2A0(v89, 42, *(void *)(a1 + 488));
    uint64_t v90 = *(void *)(a1 + 488);
    if (v90) {
      (*(void (**)(uint64_t))(*(void *)v90 + 8LL))(v90);
    }
    *(void *)(a1 + 488) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    double v91 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_INFO,  "Unregistering for view obstructed state notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for view obstructed state notifications",  v154,  v151);
      v140 = (uint8_t *)v139;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v139);
      if (v140 != buf) {
        free(v140);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1922) && *(void *)(a1 + 496))
  {
    uint64_t v92 = sub_1008FA854(0);
    sub_1006DD2A0(v92, 43, *(void *)(a1 + 496));
    uint64_t v93 = *(void *)(a1 + 496);
    if (v93) {
      (*(void (**)(uint64_t))(*(void *)v93 + 8LL))(v93);
    }
    *(void *)(a1 + 496) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v94 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_INFO,  "Unregistering orientation notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering orientation notifications",  v154,  v151);
      v142 = (uint8_t *)v141;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v141);
      if (v142 != buf) {
        free(v142);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1925) && *(void *)(a1 + 504))
  {
    uint64_t v95 = sub_1008FA854(0);
    sub_1006DD2A0(v95, 44, *(void *)(a1 + 504));
    uint64_t v96 = *(void *)(a1 + 504);
    if (v96) {
      (*(void (**)(uint64_t))(*(void *)v96 + 8LL))(v96);
    }
    *(void *)(a1 + 504) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v97 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "Unregistering ALS notifications", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering ALS notifications",  v154,  v151);
      v144 = (uint8_t *)v143;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v143);
      if (v144 != buf) {
        free(v144);
      }
    }
  }

  if (*(_BYTE *)(a1 + 1928) && *(void *)(a1 + 512))
  {
    uint64_t v98 = sub_1008FA854(0);
    sub_1006DD2A0(v98, 45, *(void *)(a1 + 512));
    uint64_t v99 = *(void *)(a1 + 512);
    if (v99) {
      (*(void (**)(uint64_t))(*(void *)v99 + 8LL))(v99);
    }
    *(void *)(a1 + 512) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    __int128 v100 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_INFO,  "Unregistering Significant User Interaction notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering Significant User Interaction notifications",  v154,  v151);
      uint64_t v146 = (uint8_t *)v145;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v145);
      if (v146 != buf) {
        free(v146);
      }
    }
  }

  uint64_t v101 = *(void *)(a1 + 1208);
  if (v101)
  {
    [*(id *)(v101 + 16) unregister:*(void *)(v101 + 8) forNotification:0];
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v102 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_INFO,  "Unregistering Fitness Machine notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering Fitness Machine notifications",  v154,  v151);
      uint64_t v132 = (uint8_t *)v131;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v131);
      if (v132 != buf) {
        free(v132);
      }
    }
  }

  if (*(void *)(a1 + 520))
  {
    uint64_t v103 = sub_100C87D2C();
    sub_1006DD2A0(v103, 0, *(void *)(a1 + 520));
    uint64_t v104 = *(void *)(a1 + 520);
    *(void *)(a1 + 520) = 0LL;
    if (v104) {
      (*(void (**)(uint64_t))(*(void *)v104 + 8LL))(v104);
    }
  }

  if (*(_BYTE *)(a1 + 1937) && *(void *)(a1 + 832) && sub_1006A64D8())
  {
    uint64_t v105 = sub_1006A64D8();
    sub_1006DD2A0(v105, 0, *(void *)(a1 + 832));
    uint64_t v106 = *(void *)(a1 + 832);
    if (v106) {
      (*(void (**)(uint64_t))(*(void *)v106 + 8LL))(v106);
    }
    *(void *)(a1 + 832) = 0LL;
    uint64_t v107 = sub_1006A64D8();
    sub_1006DD2A0(v107, 1, *(void *)(a1 + 840));
    uint64_t v108 = *(void *)(a1 + 840);
    if (v108) {
      (*(void (**)(uint64_t))(*(void *)v108 + 8LL))(v108);
    }
    *(void *)(a1 + 840) = 0LL;
    uint64_t v109 = sub_1006A64D8();
    sub_1006DD2A0(v109, 3, *(void *)(a1 + 848));
    uint64_t v110 = *(void *)(a1 + 848);
    if (v110) {
      (*(void (**)(uint64_t))(*(void *)v110 + 8LL))(v110);
    }
    *(void *)(a1 + 848) = 0LL;
    uint64_t v111 = sub_1006A64D8();
    sub_1006DD2A0(v111, 2, *(void *)(a1 + 856));
    uint64_t v112 = *(void *)(a1 + 856);
    if (v112) {
      (*(void (**)(uint64_t))(*(void *)v112 + 8LL))(v112);
    }
    *(void *)(a1 + 856) = 0LL;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    v113 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_INFO,  "Unregistering for keyboard notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      v154[0] = 0;
      LODWORD(v151) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Unregistering for keyboard notifications",  v154,  v151);
      v150 = (uint8_t *)v149;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v149);
      if (v150 != buf) {
        free(v150);
      }
    }
  }

  return sub_100AD5D38(a1 + 256);
}

void sub_1008C4B5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008C4B80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1104);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:41];
  }
  [*(id *)(*(void *)(a1 + 1160) + 16) unregister:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:0];
  [*(id *)(*(void *)(a1 + 1160) + 16) unregister:*(void *)(*(void *)(a1 + 1160) + 8) forNotification:1];
  if (*(void *)(a1 + 424))
  {
    uint64_t v3 = sub_1008FA854(0);
    sub_1006DD2A0(v3, 12, *(void *)(a1 + 424));
    uint64_t v4 = *(void *)(a1 + 424);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *(void *)(a1 + 424) = 0LL;
  }

  [*(id *)(a1 + 2032) stopMonitoringVisitsForClient:*(void *)(a1 + 2024)];
  [*(id *)(a1 + 2032) stopLeechingLowConfidenceVisitsForClient:*(void *)(a1 + 2024)];
  [*(id *)(*(void *)(a1 + 1200) + 16) unregister:*(void *)(*(void *)(a1 + 1200) + 8) forNotification:0];
  [*(id *)(*(void *)(a1 + 1176) + 16) unregister:*(void *)(*(void *)(a1 + 1176) + 8) forNotification:0];
  uint64_t v5 = *(void *)(a1 + 1112);
  if (v5) {
    [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:36];
  }
  uint64_t v6 = *(void *)(a1 + 1120);
  if (v6) {
    [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:5];
  }
  if (*(_BYTE *)(a1 + 1128))
  {
    uint64_t v7 = sub_1006088E8();
    sub_1010DDBC0(__p, "CLMotionLogger");
    sub_100608F8C(v7, (uint64_t *)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    *(_BYTE *)(a1 + 1128) = 0;
  }

  if (*(void *)(a1 + 464))
  {
    uint64_t v8 = sub_1008FA854(0);
    sub_1006DD2A0(v8, 36, *(void *)(a1 + 464));
    uint64_t v9 = *(void *)(a1 + 464);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    *(void *)(a1 + 464) = 0LL;
  }

  return [*(id *)(*(void *)(a1 + 1216) + 16) unregister:*(void *)(*(void *)(a1 + 1216) + 8) forNotification:0];
}

void sub_1008C4E00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C4E1C(uint64_t a1)
{
  if (*(void *)(a1 + 800)
    && +[CMActivityAlarmLocal activityAlarmAvailable](&OBJC_CLASS___CMActivityAlarmLocal, "activityAlarmAvailable"))
  {
    [*(id *)(a1 + 800) invalidate];

    *(void *)(a1 + 800) = 0LL;
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    uint64_t v2 = (os_log_s *)qword_101934788;
    if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "clearActivityAlarmStatic", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934780 != -1) {
        dispatch_once(&qword_101934780, &stru_10185E9F0);
      }
      v5[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "clearActivityAlarmStatic",  v5,  2);
      uint64_t v4 = (uint8_t *)v3;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::clearActivityAlarmStatic()", "%s\n", v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

uint64_t sub_1008C4FD0(uint64_t a1)
{
  *(void *)(a1 + 2048) = 0LL;
  sub_101125260(v10);
  sub_10113B3AC(v10);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v12 |= 1u;
  *(CFAbsoluteTime *)&v10[77] = Current;
  uint64_t v3 = v11;
  *(_BYTE *)(v11 + 20) |= 1u;
  *(void *)(v3 + 8) = 0LL;
  uint64_t v4 = v11;
  *(_BYTE *)(v11 + 20) |= 2u;
  *(_DWORD *)(v4 + 16) = 0;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v10);
  }
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10185E9F0);
  }
  uint64_t v5 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "clearPedestrianFence", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    __int16 v9 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "clearPedestrianFence",  &v9,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::clearPedestrianFence()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return sub_101127D00((PB::Base *)v10);
}

void sub_1008C5224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1008C5244(uint64_t a1)
{
  uint64_t v1 = sub_1008C2810(a1);
  operator delete(v1);
}

NSDictionary *__cdecl sub_1008C5258(id a1)
{
  return (NSDictionary *)&off_1018D6A58;
}

NSDictionary *__cdecl sub_1008C5264(id a1)
{
  return (NSDictionary *)&off_1018D6A80;
}

void sub_1008C5270(uint64_t a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onBasebandSpeedNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onBasebandSpeedNotification, event:%{public, location:escape_only}s , this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008CB080(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C541C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1008C543C(uint64_t a1, _BYTE *a2)
{
  return sub_1008D1274(a2, a1);
}

uint64_t sub_1008C544C(uint64_t a1, uint64_t a2)
{
  return sub_1008D1378(a2, a1);
}

void sub_1008C545C(uint64_t *a1, uint64_t a2)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185E8D0);
  }
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionLogger::onBasebandCompassCoexNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185E8D0);
    }
    uint64_t v6 = (os_log_s *)qword_1019349D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionLogger::onBasebandCompassCoexNotification, event:%{public, location:escape_ only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_1008CB1EC(v4, a1);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008C5608( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C5628(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 8);
  if (*v1 == 2)
  {
    memset(v24, 0, 11);
    uint64_t v22 = &off_10185EA80;
    uint64_t v23 = 0LL;
    sub_100E5A608(v1, &v22);
    uint64_t v2 = v23;
    uint64_t v3 = v24[0];
    int v4 = LOBYTE(v24[1]);
    int v5 = BYTE1(v24[1]);
    int v6 = BYTE2(v24[1]);
    sub_101125260(v19);
    sub_101139D08(v19);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v21 |= 1u;
    *(CFAbsoluteTime *)&v19[77] = Current;
    uint64_t v8 = v20;
    *(_BYTE *)(v20 + 44) |= 2u;
    *(void *)(v8 + 16) = v2;
    uint64_t v9 = v20;
    *(_BYTE *)(v20 + 44) |= 4u;
    *(void *)(v9 + 24) = v3;
    uint64_t v10 = v20;
    *(_BYTE *)(v20 + 44) |= 0x10u;
    *(_DWORD *)(v10 + 36) = v4;
    uint64_t v11 = v20;
    *(_BYTE *)(v20 + 44) |= 8u;
    *(_DWORD *)(v11 + 32) = v5;
    uint64_t v12 = v20;
    *(_BYTE *)(v20 + 44) |= 0x20u;
    *(_BYTE *)(v12 + 40) = v6 != 0;
    uint64_t v13 = v20;
    double v14 = sub_101171D4C();
    *(_BYTE *)(v13 + 44) |= 1u;
    *(double *)(v13 + 8) = v14;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v19);
    }
    if (qword_101934540 != -1) {
      dispatch_once(&qword_101934540, &stru_10185E9D0);
    }
    __int16 v15 = (os_log_s *)qword_101934548;
    if (os_log_type_enabled((os_log_t)qword_101934548, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109376;
      int v29 = v4;
      __int16 v30 = 2048;
      uint64_t v31 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[CLMotionLogger] state,%d,timestampPossible,%llu",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934540 != -1) {
        dispatch_once(&qword_101934540, &stru_10185E9D0);
      }
      v25[0] = 67109376;
      v25[1] = v4;
      __int16 v26 = 2048;
      uint64_t v27 = v3;
      LODWORD(v18) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934548,  2LL,  "[CLMotionLogger] state,%d,timestampPossible,%llu",  v25,  v18);
      uint64_t v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLMotionLogger::onWakeGesture(const CMSPU::GestureReport::Sample *, void *)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    sub_101127D00((PB::Base *)v19);
    nullsub_10(&v22);
  }

void sub_1008C5954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008C5980()
{
  if (qword_101999190 != -1) {
    dispatch_once(&qword_101999190, &stru_10185E860);
  }
  return qword_1019A1830;
}

void sub_1008C59C0(id a1)
{
  if (sub_1004FAA50())
  {
    id v1 = +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:]( &OBJC_CLASS___CLIntersiloUniverse,  "newSharedVendorUniverseWithSilo:",  sub_1006E282C());
    uint64_t v2 = operator new(0x908uLL);
    sub_1008B2938((uint64_t)v2, v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  qword_1019A1830 = (uint64_t)v2;
}

void sub_1008C5A20(_Unwind_Exception *a1)
{
}

void sub_1008C5A34(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    uint64_t v50 = &off_101857ED8;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v54 = *(void *)a4;
    uint64_t v7 = *(void *)(a4 + 16);
    int v52 = *(void *)(a4 + 112);
    int v53 = v7;
    sub_101125260(buf);
    sub_10113AC20(buf);
    v58 |= 1u;
    CFAbsoluteTime v56 = Current;
    uint64_t v8 = v57;
    uint64_t v9 = *(void *)(a4 + 24);
    *(_WORD *)(v57 + 64) |= 2u;
    *(void *)(v8 + 16) = v9;
    uint64_t v10 = v57;
    uint64_t v11 = *(void *)a4;
    *(_WORD *)(v57 + 64) |= 8u;
    *(void *)(v10 + 32) = v11;
    uint64_t v12 = v57;
    uint64_t v13 = *(void *)(a4 + 8);
    *(_WORD *)(v57 + 64) |= 1u;
    *(void *)(v12 + 8) = v13;
    uint64_t v14 = v57;
    uint64_t v15 = *(void *)(a4 + 16);
    *(_WORD *)(v57 + 64) |= 0x10u;
    *(_DWORD *)(v14 + 40) = v15;
    uint64_t v16 = v57;
    uint64_t v17 = *(void *)(a4 + 112);
    *(_WORD *)(v57 + 64) |= 0x200u;
    *(_DWORD *)(v16 + 60) = v17;
    uint64_t v18 = v57;
    uint64_t v19 = *(void *)(a4 + 120);
    *(_WORD *)(v57 + 64) |= 0x80u;
    *(_DWORD *)(v18 + 52) = v19;
    uint64_t v20 = v57;
    uint64_t v21 = *(void *)(a4 + 224);
    *(_WORD *)(v57 + 64) |= 0x100u;
    *(_DWORD *)(v20 + 56) = v21;
    uint64_t v22 = *(void *)(a4 + 112);
    if (v22 == 14)
    {
      uint64_t v30 = v57;
      uint64_t v31 = *(void *)(a4 + 128);
      *(_WORD *)(v57 + 64) |= 0x20u;
      *(_DWORD *)(v30 + 44) = v31;
    }

    else if (v22 == 19)
    {
      uint64_t v23 = v57;
      uint64_t v24 = *(void *)(a4 + 128);
      *(_WORD *)(v57 + 64) |= 0x40u;
      *(_DWORD *)(v23 + 48) = v24;
      uint64_t v25 = v57;
      uint64_t v26 = *(void *)(a4 + 136);
      *(_WORD *)(v57 + 64) |= 4u;
      *(void *)(v25 + 24) = v26;
    }

    BOOL v33 = *(void *)(a4 + 16) != 1LL && *(void *)(a4 + 224) == 1LL;
    *(_BYTE *)(a1 + 792) = v33;
    int v34 = sub_100BEF640(a4);
    if (v34 == 2)
    {
      if (*(_BYTE *)(a1 + 1271))
      {
        sub_1006E27E8();
        id v35 = sub_1006E282C();
        double v36 = *(double *)(a1 + 1808);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472LL;
        v49[2] = sub_1008C5EA8;
        v49[3] = &unk_10181D3D0;
        v49[4] = a1;
        [v35 afterInterval:v49 async:v36];
      }
    }

    else
    {
      if (v34 != 1)
      {
LABEL_28:
        uint64_t v48 = sub_100E00E14();
        sub_100E022E0(v48, (uint64_t)&v50);
        if (qword_1019A1D00 != -1) {
          dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
        }
        if (qword_1019A1D08) {
          sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
        }
        sub_101127D00((PB::Base *)buf);
        return;
      }

      if (*(_BYTE *)(a1 + 1271)) {
        sub_1008B5CA0(a1);
      }
    }

    __int128 v37 = *(_OWORD *)a4;
    __int128 v38 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 2096) = v38;
    *(_OWORD *)(a1 + 2080) = v37;
    __int128 v39 = *(_OWORD *)(a4 + 48);
    __int128 v40 = *(_OWORD *)(a4 + 64);
    __int128 v41 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 2176) = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a1 + 2160) = v41;
    *(_OWORD *)(a1 + 2144) = v40;
    *(_OWORD *)(a1 + 2128) = v39;
    __int128 v42 = *(_OWORD *)(a4 + 112);
    __int128 v43 = *(_OWORD *)(a4 + 128);
    __int128 v44 = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a1 + 2240) = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(a1 + 2224) = v44;
    *(_OWORD *)(a1 + 2208) = v43;
    *(_OWORD *)(a1 + 2192) = v42;
    __int128 v45 = *(_OWORD *)(a4 + 176);
    __int128 v46 = *(_OWORD *)(a4 + 192);
    __int128 v47 = *(_OWORD *)(a4 + 208);
    *(void *)(a1 + 2304) = *(void *)(a4 + 224);
    *(_OWORD *)(a1 + 2288) = v47;
    *(_OWORD *)(a1 + 2272) = v46;
    *(_OWORD *)(a1 + 2256) = v45;
    goto LABEL_28;
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }
  uint64_t v27 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    LOWORD(v50) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Warning Unhandled notification",  &v50,  2);
    int v29 = (uint8_t *)v28;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, cons t CLMotionStateMediator_Type::NotificationData &)",  "%s\n",  v28);
    if (v29 != buf) {
      free(v29);
    }
  }

void sub_1008C5E80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1008C5EA8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (sub_100BEF640((uint64_t)(v1 + 260)) == 1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[263];
      uint64_t v4 = v1[262];
      uint64_t v5 = v1[274];
      v6[0] = 68289795;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = v3;
      __int16 v11 = 1025;
      int v12 = v4;
      __int16 v13 = 1025;
      int v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:MotionLogger: Still in workout, not disabling runtime logging, eventTime:%{public }f, eventType:%{private}d, workoutType:%{private}d}",  (uint8_t *)v6,  0x28u);
    }
  }

  else
  {
    sub_1008C2B24((uint64_t)v1);
  }

void sub_1008C5FEC(uint64_t a1)
{
}

void sub_1008C5FF4(uint64_t a1)
{
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10185E9F0);
  }
  uint64_t v2 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onActivityAlarmStaticNotification", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "onActivityAlarmStaticNotification",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::onActivityAlarmStaticNotification()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

id sub_1008C618C(uint64_t a1, int a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = Current;
  if (a2)
  {
    *(double *)(a1 + 808) = Current;
    return (id)sub_1008C6B44(a1, Current);
  }

  double v7 = *(double *)(a1 + 808);
  int v8 = *(_DWORD *)(a1 + 1968);
  while (*((void *)&xmmword_1019991E8 + 1))
  {
    uint64_t v10 = *(__CFUserNotification **)v9;
    double v11 = *(double *)(v9 + 16);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    int v12 = (os_log_s *)qword_101934788;
    if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "PedestrianFenceNotification,popping pending notification,%f",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934780 != -1) {
        dispatch_once(&qword_101934780, &stru_10185E9F0);
      }
      int v35 = 134217984;
      double v36 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "PedestrianFenceNotification,popping pending notification,%f",  COERCE_DOUBLE(&v35));
      int v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)",  "%s\n",  v13);
    }

    CFUserNotificationCancel(v10);
    CFRelease(v10);
    xmmword_1019991E8 = (__int128)vaddq_s64((int64x2_t)xmmword_1019991E8, (int64x2_t)xmmword_1012CE4D0);
    sub_1000ECDBC((uint64_t)&qword_1019991C8, 1);
  }

  uint64_t v15 = objc_opt_new(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateStyle:](v15, "setDateStyle:", 1LL);
  -[NSDateFormatter setTimeStyle:](v15, "setTimeStyle:", 2LL);
  -[NSDateFormatter setLocale:]( v15,  "setLocale:",  -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US"));
  uint64_t v16 = objc_opt_new(&OBJC_CLASS___NSMutableString);
  -[NSMutableString appendString:](v16, "appendString:", @"(Response to be logged in MSL)");
  -[NSMutableString appendString:](v16, "appendString:", @"\n\n");
  uint64_t v17 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v7);
  -[NSMutableString appendString:](v16, "appendString:", @"Static:\n");
  -[NSMutableString appendString:]( v16,  "appendString:",  -[NSDateFormatter stringFromDate:](v15, "stringFromDate:", v17));
  -[NSMutableString appendString:](v16, "appendString:", @"\n\n");
  uint64_t v18 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v5);
  -[NSMutableString appendString:](v16, "appendString:", @"Pedestrian Fence Exit:\n");
  -[NSMutableString appendString:]( v16,  "appendString:",  -[NSDateFormatter stringFromDate:](v15, "stringFromDate:", v18));
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10185E9F0);
  }
  uint64_t v19 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "PedestrianFenceNotification,creating notification,%f",  (uint8_t *)&buf,  0xCu);
  }

  float v20 = (float)v8;
  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    int v35 = 134217984;
    double v36 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "PedestrianFenceNotification,creating notification,%f",  COERCE_DOUBLE(&v35));
    uint64_t v31 = (char *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)",  "%s\n",  v30);
  }

  uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Are you >>%.0fm from your last static position?",  v20),  kCFUserNotificationAlertHeaderKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Yes, >>%.0fm", v20),  kCFUserNotificationAlternateButtonTitleKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"No, <<%.0fm", v20),  kCFUserNotificationOtherButtonTitleKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  @"I'm not sure...",  kCFUserNotificationDefaultButtonTitleKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  v16,  kCFUserNotificationAlertMessageKey);
  CFUserNotificationRef v22 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0LL, 0LL, (CFDictionaryRef)v21);

  if (!v22)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185EA10);
    }
    uint64_t v27 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "PedestrianFenceNotification,could not create notification",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return sub_1008BD6AC((id)a1);
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185EA10);
    }
    LOWORD(v35) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  17LL,  "PedestrianFenceNotification,could not create notification",  &v35,  2);
LABEL_53:
    int v34 = (char *)v28;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)",  "%s\n",  v28);
    return sub_1008BD6AC((id)a1);
  }

  *(void *)&__int128 buf = v22;
  *((double *)&buf + 1) = v7;
  double v38 = v5;
  float v39 = v20;
  sub_1008D3790(&qword_1019991C8, (uint64_t)&buf);
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10185E9F0);
  }
  uint64_t v23 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = *((void *)&xmmword_1019991E8 + 1);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "PedestrianFenceNotification,pending notifications count,%lu",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    int v35 = 134217984;
    double v36 = *((double *)&xmmword_1019991E8 + 1);
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "PedestrianFenceNotification,pending notifications count,%lu",  &v35);
    BOOL v33 = (char *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)",  "%s\n",  v32);
  }

  CFRetain(v22);
  CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v22,  (CFUserNotificationCallBack)sub_1008D381C,  0LL);
  if (!RunLoopSource)
  {
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    int v29 = (os_log_s *)qword_101934788;
    if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "PedestrianFenceNotification,could not create runloop source for notification",  (uint8_t *)&buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return sub_1008BD6AC((id)a1);
    }
    bzero(&buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    LOWORD(v35) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934788,  17LL,  "PedestrianFenceNotification,could not create runloop source for notification",  &v35,  2);
    goto LABEL_53;
  }

  uint64_t v25 = RunLoopSource;
  uint64_t v26 = (__CFRunLoop *)sub_10029228C();
  CFRunLoopAddSource(v26, v25, kCFRunLoopCommonModes);
  CFRelease(v25);
  CFRelease(v22);
  return sub_1008BD6AC((id)a1);
}

uint64_t sub_1008C6B44(uint64_t a1, double a2)
{
  float v2 = (float)*(int *)(a1 + 1968);
  *(float *)&a2 = v2;
  [*(id *)(a1 + 2048) setFence:*(void *)(a1 + 816) forClient:*(void *)(a1 + 2024) withRadius:a2];
  sub_101125260(v11);
  sub_10113B3AC(v11);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v13 |= 1u;
  *(CFAbsoluteTime *)&v11[77] = Current;
  uint64_t v4 = v12;
  *(_BYTE *)(v12 + 20) |= 1u;
  *(void *)(v4 + 8) = 0LL;
  uint64_t v5 = v12;
  *(_BYTE *)(v12 + 20) |= 2u;
  *(float *)(v5 + 16) = v2;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v11);
  }
  if (qword_101934780 != -1) {
    dispatch_once(&qword_101934780, &stru_10185E9F0);
  }
  double v6 = v2;
  double v7 = (os_log_s *)qword_101934788;
  if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134217984;
    double v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PedestrianFence set with radius %.0f [m]",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    int v14 = 134217984;
    double v15 = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "PedestrianFence set with radius %.0f [m]",  COERCE_DOUBLE(&v14));
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::createPedestrianFence()", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  return sub_101127D00((PB::Base *)v11);
}

void sub_1008C6DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008C6DE8(uint64_t a1, double *a2)
{
  double v3 = *a2;
  double v2 = a2[1];
  int v4 = *((_DWORD *)a2 + 6);
  int v5 = *((unsigned __int8 *)a2 + 28);
  int v6 = *((unsigned __int8 *)a2 + 29);
  int v7 = *((unsigned __int8 *)a2 + 30);
  int v8 = *((unsigned __int8 *)a2 + 31);
  char v9 = *((_BYTE *)a2 + 32);
  char v10 = *((_BYTE *)a2 + 33);
  int v11 = *((unsigned __int8 *)a2 + 35);
  uint64_t v12 = *((void *)a2 + 5);
  int v64 = *((unsigned __int8 *)a2 + 60);
  int v62 = *((unsigned __int8 *)a2 + 61);
  int v63 = *((unsigned __int8 *)a2 + 62);
  int v60 = *((unsigned __int8 *)a2 + 104);
  int v61 = *((unsigned __int8 *)a2 + 105);
  int v13 = *((_DWORD *)a2 + 29);
  int v15 = *((_DWORD *)a2 + 31);
  int v14 = *((_DWORD *)a2 + 32);
  int v17 = *((_DWORD *)a2 + 33);
  int v16 = *((_DWORD *)a2 + 34);
  char v18 = *((_BYTE *)a2 + 144);
  uint64_t v68 = &off_101857CC8;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v70 = v4;
  char v71 = v5;
  char v72 = v6;
  char v73 = v7;
  char v75 = v8;
  char v76 = v9 & 1;
  char v77 = v10 & 1;
  char v74 = v11;
  double v78 = v2;
  double v79 = v3;
  uint64_t v80 = v12;
  int v81 = v13;
  int v83 = v15;
  int v84 = v14;
  int v85 = v17;
  int v86 = v16;
  char v82 = v18 & 1;
  uint64_t v19 = sub_100E00E14();
  sub_100E022E0(v19, (uint64_t)&v68);
  sub_101125260(v65);
  sub_10113A9D4(v65);
  v67 |= 1u;
  *(CFAbsoluteTime *)&v65[77] = Current;
  float v20 = v66;
  v66[24] |= 0x8000uLL;
  *((_DWORD *)v20 + 25) = v4;
  uint64_t v21 = v66;
  v66[24] |= 0x100uLL;
  *((_DWORD *)v21 + 18) = v5;
  CFUserNotificationRef v22 = v66;
  v66[24] |= 0x10000uLL;
  *((_DWORD *)v22 + 26) = v6;
  uint64_t v23 = v66;
  v66[24] |= 0x20000uLL;
  *((_DWORD *)v23 + 27) = v7;
  uint64_t v24 = v66;
  v66[24] |= 0x800uLL;
  *((_DWORD *)v24 + 21) = v11;
  uint64_t v25 = v66;
  v66[24] |= 0x8000000uLL;
  *((_DWORD *)v25 + 37) = v8;
  uint64_t v26 = v66;
  v66[24] |= 0x2000uLL;
  *((_DWORD *)v26 + 23) = v9 & 1;
  uint64_t v27 = v66;
  v66[24] |= 0x1000uLL;
  *((_DWORD *)v27 + 22) = v10 & 1;
  uint64_t v28 = (double *)v66;
  v66[24] |= 8uLL;
  v28[5] = v2;
  int v29 = (double *)v66;
  v66[24] |= 1uLL;
  v29[1] = v3;
  uint64_t v30 = v66;
  v66[24] |= 4uLL;
  v30[3] = v12;
  uint64_t v31 = v66;
  v66[24] |= 0x20000000uLL;
  *((_DWORD *)v31 + 39) = v13;
  uint64_t v32 = v66;
  v66[24] |= 0x4000000uLL;
  *((_DWORD *)v32 + 36) = v18 & 1;
  BOOL v33 = v66;
  v66[24] |= 0x4000uLL;
  *((_DWORD *)v33 + 24) = v15;
  int v34 = v66;
  v66[24] |= 0x400000uLL;
  *((_DWORD *)v34 + 32) = v14;
  int v35 = v66;
  v66[24] |= 0x200000uLL;
  *((_DWORD *)v35 + 31) = v17;
  double v36 = v66;
  v66[24] |= 0x800000uLL;
  *((_DWORD *)v36 + 33) = v16;
  __int128 v37 = v66;
  v66[24] |= 0x800000000uLL;
  *((_DWORD *)v37 + 45) = v62;
  sub_101183E78(v66);
  uint64_t v38 = v66[4];
  *(_BYTE *)(v38 + 20) |= 1u;
  *(_DWORD *)(v38 + 8) = v64;
  float v39 = v66;
  v66[24] |= 0x10000000uLL;
  *((_DWORD *)v39 + 38) = v60;
  __int128 v40 = v66;
  v66[24] |= 0x2000000000uLL;
  *((_DWORD *)v40 + 47) = v61;
  __int128 v41 = v66;
  v66[24] |= 0x400000000uLL;
  *((_DWORD *)v41 + 44) = v63;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v65);
  }
  if (*(_BYTE *)(a1 + 1931))
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185EA10);
    }
    __int128 v42 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109376;
      BOOL v96 = (v4 & 0x7300) != 0;
      __int16 v97 = 2048;
      *(double *)uint64_t v98 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[VehicleDetectionAlert] motion state update: vehicular,%d timestamp,%f",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185EA10);
      }
      int v87 = 67109376;
      BOOL v88 = (v4 & 0x7300) != 0;
      __int16 v89 = 2048;
      *(double *)uint64_t v90 = v3;
      LODWORD(v58) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "[VehicleDetectionAlert] motion state update: vehicular,%d timestamp,%f",  &v87,  v58);
      int v53 = (uint8_t *)v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onMotionStateNotification(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v52);
      if (v53 != buf) {
        free(v53);
      }
    }

    double v43 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_101999200;
    BOOL v44 = (v4 & 0x7300) != 0;
    if (byte_1019991F8) {
      BOOL v44 = 0;
    }
    BOOL v45 = v43 > 1800.0 && v44;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185EA10);
    }
    __int128 v46 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      CFAbsoluteTime v47 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)__int128 buf = 67110144;
      BOOL v96 = v4;
      __int16 v97 = 1024;
      *(_DWORD *)uint64_t v98 = v63;
      *(_WORD *)&v98[4] = 2048;
      *(double *)&v98[6] = v47 - *(double *)&qword_101999200;
      __int16 v99 = 1024;
      int v100 = byte_1019991F8;
      __int16 v101 = 1024;
      BOOL v102 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "[VehicleDetectionAlert] motion state update: motionState,%d,vehicleType,%d,timeSinceLastPopup,%f,wasVehicular,%d ,shouldShowTTR,%d",  buf,  0x24u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185EA10);
      }
      uint64_t v54 = qword_1019344F8;
      CFAbsoluteTime v55 = CFAbsoluteTimeGetCurrent();
      int v87 = 67110144;
      BOOL v88 = v4;
      __int16 v89 = 1024;
      *(_DWORD *)uint64_t v90 = v63;
      *(_WORD *)&v90[4] = 2048;
      *(double *)&v90[6] = v55 - *(double *)&qword_101999200;
      __int16 v91 = 1024;
      int v92 = byte_1019991F8;
      __int16 v93 = 1024;
      BOOL v94 = v45;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v54,  0LL,  "[VehicleDetectionAlert] motion state update: motionState,%d,vehicleType,%d,timeSinceLastPopup,%f,wasVehicular,%d ,shouldShowTTR,%d",  &v87,  36,  *(double *)&a1,  v60,  v62);
      uint64_t v57 = (uint8_t *)v56;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onMotionStateNotification(const CLMotionCoprocessorInterface::NotificationData *)",  "%s\n",  v56);
      if (v57 != buf) {
        free(v57);
      }
    }

    if (v45)
    {
      qword_101999200 = CFAbsoluteTimeGetCurrent();
      uint64_t v48 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v2);
      uint64_t v49 = objc_opt_new(&OBJC_CLASS___NSDateFormatter);
      -[NSDateFormatter setDateStyle:](v49, "setDateStyle:", 1LL);
      -[NSDateFormatter setTimeStyle:](v49, "setTimeStyle:", 2LL);
      -[NSDateFormatter setLocale:]( v49,  "setLocale:",  -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US"));
      uint64_t v50 = objc_opt_new(&OBJC_CLASS___NSMutableString);
      -[NSMutableString appendString:]( v50,  "appendString:",  @"(Response logged in MSL)\n\nVehicle State Detected:\n");
      -[NSMutableString appendString:]( v50,  "appendString:",  -[NSDateFormatter stringFromDate:](v49, "stringFromDate:", v48));
      if ((v64 & 1) != 0) {
        -[NSMutableString appendString:](v50, "appendString:", @"\nmotion hint");
      }
      if ((v64 & 2) != 0) {
        -[NSMutableString appendString:](v50, "appendString:", @"\ngps hint");
      }
      if ((v64 & 4) != 0) {
        -[NSMutableString appendString:](v50, "appendString:", @"\nbaseband hint");
      }
      if ((v64 & 8) != 0) {
        -[NSMutableString appendString:](v50, "appendString:", @"\nwifi hint");
      }
      if ((v64 & 0x10) != 0) {
        -[NSMutableString appendString:](v50, "appendString:", @"\nbt hint");
      }
    }

    byte_1019991F8 = (v4 & 0x7300) != 0;
  }

  return sub_101127D00((PB::Base *)v65);
}

void sub_1008C7640( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1008C7684(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  switch(*a3)
  {
    case 3:
    case 7:
      __int128 v5 = a4[1];
      __int128 v62 = *a4;
      *(_OWORD *)int v63 = v5;
      __int128 v6 = a4[3];
      *(_OWORD *)&v63[16] = a4[2];
      *(_OWORD *)&v63[32] = v6;
      char v76 = &off_101858760;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      __int128 v78 = v62;
      uint64_t v79 = *(void *)v63;
      int v80 = *(_DWORD *)&v63[24];
      uint64_t v7 = sub_100E00E14();
      sub_100E022E0(v7, (uint64_t)&v76);
      sub_101125260(v70);
      v75 |= 1u;
      CFAbsoluteTime v71 = Current;
      sub_10116FFF8((uint64_t)&v62, (uint64_t)v69);
      int v8 = operator new(0x40uLL);
      uint64_t v9 = sub_101115948((uint64_t)v8, (uint64_t)v69);
      uint64_t v10 = v73;
      uint64_t v73 = v9;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      }
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v70);
      }
      PB::Base::~Base((PB::Base *)v69);
      goto LABEL_17;
    case 4:
      *(void *)&__int128 v62 = &off_1018585A8;
      *((void *)&v62 + 1) = CFAbsoluteTimeGetCurrent();
      __int128 v11 = a4[1];
      *(_OWORD *)&v63[8] = *a4;
      *(_OWORD *)&v63[24] = v11;
      __int128 v12 = a4[3];
      *(_OWORD *)&v63[40] = a4[2];
      __int128 v64 = v12;
      *(int32x2_t *)&__int128 v12 = vrev64_s32((int32x2_t)a4[5]);
      uint64_t v65 = *((void *)a4 + 8);
      uint64_t v66 = v12;
      __int128 v13 = a4[7];
      __int128 v67 = a4[6];
      __int128 v68 = v13;
      uint64_t v14 = sub_100E00E14();
      sub_100E022E0(v14, (uint64_t)&v62);
      sub_101125260(v70);
      sub_10113B10C(v70);
      v75 |= 1u;
      CFAbsoluteTime v71 = *((double *)&v62 + 1);
      sub_1011894E8(v74);
      uint64_t v15 = *((void *)v74 + 9);
      uint64_t v16 = *(void *)a4;
      *(_WORD *)(v15 + 100) |= 0x80u;
      *(void *)(v15 + 64) = v16;
      uint64_t v17 = *((void *)v74 + 9);
      uint64_t v18 = *((void *)a4 + 1);
      *(_WORD *)(v17 + 100) |= 2u;
      *(void *)(v17 + 16) = v18;
      uint64_t v19 = *((void *)v74 + 9);
      uint64_t v20 = *((void *)a4 + 2);
      *(_WORD *)(v19 + 100) |= 1u;
      *(void *)(v19 + 8) = v20;
      uint64_t v21 = *((void *)v74 + 9);
      uint64_t v22 = *((void *)a4 + 3);
      *(_WORD *)(v21 + 100) |= 4u;
      *(void *)(v21 + 24) = v22;
      uint64_t v23 = *((void *)v74 + 9);
      uint64_t v24 = *((void *)a4 + 4);
      *(_WORD *)(v23 + 100) |= 0x40u;
      *(void *)(v23 + 56) = v24;
      uint64_t v25 = *((void *)v74 + 9);
      uint64_t v26 = *((void *)a4 + 5);
      *(_WORD *)(v25 + 100) |= 0x20u;
      *(void *)(v25 + 48) = v26;
      uint64_t v27 = *((void *)v74 + 9);
      uint64_t v28 = *((void *)a4 + 6);
      *(_WORD *)(v27 + 100) |= 0x10u;
      *(void *)(v27 + 40) = v28;
      uint64_t v29 = *((void *)v74 + 9);
      uint64_t v30 = *((void *)a4 + 7);
      *(_WORD *)(v29 + 100) |= 8u;
      *(void *)(v29 + 32) = v30;
      uint64_t v31 = *((void *)v74 + 9);
      uint64_t v32 = *((void *)a4 + 8);
      *(_WORD *)(v31 + 100) |= 0x100u;
      *(void *)(v31 + 72) = v32;
      uint64_t v33 = *((void *)v74 + 9);
      int v34 = *((_DWORD *)a4 + 21);
      *(_WORD *)(v33 + 100) |= 0x400u;
      *(_DWORD *)(v33 + 84) = v34;
      uint64_t v35 = *((void *)v74 + 9);
      int v36 = *((_DWORD *)a4 + 20);
      *(_WORD *)(v35 + 100) |= 0x800u;
      *(_DWORD *)(v35 + 88) = v36;
      uint64_t v37 = *((void *)v74 + 9);
      LOBYTE(v36) = *((_BYTE *)a4 + 168);
      *(_WORD *)(v37 + 100) |= 0x2000u;
      *(_BYTE *)(v37 + 96) = v36;
      uint64_t v38 = v74;
      uint64_t v39 = *((void *)a4 + 12);
      *((_BYTE *)v74 + 80) |= 4u;
      *((void *)v38 + 3) = v39;
      __int128 v40 = v74;
      uint64_t v41 = *((void *)a4 + 13);
      *((_BYTE *)v74 + 80) |= 8u;
      *((void *)v40 + 4) = v41;
      __int128 v42 = v74;
      uint64_t v43 = *((void *)a4 + 14);
      *((_BYTE *)v74 + 80) |= 0x40u;
      *((void *)v42 + 7) = v43;
      BOOL v44 = v74;
      uint64_t v45 = *((void *)a4 + 15);
      *((_BYTE *)v74 + 80) |= 0x80u;
      *((void *)v44 + 8) = v45;
      __int128 v46 = v74;
      uint64_t v47 = *((void *)a4 + 16);
      *((_BYTE *)v74 + 80) |= 2u;
      *((void *)v46 + 2) = v47;
      uint64_t v48 = v74;
      uint64_t v49 = *((void *)a4 + 17);
      *((_BYTE *)v74 + 80) |= 1u;
      *((void *)v48 + 1) = v49;
      uint64_t v50 = v74;
      uint64_t v51 = *((void *)a4 + 18);
      *((_BYTE *)v74 + 80) |= 0x20u;
      *((void *)v50 + 6) = v51;
      int v52 = v74;
      uint64_t v53 = *((void *)a4 + 19);
      *((_BYTE *)v74 + 80) |= 0x10u;
      *((void *)v52 + 5) = v53;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v54 = qword_1019A1D08;
      if (qword_1019A1D08) {
        goto LABEL_16;
      }
      goto LABEL_17;
    case 5:
      *(void *)&__int128 v62 = &off_1018587B8;
      CFAbsoluteTime v55 = CFAbsoluteTimeGetCurrent();
      uint64_t v56 = *(void *)a4;
      *((CFAbsoluteTime *)&v62 + 1) = v55;
      *(void *)&v63[8] = v56;
      *(_DWORD *)&v63[16] = *((_DWORD *)a4 + 2);
      uint64_t v57 = sub_100E00E14();
      sub_100E022E0(v57, (uint64_t)&v62);
      sub_101125260(v70);
      sub_10113AD1C(v70);
      v75 |= 1u;
      CFAbsoluteTime v71 = *((double *)&v62 + 1);
      uint64_t v58 = v72;
      uint64_t v59 = *(void *)a4;
      *(_BYTE *)(v72 + 20) |= 1u;
      *(void *)(v58 + 8) = v59;
      uint64_t v60 = v72;
      int v61 = *((_DWORD *)a4 + 2);
      *(_BYTE *)(v72 + 20) |= 2u;
      *(_DWORD *)(v60 + 16) = v61;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v54 = qword_1019A1D08;
      if (qword_1019A1D08) {
LABEL_16:
      }
        sub_1011CF3D0(v54, (uint64_t)v70);
LABEL_17:
      sub_101127D00((PB::Base *)v70);
      break;
    default:
      return;
  }

void sub_1008C7B70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1008C7BCC(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5 = *a3;
  if (*a3 == 10)
  {
    sub_101125260(v52);
    sub_10113A440(v52);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v57 |= 1u;
    CFAbsoluteTime v54 = Current;
    sub_10114FA2C(v56);
    uint64_t v26 = v56[1];
    int v27 = *a4;
    *(_WORD *)(v26 + 68) |= 0x40u;
    *(_DWORD *)(v26 + 52) = v27;
    uint64_t v28 = v56[1];
    int v29 = a4[1];
    *(_WORD *)(v28 + 68) |= 0x80u;
    *(_DWORD *)(v28 + 56) = v29;
    uint64_t v30 = v56[1];
    uint64_t v31 = *((void *)a4 + 1);
    *(_WORD *)(v30 + 68) |= 2u;
    *(void *)(v30 + 16) = v31;
    uint64_t v32 = v56[1];
    uint64_t v33 = *((void *)a4 + 2);
    *(_WORD *)(v32 + 68) |= 1u;
    *(void *)(v32 + 8) = v33;
    uint64_t v34 = v56[1];
    LOBYTE(v29) = *((_BYTE *)a4 + 24);
    *(_WORD *)(v34 + 68) |= 0x200u;
    *(_BYTE *)(v34 + 64) = v29;
    uint64_t v35 = v56[1];
    uint64_t v36 = *((void *)a4 + 4);
    *(_WORD *)(v35 + 68) |= 0x10u;
    *(void *)(v35 + 40) = v36;
    uint64_t v37 = v56[1];
    uint64_t v38 = *((void *)a4 + 5);
    *(_WORD *)(v37 + 68) |= 8u;
    *(void *)(v37 + 32) = v38;
    uint64_t v39 = v56[1];
    uint64_t v40 = *((void *)a4 + 6);
    *(_WORD *)(v39 + 68) |= 4u;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = v56[1];
    int v42 = a4[14];
    *(_WORD *)(v41 + 68) |= 0x20u;
    *(_DWORD *)(v41 + 48) = v42;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v24 = qword_1019A1D08;
    if (!qword_1019A1D08) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (v5 == 6)
  {
    sub_101125260(v52);
    CFAbsoluteTime v43 = CFAbsoluteTimeGetCurrent();
    v57 |= 1u;
    CFAbsoluteTime v54 = v43;
    sub_101138FE8(v52);
    uint64_t v44 = v53;
    uint64_t v45 = *(void *)a4;
    *(_BYTE *)(v53 + 36) |= 4u;
    *(void *)(v44 + 24) = v45;
    uint64_t v46 = v53;
    uint64_t v47 = *((void *)a4 + 1);
    *(_BYTE *)(v53 + 36) |= 1u;
    *(void *)(v46 + 8) = v47;
    uint64_t v48 = v53;
    uint64_t v49 = *((void *)a4 + 2);
    *(_BYTE *)(v53 + 36) |= 2u;
    *(void *)(v48 + 16) = v49;
    uint64_t v50 = v53;
    int v51 = a4[6];
    *(_BYTE *)(v53 + 36) |= 8u;
    *(_DWORD *)(v50 + 32) = v51;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v24 = qword_1019A1D08;
    if (!qword_1019A1D08) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (v5 != 5) {
    return;
  }
  uint64_t v58 = &off_101858868;
  CFAbsoluteTime v59 = CFAbsoluteTimeGetCurrent();
  uint64_t v60 = *(void *)a4;
  __int128 v61 = *(_OWORD *)(a4 + 2);
  char v62 = *((_BYTE *)a4 + 24);
  __int128 v63 = *((_OWORD *)a4 + 2);
  uint64_t v64 = *((void *)a4 + 6);
  BOOL v65 = a4[14] == 5;
  uint64_t v6 = sub_100E00E14();
  sub_100E022E0(v6, (uint64_t)&v58);
  sub_101125260(v52);
  sub_10113ACC8(v52);
  v57 |= 1u;
  CFAbsoluteTime v54 = v59;
  sub_10114FA2C(v55);
  uint64_t v7 = v55[1];
  int v8 = *a4;
  *(_WORD *)(v7 + 68) |= 0x40u;
  *(_DWORD *)(v7 + 52) = v8;
  uint64_t v9 = v55[1];
  int v10 = a4[1];
  *(_WORD *)(v9 + 68) |= 0x80u;
  *(_DWORD *)(v9 + 56) = v10;
  uint64_t v11 = v55[1];
  uint64_t v12 = *((void *)a4 + 1);
  *(_WORD *)(v11 + 68) |= 2u;
  *(void *)(v11 + 16) = v12;
  uint64_t v13 = v55[1];
  uint64_t v14 = *((void *)a4 + 2);
  *(_WORD *)(v13 + 68) |= 1u;
  *(void *)(v13 + 8) = v14;
  uint64_t v15 = v55[1];
  LOBYTE(v10) = *((_BYTE *)a4 + 24);
  *(_WORD *)(v15 + 68) |= 0x200u;
  *(_BYTE *)(v15 + 64) = v10;
  uint64_t v16 = v55[1];
  uint64_t v17 = *((void *)a4 + 4);
  *(_WORD *)(v16 + 68) |= 0x10u;
  *(void *)(v16 + 40) = v17;
  uint64_t v18 = v55[1];
  uint64_t v19 = *((void *)a4 + 5);
  *(_WORD *)(v18 + 68) |= 8u;
  *(void *)(v18 + 32) = v19;
  uint64_t v20 = v55[1];
  uint64_t v21 = *((void *)a4 + 6);
  *(_WORD *)(v20 + 68) |= 4u;
  *(void *)(v20 + 24) = v21;
  uint64_t v22 = v55[1];
  int v23 = a4[14];
  *(_WORD *)(v22 + 68) |= 0x20u;
  *(_DWORD *)(v22 + 48) = v23;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  uint64_t v24 = qword_1019A1D08;
  if (qword_1019A1D08) {
LABEL_15:
  }
    sub_1011CF3D0(v24, (uint64_t)v52);
LABEL_16:
  sub_101127D00((PB::Base *)v52);
}

void sub_1008C801C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008C804C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 5 || *a3 == 0)
  {
    double v8 = *(double *)(a4 + 4);
    double v9 = *(double *)(a4 + 12);
    if (*(_BYTE *)(a1 + 1740))
    {
      float v10 = __exp10((float)*(int *)(a1 + 1744));
      double v8 = round(v8 * v10) / v10;
      float v11 = __exp10((float)*(int *)(a1 + 1744));
      double v9 = round(v9 * v11) / v11;
    }

    char v77 = &off_1018588C0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v13 = *(void *)(a4 + 76);
    CFAbsoluteTime v78 = Current;
    uint64_t v79 = v13;
    double v80 = v8;
    __int128 v82 = *(_OWORD *)(a4 + 44);
    uint64_t v83 = *(void *)(a4 + 20);
    __int128 v84 = *(_OWORD *)(a4 + 60);
    __int128 v85 = *(_OWORD *)(a4 + 28);
    uint64_t v14 = *(void *)(a4 + 176);
    uint64_t v87 = *(void *)(a4 + 184);
    int v88 = *(_DWORD *)(a4 + 476);
    uint64_t v90 = *(void *)(a4 + 200);
    int v91 = *(_DWORD *)(a4 + 208);
    __int128 v92 = *(_OWORD *)(a4 + 160);
    double v81 = v9;
    int v86 = *(_DWORD *)(a4 + 96);
    int v89 = *(_DWORD *)(a4 + 472);
    uint64_t v93 = v14;
    int v94 = *(_DWORD *)(a4 + 512);
    uint64_t v15 = sub_100E00E14();
    sub_100E022E0(v15, (uint64_t)&v77);
    sub_101125260(buf);
    sub_10113AD70(buf);
    v76 |= 1u;
    CFAbsoluteTime v74 = v78;
    uint64_t v16 = v75;
    uint64_t v17 = *(void *)(a4 + 76);
    *(_DWORD *)(v75 + 180) |= 0x800u;
    *(void *)(v16 + 96) = v17;
    uint64_t v18 = v75;
    *(_DWORD *)(v75 + 180) |= 0x40u;
    *(double *)(v18 + 56) = v8;
    uint64_t v19 = v75;
    *(_DWORD *)(v75 + 180) |= 0x80u;
    *(double *)(v19 + 64) = v9;
    uint64_t v20 = v75;
    uint64_t v21 = *(void *)(a4 + 44);
    *(_DWORD *)(v75 + 180) |= 0x200u;
    *(void *)(v20 + 80) = v21;
    uint64_t v22 = v75;
    uint64_t v23 = *(void *)(a4 + 52);
    *(_DWORD *)(v75 + 180) |= 0x400u;
    *(void *)(v22 + 88) = v23;
    uint64_t v24 = v75;
    uint64_t v25 = *(void *)(a4 + 20);
    *(_DWORD *)(v75 + 180) |= 0x20u;
    *(void *)(v24 + 48) = v25;
    uint64_t v26 = v75;
    uint64_t v27 = *(void *)(a4 + 60);
    *(_DWORD *)(v75 + 180) |= 2u;
    *(void *)(v26 + 16) = v27;
    uint64_t v28 = v75;
    uint64_t v29 = *(void *)(a4 + 68);
    *(_DWORD *)(v75 + 180) |= 4u;
    *(void *)(v28 + 24) = v29;
    uint64_t v30 = v75;
    uint64_t v31 = *(void *)(a4 + 28);
    *(_DWORD *)(v75 + 180) |= 1u;
    *(void *)(v30 + 8) = v31;
    uint64_t v32 = v75;
    uint64_t v33 = *(void *)(a4 + 36);
    *(_DWORD *)(v75 + 180) |= 0x2000u;
    *(void *)(v32 + 120) = v33;
    uint64_t v34 = v75;
    int v35 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v75 + 180) |= 0x800000u;
    *(_DWORD *)(v34 + 164) = v35;
    uint64_t v36 = v75;
    uint64_t v37 = *(void *)(a4 + 184);
    *(_DWORD *)(v75 + 180) |= 0x1000u;
    *(void *)(v36 + 104) = v37;
    uint64_t v38 = v75;
    LODWORD(v37) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v75 + 180) |= 0x1000000u;
    *(_DWORD *)(v38 + 168) = v37;
    uint64_t v39 = v75;
    int v40 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v75 + 180) |= 0x2000000u;
    *(_DWORD *)(v39 + 172) = v40;
    uint64_t v41 = v75;
    LODWORD(v37) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v75 + 180) |= 0x20000u;
    *(_DWORD *)(v41 + 140) = v37;
    uint64_t v42 = v75;
    LODWORD(v37) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v75 + 180) |= 0x80000u;
    *(_DWORD *)(v42 + 148) = v37;
    uint64_t v43 = v75;
    LODWORD(v37) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v75 + 180) |= 0x40000u;
    *(_DWORD *)(v43 + 144) = v37;
    uint64_t v44 = v75;
    uint64_t v45 = *(void *)(a4 + 160);
    *(_DWORD *)(v75 + 180) |= 0x100u;
    *(void *)(v44 + 72) = v45;
    uint64_t v46 = v75;
    uint64_t v47 = *(void *)(a4 + 168);
    *(_DWORD *)(v75 + 180) |= 8u;
    *(void *)(v46 + 32) = v47;
    uint64_t v48 = v75;
    uint64_t v49 = *(void *)(a4 + 176);
    *(_DWORD *)(v75 + 180) |= 0x10u;
    *(void *)(v48 + 40) = v49;
    uint64_t v50 = v75;
    int v51 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v75 + 180) |= 0x200000u;
    *(_DWORD *)(v50 + 156) = v51;
    uint64_t v52 = v75;
    uint64_t v53 = *(void *)(a1 + 2072);
    *(_DWORD *)(v75 + 180) |= 0x10000u;
    *(_DWORD *)(v52 + 136) = v53;
    uint64_t v54 = v75;
    LODWORD(v53) = *a3;
    *(_DWORD *)(v75 + 180) |= 0x100000u;
    *(_DWORD *)(v54 + 152) = v53;
    sub_1011554B8((uint64_t)v65);
    int v55 = *(_DWORD *)(a4 + 408);
    uint64_t v68 = *(void *)(a4 + 424);
    int v67 = *(_DWORD *)(a4 + 432);
    int v56 = *(_DWORD *)(a4 + 436);
    int v69 = v55;
    int v70 = v56;
    uint64_t v66 = *(void *)(a4 + 440);
    LOBYTE(v55) = *(_BYTE *)(a4 + 448);
    v72 |= 0x7Fu;
    char v71 = v55;
    char v57 = operator new(0x30uLL);
    uint64_t v58 = sub_1011555C0((uint64_t)v57, (uint64_t)v65);
    uint64_t v59 = *(void *)(v75 + 112);
    *(void *)(v75 + 112) = v58;
    if (v59) {
      (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
    }
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    PB::Base::~Base((PB::Base *)v65);
    sub_101127D00((PB::Base *)buf);
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v60 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      int v61 = *a3;
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "MotionLogger: Unexpected LocationNotification=%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v62 = *a3;
      LODWORD(v77) = 67109120;
      HIDWORD(v77) = v62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "MotionLogger: Unexpected LocationNotification=%d",  &v77);
      uint64_t v64 = (uint8_t *)v63;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionLogger::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocation Provider_Type::NotificationData &)",  "%s\n",  v63);
      if (v64 != buf) {
        free(v64);
      }
    }
  }

void sub_1008C8618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  PB::Base::~Base((PB::Base *)va);
  sub_101127D00((PB::Base *)va1);
  _Unwind_Resume(a1);
}

void sub_1008C8648(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double v7 = *(double *)(a4 + 4);
  double v8 = *(double *)(a4 + 12);
  if (*(_BYTE *)(a1 + 1740))
  {
    float v9 = __exp10((float)*(int *)(a1 + 1744));
    double v7 = round(v7 * v9) / v9;
    float v10 = __exp10((float)*(int *)(a1 + 1744));
    double v8 = round(v8 * v10) / v10;
  }

  int v11 = *a3;
  if (*a3 <= 22)
  {
    if (v11 != 4)
    {
      if (v11 == 22)
      {
        uint64_t v12 = *(int **)(a4 + 800);
        if (v12)
        {
          if (sub_100CBED60(v12))
          {
            unint64_t v13 = 0LL;
            uint64_t v14 = 52LL;
            uint64_t v15 = 316LL;
            do
            {
              uint64_t v16 = sub_1000F0F50(*(void *)(a4 + 800));
              uint64_t v17 = sub_1000F0F58(*(void *)(a4 + 800));
              double v19 = *(double *)(v16 + v14 - 48);
              double v18 = *(double *)(v16 + v14 - 40);
              if (*(_BYTE *)(a1 + 1740))
              {
                float v20 = __exp10((float)*(int *)(a1 + 1744));
                double v19 = round(v19 * v20) / v20;
                float v21 = __exp10((float)*(int *)(a1 + 1744));
                double v18 = round(v18 * v21) / v21;
              }

              v211 = &off_101858918;
              CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
              uint64_t v22 = v16 + v14;
              uint64_t v213 = *(void *)(v16 + v14 + 24);
              __int128 v214 = *(_OWORD *)(v16 + v14 - 48);
              __int128 v215 = *(_OWORD *)(v16 + v14 - 8);
              uint64_t v216 = *(void *)(v16 + v14 - 32);
              __int128 v217 = *(_OWORD *)(v16 + v14 + 8);
              __int128 v218 = *(_OWORD *)(v16 + v14 - 24);
              int v219 = *(_DWORD *)(v16 + v14 + 44);
              uint64_t v23 = (_DWORD *)(v17 + v15);
              uint64_t v24 = (uint64_t *)(v17 + v15 - 292);
              uint64_t v220 = *v24;
              int v221 = *(_DWORD *)(v17 + v15);
              int v222 = -1;
              uint64_t v25 = (uint64_t *)(v17 + v15 - 276);
              uint64_t v223 = *v25;
              uint64_t v26 = (int *)(v17 + v15 - 268);
              int v224 = *v26;
              uint64_t v27 = sub_100E00E14();
              sub_100E022E0(v27, (uint64_t)&v211);
              sub_101125260(v246);
              sub_10113ADC4(v246);
              v251 |= 1u;
              CFAbsoluteTime v248 = Current;
              sub_10118444C(v250);
              uint64_t v28 = v250[1];
              uint64_t v29 = *(void *)(v22 + 24);
              *(_DWORD *)(v28 + 180) |= 0x800u;
              *(void *)(v28 + 96) = v29;
              uint64_t v30 = v250[1];
              *(_DWORD *)(v30 + 180) |= 0x40u;
              *(double *)(v30 + 56) = v19;
              uint64_t v31 = v250[1];
              *(_DWORD *)(v31 + 180) |= 0x80u;
              *(double *)(v31 + 64) = v18;
              uint64_t v32 = v250[1];
              uint64_t v33 = *(void *)(v22 - 8);
              *(_DWORD *)(v32 + 180) |= 0x200u;
              *(void *)(v32 + 80) = v33;
              uint64_t v34 = v250[1];
              uint64_t v35 = *(void *)v22;
              *(_DWORD *)(v34 + 180) |= 0x400u;
              *(void *)(v34 + 88) = v35;
              uint64_t v36 = v250[1];
              uint64_t v37 = *(void *)(v22 - 32);
              *(_DWORD *)(v36 + 180) |= 0x20u;
              *(void *)(v36 + 48) = v37;
              uint64_t v38 = v250[1];
              uint64_t v39 = *(void *)(v22 + 8);
              *(_DWORD *)(v38 + 180) |= 2u;
              *(void *)(v38 + 16) = v39;
              uint64_t v40 = v250[1];
              uint64_t v41 = *(void *)(v22 + 16);
              *(_DWORD *)(v40 + 180) |= 4u;
              *(void *)(v40 + 24) = v41;
              uint64_t v42 = v250[1];
              uint64_t v43 = *(void *)(v22 - 24);
              *(_DWORD *)(v42 + 180) |= 1u;
              *(void *)(v42 + 8) = v43;
              uint64_t v44 = v250[1];
              uint64_t v45 = *(void *)(v22 - 16);
              *(_DWORD *)(v44 + 180) |= 0x2000u;
              *(void *)(v44 + 120) = v45;
              uint64_t v46 = v250[1];
              int v47 = *(_DWORD *)(v22 + 44);
              *(_DWORD *)(v46 + 180) |= 0x800000u;
              *(_DWORD *)(v46 + 164) = v47;
              uint64_t v48 = v250[1];
              uint64_t v49 = *v24;
              *(_DWORD *)(v48 + 180) |= 0x1000u;
              *(void *)(v48 + 104) = v49;
              uint64_t v50 = v250[1];
              LODWORD(v49) = *v23;
              *(_DWORD *)(v50 + 180) |= 0x1000000u;
              *(_DWORD *)(v50 + 168) = v49;
              uint64_t v51 = v250[1];
              *(_DWORD *)(v51 + 180) |= 0x2000000u;
              *(_DWORD *)(v51 + 172) = -1;
              uint64_t v52 = v250[1];
              LODWORD(v49) = *(_DWORD *)v25;
              *(_DWORD *)(v52 + 180) |= 0x20000u;
              *(_DWORD *)(v52 + 140) = v49;
              uint64_t v53 = v250[1];
              LODWORD(v49) = *(v23 - 68);
              *(_DWORD *)(v53 + 180) |= 0x80000u;
              *(_DWORD *)(v53 + 148) = v49;
              uint64_t v54 = v250[1];
              LODWORD(v49) = *v26;
              *(_DWORD *)(v54 + 180) |= 0x40000u;
              *(_DWORD *)(v54 + 144) = v49;
              if (qword_1019A1D00 != -1) {
                dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
              }
              if (qword_1019A1D08) {
                sub_1011CF3D0(qword_1019A1D08, (uint64_t)v246);
              }
              sub_101127D00((PB::Base *)v246);
              ++v13;
              v14 += 156LL;
              v15 += 560LL;
            }

            while (v13 < sub_100CBED60(*(int **)(a4 + 800)));
          }
        }
      }

      return;
    }

    sub_101125260(v246);
    sub_1011393D8(v246);
    CFAbsoluteTime v113 = CFAbsoluteTimeGetCurrent();
    v251 |= 1u;
    CFAbsoluteTime v248 = v113;
    uint64_t v114 = v249;
    uint64_t v115 = *(void *)(a4 + 76);
    *(_DWORD *)(v249 + 220) |= 0x40000u;
    *(void *)(v114 + 152) = v115;
    uint64_t v116 = v249;
    *(_DWORD *)(v249 + 220) |= 0x100u;
    *(double *)(v116 + 72) = v7;
    uint64_t v117 = v249;
    *(_DWORD *)(v249 + 220) |= 0x200u;
    *(double *)(v117 + 80) = v8;
    uint64_t v118 = v249;
    uint64_t v119 = *(void *)(a4 + 44);
    *(_DWORD *)(v249 + 220) |= 0x10000u;
    *(void *)(v118 + 136) = v119;
    uint64_t v120 = v249;
    uint64_t v121 = *(void *)(a4 + 52);
    *(_DWORD *)(v249 + 220) |= 0x20000u;
    *(void *)(v120 + 144) = v121;
    uint64_t v122 = v249;
    uint64_t v123 = *(void *)(a4 + 20);
    *(_DWORD *)(v249 + 220) |= 0x80u;
    *(void *)(v122 + 64) = v123;
    uint64_t v124 = v249;
    uint64_t v125 = *(void *)(a4 + 60);
    *(_DWORD *)(v249 + 220) |= 2u;
    *(void *)(v124 + 16) = v125;
    uint64_t v126 = v249;
    uint64_t v127 = *(void *)(a4 + 68);
    *(_DWORD *)(v249 + 220) |= 4u;
    *(void *)(v126 + 24) = v127;
    uint64_t v128 = v249;
    uint64_t v129 = *(void *)(a4 + 28);
    *(_DWORD *)(v249 + 220) |= 1u;
    *(void *)(v128 + 8) = v129;
    uint64_t v130 = v249;
    uint64_t v131 = *(void *)(a4 + 36);
    *(_DWORD *)(v249 + 220) |= 0x100000u;
    *(void *)(v130 + 168) = v131;
    uint64_t v132 = v249;
    int v133 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v249 + 220) |= 0x10000000u;
    *(_DWORD *)(v132 + 204) = v133;
    uint64_t v134 = v249;
    uint64_t v135 = *(void *)(a4 + 184);
    *(_DWORD *)(v249 + 220) |= 0x80000u;
    *(void *)(v134 + 160) = v135;
    uint64_t v136 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v249 + 220) |= 0x20000000u;
    *(_DWORD *)(v136 + 208) = v135;
    uint64_t v137 = v249;
    int v138 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v249 + 220) |= 0x40000000u;
    *(_DWORD *)(v137 + 212) = v138;
    uint64_t v139 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v249 + 220) |= 0x200000u;
    *(_DWORD *)(v139 + 176) = v135;
    uint64_t v140 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v249 + 220) |= 0x800000u;
    *(_DWORD *)(v140 + 184) = v135;
    uint64_t v141 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v249 + 220) |= 0x400000u;
    *(_DWORD *)(v141 + 180) = v135;
    uint64_t v142 = v249;
    uint64_t v143 = *(void *)(a4 + 160);
    *(_DWORD *)(v249 + 220) |= 0x800u;
    *(void *)(v142 + 96) = v143;
    uint64_t v144 = v249;
    uint64_t v145 = *(void *)(a4 + 168);
    *(_DWORD *)(v249 + 220) |= 8u;
    *(void *)(v144 + 32) = v145;
    uint64_t v146 = v249;
    uint64_t v147 = *(void *)(a4 + 176);
    *(_DWORD *)(v249 + 220) |= 0x10u;
    *(void *)(v146 + 40) = v147;
    uint64_t v148 = v249;
    int v149 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v249 + 220) |= 0x2000000u;
    *(_DWORD *)(v148 + 192) = v149;
    uint64_t v150 = v249;
    int v151 = *(_DWORD *)(a4 + 140);
    *(_DWORD *)(v249 + 220) |= 0x8000000u;
    *(_DWORD *)(v150 + 200) = v151;
    uint64_t v152 = v249;
    int v153 = *(_DWORD *)(a4 + 216);
    *(_DWORD *)(v249 + 220) |= 0x1000000u;
    *(_DWORD *)(v152 + 188) = v153;
    uint64_t v154 = v249;
    uint64_t v155 = *(void *)(a4 + 536);
    *(_DWORD *)(v249 + 220) |= 0x20u;
    *(void *)(v154 + 48) = v155;
    uint64_t v156 = v249;
    uint64_t v157 = *(void *)(a4 + 544);
    *(_DWORD *)(v249 + 220) |= 0x40u;
    *(void *)(v156 + 56) = v157;
    uint64_t v158 = v249;
    uint64_t v159 = *(void *)(a4 + 520);
    *(_DWORD *)(v249 + 220) |= 0x8000u;
    *(void *)(v158 + 128) = v159;
    uint64_t v160 = v249;
    uint64_t v161 = *(void *)(a4 + 528);
    *(_DWORD *)(v249 + 220) |= 0x400u;
    *(void *)(v160 + 88) = v161;
    uint64_t v162 = v249;
    *(_DWORD *)(v249 + 220) |= 0x80000000;
    *(_BYTE *)(v162 + 216) = 0;
    uint64_t v163 = v249;
    uint64_t v164 = *(void *)(a4 + 704);
    *(_DWORD *)(v249 + 220) |= 0x1000u;
    *(void *)(v163 + 104) = v164;
    uint64_t v165 = v249;
    uint64_t v166 = *(void *)(a4 + 712);
    *(_DWORD *)(v249 + 220) |= 0x4000u;
    *(void *)(v165 + 120) = v166;
    uint64_t v167 = v249;
    uint64_t v168 = *(void *)(a4 + 720);
    *(_DWORD *)(v249 + 220) |= 0x2000u;
    *(void *)(v167 + 112) = v168;
    uint64_t v169 = v249;
    int v170 = *(_DWORD *)(a4 + 728);
    *(_DWORD *)(v249 + 220) |= 0x4000000u;
    *(_DWORD *)(v169 + 196) = v170;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v246);
    }
    __int128 v171 = *(_OWORD *)(a4 + 112);
    v244[6] = *(_OWORD *)(a4 + 96);
    v244[7] = v171;
    v245[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v245 + 12) = *(_OWORD *)(a4 + 140);
    __int128 v172 = *(_OWORD *)(a4 + 48);
    v244[2] = *(_OWORD *)(a4 + 32);
    v244[3] = v172;
    __int128 v173 = *(_OWORD *)(a4 + 80);
    v244[4] = *(_OWORD *)(a4 + 64);
    v244[5] = v173;
    __int128 v174 = *(_OWORD *)(a4 + 16);
    v244[0] = *(_OWORD *)a4;
    v244[1] = v174;
    if (sub_1006732DC((uint64_t)v244, *(double *)(a4 + 936)) == 2)
    {
      v228 = &off_101858918;
      CFAbsoluteTime v175 = CFAbsoluteTimeGetCurrent();
      uint64_t v176 = *(void *)(a4 + 944);
      CFAbsoluteTime v229 = v175;
      uint64_t v230 = v176;
      double v231 = v7;
      double v232 = v8;
      uint64_t v177 = *(void *)(a4 + 952);
      uint64_t v233 = *(void *)(a4 + 936);
      uint64_t v234 = v177;
      uint64_t v235 = *(void *)(a4 + 20);
      __int128 v236 = *(_OWORD *)(a4 + 60);
      __int128 v237 = *(_OWORD *)(a4 + 28);
      int v238 = *(_DWORD *)(a4 + 96);
      uint64_t v239 = *(void *)(a4 + 184);
      int v240 = *(_DWORD *)(a4 + 476);
      int v241 = -1;
      uint64_t v242 = *(void *)(a4 + 200);
      int v243 = *(_DWORD *)(a4 + 208);
      uint64_t v178 = sub_100E00E14();
      sub_100E022E0(v178, (uint64_t)&v228);
      sub_101125260(&v211);
      sub_10113ADC4(&v211);
      v227 |= 1u;
      CFAbsoluteTime v225 = v229;
      sub_10118444C(v226);
      uint64_t v179 = v226[1];
      uint64_t v180 = *(void *)(a4 + 944);
      *(_DWORD *)(v179 + 180) |= 0x800u;
      *(void *)(v179 + 96) = v180;
      uint64_t v181 = v226[1];
      *(_DWORD *)(v181 + 180) |= 0x40u;
      *(double *)(v181 + 56) = v7;
      uint64_t v182 = v226[1];
      *(_DWORD *)(v182 + 180) |= 0x80u;
      *(double *)(v182 + 64) = v8;
      uint64_t v183 = v226[1];
      uint64_t v184 = *(void *)(a4 + 936);
      *(_DWORD *)(v183 + 180) |= 0x200u;
      *(void *)(v183 + 80) = v184;
      uint64_t v185 = v226[1];
      uint64_t v186 = *(void *)(a4 + 952);
      *(_DWORD *)(v185 + 180) |= 0x400u;
      *(void *)(v185 + 88) = v186;
      uint64_t v187 = v226[1];
      uint64_t v188 = *(void *)(a4 + 20);
      *(_DWORD *)(v187 + 180) |= 0x20u;
      *(void *)(v187 + 48) = v188;
      uint64_t v189 = v226[1];
      uint64_t v190 = *(void *)(a4 + 60);
      *(_DWORD *)(v189 + 180) |= 2u;
      *(void *)(v189 + 16) = v190;
      uint64_t v191 = v226[1];
      uint64_t v192 = *(void *)(a4 + 68);
      *(_DWORD *)(v191 + 180) |= 4u;
      *(void *)(v191 + 24) = v192;
      uint64_t v193 = v226[1];
      uint64_t v194 = *(void *)(a4 + 28);
      *(_DWORD *)(v193 + 180) |= 1u;
      *(void *)(v193 + 8) = v194;
      uint64_t v195 = v226[1];
      uint64_t v196 = *(void *)(a4 + 36);
      *(_DWORD *)(v195 + 180) |= 0x2000u;
      *(void *)(v195 + 120) = v196;
      uint64_t v197 = v226[1];
      int v198 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)(v197 + 180) |= 0x800000u;
      *(_DWORD *)(v197 + 164) = v198;
      uint64_t v199 = v226[1];
      uint64_t v200 = *(void *)(a4 + 184);
      *(_DWORD *)(v199 + 180) |= 0x1000u;
      *(void *)(v199 + 104) = v200;
      uint64_t v201 = v226[1];
      LODWORD(v200) = *(_DWORD *)(a4 + 476);
      *(_DWORD *)(v201 + 180) |= 0x1000000u;
      *(_DWORD *)(v201 + 168) = v200;
      uint64_t v202 = v226[1];
      *(_DWORD *)(v202 + 180) |= 0x2000000u;
      *(_DWORD *)(v202 + 172) = -1;
      uint64_t v203 = v226[1];
      LODWORD(v200) = *(_DWORD *)(a4 + 200);
      *(_DWORD *)(v203 + 180) |= 0x20000u;
      *(_DWORD *)(v203 + 140) = v200;
      uint64_t v204 = v226[1];
      LODWORD(v200) = *(_DWORD *)(a4 + 204);
      *(_DWORD *)(v204 + 180) |= 0x80000u;
      *(_DWORD *)(v204 + 148) = v200;
      uint64_t v205 = v226[1];
      LODWORD(v200) = *(_DWORD *)(a4 + 208);
      *(_DWORD *)(v205 + 180) |= 0x40000u;
      *(_DWORD *)(v205 + 144) = v200;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)&v211);
      }
      sub_101127D00((PB::Base *)&v211);
    }

void sub_1008C959C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008C95F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5 = *(double *)(a2 + 4);
  double v6 = *(double *)(a2 + 12);
  if (*(_BYTE *)(a1 + 1740))
  {
    float v8 = __exp10((float)*(int *)(a1 + 1744));
    double v5 = round(v5 * v8) / v8;
    float v9 = __exp10((float)*(int *)(a1 + 1744));
    double v6 = round(v6 * v9) / v9;
  }

  sub_101125260(v50);
  sub_101139EAC(v50);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v53 |= 1u;
  CFAbsoluteTime v52 = Current;
  int v11 = v51;
  int v12 = *((_DWORD *)a3 + 154);
  *((_BYTE *)v51 + 20) |= 1u;
  *((_DWORD *)v11 + 4) = v12;
  sub_1010F6FA0(v51);
  uint64_t v13 = v51[1];
  uint64_t v14 = *(void *)(a2 + 76);
  *(_DWORD *)(v13 + 180) |= 0x800u;
  *(void *)(v13 + 96) = v14;
  uint64_t v15 = v51[1];
  *(_DWORD *)(v15 + 180) |= 0x40u;
  *(double *)(v15 + 56) = v5;
  uint64_t v16 = v51[1];
  *(_DWORD *)(v16 + 180) |= 0x80u;
  *(double *)(v16 + 64) = v6;
  uint64_t v17 = v51[1];
  uint64_t v18 = *(void *)(a2 + 44);
  *(_DWORD *)(v17 + 180) |= 0x200u;
  *(void *)(v17 + 80) = v18;
  uint64_t v19 = v51[1];
  uint64_t v20 = *(void *)(a2 + 52);
  *(_DWORD *)(v19 + 180) |= 0x400u;
  *(void *)(v19 + 88) = v20;
  uint64_t v21 = v51[1];
  uint64_t v22 = *(void *)(a2 + 20);
  *(_DWORD *)(v21 + 180) |= 0x20u;
  *(void *)(v21 + 48) = v22;
  uint64_t v23 = v51[1];
  uint64_t v24 = *(void *)(a2 + 60);
  *(_DWORD *)(v23 + 180) |= 2u;
  *(void *)(v23 + 16) = v24;
  uint64_t v25 = v51[1];
  uint64_t v26 = *(void *)(a2 + 68);
  *(_DWORD *)(v25 + 180) |= 4u;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = v51[1];
  uint64_t v28 = *(void *)(a2 + 28);
  *(_DWORD *)(v27 + 180) |= 1u;
  *(void *)(v27 + 8) = v28;
  uint64_t v29 = v51[1];
  uint64_t v30 = *(void *)(a2 + 36);
  *(_DWORD *)(v29 + 180) |= 0x2000u;
  *(void *)(v29 + 120) = v30;
  uint64_t v31 = v51[1];
  int v32 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v31 + 180) |= 0x800000u;
  *(_DWORD *)(v31 + 164) = v32;
  uint64_t v33 = v51[1];
  uint64_t v34 = a3[3];
  *(_DWORD *)(v33 + 180) |= 0x1000u;
  *(void *)(v33 + 104) = v34;
  uint64_t v35 = v51[1];
  LODWORD(v34) = *((_DWORD *)a3 + 79);
  *(_DWORD *)(v35 + 180) |= 0x1000000u;
  *(_DWORD *)(v35 + 168) = v34;
  uint64_t v36 = v51[1];
  int v37 = *((_DWORD *)a3 + 78);
  *(_DWORD *)(v36 + 180) |= 0x2000000u;
  *(_DWORD *)(v36 + 172) = v37;
  uint64_t v38 = v51[1];
  LODWORD(v34) = *((_DWORD *)a3 + 10);
  *(_DWORD *)(v38 + 180) |= 0x20000u;
  *(_DWORD *)(v38 + 140) = v34;
  uint64_t v39 = v51[1];
  LODWORD(v34) = *((_DWORD *)a3 + 11);
  *(_DWORD *)(v39 + 180) |= 0x80000u;
  *(_DWORD *)(v39 + 148) = v34;
  uint64_t v40 = v51[1];
  LODWORD(v34) = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v40 + 180) |= 0x40000u;
  *(_DWORD *)(v40 + 144) = v34;
  uint64_t v41 = v51[1];
  uint64_t v42 = *a3;
  *(_DWORD *)(v41 + 180) |= 0x100u;
  *(void *)(v41 + 72) = v42;
  uint64_t v43 = v51[1];
  uint64_t v44 = a3[1];
  *(_DWORD *)(v43 + 180) |= 8u;
  *(void *)(v43 + 32) = v44;
  uint64_t v45 = v51[1];
  uint64_t v46 = a3[2];
  *(_DWORD *)(v45 + 180) |= 0x10u;
  *(void *)(v45 + 40) = v46;
  uint64_t v47 = v51[1];
  int v48 = *((_DWORD *)a3 + 88);
  *(_DWORD *)(v47 + 180) |= 0x200000u;
  *(_DWORD *)(v47 + 156) = v48;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v50);
  }
  return sub_101127D00((PB::Base *)v50);
}

void sub_1008C9960(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008C9978(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 41)
  {
    int v4 = *(_DWORD *)(a4 + 1448);
    int v5 = *(unsigned __int8 *)(a4 + 1452);
    int v6 = *(_DWORD *)(a4 + 1456);
    uint64_t v7 = *(void *)(a4 + 1464);
    int v8 = *(unsigned __int8 *)(a4 + 1472);
    *(void *)(result + 2072) = v7;
    sub_101125260(v15);
    sub_101139D5C(v15);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v17 |= 1u;
    *(CFAbsoluteTime *)&v15[77] = Current;
    uint64_t v10 = v16;
    *(_BYTE *)(v16 + 24) |= 2u;
    *(_DWORD *)(v10 + 12) = v4;
    uint64_t v11 = v16;
    *(_BYTE *)(v16 + 24) |= 8u;
    *(_BYTE *)(v11 + 20) = v5 != 0;
    uint64_t v12 = v16;
    *(_BYTE *)(v16 + 24) |= 4u;
    *(_DWORD *)(v12 + 16) = v6;
    uint64_t v13 = v16;
    *(_BYTE *)(v16 + 24) |= 1u;
    *(_DWORD *)(v13 + 8) = v7;
    uint64_t v14 = v16;
    *(_BYTE *)(v16 + 24) |= 0x10u;
    *(_BYTE *)(v14 + 21) = v8 != 0;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v15);
    }
    return sub_101127D00((PB::Base *)v15);
  }

  return result;
}

void sub_1008C9AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008C9AC8(uint64_t result, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  if (*a3 == 2)
  {
    uint64_t v5 = result;
    int v6 = (_OWORD *)(result + 640);
    __n128 result = sub_10120C434(result + 640, (uint64_t)a4);
    if ((result & 1) == 0)
    {
      __int128 v7 = *a4;
      __int128 v8 = a4[1];
      __int128 v9 = a4[2];
      *(_OWORD *)((char *)v6 + 44) = *(__int128 *)((char *)a4 + 44);
      v6[1] = v8;
      _DWORD v6[2] = v9;
      *int v6 = v7;
      uint64_t v45 = &off_101857E80;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      int v10 = *(_DWORD *)(v5 + 640);
      __int128 v11 = *(_OWORD *)(v5 + 664);
      __int128 v48 = *(_OWORD *)(v5 + 648);
      __int128 v49 = v11;
      int v12 = *(_DWORD *)(v5 + 680);
      int v47 = v10;
      int v50 = v12;
      int v51 = *(_DWORD *)(v5 + 684);
      uint64_t v13 = sub_100E00E14();
      sub_100E022E0(v13, (uint64_t)&v45);
      sub_101125260(v41);
      sub_10113ABCC(v41);
      v44 |= 1u;
      CFAbsoluteTime v43 = Current;
      uint64_t v14 = v42;
      int v15 = *(_DWORD *)(v5 + 640);
      *(_WORD *)(v42 + 64) |= 0x10u;
      *(_DWORD *)(v14 + 24) = v15;
      uint64_t v16 = v42;
      int v17 = *(_DWORD *)(v5 + 648);
      *(_WORD *)(v42 + 64) |= 0x20u;
      *(_DWORD *)(v16 + 28) = v17;
      uint64_t v18 = v42;
      int v19 = *(_DWORD *)(v5 + 652);
      *(_WORD *)(v42 + 64) |= 0x1000u;
      *(_DWORD *)(v18 + 56) = v19;
      uint64_t v20 = v42;
      int v21 = *(_DWORD *)(v5 + 656);
      *(_WORD *)(v42 + 64) |= 0x800u;
      *(_DWORD *)(v20 + 52) = v21;
      uint64_t v22 = v42;
      int v23 = *(_DWORD *)(v5 + 660);
      *(_WORD *)(v42 + 64) |= 2u;
      *(_DWORD *)(v22 + 12) = v23;
      uint64_t v24 = v42;
      int v25 = *(_DWORD *)(v5 + 664);
      *(_WORD *)(v42 + 64) |= 0x80u;
      *(_DWORD *)(v24 + 36) = v25;
      uint64_t v26 = v42;
      int v27 = *(_DWORD *)(v5 + 668);
      *(_WORD *)(v42 + 64) |= 0x40u;
      *(_DWORD *)(v26 + 32) = v27;
      uint64_t v28 = v42;
      int v29 = *(_DWORD *)(v5 + 672);
      *(_WORD *)(v42 + 64) |= 0x100u;
      *(_DWORD *)(v28 + 40) = v29;
      uint64_t v30 = v42;
      int v31 = *(_DWORD *)(v5 + 676);
      *(_WORD *)(v42 + 64) |= 0x200u;
      *(_DWORD *)(v30 + 44) = v31;
      uint64_t v32 = v42;
      int v33 = *(_DWORD *)(v5 + 680);
      *(_WORD *)(v42 + 64) |= 8u;
      *(_DWORD *)(v32 + 20) = v33;
      uint64_t v34 = v42;
      int v35 = *(_DWORD *)(v5 + 684);
      *(_WORD *)(v42 + 64) |= 0x400u;
      *(_DWORD *)(v34 + 48) = v35;
      uint64_t v36 = v42;
      LOBYTE(v33) = *(_BYTE *)(v5 + 688);
      *(_WORD *)(v42 + 64) |= 0x2000u;
      *(_BYTE *)(v36 + 60) = v33;
      uint64_t v37 = v42;
      int v38 = *(_DWORD *)(v5 + 644);
      *(_WORD *)(v42 + 64) |= 4u;
      *(_DWORD *)(v37 + 16) = v38;
      uint64_t v39 = v42;
      int v40 = *(_DWORD *)(v5 + 692);
      *(_WORD *)(v42 + 64) |= 1u;
      *(_DWORD *)(v39 + 8) = v40;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v41);
      }
      return sub_101127D00((PB::Base *)v41);
    }
  }

  return result;
}

void sub_1008C9D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008C9D60(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a3 == 1)
  {
    sub_101125260(v24);
    sub_101138F94(v24);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v28 |= 1u;
    CFAbsoluteTime v25 = Current;
    uint64_t v13 = v26;
    int v14 = *a4;
    *(_BYTE *)(v26 + 40) |= 4u;
    *(_DWORD *)(v13 + 24) = v14;
    uint64_t v15 = v26;
    int v16 = a4[1];
    *(_BYTE *)(v26 + 40) |= 0x10u;
    *(_DWORD *)(v15 + 32) = v16;
    uint64_t v17 = v26;
    int v18 = a4[2];
    *(_BYTE *)(v26 + 40) |= 8u;
    *(_DWORD *)(v17 + 28) = v18;
    uint64_t v19 = v26;
    LOBYTE(v18) = *((_BYTE *)a4 + 24);
    *(_BYTE *)(v26 + 40) |= 0x40u;
    *(_BYTE *)(v19 + 37) = v18;
    uint64_t v20 = v26;
    LOBYTE(v18) = *((_BYTE *)a4 + 25);
    *(_BYTE *)(v26 + 40) |= 0x20u;
    *(_BYTE *)(v20 + 36) = v18;
    uint64_t v21 = v26;
    LOBYTE(v18) = *((_BYTE *)a4 + 26);
    *(_BYTE *)(v26 + 40) |= 0x80u;
    *(_BYTE *)(v21 + 38) = v18;
    uint64_t v22 = v26;
    uint64_t v23 = *((void *)a4 + 2);
    *(_BYTE *)(v26 + 40) |= 2u;
    *(void *)(v22 + 16) = v23;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v11 = qword_1019A1D08;
    if (!qword_1019A1D08) {
      return sub_101127D00((PB::Base *)v24);
    }
LABEL_12:
    sub_1011CF3D0(v11, (uint64_t)v24);
    return sub_101127D00((PB::Base *)v24);
  }

  if (!*a3)
  {
    uint64_t v5 = result;
    if (*(_DWORD *)(result + 712) != *a4 || *(_DWORD *)(result + 716) != a4[1])
    {
      *(void *)(result + 712) = *(void *)a4;
      int v29 = &off_1018584A0;
      CFAbsoluteTime v30 = CFAbsoluteTimeGetCurrent();
      char v31 = *(_DWORD *)(v5 + 712);
      char v32 = *(_DWORD *)(v5 + 716);
      uint64_t v6 = sub_100E00E14();
      sub_100E022E0(v6, (uint64_t)&v29);
      sub_101125260(v24);
      sub_10113B010(v24);
      v28 |= 1u;
      CFAbsoluteTime v25 = v30;
      uint64_t v7 = v27;
      int v8 = *(_DWORD *)(v5 + 712);
      *(_BYTE *)(v27 + 16) |= 2u;
      *(_DWORD *)(v7 + 12) = v8;
      uint64_t v9 = v27;
      int v10 = *(_DWORD *)(v5 + 716);
      *(_BYTE *)(v27 + 16) |= 1u;
      *(_DWORD *)(v9 + 8) = v10;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v11 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        return sub_101127D00((PB::Base *)v24);
      }
      goto LABEL_12;
    }
  }

  return result;
}

void sub_1008C9FB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1008C9FD8(uint64_t result, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  if (!*a3)
  {
    __int128 v4 = a4[9];
    v17[8] = a4[8];
    v17[9] = v4;
    v17[10] = a4[10];
    __int128 v5 = a4[5];
    v17[4] = a4[4];
    v17[5] = v5;
    __int128 v6 = a4[7];
    v17[6] = a4[6];
    v17[7] = v6;
    __int128 v7 = a4[1];
    v17[0] = *a4;
    v17[1] = v7;
    __int128 v8 = a4[3];
    v17[2] = a4[2];
    v17[3] = v8;
    if (*(_BYTE *)(result + 1831))
    {
      sub_1004495A0((uint64_t)v17, v15);
      sub_101125260(v12);
      v14 |= 1u;
      v12[77] = v16;
      uint64_t v9 = operator new(0xA0uLL);
      uint64_t v10 = sub_10114C270(v9, v15);
      uint64_t v11 = v13;
      uint64_t v13 = v10;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
      }
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v12);
      }
      sub_101127D00((PB::Base *)v12);
      return sub_10114BEA0((PB::Base *)v15);
    }
  }

  return result;
}

void sub_1008CA0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CA104(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    sub_101125260(v8);
    sub_1011391E0(v8);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v10 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    uint64_t v6 = v9;
    int v7 = *a4;
    *(_BYTE *)(v9 + 12) |= 1u;
    *(_DWORD *)(v6 + 8) = v7;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
    }
    sub_101127D00((PB::Base *)v8);
  }

void sub_1008CA1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CA1D0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 36)
  {
    sub_101125260(v14);
    sub_101139F00(v14);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    uint64_t v6 = v15;
    uint64_t v7 = *(void *)(a4 + 1344);
    *(_BYTE *)(v15 + 32) |= 2u;
    *(void *)(v6 + 16) = v7;
    uint64_t v8 = v15;
    int v9 = *(_DWORD *)(a4 + 1332);
    *(_BYTE *)(v15 + 32) |= 8u;
    *(_DWORD *)(v8 + 28) = v9;
    uint64_t v10 = v15;
    int v11 = *(_DWORD *)(a4 + 1328);
    *(_BYTE *)(v15 + 32) |= 4u;
    *(_DWORD *)(v10 + 24) = v11;
    uint64_t v12 = v15;
    uint64_t v13 = *(void *)(a4 + 1336);
    *(_BYTE *)(v15 + 32) |= 1u;
    *(void *)(v12 + 8) = v13;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v14);
    }
    sub_101127D00((PB::Base *)v14);
  }

void sub_1008CA2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CA2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v33 = 0u;
  if ((sub_1008CA648(a4, (uint64_t)&v33) & 1) != 0)
  {
    sub_101125260(v30);
    sub_101139F54(v30);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v32 |= 1u;
    *(CFAbsoluteTime *)&v30[77] = Current;
    uint64_t v5 = v31;
    uint64_t v6 = *((void *)&v33 + 1);
    *(void *)(v31 + 144) = v33;
    *(_BYTE *)(v5 + 152) |= 4u;
    uint64_t v7 = v31;
    *(_BYTE *)(v31 + 152) |= 2u;
    *(void *)(v7 + 16) = v6;
    uint64_t v8 = v31;
    uint64_t v9 = v34;
    *(_BYTE *)(v31 + 152) |= 1u;
    *(void *)(v8 + 8) = v9;
    uint64_t v10 = (int32x2_t *)*((void *)&v34 + 1);
    int v11 = (int32x2_t *)v35;
    if (*((void *)&v34 + 1) != (void)v35)
    {
      uint64_t v12 = (char **)(v31 + 96);
      do
      {
        if (!v10->i32[0])
        {
          sub_10114027C((uint64_t)v36);
          int32x2_t v37 = vrev64_s32(v10[1]);
          __int32 v13 = v10[2].i32[0];
          v39 |= 7u;
          __int32 v38 = v13;
          sub_1008D44B8(v12, (uint64_t)v36);
          PB::Base::~Base((PB::Base *)v36);
        }

        uint64_t v10 = (int32x2_t *)((char *)v10 + 28);
      }

      while (v10 != v11);
      char v14 = (int32x2_t *)*((void *)&v34 + 1);
      uint64_t v15 = (int32x2_t *)v35;
      if (*((void *)&v34 + 1) != (void)v35)
      {
        char v16 = (char **)(v31 + 120);
        do
        {
          if (v14->i32[0] == 4)
          {
            sub_10114027C((uint64_t)v36);
            int32x2_t v37 = vrev64_s32(v14[1]);
            __int32 v17 = v14[2].i32[0];
            v39 |= 7u;
            __int32 v38 = v17;
            sub_1008D44B8(v16, (uint64_t)v36);
            PB::Base::~Base((PB::Base *)v36);
          }

          char v14 = (int32x2_t *)((char *)v14 + 28);
        }

        while (v14 != v15);
        int v18 = (int32x2_t *)*((void *)&v34 + 1);
        uint64_t v19 = (int32x2_t *)v35;
        if (*((void *)&v34 + 1) != (void)v35)
        {
          uint64_t v20 = (char **)(v31 + 72);
          do
          {
            if (v18->i32[0] == 1)
            {
              sub_10114027C((uint64_t)v36);
              int32x2_t v37 = vrev64_s32(v18[1]);
              __int32 v21 = v18[2].i32[0];
              v39 |= 7u;
              __int32 v38 = v21;
              sub_1008D44B8(v20, (uint64_t)v36);
              PB::Base::~Base((PB::Base *)v36);
            }

            int v18 = (int32x2_t *)((char *)v18 + 28);
          }

          while (v18 != v19);
          uint64_t v22 = (int32x2_t *)*((void *)&v34 + 1);
          uint64_t v23 = (int32x2_t *)v35;
          if (*((void *)&v34 + 1) != (void)v35)
          {
            uint64_t v24 = (char **)(v31 + 48);
            do
            {
              if (v22->i32[0] == 3)
              {
                sub_10114027C((uint64_t)v36);
                int32x2_t v37 = vrev64_s32(v22[1]);
                __int32 v25 = v22[2].i32[0];
                v39 |= 7u;
                __int32 v38 = v25;
                sub_1008D44B8(v24, (uint64_t)v36);
                PB::Base::~Base((PB::Base *)v36);
              }

              uint64_t v22 = (int32x2_t *)((char *)v22 + 28);
            }

            while (v22 != v23);
            uint64_t v26 = (int32x2_t *)*((void *)&v34 + 1);
            uint64_t v27 = (int32x2_t *)v35;
            if (*((void *)&v34 + 1) != (void)v35)
            {
              char v28 = (char **)(v31 + 24);
              do
              {
                if (v26->i32[0] == 2)
                {
                  sub_10114027C((uint64_t)v36);
                  int32x2_t v37 = vrev64_s32(v26[1]);
                  __int32 v29 = v26[2].i32[0];
                  v39 |= 7u;
                  __int32 v38 = v29;
                  sub_1008D44B8(v28, (uint64_t)v36);
                  PB::Base::~Base((PB::Base *)v36);
                }

                uint64_t v26 = (int32x2_t *)((char *)v26 + 28);
              }

              while (v26 != v27);
            }
          }
        }
      }
    }

    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v30);
    }
    sub_101127D00((PB::Base *)v30);
  }

  if (*((void *)&v34 + 1))
  {
    *(void *)&__int128 v35 = *((void *)&v34 + 1);
    operator delete(*((void **)&v34 + 1));
  }

void sub_1008CA5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  __int128 v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(void *)(v2 - 80) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008CA648(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if ((*(_DWORD *)(a1 + 96) & 0xFFFFFFF7) == 1)
  {
    double v4 = *(double *)(a1 + 88);
    if (v4 >= 0.0)
    {
      uint64_t v5 = *(uint64_t **)(a1 + 680);
      if (v5)
      {
        uint64_t v7 = *(void *)(a1 + 192);
        *(void *)a2 = *(void *)(a1 + 76);
        *(void *)(a2 + 8) = v7;
        *(double *)(a2 + 16) = v4;
        uint64_t v8 = *v5;
        uint64_t v9 = v5[1];
        if (v8 == v9)
        {
          unint64_t v10 = 0LL;
        }

        else
        {
          LODWORD(v10) = 0;
          do
          {
            unint64_t v10 = v10 + *(unsigned __int8 *)(v8 + 24);
            v8 += 28LL;
          }

          while (v8 != v9);
        }

        int v11 = (char **)(a2 + 24);
        *(void *)(a2 + 32) = *(void *)(a2 + 24);
        sub_1008D43CC((void **)(a2 + 24), v10);
        uint64_t v12 = *(__int128 ***)(a1 + 680);
        __int32 v13 = *v12;
        char v14 = v12[1];
        if (*v12 != v14)
        {
          do
          {
            if (*((_BYTE *)v13 + 24))
            {
              char v16 = *(_OWORD **)(a2 + 32);
              unint64_t v15 = *(void *)(a2 + 40);
              if ((unint64_t)v16 >= v15)
              {
                uint64_t v19 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v16 - *v11) >> 2);
                unint64_t v20 = v19 + 1;
                unint64_t v21 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v15 - (void)*v11) >> 2);
                if (2 * v21 > v20) {
                  unint64_t v20 = 2 * v21;
                }
                if (v21 >= 0x492492492492492LL) {
                  unint64_t v22 = 0x924924924924924LL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22) {
                  uint64_t v23 = (char *)sub_10079D83C(a2 + 40, v22);
                }
                else {
                  uint64_t v23 = 0LL;
                }
                uint64_t v24 = &v23[28 * v19];
                __int128 v25 = *v13;
                *(_OWORD *)(v24 + 12) = *(__int128 *)((char *)v13 + 12);
                *(_OWORD *)uint64_t v24 = v25;
                uint64_t v27 = *(char **)(a2 + 24);
                uint64_t v26 = *(char **)(a2 + 32);
                char v28 = v24;
                if (v26 != v27)
                {
                  do
                  {
                    __int128 v29 = *(_OWORD *)(v26 - 28);
                    *(v28 - 1) = *((_OWORD *)v26 - 1);
                    *(_OWORD *)((char *)v28 - 28) = v29;
                    char v28 = (_OWORD *)((char *)v28 - 28);
                    v26 -= 28;
                  }

                  while (v26 != v27);
                  uint64_t v26 = *v11;
                }

                int v18 = v24 + 28;
                *(void *)(a2 + 24) = v28;
                *(void *)(a2 + 32) = v24 + 28;
                *(void *)(a2 + 40) = &v23[28 * v22];
                if (v26) {
                  operator delete(v26);
                }
              }

              else
              {
                __int128 v17 = *v13;
                *(_OWORD *)((char *)v16 + 12) = *(__int128 *)((char *)v13 + 12);
                _OWORD *v16 = v17;
                int v18 = (char *)v16 + 28;
              }

              *(void *)(a2 + 32) = v18;
            }

            __int32 v13 = (__int128 *)((char *)v13 + 28);
          }

          while (v13 != v14);
        }

        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1008CA850(uint64_t a1, _DWORD *a2)
{
  double v3 = sub_101171D4C();
  uint64_t result = sub_100ECF4A4((uint64_t)a2, v3, 6.0);
  if ((result & 1) == 0)
  {
    sub_101125260(v31);
    sub_101139FA8(v31);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v33 |= 1u;
    *(CFAbsoluteTime *)&v31[77] = Current;
    uint64_t v6 = v32;
    BOOL v7 = *a2 == 1;
    *(_WORD *)(v32 + 20) |= 0x80u;
    *(_BYTE *)(v6 + 15) = v7;
    uint64_t v8 = v32;
    BOOL v9 = *a2 == 3;
    *(_WORD *)(v32 + 20) |= 2u;
    *(_BYTE *)(v8 + 9) = v9;
    uint64_t v10 = v32;
    BOOL v11 = *a2 == 0;
    *(_WORD *)(v32 + 20) |= 8u;
    *(_BYTE *)(v10 + 11) = v11;
    uint64_t v12 = v32;
    BOOL v13 = a2[1] == 3;
    *(_WORD *)(v32 + 20) |= 0x20u;
    *(_BYTE *)(v12 + 13) = v13;
    uint64_t v14 = v32;
    BOOL v15 = a2[1] == 0;
    *(_WORD *)(v32 + 20) |= 0x40u;
    *(_BYTE *)(v14 + 14) = v15;
    uint64_t v16 = v32;
    double v17 = sub_101171D4C();
    char v18 = sub_100ECF4A4((uint64_t)a2, v17, 6.0);
    BOOL v19 = *a2 == 0;
    *(_WORD *)(v16 + 20) |= 0x10u;
    *(_BYTE *)(v16 + 12) = v19 & ~v18;
    uint64_t v20 = v32;
    double v21 = sub_101171D4C();
    char v22 = sub_100ECF4A4((uint64_t)a2, v21, 6.0);
    BOOL v23 = *a2 == 1;
    *(_WORD *)(v20 + 20) |= 0x100u;
    *(_BYTE *)(v20 + 16) = v23 & ~v22;
    uint64_t v24 = v32;
    double v25 = sub_101171D4C();
    char v26 = sub_100ECF4A4((uint64_t)a2, v25, 6.0);
    BOOL v27 = *a2 == 3;
    *(_WORD *)(v24 + 20) |= 4u;
    *(_BYTE *)(v24 + 10) = v27 & ~v26;
    uint64_t v28 = v32;
    double v29 = sub_101171D4C();
    BOOL v30 = sub_1005F5294(a2, v29);
    *(_WORD *)(v28 + 20) |= 1u;
    *(_BYTE *)(v28 + 8) = v30;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v31);
    }
    return sub_101127D00((PB::Base *)v31);
  }

  return result;
}

void sub_1008CAA5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CAA74(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  if (!*a3)
  {
    sub_101125260(v47);
    sub_101139FFC(v47);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v49 |= 1u;
    *(CFAbsoluteTime *)&v47[77] = Current;
    uint64_t v6 = v48;
    uint64_t v7 = a4[17];
    *(_DWORD *)(v48 + 176) |= 8u;
    *(void *)(v6 + 32) = v7;
    uint64_t v8 = v48;
    uint64_t v9 = *a4;
    *(_DWORD *)(v48 + 176) |= 0x800u;
    *(void *)(v8 + 96) = v9;
    uint64_t v10 = v48;
    uint64_t v11 = a4[18];
    *(_DWORD *)(v48 + 176) |= 0x100u;
    *(void *)(v10 + 72) = v11;
    uint64_t v12 = v48;
    uint64_t v13 = a4[14];
    *(_DWORD *)(v48 + 176) |= 0x20u;
    *(void *)(v12 + 48) = v13;
    uint64_t v14 = v48;
    uint64_t v15 = a4[11];
    *(_DWORD *)(v48 + 176) |= 0x10u;
    *(void *)(v14 + 40) = v15;
    uint64_t v16 = v48;
    uint64_t v17 = a4[8];
    *(_DWORD *)(v48 + 176) |= 0x40u;
    *(void *)(v16 + 56) = v17;
    uint64_t v18 = v48;
    uint64_t v19 = a4[3];
    *(_DWORD *)(v48 + 176) |= 0x2000u;
    *(void *)(v18 + 112) = v19;
    uint64_t v20 = v48;
    uint64_t v21 = a4[4];
    *(_DWORD *)(v48 + 176) |= 0x4000u;
    *(void *)(v20 + 120) = v21;
    uint64_t v22 = v48;
    uint64_t v23 = a4[2];
    *(_DWORD *)(v48 + 176) |= 0x8000u;
    *(void *)(v22 + 128) = v23;
    uint64_t v24 = v48;
    uint64_t v25 = a4[5];
    *(_DWORD *)(v48 + 176) |= 0x20000u;
    *(void *)(v24 + 144) = v25;
    uint64_t v26 = v48;
    uint64_t v27 = a4[6];
    *(_DWORD *)(v48 + 176) |= 0x40000u;
    *(void *)(v26 + 152) = v27;
    uint64_t v28 = v48;
    uint64_t v29 = a4[7];
    *(_DWORD *)(v48 + 176) |= 0x10000u;
    *(void *)(v28 + 136) = v29;
    uint64_t v30 = v48;
    uint64_t v31 = a4[19];
    *(_DWORD *)(v48 + 176) |= 0x80000u;
    *(void *)(v30 + 160) = v31;
    uint64_t v32 = v48;
    LODWORD(v29) = *((_DWORD *)a4 + 40);
    *(_DWORD *)(v48 + 176) |= 0x100000u;
    *(_DWORD *)(v32 + 168) = v29;
    uint64_t v33 = v48;
    uint64_t v34 = a4[15];
    *(_DWORD *)(v48 + 176) |= 0x80u;
    *(void *)(v33 + 64) = v34;
    uint64_t v35 = v48;
    uint64_t v36 = a4[12];
    *(_DWORD *)(v48 + 176) |= 2u;
    *(void *)(v35 + 16) = v36;
    uint64_t v37 = v48;
    uint64_t v38 = a4[9];
    *(_DWORD *)(v48 + 176) |= 0x400u;
    *(void *)(v37 + 88) = v38;
    uint64_t v39 = v48;
    uint64_t v40 = a4[1];
    *(_DWORD *)(v48 + 176) |= 4u;
    *(void *)(v39 + 24) = v40;
    uint64_t v41 = v48;
    int v42 = *(_DWORD *)(v48 + 176) | 0x200000;
    *(_DWORD *)(v48 + 172) = *((_DWORD *)a4 + 32);
    *(_DWORD *)(v41 + 176) = v42;
    uint64_t v43 = v48;
    double v44 = (double)*((int *)a4 + 20);
    *(_DWORD *)(v48 + 176) |= 0x200u;
    *(double *)(v43 + 80) = v44;
    uint64_t v45 = v48;
    double v46 = (double)*((int *)a4 + 26);
    *(_DWORD *)(v48 + 176) |= 1u;
    *(double *)(v45 + 8) = v46;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v47);
    }
    sub_101127D00((PB::Base *)v47);
  }

void sub_1008CAD0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CAD24(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    unsigned __int32 v5 = *(_DWORD *)a4;
    if (*(_DWORD *)a4 == 2)
    {
      sub_101125260(buf);
      sub_10113957C(buf);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v23 |= 1u;
      CFAbsoluteTime v20 = Current;
      uint64_t v12 = v22;
      char v13 = *(_BYTE *)(a4 + 4);
      *(_BYTE *)(v22 + 12) |= 1u;
      *(_BYTE *)(v12 + 8) = v13;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
      }
      goto LABEL_14;
    }

    if (v5 == 1)
    {
      sub_101125260(buf);
      sub_101139528(buf);
      CFAbsoluteTime v6 = CFAbsoluteTimeGetCurrent();
      v23 |= 1u;
      CFAbsoluteTime v20 = v6;
      uint64_t v7 = v21;
      sub_1010DDBC0(&__p, (char *)(a4 + 4));
      sub_1007A71E8(v7, &__p);
      if (v18 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      uint64_t v8 = v21;
      int v9 = *(unsigned __int8 *)(a4 + 260);
      *(_BYTE *)(v21 + 24) |= 1u;
      *(_DWORD *)(v8 + 16) = v9;
      uint64_t v10 = v21;
      LOBYTE(v9) = *(_BYTE *)(a4 + 261);
      *(_BYTE *)(v21 + 24) |= 2u;
      *(_BYTE *)(v10 + 20) = v9;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
      }
LABEL_14:
      sub_101127D00((PB::Base *)buf);
      return;
    }

    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_10185EA30);
    }
    uint64_t v14 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Received unexpected event type: %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      __p.n128_u32[0] = 67240192;
      __p.n128_u32[1] = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  16LL,  "Received unexpected event type: %{public}d",  &__p,  8);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionLogger::onMagneticAccessoryEvent(int, const CLMagneticAccessory_Type::Notification &, const CLMagne ticAccessory_Type::NotificationData &)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

void sub_1008CB03C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_1008CB080(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 17);
  int v6 = *(unsigned __int8 *)(a2 + 18);
  int v7 = *(unsigned __int8 *)(a2 + 19);
  v19[0] = &off_101858398;
  v19[1] = v3;
  *(double *)&v19[3] = v2;
  char v20 = v4;
  char v21 = v5;
  char v22 = v6;
  char v23 = v7;
  uint64_t v8 = sub_100E00E14();
  sub_100E022E0(v8, (uint64_t)v19);
  sub_101125260(v15);
  sub_10113AF14(v15);
  v18 |= 1u;
  uint64_t v17 = v3;
  uint64_t v9 = v16;
  *(_BYTE *)(v16 + 32) |= 1u;
  *(void *)(v9 + 8) = (unint64_t)v2;
  uint64_t v10 = v16;
  *(_BYTE *)(v16 + 32) |= 0x10u;
  *(_DWORD *)(v10 + 28) = v4;
  uint64_t v11 = v16;
  *(_BYTE *)(v16 + 32) |= 8u;
  *(_DWORD *)(v11 + 24) = v5;
  uint64_t v12 = v16;
  *(_BYTE *)(v16 + 32) |= 4u;
  *(_DWORD *)(v12 + 20) = v6;
  uint64_t v13 = v16;
  *(_BYTE *)(v16 + 32) |= 2u;
  *(_DWORD *)(v13 + 16) = v7;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v15);
  }
  return sub_101127D00((PB::Base *)v15);
}

void sub_1008CB1D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1008CB1EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  int v4 = *((unsigned __int8 *)a2 + 16);
  int v5 = *((unsigned __int8 *)a2 + 17);
  int v6 = *((unsigned __int8 *)a2 + 18);
  sub_101125260(v12);
  sub_101139B10(v12);
  v15 |= 1u;
  uint64_t v14 = v3;
  uint64_t v7 = v13;
  *(_BYTE *)(v13 + 28) |= 1u;
  *(void *)(v7 + 8) = v2;
  uint64_t v8 = v13;
  *(_BYTE *)(v13 + 28) |= 4u;
  *(_DWORD *)(v8 + 20) = v4;
  uint64_t v9 = v13;
  *(_BYTE *)(v13 + 28) |= 8u;
  *(_BYTE *)(v9 + 24) = v5 != 0;
  uint64_t v10 = v13;
  *(_BYTE *)(v13 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v6;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v12);
  }
  return sub_101127D00((PB::Base *)v12);
}

void sub_1008CB2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CB308(uint64_t a1, uint64_t a2, _DWORD *a3, char *a4)
{
  if (*a3 == 6)
  {
    uint64_t v14 = &off_101857C18;
    char v18 = *a4;
    uint64_t v17 = *((void *)a4 + 1);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v9 = sub_100E00E14();
    sub_100E022E0(v9, (uint64_t)&v14);
    sub_101125260(v19);
    sub_10113A92C(v19);
    v23 |= 1u;
    CFAbsoluteTime v20 = Current;
    uint64_t v10 = v21;
    uint64_t v11 = *((void *)a4 + 1);
    *(_BYTE *)(v21 + 20) |= 1u;
    *(void *)(v10 + 8) = v11;
    uint64_t v12 = v21;
    char v13 = *a4;
    *(_BYTE *)(v21 + 20) |= 2u;
    *(_BYTE *)(v12 + 16) = v13;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v8 = qword_1019A1D08;
    if (!qword_1019A1D08) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  if (*a3 != 5) {
    return;
  }
  uint64_t v14 = &off_1018583F0;
  char v16 = *a4;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = sub_100E00E14();
  sub_100E022E0(v5, (uint64_t)&v14);
  sub_101125260(v19);
  sub_10113AF68(v19);
  v23 |= 1u;
  CFAbsoluteTime v20 = Current;
  uint64_t v6 = v22;
  char v7 = *a4;
  *(_BYTE *)(v22 + 12) |= 1u;
  *(_BYTE *)(v6 + 8) = v7;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  uint64_t v8 = qword_1019A1D08;
  if (qword_1019A1D08) {
LABEL_10:
  }
    sub_1011CF3D0(v8, (uint64_t)v19);
LABEL_11:
  sub_101127D00((PB::Base *)v19);
}

void sub_1008CB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1008CB4F0(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    uint64_t v3 = result;
    char v15 = &off_1018584F8;
    BOOL v17 = sub_101024130(*(void *)(result + 1184));
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = sub_100E00E14();
    sub_100E022E0(v4, (uint64_t)&v15);
    sub_101125260(v13);
    v14 |= 1u;
    *(CFAbsoluteTime *)&v13[77] = Current;
    sub_10113B064(v13);
    uint64_t v5 = v13[257];
    BOOL v6 = sub_101024130(*(void *)(v3 + 1184));
    *(_BYTE *)(v5 + 12) |= 1u;
    *(_BYTE *)(v5 + 8) = v6;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v13);
    }
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    char v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      BOOL v8 = sub_101024130(*(void *)(v3 + 1184));
      *(_DWORD *)__int128 buf = 67109120;
      BOOL v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WiFi association update %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      uint64_t v9 = qword_1019344B8;
      BOOL v10 = sub_101024130(*(void *)(v3 + 1184));
      v18[0] = 67109120;
      v18[1] = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  1LL,  "WiFi association update %d",  v18);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type: :NotificationData &)",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    return sub_101127D00((PB::Base *)v13);
  }

  return result;
}

void sub_1008CB794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1008CB7C0(uint64_t result, uint64_t a2, _DWORD *a3)
{
  void (**v6)(_OWORD *__return_ptr);
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  int v13;
  uint64_t v14;
  os_log_s *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  void v29[452];
  char v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  _BYTE buf[12];
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  if (*a3 == 3)
  {
    uint64_t v3 = result;
    sub_101125260(v29);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v30 |= 1u;
    *(CFAbsoluteTime *)&v29[77] = Current;
    sub_10113903C(v29);
    uint64_t v5 = v29[427];
    BOOL v6 = (void (**)(_OWORD *__return_ptr))[*(id *)(*(void *)(v3 + 1192) + 16) syncgetScanResult];
    if (v6)
    {
      v6[2](&v27);
      char v7 = *((void *)&v27 + 1);
      for (uint64_t i = v28; v7 != i; v7 += 88LL)
      {
        sub_1011694AC((char **)(v5 + 8));
        uint64_t v9 = *(void *)(*(void *)(v5 + 16) - 8LL);
        *(void *)__int128 buf = *(void *)v7;
        BOOL v10 = sub_1005B46E8((uint64_t)buf);
        uint64_t v11 = sub_100DEA75C(v10);
        uint64_t v12 = *(_BYTE *)(v9 + 32);
        *(_BYTE *)(v9 + 32) = v12 | 1;
        *(void *)(v9 + 8) = v11;
        char v13 = *(_DWORD *)(v7 + 32);
        *(_BYTE *)(v9 + 32) = v12 | 5;
        *(_DWORD *)(v9 + 24) = v13;
        char v14 = *(void *)(v7 + 56);
        *(_BYTE *)(v9 + 32) = v12 | 7;
        *(void *)(v9 + 16) = v14;
        LOBYTE(v13) = *(_BYTE *)(v7 + 65);
        *(_BYTE *)(v9 + 32) = v12 | 0xF;
        *(_BYTE *)(v9 + 28) = v13;
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185E910);
        }
        char v15 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          char v16 = *(_DWORD *)(v9 + 24);
          BOOL v17 = *(void *)(v9 + 8);
          char v18 = *(void *)(v9 + 16);
          uint64_t v19 = *(unsigned __int8 *)(v9 + 28);
          *(_DWORD *)__int128 buf = 134218753;
          *(void *)&uint8_t buf[4] = v17;
          uint64_t v40 = 1024;
          uint64_t v41 = v16;
          int v42 = 2048;
          uint64_t v43 = v18;
          double v44 = 1025;
          uint64_t v45 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "WiFi scan entry,id,%llu,rssi,%d,timestamp,%f,isMoving,%{private}d",  buf,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10185E910);
          }
          BOOL v20 = *(_DWORD *)(v9 + 24);
          uint64_t v21 = *(void *)(v9 + 8);
          uint64_t v22 = *(void *)(v9 + 16);
          char v23 = *(unsigned __int8 *)(v9 + 28);
          uint64_t v31 = 134218753;
          uint64_t v32 = v21;
          uint64_t v33 = 1024;
          uint64_t v34 = v20;
          uint64_t v35 = 2048;
          uint64_t v36 = v22;
          uint64_t v37 = 1025;
          uint64_t v38 = v23;
          LODWORD(v26) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "WiFi scan entry,id,%llu,rssi,%d,timestamp,%f,isMoving,%{private}d",  &v31,  v26);
          uint64_t v25 = (char *)v24;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onWifiScanNotification(int, const CLWifiService_Type::Notification &, const CLWifiServi ce_Type::NotificationData &)",  "%s\n",  v24);
          if (v25 != buf) {
            free(v25);
          }
        }
      }
    }

    else
    {
      uint64_t v27 = 0u;
      uint64_t v28 = 0u;
    }

    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v29);
    }
    *(void *)__int128 buf = (char *)&v27 + 8;
    sub_100023498((void ***)buf);
    return sub_101127D00((PB::Base *)v29);
  }

  return result;
}

void sub_1008CBB50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  STACK[0xEB0] = a5;
  sub_100023498((void ***)&STACK[0xEB0]);
  sub_101127D00((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1008CBB94(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (v4 == 2)
  {
    if (!*(_BYTE *)(a1 + 1825)) {
      return;
    }
    sub_101125260(buf);
    sub_101138BF8(buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v64 |= 1u;
    CFAbsoluteTime v63 = Current;
    char v23 = v61;
    *((_BYTE *)v61 + 32) |= 2u;
    v23[6] = 0;
    sub_1010E0B98(v61);
    uint64_t v24 = *((void *)v61 + 1);
    uint64_t v25 = *((void *)a2 + 2);
    *(_BYTE *)(v24 + 32) |= 1u;
    *(void *)(v24 + 8) = v25;
    uint64_t v26 = *((void *)v61 + 1);
    LODWORD(v25) = *((_DWORD *)a2 + 1);
    *(_BYTE *)(v26 + 32) |= 4u;
    *(_DWORD *)(v26 + 20) = v25;
    uint64_t v27 = *((void *)v61 + 1);
    LODWORD(v25) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v27 + 32) |= 8u;
    *(_DWORD *)(v27 + 24) = v25;
    uint64_t v28 = *((void *)v61 + 1);
    LODWORD(v25) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(v28 + 32) |= 0x10u;
    *(_DWORD *)(v28 + 28) = v25;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v21 = qword_1019A1D08;
    if (!qword_1019A1D08) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  if (v4 == 1)
  {
    if (!*(_BYTE *)(a1 + 1825)) {
      return;
    }
    sub_101125260(buf);
    sub_101138BF8(buf);
    CFAbsoluteTime v29 = CFAbsoluteTimeGetCurrent();
    v64 |= 1u;
    CFAbsoluteTime v63 = v29;
    uint64_t v30 = v61;
    *((_BYTE *)v61 + 32) |= 2u;
    v30[6] = 0;
    sub_1010E0B98(v61);
    uint64_t v31 = *((void *)v61 + 1);
    uint64_t v32 = *((void *)a2 + 2);
    *(_BYTE *)(v31 + 32) |= 1u;
    *(void *)(v31 + 8) = v32;
    uint64_t v33 = *((void *)v61 + 1);
    LODWORD(v32) = *((_DWORD *)a2 + 1);
    *(_BYTE *)(v33 + 32) |= 4u;
    *(_DWORD *)(v33 + 20) = v32;
    uint64_t v34 = *((void *)v61 + 1);
    LODWORD(v32) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v34 + 32) |= 8u;
    *(_DWORD *)(v34 + 24) = v32;
    uint64_t v35 = *((void *)v61 + 1);
    LODWORD(v32) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(v35 + 32) |= 0x10u;
    *(_DWORD *)(v35 + 28) = v32;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    uint64_t v21 = qword_1019A1D08;
    if (!qword_1019A1D08) {
      goto LABEL_24;
    }
LABEL_23:
    sub_1011CF3D0(v21, (uint64_t)buf);
LABEL_24:
    sub_101127D00((PB::Base *)buf);
    return;
  }

  if (*a2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v36 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      int v37 = *a2;
      *(_DWORD *)__int128 buf = 67240192;
      LODWORD(v50) = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "Unexpected PencilDebug data type %{public}u",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v46 = *a2;
      int __src = 67240192;
      LODWORD(v66) = v46;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Unexpected PencilDebug data type %{public}u",  &__src,  8);
      uint64_t v48 = (uint8_t *)v47;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionLogger::onPencilDebug(const CLPencilDebug::Data *)",  "%s\n",  v47);
      if (v48 != buf) {
        free(v48);
      }
    }
  }

  else
  {
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_10185EA30);
    }
    uint64_t v5 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((void *)a2 + 2);
      int v7 = a2[4];
      int v8 = a2[5];
      int v9 = *((__int16 *)a2 + 3);
      int v10 = *((__int16 *)a2 + 4);
      int v11 = *((__int16 *)a2 + 5);
      *(_DWORD *)__int128 buf = 134350336;
      uint64_t v50 = v6;
      __int16 v51 = 1026;
      int v52 = v7;
      __int16 v53 = 1026;
      int v54 = v8;
      __int16 v55 = 1026;
      int v56 = v9;
      __int16 v57 = 1026;
      int v58 = v10;
      __int16 v59 = 1026;
      int v60 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "onPencilDebug::Wake,MachAbs,%{public}f,sensor,%{public}u,host,%{public}u,%{public}d,%{public}d,%{public}d",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v38 = *((void *)a2 + 2);
      int v39 = a2[4];
      int v40 = a2[5];
      int v41 = *((__int16 *)a2 + 3);
      int v42 = *((__int16 *)a2 + 4);
      int v43 = *((__int16 *)a2 + 5);
      int __src = 134350336;
      uint64_t v66 = v38;
      __int16 v67 = 1026;
      int v68 = v39;
      __int16 v69 = 1026;
      int v70 = v40;
      __int16 v71 = 1026;
      int v72 = v41;
      __int16 v73 = 1026;
      int v74 = v42;
      __int16 v75 = 1026;
      int v76 = v43;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "onPencilDebug::Wake,MachAbs,%{public}f,sensor,%{public}u,host,%{public}u,%{public}d,%{public}d,%{public}d",  &__src,  42);
      uint64_t v45 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onPencilDebug(const CLPencilDebug::Data *)",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    if (*(_BYTE *)(a1 + 1825))
    {
      sub_101125260(buf);
      sub_101139090(buf);
      CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
      v64 |= 1u;
      CFAbsoluteTime v63 = v12;
      uint64_t v13 = v62;
      *(_BYTE *)(v62 + 52) |= 4u;
      *(_DWORD *)(v13 + 44) = 0;
      uint64_t v14 = v62;
      uint64_t v15 = *((void *)a2 + 2);
      *(_BYTE *)(v62 + 52) |= 1u;
      *(void *)(v14 + 32) = v15;
      uint64_t v16 = v62;
      int v17 = a2[4];
      *(_BYTE *)(v62 + 52) |= 8u;
      *(_DWORD *)(v16 + 48) = v17;
      uint64_t v18 = v62;
      int v19 = a2[5];
      *(_BYTE *)(v62 + 52) |= 2u;
      *(_DWORD *)(v18 + 40) = v19;
      int v20 = *((__int16 *)a2 + 4);
      int __src = *((__int16 *)a2 + 3);
      LODWORD(v66) = v20;
      HIDWORD(v66) = *((__int16 *)a2 + 5);
      sub_10004C5F8((char *)(v62 + 8), (char *)&__src, (uint64_t)&v67, 3uLL);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v21 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }

void sub_1008CC23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008CC270(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v4 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v39 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error retrieving LOIs. %{public}@", buf, 0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v36 = 138543362;
    uint64_t v37 = a3;
    double v29 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "Error retrieving LOIs. %{public}@",  &v36,  12);
    uint64_t v28 = v30;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)_block_invoke",  "%s\n",  v29);
LABEL_30:
    if (v28 != buf) {
      free(v28);
    }
    return;
  }

  if ([a2 count])
  {
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v7 = [a2 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v32;
      while (2)
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v9) {
            objc_enumerationMutation(a2);
          }
          int v11 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
          if ([v11 type] != (id)-1)
          {
            uint64_t v12 = *(void *)(a1 + 2080);
            objc_msgSend(objc_msgSend(v11, "location"), "horizontalUncertainty");
            *(_WORD *)(v12 + 92) |= 0x80u;
            *(void *)(v12 + 64) = v13;
            uint64_t v14 = *(void *)(a1 + 2080);
            [v11 confidence];
            *(_WORD *)(v14 + 92) |= 2u;
            *(void *)(v14 + 16) = v15;
            uint64_t v16 = *(void *)(a1 + 2080);
            unsigned int v17 = [v11 type];
            *(_WORD *)(v16 + 92) |= 0x400u;
            *(_DWORD *)(v16 + 84) = v17;
            uint64_t v18 = objc_alloc(&OBJC_CLASS___CLLocation);
            objc_msgSend(objc_msgSend(v11, "location"), "latitude");
            double v20 = v19;
            objc_msgSend(objc_msgSend(v11, "location"), "longitude");
            uint64_t v22 = -[CLLocation initWithLatitude:longitude:](v18, "initWithLatitude:longitude:", v20, v21);
            uint64_t v23 = *(void *)(a1 + 2080);
            [*(id *)(a1 + 32) distanceFromLocation:v22];
            *(_WORD *)(v23 + 92) |= 8u;
            *(void *)(v23 + 32) = v24;

            return;
          }
        }

        id v8 = [a2 countByEnumeratingWithState:&v31 objects:v35 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v25 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "No LOIs near", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v36) = 0;
      double v26 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "No LOIs near",  &v36,  2);
      uint64_t v28 = v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)_block_invoke",  "%s\n",  v26);
      goto LABEL_30;
    }
  }

uint64_t sub_1008CC6B0(uint64_t a1, uint64_t a2)
{
  return sub_10112D8FC(a1 + 40, a2 + 40);
}

uint64_t sub_1008CC6BC(uint64_t a1)
{
  return sub_101127D00((PB::Base *)(a1 + 40));
}

id sub_1008CC6C4(uint64_t a1)
{
  id v2 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  if (*(double *)(a1 + 1432) > 0.0 || *(double *)(a1 + 1472) > 0.0 || *(_BYTE *)(a1 + 1461))
  {
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08)
    {
      id v3 = sub_100B50274(qword_1019A1D08);
      if (v3) {
        [v2 addObject:v3];
      }
      return v2;
    }

    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v4 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Unable to access Motion Logger.  Maybe it is not enabled?",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "Unable to access Motion Logger.  Maybe it is not enabled?",  v9,  2,  v9[0]);
LABEL_26:
      id v8 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray<NSString *> *CLMotionLogger::onTapToRadarAccessoryRequest()",  "%s\n",  v5);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v6 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Accessory Logging is not enabled.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "Accessory Logging is not enabled.",  v9,  2,  v9[0]);
      goto LABEL_26;
    }
  }

  return v2;
}

void sub_1008CC9B0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2 + 16;
    do
    {
      sub_101125260(v15);
      sub_101138BF8(v15);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v18 |= 1u;
      CFAbsoluteTime v17 = Current;
      uint64_t v6 = v16;
      int v7 = *(unsigned __int16 *)(v4 + 16);
      *((_BYTE *)v16 + 32) |= 4u;
      v6[7] = v7;
      sub_1010E0B98(v16);
      uint64_t v8 = *((void *)v16 + 1);
      uint64_t v9 = *(void *)(v4 - 16);
      *(_BYTE *)(v8 + 32) |= 1u;
      *(void *)(v8 + 8) = v9;
      uint64_t v10 = *((void *)v16 + 1);
      LODWORD(v9) = *(_DWORD *)(v4 - 8);
      *(_BYTE *)(v10 + 32) |= 4u;
      *(_DWORD *)(v10 + 20) = v9;
      uint64_t v11 = *((void *)v16 + 1);
      LODWORD(v9) = *(_DWORD *)(v4 - 4);
      *(_BYTE *)(v11 + 32) |= 8u;
      *(_DWORD *)(v11 + 24) = v9;
      uint64_t v12 = *((void *)v16 + 1);
      LODWORD(v9) = *(_DWORD *)v4;
      *(_BYTE *)(v12 + 32) |= 0x10u;
      *(_DWORD *)(v12 + 28) = v9;
      uint64_t v13 = v16;
      uint64_t v14 = *(void *)(v4 + 8);
      *((_BYTE *)v16 + 32) |= 1u;
      *((void *)v13 + 2) = v14;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v15);
      }
      sub_101127D00((PB::Base *)v15);
      v4 += 40LL;
      --v3;
    }

    while (v3);
  }

void sub_1008CCB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008CCB2C(uint64_t a1, uint64_t a2)
{
  switch(*(_BYTE *)(a2 + 9))
  {
    case 0:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v3 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(unsigned __int8 *)(a2 + 12);
        int v5 = *(unsigned __int8 *)(a2 + 16);
        *(_DWORD *)__int128 buf = 67240963;
        *(_DWORD *)&uint8_t buf[4] = v4;
        *(_WORD *)v397 = 1026;
        *(_DWORD *)&v397[2] = v5;
        *(_WORD *)&v397[6] = 1040;
        *(_DWORD *)&v397[8] = 10;
        *(_WORD *)&v397[12] = 2097;
        *(void *)&v397[14] = a2 + 17;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_GENERAL sequenceNumber,%{public}u,id,%{public}hhu,data,%{private}.*P",  buf,  0x1Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        int v6 = *(unsigned __int8 *)(a2 + 12);
        int v7 = *(unsigned __int8 *)(a2 + 16);
        LODWORD(__p) = 67240963;
        HIDWORD(__p) = v6;
        __int16 v401 = 1026;
        *(_DWORD *)v402 = v7;
        *(_WORD *)&v402[4] = 1040;
        *(_DWORD *)&v402[6] = 10;
        *(_WORD *)&v402[10] = 2097;
        *(void *)&v402[12] = a2 + 17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryMonitor] eEL_GENERAL sequenceNumber,%{public}u,id,%{public}hhu,data,%{private}.*P",  &__p,  30);
        uint64_t v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v8);
        if (v9 != buf) {
          free(v9);
        }
      }

      return;
    case 1:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v118 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v119 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v120 = *(unsigned __int8 *)(a2 + 16);
        if (v120 >= 5) {
          uint64_t v121 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16));
        }
        else {
          uint64_t v121 = (NSString *)*(&off_10185F6A8 + (char)v120);
        }
        uint64_t v184 = *(void *)(a2 + 24);
        int v185 = *(unsigned __int8 *)(a2 + 17);
        int v186 = *(unsigned __int8 *)(a2 + 18);
        int v187 = *(unsigned __int8 *)(a2 + 19);
        int v188 = *(unsigned __int8 *)(a2 + 20);
        int v189 = *(unsigned __int8 *)(a2 + 21);
        int v190 = *(unsigned __int8 *)(a2 + 22);
        int v191 = *(unsigned __int8 *)(a2 + 23);
        *(_DWORD *)__int128 buf = 67242498;
        *(_DWORD *)&uint8_t buf[4] = v119;
        *(_WORD *)v397 = 2114;
        *(void *)&v397[2] = v121;
        *(_WORD *)&v397[10] = 2050;
        *(void *)&v397[12] = v184;
        *(_WORD *)&v397[20] = 1026;
        *(_DWORD *)&v397[22] = v185;
        *(_WORD *)&v397[26] = 1026;
        *(_DWORD *)&v397[28] = v186;
        *(_WORD *)&v397[32] = 1026;
        *(_DWORD *)&v397[34] = v187;
        *(_WORD *)&v397[38] = 1026;
        *(_DWORD *)&v397[40] = v188;
        *(_WORD *)&v397[44] = 1026;
        *(_DWORD *)&v397[46] = v189;
        *(_WORD *)&v397[50] = 1026;
        *(_DWORD *)&v397[52] = v190;
        *(_WORD *)&v397[56] = 1026;
        *(_DWORD *)&v397[58] = v191;
        _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_INEAR_EVENT sequenceNumber,%{public}u,inEarState,%{public}@,timestamp,%{public}llu,stat us,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u",  buf,  0x46u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v302 = qword_1019345C8;
        int v303 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v304 = *(unsigned __int8 *)(a2 + 16);
        if (v304 >= 5) {
          v305 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16));
        }
        else {
          v305 = (NSString *)*(&off_10185F6A8 + (char)v304);
        }
        uint64_t v335 = *(void *)(a2 + 24);
        int v336 = *(unsigned __int8 *)(a2 + 17);
        int v337 = *(unsigned __int8 *)(a2 + 18);
        int v338 = *(unsigned __int8 *)(a2 + 19);
        int v339 = *(unsigned __int8 *)(a2 + 20);
        int v340 = *(unsigned __int8 *)(a2 + 21);
        int v341 = *(unsigned __int8 *)(a2 + 22);
        int v342 = *(unsigned __int8 *)(a2 + 23);
        LODWORD(__p) = 67242498;
        HIDWORD(__p) = v303;
        __int16 v401 = 2114;
        *(void *)v402 = v305;
        *(_WORD *)&v402[8] = 2050;
        *(void *)&v402[10] = v335;
        *(_WORD *)&v402[18] = 1026;
        *(_DWORD *)&v402[20] = v336;
        *(_WORD *)&v402[24] = 1026;
        *(_DWORD *)&v402[26] = v337;
        *(_WORD *)&v402[30] = 1026;
        *(_DWORD *)&v402[32] = v338;
        *(_WORD *)&v402[36] = 1026;
        *(_DWORD *)&v402[38] = v339;
        *(_WORD *)&v402[42] = 1026;
        *(_DWORD *)&v402[44] = v340;
        *(_WORD *)&v402[48] = 1026;
        *(_DWORD *)&v402[50] = v341;
        *(_WORD *)&v402[54] = 1026;
        *(_DWORD *)&v402[56] = v342;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v302,  0LL,  "[AccessoryMonitor] eEL_INEAR_EVENT sequenceNumber,%{public}u,inEarState,%{public}@,timestamp,%{public}llu,stat us,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u",  &__p,  70);
        v344 = (uint8_t *)v343;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v343);
        if (v344 != buf) {
          free(v344);
        }
      }

      uint64_t v10 = operator new(0x20uLL);
      uint64_t v192 = sub_1010EFBA0((uint64_t)v10);
      *(void *)__int128 buf = v192;
      char v193 = *(_BYTE *)(v192 + 24);
      *(_DWORD *)(v192 + 16) = *(unsigned __int8 *)(a2 + 16);
      double v194 = (double)*(unint64_t *)(a2 + 24);
      *(_BYTE *)(v192 + 24) = v193 | 3;
      *(double *)(v192 + 8) = v194;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v85 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_209;
      }
      goto LABEL_73;
    case 2:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      __int16 v71 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v72 = *(unsigned __int8 *)(a2 + 12);
        uint64_t v73 = *(void *)(a2 + 16);
        int v74 = *(unsigned __int8 *)(a2 + 24);
        int v75 = *(unsigned __int8 *)(a2 + 25);
        int v76 = *(unsigned __int8 *)(a2 + 26);
        int v77 = *(unsigned __int8 *)(a2 + 27);
        int v78 = *(unsigned __int8 *)(a2 + 28);
        int v79 = *(unsigned __int8 *)(a2 + 29);
        int v80 = *(unsigned __int8 *)(a2 + 30);
        int v81 = *(unsigned __int8 *)(a2 + 31);
        *(_DWORD *)__int128 buf = 67242496;
        *(_DWORD *)&uint8_t buf[4] = v72;
        *(_WORD *)v397 = 2050;
        *(void *)&v397[2] = v73;
        *(_WORD *)&v397[10] = 1026;
        *(_DWORD *)&v397[12] = v74;
        *(_WORD *)&v397[16] = 1026;
        *(_DWORD *)&v397[18] = v75;
        *(_WORD *)&v397[22] = 1026;
        *(_DWORD *)&v397[24] = v76;
        *(_WORD *)&v397[28] = 1026;
        *(_DWORD *)&v397[30] = v77;
        *(_WORD *)&v397[34] = 1026;
        *(_DWORD *)&v397[36] = v78;
        *(_WORD *)&v397[40] = 1026;
        *(_DWORD *)&v397[42] = v79;
        *(_WORD *)&v397[46] = 1026;
        *(_DWORD *)&v397[48] = v80;
        *(_WORD *)&v397[52] = 1026;
        *(_DWORD *)&v397[54] = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_DOUBLE_TAP_EVENT sequenceNumber,%{public}u,timestamp,%{public}llu,status,%{public}u,%{p ublic}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u",  buf,  0x42u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        int v273 = *(unsigned __int8 *)(a2 + 12);
        uint64_t v274 = *(void *)(a2 + 16);
        int v275 = *(unsigned __int8 *)(a2 + 24);
        int v276 = *(unsigned __int8 *)(a2 + 25);
        int v277 = *(unsigned __int8 *)(a2 + 26);
        int v278 = *(unsigned __int8 *)(a2 + 27);
        int v279 = *(unsigned __int8 *)(a2 + 28);
        int v280 = *(unsigned __int8 *)(a2 + 29);
        int v281 = *(unsigned __int8 *)(a2 + 30);
        int v282 = *(unsigned __int8 *)(a2 + 31);
        LODWORD(__p) = 67242496;
        HIDWORD(__p) = v273;
        __int16 v401 = 2050;
        *(void *)v402 = v274;
        *(_WORD *)&v402[8] = 1026;
        *(_DWORD *)&v402[10] = v275;
        *(_WORD *)&v402[14] = 1026;
        *(_DWORD *)&v402[16] = v276;
        *(_WORD *)&v402[20] = 1026;
        *(_DWORD *)&v402[22] = v277;
        *(_WORD *)&v402[26] = 1026;
        *(_DWORD *)&v402[28] = v278;
        *(_WORD *)&v402[32] = 1026;
        *(_DWORD *)&v402[34] = v279;
        *(_WORD *)&v402[38] = 1026;
        *(_DWORD *)&v402[40] = v280;
        *(_WORD *)&v402[44] = 1026;
        *(_DWORD *)&v402[46] = v281;
        *(_WORD *)&v402[50] = 1026;
        *(_DWORD *)&v402[52] = v282;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryMonitor] eEL_DOUBLE_TAP_EVENT sequenceNumber,%{public}u,timestamp,%{public}llu,status,%{public}u,%{p ublic}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u",  &__p,  66);
        v284 = (uint8_t *)v283;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v283);
        if (v284 != buf) {
          free(v284);
        }
      }

      uint64_t v10 = operator new(0x20uLL);
      uint64_t v82 = sub_1010EFBA0((uint64_t)v10);
      *(void *)__int128 buf = v82;
      char v83 = *(_BYTE *)(v82 + 24);
      *(_DWORD *)(v82 + 16) = 4;
      double v84 = (double)*(unint64_t *)(a2 + 16);
      *(_BYTE *)(v82 + 24) = v83 | 3;
      *(double *)(v82 + 8) = v84;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v85 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_209;
      }
LABEL_73:
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100B505C4(v85, (uint64_t *)buf, Current);
      goto LABEL_207;
    case 3:
      sub_1008CFB14( (uint64_t)"eEL_IED_TRANSITION",  (unsigned __int8 *)(a2 + 16),  *(unsigned __int8 *)(a2 + 8),  *(unsigned __int8 *)(a2 + 12));
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v92 = qword_1019A1D08;
      if (qword_1019A1D08) {
        goto LABEL_87;
      }
      return;
    case 4:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      int v42 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v44 = *(unsigned __int8 *)(a2 + 16);
        if (v44 >= 0xA) {
          uint64_t v45 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16));
        }
        else {
          uint64_t v45 = (NSString *)*(&off_10185F790 + (char)v44);
        }
        int v166 = *(__int16 *)(a2 + 17);
        int v167 = *(__int16 *)(a2 + 19);
        int v168 = *(__int16 *)(a2 + 21);
        int v169 = *(__int16 *)(a2 + 23);
        *(_DWORD *)__int128 buf = 67241474;
        *(_DWORD *)&uint8_t buf[4] = v43;
        *(_WORD *)v397 = 2114;
        *(void *)&v397[2] = v45;
        *(_WORD *)&v397[10] = 1026;
        *(_DWORD *)&v397[12] = v166;
        *(_WORD *)&v397[16] = 1026;
        *(_DWORD *)&v397[18] = v167;
        *(_WORD *)&v397[22] = 1026;
        *(_DWORD *)&v397[24] = v168;
        *(_WORD *)&v397[28] = 1026;
        *(_DWORD *)&v397[30] = v169;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_IED_SESSION sequenceNumber,%{public}u,state,%{public}@,conchaMin,%{public}d,conchaMax,% {public}d,tragusMin,%{public}d,tragusMax,%{public}d",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v285 = qword_1019345C8;
        int v286 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v287 = *(unsigned __int8 *)(a2 + 16);
        if (v287 >= 0xA) {
          v288 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16));
        }
        else {
          v288 = (NSString *)*(&off_10185F790 + (char)v287);
        }
        int v329 = *(__int16 *)(a2 + 17);
        int v330 = *(__int16 *)(a2 + 19);
        int v331 = *(__int16 *)(a2 + 21);
        int v332 = *(__int16 *)(a2 + 23);
        LODWORD(__p) = 67241474;
        HIDWORD(__p) = v286;
        __int16 v401 = 2114;
        *(void *)v402 = v288;
        *(_WORD *)&v402[8] = 1026;
        *(_DWORD *)&v402[10] = v329;
        *(_WORD *)&v402[14] = 1026;
        *(_DWORD *)&v402[16] = v330;
        *(_WORD *)&v402[20] = 1026;
        *(_DWORD *)&v402[22] = v331;
        *(_WORD *)&v402[26] = 1026;
        *(_DWORD *)&v402[28] = v332;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v285,  0LL,  "[AccessoryMonitor] eEL_IED_SESSION sequenceNumber,%{public}u,state,%{public}@,conchaMin,%{public}d,conchaMax,% {public}d,tragusMin,%{public}d,tragusMax,%{public}d",  &__p,  42);
        v334 = (uint8_t *)v333;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v333);
        if (v334 != buf) {
          free(v334);
        }
      }

      uint64_t v10 = operator new(0x28uLL);
      uint64_t v170 = sub_10109E6A0((uint64_t)v10);
      *(void *)__int128 buf = v170;
      int v171 = *(unsigned __int8 *)(a2 + 16);
      *(_BYTE *)(v170 + 32) |= 2u;
      *(_DWORD *)(v170 + 28) = v171;
      __int16 v172 = *(_WORD *)(a2 + 17);
      __int16 v173 = *(_WORD *)(a2 + 21);
      __int128 v174 = operator new(0x18uLL);
      uint64_t v175 = sub_101103644((uint64_t)v174);
      *(_BYTE *)(v175 + 16) |= 3u;
      *(float *)(v175 + 8) = (float)v172;
      *(float *)(v175 + 12) = (float)v173;
      uint64_t v176 = v10[2];
      v10[2] = v175;
      if (v176) {
        (*(void (**)(uint64_t))(*(void *)v176 + 8LL))(v176);
      }
      __int16 v177 = *(_WORD *)(a2 + 19);
      __int16 v178 = *(_WORD *)(a2 + 23);
      uint64_t v179 = operator new(0x18uLL);
      uint64_t v180 = sub_101103644((uint64_t)v179);
      *(_BYTE *)(v180 + 16) |= 3u;
      *(float *)(v180 + 8) = (float)v177;
      *(float *)(v180 + 12) = (float)v178;
      uint64_t v181 = v10[1];
      v10[1] = v180;
      if (v181) {
        (*(void (**)(uint64_t))(*(void *)v181 + 8LL))(v181);
      }
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v182 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_209;
      }
      double v183 = CFAbsoluteTimeGetCurrent();
      sub_100B50AA4(v182, (uint64_t *)buf, v183);
      goto LABEL_207;
    case 5:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v122 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v123 = *(unsigned __int8 *)(a2 + 12);
        int v124 = *(unsigned __int8 *)(a2 + 16);
        int v125 = *(char *)(a2 + 17) + 1;
        if (v125 >= 9) {
          uint64_t v126 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(char *)(a2 + 17));
        }
        else {
          uint64_t v126 = (NSString *)*(&off_10185F6D0 + v125);
        }
        uint64_t v195 = *(void *)(a2 + 18);
        int v196 = *(__int16 *)(a2 + 26);
        double v197 = *(float *)(a2 + 28);
        double v198 = *(float *)(a2 + 32);
        double v199 = *(float *)(a2 + 36);
        double v200 = *(float *)(a2 + 40);
        *(_DWORD *)__int128 buf = 67242242;
        *(_DWORD *)&uint8_t buf[4] = v123;
        *(_WORD *)v397 = 1026;
        *(_DWORD *)&v397[2] = v124;
        *(_WORD *)&v397[6] = 2114;
        *(void *)&v397[8] = v126;
        *(_WORD *)&v397[16] = 2050;
        *(void *)&v397[18] = v195;
        *(_WORD *)&v397[26] = 1026;
        *(_DWORD *)&v397[28] = v196;
        *(_WORD *)&v397[32] = 2050;
        *(double *)&v397[34] = v197;
        *(_WORD *)&v397[42] = 2050;
        *(double *)&v397[44] = v198;
        *(_WORD *)&v397[52] = 2050;
        *(double *)&v397[54] = v199;
        *(_WORD *)v398 = 2050;
        *(double *)&v398[2] = v200;
        _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_DOUBLE_TAP_STATUS sequenceNumber,%{public}u,id,%{public}u,detectionStatus,%{public}@,st atusTime,%{public}llu,tapInterval,%{public}d,meanAngleY,%{public}f,deltaAngleY,%{public}f,entropyConcha,%{publ ic}f,entropyTragus,%{public}f",  buf,  0x50u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v306 = qword_1019345C8;
        int v307 = *(unsigned __int8 *)(a2 + 12);
        int v308 = *(unsigned __int8 *)(a2 + 16);
        int v309 = *(char *)(a2 + 17) + 1;
        if (v309 >= 9) {
          v310 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(char *)(a2 + 17));
        }
        else {
          v310 = (NSString *)*(&off_10185F6D0 + v309);
        }
        uint64_t v345 = *(void *)(a2 + 18);
        int v346 = *(__int16 *)(a2 + 26);
        double v347 = *(float *)(a2 + 28);
        double v348 = *(float *)(a2 + 32);
        double v349 = *(float *)(a2 + 36);
        double v350 = *(float *)(a2 + 40);
        LODWORD(__p) = 67242242;
        HIDWORD(__p) = v307;
        __int16 v401 = 1026;
        *(_DWORD *)v402 = v308;
        *(_WORD *)&v402[4] = 2114;
        *(void *)&v402[6] = v310;
        *(_WORD *)&v402[14] = 2050;
        *(void *)&v402[16] = v345;
        *(_WORD *)&v402[24] = 1026;
        *(_DWORD *)&v402[26] = v346;
        *(_WORD *)&v402[30] = 2050;
        *(double *)&v402[32] = v347;
        *(_WORD *)&v402[40] = 2050;
        *(double *)&v402[42] = v348;
        *(_WORD *)&v402[50] = 2050;
        *(double *)&v402[52] = v349;
        *(_WORD *)v403 = 2050;
        *(double *)&v403[2] = v350;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v306,  0LL,  "[AccessoryMonitor] eEL_DOUBLE_TAP_STATUS sequenceNumber,%{public}u,id,%{public}u,detectionStatus,%{public}@,st atusTime,%{public}llu,tapInterval,%{public}d,meanAngleY,%{public}f,deltaAngleY,%{public}f,entropyConcha,%{publ ic}f,entropyTragus,%{public}f",  &__p,  80);
        v352 = (uint8_t *)v351;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v351);
        if (v352 != buf) {
          free(v352);
        }
      }

      uint64_t v10 = operator new(0x38uLL);
      uint64_t v201 = sub_101114E74((uint64_t)v10);
      *(void *)__int128 buf = v201;
      __int16 v202 = *(_WORD *)(v201 + 48);
      uint64_t v203 = *(void *)(a2 + 28);
      *(double *)(v201 + 8) = (double)*(unint64_t *)(a2 + 18);
      *(void *)(v201 + 16) = v203;
      *(void *)(v201 + 32) = *(void *)(a2 + 36);
      int v204 = *(char *)(a2 + 17);
      *(float *)(v201 + 44) = (float)*(__int16 *)(a2 + 26);
      int v205 = *(unsigned __int8 *)(a2 + 16);
      *(_WORD *)(v201 + 48) = v202 | 0x17F;
      *(_DWORD *)(v201 + 24) = v205;
      *(_DWORD *)(v201 + 28) = v204;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v206 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_209;
      }
      double v207 = CFAbsoluteTimeGetCurrent();
      sub_100B506FC(v206, (uint64_t *)buf, v207);
      goto LABEL_207;
    case 6:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v145 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v146 = *(unsigned __int8 *)(a2 + 12);
        int v147 = *(unsigned __int8 *)(a2 + 16);
        int v148 = *(char *)(a2 + 17) + 1;
        if (v148 >= 9) {
          int v149 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(char *)(a2 + 17));
        }
        else {
          int v149 = (NSString *)*(&off_10185F718 + v148);
        }
        uint64_t v208 = *(void *)(a2 + 18);
        double v209 = *(float *)(a2 + 26);
        double v210 = *(float *)(a2 + 30);
        *(_DWORD *)__int128 buf = 67241474;
        *(_DWORD *)&uint8_t buf[4] = v146;
        *(_WORD *)v397 = 1026;
        *(_DWORD *)&v397[2] = v147;
        *(_WORD *)&v397[6] = 2114;
        *(void *)&v397[8] = v149;
        *(_WORD *)&v397[16] = 2050;
        *(void *)&v397[18] = v208;
        *(_WORD *)&v397[26] = 2050;
        *(double *)&v397[28] = v209;
        *(_WORD *)&v397[36] = 2050;
        *(double *)&v397[38] = v210;
        _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_TAP_ACCEPT_STATUS sequenceNumber,%{public}u,id,%{public}u,acceptanceStatus,%{public}@,s tatusTime,%{public}llu,peakMagnitude,%{public}f,peakWidth,%{public}f",  buf,  0x36u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v311 = qword_1019345C8;
        int v312 = *(unsigned __int8 *)(a2 + 12);
        int v313 = *(unsigned __int8 *)(a2 + 16);
        int v314 = *(char *)(a2 + 17) + 1;
        if (v314 >= 9) {
          v315 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(char *)(a2 + 17));
        }
        else {
          v315 = (NSString *)*(&off_10185F718 + v314);
        }
        uint64_t v353 = *(void *)(a2 + 18);
        double v354 = *(float *)(a2 + 26);
        double v355 = *(float *)(a2 + 30);
        LODWORD(__p) = 67241474;
        HIDWORD(__p) = v312;
        __int16 v401 = 1026;
        *(_DWORD *)v402 = v313;
        *(_WORD *)&v402[4] = 2114;
        *(void *)&v402[6] = v315;
        *(_WORD *)&v402[14] = 2050;
        *(void *)&v402[16] = v353;
        *(_WORD *)&v402[24] = 2050;
        *(double *)&v402[26] = v354;
        *(_WORD *)&v402[34] = 2050;
        *(double *)&v402[36] = v355;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v311,  0LL,  "[AccessoryMonitor] eEL_TAP_ACCEPT_STATUS sequenceNumber,%{public}u,id,%{public}u,acceptanceStatus,%{public}@,s tatusTime,%{public}llu,peakMagnitude,%{public}f,peakWidth,%{public}f",  &__p,  54);
        v357 = (uint8_t *)v356;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v356);
        if (v357 != buf) {
          free(v357);
        }
      }

      uint64_t v10 = operator new(0x30uLL);
      uint64_t v211 = sub_101151E68((uint64_t)v10);
      *(void *)__int128 buf = v211;
      char v212 = *(_BYTE *)(v211 + 44);
      *(double *)(v211 + 16) = (double)*(unint64_t *)(a2 + 18);
      *(_DWORD *)(v211 + 36) = *(char *)(a2 + 17);
      *(_BYTE *)(v211 + 44) = v212 | 0x3A;
      *(int32x2_t *)(v211 + 28) = vrev64_s32(*(int32x2_t *)(a2 + 26));
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v213 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_209;
      }
      double v214 = CFAbsoluteTimeGetCurrent();
      sub_100B51020(v213, (uint64_t *)buf, v214);
      goto LABEL_207;
    case 7:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v94 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v95 = *(unsigned __int8 *)(a2 + 12);
        int v96 = *(_DWORD *)(a2 + 16);
        int v97 = *(_DWORD *)(a2 + 20);
        int v98 = *(__int16 *)(a2 + 24);
        int v99 = *(__int16 *)(a2 + 26);
        int v100 = *(_DWORD *)(a2 + 28);
        int v101 = *(_DWORD *)(a2 + 32);
        int v102 = *(_DWORD *)(a2 + 36);
        int v103 = *(_DWORD *)(a2 + 44);
        int v104 = *(_DWORD *)(a2 + 48);
        int v105 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)__int128 buf = 67243008;
        *(_DWORD *)&uint8_t buf[4] = v95;
        *(_WORD *)v397 = 1026;
        *(_DWORD *)&v397[2] = v96;
        *(_WORD *)&v397[6] = 1026;
        *(_DWORD *)&v397[8] = v97;
        *(_WORD *)&v397[12] = 1026;
        *(_DWORD *)&v397[14] = v98;
        *(_WORD *)&v397[18] = 1026;
        *(_DWORD *)&v397[20] = v99;
        *(_WORD *)&v397[24] = 1026;
        *(_DWORD *)&v397[26] = v100;
        *(_WORD *)&v397[30] = 1026;
        *(_DWORD *)&v397[32] = v101;
        *(_WORD *)&v397[36] = 1026;
        *(_DWORD *)&v397[38] = v102;
        *(_WORD *)&v397[42] = 1026;
        *(_DWORD *)&v397[44] = v101;
        *(_WORD *)&v397[48] = 1026;
        *(_DWORD *)&v397[50] = v103;
        *(_WORD *)&v397[54] = 1026;
        *(_DWORD *)&v397[56] = v104;
        *(_WORD *)&v397[60] = 1026;
        *(_DWORD *)v398 = v105;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_IED_CALIBRATION sequenceNumber,%{public}u,conchaGain,%{public}d,tragusGain,%{public}d,c onchaOffset,%{public}d,tragusOffset,%{public}d,conchaTempCalA,%{public}d,conchaTempCalB,%{public}d,tragusTempC alA,%{public}d,tragusTempCalB,%{public}d,conchaTempCalT0,%{public}d,tragusTempCalT0,%{public}d,isTempCalEnabled,%{public}u",  buf,  0x4Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        int v289 = *(unsigned __int8 *)(a2 + 12);
        int v290 = *(_DWORD *)(a2 + 16);
        int v291 = *(_DWORD *)(a2 + 20);
        int v292 = *(__int16 *)(a2 + 24);
        int v293 = *(__int16 *)(a2 + 26);
        int v294 = *(_DWORD *)(a2 + 28);
        int v295 = *(_DWORD *)(a2 + 32);
        int v296 = *(_DWORD *)(a2 + 36);
        int v297 = *(_DWORD *)(a2 + 44);
        int v298 = *(_DWORD *)(a2 + 48);
        int v299 = *(unsigned __int8 *)(a2 + 52);
        LODWORD(__p) = 67243008;
        HIDWORD(__p) = v289;
        __int16 v401 = 1026;
        *(_DWORD *)v402 = v290;
        *(_WORD *)&v402[4] = 1026;
        *(_DWORD *)&v402[6] = v291;
        *(_WORD *)&v402[10] = 1026;
        *(_DWORD *)&v402[12] = v292;
        *(_WORD *)&v402[16] = 1026;
        *(_DWORD *)&v402[18] = v293;
        *(_WORD *)&v402[22] = 1026;
        *(_DWORD *)&v402[24] = v294;
        *(_WORD *)&v402[28] = 1026;
        *(_DWORD *)&v402[30] = v295;
        *(_WORD *)&v402[34] = 1026;
        *(_DWORD *)&v402[36] = v296;
        *(_WORD *)&v402[40] = 1026;
        *(_DWORD *)&v402[42] = v295;
        *(_WORD *)&v402[46] = 1026;
        *(_DWORD *)&v402[48] = v297;
        *(_WORD *)&v402[52] = 1026;
        *(_DWORD *)&v402[54] = v298;
        *(_WORD *)&v402[58] = 1026;
        *(_DWORD *)v403 = v299;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryMonitor] eEL_IED_CALIBRATION sequenceNumber,%{public}u,conchaGain,%{public}d,tragusGain,%{public}d,c onchaOffset,%{public}d,tragusOffset,%{public}d,conchaTempCalA,%{public}d,conchaTempCalB,%{public}d,tragusTempC alA,%{public}d,tragusTempCalB,%{public}d,conchaTempCalT0,%{public}d,tragusTempCalT0,%{public}d,isTempCalEnabled,%{public}u",  &__p,  74);
        v301 = (uint8_t *)v300;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v300);
        if (v301 != buf) {
          free(v301);
        }
      }

      uint64_t v106 = operator new(0x48uLL);
      uint64_t v107 = sub_101102138((uint64_t)v106);
      *(void *)__int128 buf = v107;
      char v108 = *(_BYTE *)(v107 + 64);
      *(_DWORD *)(v107 + 32) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(v107 + 40) = *(__int16 *)(a2 + 24);
      *(_BYTE *)(v107 + 60) = *(_BYTE *)(a2 + 52) != 0;
      *(void *)(v107 + 48) = *(void *)(a2 + 28);
      int v109 = *(_DWORD *)(a2 + 44);
      *(_BYTE *)(v107 + 64) = v108 | 0xF5;
      *(_DWORD *)(v107 + 56) = v109;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v110 = qword_1019A1D08;
      if (qword_1019A1D08)
      {
        double v111 = CFAbsoluteTimeGetCurrent();
        sub_100B50660(v110, (uint64_t *)buf, v111);
      }

      int v112 = operator new(0x48uLL);
      uint64_t v113 = sub_101102138((uint64_t)v112);
      __n128 __p = (void *)v113;
      char v114 = *(_BYTE *)(v113 + 64);
      *(_DWORD *)(v113 + 32) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v113 + 40) = *(__int16 *)(a2 + 26);
      *(_BYTE *)(v113 + 60) = *(_BYTE *)(a2 + 52) != 0;
      *(void *)(v113 + 48) = *(void *)(a2 + 36);
      int v115 = *(_DWORD *)(a2 + 48);
      *(_BYTE *)(v113 + 64) = v114 | 0xF5;
      *(_DWORD *)(v113 + 56) = v115;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v116 = qword_1019A1D08;
      if (qword_1019A1D08)
      {
        double v117 = CFAbsoluteTimeGetCurrent();
        sub_100B50660(v116, (uint64_t *)&__p, v117);
        int v112 = __p;
        __n128 __p = 0LL;
        if (!v112) {
          goto LABEL_173;
        }
      }

      else
      {
        __n128 __p = 0LL;
      }

      (*(void (**)(void *))(*(void *)v112 + 8LL))(v112);
LABEL_173:
      uint64_t v144 = *(void **)buf;
      *(void *)__int128 buf = 0LL;
      if (v144) {
LABEL_174:
      }
        (*(void (**)(void *))(*(void *)v144 + 8LL))(v144);
      return;
    case 8:
      sub_1008CFB14( (uint64_t)"eEL_IED_STATUS",  (unsigned __int8 *)(a2 + 16),  *(unsigned __int8 *)(a2 + 8),  *(unsigned __int8 *)(a2 + 12));
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v92 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        return;
      }
LABEL_87:
      sub_1008D01BC((unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 8), buf);
      double v93 = CFAbsoluteTimeGetCurrent();
      sub_100B50BDC(v92, (uint64_t *)buf, v93);
      goto LABEL_173;
    case 9:
      sub_10000CE18((uint64_t)&__p);
      sub_10000CF44(&v402[6], (uint64_t)"concha", 6LL);
      for (uint64_t i = 17LL; i != 57; i += 2LL)
      {
        char v64 = sub_10000CF44(&v402[6], (uint64_t)",", 1LL);
        std::ostream::operator<<(v64, *(__int16 *)(a2 + i));
      }

      sub_10000CF44(&v402[6], (uint64_t)",tragus", 7LL);
      for (uint64_t j = 0LL; j != 40; j += 2LL)
      {
        uint64_t v66 = sub_10000CF44(&v402[6], (uint64_t)",", 1LL);
        std::ostream::operator<<(v66, *(__int16 *)(a2 + 57 + j));
      }

      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      __int16 v67 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v68 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v69 = *(unsigned __int8 *)(a2 + 16);
        int v70 = v69 >= 0xA
            ? +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16))
            : (NSString *)*(&off_10185F790 + (char)v69);
        std::stringbuf::str((std::stringbuf::string_type *)v378, (const std::stringbuf *)&v402[14]);
        __int128 v215 = v378[23] >= 0 ? v378 : *(_BYTE **)v378;
        int v216 = *(_DWORD *)(a2 + 97);
        int v217 = *(_DWORD *)(a2 + 101);
        int v218 = *(_DWORD *)(a2 + 105);
        int v219 = *(_DWORD *)(a2 + 109);
        int v220 = *(char *)(a2 + 113);
        int v221 = *(char *)(a2 + 114);
        *(_DWORD *)__int128 buf = 67242242;
        *(_DWORD *)&uint8_t buf[4] = v68;
        *(_WORD *)v397 = 2114;
        *(void *)&v397[2] = v70;
        *(_WORD *)&v397[10] = 2082;
        *(void *)&v397[12] = v215;
        *(_WORD *)&v397[20] = 1026;
        *(_DWORD *)&v397[22] = v216;
        *(_WORD *)&v397[26] = 1026;
        *(_DWORD *)&v397[28] = v217;
        *(_WORD *)&v397[32] = 1026;
        *(_DWORD *)&v397[34] = v218;
        *(_WORD *)&v397[38] = 1026;
        *(_DWORD *)&v397[40] = v219;
        *(_WORD *)&v397[44] = 1026;
        *(_DWORD *)&v397[46] = v220;
        *(_WORD *)&v397[50] = 1026;
        *(_DWORD *)&v397[52] = v221;
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_IED_BASELINING sequenceNumber,%{public}u,state,%{public}@,%{public}s,oldConchaOpenLidRe sp,%{public}d,oldTragusOpenLidResp,%{public}d,newConchaOpenLidResp,%{public}d,newTragusOpenLidResp,%{public}d, conchaMinAccepted,%{public}d,tragusMinAccepted,%{public}d",  buf,  0x40u);
        if ((v378[23] & 0x80000000) != 0) {
          operator delete(*(void **)v378);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v321 = qword_1019345C8;
        int v322 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v323 = *(unsigned __int8 *)(a2 + 16);
        if (v323 >= 0xA) {
          v324 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16));
        }
        else {
          v324 = (NSString *)*(&off_10185F790 + (char)v323);
        }
        std::stringbuf::str(&v395, (const std::stringbuf *)&v402[14]);
        if ((v395.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v358 = &v395;
        }
        else {
          v358 = (std::stringbuf::string_type *)v395.__r_.__value_.__r.__words[0];
        }
        int v359 = *(_DWORD *)(a2 + 97);
        int v360 = *(_DWORD *)(a2 + 101);
        int v361 = *(_DWORD *)(a2 + 105);
        int v362 = *(_DWORD *)(a2 + 109);
        int v363 = *(char *)(a2 + 113);
        int v364 = *(char *)(a2 + 114);
        *(_DWORD *)v378 = 67242242;
        *(_DWORD *)&v378[4] = v322;
        *(_WORD *)&v378[8] = 2114;
        *(void *)&v378[10] = v324;
        *(_WORD *)&v378[18] = 2082;
        *(void *)&v378[20] = v358;
        __int16 v379 = 1026;
        int v380 = v359;
        __int16 v381 = 1026;
        int v382 = v360;
        __int16 v383 = 1026;
        int v384 = v361;
        __int16 v385 = 1026;
        int v386 = v362;
        __int16 v387 = 1026;
        int v388 = v363;
        __int16 v389 = 1026;
        int v390 = v364;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v321,  0LL,  "[AccessoryMonitor] eEL_IED_BASELINING sequenceNumber,%{public}u,state,%{public}@,%{public}s,oldConchaOpenLidRe sp,%{public}d,oldTragusOpenLidResp,%{public}d,newConchaOpenLidResp,%{public}d,newTragusOpenLidResp,%{public}d, conchaMinAccepted,%{public}d,tragusMinAccepted,%{public}d",  v378,  64);
        v366 = v365;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v366);
      }

      int v222 = operator new(0x40uLL);
      sub_10109B4AC((uint64_t)v222);
      uint64_t v223 = 0LL;
      *(void *)v378 = v224;
      int v225 = *(unsigned __int8 *)(a2 + 16);
      *(_BYTE *)(v224 + 60) |= 2u;
      *(_DWORD *)(v224 + 52) = v225;
      v226 = (char **)(v224 + 24);
      do
      {
        sub_101103644((uint64_t)buf);
        float v227 = (float)*(__int16 *)(a2 + v223 + 17);
        float v228 = (float)*(__int16 *)(a2 + v223 + 57);
        v397[8] |= 3u;
        *(float *)v397 = v227;
        *(float *)&v397[4] = v228;
        sub_1008D03EC(v226, (uint64_t)buf);
        v223 += 2LL;
        PB::Base::~Base((PB::Base *)buf);
      }

      while (v223 != 40);
      int32x2_t v229 = *(int32x2_t *)(a2 + 97);
      uint64_t v230 = operator new(0x18uLL);
      double v231 = (float32x2_t *)sub_101103644((uint64_t)v230);
      v231[2].i8[0] |= 3u;
      v231[1] = vcvt_f32_s32(v229);
      uint64_t v232 = *((void *)v222 + 2);
      *((void *)v222 + 2) = v231;
      if (v232) {
        (*(void (**)(uint64_t))(*(void *)v232 + 8LL))(v232);
      }
      int32x2_t v233 = *(int32x2_t *)(a2 + 105);
      uint64_t v234 = operator new(0x18uLL);
      uint64_t v235 = (float32x2_t *)sub_101103644((uint64_t)v234);
      v235[2].i8[0] |= 3u;
      v235[1] = vcvt_f32_s32(v233);
      uint64_t v236 = *((void *)v222 + 1);
      *((void *)v222 + 1) = v235;
      if (v236) {
        (*(void (**)(uint64_t))(*(void *)v236 + 8LL))(v236);
      }
      char v237 = *((_BYTE *)v222 + 60);
      *((_BYTE *)v222 + 56) = *(_BYTE *)(a2 + 113) != 0;
      BOOL v238 = *(_BYTE *)(a2 + 114) != 0;
      *((_BYTE *)v222 + 60) = v237 | 0xC;
      *((_BYTE *)v222 + 57) = v238;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v239 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_243;
      }
      double v240 = CFAbsoluteTimeGetCurrent();
      sub_100B50A08(v239, (uint64_t *)v378, v240);
      goto LABEL_241;
    case 0xA:
      sub_10000CE18((uint64_t)&__p);
      sub_10000CF44(&v402[6], (uint64_t)"concha", 6LL);
      for (uint64_t k = 0LL; k != 30; k += 2LL)
      {
        int v151 = sub_10000CF44(&v402[6], (uint64_t)",", 1LL);
        std::ostream::operator<<(v151, *(__int16 *)(a2 + 17 + k));
      }

      sub_10000CF44(&v402[6], (uint64_t)",tragus", 7LL);
      for (uint64_t m = 0LL; m != 30; m += 2LL)
      {
        int v153 = sub_10000CF44(&v402[6], (uint64_t)",", 1LL);
        std::ostream::operator<<(v153, *(__int16 *)(a2 + 47 + m));
      }

      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v154 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v155 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v156 = *(unsigned __int8 *)(a2 + 16);
        uint64_t v157 = v156 >= 0xA
             ? +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16))
             : (NSString *)*(&off_10185F790 + (char)v156);
        std::stringbuf::str((std::stringbuf::string_type *)v378, (const std::stringbuf *)&v402[14]);
        int v241 = v378[23] >= 0 ? v378 : *(_BYTE **)v378;
        int v242 = *(_DWORD *)(a2 + 77);
        int v243 = *(_DWORD *)(a2 + 81);
        int v244 = *(_DWORD *)(a2 + 85);
        int v245 = *(_DWORD *)(a2 + 89);
        int v246 = *(unsigned __int8 *)(a2 + 93);
        int v247 = *(unsigned __int8 *)(a2 + 94);
        int v248 = *(unsigned __int8 *)(a2 + 95);
        int v249 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)__int128 buf = 67242754;
        *(_DWORD *)&uint8_t buf[4] = v155;
        *(_WORD *)v397 = 2114;
        *(void *)&v397[2] = v157;
        *(_WORD *)&v397[10] = 2082;
        *(void *)&v397[12] = v241;
        *(_WORD *)&v397[20] = 1026;
        *(_DWORD *)&v397[22] = v242;
        *(_WORD *)&v397[26] = 1026;
        *(_DWORD *)&v397[28] = v243;
        *(_WORD *)&v397[32] = 1026;
        *(_DWORD *)&v397[34] = v244;
        *(_WORD *)&v397[38] = 1026;
        *(_DWORD *)&v397[40] = v245;
        *(_WORD *)&v397[44] = 1026;
        *(_DWORD *)&v397[46] = v246;
        *(_WORD *)&v397[50] = 1026;
        *(_DWORD *)&v397[52] = v247;
        *(_WORD *)&v397[56] = 1026;
        *(_DWORD *)&v397[58] = v248;
        *(_WORD *)v398 = 1026;
        *(_DWORD *)&v398[2] = v249;
        _os_log_impl( (void *)&_mh_execute_header,  v154,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_IED_SENSOR_DROP sequenceNumber,%{public}u,state,%{public}@,%{public}s,xMean,%{public}d, yMean,%{public}d,xVariance,%{public}d,yVariance,%{public}d,conchaDropped,%{public}u,tragusDropped,%{public}u,c onchaRecovered,%{public}u,tragusRecovered,%{public}u",  buf,  0x4Cu);
        if ((v378[23] & 0x80000000) != 0) {
          operator delete(*(void **)v378);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v325 = qword_1019345C8;
        int v326 = *(unsigned __int8 *)(a2 + 12);
        unsigned int v327 = *(unsigned __int8 *)(a2 + 16);
        if (v327 >= 0xA) {
          v328 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *(unsigned __int8 *)(a2 + 16));
        }
        else {
          v328 = (NSString *)*(&off_10185F790 + (char)v327);
        }
        std::stringbuf::str(&v395, (const std::stringbuf *)&v402[14]);
        if ((v395.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v367 = &v395;
        }
        else {
          v367 = (std::stringbuf::string_type *)v395.__r_.__value_.__r.__words[0];
        }
        int v368 = *(_DWORD *)(a2 + 77);
        int v369 = *(_DWORD *)(a2 + 81);
        int v370 = *(_DWORD *)(a2 + 85);
        int v371 = *(_DWORD *)(a2 + 89);
        int v372 = *(unsigned __int8 *)(a2 + 93);
        int v373 = *(unsigned __int8 *)(a2 + 94);
        int v374 = *(unsigned __int8 *)(a2 + 95);
        int v375 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)v378 = 67242754;
        *(_DWORD *)&v378[4] = v326;
        *(_WORD *)&v378[8] = 2114;
        *(void *)&v378[10] = v328;
        *(_WORD *)&v378[18] = 2082;
        *(void *)&v378[20] = v367;
        __int16 v379 = 1026;
        int v380 = v368;
        __int16 v381 = 1026;
        int v382 = v369;
        __int16 v383 = 1026;
        int v384 = v370;
        __int16 v385 = 1026;
        int v386 = v371;
        __int16 v387 = 1026;
        int v388 = v372;
        __int16 v389 = 1026;
        int v390 = v373;
        __int16 v391 = 1026;
        int v392 = v374;
        __int16 v393 = 1026;
        int v394 = v375;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v325,  0LL,  "[AccessoryMonitor] eEL_IED_SENSOR_DROP sequenceNumber,%{public}u,state,%{public}@,%{public}s,xMean,%{public}d, yMean,%{public}d,xVariance,%{public}d,yVariance,%{public}d,conchaDropped,%{public}u,tragusDropped,%{public}u,c onchaRecovered,%{public}u,tragusRecovered,%{public}u",  v378,  76);
        v377 = v376;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v377);
      }

      int v222 = operator new(0x70uLL);
      sub_1010EA0E8((uint64_t)v222);
      uint64_t v250 = 0LL;
      *(void *)v378 = v251;
      int v252 = *(unsigned __int8 *)(a2 + 16);
      *(_BYTE *)(v251 + 104) |= 4u;
      *(_DWORD *)(v251 + 88) = v252;
      v253 = (char **)(v251 + 56);
      do
      {
        sub_101103644((uint64_t)buf);
        float v254 = (float)*(__int16 *)(a2 + v250 + 17);
        float v255 = (float)*(__int16 *)(a2 + v250 + 47);
        v397[8] |= 3u;
        *(float *)v397 = v254;
        *(float *)&v397[4] = v255;
        sub_1008D03EC(v253, (uint64_t)buf);
        v250 += 2LL;
        PB::Base::~Base((PB::Base *)buf);
      }

      while (v250 != 30);
      *(float32x2_t *)__int128 buf = vcvt_f32_s32(*(int32x2_t *)(a2 + 77));
      sub_10004C5F8((char *)v222 + 8, (char *)buf, (uint64_t)v397, 2uLL);
      *(float32x2_t *)__int128 buf = vcvt_f32_s32(*(int32x2_t *)(a2 + 85));
      sub_10004C5F8((char *)v222 + 32, (char *)buf, (uint64_t)v397, 2uLL);
      char v256 = *((_BYTE *)v222 + 104);
      int v257 = *(unsigned __int8 *)(a2 + 94);
      int v258 = *(unsigned __int8 *)(a2 + 95);
      *((_DWORD *)v222 + 20) = *(unsigned __int8 *)(a2 + 93);
      *((_DWORD *)v222 + 21) = v258;
      int v259 = *(unsigned __int8 *)(a2 + 96);
      *((_BYTE *)v222 + 104) = v256 | 0x33;
      *((_DWORD *)v222 + 24) = v257;
      *((_DWORD *)v222 + 25) = v259;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v260 = qword_1019A1D08;
      if (qword_1019A1D08)
      {
        double v261 = CFAbsoluteTimeGetCurrent();
        sub_100B5048C(v260, (uint64_t *)v378, v261);
LABEL_241:
        int v222 = *(void **)v378;
        *(void *)v378 = 0LL;
        if (!v222)
        {
LABEL_245:
          *(void **)((char *)&__p
          *(void *)&v402[6] = v262;
          if (v405 < 0) {
            operator delete(v404);
          }
          std::streambuf::~streambuf(&v402[14]);
          std::ios::~ios(v406);
          return;
        }
      }

      else
      {
LABEL_243:
        *(void *)v378 = 0LL;
      }

      (*(void (**)(void *))(*(void *)v222 + 8LL))(v222);
      goto LABEL_245;
    case 0xB:
      else {
        uint64_t v16 = *(unsigned __int8 *)(a2 + 16);
      }
      sub_10000CE18((uint64_t)&__p);
      sub_10000CF44(&v402[6], (uint64_t)"history", 7LL);
      if ((_DWORD)v16)
      {
        CFAbsoluteTime v17 = (void *)(a2 + 20);
        do
        {
          char v18 = operator new(0x28uLL);
          sub_10109ED20(v18);
          *(void *)__int128 buf = v19;
          int v20 = *((unsigned __int8 *)v17 - 3);
          char v21 = *(_BYTE *)(v19 + 32);
          *(_DWORD *)(v19 + 16) = *((unsigned __int8 *)v17 - 2);
          *(_DWORD *)(v19 + 20) = v20;
          *(_DWORD *)(v19 + 28) = *((unsigned __int8 *)v17 - 1);
          double v22 = (double)(unint64_t)*v17;
          *(_BYTE *)(v19 + 32) = v21 | 0x17;
          *(double *)(v19 + 8) = v22;
          if (qword_1019A1D00 != -1) {
            dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
          }
          uint64_t v23 = qword_1019A1D08;
          if (qword_1019A1D08)
          {
            double v24 = CFAbsoluteTimeGetCurrent();
            sub_100B50B40(v23, (uint64_t *)buf, v24);
          }

          sub_10000CF44(&v402[6], (uint64_t)",(", 2LL);
          uint64_t v25 = sub_10000CF44(&v402[6], (uint64_t)"f:", 2LL);
          unsigned int v26 = *((unsigned __int8 *)v17 - 3);
          if (v26 >= 0xA) {
            uint64_t v27 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *((unsigned __int8 *)v17 - 3));
          }
          else {
            uint64_t v27 = (NSString *)*(&off_10185F790 + (char)v26);
          }
          uint64_t v28 = -[NSString UTF8String](v27, "UTF8String");
          size_t v29 = strlen(v28);
          sub_10000CF44(v25, (uint64_t)v28, v29);
          uint64_t v30 = sub_10000CF44(&v402[6], (uint64_t)" e:", 3LL);
          unsigned int v31 = *((unsigned __int8 *)v17 - 2);
          if (v31 >= 6) {
            __int128 v32 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *((unsigned __int8 *)v17 - 2));
          }
          else {
            __int128 v32 = (NSString *)*(&off_10185F760 + (char)v31);
          }
          __int128 v33 = -[NSString UTF8String](v32, "UTF8String");
          size_t v34 = strlen(v33);
          sub_10000CF44(v30, (uint64_t)v33, v34);
          uint64_t v35 = sub_10000CF44(&v402[6], (uint64_t)" to:", 4LL);
          unsigned int v36 = *((unsigned __int8 *)v17 - 1);
          if (v36 >= 0xA) {
            uint64_t v37 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  *((unsigned __int8 *)v17 - 1));
          }
          else {
            uint64_t v37 = (NSString *)*(&off_10185F790 + (char)v36);
          }
          uint64_t v38 = -[NSString UTF8String](v37, "UTF8String");
          size_t v39 = strlen(v38);
          sub_10000CF44(v35, (uint64_t)v38, v39);
          int v40 = sub_10000CF44(&v402[6], (uint64_t)" ts:", 4LL);
          std::ostream::operator<<(v40, *v17);
          sub_10000CF44(&v402[6], (uint64_t)")", 1LL);
          int v41 = *(void **)buf;
          *(void *)__int128 buf = 0LL;
          if (v41) {
            (*(void (**)(void *))(*(void *)v41 + 8LL))(v41);
          }
          CFAbsoluteTime v17 = (void *)((char *)v17 + 11);
          --v16;
        }

        while (v16);
      }

      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v158 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v159 = *(unsigned __int8 *)(a2 + 12);
        std::stringbuf::str((std::stringbuf::string_type *)buf, (const std::stringbuf *)&v402[14]);
        uint64_t v160 = v397[15] >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v378 = 67240450;
        *(_DWORD *)&v378[4] = v159;
        *(_WORD *)&v378[8] = 2082;
        *(void *)&v378[10] = v160;
        _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] sequenceNumber,%{public}u,eEL_IED_FSM_TRANSITION_HISTORY %{public}s",  v378,  0x12u);
        if ((v397[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v161 = qword_1019345C8;
        int v162 = *(unsigned __int8 *)(a2 + 12);
        std::stringbuf::str((std::stringbuf::string_type *)v378, (const std::stringbuf *)&v402[14]);
        if (v378[23] >= 0) {
          uint64_t v163 = v378;
        }
        else {
          uint64_t v163 = *(_BYTE **)v378;
        }
        LODWORD(v395.__r_.__value_.__l.__data_) = 67240450;
        HIDWORD(v395.__r_.__value_.__r.__words[0]) = v162;
        LOWORD(v395.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v395.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v163;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v161,  0LL,  "[AccessoryMonitor] sequenceNumber,%{public}u,eEL_IED_FSM_TRANSITION_HISTORY %{public}s",  &v395,  18);
        uint64_t v165 = v164;
        if ((v378[23] & 0x80000000) != 0) {
          operator delete(*(void **)v378);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v165);
      }

      goto LABEL_245;
    case 0xC:
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      int v46 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        int v47 = *(unsigned __int8 *)(a2 + 12);
        int v48 = *(unsigned __int8 *)(a2 + 16);
        int v49 = *(unsigned __int8 *)(a2 + 17);
        int v50 = *(unsigned __int16 *)(a2 + 18);
        int v51 = *(_DWORD *)(a2 + 20);
        int v52 = *(_DWORD *)(a2 + 24);
        int v53 = *(_DWORD *)(a2 + 28);
        uint64_t v54 = *(void *)(a2 + 32);
        *(_DWORD *)__int128 buf = 67241984;
        *(_DWORD *)&uint8_t buf[4] = v47;
        *(_WORD *)v397 = 1026;
        *(_DWORD *)&v397[2] = v48;
        *(_WORD *)&v397[6] = 1026;
        *(_DWORD *)&v397[8] = v49;
        *(_WORD *)&v397[12] = 1026;
        *(_DWORD *)&v397[14] = v50;
        *(_WORD *)&v397[18] = 1026;
        *(_DWORD *)&v397[20] = v51;
        *(_WORD *)&v397[24] = 1026;
        *(_DWORD *)&v397[26] = v52;
        *(_WORD *)&v397[30] = 1026;
        *(_DWORD *)&v397[32] = v53;
        *(_WORD *)&v397[36] = 2050;
        *(void *)&v397[38] = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_TEMP_COMP sequenceNumber,%{public}u,isValid,%{public}u,pwrState,%{public}u,prescalar,%{ public}d,wdtPeriod_ms,%{public}d,conchaDegreeC,%{public}d,tragusDegreeC,%{public}d,timestamp,%{public}llu",  buf,  0x36u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        int v263 = *(unsigned __int8 *)(a2 + 12);
        int v264 = *(unsigned __int8 *)(a2 + 16);
        int v265 = *(unsigned __int8 *)(a2 + 17);
        int v266 = *(unsigned __int16 *)(a2 + 18);
        int v267 = *(_DWORD *)(a2 + 20);
        int v268 = *(_DWORD *)(a2 + 24);
        int v269 = *(_DWORD *)(a2 + 28);
        uint64_t v270 = *(void *)(a2 + 32);
        LODWORD(__p) = 67241984;
        HIDWORD(__p) = v263;
        __int16 v401 = 1026;
        *(_DWORD *)v402 = v264;
        *(_WORD *)&v402[4] = 1026;
        *(_DWORD *)&v402[6] = v265;
        *(_WORD *)&v402[10] = 1026;
        *(_DWORD *)&v402[12] = v266;
        *(_WORD *)&v402[16] = 1026;
        *(_DWORD *)&v402[18] = v267;
        *(_WORD *)&v402[22] = 1026;
        *(_DWORD *)&v402[24] = v268;
        *(_WORD *)&v402[28] = 1026;
        *(_DWORD *)&v402[30] = v269;
        *(_WORD *)&v402[34] = 2050;
        *(void *)&v402[36] = v270;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345C8,  0LL,  "[AccessoryMonitor] eEL_TEMP_COMP sequenceNumber,%{public}u,isValid,%{public}u,pwrState,%{public}u,prescalar,%{ public}d,wdtPeriod_ms,%{public}d,conchaDegreeC,%{public}d,tragusDegreeC,%{public}d,timestamp,%{public}llu",  &__p,  54);
        v272 = (uint8_t *)v271;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)",  "%s\n",  v271);
        if (v272 != buf) {
          free(v272);
        }
      }

      uint64_t v10 = operator new(0x30uLL);
      uint64_t v55 = sub_1010EB0C8((uint64_t)v10);
      *(void *)__int128 buf = v55;
      double v56 = (double)*(unint64_t *)(a2 + 32);
      *(_BYTE *)(v55 + 40) = *(_BYTE *)(a2 + 16) != 0;
      int v57 = *(unsigned __int8 *)(a2 + 17);
      *(_DWORD *)(v55 + 24) = *(unsigned __int16 *)(a2 + 18);
      *(_DWORD *)(v55 + 28) = v57;
      int v58 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(v55 + 16) = *(_DWORD *)(a2 + 24);
      char v59 = *(_BYTE *)(v55 + 44);
      *(double *)(v55 + 8) = v56;
      int v60 = *(_DWORD *)(a2 + 28);
      *(_BYTE *)(v55 + 44) = v59 | 0xFB;
      *(_DWORD *)(v55 + 32) = v60;
      *(_DWORD *)(v55 + 36) = v58;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v61 = qword_1019A1D08;
      if (!qword_1019A1D08)
      {
LABEL_209:
        *(void *)__int128 buf = 0LL;
        goto LABEL_210;
      }

      double v62 = CFAbsoluteTimeGetCurrent();
      sub_100B50528(v61, (uint64_t *)buf, v62);
LABEL_207:
      uint64_t v10 = *(void **)buf;
      *(void *)__int128 buf = 0LL;
      if (!v10) {
        return;
      }
      goto LABEL_210;
    case 0xD:
      int v127 = *(unsigned __int8 *)(a2 + 12);
      sub_10000CE18((uint64_t)&__p);
      sub_10000CF44(&v402[6], (uint64_t)"conchaSlow", 10LL);
      for (uint64_t n = 0LL; n != 30; n += 2LL)
      {
        uint64_t v129 = sub_10000CF44(&v402[6], (uint64_t)",", 1LL);
        std::ostream::operator<<(v129, *(__int16 *)(a2 + 16 + n));
      }

      sub_10000CF44(&v402[6], (uint64_t)",tragusSlow", 11LL);
      for (iuint64_t i = 0LL; ii != 30; ii += 2LL)
      {
        uint64_t v131 = sub_10000CF44(&v402[6], (uint64_t)",", 1LL);
        std::ostream::operator<<(v131, *(__int16 *)(a2 + 46 + ii));
      }

      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10185EA30);
      }
      uint64_t v132 = (os_log_s *)qword_1019345C8;
      if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str((std::stringbuf::string_type *)v378, (const std::stringbuf *)&v402[14]);
        int v133 = v378[23] >= 0 ? v378 : *(_BYTE **)v378;
        int v134 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)__int128 buf = 67240706;
        *(_DWORD *)&uint8_t buf[4] = v127;
        *(_WORD *)v397 = 2082;
        *(void *)&v397[2] = v133;
        *(_WORD *)&v397[10] = 1026;
        *(_DWORD *)&v397[12] = v134;
        _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] eEL_IED_ADDITIONAL_STATE sequenceNumber,%{public}u,%{public}s,lastSampleId,%{public}d",  buf,  0x18u);
        if ((v378[23] & 0x80000000) != 0) {
          operator delete(*(void **)v378);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345C0 != -1) {
          dispatch_once(&qword_1019345C0, &stru_10185EA30);
        }
        uint64_t v316 = qword_1019345C8;
        std::stringbuf::str(&v395, (const std::stringbuf *)&v402[14]);
        if ((v395.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v317 = &v395;
        }
        else {
          v317 = (std::stringbuf::string_type *)v395.__r_.__value_.__r.__words[0];
        }
        int v318 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)v378 = 67240706;
        *(_DWORD *)&v378[4] = v127;
        *(_WORD *)&v378[8] = 2082;
        *(void *)&v378[10] = v317;
        *(_WORD *)&v378[18] = 1026;
        *(_DWORD *)&v378[20] = v318;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v316,  0LL,  "[AccessoryMonitor] eEL_IED_ADDITIONAL_STATE sequenceNumber,%{public}u,%{public}s,lastSampleId,%{public}d",  v378,  24);
        v320 = v319;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void (anonymous namespace)::logIEDAdditionalState(const sLog_IEDAdditionalState_t &, uint8_t)",  "%s\n",  v320);
      }

      *(void **)((char *)&__p
      *(void *)&v402[6] = v135;
      if (v405 < 0) {
        operator delete(v404);
      }
      std::streambuf::~streambuf(&v402[14]);
      std::ios::~ios(v406);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v136 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        return;
      }
      uint64_t v137 = operator new(0x28uLL);
      uint64_t v138 = 0LL;
      __n128 __p = (void *)sub_10109AD68((uint64_t)v137);
      uint64_t v139 = (char **)((char *)__p + 8);
      do
      {
        sub_101103644((uint64_t)buf);
        float v140 = (float)*(__int16 *)(a2 + v138 + 16);
        float v141 = (float)*(__int16 *)(a2 + v138 + 46);
        v397[8] |= 3u;
        *(float *)v397 = v140;
        *(float *)&v397[4] = v141;
        sub_1008D03EC(v139, (uint64_t)buf);
        PB::Base::~Base((PB::Base *)buf);
        v138 += 2LL;
      }

      while (v138 != 30);
      int v142 = *(_DWORD *)(a2 + 76);
      v137[36] |= 1u;
      *((_DWORD *)v137 + 8) = v142;
      double v143 = CFAbsoluteTimeGetCurrent();
      sub_100B5096C(v136, (uint64_t *)&__p, v143);
      uint64_t v144 = __p;
      __n128 __p = 0LL;
      if (!v144) {
        return;
      }
      goto LABEL_174;
    case 0xE:
      uint64_t v10 = operator new(0x10uLL);
      uint64_t v11 = 0LL;
      *(void *)v378 = sub_1010E591C(v10);
      char v399 = 0;
      uint64_t v12 = (unsigned __int8 *)(a2 + 16);
      do
      {
        int v13 = *v12++;
        snprintf((char *)&buf[v11], 0xF1uLL, "%02x", v13);
        v11 += 2LL;
      }

      while (v11 != 240);
      sub_1010DDBC0(&__p, (char *)buf);
      sub_1007A71E8((uint64_t)v10, (__n128 *)&__p);
      if ((v402[13] & 0x80000000) != 0) {
        operator delete(__p);
      }
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v14 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_170;
      }
      double v15 = CFAbsoluteTimeGetCurrent();
      sub_100B503F0(v14, (uint64_t *)v378, v15);
      goto LABEL_82;
    case 0xF:
      uint64_t v10 = operator new(0x10uLL);
      uint64_t v87 = 0LL;
      *(void *)v378 = sub_1010E52B8(v10);
      v397[24] = 0;
      uint64_t v88 = (unsigned __int8 *)(a2 + 16);
      do
      {
        int v89 = *v88++;
        snprintf((char *)&buf[v87], 0xF1uLL, "%02x", v89);
        v87 += 2LL;
      }

      while (v87 != 32);
      sub_1010DDBC0(&__p, (char *)buf);
      sub_1007A71E8((uint64_t)v10, (__n128 *)&__p);
      if ((v402[13] & 0x80000000) != 0) {
        operator delete(__p);
      }
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v90 = qword_1019A1D08;
      if (!qword_1019A1D08)
      {
LABEL_170:
        *(void *)v378 = 0LL;
LABEL_210:
        (*(void (**)(void *))(*v10 + 8LL))(v10);
        return;
      }

      double v91 = CFAbsoluteTimeGetCurrent();
      sub_100B50354(v90, (uint64_t *)v378, v91);
LABEL_82:
      uint64_t v10 = *(void **)v378;
      *(void *)v378 = 0LL;
      if (v10) {
        goto LABEL_210;
      }
      return;
    default:
      return;
  }

void sub_1008CF8D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1008CFB14(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  for (uint64_t i = 1LL; i != 31; i += 2LL)
  {
    uint64_t v9 = sub_10000CF44(&v50, (uint64_t)",", 1LL);
    std::ostream::operator<<(v9, *(__int16 *)&a2[i]);
  }

  sub_10000CF44(&v50, (uint64_t)",tragus", 7LL);
  for (uint64_t j = 31LL; j != 61; j += 2LL)
  {
    uint64_t v11 = sub_10000CF44(&v50, (uint64_t)",", 1LL);
    std::ostream::operator<<(v11, *(__int16 *)&a2[j]);
  }

  if (a3 > 0xE)
  {
    sub_10000CF44(&v50, (uint64_t)",concha temperature", 19LL);
    for (uint64_t k = 0LL; k != 30; k += 2LL)
    {
      int v13 = sub_10000CF44(&v50, (uint64_t)",", 1LL);
      std::ostream::operator<<(v13, *(__int16 *)&a2[k + 109]);
    }

    sub_10000CF44(&v50, (uint64_t)",tragus temperature", 19LL);
    for (uint64_t m = 0LL; m != 30; m += 2LL)
    {
      double v15 = sub_10000CF44(&v50, (uint64_t)",", 1LL);
      std::ostream::operator<<(v15, *(__int16 *)&a2[m + 139]);
    }
  }

  sub_10000CF44(&v50, (uint64_t)",tip", 4LL);
  for (uint64_t n = 61LL; n != 76; ++n)
  {
    CFAbsoluteTime v17 = sub_10000CF44(&v50, (uint64_t)",", 1LL);
    std::to_string((std::string *)v68, (char)a2[n]);
    if (v68[23] >= 0) {
      char v18 = v68;
    }
    else {
      char v18 = *(_BYTE **)v68;
    }
    if (v68[23] >= 0) {
      uint64_t v19 = v68[23];
    }
    else {
      uint64_t v19 = *(void *)&v68[8];
    }
    sub_10000CF44(v17, (uint64_t)v18, v19);
    if ((v68[23] & 0x80000000) != 0) {
      operator delete(*(void **)v68);
    }
  }

  sub_10000CF44(&v50, (uint64_t)",tilt", 5LL);
  for (iuint64_t i = 76LL; ii != 91; ++ii)
  {
    char v21 = sub_10000CF44(&v50, (uint64_t)",", 1LL);
    std::to_string((std::string *)v68, (char)a2[ii]);
    if (v68[23] >= 0) {
      double v22 = v68;
    }
    else {
      double v22 = *(_BYTE **)v68;
    }
    if (v68[23] >= 0) {
      uint64_t v23 = v68[23];
    }
    else {
      uint64_t v23 = *(void *)&v68[8];
    }
    sub_10000CF44(v21, (uint64_t)v22, v23);
    if ((v68[23] & 0x80000000) != 0) {
      operator delete(*(void **)v68);
    }
  }

  if (qword_1019345C0 != -1) {
    dispatch_once(&qword_1019345C0, &stru_10185EA30);
  }
  double v24 = (os_log_s *)qword_1019345C8;
  if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v25 = *a2;
    unsigned int v26 = v25 >= 0xA
        ? +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"(unknown: %i)", *a2)
        : (NSString *)*(&off_10185F790 + (char)v25);
    std::stringbuf::str((std::stringbuf::string_type *)v53, &v51);
    uint64_t v27 = v53[23] >= 0 ? v53 : *(_BYTE **)v53;
    double v28 = *(float *)(a2 + 91);
    double v29 = *(float *)(a2 + 95);
    double v30 = *(float *)(a2 + 99);
    double v31 = *(float *)(a2 + 103);
    int v32 = (char)a2[107];
    int v33 = (char)a2[108];
    *(_DWORD *)int v68 = 136448514;
    *(void *)&v68[4] = a1;
    *(_WORD *)&v68[12] = 1026;
    *(_DWORD *)&v68[14] = a4;
    *(_WORD *)&v68[18] = 2114;
    *(void *)&v68[20] = v26;
    __int16 v69 = 2082;
    int v70 = v27;
    __int16 v71 = 2050;
    double v72 = v28;
    __int16 v73 = 2050;
    double v74 = v29;
    __int16 v75 = 2050;
    double v76 = v30;
    __int16 v77 = 2050;
    double v78 = v31;
    __int16 v79 = 1026;
    int v80 = v32;
    __int16 v81 = 1026;
    int v82 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[AccessoryMonitor] %{public}s sequenceNumber,%{public}u,state,%{public}@,%{public}s,conchaRunningMin,%{public}f,tr agusRunningMin,%{public}f,conchaBaseline,%{public}f,tragusBaseline,%{public}f,runningMinAccepted,%{public}d,ringBu fferUpdated,%{public}d",  v68,  0x5Au);
    if ((v53[23] & 0x80000000) != 0) {
      operator delete(*(void **)v53);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v68, 0x65CuLL);
    if (qword_1019345C0 != -1) {
      dispatch_once(&qword_1019345C0, &stru_10185EA30);
    }
    uint64_t v36 = qword_1019345C8;
    unsigned int v37 = *a2;
    if (v37 >= 0xA) {
      uint64_t v38 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"(unknown: %i)", *a2);
    }
    else {
      uint64_t v38 = (NSString *)*(&off_10185F790 + (char)v37);
    }
    std::stringbuf::str(&v48, &v51);
    if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v39 = &v48;
    }
    else {
      size_t v39 = (std::stringbuf::string_type *)v48.__r_.__value_.__r.__words[0];
    }
    double v40 = *(float *)(a2 + 91);
    double v41 = *(float *)(a2 + 95);
    double v42 = *(float *)(a2 + 99);
    double v43 = *(float *)(a2 + 103);
    int v44 = (char)a2[107];
    int v45 = (char)a2[108];
    *(_DWORD *)int v53 = 136448514;
    *(void *)&v53[4] = a1;
    *(_WORD *)&v53[12] = 1026;
    *(_DWORD *)&v53[14] = a4;
    *(_WORD *)&v53[18] = 2114;
    *(void *)&v53[20] = v38;
    __int16 v54 = 2082;
    uint64_t v55 = v39;
    __int16 v56 = 2050;
    double v57 = v40;
    __int16 v58 = 2050;
    double v59 = v41;
    __int16 v60 = 2050;
    double v61 = v42;
    __int16 v62 = 2050;
    double v63 = v43;
    __int16 v64 = 1026;
    int v65 = v44;
    __int16 v66 = 1026;
    int v67 = v45;
    _os_log_send_and_compose_impl( 2LL,  0LL,  v68,  1628LL,  &_mh_execute_header,  v36,  0LL,  "[AccessoryMonitor] %{public}s sequenceNumber,%{public}u,state,%{public}@,%{public}s,conchaRunningMin,%{public}f,tr agusRunningMin,%{public}f,conchaBaseline,%{public}f,tragusBaseline,%{public}f,runningMinAccepted,%{public}d,ringBu fferUpdated,%{public}d",  v53,  90);
    int v47 = v46;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void (anonymous namespace)::logIEDData(const char *, const _sLog_IEDData_t &, uint8_t, uint8_t)",  "%s\n",  v47);
    if (v47 != v68) {
      free(v47);
    }
  }

  *(void *)((char *)v49
  uint64_t v50 = v34;
  std::streambuf::~streambuf(&v51);
  return std::ios::~ios(&v52);
}

void sub_1008D0150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1008D01BC(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  int v6 = operator new(0x88uLL);
  sub_10109F4E8((uint64_t)v6);
  uint64_t v7 = 0LL;
  *a3 = v8;
  int v9 = *a1;
  *(_BYTE *)(v8 + 132) |= 2u;
  *(_DWORD *)(v8 + 124) = v9;
  uint64_t v10 = (char **)(v8 + 72);
  do
  {
    sub_101103644((uint64_t)v26);
    float v11 = (float)*(__int16 *)&a1[v7 + 1];
    float v12 = (float)*(__int16 *)&a1[v7 + 31];
    v29 |= 3u;
    float v27 = v11;
    float v28 = v12;
    sub_1008D03EC(v10, (uint64_t)v26);
    v7 += 2LL;
    PB::Base::~Base((PB::Base *)v26);
  }

  while (v7 != 30);
  sub_1008D47D8((void *)v6 + 4, (char *)a1 + 61, (char *)a1 + 76, 0xFuLL);
  sub_1008D47D8((void *)v6 + 1, (char *)a1 + 76, (char *)a1 + 91, 0xFuLL);
  uint64_t v13 = *(void *)(a1 + 91);
  uint64_t v14 = operator new(0x18uLL);
  uint64_t v15 = sub_101103644((uint64_t)v14);
  *(_BYTE *)(v15 + 16) |= 3u;
  *(void *)(v15 + 8) = v13;
  uint64_t v16 = *((void *)v6 + 8);
  *((void *)v6 + 8) = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 99);
  char v18 = operator new(0x18uLL);
  uint64_t v19 = sub_101103644((uint64_t)v18);
  *(_BYTE *)(v19 + 16) |= 3u;
  *(void *)(v19 + 8) = v17;
  uint64_t v20 = *((void *)v6 + 7);
  *((void *)v6 + 7) = v19;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  char v21 = *((_BYTE *)v6 + 132);
  *((_BYTE *)v6 + 129) = a1[107] != 0;
  BOOL v22 = a1[108] != 0;
  *((_BYTE *)v6 + 132) = v21 | 0xC;
  *((_BYTE *)v6 + 128) = v22;
  if (a2 >= 0xF)
  {
    for (uint64_t i = 0LL; i != 30; i += 2LL)
    {
      sub_101103958((uint64_t)v26);
      LODWORD(v24) = *(__int16 *)&a1[i + 109];
      LODWORD(v25) = *(__int16 *)&a1[i + 139];
      v29 |= 3u;
      float v27 = v24;
      float v28 = v25;
      sub_1008D4698((char **)v6 + 12, (uint64_t)v26);
      PB::Base::~Base((PB::Base *)v26);
    }
  }

void sub_1008D03A4(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1008D03EC(char **a1, uint64_t a2)
{
  int v4 = operator new(0x18uLL);
  sub_101103670((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    float v24 = a1 + 2;
    if (v12) {
      uint64_t v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)uint64_t v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      uint64_t v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1008D0510(_Unwind_Exception *a1)
{
}

void sub_1008D052C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    int v4 = (unsigned __int8 *)(a2 + 16);
    do
    {
      sub_101125260(v19);
      sub_101138CA0(v19);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v22 |= 1u;
      CFAbsoluteTime v21 = Current;
      uint64_t v6 = v20;
      *(float *)&CFAbsoluteTime Current = (float)*((__int16 *)v4 + 2);
      *(_WORD *)(v20 + 56) |= 4u;
      *(_DWORD *)(v6 + 24) = LODWORD(Current);
      uint64_t v7 = v20;
      *(float *)&CFAbsoluteTime Current = (float)*((__int16 *)v4 + 1);
      *(_WORD *)(v20 + 56) |= 0x20u;
      *(_DWORD *)(v7 + 36) = LODWORD(Current);
      uint64_t v8 = v20;
      *(float *)&CFAbsoluteTime Current = (float)*((__int16 *)v4 + 3);
      *(_WORD *)(v20 + 56) |= 0x200u;
      *(_DWORD *)(v8 + 52) = LODWORD(Current);
      uint64_t v9 = v20;
      uint64_t v10 = *((void *)v4 - 2);
      *(_WORD *)(v20 + 56) |= 2u;
      *(void *)(v9 + 16) = v10;
      uint64_t v11 = v20;
      int v12 = v4[1];
      *(_WORD *)(v20 + 56) |= 0x100u;
      *(_DWORD *)(v11 + 48) = v12;
      uint64_t v13 = v20;
      int v14 = *((unsigned __int16 *)v4 + 4);
      *(_WORD *)(v20 + 56) |= 0x80u;
      *(_DWORD *)(v13 + 44) = v14;
      uint64_t v15 = v20;
      int v16 = *v4;
      *(_WORD *)(v20 + 56) |= 0x40u;
      *(_DWORD *)(v15 + 40) = v16;
      uint64_t v17 = v20;
      uint64_t v18 = *((void *)v4 - 1);
      *(_WORD *)(v20 + 56) |= 1u;
      *(void *)(v17 + 8) = v18;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v19);
      }
      sub_101127D00((PB::Base *)v19);
      v4 += 32;
      --v3;
    }

    while (v3);
  }

void sub_1008D06B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_1008D06CC(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void ***)(a1 + 24);
  if (!v3)
  {
    uint64_t v3 = (void **)operator new(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *uint64_t v3 = 0LL;
    *(void *)(a1 + 24) = v3;
  }

  __n128 result = *a2;
  v3[2] = (void *)a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

__n128 sub_1008D073C(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void ***)(a1 + 40);
  if (!v3)
  {
    uint64_t v3 = (void **)operator new(0x18uLL);
    v3[1] = 0LL;
    v3[2] = 0LL;
    *uint64_t v3 = 0LL;
    *(void *)(a1 + 40) = v3;
  }

  __n128 result = *a2;
  v3[2] = (void *)a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void sub_1008D07AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    int v4 = (uint64_t *)(a2 + 24);
    do
    {
      sub_101125260(v16);
      sub_101138C4C(v16);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v19 |= 1u;
      CFAbsoluteTime v18 = Current;
      uint64_t v6 = v17;
      int v7 = *((unsigned __int16 *)v4 + 4);
      *((_BYTE *)v17 + 36) |= 4u;
      *((_DWORD *)v6 + 7) = v7;
      uint64_t v8 = v17;
      LODWORD(Current) = *((_DWORD *)v4 + 3);
      *((_BYTE *)v17 + 36) |= 8u;
      *((_DWORD *)v8 + 8) = LODWORD(Current);
      sub_1010E5264(v17);
      uint64_t v9 = v17[1];
      uint64_t v10 = *(v4 - 3);
      *(_WORD *)(v9 + 44) |= 1u;
      *(void *)(v9 + 8) = v10;
      uint64_t v11 = v17[1];
      LODWORD(v10) = *((_DWORD *)v4 - 4);
      *(_WORD *)(v11 + 44) |= 0x10u;
      *(_DWORD *)(v11 + 28) = v10;
      uint64_t v12 = v17[1];
      LODWORD(v10) = *((_DWORD *)v4 - 3);
      *(_WORD *)(v12 + 44) |= 0x20u;
      *(_DWORD *)(v12 + 32) = v10;
      uint64_t v13 = v17[1];
      LODWORD(v10) = *((_DWORD *)v4 - 2);
      *(_WORD *)(v13 + 44) |= 0x40u;
      *(_DWORD *)(v13 + 36) = v10;
      int v14 = v17;
      uint64_t v15 = *v4;
      *((_BYTE *)v17 + 36) |= 1u;
      void v14[2] = v15;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v16);
      }
      sub_101127D00((PB::Base *)v16);
      v4 += 5;
      --v3;
    }

    while (v3);
  }

void sub_1008D0928(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008D0940(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    int v4 = (unint64_t *)(a2 + 16);
    do
    {
      sub_101125260(v12);
      sub_10113A29C(v12);
      uint64_t v5 = v13;
      uint64_t v6 = *(v4 - 2);
      *(_BYTE *)(v13 + 36) |= 2u;
      *(void *)(v5 + 16) = v6;
      uint64_t v7 = v13;
      int v8 = *((_DWORD *)v4 - 2);
      *(_BYTE *)(v13 + 36) |= 8u;
      *(_DWORD *)(v7 + 28) = v8;
      uint64_t v9 = v13;
      LODWORD(v6) = *((_DWORD *)v4 - 1);
      *(_BYTE *)(v13 + 36) |= 4u;
      *(_DWORD *)(v9 + 24) = v6;
      uint64_t v10 = v13;
      double v11 = (double)*v4;
      *(_BYTE *)(v13 + 36) |= 1u;
      *(double *)(v10 + 8) = v11;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v12);
      }
      sub_101127D00((PB::Base *)v12);
      v4 += 4;
      --v3;
    }

    while (v3);
  }

void sub_1008D0A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008D0A64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    int v4 = (unsigned __int8 *)(a2 + 19);
    do
    {
      sub_101125260(v16);
      sub_10113A2F0(v16);
      uint64_t v5 = v17;
      uint64_t v6 = *(void *)(v4 - 19);
      char v7 = v17[224];
      v17[224] = v7 | 2;
      *((void *)v5 + 26) = v6;
      uint64_t v8 = *(void *)(v4 - 11);
      v5[224] = v7 | 3;
      *((void *)v5 + 25) = v8;
      LODWORD(v8) = *(v4 - 3);
      v5[224] = v7 | 0xB;
      *((_DWORD *)v5 + 55) = v8;
      LODWORD(v8) = *(v4 - 2);
      v5[224] = v7 | 0xF;
      *((_DWORD *)v5 + 54) = v8;
      LODWORD(v8) = *v4;
      int __src = *(v4 - 1);
      int v19 = v8;
      int v20 = v4[1];
      sub_10004C5F8(v5 + 8, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v9 = v4[6];
      int __src = v4[5];
      int v19 = v9;
      int v20 = v4[7];
      sub_10004C5F8(v17 + 32, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v10 = v4[9];
      int __src = v4[8];
      int v19 = v10;
      int v20 = v4[10];
      sub_10004C5F8(v17 + 56, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v11 = v4[15];
      int __src = v4[14];
      int v19 = v11;
      int v20 = v4[16];
      sub_10004C5F8(v17 + 80, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v12 = v4[3];
      int __src = v4[2];
      int v19 = v12;
      int v20 = v4[4];
      sub_10004C5F8(v17 + 128, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v13 = v4[12];
      int __src = v4[11];
      int v19 = v13;
      int v20 = v4[13];
      sub_10004C5F8(v17 + 152, (char *)&__src, (uint64_t)&v21, 3uLL);
      int v14 = v4[18];
      int __src = v4[17];
      int v19 = v14;
      sub_10004C5F8(v17 + 176, (char *)&__src, (uint64_t)&v20, 2uLL);
      int v15 = v4[20];
      int __src = v4[19];
      int v19 = v15;
      sub_10004C5F8(v17 + 104, (char *)&__src, (uint64_t)&v20, 2uLL);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v16);
      }
      sub_101127D00((PB::Base *)v16);
      v4 += 40;
      --v3;
    }

    while (v3);
  }

void sub_1008D0CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008D0D24(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    int v4 = (uint64_t *)(a2 + 24);
    do
    {
      sub_101125260(v16);
      sub_101139774(v16);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v19 |= 1u;
      CFAbsoluteTime v18 = Current;
      uint64_t v6 = v17;
      int v7 = *((unsigned __int16 *)v4 + 4);
      *((_BYTE *)v17 + 32) |= 4u;
      *((_DWORD *)v6 + 7) = v7;
      sub_1010E6D60(v17);
      uint64_t v8 = v17[1];
      uint64_t v9 = *(v4 - 3);
      *(_BYTE *)(v8 + 36) |= 1u;
      *(void *)(v8 + 8) = v9;
      uint64_t v10 = v17[1];
      LODWORD(v9) = *((_DWORD *)v4 - 4);
      *(_BYTE *)(v10 + 36) |= 8u;
      *(_DWORD *)(v10 + 24) = v9;
      uint64_t v11 = v17[1];
      LODWORD(v9) = *((_DWORD *)v4 - 3);
      *(_BYTE *)(v11 + 36) |= 0x10u;
      *(_DWORD *)(v11 + 28) = v9;
      uint64_t v12 = v17[1];
      LODWORD(v9) = *((_DWORD *)v4 - 2);
      *(_BYTE *)(v12 + 36) |= 0x20u;
      *(_DWORD *)(v12 + 32) = v9;
      uint64_t v13 = v17[1];
      LODWORD(v9) = *((_DWORD *)v4 + 3);
      *(_BYTE *)(v13 + 36) |= 4u;
      *(_DWORD *)(v13 + 20) = v9;
      int v14 = v17;
      uint64_t v15 = *v4;
      *((_BYTE *)v17 + 32) |= 1u;
      void v14[2] = v15;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v16);
      }
      sub_101127D00((PB::Base *)v16);
      v4 += 5;
      --v3;
    }

    while (v3);
  }

void sub_1008D0EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008D0EBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 144LL * a3;
    do
    {
      sub_101125260(v33);
      sub_1011392DC(v33);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v36 |= 1u;
      CFAbsoluteTime v35 = Current;
      sub_1010F2F4C(v34);
      uint64_t v7 = *(void *)(v34 + 72);
      uint64_t v8 = *(void *)(a2 + v4 + 64);
      *(_BYTE *)(v7 + 152) |= 2u;
      *(void *)(v7 + 136) = v8;
      __int128 __src = *(_OWORD *)(a2 + v4);
      sub_10004C5F8((char *)(*(void *)(v34 + 72) + 56LL), (char *)&__src, (uint64_t)&v38, 4uLL);
      *(void *)&__int128 __src = *(void *)(a2 + v4 + 16);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 24);
      sub_10004C5F8((char *)(*(void *)(v34 + 72) + 80LL), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(void *)&__int128 __src = *(void *)(a2 + v4 + 28);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 36);
      sub_10004C5F8((char *)(*(void *)(v34 + 72) + 32LL), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(void *)&__int128 __src = *(void *)(a2 + v4 + 40);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 48);
      sub_10004C5F8((char *)(*(void *)(v34 + 72) + 104LL), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      uint64_t v9 = *(void *)(v34 + 72);
      uint64_t v10 = a2 + v4;
      int v11 = *(unsigned __int16 *)(a2 + v4 + 52);
      *(_BYTE *)(v9 + 152) |= 4u;
      *(_DWORD *)(v9 + 144) = v11;
      uint64_t v12 = *(void *)(v34 + 72);
      uint64_t v13 = *(void *)(a2 + v4 + 56);
      *(_BYTE *)(v12 + 152) |= 1u;
      *(void *)(v12 + 128) = v13;
      *(void *)&__int128 __src = *(void *)(a2 + v4 + 80);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 88);
      sub_10004C5F8((char *)(v34 + 8), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      uint64_t v14 = v34;
      int v15 = *(_DWORD *)(a2 + v4 + 92);
      *(_WORD *)(v34 + 116) |= 0x40u;
      *(_DWORD *)(v14 + 96) = v15;
      uint64_t v16 = v34;
      int v17 = *(_DWORD *)(a2 + v4 + 96);
      *(_WORD *)(v34 + 116) |= 0x20u;
      *(_DWORD *)(v16 + 92) = v17;
      uint64_t v18 = v34;
      int v19 = *(_DWORD *)(a2 + v4 + 100);
      *(_WORD *)(v34 + 116) |= 0x100u;
      *(_DWORD *)(v18 + 104) = v19;
      uint64_t v20 = v34;
      if (*(_DWORD *)(a2 + v4 + 104) == 2) {
        int v21 = 1;
      }
      else {
        int v21 = 2;
      }
      *(_WORD *)(v34 + 116) |= 0x10u;
      *(_DWORD *)(v20 + 88) = v21;
      uint64_t v22 = v34;
      int v23 = *(_DWORD *)(v10 + 108);
      *(_WORD *)(v34 + 116) |= 0x200u;
      *(_DWORD *)(v22 + 108) = v23;
      uint64_t v24 = v34;
      uint64_t v25 = *(void *)(v10 + 112);
      *(_WORD *)(v34 + 116) |= 1u;
      *(void *)(v24 + 56) = v25;
      uint64_t v26 = v34;
      float v27 = *(double *)(v10 + 72);
      *(_WORD *)(v34 + 116) |= 8u;
      *(float *)(v26 + 84) = v27;
      uint64_t v28 = v34;
      float v29 = *(double *)(v10 + 120);
      *(_WORD *)(v34 + 116) |= 0x80u;
      *(float *)(v28 + 100) = v29;
      uint64_t v30 = v34;
      LOBYTE(v25) = *(_BYTE *)(v10 + 143);
      *(_WORD *)(v34 + 116) |= 0x400u;
      *(_BYTE *)(v30 + 112) = v25;
      if (*(_BYTE *)(v10 + 140))
      {
        *(void *)&__int128 __src = *(void *)(a2 + v4 + 128);
        DWORD2(__src) = *(_DWORD *)(a2 + v4 + 136);
        sub_10004C5F8((char *)(v34 + 32), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      }

      if (*(_BYTE *)(a2 + v4 + 142))
      {
        uint64_t v31 = v34;
        int v32 = *(unsigned __int8 *)(a2 + v4 + 141);
        *(_WORD *)(v34 + 116) |= 4u;
        *(_DWORD *)(v31 + 80) = v32;
      }

      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v33);
      }
      sub_101127D00((PB::Base *)v33);
      v4 += 144LL;
    }

    while (v5 != v4);
  }

void sub_1008D1244(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

_BYTE *sub_1008D1274(_BYTE *result, uint64_t a2)
{
  if (result[1849])
  {
    sub_10116FC88(a2, (uint64_t *)&v9);
    sub_101125260(v6);
    uint64_t v3 = *(void *)(a2 + 72);
    v8 |= 1u;
    v6[77] = v3;
    uint64_t v4 = (uint64_t)v9;
    uint64_t v9 = 0LL;
    uint64_t v5 = v7;
    uint64_t v7 = v4;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v6);
    }
    sub_101127D00((PB::Base *)v6);
    __n128 result = v9;
    uint64_t v9 = 0LL;
    if (result) {
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_1008D134C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(v9 - 24);
  *(void *)(v9 - 24) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008D1378(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 1907))
  {
    sub_101125260(v8);
    uint64_t v3 = *(void *)(a2 + 16);
    v10 |= 1u;
    v8[77] = v3;
    sub_101139B64(v8);
    uint64_t v4 = v9;
    double v5 = (double)*(unint64_t *)a2 / 1000000.0;
    *(_BYTE *)(v9 + 20) |= 1u;
    *(double *)(v4 + 8) = v5;
    uint64_t v6 = v9;
    char v7 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(v9 + 20) |= 2u;
    *(_BYTE *)(v6 + 16) = v7;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
    }
    return sub_101127D00((PB::Base *)v8);
  }

  return result;
}

void sub_1008D1454(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D146C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  sub_101125260(v8);
  sub_101139678(v8);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v5 = v9;
  *(_BYTE *)(v9 + 20) |= 1u;
  *(void *)(v5 + 8) = v2;
  uint64_t v6 = v9;
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = v3;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
  }
  return sub_101127D00((PB::Base *)v8);
}

void sub_1008D1534(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D154C(uint64_t a1, float *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v21 |= 1u;
  *(CFAbsoluteTime *)&void v19[77] = Current;
  uint64_t v4 = v20;
  uint64_t v5 = *(void *)a2;
  *(_WORD *)(v20 + 68) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v20;
  float v7 = a2[2];
  if (!*((_BYTE *)a2 + 20)) {
    float v7 = NAN;
  }
  *(_WORD *)(v20 + 68) |= 2u;
  *(float *)(v6 + 16) = v7;
  uint64_t v8 = v20;
  float v9 = a2[3];
  if (!*((_BYTE *)a2 + 21)) {
    float v9 = NAN;
  }
  *(_WORD *)(v20 + 68) |= 4u;
  *(float *)(v8 + 20) = v9;
  uint64_t v10 = v20;
  float v11 = a2[4];
  if (!*((_BYTE *)a2 + 22)) {
    float v11 = NAN;
  }
  *(_WORD *)(v20 + 68) |= 8u;
  *(float *)(v10 + 24) = v11;
  uint64_t v12 = v20;
  float v13 = a2[6];
  if (!*((_BYTE *)a2 + 36)) {
    float v13 = NAN;
  }
  *(_WORD *)(v20 + 68) |= 0x10u;
  *(float *)(v12 + 28) = v13;
  uint64_t v14 = v20;
  float v15 = a2[7];
  if (!*((_BYTE *)a2 + 37)) {
    float v15 = NAN;
  }
  *(_WORD *)(v20 + 68) |= 0x20u;
  *(float *)(v14 + 32) = v15;
  uint64_t v16 = v20;
  float v17 = a2[8];
  if (!*((_BYTE *)a2 + 38)) {
    float v17 = NAN;
  }
  *(_WORD *)(v20 + 68) |= 0x40u;
  *(float *)(v16 + 36) = v17;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v19);
  }
  return sub_101127D00((PB::Base *)v19);
}

void sub_1008D16D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008D16F0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  switch(*a3)
  {
    case 2:
      sub_101125260(v34);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = Current;
      sub_1011399C0(v34);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v6 = qword_1019A1D08;
      if (!qword_1019A1D08) {
        goto LABEL_31;
      }
      goto LABEL_30;
    case 3:
      sub_101125260(v34);
      CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v7;
      sub_101139A14(v34);
      uint64_t v8 = v35;
      sub_1010DDBC0(&__p, "Unknown");
      sub_1007A71E8(v8, &__p);
      if (v43 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      if ((sysctlbyname("kern.wakereason", &__p, &v33, 0LL, 0LL) & 0x80000000) == 0)
      {
        uint64_t v9 = v35;
        sub_1010DDBC0(&v31, (char *)&__p);
        sub_1007A71E8(v9, &v31);
        if (v32 < 0) {
          operator delete((void *)v31.n128_u64[0]);
        }
      }

      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)v34);
      }
      goto LABEL_31;
    case 7:
      sub_101125260(v34);
      CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v10;
      sub_1011397C8(v34);
      uint64_t v11 = v37;
      uint64_t v12 = *a4;
      *(_BYTE *)(v37 + 28) |= 1u;
      *(void *)(v11 + 8) = v12;
      uint64_t v13 = v37;
      char v14 = *((_BYTE *)a4 + 8);
      *(_BYTE *)(v37 + 28) |= 8u;
      *(_BYTE *)(v13 + 24) = v14;
      uint64_t v15 = v37;
      char v16 = *((_BYTE *)a4 + 9);
      *(_BYTE *)(v37 + 28) |= 0x10u;
      *(_BYTE *)(v15 + 25) = v16;
      uint64_t v17 = v37;
      int v18 = *((_DWORD *)a4 + 3);
      *(_BYTE *)(v37 + 28) |= 4u;
      *(_DWORD *)(v17 + 20) = v18;
      uint64_t v19 = v37;
      LOBYTE(v18) = *((_BYTE *)a4 + 16);
      *(_BYTE *)(v37 + 28) |= 0x20u;
      *(_BYTE *)(v19 + 26) = v18;
      uint64_t v20 = v37;
      int v21 = *((_DWORD *)a4 + 5);
      *(_BYTE *)(v37 + 28) |= 2u;
      *(_DWORD *)(v20 + 16) = v21;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v6 = qword_1019A1D08;
      if (qword_1019A1D08) {
        goto LABEL_30;
      }
      goto LABEL_31;
    case 0xA:
      sub_101125260(v34);
      CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v22;
      sub_10113996C(v34);
      uint64_t v23 = v39;
      char v24 = *(_BYTE *)a4;
      *(_BYTE *)(v39 + 12) |= 1u;
      *(_BYTE *)(v23 + 8) = v24;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v6 = qword_1019A1D08;
      if (qword_1019A1D08) {
        goto LABEL_30;
      }
      goto LABEL_31;
    case 0xB:
      sub_101125260(v34);
      CFAbsoluteTime v25 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v25;
      sub_10113981C(v34);
      uint64_t v26 = v40;
      char v27 = *(_BYTE *)a4;
      *(_BYTE *)(v40 + 12) |= 1u;
      *(_BYTE *)(v26 + 8) = v27;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v6 = qword_1019A1D08;
      if (qword_1019A1D08) {
        goto LABEL_30;
      }
      goto LABEL_31;
    case 0xF:
      sub_101125260(v34);
      CFAbsoluteTime v28 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      CFAbsoluteTime v38 = v28;
      sub_101139870(v34);
      uint64_t v29 = v36;
      char v30 = *(_BYTE *)a4;
      *(_BYTE *)(v36 + 12) |= 1u;
      *(_BYTE *)(v29 + 8) = v30;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
      }
      uint64_t v6 = qword_1019A1D08;
      if (qword_1019A1D08) {
LABEL_30:
      }
        sub_1011CF3D0(v6, (uint64_t)v34);
LABEL_31:
      sub_101127D00((PB::Base *)v34);
      break;
    default:
      return;
  }

void sub_1008D1B48(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1008D1BF8(uint64_t a1, uint64_t *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v10 |= 1u;
  *(CFAbsoluteTime *)&v8[77] = Current;
  uint64_t v4 = v9;
  LODWORD(Current) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_DWORD *)(v4 + 16) = LODWORD(Current);
  uint64_t v5 = v9;
  uint64_t v6 = *a2;
  *(_BYTE *)(v9 + 20) |= 1u;
  *(void *)(v5 + 8) = v6;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
  }
  return sub_101127D00((PB::Base *)v8);
}

void sub_1008D1CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D1CD4(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = Current;
  uint64_t v4 = v17;
  uint64_t v5 = *(void *)(a2 + 9);
  *(_WORD *)(v17 + 48) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 23);
  *(_WORD *)(v17 + 48) |= 8u;
  *(_DWORD *)(v6 + 24) = LODWORD(Current);
  uint64_t v7 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 27);
  *(_WORD *)(v17 + 48) |= 0x20u;
  *(_DWORD *)(v7 + 32) = LODWORD(Current);
  uint64_t v8 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 31);
  *(_WORD *)(v17 + 48) |= 0x10u;
  *(_DWORD *)(v8 + 28) = LODWORD(Current);
  uint64_t v9 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 35);
  *(_WORD *)(v17 + 48) |= 2u;
  *(_DWORD *)(v9 + 16) = LODWORD(Current);
  uint64_t v10 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 39);
  *(_WORD *)(v17 + 48) |= 0x40u;
  *(_DWORD *)(v10 + 36) = LODWORD(Current);
  uint64_t v11 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 43);
  *(_WORD *)(v17 + 48) |= 4u;
  *(_DWORD *)(v11 + 20) = LODWORD(Current);
  uint64_t v12 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 19);
  *(_WORD *)(v17 + 48) |= 0x80u;
  *(_DWORD *)(v12 + 40) = LODWORD(Current);
  uint64_t v13 = v17;
  LOBYTE(v5) = *(_BYTE *)(a2 + 17);
  *(_WORD *)(v17 + 48) |= 0x200u;
  *(_BYTE *)(v13 + 45) = v5;
  uint64_t v14 = v17;
  LOBYTE(v5) = *(_BYTE *)(a2 + 18);
  *(_WORD *)(v17 + 48) |= 0x100u;
  *(_BYTE *)(v14 + 44) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v16);
  }
  return sub_101127D00((PB::Base *)v16);
}

void sub_1008D1E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D1E70(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  CFAbsoluteTime v10 = Current;
  uint64_t v4 = v9;
  uint64_t v5 = *(void *)(a2 + 12);
  *(_BYTE *)(v9 + 20) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v9;
  LODWORD(Current) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = LODWORD(Current);
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
  }
  return sub_101127D00((PB::Base *)v8);
}

void sub_1008D1F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008D1F4C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    sub_101125260(v8);
    sub_101139E58(v8);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v11 |= 1u;
    CFAbsoluteTime v10 = Current;
    int v6 = *a4;
    uint64_t v7 = *(void *)v9;
    *(_BYTE *)(*(void *)v9 + 28LL) |= 1u;
    *(_DWORD *)(v7 + 24) = v6;
    sub_1008D2030(*(uint64_t *)v9, (std::string *)(a4 + 2));
    sub_1008D2070(*(uint64_t *)v9, (std::string *)(a4 + 8));
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)v8);
    }
    sub_101127D00((PB::Base *)v8);
  }

void sub_1008D2018(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *sub_1008D2030(uint64_t a1, std::string *__str)
{
  uint64_t v4 = *(std::string **)(a1 + 8);
  if (!v4)
  {
    uint64_t v4 = (std::string *)operator new(0x18uLL);
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 8) = v4;
  }

  return std::string::operator=(v4, __str);
}

std::string *sub_1008D2070(uint64_t a1, std::string *__str)
{
  uint64_t v4 = *(std::string **)(a1 + 16);
  if (!v4)
  {
    uint64_t v4 = (std::string *)operator new(0x18uLL);
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v4;
  }

  return std::string::operator=(v4, __str);
}

uint64_t sub_1008D20B0(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v20 |= 1u;
  *(CFAbsoluteTime *)&v18[77] = Current;
  uint64_t v4 = v19;
  uint64_t v5 = *(void *)(a2 + 9);
  *(_DWORD *)(v19 + 84) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v19;
  LOBYTE(v5) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(v19 + 84) |= 0x20000u;
  *(_BYTE *)(v6 + 80) = v5;
  uint64_t v7 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 18);
  *(_DWORD *)(v19 + 84) |= 4u;
  *(_DWORD *)(v7 + 20) = v5;
  uint64_t v8 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 20);
  *(_DWORD *)(v19 + 84) |= 0x2000u;
  *(_DWORD *)(v8 + 64) = v5;
  uint64_t v9 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 21);
  *(_DWORD *)(v19 + 84) |= 0x1000u;
  *(_DWORD *)(v9 + 60) = v5;
  uint64_t v10 = v19;
  LOBYTE(v5) = *(_BYTE *)(a2 + 22);
  *(_DWORD *)(v19 + 84) |= 0x40000u;
  *(_BYTE *)(v10 + 81) = v5;
  uint64_t v11 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 23);
  *(_DWORD *)(v19 + 84) |= 0x200u;
  *(_DWORD *)(v11 + 48) = LODWORD(Current);
  uint64_t v12 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 35);
  *(_DWORD *)(v19 + 84) |= 0x10000u;
  *(_DWORD *)(v12 + 76) = LODWORD(Current);
  uint64_t v13 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 39);
  *(_DWORD *)(v19 + 84) |= 0x4000u;
  *(_DWORD *)(v13 + 68) = LODWORD(Current);
  uint64_t v14 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 43);
  *(_DWORD *)(v19 + 84) |= 0x8000u;
  *(_DWORD *)(v14 + 72) = LODWORD(Current);
  uint64_t v15 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 47);
  *(_DWORD *)(v19 + 84) |= 0x40u;
  *(_DWORD *)(v15 + 36) = LODWORD(Current);
  uint64_t v16 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 19);
  *(_DWORD *)(v19 + 84) |= 2u;
  *(_DWORD *)(v16 + 16) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v18);
  }
  return sub_101127D00((PB::Base *)v18);
}

void sub_1008D2264(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D227C(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  uint64_t v4 = v10;
  double v5 = (double)*(unint64_t *)(a2 + 10) / 1000000.0;
  *(_BYTE *)(v10 + 20) |= 1u;
  *(double *)(v4 + 8) = v5;
  uint64_t v6 = v10;
  int v7 = *(unsigned __int8 *)(a2 + 9);
  *(_BYTE *)(v10 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v9);
  }
  return sub_101127D00((PB::Base *)v9);
}

void sub_1008D2350(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D2368(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v27 |= 1u;
  *(CFAbsoluteTime *)&v25[77] = Current;
  uint64_t v4 = *((void *)v26 + 1);
  double v5 = (double)*(unint64_t *)(a2 + 49) / 1000000.0;
  *(_DWORD *)(v4 + 124) |= 0x10u;
  *(double *)(v4 + 40) = v5;
  uint64_t v6 = *((void *)v26 + 1);
  double v7 = *(float *)(a2 + 9);
  *(_DWORD *)(v6 + 124) |= 2u;
  *(double *)(v6 + 16) = v7;
  uint64_t v8 = *((void *)v26 + 1);
  double v9 = *(float *)(a2 + 13);
  *(_DWORD *)(v8 + 124) |= 4u;
  *(double *)(v8 + 24) = v9;
  uint64_t v10 = *((void *)v26 + 1);
  double v11 = *(float *)(a2 + 17);
  *(_DWORD *)(v10 + 124) |= 8u;
  *(double *)(v10 + 32) = v11;
  uint64_t v12 = *((void *)v26 + 1);
  double v13 = *(float *)(a2 + 21);
  *(_DWORD *)(v12 + 124) |= 1u;
  *(double *)(v12 + 8) = v13;
  uint64_t v14 = *((void *)v26 + 1);
  LODWORD(v13) = *(_DWORD *)(a2 + 37);
  *(_DWORD *)(v14 + 124) |= 0x40000u;
  *(_DWORD *)(v14 + 100) = LODWORD(v13);
  uint64_t v15 = *((void *)v26 + 1);
  LODWORD(v13) = *(_DWORD *)(a2 + 41);
  *(_DWORD *)(v15 + 124) |= 0x80000u;
  *(_DWORD *)(v15 + 104) = LODWORD(v13);
  uint64_t v16 = *((void *)v26 + 1);
  LODWORD(v13) = *(_DWORD *)(a2 + 45);
  *(_DWORD *)(v16 + 124) |= 0x100000u;
  *(_DWORD *)(v16 + 108) = LODWORD(v13);
  uint64_t v17 = *((void *)v26 + 1);
  LODWORD(v13) = *(_DWORD *)(a2 + 25);
  *(_DWORD *)(v17 + 124) |= 0x2000u;
  *(_DWORD *)(v17 + 80) = LODWORD(v13);
  uint64_t v18 = *((void *)v26 + 1);
  LODWORD(v13) = *(_DWORD *)(a2 + 29);
  *(_DWORD *)(v18 + 124) |= 0x4000u;
  *(_DWORD *)(v18 + 84) = LODWORD(v13);
  uint64_t v19 = *((void *)v26 + 1);
  LODWORD(v13) = *(_DWORD *)(a2 + 33);
  *(_DWORD *)(v19 + 124) |= 0x8000u;
  *(_DWORD *)(v19 + 88) = LODWORD(v13);
  char v20 = v26;
  char v21 = *(_BYTE *)(a2 + 57);
  *((_BYTE *)v26 + 20) |= 1u;
  *((_BYTE *)v20 + 16) = v21;
  CFAbsoluteTime v22 = v26;
  char v23 = *(_BYTE *)(a2 + 58);
  *((_BYTE *)v26 + 20) |= 2u;
  *((_BYTE *)v22 + 17) = v23;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v25);
  }
  return sub_101127D00((PB::Base *)v25);
}

void sub_1008D2588(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D25A0()
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v3 |= 1u;
  *(CFAbsoluteTime *)&v2[77] = Current;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v2);
  }
  return sub_101127D00((PB::Base *)v2);
}

void sub_1008D2630(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D2648(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v22 |= 1u;
  CFAbsoluteTime v21 = Current;
  sub_101138BF8(v19);
  uint64_t v4 = v20;
  *((_BYTE *)v20 + 32) |= 2u;
  v4[6] = 995511;
  sub_1010E0B98(v20);
  uint64_t v5 = *((void *)v20 + 1);
  double v6 = (double)*(unint64_t *)a2 * 0.000001;
  *(_BYTE *)(v5 + 32) |= 1u;
  *(double *)(v5 + 8) = v6;
  uint64_t v7 = *((void *)v20 + 1);
  LODWORD(v6) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(v7 + 32) |= 4u;
  *(_DWORD *)(v7 + 20) = LODWORD(v6);
  uint64_t v8 = *((void *)v20 + 1);
  LODWORD(v6) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(v8 + 32) |= 8u;
  *(_DWORD *)(v8 + 24) = LODWORD(v6);
  uint64_t v9 = *((void *)v20 + 1);
  LODWORD(v6) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(v9 + 32) |= 0x10u;
  *(_DWORD *)(v9 + 28) = LODWORD(v6);
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v19);
  }
  sub_101125260(v16);
  sub_101139C0C(v16);
  CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = v10;
  uint64_t v11 = v17;
  double v12 = (double)*(unint64_t *)a2;
  *(_BYTE *)(v17 + 20) |= 1u;
  *(double *)(v11 + 8) = v12;
  uint64_t v13 = v17;
  int v14 = *(unsigned __int8 *)(a2 + 22);
  *(_BYTE *)(v17 + 20) |= 2u;
  *(_DWORD *)(v13 + 16) = v14;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v16);
  }
  sub_101127D00((PB::Base *)v16);
  return sub_101127D00((PB::Base *)v19);
}

void sub_1008D2838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1008D2864(uint64_t a1, char *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  uint64_t v4 = v8;
  char v5 = *a2;
  *(_BYTE *)(v8 + 20) |= 2u;
  *(_BYTE *)(v4 + 16) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v7);
  }
  return sub_101127D00((PB::Base *)v7);
}

void sub_1008D2910(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D2928(uint64_t a1, char *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  uint64_t v4 = v8;
  char v5 = *a2;
  *(_BYTE *)(v8 + 20) |= 2u;
  *(_BYTE *)(v4 + 16) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v7);
  }
  return sub_101127D00((PB::Base *)v7);
}

void sub_1008D29D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D29EC(uint64_t a1, char *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  uint64_t v4 = v8;
  char v5 = *a2;
  *(_BYTE *)(v8 + 20) |= 2u;
  *(_BYTE *)(v4 + 16) = v5;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v7);
  }
  return sub_101127D00((PB::Base *)v7);
}

void sub_1008D2A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unsigned __int8 *sub_1008D2AB0(unsigned __int8 *a1)
{
  LOBYTE(v6) = 0;
  uint64_t v2 = sub_1012049AC(a1, "MotionLoggerHoldPowerAssertion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(v2 + 3, "MotionLoggerHoldIndependenceAssertion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 6, "MotionLoggerOnlyLogSensorsInSession", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 9, "MotionLoggerLogWorkoutEvents", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 16, "MotionLoggerAccelerometerLoggingInterval", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 40, "MotionLoggerHALoggingInterval", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 64, "MotionLoggerGyroLoggingInterval", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 88, "MotionLoggerMagnetometerLoggingInterval", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 112, "MotionLoggerPressureLoggingInterval", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 136, "MotionLoggerDeviceMotionLoggingInterval", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 160, "MotionLoggerAccessoryAccelerometerLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101206440(a1 + 184, "MotionLoggerAccessoryAccelerometerBufferSize", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 196, "MotionLoggerAccessoryMonitor", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 200, "MotionLoggerAccessoryProximityLoggingInterval", &v6, 0);
  LODWORD(v6) = 20;
  sub_101206440(a1 + 224, "MotionLoggerAccessoryProximityBufferSize", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 240, "MotionLoggerAccessoryGyroLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101206440(a1 + 264, "MotionLoggerAccessoryGyroBufferSize", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 280, "MotionLoggerAccessoryMagnetometerLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101206440(a1 + 304, "MotionLoggerAccessoryMagnetometerBufferSize", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 320, "MotionLoggerAccessoryDeviceMotionLoggingInterval", &v6, 0);
  LODWORD(v6) = 20;
  sub_101206440(a1 + 344, "MotionLoggerAccessoryDeviceMotionBufferSize", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 356, "MotionLoggerAccessoryDeviceMotionLowLatency", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 360, "MotionLoggerAccessoryHeartRateLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101206440(a1 + 384, "MotionLoggerAccessoryHeartRateBufferSize", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 400, "MotionLoggerAccessoryPPGLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_101206440(a1 + 424, "MotionLoggerAccessoryPPGBufferSize", &v6, 0);
  LODWORD(v6) = 0;
  sub_10023AE2C(a1 + 436, "MotionLoggerLogDeviceMotionVariant", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 448, "MotionLoggerLogElevationChangeEntryActive", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 451, "MotionLoggerLogElevationChangeEntrySpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 454, "MotionLoggerLogCoarseElevationChange", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 457, "MotionLoggerLogHeartRateSpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 460, "MotionLoggerLogBTVehicleConnections", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 0;
  sub_10023AE2C(a1 + 464, "MotionLoggerLogRawGPS", &v6, 0);
  LODWORD(v6) = 6;
  sub_10023AE2C(a1 + 476, "MotionLoggerCoarseGPSScalingFactor", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 488, "MotionLoggerLogWifiLocation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 491, "MotionLoggerLogSourceAgnosticLocations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 494, "MotionLogBufferedOdometerLocations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 497, "MotionLoggerLogBodyMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 500, "MotionLoggerLogOdometerSpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 503, "MotionLoggerLogMotionState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 506, "MotionLoggerLogBasebandSpeed", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 509, "MotionLoggerLogMotionStateHints", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 512, "MotionLoggerLogWatchOrientationSettings", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 515, "MotionLoggerLogATVRemoteDebug", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 518, "MotionLoggerLogWifiAssociation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 521, "MotionLoggerLogWifiScan", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 524, "MotionLoggerEnableActiveWifiScans", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 527, "MotionLoggerLogLois", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 530, "MotionLoggerHashLois", (unsigned __int8 *)&v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 536, "MotionLoggerPostWorkoutLoggingInterval", &v6, 0);
  LOBYTE(v6) = 1;
  sub_1012049AC(a1 + 560, "MotionLoggerLogPencilDebug", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 563, "MotionLoggerLogPencilMotion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 566, "MotionLoggerLogPedometer", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 569, "MotionLoggerLogSignalEnvironment", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 572, "MotionLoggerLogGnssAvailabilityPredictor", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 575, "MotionLoggerLogGnssLeechLocation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 578, "MotionLoggerLogMapsRouteHint", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 581, "MotionLoggerLogMobilityBoutMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 584, "MotionLoggerLogSPUGaitMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 587, "MotionLoggerLogVisualLocalizations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 590, "MotionLoggerLogALSUpdates", (unsigned __int8 *)&v6, 0);
  unsigned __int8 v5 = 0;
  sub_1012049AC((unsigned __int8 *)&v6, "MotionLoggerEnableALSActiveScansAOP", &v5, 0);
  if (BYTE1(v6))
  {
    sub_1004F2598();
    unsigned __int8 v3 = sub_1004FC5C4();
  }

  else
  {
    unsigned __int8 v3 = 0;
  }

  a1[593] = v3;
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 594, "MotionLoggerLogALSUpdatesAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 597, "MotionLoggerLogBatteryUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 600, "MotionLoggerLogScreenLockUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 603, "MotionLoggerLogBatterySaverModeUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 606, "MotionLoggerLogPowerManagementUserActivity", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 609, "MotionLoggerLogFocusModes", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 612, "MotionLoggerLogDisplayState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 615, "MotionLoggerLogAPSleeps", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 618, "MotionLoggerLogAPWakes", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 621, "MotionLoggerLogBasebandCompassCoex", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 624, "MotionLoggerLogGaitEvents", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 627, "MotionLoggerLogMagneticAccessories", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 630, "MotionLoggerLogWalkingSteadinessClassification", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 633, "MotionLoggerLogRunningForm", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 636, "MotionLoggerSPLLoggingInterval", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 639, "MotionLoggerLogRunningPower", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 642, "MotionLoggerLogFaceCovered", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 645, "MotionLoggerLogProxPDP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 648, "MotionLoggerLogALSAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 651, "MotionLoggerLogBacklightState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 654, "MotionLoggerLogViewObstructedState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 657, "MotionLoggerLogOrientation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 660, "MotionLoggerLogDeviceMotionAlwaysOn", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 663, "MotionLoggerLogSignificantUserInteraction", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 666, "EnableVehicleDetectionAlerts", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 669, "MotionLoggerLogAverageALSAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 672, "MotionLoggerLogKeyboardMotion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 675, "MotionLoggerLogGnssModeOfOperation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 678, "MotionLoggerFitnessMachineData", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 681, "EnablePedestrianFenceNotifications", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 684, "EnableDisplacingStateNotifications", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 5;
  sub_10023AE2C(a1 + 688, "DurationActivityAlarmStatic", &v6, 0);
  LODWORD(v6) = 3;
  sub_10023AE2C(a1 + 700, "RadiusPedestrianFence", &v6, 0);
  uint64_t v6 = 0LL;
  sub_101204164(a1 + 712, "MotionLoggerInertialOdometryLoggingInterval", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 736, "MotionLoggerLogBackgroundInertialOdometry", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 1;
  sub_10023AE2C(a1 + 740, "MotionLoggerBackgroundInertialOdometryReferenceFrame", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 752, "MotionLoggerLogWakeGesture", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1012049AC(a1 + 755, "MotionLoggerLogPostureSkeleton", (unsigned __int8 *)&v6, 0);
  return a1;
}

void sub_1008D3600(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1008D3630(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1008D365C(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1008D3688(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1008D36B4(id a1)
{
  qword_1019344A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_1008D36E0(id a1)
{
  qword_101934798 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_1008D370C(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1008D3738(id a1)
{
  qword_101934548 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WakeGesture");
}

void sub_1008D3764(id a1)
{
  qword_101934788 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

__n128 sub_1008D3790(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1008D3EB8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  uint64_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  _OWORD *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_1008D381C(const void *a1, char a2)
{
  CFTypeRef cf = a1;
  unsigned __int8 v3 = (void *)(qword_1019991D0 + 8 * ((unint64_t)xmmword_1019991E8 >> 7));
  if (unk_1019991D8 == qword_1019991D0)
  {
    uint64_t v4 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v5 = (void **)(qword_1019991D0 + 8LL * ((*((void *)&xmmword_1019991E8 + 1) + (void)xmmword_1019991E8) >> 7));
  }

  else
  {
    uint64_t v4 = (void *)(*v3 + 32 * (xmmword_1019991E8 & 0x7F));
    uint64_t v5 = (void **)(qword_1019991D0 + 8LL * ((*((void *)&xmmword_1019991E8 + 1) + (void)xmmword_1019991E8) >> 7));
    uint64_t v6 = &(*v5)[4 * ((*((void *)&xmmword_1019991E8 + 1) + xmmword_1019991E8) & 0x7F)];
  }

  sub_1008D4260(v3, v4, v5, v6, &cf);
  uint64_t v8 = v7;
  if (unk_1019991D8 == qword_1019991D0) {
    uint64_t v9 = 0LL;
  }
  else {
    uint64_t v9 = *(void *)(qword_1019991D0
  }
                   + (((*((void *)&xmmword_1019991E8 + 1) + (void)xmmword_1019991E8) >> 4) & 0xFFFFFFFFFFFFFF8LL))
       + 32 * ((*((void *)&xmmword_1019991E8 + 1) + xmmword_1019991E8) & 0x7F);
  if (v9 == v7)
  {
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    uint64_t v15 = (os_log_s *)qword_101934788;
    if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "PedestrianFenceNotification,no timestamp",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934780 != -1) {
        dispatch_once(&qword_101934780, &stru_10185E9F0);
      }
      LOWORD(v42) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  16LL,  "PedestrianFenceNotification,no timestamp",  &v42,  2);
      uint64_t v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }
  }

  else
  {
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    __int128 v10 = (os_log_s *)qword_101934788;
    if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v38 = *((void *)&xmmword_1019991E8 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Dropping PedestrianFencePendingNotification, queue size, %lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934780 != -1) {
        dispatch_once(&qword_101934780, &stru_10185E9F0);
      }
      int v42 = 134217984;
      uint64_t v43 = *((void *)&xmmword_1019991E8 + 1);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "Dropping PedestrianFencePendingNotification, queue size, %lu",  &v42);
      size_t v33 = (uint8_t *)v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)",  "%s\n",  v32);
      if (v33 != buf) {
        free(v33);
      }
    }

    CFRelease(cf);
    uint64_t v11 = (void *)(qword_1019991D0 + 8 * ((unint64_t)xmmword_1019991E8 >> 7));
    if (unk_1019991D8 == qword_1019991D0)
    {
      double v12 = 0LL;
      int v14 = 0LL;
      uint64_t v13 = (void **)(qword_1019991D0 + 8LL * ((*((void *)&xmmword_1019991E8 + 1) + (void)xmmword_1019991E8) >> 7));
    }

    else
    {
      double v12 = (void *)(*v11 + 32 * (xmmword_1019991E8 & 0x7F));
      uint64_t v13 = (void **)(qword_1019991D0 + 8LL * ((*((void *)&xmmword_1019991E8 + 1) + (void)xmmword_1019991E8) >> 7));
      int v14 = &(*v13)[4 * ((*((void *)&xmmword_1019991E8 + 1) + xmmword_1019991E8) & 0x7F)];
    }

    uint64_t v19 = (char *)sub_1008D41CC(v11, v12, v13, v14, &cf);
    char v20 = (char *)(qword_1019991D0 + 8LL * (((void)xmmword_1019991E8 + *((void *)&xmmword_1019991E8 + 1)) >> 7));
    if (unk_1019991D8 == qword_1019991D0) {
      uint64_t v21 = 0LL;
    }
    else {
      uint64_t v21 = *(void *)v20 + 32LL * (((_BYTE)xmmword_1019991E8 + BYTE8(xmmword_1019991E8)) & 0x7F);
    }
    sub_10079DD74(&qword_1019991C8, v19, v18, v20, v21);
    if ((a2 & 3) == 2LL) {
      int v22 = 0;
    }
    else {
      int v22 = -1;
    }
    if ((a2 & 3) == 1LL) {
      int v23 = 1;
    }
    else {
      int v23 = v22;
    }
    if (qword_101934780 != -1) {
      dispatch_once(&qword_101934780, &stru_10185E9F0);
    }
    char v24 = (os_log_s *)qword_101934788;
    if (os_log_type_enabled((os_log_t)qword_101934788, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      LODWORD(v38) = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "PedestrianFenceNotification,Exit,user response,%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934780 != -1) {
        dispatch_once(&qword_101934780, &stru_10185E9F0);
      }
      int v42 = 67109120;
      LODWORD(v43) = v23;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934788,  0LL,  "PedestrianFenceNotification,Exit,user response,%d",  &v42);
      uint64_t v35 = (uint8_t *)v34;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)",  "%s\n",  v34);
      if (v35 != buf) {
        free(v35);
      }
    }

    sub_101125260(buf);
    sub_10113A0A4(buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v41 |= 1u;
    CFAbsoluteTime v39 = Current;
    uint64_t v26 = v40;
    uint64_t v27 = *(void *)(v8 + 8);
    *(_BYTE *)(v40 + 32) |= 2u;
    *(void *)(v26 + 16) = v27;
    uint64_t v28 = v40;
    uint64_t v29 = *(void *)(v8 + 16);
    *(_BYTE *)(v40 + 32) |= 1u;
    *(void *)(v28 + 8) = v29;
    uint64_t v30 = v40;
    LODWORD(v29) = *(_DWORD *)(v8 + 24);
    *(_BYTE *)(v40 + 32) |= 4u;
    *(_DWORD *)(v30 + 24) = v29;
    uint64_t v31 = v40;
    *(_BYTE *)(v40 + 32) |= 8u;
    *(_DWORD *)(v31 + 28) = v23;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_10185E8F0);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

void sub_1008D3E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1008D3EB8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1008D4180( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1008D41CC(void *a1, void *a2, void **a3, void *a4, void *a5)
{
  __n128 result = sub_1008D4260(a1, a2, a3, a4, a5);
  if (v8 != (_OWORD *)a4)
  {
    uint64_t v9 = v8;
    uint64_t v10 = result;
    while (1)
    {
      v9 += 2;
      if ((_OWORD *)((char *)v9 - *v10) == (_OWORD *)4096)
      {
        uint64_t v11 = (_OWORD *)v10[1];
        ++v10;
        uint64_t v9 = v11;
      }

      if (v9 == (_OWORD *)a4) {
        break;
      }
      if (*(void *)v9 != *a5)
      {
        __int128 v12 = v9[1];
        _OWORD *v8 = *v9;
        v8[1] = v12;
        v8 += 2;
        if ((_OWORD *)((char *)v8 - *result) == (_OWORD *)4096)
        {
          uint64_t v13 = (_OWORD *)result[1];
          ++result;
          uint64_t v8 = v13;
        }
      }
    }
  }

  return result;
}

void *sub_1008D4260(void *result, void *a2, void **a3, void *a4, void *a5)
{
  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 4;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }

    if (result && (void *)(*result + 4096LL) == a2) {
      ++result;
    }
  }

  else
  {
    uint64_t v5 = *result + 4096LL;
    if ((void *)v5 == a2) {
      goto LABEL_14;
    }
    while (*a2 != *a5)
    {
      a2 += 4;
      if (a2 == (void *)v5) {
        goto LABEL_14;
      }
    }

    if (a2 == (void *)v5)
    {
LABEL_14:
      uint64_t v6 = result + 1;
      if (result + 1 == a3)
      {
        uint64_t v8 = result;
      }

      else
      {
        do
        {
          uint64_t v7 = 0LL;
          uint64_t v8 = v6;
          uint64_t v9 = *v6;
          do
          {
            if (*(void *)(v9 + v7) == *a5) {
              return v8;
            }
            v7 += 32LL;
          }

          while (v7 != 4096);
          uint64_t v6 = v8 + 1;
        }

        while (v8 + 1 != a3);
      }

      if (*a3 == a4)
      {
        return a3;
      }

      else
      {
        uint64_t v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 4;
          if (v10 == a4)
          {
            uint64_t v10 = a4;
            break;
          }
        }

        __n128 result = a3;
        if (*a3 + 512 == v10) {
          return v8 + 2;
        }
      }
    }
  }

  return result;
}

void sub_1008D43A0(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1008D43CC(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7LL * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x924924924924925LL) {
      sub_100007008();
    }
    uint64_t v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 28;
    uint64_t v6 = (char *)sub_10079D83C(v3, a2);
    uint64_t v7 = &v6[28 * v5];
    uint64_t v9 = &v6[28 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    __int128 v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int128 v13 = *(_OWORD *)(v10 - 28);
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        *(_OWORD *)(v12 - 28) = v13;
        v12 -= 28;
        v10 -= 28;
      }

      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_1008D44B8(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x18uLL);
  sub_101140314((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      __int128 v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      __int128 v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      uint64_t v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int64_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1008D45DC(_Unwind_Exception *a1)
{
}

void sub_1008D45F8(id a1)
{
  qword_1019345C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1008D4624(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1008D4650(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = *(void *)(a2 + 8);
  __int16 v6 = *(_WORD *)(a2 + 1);
  BOOL v7 = *(_BYTE *)(a2 + 3) != 0;
  *(CFAbsoluteTime *)(a1 + 8) = Current;
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 26) = v7;
}

uint64_t sub_1008D4698(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x18uLL);
  sub_101103984((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  BOOL v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      __int128 v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      __int128 v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      uint64_t v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int64_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)BOOL v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1008D47BC(_Unwind_Exception *a1)
{
}

char *sub_1008D47D8(void *a1, char *a2, char *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    uint64_t v18 = (char *)a1[1];
    __int128 v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v25 = (uint64_t)result;
      }

      else
      {
        uint64_t v25 = (uint64_t)&result[4 * (void)a3 + -4 * (void)a2];
        uint64_t v26 = (float *)result;
        do
        {
          int v27 = *v6++;
          *v26++ = (float)v27;
        }

        while (v6 != a3);
      }

      uint64_t v17 = (char *)(v25 - (void)result);
      unint64_t v12 = result;
    }

    else
    {
      int64_t v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          int v21 = *v6++;
          *(float *)uint64_t result = (float)v21;
          result += 4;
          --v19;
        }

        while (v19);
      }

      int64x2_t v22 = v12;
      if (v20 != a3)
      {
        uint64_t v23 = (float *)v12;
        do
        {
          int v24 = *v20++;
          *v23++ = (float)v24;
          v22 += 4;
        }

        while (v20 != a3);
      }

      uint64_t v17 = (char *)(v22 - v12);
    }
  }

  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 >> 62) {
      sub_100007008();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10001B7A4(a1, v11);
    BOOL v14 = (float *)a1[1];
    __int128 v13 = a1 + 1;
    unint64_t v12 = (char *)v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = (float *)v12;
      do
      {
        int v16 = *v6++;
        *v15++ = (float)v16;
      }

      while (v6 != a3);
    }

    uint64_t v17 = (char *)((char *)v15 - v12);
  }

  *__int128 v13 = &v17[(void)v12];
  return result;
}

void sub_1008D493C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = (void *)sub_1010240A0(v3);
    operator delete(v4);
  }

uint64_t sub_1008D4968(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_10185EE88;
  *(void *)(a1 + 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = operator new[](40LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D4ABC;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 40) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1008D4AD0;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 48) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1008D4A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008D4ABC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D4AD0(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D4AEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D4BBC(a1);
  operator delete(v1);
}

void *sub_1008D4B00(void *result, uint64_t a2, __int128 *a3)
{
  uint64_t v3 = result[7] + 40LL * *((unsigned int *)result + 16);
  __int128 v4 = *a3;
  __int128 v5 = a3[1];
  *(void *)(v3 + 32) = *((void *)a3 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *((_DWORD *)result + 17);
  unsigned int v7 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v7;
  if (v7 >= v6)
  {
    uint64_t v8 = result;
    uint64_t v10 = result[3];
    uint64_t v9 = result[4];
    uint64_t v11 = result[6];
    uint64_t v12 = result[7];
    __int128 v13 = (void *)result[2];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1008D4C20;
    v14[3] = &unk_10184D6C8;
    v14[4] = v11;
    v14[5] = v10;
    unsigned int v15 = v7;
    v14[6] = v12;
    v14[7] = v9;
    [v13 async:v14];
    uint64_t result = operator new[](40LL * *((unsigned int *)v8 + 17));
    v8[7] = result;
    *((_DWORD *)v8 + 16) = 0;
  }

  return result;
}

uint64_t sub_1008D4BBC(uint64_t a1)
{
  *(void *)a1 = off_10185EE88;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  unint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1008D4C20(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

void *sub_1008D4C70(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_10185EF28;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D4DA4;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1008D4DB8;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1008D4D7C(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D4DA4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D4DB8(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D4DD4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D5110(a1);
  operator delete(v1);
}

id sub_1008D4DE8(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0xC0) {
    size_t v8 = 192LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0xC1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v41 = 0x800000010133FB0ELL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v42 = 2048;
      uint64_t v43 = 192LL;
      __int16 v44 = 2048;
      unint64_t v45 = a4;
      __int16 v46 = 1024;
      int v47 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v32 = 136315906;
      unint64_t v33 = 0x800000010133FB0ELL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 192LL;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v32,  38,  v17,  LODWORD(v18[0]));
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLAccessoryMonitor::LogEvent>::dispatchData(int, const void *, siz e_t) [T = CLAccessoryMonitor::LogEvent]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int128 v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1008D5168;
  v18[3] = &unk_10185EF70;
  _DWORD v18[4] = v12;
  v18[5] = v11;
  __int128 v27 = __dst[8];
  __int128 v28 = __dst[9];
  __int128 v29 = __dst[10];
  __int128 v30 = __dst[11];
  __int128 v23 = __dst[4];
  __int128 v24 = __dst[5];
  __int128 v25 = __dst[6];
  __int128 v26 = __dst[7];
  __int128 v19 = __dst[0];
  __int128 v20 = __dst[1];
  __int128 v21 = __dst[2];
  __int128 v22 = __dst[3];
  uint64_t v31 = v10;
  return [v13 async:v18];
}

uint64_t sub_1008D5110(uint64_t a1)
{
  *(void *)a1 = off_10185EF28;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1008D5168(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 240));
  }
  return result;
}

uint64_t sub_1008D51AC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_10185EFA0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = operator new[](32LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D52FC;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 40) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1008D5310;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1008D52D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008D52FC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D5310(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D532C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D53EC(a1);
  operator delete(v1);
}

void *sub_1008D5340(void *result, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = (_OWORD *)(result[7] + 32LL * *((unsigned int *)result + 16));
  __int128 v4 = a3[1];
  *uint64_t v3 = *a3;
  v3[1] = v4;
  unsigned int v5 = *((_DWORD *)result + 17);
  unsigned int v6 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v6;
  if (v6 >= v5)
  {
    unsigned int v7 = result;
    uint64_t v9 = result[3];
    uint64_t v8 = result[4];
    uint64_t v10 = result[6];
    uint64_t v11 = result[7];
    uint64_t v12 = (void *)result[2];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1008D5450;
    void v13[3] = &unk_10184D6C8;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v6;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    uint64_t result = operator new[](32LL * *((unsigned int *)v7 + 17));
    v7[7] = result;
    *((_DWORD *)v7 + 16) = 0;
  }

  return result;
}

uint64_t sub_1008D53EC(uint64_t a1)
{
  *(void *)a1 = off_10185EFA0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  unint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1008D5450(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

uint64_t sub_1008D54A0(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_10185F040;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = operator new[](40LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D55F4;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 40) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1008D5608;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1008D55CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008D55F4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D5608(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D5624(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D56F4(a1);
  operator delete(v1);
}

void *sub_1008D5638(void *result, uint64_t a2, __int128 *a3)
{
  uint64_t v3 = result[7] + 40LL * *((unsigned int *)result + 16);
  __int128 v4 = *a3;
  __int128 v5 = a3[1];
  *(void *)(v3 + 32) = *((void *)a3 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *((_DWORD *)result + 17);
  unsigned int v7 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v7;
  if (v7 >= v6)
  {
    uint64_t v8 = result;
    uint64_t v10 = result[3];
    uint64_t v9 = result[4];
    uint64_t v11 = result[6];
    uint64_t v12 = result[7];
    __int128 v13 = (void *)result[2];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1008D5758;
    void v14[3] = &unk_10184D6C8;
    v14[4] = v11;
    v14[5] = v10;
    unsigned int v15 = v7;
    v14[6] = v12;
    v14[7] = v9;
    [v13 async:v14];
    uint64_t result = operator new[](40LL * *((unsigned int *)v8 + 17));
    v8[7] = result;
    *((_DWORD *)v8 + 16) = 0;
  }

  return result;
}

uint64_t sub_1008D56F4(uint64_t a1)
{
  *(void *)a1 = off_10185F040;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  unint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1008D5758(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

uint64_t sub_1008D57A8(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_10185F0E0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = operator new[](32LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D58F8;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 40) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1008D590C;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1008D58D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008D58F8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D590C(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D5928(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D59E8(a1);
  operator delete(v1);
}

void *sub_1008D593C(void *result, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = (_OWORD *)(result[7] + 32LL * *((unsigned int *)result + 16));
  __int128 v4 = a3[1];
  *uint64_t v3 = *a3;
  v3[1] = v4;
  unsigned int v5 = *((_DWORD *)result + 17);
  unsigned int v6 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v6;
  if (v6 >= v5)
  {
    unsigned int v7 = result;
    uint64_t v9 = result[3];
    uint64_t v8 = result[4];
    uint64_t v10 = result[6];
    uint64_t v11 = result[7];
    uint64_t v12 = (void *)result[2];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1008D5A4C;
    void v13[3] = &unk_10184D6C8;
    v13[4] = v10;
    v13[5] = v9;
    unsigned int v14 = v6;
    v13[6] = v11;
    v13[7] = v8;
    [v12 async:v13];
    uint64_t result = operator new[](32LL * *((unsigned int *)v7 + 17));
    v7[7] = result;
    *((_DWORD *)v7 + 16) = 0;
  }

  return result;
}

uint64_t sub_1008D59E8(uint64_t a1)
{
  *(void *)a1 = off_10185F0E0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  unint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1008D5A4C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

uint64_t sub_1008D5A9C(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_10185F130;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = operator new[](40LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D5BF0;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 40) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1008D5C04;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1008D5BC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008D5BF0(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D5C04(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D5C20(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D5CF0(a1);
  operator delete(v1);
}

void *sub_1008D5C34(void *result, uint64_t a2, __int128 *a3)
{
  uint64_t v3 = result[7] + 40LL * *((unsigned int *)result + 16);
  __int128 v4 = *a3;
  __int128 v5 = a3[1];
  *(void *)(v3 + 32) = *((void *)a3 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *((_DWORD *)result + 17);
  unsigned int v7 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v7;
  if (v7 >= v6)
  {
    uint64_t v8 = result;
    uint64_t v10 = result[3];
    uint64_t v9 = result[4];
    uint64_t v11 = result[6];
    uint64_t v12 = result[7];
    __int128 v13 = (void *)result[2];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1008D5D54;
    void v14[3] = &unk_10184D6C8;
    v14[4] = v11;
    v14[5] = v10;
    unsigned int v15 = v7;
    v14[6] = v12;
    v14[7] = v9;
    [v13 async:v14];
    uint64_t result = operator new[](40LL * *((unsigned int *)v8 + 17));
    v8[7] = result;
    *((_DWORD *)v8 + 16) = 0;
  }

  return result;
}

uint64_t sub_1008D5CF0(uint64_t a1)
{
  *(void *)a1 = off_10185F130;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  unint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1008D5D54(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

uint64_t sub_1008D5DA4(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_10185F180;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = operator new[](40LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D5EF8;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 40) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1008D5F0C;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1008D5ED0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008D5EF8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D5F0C(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D5F28(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D5FF8(a1);
  operator delete(v1);
}

void *sub_1008D5F3C(void *result, uint64_t a2, __int128 *a3)
{
  uint64_t v3 = result[7] + 40LL * *((unsigned int *)result + 16);
  __int128 v4 = *a3;
  __int128 v5 = a3[1];
  *(void *)(v3 + 32) = *((void *)a3 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  unsigned int v6 = *((_DWORD *)result + 17);
  unsigned int v7 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v7;
  if (v7 >= v6)
  {
    uint64_t v8 = result;
    uint64_t v10 = result[3];
    uint64_t v9 = result[4];
    uint64_t v11 = result[6];
    uint64_t v12 = result[7];
    __int128 v13 = (void *)result[2];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1008D605C;
    void v14[3] = &unk_10184D6C8;
    v14[4] = v11;
    v14[5] = v10;
    unsigned int v15 = v7;
    v14[6] = v12;
    v14[7] = v9;
    [v13 async:v14];
    uint64_t result = operator new[](40LL * *((unsigned int *)v8 + 17));
    v8[7] = result;
    *((_DWORD *)v8 + 16) = 0;
  }

  return result;
}

uint64_t sub_1008D5FF8(uint64_t a1)
{
  *(void *)a1 = off_10185F180;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  unint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1008D605C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

void *sub_1008D60B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10185F288;
  result[1] = v3;
  return result;
}

uint64_t sub_1008D60E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10185F288;
  a2[1] = v2;
  return result;
}

uint64_t sub_1008D6108(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008D6144()
{
}

void *sub_1008D6150(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_10185F308;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D6284;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1008D6298;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1008D625C(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D6284(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D6298(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D62B4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D6570(a1);
  operator delete(v1);
}

id sub_1008D62C8(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x17) {
    size_t v8 = 23LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x18)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v29 = 0x800000010133FF71LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 23LL;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v20 = 136315906;
      unint64_t v21 = 0x800000010133FF71LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v22 = 2048;
      uint64_t v23 = 23LL;
      __int16 v24 = 2048;
      unint64_t v25 = a4;
      __int16 v26 = 1024;
      int v27 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v20,  38,  v15,  LODWORD(v16[0]));
      char v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardMotionData>::dispatchData(int, c onst void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardMotionData]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1008D65C8;
  v16[3] = &unk_10185F350;
  v16[4] = v10;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)__dst;
  *(void *)&v18[15] = *(void *)&__dst[15];
  __int128 v17 = *(_OWORD *)(a1 + 16);
  return [v11 async:v16];
}

uint64_t sub_1008D6570(uint64_t a1)
{
  *(void *)a1 = off_10185F308;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1008D65C8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 56, *(void *)(a1 + 48));
  }
  return result;
}

void *sub_1008D6608(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_10185F380;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D673C;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1008D6750;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1008D6714(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D673C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D6750(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D676C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D6A18(a1);
  operator delete(v1);
}

id sub_1008D6780(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    unsigned int v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v30 = 0x800000010133FFFBLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v31 = 2048;
      uint64_t v32 = 1LL;
      __int16 v33 = 2048;
      unint64_t v34 = a4;
      __int16 v35 = 1024;
      int v36 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v21 = 136315906;
      unint64_t v22 = 0x800000010133FFFBLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v23 = 2048;
      uint64_t v24 = 1LL;
      __int16 v25 = 2048;
      unint64_t v26 = a4;
      __int16 v27 = 1024;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v21,  38,  (size_t)v13,  v14);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardKeyPressData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardKeyPressData]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  __int128 v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  char v15 = sub_1008D6A70;
  int v16 = &unk_10185F3C8;
  uint64_t v17 = v8;
  char v19 = __dst;
  __int128 v18 = *(_OWORD *)(a1 + 16);
  return [v9 async:&v13];
}

uint64_t sub_1008D6A18(uint64_t a1)
{
  *(void *)a1 = off_10185F380;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1008D6A70(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 56, *(void *)(a1 + 48));
  }
  return result;
}

void *sub_1008D6AB0(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_10185F3F8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D6BE4;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1008D6BF8;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1008D6BBC(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D6BE4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D6BF8(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D6C14(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D6EC0(a1);
  operator delete(v1);
}

id sub_1008D6C28(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    unsigned int v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v30 = 0x800000010134007FLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v31 = 2048;
      uint64_t v32 = 1LL;
      __int16 v33 = 2048;
      unint64_t v34 = a4;
      __int16 v35 = 1024;
      int v36 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v21 = 136315906;
      unint64_t v22 = 0x800000010134007FLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v23 = 2048;
      uint64_t v24 = 1LL;
      __int16 v25 = 2048;
      unint64_t v26 = a4;
      __int16 v27 = 1024;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v21,  38,  (size_t)v13,  v14);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::TrackpadData>::dispatchData(int, const v oid *, size_t) [T = CLKeyboardMotionNotifier::TrackpadData]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  __int128 v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  char v15 = sub_1008D6F18;
  int v16 = &unk_10185F3C8;
  uint64_t v17 = v8;
  char v19 = __dst;
  __int128 v18 = *(_OWORD *)(a1 + 16);
  return [v9 async:&v13];
}

uint64_t sub_1008D6EC0(uint64_t a1)
{
  *(void *)a1 = off_10185F3F8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1008D6F18(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 56, *(void *)(a1 + 48));
  }
  return result;
}

void *sub_1008D6F58(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_10185F448;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D708C;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1008D70A0;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1008D7064(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D708C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D70A0(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D70BC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D7368(a1);
  operator delete(v1);
}

id sub_1008D70D0(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    unsigned int v7 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v30 = 0x8000000101340103LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v31 = 2048;
      uint64_t v32 = 1LL;
      __int16 v33 = 2048;
      unint64_t v34 = a4;
      __int16 v35 = 1024;
      int v36 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v21 = 136315906;
      unint64_t v22 = 0x8000000101340103LL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v23 = 2048;
      uint64_t v24 = 1LL;
      __int16 v25 = 2048;
      unint64_t v26 = a4;
      __int16 v27 = 1024;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v21,  38,  (size_t)v13,  v14);
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardAttachedData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardAttachedData]",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  uint64_t v8 = *(void *)(a1 + 48);
  id v9 = *(void **)(a1 + 32);
  __int128 v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  char v15 = sub_1008D73C0;
  int v16 = &unk_10185F3C8;
  uint64_t v17 = v8;
  char v19 = __dst;
  __int128 v18 = *(_OWORD *)(a1 + 16);
  return [v9 async:&v13];
}

uint64_t sub_1008D7368(uint64_t a1)
{
  *(void *)a1 = off_10185F448;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1008D73C0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 56, *(void *)(a1 + 48));
  }
  return result;
}

__n128 sub_1008D7400(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10185F498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(va, 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1008D7444(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185F498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1008D7470(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  __int128 v4 = (void *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

uint64_t sub_1008D7490(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1008D74CC()
{
}

uint64_t sub_1008D74D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void *sub_1008D7544(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_10185F530;
  result[1] = v3;
  return result;
}

uint64_t sub_1008D7578(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10185F530;
  a2[1] = v2;
  return result;
}

uint64_t sub_1008D7598(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1008D75D4()
{
}

void *sub_1008D75E0(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_10185F5B0;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1008D7714;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1008D7728;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1008D76EC(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D7714(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1008D7728(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1008D7744(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008D7A10(a1);
  operator delete(v1);
}

id sub_1008D7758(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x50) {
    size_t v8 = 80LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x51)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315906;
      unint64_t v35 = 0x800000010134B56CLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v36 = 2048;
      uint64_t v37 = 80LL;
      __int16 v38 = 2048;
      unint64_t v39 = a4;
      __int16 v40 = 1024;
      int v41 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      int v26 = 136315906;
      unint64_t v27 = 0x800000010134B56CLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v28 = 2048;
      uint64_t v29 = 80LL;
      __int16 v30 = 2048;
      unint64_t v31 = a4;
      __int16 v32 = 1024;
      int v33 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v26,  38,  v17,  LODWORD(v18[0]));
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>::dispatchData(int, const void *, size_ t) [T = CLMobility::SPUGaitMetrics]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int128 v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1008D7A68;
  v18[3] = &unk_10185F5F8;
  _DWORD v18[4] = v12;
  v18[5] = v11;
  __int128 v21 = __dst[2];
  __int128 v22 = __dst[3];
  __int128 v23 = __dst[4];
  __int128 v20 = __dst[1];
  __int128 v19 = __dst[0];
  uint64_t v24 = v10;
  return [v13 async:v18];
}

uint64_t sub_1008D7A10(uint64_t a1)
{
  *(void *)a1 = off_10185F5B0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1008D7A68(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 128));
  }
  return result;
}

void sub_1008D7AAC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1008D7B10()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1008D7B84(_Unwind_Exception *a1)
{
}

void sub_1008D7B9C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1008D7C38(_Unwind_Exception *a1)
{
}

void sub_1008D7C50()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1008D7CDC(_Unwind_Exception *a1)
{
}

void sub_1008D7CF4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_10133F508;
      v1[3] = unk_10133F518;
      v1[4] = xmmword_10133F528;
      v1[0] = xmmword_10133F4E8;
      v1[1] = unk_10133F4F8;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1008D7DC8(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D7DE0()
{
  xmmword_101999198 = 0u;
  unk_1019991A8 = 0u;
  xmmword_1019991B8 = 0u;
  __cxa_atexit((void (*)(void *))sub_1008C5FE8, &xmmword_101999198, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_1019991C8 = 0u;
  unk_1019991D8 = 0u;
  xmmword_1019991E8 = 0u;
  return __cxa_atexit((void (*)(void *))sub_1008C6DE4, &qword_1019991C8, (void *)&_mh_execute_header);
}

double sub_1008D82E0(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

double sub_1008D82E8(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double sub_1008D82F0(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

void sub_1008D82F8(uint64_t *a1, double *a2)
{
}

void sub_1008D8300(uint64_t a1, double *a2, uint64_t *a3)
{
  __int128 v5 = operator new(0x20uLL);
  v5[1] = *(_OWORD *)a2;
  uint64_t v6 = *a3;
  *(void *)__int128 v5 = *a3;
  *((void *)v5 + 1) = a3;
  *(void *)(v6 + _Block_object_dispose(va, 8) = v5;
  *a3 = (uint64_t)v5;
  uint64_t v7 = a3[2];
  BOOL v8 = __CFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  a3[2] = v9;
  if (!v8)
  {
    do
    {
      uint64_t v10 = (double *)a3[1];
      if (vabdd_f64(v10[2], *a2) <= 3.0) {
        break;
      }
      double v11 = *v10;
      *(double *)(*(void *)&v11 + 8LL) = v10[1];
      **((double **)v10 + 1) = v11;
      a3[2] = v9 - 1;
      operator delete(v10);
      uint64_t v9 = a3[2];
    }

    while (v9);
  }

  uint64_t v12 = a3[1];
  if ((uint64_t *)v12 != a3)
  {
    int v13 = 0;
    double v14 = 0.0;
    do
    {
      double v14 = v14 + *(double *)(v12 + 24);
      ++v13;
      uint64_t v12 = *(void *)(v12 + 8);
    }

    while ((uint64_t *)v12 != a3);
  }

void sub_1008D83D8(uint64_t a1, double *a2)
{
}

void sub_1008D83E0(uint64_t a1, double *a2)
{
}

double sub_1008D83E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  HIDWORD(v11) = 0;
  if (sub_1006D0314((float *)&v11 + 1, *(double *)(a1 + 4), *(double *)(a1 + 12)))
  {
    *(_DWORD *)(a2 + 316) = HIDWORD(v11);
    *(_DWORD *)(a2 + 312) = 1;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10185F7E0);
  }
  uint64_t v4 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float *)(a2 + 316);
    int v6 = *(_DWORD *)(a2 + 312);
    *(_DWORD *)__int128 buf = 134349312;
    double v17 = v5;
    __int16 v18 = 1026;
    int v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Wifi,undulation,%{public}lf, model, %{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10185F7E0);
    }
    double v8 = *(float *)(a2 + 316);
    int v9 = *(_DWORD *)(a2 + 312);
    int v12 = 134349312;
    double v13 = v8;
    __int16 v14 = 1026;
    int v15 = v9;
    LODWORD(v11) = 18;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "Wifi,undulation,%{public}lf, model, %{public}d",  &v12,  v11);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLDaemonLocationPrivate CL::Wifi1::Policies::LocationPrivateCalculation::populateLocationPrivate(const CL::Wifi1:: Types::ComputedLocation &)",  "%s\n",  v10);
  }

  *(double *)(a2 + 32) = sub_101171D38();
  *(double *)(a2 + 344) = sub_101171D4C();
  *(void *)(a2 + 24) = 0LL;
  double result = *(double *)(a1 + 168);
  *(double *)(a2 + 600) = result;
  *(_BYTE *)(a2 + 60_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 180);
  *(_DWORD *)(a2 + 620) = *(_DWORD *)(a1 + 176);
  return result;
}

void sub_1008D8620(_Unwind_Exception *a1)
{
}

void sub_1008D8638(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1008D8664()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1008D8700(_Unwind_Exception *a1)
{
}

void sub_1008D8718()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1008D87A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D87BC()
{
  uint64_t result = qword_1019A1838;
  if (qword_1019A1838) {
    return (*(uint64_t (**)(uint64_t))(*(void *)qword_1019A1838 + 8LL))(qword_1019A1838);
  }
  return result;
}

void sub_1008D87D8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_101999208 & 1) == 0)
  {
    byte_101999208 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionLogEntry.pb.cc",  a4);
    sub_10080F3B0(v4, v5, v6, v7);
    double v8 = operator new(0x30uLL);
    _DWORD v8[4] = 0xFFFFFFFFLL;
    *((_DWORD *)v8 + 10) = 0;
    void *v8 = off_10185F810;
    v8[1] = 0LL;
    v8[2] = 0LL;
    void v8[3] = 0LL;
    qword_1019A1838 = (uint64_t)v8;
    uint64_t v12 = sub_10081376C((uint64_t)v8, v9, v10, v11);
    v8[1] = v12;
    uint64_t v16 = sub_100817148(v12, v13, v14, v15);
    v8[2] = v16;
    void v8[3] = sub_10081B810(v16, v17, v18, v19);
    wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_1008D87BC,  v20);
  }

double sub_1008D8880(uint64_t a1)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)a1 = off_10185F810;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return result;
}

void sub_1008D88A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionLogEntry.pb.cc",  311LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 32);
      if (!sub_1001D8D58(v6)) {
        sub_101253068();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 2u;
      uint64_t v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = operator new(0x60uLL);
        sub_10080F874((uint64_t)v7);
        *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A1838 + 8);
      }
      sub_100813208((uint64_t)v7, v8);
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 4u;
      uint64_t v9 = *(_DWORD **)(a1 + 16);
      if (!v9)
      {
        uint64_t v9 = operator new(0x30uLL);
        sub_10080F8A8((uint64_t)v9);
        *(void *)(a1 + 16) = v9;
      }

      uint64_t v10 = *(void *)(a2 + 16);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_1019A1838 + 16);
      }
      sub_100816F30(v9, v10);
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 8u;
      uint64_t v11 = *(void **)(a1 + 24);
      if (!v11)
      {
        uint64_t v11 = operator new(0x40uLL);
        sub_10080F8CC((uint64_t)v11);
        *(void *)(a1 + 24) = v11;
      }

      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        uint64_t v12 = *(void *)(qword_1019A1838 + 24);
      }
      sub_10081B4B0((uint64_t)v11, v12);
    }
  }

void sub_1008D8A28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_1008D8A58(void *result)
{
  if ((void *)qword_1019A1838 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    double result = (void *)v1[3];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_1008D8AC8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10185F810;
  sub_1008D8A58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1008D8AF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10185F810;
  sub_1008D8A58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_1008D8B2C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1838;
  if (!qword_1019A1838)
  {
    sub_1008D87D8(0LL, a2, a3, a4);
    return qword_1019A1838;
  }

  return result;
}

double sub_1008D8B58()
{
  unsigned __int8 v0 = operator new(0x30uLL);
  *(void *)&double result = 0xFFFFFFFFLL;
  v0[4] = 0xFFFFFFFFLL;
  *((_DWORD *)v0 + 10) = 0;
  *unsigned __int8 v0 = off_10185F810;
  v0[1] = 0LL;
  v0[2] = 0LL;
  v0[3] = 0LL;
  return result;
}

uint64_t sub_1008D8B8C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 40);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 32) = -1;
    if ((v2 & 2) != 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
        double result = sub_1008137E0(result);
        int v2 = *(_DWORD *)(v1 + 40);
      }
    }

    if ((v2 & 4) != 0)
    {
      double result = *(void *)(v1 + 16);
      if (result)
      {
        double result = sub_1008171AC(result);
        int v2 = *(_DWORD *)(v1 + 40);
      }
    }

    if ((v2 & 8) != 0)
    {
      double result = *(void *)(v1 + 24);
      if (result) {
        double result = sub_10081B874(result);
      }
    }
  }

  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_1008D8BF4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallbacuint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallbacuint64_t k = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + _Block_object_dispose(va, 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
          goto LABEL_22;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
        if ((_DWORD)result)
        {
          unsigned int v9 = v39;
LABEL_22:
          if (sub_1001D8D58(v9))
          {
            if (!sub_1001D8D58(v9)) {
              sub_101253068();
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }

          uint64_t v11 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
          {
            *((void *)this + 1) = v11 + 1;
            goto LABEL_28;
          }

          continue;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
LABEL_28:
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v12 = *(void **)(a1 + 8);
        if (!v12)
        {
          uint64_t v12 = operator new(0x60uLL);
          sub_10080F874((uint64_t)v12);
          *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
        }

        char v13 = (char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v39)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v39 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0LL;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        __int128 v21 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v21 + 1;
LABEL_42:
        *(_DWORD *)(a1 + 40) |= 4u;
        __int128 v22 = *(int **)(a1 + 16);
        if (!v22)
        {
          __int128 v22 = (int *)operator new(0x30uLL);
          sub_10080F8A8((uint64_t)v22);
          *(void *)(a1 + 16) = v22;
        }

        __int128 v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v39)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v39 = *v23;
          *((void *)this + 1) = v23 + 1;
        }

        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0LL;
        }
        int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        int v28 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v28, 1);
        int v29 = v28 - 1;
        if (v29 < 0 == v19) {
          *((_DWORD *)this + 14) = v29;
        }
        __int16 v30 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v30 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 40) |= 8u;
        unint64_t v31 = *(void **)(a1 + 24);
        if (!v31)
        {
          unint64_t v31 = operator new(0x40uLL);
          sub_10080F8CC((uint64_t)v31);
          *(void *)(a1 + 24) = v31;
        }

        __int16 v32 = (char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v39)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v39 = *v32;
          *((void *)this + 1) = v32 + 1;
        }

        int v33 = *((_DWORD *)this + 14);
        int v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34) {
          return 0LL;
        }
        int v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        int v37 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v19) {
          *((_DWORD *)this + 14) = v38;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + _Block_object_dispose(va, 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        continue;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_42;
        }
        goto LABEL_17;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        goto LABEL_56;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }

    return result;
  }

void sub_1008D9014(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D9030( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1838 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    goto LABEL_13;
  }

uint64_t sub_1008D90F4(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_34;
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      goto LABEL_19;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_1019A1838 + 8);
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008144E0(v6, a2);
  int v8 = (int)v7;
  else {
    int v9 = 1;
  }
  uint64_t v4 = (v4 + v8 + v9 + 1);
  int v3 = *(_DWORD *)(a1 + 40);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1838 + 16);
  }
  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1008175E0(v10, a2);
  int v12 = (int)v11;
  else {
    int v13 = 1;
  }
  uint64_t v4 = (v4 + v12 + v13 + 1);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_28:
    uint64_t v14 = *(void *)(a1 + 24);
    if (!v14) {
      uint64_t v14 = *(void *)(qword_1019A1838 + 24);
    }
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10081C0F4(v14, a2);
    int v17 = (int)v15;
    else {
      int v18 = 1;
    }
    uint64_t v4 = (v4 + v17 + v18 + 1);
  }

void sub_1008D9250(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1008D929C()
{
  return 1LL;
}

void *sub_1008D92A4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LogEntry");
}

char *sub_1008D92B8(char *a1)
{
  *a1 = 0;
  int v2 = a1 + 8;
  bzero(a1 + 8, 0x104A0uLL);
  *(_OWORD *)(a1 + 124) = 0u;
  *((void *)a1 + 2) = 0xBFF0000000000000LL;
  *((void *)a1 + 3) = 0LL;
  *((void *)a1 + 5) = 0LL;
  *((void *)a1 + 4) = 0LL;
  *((_WORD *)a1 + 24) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 6_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(void *)(a1 + 113) = 0LL;
  a1[121] = 1;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 18_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 26_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  *((_DWORD *)a1 + 83) = 2139095039;
  *((int32x2_t *)a1 + 42) = vdup_n_s32(0x7F7FFFFFu);
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *(_DWORD *)(v2 + 383) = 0;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 42_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 443) = 0;
  *((_OWORD *)a1 + 2_Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *(void *)(a1 + 511) = 0LL;
  *((_OWORD *)v2 + 32) = 0u;
  *((_OWORD *)v2 + 33) = 0u;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *(void *)(v2 + 575) = 0LL;
  bzero(a1 + 592, 0x10003uLL);
  a1[66520] = 0;
  *(_OWORD *)(a1 + 6648_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 66504) = 0u;
  *(_OWORD *)(a1 + 66456) = 0u;
  *(_OWORD *)(a1 + 66472) = 0u;
  *(_OWORD *)(a1 + 66424) = 0u;
  *(_OWORD *)(a1 + 66440) = 0u;
  *(_OWORD *)(a1 + 66392) = 0u;
  *(_OWORD *)(a1 + 6640_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 66360) = 0u;
  *(_OWORD *)(a1 + 66376) = 0u;
  *(_OWORD *)(a1 + 6632_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 66344) = 0u;
  *(_OWORD *)(a1 + 66296) = 0u;
  *(_OWORD *)(a1 + 66312) = 0u;
  *(_OWORD *)(a1 + 66264) = 0u;
  *(_OWORD *)(a1 + 66280) = 0u;
  *(_OWORD *)(a1 + 66232) = 0u;
  *(_OWORD *)(a1 + 6624_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 66200) = 0u;
  *(_OWORD *)(a1 + 66216) = 0u;
  *(_OWORD *)(a1 + 6616_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 66184) = 0u;
  *(_OWORD *)(a1 + 66136) = 0u;
  *(_OWORD *)(a1 + 66152) = 0u;
  *((_DWORD *)a1 + 16680) = 0;
  *((_OWORD *)a1 + 416_Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)a1 + 4169) = 0u;
  *((_OWORD *)a1 + 4166) = 0u;
  *((_OWORD *)a1 + 4167) = 0u;
  *((_OWORD *)a1 + 4164) = 0u;
  *((_OWORD *)a1 + 4165) = 0u;
  *((_OWORD *)a1 + 4162) = 0u;
  *((_OWORD *)a1 + 4163) = 0u;
  *((_OWORD *)a1 + 4160) = 0u;
  *((_OWORD *)a1 + 4161) = 0u;
  *((_OWORD *)a1 + 415_Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)a1 + 4159) = 0u;
  *(_OWORD *)(a1 + 6672_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 66744) = 0u;
  *(_OWORD *)(a1 + 66760) = 0u;
  *(_OWORD *)(a1 + 66776) = 0u;
  *(_OWORD *)(a1 + 66792) = 0u;
  *(_OWORD *)(a1 + 6680_Block_object_dispose(va, 8) = 0u;
  sub_1002E4C3C(a1 + 66824, "CLFitnessTrackingAllDayAWD", 1LL, 1LL);
  if (&MCEffectiveSettingsChangedNotification)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  a1,  (CFNotificationCallback)sub_1008D94B8,  MCEffectiveSettingsChangedNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  sub_1008D94C0((uint64_t)a1);
  return a1;
}

void sub_1008D9494(_Unwind_Exception *a1)
{
}

void sub_1008D94B8(uint64_t a1, uint64_t a2)
{
}

void sub_1008D94C0(uint64_t a1)
{
  uint64_t v11 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __int16 v13 = 256;
  *(void *)&double v2 = objc_opt_class(&OBJC_CLASS___MCProfileConnection).n128_u64[0];
  if (v3)
  {
    unsigned int v4 = objc_msgSend( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection",  v2),  "isWheelchairDataSubmissionAllowed");
    *(_BYTE *)a1 = v4;
    if (!v4) {
      goto LABEL_5;
    }
LABEL_11:
    if ((_BYTE)v13) {
      pthread_mutex_unlock(v12);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v11 + 24LL))(v11);
    }
    return;
  }

  if (*(_BYTE *)a1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v5 = sub_1006E27E8();
  sub_100413284(v5, &v9);
  sub_1002A6F64(v9, "EnableWheelchairAWDCollection", (BOOL *)a1);
  uint64_t v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  if (HIBYTE(v13)) {
    goto LABEL_11;
  }
}

void sub_1008D95BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va);
  sub_1011C52D0((uint64_t)va1);
  _Unwind_Resume(a1);
}

char *sub_1008D95E8()
{
  unsigned __int8 v0 = (char *)operator new(0x10518uLL);
  uint64_t result = sub_1008D92B8(v0);
  qword_1019A1840 = (uint64_t)v0;
  return result;
}

void sub_1008D961C(_Unwind_Exception *a1)
{
}

uint64_t sub_1008D9630()
{
  if (qword_101999228 != -1) {
    dispatch_once(&qword_101999228, &stru_10185F890);
  }
  return qword_1019A1840;
}

uint64_t sub_1008D9674(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = (double *)(a1 + 66736);
  uint64_t v6 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  if (a2)
  {
    if (a2 == 2)
    {
      ++v5;
    }

    else if (a2 != 1)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
    }
  }

  else
  {
    v5 += 2;
  }

  double *v5 = *v5 + a3;
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

uint64_t sub_1008D9704(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  uint64_t v9 = (float *)(a1 + 66760);
  uint64_t v10 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  int v12 = (_DWORD *)(a3 + 8);
  int v11 = *(_DWORD *)(a3 + 8);
  if (v11 == 90603)
  {
    float *v9 = *v9 + a4;
  }

  else if (*(_BYTE *)(a3 + 208))
  {
    if ((CLMotionActivity::isTypePedestrian() & 1) != 0 || (*v12 - 61) <= 1)
    {
      v9[1] = v9[1] + a4;
    }

    else if (CLMotionActivity::isTypeSwimming())
    {
      int v9[2] = v9[2] + a4;
    }

    else if (CLMotionActivity::isTypeCycling(*v12))
    {
      v9[3] = v9[3] + a4;
    }

    else
    {
      v9[4] = v9[4] + a4;
    }
  }

  else if (v11 == 7)
  {
    if (a5 <= 1.6)
    {
      v9[8] = v9[8] + a4;
    }

    else if (a2)
    {
      void v9[7] = v9[7] + a4;
    }

    else
    {
      v9[6] = v9[6] + a4;
    }
  }

  else if (v11 == 11805)
  {
    v9[5] = v9[5] + a4;
  }

  else if (CLMotionActivity::isStatic((CLMotionActivity *)(a3 + 8)))
  {
    v9[9] = v9[9] + a4;
  }

  else
  {
    v9[10] = v9[10] + a4;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
}

void sub_1008D98AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D98C4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  ++*(_DWORD *)(a1 + 104);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
}

uint64_t sub_1008D9918(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)(a1 + 66808);
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  ++*v3;
  if (a2) {
    ++v3[1];
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

uint64_t sub_1008D9988(uint64_t a1, float a2, float a3)
{
  uint64_t v5 = (float *)(a1 + 66816);
  uint64_t v6 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  float v7 = v5[1] + a3;
  float *v5 = *v5 + a2;
  v5[1] = v7;
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

uint64_t sub_1008D99F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  v5.n128_u32[0] = *(_DWORD *)(a2 + 27);
  v6.n128_u32[0] = *(_DWORD *)(a2 + 31);
  float v7 = *(float *)(a2 + 35);
  float v8 = *(float *)(a2 + 39);
  float v9 = *(float *)(a2 + 43);
  float v10 = *(float *)(a2 + 47);
  ++*(_DWORD *)(a1 + 116);
  uint64_t v11 = *(void *)(a1 + 184);
  int v12 = *(float **)(a1 + 192);
  uint64_t v13 = (uint64_t)v12 - v11;
  if ((unint64_t)v12 - v11 <= 0x18F)
  {
    float v14 = v6.n128_f32[0] - v5.n128_f32[0];
    unint64_t v15 = *(void *)(a1 + 200);
    if ((unint64_t)v12 >= v15)
    {
      uint64_t v17 = v13 >> 2;
      uint64_t v18 = v15 - v11;
      else {
        uint64_t v19 = v18 >> 1;
      }
      else {
        unint64_t v20 = v19;
      }
      __int128 v21 = (char *)sub_10000956C(a1 + 200, v20);
      __int128 v22 = *(char **)(a1 + 184);
      __int128 v23 = *(char **)(a1 + 192);
      int v24 = (float *)&v21[4 * v17];
      int v26 = &v21[4 * v25];
      *int v24 = v14;
      unsigned int v16 = v24 + 1;
      while (v23 != v22)
      {
        unsigned __int32 v27 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        v5.n128_u32[0] = v27;
        *((_DWORD *)v24-- - 1) = v27;
      }

      *(void *)(a1 + 184) = v24;
      *(void *)(a1 + 192) = v16;
      *(void *)(a1 + 200) = v26;
      if (v22) {
        operator delete(v22);
      }
    }

    else
    {
      float *v12 = v14;
      unsigned int v16 = v12 + 1;
    }

    unint64_t v28 = *(void *)(a1 + 224);
    *(void *)(a1 + 192) = v16;
    float v29 = v8 - v7;
    __int16 v30 = *(float **)(a1 + 216);
    if ((unint64_t)v30 >= v28)
    {
      __int16 v32 = *(float **)(a1 + 208);
      uint64_t v33 = v30 - v32;
      unint64_t v34 = v28 - (void)v32;
      unint64_t v35 = (uint64_t)(v28 - (void)v32) >> 1;
      if (v35 <= v33 + 1) {
        unint64_t v35 = v33 + 1;
      }
      if (v34 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        int v37 = (char *)sub_10000956C(a1 + 224, v36);
        __int16 v32 = *(float **)(a1 + 208);
        __int16 v30 = *(float **)(a1 + 216);
      }

      else
      {
        int v37 = 0LL;
      }

      int v38 = (float *)&v37[4 * v33];
      unsigned int v39 = &v37[4 * v36];
      *int v38 = v29;
      unint64_t v31 = v38 + 1;
      while (v30 != v32)
      {
        unsigned __int32 v40 = *((_DWORD *)v30-- - 1);
        v5.n128_u32[0] = v40;
        *((_DWORD *)v38-- - 1) = v40;
      }

      *(void *)(a1 + 20_Block_object_dispose(va, 8) = v38;
      *(void *)(a1 + 216) = v31;
      *(void *)(a1 + 224) = v39;
      if (v32) {
        operator delete(v32);
      }
    }

    else
    {
      *__int16 v30 = v29;
      unint64_t v31 = v30 + 1;
    }

    unint64_t v41 = *(void *)(a1 + 248);
    *(void *)(a1 + 216) = v31;
    float v42 = v10 - v9;
    uint64_t v43 = *(float **)(a1 + 240);
    if ((unint64_t)v43 >= v41)
    {
      unint64_t v45 = *(float **)(a1 + 232);
      uint64_t v46 = v43 - v45;
      unint64_t v47 = v41 - (void)v45;
      unint64_t v48 = (uint64_t)(v41 - (void)v45) >> 1;
      if (v48 <= v46 + 1) {
        unint64_t v48 = v46 + 1;
      }
      if (v47 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49)
      {
        uint64_t v50 = (char *)sub_10000956C(a1 + 248, v49);
        unint64_t v45 = *(float **)(a1 + 232);
        uint64_t v43 = *(float **)(a1 + 240);
      }

      else
      {
        uint64_t v50 = 0LL;
      }

      std::stringbuf v51 = (float *)&v50[4 * v46];
      uint64_t v52 = &v50[4 * v49];
      float *v51 = v42;
      __int16 v44 = v51 + 1;
      while (v43 != v45)
      {
        unsigned __int32 v53 = *((_DWORD *)v43-- - 1);
        v5.n128_u32[0] = v53;
        *((_DWORD *)v51-- - 1) = v53;
      }

      *(void *)(a1 + 232) = v51;
      *(void *)(a1 + 240) = v44;
      *(void *)(a1 + 24_Block_object_dispose(va, 8) = v52;
      if (v45) {
        operator delete(v45);
      }
    }

    else
    {
      float *v43 = v42;
      __int16 v44 = v43 + 1;
    }

    *(void *)(a1 + 240) = v44;
  }

  return (*(uint64_t (**)(uint64_t, __n128, __n128))(*(void *)v4 + 24LL))(v4, v5, v6);
}

void sub_1008D9CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008D9CC8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 121) = a2;
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_1008D9CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66136;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __n128 v5 = *(void **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC(v3 + 16, v12);
      float v8 = *(void **)v3;
      __n128 v5 = *(void **)(v3 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = a2;
    float v7 = v5 + 1;
  }

  *(void *)(v3 + _Block_object_dispose(va, 8) = v7;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10185F8B0);
  }
  uint64_t v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Updating impact cancelation reason 0x%llx",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185F8B0);
    }
    int v21 = 134217984;
    uint64_t v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Updating impact cancelation reason 0x%llx",  &v21);
    unint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingAllDayAWD::updateImpactCancelationReason(const uint64_t)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1008D9F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008D9F98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66824;
  uint64_t v4 = a1 + 66160;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __n128 v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC(v4 + 16, v12);
      float v8 = *(void **)v4;
      __n128 v5 = *(void **)(v4 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = a2;
    float v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10185F8B0);
  }
  uint64_t v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Updating outdoor cycling cancelation reason 0x%llx",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185F8B0);
    }
    int v21 = 134217984;
    uint64_t v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Updating outdoor cycling cancelation reason 0x%llx",  &v21);
    unint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingAllDayAWD::updateOutdoorCyclingWorkoutImpactCancellationReason(const uint64_t)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

void sub_1008DA234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008DA25C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66184;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __n128 v5 = *(void **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC(v3 + 16, v12);
      float v8 = *(void **)v3;
      __n128 v5 = *(void **)(v3 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = a2;
    float v7 = v5 + 1;
  }

  *(void *)(v3 + _Block_object_dispose(va, 8) = v7;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10185F8B0);
  }
  uint64_t v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Updating outdoor walking cancelation reason 0x%llx",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185F8B0);
    }
    int v21 = 134217984;
    uint64_t v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Updating outdoor walking cancelation reason 0x%llx",  &v21);
    unint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingAllDayAWD::updateOutdoorWalkingImpactCancellationReason(const uint64_t)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1008DA4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008DA51C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66824;
  uint64_t v4 = a1 + 66208;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __n128 v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC(v4 + 16, v12);
      float v8 = *(void **)v4;
      __n128 v5 = *(void **)(v4 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = a2;
    float v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10185F8B0);
  }
  uint64_t v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Updating outdoor running cancelation reason 0x%llx",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185F8B0);
    }
    int v21 = 134217984;
    uint64_t v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Updating outdoor running cancelation reason 0x%llx",  &v21);
    unint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingAllDayAWD::updateOutdoorRunningImpactCancellationReason(const uint64_t)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

void sub_1008DA7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008DA7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66232;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __n128 v5 = *(void **)(v3 + 8);
  unint64_t v6 = *(void *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v3;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v3) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC(v3 + 16, v12);
      float v8 = *(void **)v3;
      __n128 v5 = *(void **)(v3 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v3 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = a2;
    float v7 = v5 + 1;
  }

  *(void *)(v3 + _Block_object_dispose(va, 8) = v7;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10185F8B0);
  }
  uint64_t v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Updating hiking cancelation reason 0x%llx",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185F8B0);
    }
    int v21 = 134217984;
    uint64_t v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Updating hiking cancelation reason 0x%llx",  &v21);
    unint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingAllDayAWD::updateHikingWorkoutImpactCancellationReason(const uint64_t)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

void sub_1008DAA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008DAAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 66824;
  uint64_t v4 = a1 + 66256;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  __n128 v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    float v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC(v4 + 16, v12);
      float v8 = *(void **)v4;
      __n128 v5 = *(void **)(v4 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)float v14 = a2;
    float v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = a2;
    float v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10185F8B0);
  }
  uint64_t v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v24 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFitnessTrackingAllDayAWD: Updating other workout cancelation reason 0x%llx",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185F8B0);
    }
    int v21 = 134217984;
    uint64_t v22 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFitnessTrackingAllDayAWD: Updating other workout cancelation reason 0x%llx",  &v21);
    unint64_t v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingAllDayAWD::updateOtherWorkoutImpactCancellationReason(const uint64_t)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
}

void sub_1008DAD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1008DAD64(uint64_t a1, float a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  *(float *)(a1 + 332) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

float sub_1008DADBC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  float v3 = *(float *)(a1 + 332);
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v3;
}

uint64_t sub_1008DAE14(uint64_t a1, float a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  *(float *)(a1 + 336) = a2;
  *(_BYTE *)(a1 + 32_Block_object_dispose(va, 8) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

float sub_1008DAE74(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  if (*(_BYTE *)(a1 + 328)) {
    float v3 = *(float *)(a1 + 336);
  }
  else {
    float v3 = -1.0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v3;
}

uint64_t sub_1008DAEDC(uint64_t a1, float a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  *(float *)(a1 + 340) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
}

float sub_1008DAF34(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  float v3 = *(float *)(a1 + 340);
  (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  return v3;
}

uint64_t sub_1008DAF8C(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v7 = a1 + 66824;
  float v8 = (void **)(a1 + 66448);
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  uint64_t v9 = v8[1];
  uint64_t v10 = (char *)v9 - (_BYTE *)*v8;
  if ((unint64_t)v10 <= 0xC7)
  {
    unint64_t v11 = (unint64_t)v8[2];
    if ((unint64_t)v9 >= v11)
    {
      uint64_t v13 = v10 >> 1;
      unint64_t v14 = v11 - (void)*v8;
      if (v14 <= (v10 >> 1) + 1) {
        uint64_t v15 = v13 + 1;
      }
      else {
        uint64_t v15 = v11 - (void)*v8;
      }
      if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)sub_1008DB604((uint64_t)(v8 + 2), v16);
      uint64_t v18 = (char *)*v8;
      uint64_t v19 = (char *)v8[1];
      unint64_t v20 = &v17[2 * v13];
      uint64_t v22 = &v17[2 * v21];
      *(_WORD *)unint64_t v20 = a2;
      unint64_t v12 = v20 + 2;
      while (v19 != v18)
      {
        __int16 v23 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v20 - 1) = v23;
        v20 -= 2;
      }

      void *v8 = v20;
      v8[1] = v12;
      v8[2] = v22;
      if (v18) {
        operator delete(v18);
      }
    }

    else
    {
      _WORD *v9 = a2;
      unint64_t v12 = v9 + 1;
    }

    unint64_t v24 = (unint64_t)v8[5];
    v8[1] = v12;
    uint64_t v25 = (char *)v8[4];
    if ((unint64_t)v25 >= v24)
    {
      unsigned __int32 v27 = (char *)v8[3];
      uint64_t v28 = v25 - v27;
      if (v25 - v27 <= -3) {
        sub_100007008();
      }
      uint64_t v29 = v28 >> 1;
      unint64_t v30 = v24 - (void)v27;
      if (v30 <= (v28 >> 1) + 1) {
        unint64_t v31 = v29 + 1;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v30 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v32 = v31;
      }
      if (v32)
      {
        uint64_t v33 = (char *)sub_1008DB604((uint64_t)(v8 + 5), v32);
        unsigned __int32 v27 = (char *)v8[3];
        uint64_t v25 = (char *)v8[4];
      }

      else
      {
        uint64_t v33 = 0LL;
      }

      unint64_t v34 = &v33[2 * v29];
      unint64_t v35 = &v33[2 * v32];
      *(_WORD *)unint64_t v34 = a3;
      int v26 = v34 + 2;
      while (v25 != v27)
      {
        __int16 v36 = *((_WORD *)v25 - 1);
        v25 -= 2;
        *((_WORD *)v34 - 1) = v36;
        v34 -= 2;
      }

      void v8[3] = v34;
      _DWORD v8[4] = v26;
      v8[5] = v35;
      if (v27) {
        operator delete(v27);
      }
    }

    else
    {
      *(_WORD *)uint64_t v25 = a3;
      int v26 = v25 + 2;
    }

    unint64_t v37 = (unint64_t)v8[8];
    _DWORD v8[4] = v26;
    int v38 = (char *)v8[7];
    if ((unint64_t)v38 >= v37)
    {
      unsigned __int32 v40 = (char *)v8[6];
      uint64_t v41 = v38 - v40;
      if (v38 - v40 <= -3) {
        sub_100007008();
      }
      uint64_t v42 = v41 >> 1;
      unint64_t v43 = v37 - (void)v40;
      if (v43 <= (v41 >> 1) + 1) {
        unint64_t v44 = v42 + 1;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v43 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v45 = v44;
      }
      if (v45)
      {
        uint64_t v46 = (char *)sub_1008DB604((uint64_t)(v8 + 8), v45);
        unsigned __int32 v40 = (char *)v8[6];
        int v38 = (char *)v8[7];
      }

      else
      {
        uint64_t v46 = 0LL;
      }

      unint64_t v47 = &v46[2 * v42];
      unint64_t v48 = &v46[2 * v45];
      *(_WORD *)unint64_t v47 = a4;
      unsigned int v39 = v47 + 2;
      while (v38 != v40)
      {
        __int16 v49 = *((_WORD *)v38 - 1);
        v38 -= 2;
        *((_WORD *)v47 - 1) = v49;
        v47 -= 2;
      }

      v8[6] = v47;
      v8[7] = v39;
      v8[8] = v48;
      if (v40) {
        operator delete(v40);
      }
    }

    else
    {
      *(_WORD *)int v38 = a4;
      unsigned int v39 = v38 + 2;
    }

    v8[7] = v39;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
}

void sub_1008DB204(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008DB224(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v7 = a1 + 66824;
  uint64_t v8 = a1 + 66528;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  uint64_t v9 = *(_DWORD **)(v8 + 8);
  unint64_t v10 = *(void *)(v8 + 16);
  if ((unint64_t)v9 >= v10)
  {
    unint64_t v12 = *(_DWORD **)v8;
    uint64_t v13 = ((uint64_t)v9 - *(void *)v8) >> 2;
    unint64_t v14 = v13 + 1;
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_10000956C(v8 + 16, v16);
      unint64_t v12 = *(_DWORD **)v8;
      uint64_t v9 = *(_DWORD **)(v8 + 8);
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    uint64_t v18 = &v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *(_DWORD *)uint64_t v18 = a2;
    unint64_t v11 = v18 + 4;
    while (v9 != v12)
    {
      int v20 = *--v9;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }

    *(void *)uint64_t v8 = v18;
    *(void *)(v8 + _Block_object_dispose(va, 8) = v11;
    *(void *)(v8 + 16) = v19;
    if (v12) {
      operator delete(v12);
    }
  }

  else
  {
    _DWORD *v9 = a2;
    unint64_t v11 = v9 + 1;
  }

  unint64_t v21 = *(void *)(v8 + 40);
  *(void *)(v8 + _Block_object_dispose(va, 8) = v11;
  float v22 = a4 - a3;
  __int16 v23 = *(float **)(v8 + 32);
  if ((unint64_t)v23 >= v21)
  {
    uint64_t v25 = *(float **)(v8 + 24);
    uint64_t v26 = v23 - v25;
    unint64_t v27 = v21 - (void)v25;
    unint64_t v28 = (uint64_t)(v21 - (void)v25) >> 1;
    if (v28 <= v26 + 1) {
      unint64_t v28 = v26 + 1;
    }
    if (v27 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29)
    {
      unint64_t v30 = (char *)sub_10000956C(v8 + 40, v29);
      uint64_t v25 = *(float **)(v8 + 24);
      __int16 v23 = *(float **)(v8 + 32);
    }

    else
    {
      unint64_t v30 = 0LL;
    }

    unint64_t v31 = (float *)&v30[4 * v26];
    uint64_t v32 = &v30[4 * v29];
    *unint64_t v31 = v22;
    unint64_t v24 = v31 + 1;
    while (v23 != v25)
    {
      int v33 = *((_DWORD *)v23-- - 1);
      *((_DWORD *)v31-- - 1) = v33;
    }

    *(void *)(v8 + 24) = v31;
    *(void *)(v8 + 32) = v24;
    *(void *)(v8 + 40) = v32;
    if (v25) {
      operator delete(v25);
    }
  }

  else
  {
    *__int16 v23 = v22;
    unint64_t v24 = v23 + 1;
  }

  *(void *)(v8 + 32) = v24;
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
}

void sub_1008DB418(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008DB434(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 66520;
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16LL))(a1 + 66824);
  *(_BYTE *)uint64_t v3 = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 304) + 24LL))(v4);
}

uint64_t sub_1008DB48C(uint64_t a1)
{
  uint64_t v2 = a1 + 66440;
  uint64_t v3 = *(void **)(a1 + 66680);
  if (v3)
  {
    *(void *)(v2 + 24_Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(v2 + 104);
  if (v4)
  {
    *(void *)(v2 + 112) = v4;
    operator delete(v4);
  }

  __n128 v5 = *(void **)(v2 + 80);
  if (v5)
  {
    *(void *)(v2 + 8_Block_object_dispose(va, 8) = v5;
    operator delete(v5);
  }

  unint64_t v6 = *(void **)(v2 + 48);
  if (v6)
  {
    *(void *)(v2 + 56) = v6;
    operator delete(v6);
  }

  uint64_t v7 = (void **)(a1 + 66128);
  uint64_t v8 = *(void **)(v2 + 24);
  if (v8)
  {
    *(void *)(v2 + 32) = v8;
    operator delete(v8);
  }

  uint64_t v9 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + _Block_object_dispose(va, 8) = v9;
    operator delete(v9);
  }

  unint64_t v10 = *(void **)(a1 + 66248);
  if (v10)
  {
    *(void *)(a1 + 66256) = v10;
    operator delete(v10);
  }

  unint64_t v11 = *(void **)(a1 + 66224);
  if (v11)
  {
    *(void *)(a1 + 66232) = v11;
    operator delete(v11);
  }

  unint64_t v12 = *(void **)(a1 + 66200);
  if (v12)
  {
    *(void *)(a1 + 6620_Block_object_dispose(va, 8) = v12;
    operator delete(v12);
  }

  uint64_t v13 = *(void **)(a1 + 66176);
  if (v13)
  {
    *(void *)(a1 + 66184) = v13;
    operator delete(v13);
  }

  unint64_t v14 = *(void **)(a1 + 66152);
  if (v14)
  {
    *(void *)(a1 + 66160) = v14;
    operator delete(v14);
  }

  uint64_t v15 = *v7;
  if (*v7)
  {
    *(void *)(a1 + 66136) = v15;
    operator delete(v15);
  }

  unint64_t v16 = *(void **)(a1 + 296);
  if (v16)
  {
    *(void *)(a1 + 304) = v16;
    operator delete(v16);
  }

  uint64_t v17 = *(void **)(a1 + 272);
  if (v17)
  {
    *(void *)(a1 + 280) = v17;
    operator delete(v17);
  }

  uint64_t v18 = *(void **)(a1 + 248);
  if (v18)
  {
    *(void *)(a1 + 256) = v18;
    operator delete(v18);
  }

  uint64_t v19 = *(void **)(a1 + 224);
  if (v19)
  {
    *(void *)(a1 + 232) = v19;
    operator delete(v19);
  }

  int v20 = *(void **)(a1 + 200);
  if (v20)
  {
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = v20;
    operator delete(v20);
  }

  unint64_t v21 = *(void **)(a1 + 176);
  if (v21)
  {
    *(void *)(a1 + 184) = v21;
    operator delete(v21);
  }

  float v22 = *(void **)(a1 + 152);
  if (v22)
  {
    *(void *)(a1 + 160) = v22;
    operator delete(v22);
  }

  return a1;
}

void *sub_1008DB604(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_1000070D4();
  }
  return operator new(2 * a2);
}

void sub_1008DB634(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_1008DB660()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101999210, (void *)&_mh_execute_header);
}

void sub_1008DB748(id a1)
{
  qword_101999248 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLSimulationControllerSilo");
}

void sub_1008DB9C4(_Unwind_Exception *a1)
{
}

void sub_1008DBB14(uint64_t a1, int a2)
{
  char v2 = a2;
  *(_BYTE *)(a1 + 1745) = v2;
}

void sub_1008DBC3C(uint64_t a1)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  char v2 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    unint64_t v6 = "";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Simulation stop request received, fSimulationRunning:%{public}hhd}",  (uint8_t *)v4,  0x18u);
  }

  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    sub_1008DFB18(a1);
    [*(id *)(a1 + 1680) setNextFireDelay:1.79769313e308];
  }

void sub_1008DBE30(uint64_t a1)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  char v2 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    int v4 = *(unsigned __int8 *)(a1 + 1745);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 1026;
    int v9 = v3;
    __int16 v10 = 1026;
    int v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Simulation start request received, fSimulationRunning:%{public}hhd, fIsInEmergencyS tate:%{public}hhd}",  (uint8_t *)v5,  0x1Eu);
  }

  if (!*(_BYTE *)(a1 + 72) && (!*(_BYTE *)(a1 + 1745) || (sub_1004FD204() & 1) == 0))
  {
    *(_BYTE *)(a1 + 72) = 1;
    sub_1008DFB18(a1);
    sub_1008DF6AC((id *)a1);
  }

void sub_1008DBF68(uint64_t a1, const void *a2)
{
  int v4 = *(const void **)(a1 + 1736);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 1736) = a2;
  if (a2)
  {
    CFRetain(a2);
    sub_1008DE380(a1);
  }

void sub_1008DC1EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

unsigned __int8 *sub_1008DC238(unsigned __int8 *result, unsigned int a2)
{
  if (result[1728] != a2)
  {
    uint64_t v3 = (uint64_t)result;
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    int v4 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 2050;
      uint64_t v9 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, locationDeliveryBehavior:%{public, location: CLSimulationLocationDeliveryBehavior}lld}",  (uint8_t *)v5,  0x1Cu);
    }

    *(_BYTE *)(v3 + 172_Block_object_dispose(va, 8) = a2;
    return (unsigned __int8 *)sub_1008DFB18(v3);
  }

  return result;
}

void sub_1008DC358(uint64_t a1, unsigned int a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  int v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 2050;
    uint64_t v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, locationRepeatBehavior:%{public, location:CLSi mulationLocationRepeatBehavior}lld}",  (uint8_t *)v5,  0x1Cu);
  }

  *(_BYTE *)(a1 + 1729) = a2;
}

double sub_1008DC480(uint64_t a1, double *a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  int v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    double v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, intermediateLocationDistance:%{public}f}",  (uint8_t *)v7,  0x1Cu);
  }

  double result = *a2;
  *(double *)(a1 + 168_Block_object_dispose(va, 8) = *a2;
  return result;
}

double sub_1008DC5AC(uint64_t a1, double *a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  int v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    double v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, locationInterval_s:%{public}.09f}",  (uint8_t *)v7,  0x1Cu);
  }

  double result = *a2;
  *(double *)(a1 + 1696) = *a2;
  return result;
}

double sub_1008DC6D8(uint64_t a1, double *a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  int v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    double v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Travelling speed changed, travellingSpeed:%{public}f}",  (uint8_t *)v7,  0x1Cu);
  }

  double result = *a2;
  *(double *)(a1 + 1704) = *a2;
  return result;
}

id sub_1008DC7E8(id *a1, uint64_t a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  int v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#slv Simulating a visit event}",  (uint8_t *)v6,  0x12u);
  }

  return objc_msgSend( objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLSignificantVisitManager"),  "simulateVisit:",  a2);
}

id sub_1008DC8FC(id *a1, void *a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  int v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2082;
    id v10 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#slc Simulating an SLC event, location:%{public, location:escape_only}s}",  (uint8_t *)v6,  0x1Cu);
  }

  return objc_msgSend( objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLSignificantChangeManager"),  "simulateSignificantLocationChange:",  a2);
}

id sub_1008DCA28(id *a1, void *a2, uint64_t a3)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  __int16 v6 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    id v15 = [a2 UTF8String];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Returning fences for bundleID, bundleID:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  id v7 = objc_msgSend( objc_msgSend(*a1, "vendor"),  "proxyForService:forClient:",  @"CLFenceManager",  @"CLSimulationController");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  int v9[2] = sub_1008DFB68;
  v9[3] = &unk_10185F8F8;
  v9[4] = a3;
  return [v7 getFencesForBundleID:a2 withReply:v9];
}

id sub_1008DCB98(id *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  id v10 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289538;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    id v16 = [a2 UTF8String];
    __int16 v17 = 2082;
    id v18 = [a3 UTF8String];
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Simulating a fence entry/exit for fence, bundleID:%{public, location:escape_only}s,  fenceID:%{public, location:escape_only}s}",  (uint8_t *)v12,  0x26u);
  }

  return objc_msgSend( objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLFenceManager"),  "simulateFenceWithBundleID:andFenceID:eventType:atLocation:",  a2,  a3,  a4,  a5);
}

id sub_1008DCD04(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  id v10 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289794;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    id v16 = [a2 UTF8String];
    __int16 v17 = 1026;
    int v18 = a3;
    __int16 v19 = 1026;
    int v20 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Simulating beacon region entry/exit., proximityUUID: :%{public, location:escape_only} s, major: :%{public}d, minor: :%{public}d}",  (uint8_t *)v12,  0x28u);
  }

  return objc_msgSend( objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", @"CLBTLEFenceManager"),  "simulateBeaconWithProximityUUID:major:minor:eventType:",  a2,  a3,  a4,  a5);
}

uint64_t sub_1008DD184(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a1 + 48;
  *(void *)(a1 + 56) = a1 + 48;
  *(void *)(a1 + 64) = 0LL;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0xFFFF;
  *(void *)(a1 + 100) = 0LL;
  *(void *)(a1 + 92) = 0LL;
  *(_OWORD *)(a1 + 10_Block_object_dispose(va, 8) = xmmword_1012E0070;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 124) = _Q1;
  *(_OWORD *)(a1 + 140) = _Q1;
  *(_OWORD *)(a1 + 156) = _Q1;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 176) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 244) = 0xFFFF;
  uint64_t v9 = a1 + 244;
  *(void *)(a1 + 204) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 212) = 0x7FFFFFFF;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(_BYTE *)(a1 + 240) = 0;
  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 272) = xmmword_1012EA5D0;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = _Q1;
  *(_OWORD *)(a1 + 304) = _Q1;
  *(void *)(a1 + 320) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 340) = 0LL;
  *(void *)(a1 + 34_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 332) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 356) = 0;
  *(void *)(a1 + 360) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 396) = 0;
  *(void *)(a1 + 380) = 0LL;
  *(void *)(a1 + 38_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 372) = 0LL;
  *(_DWORD *)(a1 + 400) = 0xFFFF;
  *(void *)(a1 + 404) = 0LL;
  *(void *)(a1 + 412) = 0LL;
  __int128 v48 = _Q1;
  *(_OWORD *)(a1 + 420) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 436) = _Q1;
  *(_OWORD *)(a1 + 452) = _Q1;
  *(_OWORD *)(a1 + 46_Block_object_dispose(va, 8) = _Q1;
  *(_DWORD *)(a1 + 484) = 0;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 496) = 0LL;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 516) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(void *)(a1 + 536) = 0LL;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0LL;
  memcpy((void *)(a1 + 560), &unk_1012E4A28, 0x230uLL);
  memcpy((void *)(v9 + 876), &unk_1012E4A28, 0x230uLL);
  *(void *)(v9 + 1492) = 0LL;
  *(_WORD *)(v9 + 1500) = 0;
  [a2 silo];
  sub_1008DF3E0(a1, 1);
  id v10 = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
  *(void *)(a1 + 1680) = v10;
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472LL;
  v52[2] = sub_1008DDAC4;
  v52[3] = &unk_10181D3D0;
  v52[4] = a1;
  [v10 setHandler:v52];
  *(_DWORD *)uint64_t v50 = 0xFFFF;
  *(_OWORD *)&v50[4] = 0uLL;
  *(_OWORD *)&v50[36] = v48;
  *(_OWORD *)&v50[52] = v48;
  *(void *)&v50[68] = v48;
  *(_DWORD *)&v50[84] = 0;
  *(_OWORD *)&v51[4] = 0uLL;
  *(void *)&v51[20] = 0xBFF0000000000000LL;
  memset(&v51[40], 0, 17);
  *(_DWORD *)std::stringbuf v51 = 1;
  *(void *)&v51[28] = 0x327FFFFFFFLL;
  *(_OWORD *)&v50[20] = xmmword_101340580;
  *(void *)&v50[76] = CFAbsoluteTimeGetCurrent();
  *(void *)&v50[88] = 0xBFF0000000000000LL;
  *(_DWORD *)&v51[36] = 1;
  sub_1002F0B04(&buf);
  if (sub_1002A82BC(buf, "SimulatedLocationLatitude", &v50[4]))
  {
    sub_1002F0B04(&v57);
    int v11 = sub_1002A82BC(v57, "SimulatedLocationLongitude", &v50[12]);
    __int16 v12 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  else
  {
    int v11 = 0;
  }

  __int16 v15 = (std::__shared_weak_count *)v54;
  if ((void)v54)
  {
    id v16 = (unint64_t *)(v54 + 8);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  if (v11)
  {
    sub_1002F0B04(&buf);
    sub_1002A82BC(buf, "SimulatedLocationAccuracy", &v50[20]);
    int v18 = (std::__shared_weak_count *)v54;
    if ((void)v54)
    {
      __int16 v19 = (unint64_t *)(v54 + 8);
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    sub_1002F0B04(&buf);
    sub_1002A7CB0(buf, "SimulatedLocationType", v51);
    unint64_t v21 = (std::__shared_weak_count *)v54;
    if ((void)v54)
    {
      float v22 = (unint64_t *)(v54 + 8);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    sub_1002F0B04(&buf);
    sub_1002A82BC(buf, "SimulatedLocationAltitude", &v50[28]);
    unint64_t v24 = (std::__shared_weak_count *)v54;
    if ((void)v54)
    {
      uint64_t v25 = (unint64_t *)(v54 + 8);
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    sub_1002F0B04(&buf);
    sub_1002A82BC(buf, "SimulatedLocationAltitudeAccuracy", &v50[36]);
    unint64_t v27 = (std::__shared_weak_count *)v54;
    if ((void)v54)
    {
      unint64_t v28 = (unint64_t *)(v54 + 8);
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }

    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    unint64_t v30 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289539LL;
      LOWORD(v54) = 2082;
      *(void *)((char *)&v54 + 2) = "";
      WORD5(v54) = 1040;
      HIDWORD(v54) = 156;
      __int16 v55 = 2097;
      __int16 v56 = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Using simulated location from defaults, location:%{private, location:CLClientLocation}.*P}",  (uint8_t *)&buf,  0x22u);
    }
  }

  else
  {
    memset(v51, 0, 20);
    memset(&v51[32], 0, 25);
    *(_DWORD *)uint64_t v50 = 0xFFFF;
    *(void *)&v50[4] = 0LL;
    *(void *)&v50[12] = 0LL;
    *(_OWORD *)&v50[20] = xmmword_1012E0070;
    *(_OWORD *)&v50[36] = v48;
    *(_OWORD *)&v50[52] = v48;
    *(_OWORD *)&v50[68] = v48;
    *(_DWORD *)&v50[84] = 0;
    *(void *)&v50[88] = 0xBFF0000000000000LL;
    *(void *)&v51[20] = 0xBFF0000000000000LL;
    *(_DWORD *)&v51[28] = 0x7FFFFFFF;
  }

  double v31 = *(double *)&v50[20];
  if (*(double *)&v50[20] > 0.0)
  {
    uint64_t buf = (uint64_t)&buf;
    *(void *)&__int128 v54 = &buf;
    *((void *)&v54 + 1) = 0LL;
    uint64_t v32 = operator new(0xB0uLL);
    __int128 v33 = *(_OWORD *)&v51[16];
    v32[7] = *(_OWORD *)v51;
    v32[8] = v33;
    v32[9] = *(_OWORD *)&v51[32];
    *(_OWORD *)((char *)v32 + 156) = *(_OWORD *)&v51[44];
    __int128 v34 = *(_OWORD *)&v50[48];
    v32[3] = *(_OWORD *)&v50[32];
    v32[4] = v34;
    __int128 v35 = *(_OWORD *)&v50[80];
    v32[5] = *(_OWORD *)&v50[64];
    v32[6] = v35;
    __int128 v36 = *(_OWORD *)&v50[16];
    v32[1] = *(_OWORD *)v50;
    void v32[2] = v36;
    *(void *)uint64_t v32 = &buf;
    *((void *)v32 + 1) = &buf;
    *(void *)&__int128 v54 = v32;
    uint64_t buf = (uint64_t)v32;
    *((void *)&v54 + 1) = 1LL;
    sub_1008DFAD8(a1);
    sub_1008DF64C((uint64_t *)a1, (uint64_t)&buf);
    sub_1008DC238((unsigned __int8 *)a1, 0);
    sub_1008DBE30(a1);
    sub_1001B4C40(&buf);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) =  objc_msgSend( objc_msgSend(*(id *)a1, "vendor", v31),  "proxyForService:",  @"CLSimulatedLocationProvider");
  *(void *)(a1 + 16) =  objc_msgSend( objc_msgSend(*(id *)a1, "vendor"),  "proxyForService:",  @"CLWifiLocationProvider");
  *(void *)(a1 + 24) =  objc_msgSend( objc_msgSend(*(id *)a1, "vendor"),  "proxyForService:",  @"CLAccessoryLocationProvider");
  *(void *)(a1 + 32) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLGnssProvider");
  *(void *)(a1 + 40) =  objc_msgSend( objc_msgSend(*(id *)a1, "vendor"),  "proxyForService:",  @"CLUnifiedCellLocationProvider");
  BOOL v49 = 0;
  *(_BYTE *)(a1 + 1744) = 0;
  sub_1002F0B04(&buf);
  int v37 = sub_1002A6F64(buf, "InterpretLifeSpanAsCourseAccuracyInSimulation", &v49);
  int v38 = v37;
  unsigned int v39 = (std::__shared_weak_count *)v54;
  if (!(void)v54) {
    goto LABEL_45;
  }
  unsigned __int32 v40 = (unint64_t *)(v54 + 8);
  do
    unint64_t v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_45:
    if (!v37) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }

  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v38) {
LABEL_46:
  }
    *(_BYTE *)(a1 + 1744) = v49;
LABEL_47:
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10185F938);
  }
  uint64_t v42 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    int v43 = *(unsigned __int8 *)(a1 + 1744);
    LODWORD(buf) = 67240192;
    HIDWORD(buf) = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "SimulationController,InterpretLifeSpanAsCourseAccuracyInSimulation,%{public}d",  (uint8_t *)&buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10185F938);
    }
    int v45 = *(unsigned __int8 *)(a1 + 1744);
    LODWORD(v57) = 67240192;
    HIDWORD(v57) = v45;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "SimulationController,InterpretLifeSpanAsCourseAccuracyInSimulation,%{public}d",  &v57,  8);
    unint64_t v47 = (char *)v46;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSimulationController::CLSimulationController(id<CLIntersiloUniverse>)",  "%s\n",  v46);
  }

  return a1;
}

void sub_1008DDA44(_Unwind_Exception *a1)
{
}

void sub_1008DDAC4(uint64_t a1)
{
}

void sub_1008DDACC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    char v2 = (double *)(a1 + 404);
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    uint64_t v3 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Nowhere to go; not preparing next location}",
        buf,
        0x12u);
    }

    sub_1008DFD68(a1);
    if (v2[2] >= 0.0)
    {
LABEL_8:
      *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 384);
      __int128 v4 = *(_OWORD *)(a1 + 356);
      __int128 v5 = *(_OWORD *)(a1 + 372);
      __int128 v6 = *(_OWORD *)(a1 + 324);
      __int128 v61 = *(_OWORD *)(a1 + 340);
      __int128 v62 = v4;
      v63[0] = v5;
      __int128 v7 = *(_OWORD *)(a1 + 292);
      __int128 v8 = *(_OWORD *)(a1 + 308);
      __int128 v9 = *(_OWORD *)(a1 + 260);
      *(_OWORD *)__int16 v60 = *(_OWORD *)(a1 + 276);
      *(_OWORD *)&v60[16] = v7;
      id v10 = (_OWORD *)(a1 + 400);
      *(_OWORD *)&v60[32] = v8;
      *(_OWORD *)&v60[48] = v6;
      *(_OWORD *)double v59 = *(_OWORD *)(a1 + 244);
      *(_OWORD *)&v59[16] = v9;
      __int128 v11 = *(_OWORD *)(a1 + 200);
      __int128 v56 = *(_OWORD *)(a1 + 184);
      __int128 v57 = v11;
      v58[0] = *(_OWORD *)(a1 + 216);
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(a1 + 228);
      __int128 v12 = *(_OWORD *)(a1 + 136);
      __int128 v52 = *(_OWORD *)(a1 + 120);
      __int128 v53 = v12;
      __int128 v13 = *(_OWORD *)(a1 + 168);
      __int128 v54 = *(_OWORD *)(a1 + 152);
      __int128 v55 = v13;
      __int128 v14 = *(_OWORD *)(a1 + 104);
      __int128 v50 = *(_OWORD *)(a1 + 88);
      __int128 v51 = v14;
      memcpy(buf, (const void *)(a1 + 1120), 0x230uLL);
      memcpy((void *)(a1 + 560), (const void *)(a1 + 1120), 0x230uLL);
      double v15 = *(double *)(a1 + 1696);
      if (v15 <= 0.0 && *(double *)(a1 + 1688) <= 0.0 && *(double *)(a1 + 1704) <= 0.0)
      {
        __int128 v16 = *(_OWORD *)(a1 + 512);
        __int128 v61 = *(_OWORD *)(a1 + 496);
        __int128 v62 = v16;
        v63[0] = *(_OWORD *)(a1 + 528);
        *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 540);
        __int128 v17 = *(_OWORD *)(a1 + 448);
        *(_OWORD *)__int16 v60 = *(_OWORD *)(a1 + 432);
        *(_OWORD *)&v60[16] = v17;
        __int128 v18 = *(_OWORD *)(a1 + 480);
        *(_OWORD *)&v60[32] = *(_OWORD *)(a1 + 464);
        *(_OWORD *)&v60[48] = v18;
        __int128 v19 = *(_OWORD *)(a1 + 416);
        *(_OWORD *)double v59 = *v10;
        *(_OWORD *)&v59[16] = v19;
        if (*(double *)&v60[44] <= 0.0)
        {
          double Current = CFAbsoluteTimeGetCurrent();
        }

        else
        {
          if (qword_1019349F0 != -1) {
            dispatch_once(&qword_1019349F0, &stru_10185F918);
          }
          unint64_t v20 = (os_log_s *)qword_1019349F8;
          if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *(void *)(a1 + 80);
            *(_DWORD *)__int16 v64 = 68289538;
            int v65 = 0;
            __int16 v66 = 2082;
            int v67 = "";
            __int16 v68 = 2050;
            *(void *)__int16 v69 = *(void *)&v60[44];
            *(_WORD *)&v69[8] = 2050;
            *(void *)&v69[10] = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Adjust next location timestamp, originalTimestamp_s:%{public}.09f, delt a_s:%{public}.09f}",  v64,  0x26u);
          }

          double Current = *(double *)(a1 + 80) + *(double *)&v60[44];
        }

        *(double *)&v60[44] = Current;
        *(double *)&buf[24] = Current;
        if (*(double *)((char *)&v51 + 4) > 0.0
          && (*(void *)((_BYTE *)&v51 + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          sub_1008E00AC((uint64_t)&v50, (uint64_t)v59, (double *)(a1 + 560), (double *)buf);
        }

        sub_1008DF838(a1);
        double v15 = *(double *)(a1 + 1696);
      }

      if (v15 > 0.0 || *(double *)(a1 + 1688) > 0.0 || *(double *)(a1 + 1704) > 0.0)
      {
        double v24 = CFAbsoluteTimeGetCurrent();
        double v25 = *(double *)(a1 + 1704);
        if (v25 <= 0.0)
        {
          else {
            double v25 = *(double *)(a1 + 1712);
          }
        }

        double v26 = *(double *)(a1 + 1720);
        double v27 = sub_100D2EC74(*v2, v2[1], *(double *)(a1 + 248), *(double *)(a1 + 256));
        if (qword_1019349F0 != -1) {
          dispatch_once(&qword_1019349F0, &stru_10185F918);
        }
        double v28 = v24 - v26;
        unint64_t v29 = (os_log_s *)qword_1019349F8;
        if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int16 v64 = 68290818;
          int v65 = 0;
          __int16 v66 = 2082;
          int v67 = "";
          __int16 v68 = 2050;
          *(double *)__int16 v69 = v25;
          *(_WORD *)&v69[8] = 2050;
          *(double *)&v69[10] = v28;
          __int16 v70 = 2050;
          double v71 = v27;
          __int16 v72 = 1040;
          int v73 = 156;
          __int16 v74 = 2098;
          uint64_t v75 = a1 + 244;
          __int16 v76 = 1040;
          int v77 = 156;
          __int16 v78 = 2098;
          uint64_t v79 = a1 + 400;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:snl, speed:%{public}f, timeElapsed_s:%{public}.09f, distance: %{public}f, currentLocation:%{public, location:CLDaemonLocation}.*P, nextLocation:%{public, locati on:CLDaemonLocation}.*P}",  v64,  0x50u);
        }

        if (*(double *)(a1 + 264) < 0.0 || v28 * v25 > v27)
        {
          if (qword_1019349F0 != -1) {
            dispatch_once(&qword_1019349F0, &stru_10185F918);
          }
          double v31 = (os_log_s *)qword_1019349F8;
          if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
          {
            double v32 = *v2;
            uint64_t v33 = *((void *)v2 + 1);
            *(_DWORD *)__int16 v64 = 68289538;
            int v65 = 0;
            __int16 v66 = 2082;
            int v67 = "";
            __int16 v68 = 2050;
            *(double *)__int16 v69 = v32;
            *(_WORD *)&v69[8] = 2050;
            *(void *)&v69[10] = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Reached location, preparing next, reachedLat:%{public}f, reachedLon:%{public}f}",  v64,  0x26u);
          }

          __int128 v34 = *(_OWORD *)(a1 + 512);
          __int128 v61 = *(_OWORD *)(a1 + 496);
          __int128 v62 = v34;
          v63[0] = *(_OWORD *)(a1 + 528);
          *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 540);
          __int128 v35 = *(_OWORD *)(a1 + 448);
          *(_OWORD *)__int16 v60 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)&v60[16] = v35;
          __int128 v36 = *(_OWORD *)(a1 + 480);
          *(_OWORD *)&v60[32] = *(_OWORD *)(a1 + 464);
          *(_OWORD *)&v60[48] = v36;
          __int128 v37 = *(_OWORD *)(a1 + 416);
          *(_OWORD *)double v59 = *v10;
          *(_OWORD *)&v59[16] = v37;
          sub_1008DF838(a1);
          double v30 = -1.0;
          if (v2[2] >= 0.0) {
            double v30 = sub_100295490(*v2, v2[1], *(double *)&v59[4], *(double *)&v59[12]);
          }
        }

        else
        {
          double v30 = sub_100295490(*v2, v2[1], *(double *)(a1 + 248), *(double *)(a1 + 256));
          sub_1002953C8( (double *)&v59[4],  (double *)((unint64_t)v59 | 0xC),  *(double *)(a1 + 248),  *(double *)(a1 + 256),  v28,  v25,  v30);
        }

        *(double *)&v60[12] = v25;
        *(double *)&v60[28] = v30;
        if (*(double *)((char *)&v51 + 4) > 0.0
          && (*(void *)((_BYTE *)&v51 + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          sub_1008E00AC((uint64_t)&v50, (uint64_t)v59, (double *)(a1 + 560), (double *)buf);
        }
      }

      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
      int v38 = (os_log_s *)qword_1019349F8;
      if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v64 = 68289539;
        int v65 = 0;
        __int16 v66 = 2082;
        int v67 = "";
        __int16 v68 = 1040;
        *(_DWORD *)__int16 v69 = 156;
        *(_WORD *)&v69[4] = 2097;
        *(void *)&v69[6] = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Notify location is, location:%{private, location:CLClientLocation}.*P}",  v64,  0x22u);
      }

      __int128 v39 = v62;
      *(_OWORD *)(a1 + 340) = v61;
      *(_OWORD *)(a1 + 356) = v39;
      *(_OWORD *)(a1 + 372) = v63[0];
      *(_OWORD *)(a1 + 384) = *(_OWORD *)((char *)v63 + 12);
      __int128 v40 = *(_OWORD *)&v60[16];
      *(_OWORD *)(a1 + 276) = *(_OWORD *)v60;
      *(_OWORD *)(a1 + 292) = v40;
      __int128 v41 = *(_OWORD *)&v60[48];
      *(_OWORD *)(a1 + 30_Block_object_dispose(va, 8) = *(_OWORD *)&v60[32];
      *(_OWORD *)(a1 + 324) = v41;
      __int128 v42 = *(_OWORD *)&v59[16];
      *(_OWORD *)(a1 + 244) = *(_OWORD *)v59;
      *(_OWORD *)(a1 + 260) = v42;
      memcpy((void *)(a1 + 1120), buf, 0x230uLL);
      v48[6] = v61;
      v48[7] = v62;
      v49[0] = v63[0];
      *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)((char *)v63 + 12);
      v48[2] = *(_OWORD *)v60;
      v48[3] = *(_OWORD *)&v60[16];
      v48[4] = *(_OWORD *)&v60[32];
      v48[5] = *(_OWORD *)&v60[48];
      v48[0] = *(_OWORD *)v59;
      v48[1] = *(_OWORD *)&v59[16];
      memcpy(v47, buf, sizeof(v47));
      sub_1008E01C4(a1, (uint64_t)v48, v47);
      *(CFAbsoluteTime *)(a1 + 1720) = CFAbsoluteTimeGetCurrent();
      sub_1008DFCC0((double *)a1);
      double v44 = v43;
      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
      int v45 = (os_log_s *)qword_1019349F8;
      if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v64 = 68289282;
        int v65 = 0;
        __int16 v66 = 2082;
        int v67 = "";
        __int16 v68 = 2050;
        *(double *)__int16 v69 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Notification delay, notificationDelay_s:%{public}.09f}",  v64,  0x1Cu);
      }

      double v46 = 1.79769313e308;
      if (v44 >= 0.0) {
        double v46 = v44;
      }
      [*(id *)(a1 + 1680) setNextFireDelay:v46];
    }
  }

  else
  {
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    unint64_t v23 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:SimulationController is trying to sendNextLocation, but simulation is not running}",  buf,  0x12u);
    }
  }

uint64_t sub_1008DE318(uint64_t a1)
{
  *(void *)(a1 + 1680) = 0LL;
  sub_1001B4C40((void *)(a1 + 48));
  return a1;
}

void sub_1008DE380(uint64_t a1)
{
  if (*(void *)(a1 + 1736))
  {
    char v2 = +[NSInputStream inputStreamWithURL:](&OBJC_CLASS___NSInputStream, "inputStreamWithURL:");
    if (v2)
    {
      uint64_t v3 = v2;
      -[NSInputStream open](v2, "open");
      id v4 = +[NSMutableData data](&OBJC_CLASS___NSMutableData, "data");
      if (-[NSInputStream hasBytesAvailable](v3, "hasBytesAvailable"))
      {
        do
        {
          uint64_t v5 = -[NSInputStream read:maxLength:](v3, "read:maxLength:", buf, 1024LL);
          if (v5 >= 1) {
            [v4 appendBytes:buf length:v5];
          }
          unsigned __int8 v6 = -[NSInputStream hasBytesAvailable](v3, "hasBytesAvailable");
          if (v5 >= 0) {
            unsigned __int8 v7 = v6;
          }
          else {
            unsigned __int8 v7 = 0;
          }
        }

        while ((v7 & 1) != 0);
      }

      -[NSInputStream close](v3, "close");
    }

    else
    {
      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
      id v10 = (os_log_s *)qword_1019349F8;
      if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = *(void *)(a1 + 1736);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Failed to read simulation from url, scenarioURL:%{public, location:escape_only}@}",  buf,  0x1Cu);
        if (qword_1019349F0 != -1) {
          dispatch_once(&qword_1019349F0, &stru_10185F918);
        }
      }

      __int128 v12 = (os_log_s *)qword_1019349F8;
      if (os_signpost_enabled((os_log_t)qword_1019349F8))
      {
        uint64_t v13 = *(void *)(a1 + 1736);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v13;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Failed to read simulation from url",  "{msg%{public}.0s:Failed to read simulation from url, scenarioURL:%{public, location:escape_only}@}",  buf,  0x1Cu);
      }

      id v4 = 0LL;
    }

    __int128 v14 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, (CFDataRef)v4, 0LL, 0LL, 0LL);
    double v15 = v14;
    if (v14 && (CFTypeID v16 = CFGetTypeID(v14), v16 == CFDictionaryGetTypeID()))
    {
      Value = CFDictionaryGetValue(v15, @"Locations");
      CFTypeRef cf = CFDictionaryGetValue(v15, @"Options");
      if (cf) {
        CFRetain(cf);
      }
      if (Value)
      {
        CFRetain(Value);
        CFRelease(v15);
        CFTypeID v18 = CFGetTypeID(Value);
        if (v18 == CFArrayGetTypeID())
        {
          if (!cf || (CFTypeID v19 = CFGetTypeID(cf), v19 == CFDictionaryGetTypeID()))
          {
            if (qword_1019349F0 != -1) {
              dispatch_once(&qword_1019349F0, &stru_10185F918);
            }
            unint64_t v20 = (os_log_s *)qword_1019349F8;
            if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
            {
              CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
              uint64_t v22 = *(void *)(a1 + 1736);
              *(_DWORD *)uint64_t buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2050;
              *(void *)&buf[20] = Count;
              *(_WORD *)&buf[28] = 2114;
              *(void *)&buf[30] = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Applying new simulation scenario, locationCount:%{public}ld, scenarioURL :%{public, location:escape_only}@}",  buf,  0x26u);
            }

            int v71 = *(unsigned __int8 *)(a1 + 72);
            if (*(_BYTE *)(a1 + 72)) {
              sub_1008DBC3C(a1);
            }
            sub_1008DF3E0(a1, 0);
            CFIndex v23 = 0LL;
            v77[0] = v77;
            v77[1] = v77;
            uint64_t v78 = 0LL;
            while (1)
            {
              if (CFArrayGetCount((CFArrayRef)Value) <= v23)
              {
                CFRelease(Value);
                sub_1008DF64C((uint64_t *)a1, (uint64_t)v77);
                if (cf)
                {
                  __int128 v57 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationDeliveryBehavior");
                  __int16 v58 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationRepeatBehavior");
                  double v59 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationInterval");
                  __int16 v60 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationSpeed");
                  __int128 v61 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationIntermediateDistance");
                  if (v57)
                  {
                    CFTypeID v62 = CFGetTypeID(v57);
                    if (v62 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v57, kCFNumberSInt8Type, &valuePtr)) {
                        sub_1008DC238((unsigned __int8 *)a1, valuePtr);
                      }
                    }
                  }

                  if (v58)
                  {
                    CFTypeID v63 = CFGetTypeID(v58);
                    if (v63 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v58, kCFNumberSInt8Type, &v75))
                      {
                        if (qword_1019349F0 != -1) {
                          dispatch_once(&qword_1019349F0, &stru_10185F918);
                        }
                        __int16 v64 = (os_log_s *)qword_1019349F8;
                        if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(void *)&buf[20] = v75;
                          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, locationRepeatBehavior:% {public, location:CLSimulationLocationRepeatBehavior}lld}",  buf,  0x1Cu);
                        }

                        sub_1008DC358(a1, v75);
                      }
                    }
                  }

                  if (v59)
                  {
                    CFTypeID v65 = CFGetTypeID(v59);
                    if (v65 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v59, kCFNumberDoubleType, v79))
                      {
                        if (qword_1019349F0 != -1) {
                          dispatch_once(&qword_1019349F0, &stru_10185F918);
                        }
                        __int16 v66 = (os_log_s *)qword_1019349F8;
                        if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(void *)&buf[20] = *(void *)v79;
                          _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, locationInterval:%{public}f}",  buf,  0x1Cu);
                        }

                        sub_1008DC5AC(a1, (double *)v79);
                      }
                    }
                  }

                  if (v60)
                  {
                    CFTypeID v67 = CFGetTypeID(v60);
                    if (v67 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v60, kCFNumberDoubleType, &v74))
                      {
                        if (qword_1019349F0 != -1) {
                          dispatch_once(&qword_1019349F0, &stru_10185F918);
                        }
                        __int16 v68 = (os_log_s *)qword_1019349F8;
                        if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(double *)&buf[20] = v74;
                          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, locationTravellingSpeed:%{public}f}",  buf,  0x1Cu);
                        }

                        sub_1008DC6D8(a1, &v74);
                      }
                    }
                  }

                  if (v61)
                  {
                    CFTypeID v69 = CFGetTypeID(v61);
                    if (v69 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v61, kCFNumberDoubleType, &v73))
                      {
                        if (qword_1019349F0 != -1) {
                          dispatch_once(&qword_1019349F0, &stru_10185F918);
                        }
                        __int16 v70 = (os_log_s *)qword_1019349F8;
                        if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)uint64_t buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(void *)&buf[20] = v73;
                          _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting SimulationController property, intermediateDistance:%{public}f}",  buf,  0x1Cu);
                        }

                        sub_1008DC480(a1, (double *)&v73);
                      }
                    }
                  }

                  CFRelease(cf);
                }

                if (v71) {
                  sub_1008DBE30(a1);
                }
                sub_1001B4C40(v77);
                return;
              }

              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v23);
              double v25 = ValueAtIndex;
              if (ValueAtIndex && (CFTypeID v26 = CFGetTypeID(ValueAtIndex), v26 == CFDataGetTypeID()))
              {
                *(void *)&double v27 = objc_opt_class(&OBJC_CLASS___CLLocation).n128_u64[0];
                id v29 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v28,  v25,  0LL,  v27);
                if (v29 && (objc_opt_class(&OBJC_CLASS___CLLocation), (objc_opt_isKindOfClass(v29, v30) & 1) != 0))
                {
                  [v29 clientLocation];
                  __int128 v90 = v83;
                  __int128 v91 = v84;
                  v92[0] = v85[0];
                  *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v85 + 12);
                  *(_OWORD *)&buf[32] = *(_OWORD *)&v79[32];
                  __int128 v87 = v80;
                  __int128 v88 = v81;
                  __int128 v89 = v82;
                  *(_OWORD *)uint64_t buf = *(_OWORD *)v79;
                  *(_OWORD *)&buf[16] = *(_OWORD *)&v79[16];
                  if (*(_BYTE *)(a1 + 1744))
                  {
                    *(void *)((char *)&v88 + 4) = *((void *)&v89 + 1);
                    *((void *)&v89 + 1) = 0x4014000000000000LL;
                  }

                  if (qword_1019349F0 != -1) {
                    dispatch_once(&qword_1019349F0, &stru_10185F918);
                  }
                  double v31 = (os_log_s *)qword_1019349F8;
                  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)uint64_t v79 = 68289539;
                    *(_DWORD *)&v79[4] = 0;
                    *(_WORD *)&v79[8] = 2082;
                    *(void *)&v79[10] = "";
                    *(_WORD *)&v79[18] = 1040;
                    *(_DWORD *)&v79[20] = 156;
                    *(_WORD *)&v79[24] = 2097;
                    *(void *)&v79[26] = buf;
                    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Appending location, location:%{private, location:CLClientLocation}.*P}",  v79,  0x22u);
                  }

                  double v32 = operator new(0xB0uLL);
                  __int128 v33 = v91;
                  v32[7] = v90;
                  v32[8] = v33;
                  v32[9] = v92[0];
                  *(_OWORD *)((char *)v32 + 156) = *(_OWORD *)((char *)v92 + 12);
                  __int128 v34 = v87;
                  v32[3] = *(_OWORD *)&buf[32];
                  v32[4] = v34;
                  __int128 v35 = v89;
                  v32[5] = v88;
                  v32[6] = v35;
                  __int128 v36 = *(_OWORD *)&buf[16];
                  v32[1] = *(_OWORD *)buf;
                  void v32[2] = v36;
                  uint64_t v37 = v77[0];
                  *(void *)double v32 = v77[0];
                  *((void *)v32 + 1) = v77;
                  *(void *)(v37 + _Block_object_dispose(va, 8) = v32;
                  v77[0] = v32;
                  ++v78;
                }

                else
                {
                  if (qword_1019349F0 != -1) {
                    dispatch_once(&qword_1019349F0, &stru_10185F918);
                  }
                  int v45 = (os_log_s *)qword_1019349F8;
                  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_FAULT))
                  {
                    objc_opt_class(v29);
                    unint64_t v47 = -[NSString UTF8String](NSStringFromClass(v46), "UTF8String");
                    uint64_t v48 = *(void *)(a1 + 1736);
                    *(_DWORD *)uint64_t buf = 68289794;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v23;
                    *(_WORD *)&buf[24] = 2082;
                    *(void *)&buf[26] = v47;
                    *(_WORD *)&buf[34] = 2114;
                    *(void *)&buf[36] = v48;
                    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:location from scenario is of incorrect format, locationIndex:%{public }d, incorrectType:%{public, location:escape_only}s, scenarioURL:%{public, location:escape_only}@}",  buf,  0x2Cu);
                    if (qword_1019349F0 != -1) {
                      dispatch_once(&qword_1019349F0, &stru_10185F918);
                    }
                  }

                  uint64_t v49 = qword_1019349F8;
                  if (os_signpost_enabled((os_log_t)qword_1019349F8))
                  {
                    objc_opt_class(v29);
                    __int128 v51 = -[NSString UTF8String](NSStringFromClass(v50), "UTF8String");
                    uint64_t v52 = *(void *)(a1 + 1736);
                    *(_DWORD *)uint64_t buf = 68289794;
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    *(_WORD *)&uint8_t buf[8] = 2082;
                    *(void *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v23;
                    *(_WORD *)&buf[24] = 2082;
                    *(void *)&buf[26] = v51;
                    *(_WORD *)&buf[34] = 2114;
                    *(void *)&buf[36] = v52;
                    __int128 v42 = (os_log_s *)v49;
                    double v43 = "{msg%{public}.0s:location from scenario is of incorrect format, locationIndex:%{pu"
                          "blic}d, incorrectType:%{public, location:escape_only}s, scenarioURL:%{public, location:escape_only}@}";
                    uint32_t v44 = 44;
                    goto LABEL_67;
                  }
                }
              }

              else
              {
                if (qword_1019349F0 != -1) {
                  dispatch_once(&qword_1019349F0, &stru_10185F918);
                }
                int v38 = (os_log_s *)qword_1019349F8;
                if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v39 = *(void *)(a1 + 1736);
                  *(_DWORD *)uint64_t buf = 68289538;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v23;
                  *(_WORD *)&buf[24] = 2114;
                  *(void *)&buf[26] = v39;
                  _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:location from scenario is of incorrect format, locationIndex:%{public}d , scenarioURL:%{public, location:escape_only}@}",  buf,  0x22u);
                  if (qword_1019349F0 != -1) {
                    dispatch_once(&qword_1019349F0, &stru_10185F918);
                  }
                }

                uint64_t v40 = qword_1019349F8;
                if (os_signpost_enabled((os_log_t)qword_1019349F8))
                {
                  uint64_t v41 = *(void *)(a1 + 1736);
                  *(_DWORD *)uint64_t buf = 68289538;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v23;
                  *(_WORD *)&buf[24] = 2114;
                  *(void *)&buf[26] = v41;
                  __int128 v42 = (os_log_s *)v40;
                  double v43 = "{msg%{public}.0s:location from scenario is of incorrect format, locationIndex:%{publ"
                        "ic}d, scenarioURL:%{public, location:escape_only}@}";
                  uint32_t v44 = 34;
LABEL_67:
                  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "location from scenario is of incorrect format",  v43,  buf,  v44);
                }
              }

              ++v23;
            }
          }
        }
      }

      else
      {
        CFRelease(v15);
      }

      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
      __int128 v55 = (os_log_s *)qword_1019349F8;
      if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't get locations array for simulation scenario}",  buf,  0x12u);
        if (qword_1019349F0 != -1) {
          dispatch_once(&qword_1019349F0, &stru_10185F918);
        }
      }

      __int128 v56 = (os_log_s *)qword_1019349F8;
      if (os_signpost_enabled((os_log_t)qword_1019349F8))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v56,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get locations array for simulation scenario",  "{msg%{public}.0s:Couldn't get locations array for simulation scenario}",  buf,  0x12u);
      }

      if (Value) {
        CFRelease(Value);
      }
      if (cf) {
        CFRelease(cf);
      }
    }

    else
    {
      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
      __int128 v53 = (os_log_s *)qword_1019349F8;
      if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't parse simulation scenario data}",  buf,  0x12u);
        if (qword_1019349F0 != -1) {
          dispatch_once(&qword_1019349F0, &stru_10185F918);
        }
      }

      __int128 v54 = (os_log_s *)qword_1019349F8;
      if (os_signpost_enabled((os_log_t)qword_1019349F8))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v54,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't parse simulation scenario data",  "{msg%{public}.0s:Couldn't parse simulation scenario data}",  buf,  0x12u);
      }

      if (v15) {
        CFRelease(v15);
      }
    }
  }

  else
  {
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    __int128 v8 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Attempt to start scenario, but no scenario is loaded!}",  buf,  0x12u);
      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
    }

    __int128 v9 = (os_log_s *)qword_1019349F8;
    if (os_signpost_enabled((os_log_t)qword_1019349F8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Attempt to start scenario, but no scenario is loaded!",  "{msg%{public}.0s:Attempt to start scenario, but no scenario is loaded!}",  buf,  0x12u);
    }
  }

void sub_1008DF3A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1008DF3E0(uint64_t a1, int a2)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  id v4 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    double v15 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Clearing all pending locations and settings}",  buf,  0x12u);
  }

  sub_1001B4C40((void *)(a1 + 48));
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0xFFFF;
  *(void *)(a1 + 100) = 0LL;
  *(void *)(a1 + 92) = 0LL;
  *(_OWORD *)(a1 + 10_Block_object_dispose(va, 8) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_OWORD *)(a1 + 156) = _Q0;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 176) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 204) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 212) = 0x7FFFFFFF;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = 0xFFFF;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 264) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 272) = xmmword_1012EA5D0;
  __int128 v11 = _Q0;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = _Q0;
  *(_OWORD *)(a1 + 304) = _Q0;
  *(void *)(a1 + 320) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 332) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 356) = 0;
  *(void *)(a1 + 340) = 0LL;
  *(void *)(a1 + 34_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 360) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0x7FFFFFFF;
  *(void *)(a1 + 380) = 0LL;
  *(void *)(a1 + 38_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 372) = 0LL;
  *(_BYTE *)(a1 + 396) = 0;
  memcpy((void *)(a1 + 1120), &unk_1012E4A28, 0x230uLL);
  memcpy((void *)(a1 + 560), &unk_1012E4A28, 0x230uLL);
  *(_DWORD *)(a1 + 400) = 0xFFFF;
  *(void *)(a1 + 404) = 0LL;
  *(void *)(a1 + 412) = 0LL;
  *(_OWORD *)(a1 + 420) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 436) = v11;
  *(_OWORD *)(a1 + 452) = v11;
  *(_OWORD *)(a1 + 46_Block_object_dispose(va, 8) = v11;
  *(_DWORD *)(a1 + 484) = 0;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 496) = 0LL;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 516) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 544) = 0LL;
  *(void *)(a1 + 536) = 0LL;
  *(_BYTE *)(a1 + 552) = 0;
  *(void *)(a1 + 168_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 1696) = v11;
  *(void *)(a1 + 1720) = 0xBFF0000000000000LL;
  *(_WORD *)(a1 + 172_Block_object_dispose(va, 8) = 256;
  if (a2)
  {
    id v10 = *(const void **)(a1 + 1736);
    if (v10) {
      CFRelease(v10);
    }
    *(void *)(a1 + 1736) = 0LL;
  }

uint64_t *sub_1008DF64C(uint64_t *result, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    char v2 = result;
    double result = sub_1008E094C((uint64_t)(result + 6), result + 6, *(void *)(a2 + 8), a2);
    if (*((_BYTE *)v2 + 72))
    {
    }
  }

  return result;
}

id *sub_1008DF6AC(id *result)
{
  if (*((_BYTE *)result + 72))
  {
    uint64_t v1 = (uint64_t)result;
    objc_msgSend( objc_msgSend(objc_msgSend(*result, "vendor"), "proxyForService:", @"CLLocationController"),  "syncgetLocation:",  result + 50);
    __int128 v2 = *(_OWORD *)(v1 + 496);
    __int128 v3 = *(_OWORD *)(v1 + 528);
    *(_OWORD *)(v1 + 356) = *(_OWORD *)(v1 + 512);
    *(_OWORD *)(v1 + 372) = v3;
    *(_OWORD *)(v1 + 384) = *(_OWORD *)(v1 + 540);
    __int128 v4 = *(_OWORD *)(v1 + 432);
    __int128 v5 = *(_OWORD *)(v1 + 464);
    __int128 v6 = *(_OWORD *)(v1 + 480);
    *(_OWORD *)(v1 + 292) = *(_OWORD *)(v1 + 448);
    *(_OWORD *)(v1 + 30_Block_object_dispose(va, 8) = v5;
    *(_OWORD *)(v1 + 324) = v6;
    *(_OWORD *)(v1 + 340) = v2;
    __int128 v7 = *(_OWORD *)(v1 + 416);
    *(_OWORD *)(v1 + 244) = *(_OWORD *)(v1 + 400);
    *(_OWORD *)(v1 + 260) = v7;
    *(_OWORD *)(v1 + 276) = v4;
    *(CFAbsoluteTime *)(v1 + 1720) = CFAbsoluteTimeGetCurrent();
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    __int128 v8 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289539;
      v9[1] = 0;
      __int16 v10 = 2082;
      __int128 v11 = "";
      __int16 v12 = 1040;
      int v13 = 156;
      __int16 v14 = 2097;
      uint64_t v15 = v1 + 400;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:next location, location:%{private, location:CLClientLocation}.*P}",  (uint8_t *)v9,  0x22u);
    }

    *(void *)(v1 + 80) = 0LL;
    sub_1008DF838(v1);
    *(CFAbsoluteTime *)(v1 + 80) = CFAbsoluteTimeGetCurrent() - *(double *)(v1 + 476);
    return (id *)[*(id *)(v1 + 1680) setNextFireDelay:0.0];
  }

  return result;
}

void sub_1008DF838(uint64_t a1)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  __int128 v2 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
  {
    int v25 = 68289026;
    int v26 = 0;
    __int16 v27 = 2082;
    uint64_t v28 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Preparing next location}",  (uint8_t *)&v25,  0x12u);
  }

  __int128 v3 = *(_OWORD *)(a1 + 512);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 496);
  *(_OWORD *)(a1 + 200) = v3;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 528);
  __int128 v4 = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 136) = v4;
  __int128 v5 = *(_OWORD *)(a1 + 480);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 22_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 540);
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    __int128 v8 = *(_OWORD **)(a1 + 56);
    __int128 v9 = v8[2];
    *(_OWORD *)(a1 + 400) = v8[1];
    *(_OWORD *)(a1 + 416) = v9;
    __int128 v10 = v8[3];
    __int128 v11 = v8[4];
    __int128 v12 = v8[6];
    *(_OWORD *)(a1 + 464) = v8[5];
    *(_OWORD *)(a1 + 480) = v12;
    *(_OWORD *)(a1 + 432) = v10;
    *(_OWORD *)(a1 + 44_Block_object_dispose(va, 8) = v11;
    __int128 v13 = v8[7];
    __int128 v14 = v8[8];
    __int128 v15 = v8[9];
    *(_OWORD *)(a1 + 540) = *(_OWORD *)((char *)v8 + 156);
    *(_OWORD *)(a1 + 512) = v14;
    *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = v15;
    *(_OWORD *)(a1 + 496) = v13;
    uint64_t v16 = *(void *)v8;
    *(void *)(v16 + _Block_object_dispose(va, 8) = *((void *)v8 + 1);
    **((void **)v8 + 1) = v16;
    *(void *)(a1 + 64) = v7 - 1;
    operator delete(v8);
    double v17 = sub_100D2EC74(*(double *)(a1 + 92), *(double *)(a1 + 100), *(double *)(a1 + 404), *(double *)(a1 + 412));
    double v18 = *(double *)(a1 + 476) - *(double *)(a1 + 164);
    if (v18 <= 0.0) {
      *(void *)(a1 + 1712) = 0xBFF0000000000000LL;
    }
    else {
      *(double *)(a1 + 1712) = v17 / v18;
    }
  }

  else
  {
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    CFTypeID v19 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
    {
      int v25 = 68289026;
      int v26 = 0;
      __int16 v27 = 2082;
      uint64_t v28 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:No more pending locations}",  (uint8_t *)&v25,  0x12u);
    }

    *(_DWORD *)(a1 + 400) = 0xFFFF;
    *(void *)(a1 + 412) = 0LL;
    *(void *)(a1 + 404) = 0LL;
    __asm { FMOV            V1.2D, #-1.0 }

    *(_OWORD *)(a1 + 420) = xmmword_1012E0070;
    *(_OWORD *)(a1 + 436) = _Q1;
    *(_OWORD *)(a1 + 452) = _Q1;
    *(_OWORD *)(a1 + 46_Block_object_dispose(va, 8) = _Q1;
    *(_DWORD *)(a1 + 484) = 0;
    *(void *)(a1 + 496) = 0LL;
    *(void *)(a1 + 504) = 0LL;
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 512) = 0;
    *(void *)(a1 + 516) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 544) = 0LL;
    *(void *)(a1 + 536) = 0LL;
    *(_BYTE *)(a1 + 552) = 0;
  }

void sub_1008DFAD8(uint64_t a1)
{
  __int128 v2 = *(const void **)(a1 + 1736);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1736) = 0LL;
    sub_1008DF3E0(a1, 1);
  }

id sub_1008DFB18(uint64_t a1)
{
  return _objc_msgSend( objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLFenceManager"),  "setIsSimulatingLocation:",  *(unsigned __int8 *)(a1 + 72));
}

void sub_1008DFB68(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v13, a2);
  sub_1002A5370(v12);
  sub_1002A5370(v11);
  if (v13 != v14)
  {
    uint64_t v3 = v13 + 24;
    do
    {
      uint64_t v4 = v3 - 24;
      sub_10065B9C4(v3 - 24, v10);
      __int128 v5 = (const char *)v3;
      uint64_t v6 = sub_1002A59CC((uint64_t)v10);
      sub_1002AB370((uint64_t)v11, v5, v6);
      sub_1002A5590(v10);
      v3 += 248LL;
    }

    while (v4 + 248 != v14);
  }

  uint64_t v7 = sub_1002A59CC((uint64_t)v11);
  sub_1002AB370((uint64_t)v12, "kCLConnectionMessageCircularRegionKey", v7);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = sub_1002A59CC((uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, v9);
  sub_1002A5590(v11);
  sub_1002A5590(v12);
  v12[0] = (void **)&v13;
  sub_1006684D8(v12);
}

void sub_1008DFC70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  a14 = (void **)&a16;
  sub_1006684D8(&a14);
  _Unwind_Resume(a1);
}

void sub_1008DFCC0(double *a1)
{
}

CFAbsoluteTime sub_1008DFD68(uint64_t a1)
{
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  __int128 v2 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 1729);
    uint64_t buf = 68289282LL;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2050;
    uint64_t v23 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Dealing with no more locations, repeatBehavior:%{public, location:CLSimulationLocatio nRepeatBehavior}lld}",  (uint8_t *)&buf,  0x1Cu);
  }

  int v5 = *(unsigned __int8 *)(a1 + 1729);
  if (v5 == 2)
  {
    if (*(void *)(a1 + 1736))
    {
      id v12 = [*(id *)a1 silo];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_1008E00A4;
      v17[3] = &unk_10181D3D0;
      v17[4] = a1;
      [v12 async:v17];
    }
  }

  else if (v5 == 1)
  {
    __int128 v13 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 512) = v13;
    *(_OWORD *)(a1 + 52_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 540) = *(_OWORD *)(a1 + 228);
    __int128 v14 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 44_Block_object_dispose(va, 8) = v14;
    __int128 v15 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 480) = v15;
    __int128 v16 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 416) = v16;
    CFAbsoluteTime result = CFAbsoluteTimeGetCurrent() + 1.0;
    *(CFAbsoluteTime *)(a1 + 476) = result;
  }

  else if (!*(_BYTE *)(a1 + 1729))
  {
    *(_DWORD *)(a1 + 400) = 0xFFFF;
    *(void *)(a1 + 412) = 0LL;
    *(void *)(a1 + 404) = 0LL;
    __asm { FMOV            V1.2D, #-1.0 }

    *(_OWORD *)(a1 + 420) = xmmword_1012E0070;
    *(_OWORD *)(a1 + 436) = _Q1;
    *(_OWORD *)(a1 + 452) = _Q1;
    *(_OWORD *)(a1 + 46_Block_object_dispose(va, 8) = _Q1;
    *(_DWORD *)(a1 + 484) = 0;
    *(void *)(a1 + 496) = 0LL;
    *(void *)(a1 + 504) = 0LL;
    *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 512) = 0;
    *(void *)(a1 + 516) = 0xBFF0000000000000LL;
    *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 544) = 0LL;
    *(void *)(a1 + 536) = 0LL;
    *(_BYTE *)(a1 + 552) = 0;
    id v11 = [*(id *)a1 silo];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1008DFFAC;
    v18[3] = &unk_10181D3D0;
    _DWORD v18[4] = a1;
    [v11 afterInterval:v18 async:10.0];
  }

  return result;
}

void sub_1008DFFAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1019349F0 != -1) {
    dispatch_once(&qword_1019349F0, &stru_10185F918);
  }
  __int128 v2 = (os_log_s *)qword_1019349F8;
  if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    int v5 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Sending appropriate location unavailable notification}",  (uint8_t *)v3,  0x12u);
  }

void sub_1008E00A4(uint64_t a1)
{
}

double sub_1008E00AC(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  a4[1] = sub_100D2EC74(*(double *)(a1 + 4), *(double *)(a1 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12));
  double v8 = *(double *)(a1 + 76);
  __int128 v28 = *(_OWORD *)(a1 + 4);
  double v9 = *(double *)(a1 + 20);
  double v27 = v8;
  double v29 = v9;
  uint64_t v10 = *(void *)(a1 + 60);
  uint64_t v30 = *(void *)(a1 + 44);
  uint64_t v31 = v10;
  __int128 v32 = *(_OWORD *)(a1 + 28);
  uint64_t v11 = *(void *)(a1 + 68);
  uint64_t v33 = *(void *)(a1 + 52);
  uint64_t v34 = v11;
  double v35 = v9 * (v9 * 2.99573227);
  double v36 = v35;
  uint64_t v37 = 0LL;
  double v16 = *(double *)(a2 + 76);
  __int128 v17 = *(_OWORD *)(a2 + 4);
  uint64_t v12 = *(void *)(a2 + 44);
  double v18 = *(double *)(a2 + 20);
  uint64_t v13 = *(void *)(a2 + 60);
  uint64_t v19 = v12;
  uint64_t v20 = v13;
  __int128 v21 = *(_OWORD *)(a2 + 28);
  uint64_t v14 = *(void *)(a2 + 68);
  uint64_t v22 = *(void *)(a2 + 52);
  uint64_t v23 = v14;
  double v24 = v18 * (v18 * 2.99573227);
  double v25 = v24;
  uint64_t v26 = 0LL;
  a4[2] = sub_100C64CBC(&v27, &v16, v16 - v8);
  double result = *a3 + a4[1];
  *a4 = result;
  return result;
}

id sub_1008E01C4(uint64_t a1, uint64_t a2, CFAbsoluteTime *a3)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_10185F958);
  }
  uint64_t v6 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a2 + 4);
    uint64_t v8 = *(void *)(a2 + 12);
    uint64_t v9 = *(void *)(a2 + 20);
    uint64_t v10 = *(void *)(a2 + 76);
    CFAbsoluteTime v12 = *a3;
    uint64_t v11 = *((void *)a3 + 1);
    uint64_t v13 = *((void *)a3 + 2);
    uint64_t v14 = *((void *)a3 + 3);
    *(_DWORD *)uint64_t buf = 134285313;
    *(void *)CFTypeID v65 = v7;
    *(_WORD *)&_BYTE v65[8] = 2049;
    *(void *)&v65[10] = v8;
    __int16 v66 = 2050;
    uint64_t v67 = v9;
    __int16 v68 = 2050;
    uint64_t v69 = v10;
    __int16 v70 = 2050;
    uint64_t v71 = v11;
    __int16 v72 = 2050;
    uint64_t v73 = v13;
    __int16 v74 = 2050;
    CFAbsoluteTime v75 = v12;
    __int16 v76 = 2050;
    uint64_t v77 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "@ClxSimulated, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, time, %{public}.1f, delt aDistance, %{public}.1f, deltaDistanceAccuracy, %{public}.1f, odometer, %{public}.1f, timestampGps, %{public}.1f",  buf,  0x52u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_10185F958);
    }
    uint64_t v30 = *(void *)(a2 + 4);
    uint64_t v31 = *(void *)(a2 + 12);
    uint64_t v32 = *(void *)(a2 + 20);
    uint64_t v33 = *(void *)(a2 + 76);
    uint64_t v35 = *(void *)a3;
    uint64_t v34 = *((void *)a3 + 1);
    uint64_t v36 = *((void *)a3 + 2);
    uint64_t v37 = *((void *)a3 + 3);
    int v48 = 134285313;
    uint64_t v49 = v30;
    __int16 v50 = 2049;
    uint64_t v51 = v31;
    __int16 v52 = 2050;
    uint64_t v53 = v32;
    __int16 v54 = 2050;
    uint64_t v55 = v33;
    __int16 v56 = 2050;
    uint64_t v57 = v34;
    __int16 v58 = 2050;
    uint64_t v59 = v36;
    __int16 v60 = 2050;
    uint64_t v61 = v35;
    __int16 v62 = 2050;
    uint64_t v63 = v37;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@ClxSimulated, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, time, %{public}.1f, delt aDistance, %{public}.1f, deltaDistanceAccuracy, %{public}.1f, odometer, %{public}.1f, timestampGps, %{public}.1f",  &v48,  82);
    uint64_t v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
  }

  if (*(_BYTE *)(a1 + 1728) == 1)
  {
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    uint64_t v20 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Considering location type for location delivery",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349F0 != -1) {
        dispatch_once(&qword_1019349F0, &stru_10185F918);
      }
      LOWORD(v4_Block_object_dispose(va, 8) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349F8,  1LL,  "Considering location type for location delivery",  &v48,  v44);
      uint64_t v41 = (uint8_t *)v40;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)",  "%s\n",  v40);
      if (v41 != buf) {
        free(v41);
      }
    }

    uint64_t v19 = @"CLNmeaProvider";
    switch(*(_DWORD *)(a2 + 96))
    {
      case 1:
      case 9:
        if (qword_1019349F0 != -1) {
          dispatch_once(&qword_1019349F0, &stru_10185F918);
        }
        __int128 v21 = (os_log_s *)qword_1019349F8;
        if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "CLGnssProvider will be use as location provider",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349F0 != -1) {
            dispatch_once(&qword_1019349F0, &stru_10185F918);
          }
          LOWORD(v4_Block_object_dispose(va, 8) = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349F8,  1LL,  "CLGnssProvider will be use as location provider",  &v48,  v44);
          double v43 = (uint8_t *)v42;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)",  "%s\n",  v42);
          if (v43 != buf) {
            free(v43);
          }
        }

        uint64_t v19 = @"CLGnssProvider";
        goto LABEL_29;
      case 2:
        goto LABEL_29;
      case 3:
        uint64_t v19 = @"CLAccessoryLocationProvider";
        goto LABEL_29;
      case 4:
        uint64_t v19 = @"CLWifiLocationProvider";
        goto LABEL_29;
      case 6:
      case 7:
      case 8:
        uint64_t v19 = @"CLCellLocationProvider";
        goto LABEL_29;
      default:
        goto LABEL_30;
    }
  }

  if (*(_BYTE *)(a1 + 1728)) {
    goto LABEL_30;
  }
  *(_DWORD *)(a2 + 84) = 100;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a2 + 76) = Current;
  a3[3] = Current;
  if (*(double *)(a1 + 1696) > 0.0 || *(double *)(a1 + 1688) > 0.0 || *(double *)(a1 + 1704) > 0.0)
  {
    double v16 = *(double *)(a2 + 88);
    sub_1008DFCC0((double *)a1);
    if (v16 < v17)
    {
      sub_1008DFCC0((double *)a1);
      *(double *)(a2 + 8_Block_object_dispose(va, 8) = v18 + 1.0;
    }
  }

  uint64_t v19 = @"CLSimulatedLocationProvider";
LABEL_29:
  id v22 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", v19);
  if (!v22)
  {
LABEL_30:
    if (qword_1019349F0 != -1) {
      dispatch_once(&qword_1019349F0, &stru_10185F918);
    }
    uint64_t v23 = (os_log_s *)qword_1019349F8;
    if (os_log_type_enabled((os_log_t)qword_1019349F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)CFTypeID v65 = 0;
      *(_WORD *)&v65[4] = 2082;
      *(void *)&v65[6] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:No location provider found. Defaulting to SimulatedLocationProvider}",  buf,  0x12u);
    }

    id v22 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLSimulatedLocationProvider");
  }

  *(_BYTE *)(a2 + 152) = 1;
  double v24 = objc_alloc(&OBJC_CLASS___CLLocation);
  __int128 v25 = *(_OWORD *)(a2 + 112);
  v46[6] = *(_OWORD *)(a2 + 96);
  v46[7] = v25;
  v47[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)(a2 + 140);
  __int128 v26 = *(_OWORD *)(a2 + 48);
  v46[2] = *(_OWORD *)(a2 + 32);
  v46[3] = v26;
  __int128 v27 = *(_OWORD *)(a2 + 80);
  v46[4] = *(_OWORD *)(a2 + 64);
  v46[5] = v27;
  __int128 v28 = *(_OWORD *)(a2 + 16);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v28;
  memcpy(__dst, a3, sizeof(__dst));
  return objc_msgSend( v22,  "sendSimulatedLocation:",   -[CLLocation initWithClientLocation:clientLocationPrivate:]( v24,  "initWithClientLocation:clientLocationPrivate:",  v46,  __dst));
}

void sub_1008E08C8(id a1)
{
  qword_1019349F8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

void sub_1008E08F4(id a1)
{
  qword_1019348B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1008E0920(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t *sub_1008E094C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = (char *)operator new(0xB0uLL);
    uint64_t v9 = v8;
    *(void *)uint64_t v8 = 0LL;
    *((void *)v8 + 1) = 0LL;
    __int128 v10 = *(_OWORD *)(a3 + 112);
    __int128 v11 = *(_OWORD *)(a3 + 128);
    __int128 v12 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(v8 + 156) = *(_OWORD *)(a3 + 156);
    *((_OWORD *)v8 + _Block_object_dispose(va, 8) = v11;
    *((_OWORD *)v8 + 9) = v12;
    *((_OWORD *)v8 + 7) = v10;
    __int128 v13 = *(_OWORD *)(a3 + 48);
    __int128 v14 = *(_OWORD *)(a3 + 64);
    __int128 v15 = *(_OWORD *)(a3 + 96);
    *((_OWORD *)v8 + 5) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v8 + 6) = v15;
    *((_OWORD *)v8 + 3) = v13;
    *((_OWORD *)v8 + 4) = v14;
    __int128 v16 = *(_OWORD *)(a3 + 32);
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v8 + 2) = v16;
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v18 = 1LL;
    if (v17 != a4)
    {
      uint64_t v19 = v8;
      do
      {
        uint64_t v8 = (char *)operator new(0xB0uLL);
        *(void *)uint64_t v8 = v19;
        *((void *)v8 + 1) = 0LL;
        __int128 v20 = *(_OWORD *)(v17 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v17 + 16);
        *((_OWORD *)v8 + 2) = v20;
        __int128 v21 = *(_OWORD *)(v17 + 48);
        __int128 v22 = *(_OWORD *)(v17 + 64);
        __int128 v23 = *(_OWORD *)(v17 + 96);
        *((_OWORD *)v8 + 5) = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v8 + 6) = v23;
        *((_OWORD *)v8 + 3) = v21;
        *((_OWORD *)v8 + 4) = v22;
        __int128 v24 = *(_OWORD *)(v17 + 112);
        __int128 v25 = *(_OWORD *)(v17 + 128);
        __int128 v26 = *(_OWORD *)(v17 + 144);
        *(_OWORD *)(v8 + 156) = *(_OWORD *)(v17 + 156);
        *((_OWORD *)v8 + _Block_object_dispose(va, 8) = v25;
        *((_OWORD *)v8 + 9) = v26;
        *((_OWORD *)v8 + 7) = v24;
        *((void *)v19 + 1) = v8;
        ++v18;
        uint64_t v17 = *(void *)(v17 + 8);
        uint64_t v19 = v8;
      }

      while (v17 != a4);
    }

    uint64_t v27 = *a2;
    *(void *)(v27 + _Block_object_dispose(va, 8) = v9;
    void *v9 = v27;
    *a2 = (uint64_t)v8;
    *((void *)v8 + 1) = a2;
    *(void *)(a1 + 16) += v18;
    return v9;
  }

  return a2;
}

void sub_1008E0A6C(void *a1)
{
  do
  {
    __int128 v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_1008E0A8C(_Unwind_Exception *a1)
{
}

void sub_1008E0AA0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1008E0B04()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1008E0B78(_Unwind_Exception *a1)
{
}

void sub_1008E0B90()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013405B0;
      v1[3] = unk_1013405C0;
      v1[4] = xmmword_1013405D0;
      v1[0] = xmmword_101340590;
      v1[1] = unk_1013405A0;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1008E0C64(_Unwind_Exception *a1)
{
}

void sub_1008E0C7C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1008E0D18(_Unwind_Exception *a1)
{
}

void sub_1008E0D30()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1008E0DBC(_Unwind_Exception *a1)
{
}

uint64_t sub_1008E0DD4()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101999230, (void *)&_mh_execute_header);
}

double sub_1008E0E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_10185F988;
  *(void *)(a1 + 80) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  return result;
}

void **sub_1008E0E44(void **a1)
{
  *a1 = off_10185F988;
  else {
    uint64_t v2 = (void *)*((unsigned __int8 *)a1 + 47);
  }
  uint64_t v3 = a1 + 3;
  if (v2)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    __int16 v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      (*((void (**)(void **__return_ptr, void **))*a1 + 3))(__p, a1);
      if (v24 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      uint64_t v6 = a1 + 3;
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v16 = 2082;
      uint64_t v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s",  buf,  0x16u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185F9C8);
      }
      uint64_t v10 = qword_101934978;
      (*((void (**)(_BYTE *__return_ptr, void **))*a1 + 3))(buf, a1);
      if (v18 >= 0) {
        __int128 v11 = buf;
      }
      else {
        __int128 v11 = *(_BYTE **)buf;
      }
      __int128 v12 = a1 + 3;
      int v19 = 136446466;
      __int128 v20 = v11;
      __int16 v21 = 2082;
      __int128 v22 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v10,  0LL,  "#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s",  &v19,  22);
      __int128 v14 = v13;
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLDaemonEmergencyEnablementAssertion::~CLDaemonEmergencyEnablementAssertion()",  "%s\n",  v14);
    }

    id v7 = objc_msgSend(objc_msgSend(a1[2], "vendor"), "proxyForService:", @"CLClientManager");
    uint64_t v8 = a1 + 6;
    objc_msgSend( v7,  "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:",  0,  *((unsigned __int8 *)a1 + 72) != 0,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  }

  [a1[10] invalidate];

  a1[10] = 0LL;
  sub_100213E60(a1);
  return a1;
}

void sub_1008E1158(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_1008E1168(void **a1)
{
  uint64_t v1 = sub_1008E0E44(a1);
  operator delete(v1);
}

void sub_1008E117C(uint64_t a1, CLConnectionMessage **a2)
{
  __int16 v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 49LL)
    {
LABEL_7:
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185F9C8);
      }
      uint64_t v6 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*a2);
        else {
          uint64_t v8 = *(const char **)v7;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        __int128 v22 = "";
        __int16 v23 = 2082;
        char v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning unrecognized message, MessageName:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      return;
    }

    __int16 v4 = (void *)*v4;
  }

  else if (v5 != 49)
  {
    goto LABEL_7;
  }

  if (memcmp(v4, "EmergencyEnablementAssertion/kCLConnectionMessage", 0x31uLL)) {
    goto LABEL_7;
  }
  uint64_t v9 = _os_activity_create( (void *)&_mh_execute_header,  "CL: EmergencyEnablementAssertion/kCLConnectionMessage",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185F9C8);
  }
  uint64_t v10 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v20 = 0;
    __int16 v21 = 2082;
    __int128 v22 = "";
    __int16 v23 = 2082;
    char v24 = "activity";
    __int16 v25 = 2050;
    uint64_t v26 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:EmergencyEnablementAssertion/kCLConnectionMessage, event:%{public, location:escape_on ly}s, this:%{public}p}",  buf,  0x26u);
  }

  __int128 v11 = *a2;
  __int128 v12 = a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    __int128 v13 = (unint64_t *)((char *)v12 + 8);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  sub_1008E1424(a1, v17);
  if (v12)
  {
    __int128 v15 = (unint64_t *)((char *)v12 + 8);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v12 + 16LL))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008E1400( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1008E1424(uint64_t a1, CLConnectionMessage **a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_5;
    }
LABEL_6:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    __int16 v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
      int v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#warning EmergencyEnablementAssertion already taken by %{public}s",  buf,  0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    uint64_t v48 = qword_101934978;
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(buf, a1);
    if (SHIBYTE(v61[0]) >= 0) {
      uint64_t v49 = buf;
    }
    else {
      uint64_t v49 = *(uint8_t **)buf;
    }
    LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v48,  0LL,  "#warning EmergencyEnablementAssertion already taken by %{public}s",  &v59,  12);
    int v20 = v50;
    if (SHIBYTE(v61[0]) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_168;
  }

  if (*(_BYTE *)(a1 + 47)) {
    goto LABEL_6;
  }
LABEL_5:
  if (*(void *)(a1 + 80)) {
    goto LABEL_6;
  }
  sub_1010DDBC0(__p, "com.apple.locationd.emergency_enabler");
  char v6 = sub_1008E249C((void *)a1, (uint64_t *)__p);
  char v7 = v6;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v7 & 1) != 0) {
      goto LABEL_18;
    }
LABEL_25:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    __int128 v15 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
      unint64_t v16 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s",  buf,  0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185F9C8);
      }
      uint64_t v17 = qword_101934978;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(buf, a1);
      if (SHIBYTE(v61[0]) >= 0) {
        char v18 = buf;
      }
      else {
        char v18 = *(uint8_t **)buf;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v17,  0LL,  "#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s",  &v59,  12);
      int v20 = v19;
      if (SHIBYTE(v61[0]) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_168:
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
LABEL_169:
      if (v20 != __p) {
        free(v20);
      }
      return;
    }

    return;
  }

  if ((v6 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_18:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v9 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  id v10 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
  id v11 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
  if (v10 && (__int128 v12 = v11) != 0LL && v9)
  {
    if ([v9 length])
    {
      __int128 v13 = (const std::string::value_type *)[v9 UTF8String];
      unint64_t v14 = (std::string::size_type *)(a1 + 24);
      std::string::assign((std::string *)(a1 + 24), v13);
      *(_BYTE *)(a1 + 72) = objc_msgSend( objc_msgSend( Dictionary,  "objectForKeyedSubscript:",  @"kCLConnectionMessageOverrideDeauthorizationKey"),  "BOOLValue");
      *(_OWORD *)__int16 v64 = 0u;
      memset(v65, 0, 19);
      __int128 v62 = 0u;
      *(_OWORD *)uint64_t v63 = 0u;
      *(_OWORD *)uint64_t buf = 0u;
      *(_OWORD *)uint64_t v61 = 0u;
      __int128 v66 = 0u;
      __int128 v67 = 0u;
      __int128 v68 = 0u;
      memset(v69, 0, 27);
      if ([v10 length])
      {
        sub_1010DDBC0(&v59, (char *)[v10 UTF8String]);
        sub_100FE2D54(&v59, (uint64_t)__p);
      }

      else
      {
        if (![v12 length])
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185F9C8);
          }
          double v43 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(&v59, a1);
            if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v44 = &v59;
            }
            else {
              uint64_t v44 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            int v45 = (std::string::size_type *)(a1 + 24);
            *(void *)__n128 __p = 68289538LL;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v44;
            __int16 v71 = 2082;
            __int16 v72 = (void **)v45;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Ignoring #CLEEA Assertion requested without explicit beneficiary, RequestedBy :%{public, location:escape_only}s, Reason:%{public, location:escape_only}s}",  __p,  0x26u);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185F9C8);
            }
          }

          Class v46 = (os_log_s *)qword_101934978;
          if (os_signpost_enabled((os_log_t)qword_101934978))
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(&v59, a1);
            if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              unint64_t v47 = &v59;
            }
            else {
              unint64_t v47 = (std::string *)v59.__r_.__value_.__r.__words[0];
            }
            *(void *)__n128 __p = 68289538LL;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v47;
            __int16 v71 = 2082;
            __int16 v72 = (void **)v14;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v46,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Ignoring #CLEEA Assertion requested without explicit beneficiary",  "{msg%{public}.0s:Ignoring #CLEEA Assertion requested without explicit beneficiary, RequestedBy :%{public, location:escape_only}s, Reason:%{public, location:escape_only}s}",  __p,  0x26u);
          }

          if (*(char *)(a1 + 47) < 0)
          {
            **(_BYTE **)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0LL;
          }

          else
          {
            *(_BYTE *)(a1 + 24) = 0;
            *(_BYTE *)(a1 + 47) = 0;
          }

          goto LABEL_100;
        }

        sub_1010DDBC0(&v59, (char *)[v12 UTF8String]);
        sub_100FE2DDC(&v59, (uint64_t)__p);
      }

      sub_1011DBE2C((uint64_t)buf, (__int128 *)__p);
      sub_1011F6920((uint64_t)__p);
      CLConnection::getUserName(*(CLConnection **)(a1 + 8));
      sub_100FE36F4((std::string *)buf, (const std::string *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_100FE3FB4((uint64_t)buf, (uint64_t)__p);
      uint64_t v31 = (void **)(a1 + 48);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)__p;
      *(void *)(a1 + 64) = *(void *)&__p[16];
      if (*(_BYTE *)(a1 + 72)
        && (sub_100FE3188((std::string *)(a1 + 48), (uint64_t)__p), int v32 = v75, sub_1011F6920((uint64_t)__p), !v32))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185F9C8);
        }
        uint64_t v37 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(&v59, a1);
          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v38 = &v59;
          }
          else {
            int v38 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          uint64_t v39 = (void **)(a1 + 48);
          uint64_t v40 = (std::string::size_type *)(a1 + 24);
          *(void *)__n128 __p = 68289794LL;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v38;
          __int16 v71 = 2082;
          __int16 v72 = v39;
          __int16 v73 = 2082;
          __int16 v74 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLEPTO Assertion requested for a Non SystemService client, not supported, Reques tedBy:%{public, location:escape_only}s, BeneficiaryClientKey:%{public, location:escape_only}s, Reaso n:%{public, location:escape_only}s}",  __p,  0x30u);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185F9C8);
          }
        }

        uint64_t v41 = (os_log_s *)qword_101934978;
        if (os_signpost_enabled((os_log_t)qword_101934978))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(&v59, a1);
          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int128 v42 = &v59;
          }
          else {
            __int128 v42 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          *(void *)__n128 __p = 68289794LL;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v42;
          __int16 v71 = 2082;
          __int16 v72 = v31;
          __int16 v73 = 2082;
          __int16 v74 = v14;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#CLEPTO Assertion requested for a Non SystemService client, not supported",  "{msg%{public}.0s:#CLEPTO Assertion requested for a Non SystemService client, not supported, Reques tedBy:%{public, location:escape_only}s, BeneficiaryClientKey:%{public, location:escape_only}s, Reaso n:%{public, location:escape_only}s}",  __p,  0x30u);
        }
      }

      else
      {
        *(void *)(a1 + 80) = -[CLStreamedLocationProviderAssertion initInUniverse:]( objc_alloc(&OBJC_CLASS___CLStreamedLocationProviderEmergencyEnablementAssertion),  "initInUniverse:",  *(void *)(a1 + 16));
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185F9C8);
        }
        uint64_t v33 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
          if (__p[23] >= 0) {
            uint64_t v34 = __p;
          }
          else {
            uint64_t v34 = *(_BYTE **)__p;
          }
          std::string::size_type v35 = a1 + 24;
          LODWORD(v59.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          WORD2(v59.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s",  (uint8_t *)&v59,  0x16u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185F9C8);
          }
          uint64_t v51 = qword_101934978;
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(&v59, a1);
          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v52 = &v59;
          }
          else {
            __int16 v52 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          int v55 = 136446466;
          __int16 v56 = v52;
          __int16 v57 = 2082;
          __int16 v58 = v14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v51,  0LL,  "#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s",  &v55,  22);
          __int16 v54 = v53;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v54);
          if (v54 != __p) {
            free(v54);
          }
        }

        id v36 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLClientManager");
        objc_msgSend( v36,  "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:",  1,  *(unsigned __int8 *)(a1 + 72) != 0,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31));
      }

void sub_1008E2404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
}

uint64_t sub_1008E249C(void *a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185F9C8);
  }
  int v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 24LL))(__p, a1);
    char v6 = *(_BYTE **)__p;
    char v7 = "not entitled";
    if (v22 >= 0) {
      char v6 = __p;
    }
    if ((_DWORD)isEntitled) {
      char v7 = "entitled";
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    __int16 v25 = v6;
    __int16 v26 = 2080;
    uint64_t v27 = v7;
    __int16 v28 = 2080;
    double v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    uint64_t v10 = qword_101934978;
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24LL))(v17, a1);
    id v11 = (void **)v17[0];
    __int128 v12 = "not entitled";
    if (v18 >= 0) {
      id v11 = v17;
    }
    if ((_DWORD)isEntitled) {
      __int128 v12 = "entitled";
    }
    else {
      __int128 v13 = (uint64_t *)*a2;
    }
    *(_DWORD *)__n128 __p = 136315650;
    *(void *)&__p[4] = v11;
    __int16 v20 = 2080;
    __int16 v21 = v12;
    __int16 v22 = 2080;
    uint64_t v23 = v13;
    _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, v10, 2LL, "%s is %s for %s", __p, 32, v16);
    __int128 v15 = v14;
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDaemonEmergencyEnablementAssertion::isEntitled(const std::string &)",  "%s\n",  v15);
  }

  return isEntitled;
}

id sub_1008E2750(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v3 = (void *)(a1 + 48);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  -[CLClientKeyPath clientKey]( +[CLClientKeyPath clientKeyPathWithLegacyClientKey:]( CLClientKeyPath,  "clientKeyPathWithLegacyClientKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)),  "clientKey"),  @"ClientKeyPath");
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  -[CLClientKeyPath clientKey](sub_10055FF18(&v6), "clientKey"),  @"NaturalConnectedIdentity");
  __int16 v4 = (void *)(a1 + 24);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4),  @"Reason");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72)),  @"OverrideDeauthorization");
  return v2;
}

void sub_1008E2854(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1008E2880(uint64_t a1)
{
  if (a1) {
    sub_1008E5794(a1 - 128);
  }
  else {
    sub_1008E5794(0LL);
  }
}

id sub_1008E2890(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_1008E592C(v2, a2);
}

void sub_1008E28A0(uint64_t a1, float *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_1008E5CB0(v2, a2);
}

void sub_1008E28B0(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = a1 - 128;
  }
  else {
    uint64_t v1 = 0LL;
  }
  if (*(_BYTE *)(v1 + 146)) {
    sub_1008E400C(v1);
  }
}

id sub_1008E28CC(uint64_t a1)
{
  if (a1) {
    return sub_1008E60E0(a1 - 128);
  }
  else {
    return sub_1008E60E0(0LL);
  }
}

id sub_1008E28DC(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  return sub_1008E6308(v2, a2);
}

id sub_1008E28EC(uint64_t a1)
{
  if (a1) {
    return sub_1008E64A8(a1 - 128);
  }
  else {
    return sub_1008E64A8(0LL);
  }
}

void sub_1008E28FC(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 128;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_1008E6648(v2, a2);
}

uint64_t sub_1008E290C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D2F3A8(a1, a2);
  *(void *)(v3 + 12_Block_object_dispose(va, 8) = &unk_10185F9E8;
  *(void *)(v3 + 136) = 12LL;
  *(void *)uint64_t v3 = off_10185FB18;
  *(void *)(v3 + 144) = 16777728LL;
  *(_DWORD *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0x40AC200000000000LL;
  __int16 v4 = (uint64_t *)(v3 + 160);
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 176) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v5 = [*(id *)(a1 + 40) newTimer];
  *(_OWORD *)(a1 + 192) = 0u;
  audit_token_t v6 = (uint64_t *)(a1 + 192);
  *(void *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  if (*(void *)(a1 + 40))
  {
    BOOL v30 = 0;
    uint64_t v7 = sub_1002F8DDC();
    if (sub_1002A6F64(v7, "SentInitialMotionCalsToWatch", &v30))
    {
      uint64_t v8 = sub_1002F8DDC();
      sub_1002A667C(v8, "SentInitialMotionCalsToWatch", 0xFFFFFFFFLL);
    }

    uint64_t v9 = sub_1006E27E8();
    sub_100413284(v9, buf);
    sub_1002A82BC(*(uint64_t *)&buf[0], "MotionSyncFireIntervalInSeconds", v4);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
    if (*((void *)&buf[0] + 1))
    {
      id v11 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    __int128 v13 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *v4;
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      uint64_t v26 = *v4;
      int v31 = 134217984;
      uint64_t v32 = v26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.",  COERCE_DOUBLE(&v31));
      __int16 v28 = (char *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(id<CLIntersiloUniverse>)",  "%s\n",  v27);
    }

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1008E2E14;
    v29[3] = &unk_10181D3D0;
    v29[4] = a1;
    [*(id *)(a1 + 184) setHandler:v29];
    __int128 v15 = operator new(0x80uLL);
    sub_10030ABE8((uint64_t)v15, *(void *)(a1 + 32), "user", 2, 0, 0);
    uint64_t v16 = *v6;
    *audit_token_t v6 = (uint64_t)v15;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    uint64_t v17 = operator new(0x80uLL);
    sub_10030ABE8((uint64_t)v17, *(void *)(a1 + 32), "userinfo", 1, 0, 0);
    uint64_t v18 = *(void *)(a1 + 200);
    *(void *)(a1 + 200) = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_100E18F18((uint64_t)sub_1008E346C, a1, *(void **)(a1 + 32), buf);
    uint64_t v19 = *(void *)&buf[0];
    *(void *)&buf[0] = 0LL;
    uint64_t v20 = *(void *)(a1 + 216);
    *(void *)(a1 + 216) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
      uint64_t v21 = *(void *)&buf[0];
      *(void *)&buf[0] = 0LL;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
      }
    }

    [*(id *)(*(void *)(a1 + 216) + 16) register:*(void *)(*(void *)(a1 + 216) + 8) forNotification:3 registrationInfo:0];
    sub_1003A09BC((uint64_t)sub_1008E3644, a1, *(void **)(a1 + 32), buf);
    uint64_t v22 = *(void *)&buf[0];
    *(void *)&buf[0] = 0LL;
    uint64_t v23 = *(void *)(a1 + 208);
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = v22;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
      uint64_t v24 = *(void *)&buf[0];
      *(void *)&buf[0] = 0LL;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      }
    }

    [*(id *)(*(void *)(a1 + 208) + 16) register:*(void *)(*(void *)(a1 + 208) + 8) forNotification:6 registrationInfo:0];
  }

  return a1;
}

void sub_1008E2D5C(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[27];
  v1[27] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = v1[26];
  v1[26] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = v1[25];
  v1[25] = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *v2;
  uint64_t *v2 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_100D2FE80((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_1008E2E14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    int v3 = sub_100D307B4(*(void **)(v1 + 168));
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Timer fired on companion,currentMotionCalsVersion,%d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v4 = qword_101934608;
    int v5 = sub_100D307B4(*(void **)(v1 + 168));
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v4,  2LL,  "Timer fired on companion,currentMotionCalsVersion,%d",  v8);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_1008E2FD8(v1);
}

void sub_1008E2FD8(uint64_t a1)
{
  if ((sub_100D307B4(*(void **)(a1 + 168)) & 0x80000000) == 0 && *(int *)(a1 + 148) >= 1)
  {
    uint64_t v2 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 168));
    int v3 = v2;
    if (*(int *)(a1 + 148) <= 3)
    {
      if (-[NSMutableDictionary objectForKeyedSubscript:]( v2,  "objectForKeyedSubscript:",  @"RawSpeedToKValueTable"))
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  +[CMPedometerTable convertToCMStrideCalibrationData:]( &OBJC_CLASS___CMPedometerTableRawSpeedToKValue,  "convertToCMStrideCalibrationData:",  -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"RawSpeedToKValueTable")),  @"StrideCalibrationDataBins");
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_10185FC60);
        }
        uint64_t v4 = (os_log_s *)qword_101934608;
        if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
        {
          int v5 = *(_DWORD *)(a1 + 148);
          int v6 = *(_DWORD *)(a1 + 152);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v5;
          LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).",  (uint8_t *)buf,  0xEu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934600 != -1) {
            dispatch_once(&qword_101934600, &stru_10185FC60);
          }
          int v15 = *(_DWORD *)(a1 + 148);
          int v16 = *(_DWORD *)(a1 + 152);
          LODWORD(v20.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(v20.__r_.__value_.__r.__words[0]) = v15;
          LOWORD(v20.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[1] + 2) = v16;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).",  &v20,  14);
          uint64_t v18 = (std::stringbuf::string_type *)v17;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()", "%s\n", v17);
          if (v18 != buf) {
            free(v18);
          }
        }
      }

      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", @"RawSpeedToKValueTable");
      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", @"StepCadenceToStrideLengthTable");
    }

    uint64_t v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  +[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v3),  1LL,  0LL);
    id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLCompanionNotifier");
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1008E3E24;
    v19[3] = &unk_101840D20;
    void v19[4] = v7;
    [v8 doAsync:v19];
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v9 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      sub_100D30214(v3, buf);
      int v10 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
          ? buf
          : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v20.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Companion sent calibrations to watch: %s",  (uint8_t *)&v20,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      uint64_t v11 = qword_101934608;
      sub_100D30214(v3, &v20);
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v12 = &v20;
      }
      else {
        unint64_t v12 = (std::stringbuf::string_type *)v20.__r_.__value_.__r.__words[0];
      }
      int v21 = 136315138;
      uint64_t v22 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  1LL,  "Companion sent calibrations to watch: %s",  (const char *)&v21);
      uint64_t v14 = v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()",  "%s\n",  (const char *)v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

void sub_1008E346C(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FC80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionSyncStoreCompanion::onPalUpdateNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FC80);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionSyncStoreCompanion::onPalUpdateNotification, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008E391C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008E3624( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008E3644(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FC80);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionSyncStoreCompanion::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FC80);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionSyncStoreCompanion::onCompanionNotification, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008E3AF4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008E37FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008E3820(uint64_t a1)
{
  *(void *)a1 = off_10185FB18;
  uint64_t v2 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }

  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;

  *(void *)(a1 + 176) = 0LL;
  uint64_t v4 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 208);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return sub_100D2FE80(a1);
}

void sub_1008E3908(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008E3820(a1);
  operator delete(v1);
}

uint64_t sub_1008E391C(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v7 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    int v10 = *a3;
    v13[0] = 67109120;
    v13[1] = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "%d",  v13);
    unint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::onPalUpdateNotification(int, const CLNatalimetryNotifier_Type::Notification &, co nst CLNatalimetryNotifier_Type::NotificationData &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  *(_DWORD *)uint64_t buf = *a4;
  return sub_100CCCC8C(a1 + 128, 5, (uint64_t)buf);
}

void sub_1008E3AF4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v7 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v19) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notification, %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    int v14 = *a3;
    v17[0] = 67109120;
    v17[1] = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "notification, %d",  v17);
    __int16 v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, cons t CLCompanionNotifier_Type::NotificationData &)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  if (*a3 == 6)
  {
    if (*(_BYTE *)a4)
    {
      buf[0] = sub_100D30ABC(*(_DWORD *)(a4 + 4), *(_DWORD *)(a4 + 8));
      uint64_t v19 = *(void *)(a4 + 4);
      uint64_t v9 = a1 + 128;
      int v10 = 2;
    }

    else
    {
      uint64_t v9 = a1 + 128;
      int v10 = 3;
    }

    sub_100CCCC8C(v9, v10, (uint64_t)buf);
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    char v11 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Unhandled notification", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Unhandled notification",  v17,  2);
      int v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, co nst CLCompanionNotifier_Type::NotificationData &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

id sub_1008E3E24(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(120.0, a2, 14, *(void **)(a1 + 32), 300LL, 0LL, 0LL, 0LL, 1, 0LL);
}

uint64_t sub_1008E3E6C(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Device is now unlocked.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Device is now unlocked.",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLMotionSyncStoreCompanion::deviceUnlocked()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_100CCCC8C(a1 + 128, 1, (uint64_t)buf);
}

void sub_1008E400C(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    int v3 = sub_100D307B4(*(void **)(a1 + 168));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v3;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = sub_100D2FFFC(a1);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d",  (uint8_t *)buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v29 = qword_101934608;
    int v30 = sub_100D307B4(*(void **)(a1 + 168));
    LODWORD(v41.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(v41.__r_.__value_.__r.__words[0]) = v30;
    LOWORD(v41.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[1] + 2) = sub_100D2FFFC(a1);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d",  &v41,  14);
    uint64_t v32 = (std::stringbuf::string_type *)v31;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  uint64_t v4 = sub_1002F8DDC();
  LODWORD(buf[0].__r_.__value_.__l.__data_) = sub_100D307B4(*(void **)(a1 + 168));
  sub_1002AC288(v4, @"CalibrationVersion", buf);
  uint64_t v5 = sub_1002F8DDC();
  buf[0].__r_.__value_.__r.__words[0] = sub_100D30858(*(void **)(a1 + 168));
  sub_1002AC820(v5, @"CalibrationTimestamp", buf);
  uint64_t v6 = sub_1002F8DDC();
  sub_100D30800(*(void **)(a1 + 168), buf);
  sub_1002ACDCC(v6, @"CalibrationUDID", (char *)buf);
  uint64_t v7 = sub_1002F8DDC();
  buf[0].__r_.__value_.__s.__data_[0] = sub_100D30A74(*(void **)(a1 + 168));
  sub_1002AB464(v7, @"CalibrationResetRequested", buf);
  uint64_t v8 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v8 + 944LL))(v8);
  *(_BYTE *)(a1 + 146) = 1;
  if ((sub_100D2FFFC(a1) & 1) != 0)
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v9 = CMNatalimeterSetUserVo2max;
    buf[0].__r_.__value_.__r.__words[0] = CMNatalimeterSetUserPal;
    buf[0].__r_.__value_.__l.__size_ = CMNatalimeterSetUserVo2max;
    buf[0].__r_.__value_.__l.__cap_ = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    int v10 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 3LL);
    id v11 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v37,  v44,  16LL);
    if (v11)
    {
      uint64_t v12 = *(void *)v38;
      do
      {
        for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v38 != v12) {
            objc_enumerationMutation(v10);
          }
          int v14 = *(const __CFString **)(*((void *)&v37 + 1) + 8LL * (void)i);
          if ([*(id *)(a1 + 168) objectForKeyedSubscript:v14])
          {
            uint64_t v15 = *(void *)(a1 + 192);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v14), "floatValue");
            *(double *)&buf[0].__r_.__value_.__l.__data_ = v16;
            sub_1002AC820(v15, v14, buf);
          }
        }

        id v11 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v37,  v44,  16LL);
      }

      while (v11);
    }

    if (![*(id *)(a1 + 168) objectForKeyedSubscript:v9]) {
      sub_1002A66DC(*(void *)(a1 + 192));
    }
    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"])
    {
      +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  [*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"],  1,  0);
      sub_1002AB3DC(*(void *)(a1 + 192));
    }

    if ([*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"])
    {
      +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  [*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"],  1,  0);
      sub_1002AB3DC(*(void *)(a1 + 192));
    }

    uint64_t v17 = *(void *)(a1 + 192);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = sub_100D307B4(*(void **)(a1 + 168));
    sub_1002AC288(v17, @"CalibrationVersion", buf);
    uint64_t v18 = *(void *)(a1 + 192);
    sub_100D30800(*(void **)(a1 + 168), buf);
    sub_1002ACDCC(v18, @"CalibrationUDID", (char *)buf);
    uint64_t v19 = *(void *)(a1 + 192);
    buf[0].__r_.__value_.__r.__words[0] = sub_100D30858(*(void **)(a1 + 168));
    sub_1002AC820(v19, @"CalibrationTimestamp", buf);
    (*(void (**)(void))(**(void **)(a1 + 192) + 944LL))(*(void *)(a1 + 192));
    *(_BYTE *)(a1 + 146) = 0;
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    std::stringbuf::string_type v20 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      sub_100D30214(*(void **)(a1 + 168), buf);
      int v21 = (buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0
          ? buf
          : (std::stringbuf::string_type *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Companion persisted calibrations to disk, fMotionCals = %s",  (uint8_t *)&v41,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v22 = qword_101934608;
    sub_100D30214(*(void **)(a1 + 168), &v41);
    uint64_t v23 = (v41.__r_.__value_.__s.__size_ & 0x80u) == 0
        ? &v41
        : (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
    int v42 = 136315138;
    double v43 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  1LL,  "Companion persisted calibrations to disk, fMotionCals = %s",  (const char *)&v42);
    __int16 v25 = v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::persistCachedValues()",  "%s\n",  (const char *)v25);
    if (v25 == buf) {
      return;
    }
LABEL_57:
    free(v25);
    return;
  }

  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v26 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    int v27 = sub_100D307B4(*(void **)(a1 + 168));
    int v28 = sub_100D2FFFC(a1);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v27;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d",  (uint8_t *)buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v33 = qword_101934608;
    int v34 = sub_100D307B4(*(void **)(a1 + 168));
    int v35 = sub_100D2FFFC(a1);
    LODWORD(v41.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(v41.__r_.__value_.__r.__words[0]) = v34;
    LOWORD(v41.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[1] + 2) = v35;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  1LL,  "Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d",  &v41,  14);
    __int16 v25 = (std::stringbuf::string_type *)v36;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v36);
    if (v25 != buf) {
      goto LABEL_57;
    }
  }

void sub_1008E485C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008E4884(uint64_t a1)
{
  uint64_t v2 = std::string::append(&v56, "user.plist");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__n128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (sub_100292D28((const char *)v4))
  {
    uint64_t v48 = 0LL;
    if (sub_1002A6F20(*(void *)(a1 + 192), (uint64_t)@"RawSpeedToKValueTable", (CFTypeRef *)&v48)) {
      [*(id *)(a1 + 168) setObject:sub_100D2FBBC(v48) forKeyedSubscript:@"RawSpeedToKValueTable"];
    }
    uint64_t v47 = 0LL;
    if (sub_1002A6F20( *(void *)(a1 + 192),  (uint64_t)@"StepCadenceToStrideLengthTable",  (CFTypeRef *)&v47)) {
      [*(id *)(a1 + 168) setObject:sub_100D2FBBC(v47) forKeyedSubscript:@"StepCadenceToStrideLengthTable"];
    }
    int v46 = 0x800000;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    uint64_t v5 = CMNatalimeterSetUserVo2max;
    v56.__r_.__value_.__r.__words[0] = CMNatalimeterSetUserPal;
    v56.__r_.__value_.__l.__size_ = CMNatalimeterSetUserVo2max;
    v56.__r_.__value_.__l.__cap_ = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v56, 3LL);
    id v7 = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v42,  v58,  16LL);
    if (v7)
    {
      uint64_t v8 = *(void *)v43;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v43 != v8) {
            objc_enumerationMutation(v6);
          }
          uint64_t v10 = *(void *)(*((void *)&v42 + 1) + 8LL * (void)i);
          *(float *)&double v11 = sub_1002A827C(*(void *)(a1 + 192), v10, (float *)&v46);
          if (v12)
          {
            LODWORD(v11) = v46;
            objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11),  v10);
          }
        }

        id v7 = -[NSArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v42,  v58,  16LL,  v11);
      }

      while (v7);
    }

    unsigned int v41 = 0;
    sub_1002A7D20(*(void *)(a1 + 192), (uint64_t)@"CalibrationVersion", &v41);
    uint64_t v13 = sub_1002F8DDC();
    sub_1002A7D20(v13, (uint64_t)@"CalibrationVersion", &v41);
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v41),  @"CalibrationVersion");
    sub_1004F2598();
    sub_1004F6194((uint64_t)&v57);
    sub_1002A85D0(*(void *)(a1 + 192), (uint64_t)@"CalibrationUDID", &v57);
    uint64_t v14 = sub_1002F8DDC();
    sub_1002A85D0(v14, (uint64_t)@"CalibrationUDID", &v57);
    if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v15 = &v57;
    }
    else {
      uint64_t v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15),  @"CalibrationUDID");
    BOOL v40 = 0;
    uint64_t v16 = sub_1002F8DDC();
    sub_1002A6FD4(v16, (uint64_t)@"CalibrationResetRequested", &v40);
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v40),  @"CalibrationResetRequested");
    if ((sub_100D30A74(*(void **)(a1 + 168)) & 1) == 0)
    {
      if ([*(id *)(a1 + 168) objectForKeyedSubscript:v5])
      {
        objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v5), "floatValue");
        if (v17 == 0.0)
        {
          if (qword_101934600 != -1) {
            dispatch_once(&qword_101934600, &stru_10185FC60);
          }
          uint64_t v18 = (os_log_s *)qword_101934608;
          if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v56.__r_.__value_.__l.__data_) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Clearing a stale vo2max of 0 value.",  (uint8_t *)&v56,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&v56, 0x65CuLL);
            if (qword_101934600 != -1) {
              dispatch_once(&qword_101934600, &stru_10185FC60);
            }
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Clearing a stale vo2max of 0 value.",  &buf,  2);
            __int128 v38 = (std::string *)v37;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()",  "%s\n",  v37);
            if (v38 != &v56) {
              free(v38);
            }
          }

          [*(id *)(a1 + 168) removeObjectForKey:v5];
          sub_1002A66DC(*(void *)(a1 + 192));
          (*(void (**)(void))(**(void **)(a1 + 192) + 944LL))(*(void *)(a1 + 192));
        }
      }
    }

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1002A832C(*(void *)(a1 + 192), (uint64_t)@"CalibrationTimestamp", &Current);
    uint64_t v19 = sub_1002F8DDC();
    sub_1002A832C(v19, (uint64_t)@"CalibrationTimestamp", &Current);
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current),  @"CalibrationTimestamp");
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    std::stringbuf::string_type v20 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      sub_100D30214(*(void **)(a1 + 168), &v56);
      int size = (char)v56.__r_.__value_.__s.__size_;
      std::string::size_type v22 = v56.__r_.__value_.__r.__words[0];
      int v23 = sub_100D307B4(*(void **)(a1 + 168));
      uint64_t v24 = &v56;
      if (size < 0) {
        uint64_t v24 = (std::string *)v22;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Loaded Motion Cals from backup: fMotionCals, %s, current version, %d",  (uint8_t *)&buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v56, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      uint64_t v27 = qword_101934608;
      sub_100D30214(*(void **)(a1 + 168), &buf);
      int v28 = (char)buf.__r_.__value_.__s.__size_;
      std::string::size_type v29 = buf.__r_.__value_.__r.__words[0];
      int v30 = sub_100D307B4(*(void **)(a1 + 168));
      p_std::stringbuf::string_type buf = &buf;
      if (v28 < 0) {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)v29;
      }
      int v52 = 136315394;
      uint64_t v53 = p_buf;
      __int16 v54 = 1024;
      int v55 = v30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  v27,  1LL,  "Loaded Motion Cals from backup: fMotionCals, %s, current version, %d",  (const char *)&v52,  18);
      uint64_t v33 = v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()",  "%s\n",  (const char *)v33);
      if (v33 != &v56) {
        free(v33);
      }
    }
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    __int16 v25 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      uint64_t v26 = __p;
      if (cap < 0) {
        uint64_t v26 = (void **)__p[0];
      }
      LODWORD(v56.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "No motion cal backup file was found at path: %s. Restore PAL.",  (uint8_t *)&v56,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v56, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      int v34 = __p;
      if (cap < 0) {
        int v34 = (void **)__p[0];
      }
      LODWORD(v57.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "No motion cal backup file was found at path: %s. Restore PAL.",  (const char *)&v57);
      id v36 = (std::string *)v35;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", v35);
      if (v36 != &v56) {
        free(v36);
      }
    }

    sub_1008E51F4(a1);
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1008E5140( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, int a45, __int16 a46, char a47, char a48)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008E51F4(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore pal", (uint8_t *)buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "restore pal",  __p,  2);
    uint64_t v13 = (std::stringbuf::string_type *)v12;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::restoreBackupPal()", "%s\n", v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  int v23 = 0x800000;
  uint64_t v3 = CMNatalimeterSetUserPal;
  sub_1002A827C(*(void *)(a1 + 200), CMNatalimeterSetUserPal, (float *)&v23);
  if (v5)
  {
    LODWORD(v4) = v23;
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  v3);
  }

  sub_100D308A4(*(void **)(a1 + 168), 1LL);
  sub_1004F2598();
  sub_1004F6194((uint64_t)__p);
  if (v22 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6),  @"CalibrationUDID");
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()),  @"CalibrationTimestamp");
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  id v7 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    sub_100D30214(*(void **)(a1 + 168), buf);
    int size = (char)buf[0].__r_.__value_.__s.__size_;
    std::string::size_type v9 = buf[0].__r_.__value_.__r.__words[0];
    int v10 = sub_100D307B4(*(void **)(a1 + 168));
    double v11 = buf;
    if (size < 0) {
      double v11 = (std::stringbuf::string_type *)v9;
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(v24.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v24.__r_.__value_.__r.__words[1] + 6) = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.",  (uint8_t *)&v24,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v14 = qword_101934608;
    sub_100D30214(*(void **)(a1 + 168), &v24);
    int v15 = (char)v24.__r_.__value_.__s.__size_;
    std::string::size_type v16 = v24.__r_.__value_.__r.__words[0];
    int v17 = sub_100D307B4(*(void **)(a1 + 168));
    uint64_t v18 = &v24;
    if (v15 < 0) {
      uint64_t v18 = (std::stringbuf::string_type *)v16;
    }
    int v25 = 136315394;
    uint64_t v26 = v18;
    __int16 v27 = 1024;
    int v28 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  1LL,  "Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.",  (const char *)&v25,  18);
    std::stringbuf::string_type v20 = v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::restoreBackupPal()",  "%s\n",  (const char *)v20);
    if (v20 != buf) {
      free(v20);
    }
  }

  sub_1008E400C(a1);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1008E5628( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSArray *sub_1008E5688(uint64_t a1)
{
  double result = (NSArray *)[*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  if (result) {
    return +[NSArray arrayWithArray:]( NSArray,  "arrayWithArray:",  [*(id *)(a1 + 168) objectForKeyedSubscript:@"RawSpeedToKValueTable"]);
  }
  return result;
}

NSArray *sub_1008E56E4(uint64_t a1)
{
  double result = (NSArray *)[*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  if (result) {
    return +[NSArray arrayWithArray:]( NSArray,  "arrayWithArray:",  [*(id *)(a1 + 168) objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"]);
  }
  return result;
}

NSDate *sub_1008E5740(uint64_t a1)
{
  if (sub_100D30858(*(void **)(a1 + 168)) >= 1.0) {
    return +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  sub_100D30858(*(void **)(a1 + 168)));
  }
  else {
    return 0LL;
  }
}

void sub_1008E5794(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restoring backup motion cals", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "restoring backup motion cals",  v5,  2);
    double v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doRestoreBackupMotionCals(const EDeviceUnlocked *)",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_1008E4884(a1);
}

id sub_1008E592C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 147) = *(_BYTE *)a2;
  *(void *)(a1 + 14_Block_object_dispose(va, 8) = *(void *)(a2 + 4);
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v3 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 147);
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "quickswitch protocol %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    int v6 = *(unsigned __int8 *)(a1 + 147);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "quickswitch protocol %d",  v9);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doConnected(const EWatchConnected *)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (*(_BYTE *)(a1 + 147)) {
    [*(id *)(a1 + 184) setFireInterval:*(double *)(a1 + 160)];
  }
  return sub_1008E5B08(a1);
}

id sub_1008E5B08(uint64_t a1)
{
  id result = sub_1008E7760(a1);
  if ((_DWORD)result)
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v3 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Scheduled send to watch.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Scheduled send to watch.",  v6,  2);
      int v5 = (uint8_t *)v4;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::scheduleFastSendToWatch()", "%s\n", v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    return [*(id *)(a1 + 184) setNextFireDelay:2.56];
  }

  return result;
}

void sub_1008E5CB0(uint64_t a1, float *a2)
{
  float v3 = *a2;
  uint64_t v4 = CMNatalimeterSetUserPal;
  if ([*(id *)(a1 + 168) objectForKeyedSubscript:CMNatalimeterSetUserPal])
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v4), "floatValue");
    float v6 = v5;
  }

  else
  {
    float v6 = 0.0;
  }

  if (vabds_f32(v6, v3) <= 0.5)
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    int v12 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PAL not loaded or changed.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      LOWORD(v1_Block_object_dispose(va, 8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "PAL not loaded or changed.",  &v18,  2);
      std::string::size_type v16 = (char *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doUpdatePAL(const EPalUpdated *)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    id v7 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      *(double *)&uint8_t buf[4] = v6;
      __int16 v23 = 2048;
      double v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "PAL is updated from %f to %f", buf, 0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      int v18 = 134218240;
      double v19 = v6;
      __int16 v20 = 2048;
      double v21 = v3;
      LODWORD(v17) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "PAL is updated from %f to %f",  COERCE_DOUBLE(&v18),  v17);
      uint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doUpdatePAL(const EPalUpdated *)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    *(float *)&double v8 = v3;
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8),  v4);
    sub_1004F2598();
    sub_1004F6194((uint64_t)buf);
    if (v25 >= 0) {
      std::string::size_type v9 = buf;
    }
    else {
      std::string::size_type v9 = *(_BYTE **)buf;
    }
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9),  @"CalibrationUDID");
    objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()),  @"CalibrationTimestamp");
    int v10 = *(void **)(a1 + 168);
    int v11 = sub_100D307B4(v10);
    sub_100D308A4(v10, (v11 + 1));
    sub_1008E400C(a1);
    sub_1008E5B08(a1);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_1008E60B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008E60E0(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Restore & Arbitrate", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "Restore & Arbitrate",  v6,  2);
    float v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doRestoreBackupArbitrate(const EDeviceUnlocked *)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  sub_1008E4884(a1);
  sub_1008E6288(a1);
  return sub_1008E5B08(a1);
}

void sub_1008E6288(uint64_t a1)
{
  uint64_t v2 = sub_1008E70D8(a1, *(void **)(a1 + 168), *(void **)(a1 + 176));
  int v3 = v2;
  sub_1008E7640(v2, *(void **)(a1 + 168), *(void **)(a1 + 176), v2);
  switch(v3)
  {
    case 2:
    case 4:
      sub_1008E400C(a1);
      break;
    case 3:
      sub_1008E400C(a1);
      goto LABEL_4;
    case 5:
LABEL_4:
      sub_1008E5B08(a1);
      break;
    default:
      return;
  }

id sub_1008E6308(uint64_t a1, void *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "processing motion cals received from watch",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "processing motion cals received from watch",  v8,  2);
    id v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doBufferMotionCalsFromWatch(const ECalibrationFromWatch *)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
}

id sub_1008E64A8(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disconnected", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "disconnected",  v6,  2);
    float v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doDisconnected(const EWatchDisconnected *)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return [*(id *)(a1 + 184) setNextFireDelay:1.79769313e308];
}

void sub_1008E6648(uint64_t a1, void *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "arbitration", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "arbitration",  v7,  2);
    float v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionSyncStoreCompanion::doArbitrateMotionCals(const ECalibrationFromWatch *)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  [*(id *)(a1 + 176) addEntriesFromDictionary:*a2];
  sub_1008E6288(a1);
}

uint64_t sub_1008E67F0(uint64_t a1, void *a2)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    sub_100D30214(a2, __p);
    float v5 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
       ? __p
       : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Companion received calibrations from watch: %s",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v7 = qword_101934608;
    sub_100D30214(a2, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    int v12 = 136315138;
    uint64_t v13 = p_buf;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v7,  1LL,  "Companion received calibrations from watch: %s",  (const char *)&v12);
    int v10 = v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionSyncStoreCompanion::receiveMotionCals(NSDictionary *)",  "%s\n",  (const char *)v10);
    if (v10 != __p) {
      free(v10);
    }
  }

  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_100CCCC8C(a1 + 128, 4, (uint64_t)__p);
}

id sub_1008E6A20(uint64_t a1)
{
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v2 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "clearing motion calibrations", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    v28[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  1LL,  "clearing motion calibrations",  v28,  2);
    int v18 = (uint8_t *)v17;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  id v3 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  id v4 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"),  "syncgetUserProfileInternal");
  if (v4)
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    uint64_t v5 = CMNatalimeterSetUserVo2max;
    *(void *)std::stringbuf::string_type buf = CMNatalimeterSetUserPal;
    uint64_t v31 = CMNatalimeterSetUserVo2max;
    uint64_t v6 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v32 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    uint64_t v7 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 3LL);
    id v8 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v24,  v29,  16LL);
    if (v8)
    {
      uint64_t v9 = *(void *)v25;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v25 != v9) {
            objc_enumerationMutation(v7);
          }
          objc_msgSend( v3,  "setObject:forKeyedSubscript:",  objc_msgSend(v4, "objectForKeyedSubscript:", *(void *)(*((void *)&v24 + 1) + 8 * (void)i)),  *(void *)(*((void *)&v24 + 1) + 8 * (void)i));
        }

        id v8 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v24,  v29,  16LL);
      }

      while (v8);
    }

    [v3 setObject:&off_1018D7388 forKeyedSubscript:v5];
    [v3 setObject:&off_1018D7398 forKeyedSubscript:v6];
  }

  id v11 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "syncgetRawSpeedToKValueDefaultBins");
  if (v11)
  {
    [v3 setObject:v11 forKeyedSubscript:@"RawSpeedToKValueTable"];
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    int v12 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Failed to retreive default raw speed to kValue bins.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      v28[0] = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "#Warning Failed to retreive default raw speed to kValue bins.",  v28,  v23);
      __int16 v20 = (uint8_t *)v19;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v19);
      if (v20 != buf) {
        free(v20);
      }
    }
  }

  id v13 = objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "syncgetStepCadenceToStrideLengthDefaultBins");
  if (v13)
  {
    [v3 setObject:v13 forKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  }

  else
  {
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    uint64_t v14 = (os_log_s *)qword_101934608;
    if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Failed to retreive default step cadence to stride length bins.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      v28[0] = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "#Warning Failed to retreive default step cadence to stride length bins.",  v28,  v23);
      char v22 = (uint8_t *)v21;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

  [*(id *)(a1 + 168) addEntriesFromDictionary:v3];
  sub_1004F2598();
  sub_1004F6194((uint64_t)buf);
  if (v32 >= 0) {
    int v15 = buf;
  }
  else {
    int v15 = *(uint8_t **)buf;
  }
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15),  @"CalibrationUDID");
  if (SHIBYTE(v32) < 0) {
    operator delete(*(void **)buf);
  }
  objc_msgSend( *(id *)(a1 + 168),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()),  @"CalibrationTimestamp");
  return [*(id *)(a1 + 168) setObject:&__kCFBooleanTrue forKeyedSubscript:@"CalibrationResetRequested"];
}

void sub_1008E7070( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *__p, uint64_t a38, int a39, __int16 a40, char a41, char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008E7094(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  int v3 = sub_100D307B4(v2);
  sub_100D308A4(v2, (v3 + 1));
  sub_1008E400C(a1);
  return sub_1008E5B08(a1);
}

uint64_t sub_1008E70D8(uint64_t a1, void *a2, void *a3)
{
  if ([a3 count])
  {
    sub_100D30800(a3, &__s1);
    double v5 = sub_100D30858(a3);
    int v6 = sub_100D307B4(a3);
    sub_100D30800(a2, &__p);
    double v7 = sub_100D30858(a2);
    int v8 = sub_100D307B4(a2);
    if (sub_100D30AD8(a3))
    {
      if (objc_msgSend( objc_msgSend(a3, "objectForKeyedSubscript:", @"HasSavedInitialMotionCalsToDisk"),  "BOOLValue")) {
        uint64_t v9 = 2LL;
      }
      else {
        uint64_t v9 = 5LL;
      }
LABEL_40:
      if (qword_101934600 != -1) {
        dispatch_once(&qword_101934600, &stru_10185FC60);
      }
      int v18 = (os_log_s *)qword_101934608;
      if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEFAULT))
      {
        p_s1 = &__s1;
        if ((v34 & 0x80u) != 0) {
          p_s1 = __s1;
        }
        p_p = &__p;
        if (SHIBYTE(v31) < 0) {
          p_p = __p;
        }
        *(_DWORD *)std::stringbuf::string_type buf = 67110658;
        int v49 = v6;
        __int16 v50 = 2080;
        uint64_t v51 = p_s1;
        __int16 v52 = 2048;
        double v53 = v5;
        __int16 v54 = 1024;
        int v55 = v8;
        __int16 v56 = 2080;
        std::string v57 = p_p;
        __int16 v58 = 2048;
        double v59 = v7;
        __int16 v60 = 1024;
        int v61 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d",  buf,  0x3Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934600 != -1) {
          dispatch_once(&qword_101934600, &stru_10185FC60);
        }
        char v22 = &__s1;
        if ((v34 & 0x80u) != 0) {
          char v22 = __s1;
        }
        uint64_t v23 = &__p;
        if (SHIBYTE(v31) < 0) {
          uint64_t v23 = __p;
        }
        v35[0] = 67110658;
        v35[1] = v6;
        __int16 v36 = 2080;
        __int128 v37 = v22;
        __int16 v38 = 2048;
        double v39 = v5;
        __int16 v40 = 1024;
        int v41 = v8;
        __int16 v42 = 2080;
        __int128 v43 = v23;
        __int16 v44 = 2048;
        double v45 = v7;
        __int16 v46 = 1024;
        int v47 = v9;
        LODWORD(v2_Block_object_dispose(va, 8) = 60;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  0LL,  "Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d",  v35,  v28,  *(double *)&__p,  v30,  v31,  *(double *)&__s1,  __n);
        __int128 v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NS Dictionary *) const",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      if (SHIBYTE(v31) < 0) {
        operator delete(__p);
      }
      return v9;
    }

    uint64_t v11 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v12 = v34;
    }
    else {
      size_t v12 = __n;
    }
    uint64_t v13 = HIBYTE(v31);
    if (SHIBYTE(v31) < 0) {
      uint64_t v13 = v30;
    }
    if (v12 == v13)
    {
      if (SHIBYTE(v31) >= 0) {
        uint64_t v14 = (unsigned __int8 *)&__p;
      }
      else {
        uint64_t v14 = (unsigned __int8 *)__p;
      }
      if ((v34 & 0x80) == 0)
      {
        if (v34)
        {
          int v15 = &__s1;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            int v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v11) {
              goto LABEL_34;
            }
          }

          goto LABEL_28;
        }

void sub_1008E75F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008E7640(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = [a3 objectForKeyedSubscript:@"CalibrationResetRequested"];
  sub_100D30B24(a3);
  switch(a4)
  {
    case 4:
      [a2 setDictionary:a3];
LABEL_10:
      [a2 setObject:&__kCFBooleanFalse forKeyedSubscript:@"CalibrationResetRequested"];
      return [a3 removeAllObjects];
    case 3:
      [a2 setDictionary:a3];
      [a2 setObject:&__kCFBooleanFalse forKeyedSubscript:@"CalibrationResetRequested"];
      int v9 = sub_100D307B4(a2);
      sub_100D308A4(a2, (v9 + 1));
      return [a3 removeAllObjects];
    case 2:
      uint64_t v8 = CMNatalimeterSetUserVo2max;
      if ([a3 objectForKeyedSubscript:CMNatalimeterSetUserVo2max]
        && !objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", v8), "intValue"))
      {
        [a3 removeObjectForKey:v8];
        [a2 removeObjectForKey:v8];
      }

      [a2 addEntriesFromDictionary:a3];
      if (v7) {
        goto LABEL_10;
      }
      break;
  }

  return [a3 removeAllObjects];
}

id sub_1008E7760(uint64_t a1)
{
  uint64_t v2 = -[objc_class sharedInstance](off_10198D878(), "sharedInstance");
  id result = objc_msgSend( -[objc_class getAllDevicesWithArchivedDevicesMatching:]( v2,  "getAllDevicesWithArchivedDevicesMatching:",  -[objc_class activeDeviceSelectorBlock](off_10198D878(), "activeDeviceSelectorBlock")),  "firstObject");
  if (result) {
    return (id)(*(_BYTE *)(a1 + 147) != 0);
  }
  return result;
}

void sub_1008E77C4(id a1)
{
  qword_101934608 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

void sub_1008E77F0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_1008E781C()
{
  if (qword_101999278 != -1) {
    dispatch_once(&qword_101999278, &stru_10185FCA0);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_101999270 = (uint64_t)result;
  off_10198D878 = sub_1008E7878;
  return result;
}

uint64_t sub_1008E7878()
{
  return qword_101999270;
}

void sub_1008E7884(id a1)
{
  qword_101999280 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_1008E78AC()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101999258, (void *)&_mh_execute_header);
}

uint64_t sub_1008E7F20(int a1, int a2)
{
  id v4 = sub_1008E8C38(&v12);
  std::random_device::result_type v5 = std::random_device::operator()(v4);
  v10[0] = v5;
  for (uint64_t i = 1LL; i != 624; ++i)
  {
    std::random_device::result_type v5 = i + 1812433253 * (v5 ^ (v5 >> 30));
    v10[i] = v5;
  }

  uint64_t v11 = 0LL;
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v7 = sub_1011D49E8((uint64_t)v9, (uint64_t)v10, v9);
  std::random_device::~random_device(&v12);
  return v7;
}

void sub_1008E7FB0(_Unwind_Exception *a1)
{
}

double sub_1008E7FC8(double a1, double a2)
{
  std::random_device::result_type v4 = std::random_device::operator()(&v9);
  unsigned int v5 = v4 + ((v4 / 0x7FFFFFFF) | ((v4 / 0x7FFFFFFF) << 31));
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  unsigned int v8 = v5;
  double v6 = a1 + (a2 - a1) * sub_1008E8CA8(&v8);
  std::random_device::~random_device(&v9);
  return v6;
}

void sub_1008E8050( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

std::random_device *sub_1008E8C38(std::random_device *a1)
{
  return a1;
}

void sub_1008E8C8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1008E8CA8(unsigned int *a1)
{
  unsigned int v1 = 48271 * (*a1 % 0xADC8);
  unsigned int v2 = 3399 * (*a1 / 0xADC8);
  BOOL v3 = v1 >= v2;
  unsigned int v4 = v1 - v2;
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = 0x7FFFFFFF;
  }
  unsigned int v6 = v5 + v4;
  unsigned int v7 = v6 - 1;
  unsigned int v8 = v6 / 0xADC8;
  unsigned int v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  BOOL v3 = v9 >= v8;
  unsigned int v10 = v9 - v8;
  if (v3) {
    int v11 = 0;
  }
  else {
    int v11 = 0x7FFFFFFF;
  }
  unsigned int v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

uint64_t sub_1008E8D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

void sub_1008EA180( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1008EA6E8(uint64_t a1)
{
  v3[0] = @"ageGroup";
  v4[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[1] = @"distancePercentageErrorBin";
  v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  _DWORD v3[2] = @"gender";
  _DWORD v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[3] = @"speedBin";
  v4[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v3[4] = @"userBmiBin";
  v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v3[5] = @"userHeightBin";
  v4[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v3[6] = @"countPerBin";
  v4[6] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 336LL * *(int *)(a1 + 52) + 24LL * *(int *)(a1 + 44) + 448));
  v3[7] = @"sumRatioGPStoRawDist";
  v4[7] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 336LL * *(int *)(a1 + 52) + 24LL * *(int *)(a1 + 44) + 456));
  v3[8] = @"sumRatioMobilitytoRawDist";
  _WORD v4[8] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 336LL * *(int *)(a1 + 52) + 24LL * *(int *)(a1 + 44) + 464));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  9LL);
}

void sub_1008EA8D4(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1008EA900()
{
  qword_101999288 = 0LL;
  qword_101999290 = 0LL;
  qword_101999298 = 0LL;
  unsigned __int8 v0 = operator new(0x38uLL);
  qword_101999290 = (uint64_t)v0 + 56;
  qword_101999298 = (uint64_t)v0 + 56;
  *unsigned __int8 v0 = xmmword_101340678;
  v0[1] = unk_101340688;
  v0[2] = xmmword_101340698;
  *((void *)v0 + 6) = 0x4003333333333333LL;
  qword_101999288 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_101999288, (void *)&_mh_execute_header);
  qword_1019992A8 = 0LL;
  unk_1019992B0 = 0LL;
  qword_1019992A0 = 0LL;
  uint64_t v1 = operator new(0x68uLL);
  qword_1019992A8 = (uint64_t)v1 + 104;
  unk_1019992B0 = (char *)v1 + 104;
  v1[4] = xmmword_1013406F0;
  _OWORD v1[5] = unk_101340700;
  *((void *)v1 + 12) = 0x4049000000000000LL;
  _OWORD *v1 = xmmword_1013406B0;
  v1[1] = unk_1013406C0;
  v1[2] = xmmword_1013406D0;
  v1[3] = unk_1013406E0;
  qword_1019992A0 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1001AD9F0, &qword_1019992A0, (void *)&_mh_execute_header);
}

void sub_1008EAA80(id a1)
{
  qword_1019992B8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLBluetoothServiceSilo");
}

uint64_t sub_1008EAB34(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1008EB2A4;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019992D8 != -1) {
    dispatch_once(&qword_1019992D8, block);
  }
  return qword_1019A1848;
}

void sub_1008EACD4(id a1)
{
}

BOOL sub_1008EAD44(uint64_t a1)
{
  uint64_t v8 = -1LL;
  __int16 v9 = 0x7FFF;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10185FF00);
  }
  unint64_t v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing AFH map.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Clearing AFH map.",  v6,  2);
    int v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBluetoothService::clearAFHSettings()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_1008F0DB8(a1, (uint64_t)&v8);
}

BOOL sub_1008EAF44(uint64_t a1, int *a2, unsigned int a3)
{
  BOOL result = sub_1008F117C((uint64_t)v5, a2, a3);
  if (result) {
    return sub_1008F0DB8(a1, (uint64_t)v5);
  }
  return result;
}

uint64_t sub_1008EAFE0(uint64_t a1)
{
  if (*(void *)(a1 + 112) && (uint64_t v1 = *(void *)(a1 + 120)) != 0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    unint64_t v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "BTDiscoveryAgentStartScan failed", buf, 2u);
    }

    BOOL v3 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BTDiscoveryAgentStartScan failed",  v9,  2,  v9[0]);
LABEL_22:
      uint64_t v8 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLBluetoothService::scan()", "%s\n", v5);
      if (v8 != buf) {
        free(v8);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    unsigned int v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "no session or agent available - cannot scan",  buf,  2u);
    }

    BOOL v7 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "no session or agent available - cannot scan",  v9,  2,  v9[0]);
      goto LABEL_22;
    }
  }

  return result;
}

id *sub_1008EB2A4(uint64_t a1)
{
  unint64_t v2 = (id *)operator new(0xB8uLL);
  uint64_t result = sub_1008EB2F0(v2, *(void **)(a1 + 32));
  qword_1019A1848 = (uint64_t)v2;
  return result;
}

void sub_1008EB2DC(_Unwind_Exception *a1)
{
}

id *sub_1008EB2F0(id *a1, void *a2)
{
  uint64_t v3 = sub_1008EB3A4((uint64_t)a1, "CLBluetoothService", a2);
  *(void *)uint64_t v3 = &off_10185FD58;
  *(_BYTE *)(v3 + 109) = 0;
  *(void *)(v3 + 144) = 0LL;
  *(void *)(v3 + 136) = v3 + 144;
  *(void *)(v3 + 152) = 0LL;
  *(void *)(v3 + 120) = 0LL;
  *(void *)(v3 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v3 + 16_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v3 + 112) = 0LL;
  *(void *)(v3 + 160) = v3 + 168;
  *(void *)(v3 + 176) = 0LL;
  if (*(void *)(v3 + 40)) {
    sub_1008EB440(a1);
  }
  return a1;
}

void sub_1008EB378(_Unwind_Exception *a1)
{
}

uint64_t sub_1008EB3A4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10185FF30;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_1008EB424(_Unwind_Exception *exception_object)
{
}

void sub_1008EB440(id *a1)
{
  unsigned int v10 = sub_1008EB854;
  pid_t v2 = getpid();
  snprintf(__str, 0x40uLL, "com.apple.locationd-%d-%p\n", v2, a1);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10185FF00);
  }
  uint64_t v3 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    uint64_t v14 = __str;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "attach to bluetooth server with session name %s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    int v11 = 136315138;
    unsigned int v12 = __str;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "attach to bluetooth server with session name %s",  (const char *)&v11);
    unsigned int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLBluetoothService::attach()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (BTSessionAttachWithQueue(__str, &v10, a1, [a1[5] queue]))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    unsigned int v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not attach bluetooth session", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v11) = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not attach bluetooth session",  &v11,  v9);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLBluetoothService::attach()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

uint64_t sub_1008EB760(uint64_t a1)
{
  *(void *)a1 = off_10185FF30;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_1008EB7D4(uint64_t a1)
{
  *(void *)a1 = &off_10185FD58;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 1;
  pid_t v2 = (void *)(a1 + 112);
  if (*(void *)(a1 + 112))
  {
    BTSessionDetachWithQueue(a1 + 112);
    void *v2 = 0LL;
    v2[1] = 0LL;
  }

  sub_1008F2FAC(a1 + 160, *(void **)(a1 + 168));
  sub_1008F2FAC(a1 + 136, *(void **)(a1 + 144));
  return sub_1008EB760(a1);
}

void sub_1008EB840(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008EB7D4(a1);
  operator delete(v1);
}

void sub_1008EB854(void *a1, int a2, int a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLBluetoothService::onBluetoothSession",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      unsigned int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLBluetoothService::onBluetoothSession, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1008EC7B8((const void ***)a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008EBA1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008EBA3C(uint64_t result)
{
  pid_t v2 = (void *)(result + 112);
  uint64_t v1 = *(void *)(result + 112);
  *(_BYTE *)(result + 10_Block_object_dispose(va, 8) = 1;
  if (v1)
  {
    uint64_t result = BTSessionDetachWithQueue(result + 112);
    void *v2 = 0LL;
    v2[1] = 0LL;
  }

  return result;
}

void sub_1008EBA74(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
}

void sub_1008EBADC(uint64_t a1, uint64_t **a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  if (*(_DWORD *)(a5 + 100) != -1 && *(_DWORD *)(a5 + 120) == 0)
  {
    switch(*a4)
    {
      case 4:
        *(void *)std::stringbuf::string_type buf = a5 + 16;
        double v21 = sub_1008F420C(a2, (const void **)(a5 + 16), (uint64_t)&unk_1012CF090, (__int128 **)buf);
        v21[7] = *(void *)(a5 + 8);
        std::string::operator=((std::string *)(v21 + 8), (const std::string *)(a5 + 16));
        std::string::operator=((std::string *)(v21 + 11), (const std::string *)(a5 + 40));
        std::string::operator=((std::string *)(v21 + 14), (const std::string *)(a5 + 64));
        char v22 = *(_BYTE *)(a5 + 104);
        *(_OWORD *)(v21 + 17) = *(_OWORD *)(a5 + 88);
        *((_BYTE *)v21 + 152) = v22;
        break;
      case 5:
      case 0xB:
        sub_1008F4360(a2, (const void **)(a5 + 16));
        if (a3 + 8 != sub_10008E8D0(a3, (const void **)(a5 + 16)))
        {
          int v8 = *(_DWORD *)(a5 + 116);
          *(void *)std::stringbuf::string_type buf = a5 + 16;
          uint64_t v9 = sub_1008F420C((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_1012CF090, (__int128 **)buf);
          *((_DWORD *)v9 + 37) &= ~v8;
          *(void *)std::stringbuf::string_type buf = a5 + 16;
          if (!*((_DWORD *)sub_1008F420C( (uint64_t **)a3,  (const void **)(a5 + 16),  (uint64_t)&unk_1012CF090,  (__int128 **)buf)
                + 37))
          {
            sub_1008F4360((uint64_t **)a3, (const void **)(a5 + 16));
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_10185FF00);
            }
            unsigned int v10 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = *(void *)(a5 + 64);
              else {
                uint64_t v12 = *(void *)(a5 + 40);
              }
              else {
                uint64_t v13 = *(void *)(a5 + 16);
              }
              int v14 = *(_DWORD *)(a5 + 92);
              uint64_t v15 = *(void *)(a3 + 16);
              *(_DWORD *)std::stringbuf::string_type buf = 136316162;
              *(void *)&uint8_t buf[4] = v12;
              __int16 v39 = 2080;
              uint64_t v40 = v11;
              __int16 v41 = 2080;
              uint64_t v42 = v13;
              __int16 v43 = 1024;
              int v44 = v14;
              __int16 v45 = 2048;
              uint64_t v46 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "disconnected from %s/%s @ %s of type %d - currently %lu connected device(s)",  buf,  0x30u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_10185FF00);
              }
              uint64_t v18 = *(void *)(a5 + 64);
              uint64_t v17 = a5 + 64;
              uint64_t v16 = v18;
              else {
                uint64_t v19 = *(void *)(v17 - 24);
              }
              *(_DWORD *)__int128 v37 = 136316162;
              *(void *)&v37[4] = v19;
              *(_WORD *)&v37[12] = 2080;
              *(void *)&v37[14] = v16;
              *(_WORD *)&v37[22] = 2080;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "disconnected from %s/%s @ %s of type %d - currently %lu connected device(s)",  v37,  48,  *(_OWORD *)v37,  *(void *)&v37[16]);
              goto LABEL_56;
            }
          }
        }

        break;
      case 0xA:
        uint64_t v23 = (const void **)(a5 + 16);
        if (a3 + 8 == sub_10008E8D0(a3, (const void **)(a5 + 16)))
        {
          *(void *)std::stringbuf::string_type buf = a5 + 16;
          __int128 v26 = sub_1008F420C((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_1012CF090, (__int128 **)buf);
          v26[7] = *(void *)(a5 + 8);
          std::string::operator=((std::string *)(v26 + 8), (const std::string *)(a5 + 16));
          std::string::operator=((std::string *)(v26 + 11), (const std::string *)(a5 + 40));
          std::string::operator=((std::string *)(v26 + 14), (const std::string *)(a5 + 64));
          __int128 v27 = *(_OWORD *)(a5 + 88);
          *((_BYTE *)v26 + 152) = *(_BYTE *)(a5 + 104);
          *(_OWORD *)(v26 + 17) = v27;
          LODWORD(v26) = *(_DWORD *)(a5 + 116);
          *(void *)std::stringbuf::string_type buf = a5 + 16;
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          int v28 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            else {
              uint64_t v29 = *(void *)(a5 + 40);
            }
            else {
              uint64_t v30 = *(void *)(a5 + 64);
            }
            else {
              uint64_t v31 = *(void *)(a5 + 16);
            }
            int v32 = *(_DWORD *)(a5 + 92);
            uint64_t v33 = *(void *)(a3 + 16);
            *(_DWORD *)std::stringbuf::string_type buf = 136316162;
            *(void *)&uint8_t buf[4] = v29;
            __int16 v39 = 2080;
            uint64_t v40 = v30;
            __int16 v41 = 2080;
            uint64_t v42 = v31;
            __int16 v43 = 1024;
            int v44 = v32;
            __int16 v45 = 2048;
            uint64_t v46 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "connected to %s/%s @ %s of type %d - currently %lu connected device(s)",  buf,  0x30u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_10185FF00);
            }
            else {
              uint64_t v34 = *(void *)(a5 + 40);
            }
            else {
              uint64_t v35 = *(void *)(a5 + 64);
            }
            *(_DWORD *)__int128 v37 = 136316162;
            *(void *)&v37[4] = v34;
            *(_WORD *)&v37[12] = 2080;
            *(void *)&v37[14] = v35;
            *(_WORD *)&v37[22] = 2080;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "connected to %s/%s @ %s of type %d - currently %lu connected device(s)",  v37,  48,  *(_OWORD *)v37,  *(void *)&v37[16]);
LABEL_56:
            __int16 v36 = (char *)v20;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::updateStatusOfConnectedDevices(std::map<std::string, CLBluetoothService_Type::Dev ice> &, std::map<std::string, CLBluetoothService_Type::Device> &, const CLBluetoothService_Type::Notificat ion &, const CLBluetoothService_Type::NotificationData &)",  "%s\n",  v20);
            if (v36 != buf) {
              free(v36);
            }
          }
        }

        else
        {
          int v24 = *(_DWORD *)(a5 + 116);
          *(void *)std::stringbuf::string_type buf = v23;
          __int128 v25 = sub_1008F420C((uint64_t **)a3, v23, (uint64_t)&unk_1012CF090, (__int128 **)buf);
          *((_DWORD *)v25 + 37) |= v24;
        }

        break;
      default:
        return;
    }
  }

void sub_1008EC150(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unsigned int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(a1 + 8);
      uint64_t v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::stringbuf::string_type buf = 68289794;
      *(_DWORD *)__int128 v66 = 0;
      *(_WORD *)&v66[4] = 2082;
      *(void *)&v66[6] = "";
      *(_WORD *)&v66[14] = 2082;
      *(void *)&v66[16] = "activity";
      __int16 v67 = 2082;
      __int128 v68 = v12;
      __int16 v69 = 2050;
      __int16 v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    uint64_t v15 = (__n128 *)(a1 + 64);
    int v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    uint64_t v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        __int16 v20 = (__n128 **)v14;
      }
      else {
        __int16 v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        uint64_t v17 = v14;
      }
      int v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)__int16 v71 = &v71[8];
      memset(&v71[8], 0, 24);
      __int16 v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      uint64_t v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      double v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&v66[4], *(void **)&v66[12]);
      int v24 = v72;
      if (v72)
      {
        __int128 v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      sub_1008F35B8(a3, buf);
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      __int128 v27 = *(std::__shared_weak_count **)&v66[4];
      if (*(void *)&v66[4])
      {
        int v28 = (unint64_t *)(*(void *)&v66[4] + 8LL);
        do
          unint64_t v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    uint64_t v30 = sub_1008F3058(a3);
    if (a5 == -1)
    {
      sub_1008F3108((void *)a1, (int *)a2, v30);
    }

    else
    {
      uint64_t v31 = a1 + 88;
      uint64_t v32 = *(void *)(a1 + 88);
      if (!v32) {
        goto LABEL_48;
      }
      uint64_t v33 = a1 + 88;
      do
      {
        int v34 = *(_DWORD *)(v32 + 32);
        BOOL v35 = v34 < a5;
        if (v34 >= a5) {
          __int16 v36 = (uint64_t *)v32;
        }
        else {
          __int16 v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = v32;
        }
        uint64_t v32 = *v36;
      }

      while (*v36);
      if (v33 == v31 || *(_DWORD *)(v33 + 32) > a5) {
LABEL_48:
      }
        uint64_t v33 = a1 + 88;
      uint64_t v63 = v33;
      unint64_t v37 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v38 = *a2;
      __int16 v39 = (__n128 *)(a1 + 64);
      do
      {
        int v40 = *(_DWORD *)(v37 + 32);
        BOOL v41 = v40 < v38;
        if (v40 >= v38) {
          uint64_t v42 = (unint64_t *)v37;
        }
        else {
          uint64_t v42 = (unint64_t *)(v37 + 8);
        }
        if (!v41) {
          __int16 v39 = (__n128 *)v37;
        }
        unint64_t v37 = *v42;
      }

      while (*v42);
      if (v39 == v15 || v38 < (signed __int32)v39[2].n128_u32[0])
      {
LABEL_59:
        __int128 v62 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10185FEE0);
        }
        __int16 v43 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v44 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            __int16 v45 = v71;
          }
          else {
            __int16 v45 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315650;
          *(void *)__int128 v66 = v44;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a5;
          *(_WORD *)&v66[14] = 2080;
          *(void *)&v66[16] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_10185FEE0);
          }
          uint64_t v46 = (void *)(a1 + 8);
          uint64_t v47 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v61 >= 0) {
            uint64_t v48 = __p;
          }
          else {
            uint64_t v48 = (void **)__p[0];
          }
          *(_DWORD *)__int16 v71 = 136315650;
          *(void *)&v71[4] = v46;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v48;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v47,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v59);
          __int16 v50 = v49;
          if (v61 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::n otifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, Notif icationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v50);
        }

        goto LABEL_83;
      }

      __int128 v62 = v39;
      if (v33 == v31) {
        goto LABEL_60;
      }
      uint64_t v53 = v39[3].n128_i64[0];
      uint64_t v51 = v39 + 3;
      __int16 v52 = (__n128 *)v53;
      if (!v53) {
        goto LABEL_60;
      }
      int v54 = *(_DWORD *)(v33 + 32);
      int v55 = v51;
      do
      {
        int v56 = v52[1].n128_i32[3];
        BOOL v57 = v56 < v54;
        if (v56 >= v54) {
          __int16 v58 = v52;
        }
        else {
          __int16 v58 = (__n128 *)&v52->n128_i8[8];
        }
        if (!v57) {
          int v55 = v52;
        }
        __int16 v52 = (__n128 *)v58->n128_u64[0];
      }

      while (v58->n128_u64[0]);
      sub_1008F34DC((_BYTE *)a1, (uint64_t)&v63, (uint64_t)&v62, v30);
    }

void sub_1008EC76C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1008EC7B8(const void ***a1, void *a2, int a3, int a4)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10185FF00);
  }
  int v8 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67240704;
    int v45 = a3;
    __int16 v46 = 1026;
    int v47 = a4;
    __int16 v48 = 2048;
    int v49 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "bluetooth session event %{public}d result %{public}d session %p",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    v33[0] = 67240704;
    v33[1] = a3;
    LOWORD(v34[0]) = 1026;
    *(_DWORD *)((char *)v34 + 2) = a4;
    HIWORD(v34[0]) = 2048;
    v34[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "bluetooth session event %{public}d result %{public}d session %p",  v33,  24);
    double v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  __int128 v28 = *(_OWORD *)&off_10185FE30;
  LOBYTE(v33[0]) = 0;
  __int16 v41 = 0;
  int v42 = 0;
  int v43 = 0;
  *(_OWORD *)int v34 = 0u;
  __int128 v35 = 0u;
  *(_OWORD *)__int16 v36 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  char v40 = 0;
  if ((a3 - 1) < 3)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v9 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v45 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning bluetooth session disconnected - event %d",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_12;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    int v29 = 67109120;
    int v30 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning bluetooth session disconnected - event %d",  &v29);
    unint64_t v23 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v22);
    if (v23 == buf) {
      goto LABEL_12;
    }
    goto LABEL_73;
  }

  if (a3)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v11 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      int v45 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "bluetooth session event %d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v29 = 67109120;
      int v30 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "bluetooth session event %d",  &v29);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v12);
      goto LABEL_49;
    }
  }

  else
  {
    if (a4)
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      unsigned int v10 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109376;
        int v45 = a4;
        __int16 v46 = 1024;
        int v47 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning bluetooth session attached with error %d - event %d",  buf,  0xEu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_12;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v29 = 67109376;
      int v30 = a4;
      __int16 v31 = 1024;
      int v32 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning bluetooth session attached with error %d - event %d",  &v29,  14);
      unint64_t v23 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v24);
      if (v23 == buf) {
        goto LABEL_12;
      }
LABEL_73:
      free(v23);
LABEL_12:
      a1[14] = 0LL;
      a1[15] = 0LL;
      LOBYTE(v33[0]) = 0;
      *(_DWORD *)std::stringbuf::string_type buf = 0;
      ((void (*)(const void ***, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*a1)[19])( a1,  buf,  v33,  1LL,  0xFFFFFFFFLL,  0LL);
      sub_1008EB440(a1);
      goto LABEL_59;
    }

    a1[14] = (const void **)a2;
    if (BTDiscoveryAgentCreate(a2, &v28, a1, a1 + 15) || !a1[15])
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v14 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "could not create discovery agent", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v29) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not create discovery agent",  &v29,  v27,  v28);
        signed __int32 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }
    }

    if (!BTLocalDeviceGetDefault(a1[14], a1 + 16) && a1[16])
    {
      if (BTServiceAddCallbacks(a1[14], sub_1008ED670, a1))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        BOOL v19 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "could not register for service event callbacks",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          LOWORD(v29) = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not register for service event callbacks",  &v29,  v27);
          unint64_t v26 = (uint8_t *)v25;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v25);
          if (v26 != buf) {
            free(v26);
          }
        }
      }

      sub_1008ED870(a1);
      LOBYTE(v33[0]) = 1;
      *(_DWORD *)std::stringbuf::string_type buf = 0;
      ((void (*)(const void ***, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*a1)[19])( a1,  buf,  v33,  1LL,  0xFFFFFFFFLL,  0LL);
      goto LABEL_59;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v17 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v29) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not get local device",  &v29,  v27);
      uint64_t v13 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)",  "%s\n",  v18);
LABEL_49:
      if (v13 != buf) {
        free(v13);
      }
    }
  }

void sub_1008ED274( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1008ED2B4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  BOOL v8 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    char v14 = 1;
    uint64_t v11 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v11, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v12 = (os_log_s *)qword_1019349D8;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG);
    if (v8)
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      signed __int32 v18 = "";
      __int16 v19 = 2082;
      __int16 v20 = "activity";
      __int16 v21 = 2050;
      uint64_t v22 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback, event:%{public, l ocation:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v14 = 0;
  }

  sub_1008EF334(v8, v9, a2, v10, a4);
  if (v14) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008ED468( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008ED488(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback, event:%{public , location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v13 = 0;
  }

  sub_1008EF4F8(a5, v9, a2, a3, a4);
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008ED650( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008ED670(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v12 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLBluetoothService::onBluetoothService",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v12, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    char v13 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLBluetoothService::onBluetoothService, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  sub_1008EDEBC(a6, a1, a2, a3, a4, a5);
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008ED850( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008ED870(const void ***a1)
{
  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  sub_1008EFC9C((uint64_t)a1, &v46);
  sub_1008F3C8C((uint64_t *)&v44, a1 + 20);
  pid_t v2 = v44;
  if (v44 != (__int128 *)v45)
  {
    do
    {
      sub_1008F2E34(&v37, v2 + 2);
      uint64_t v4 = v46;
      uint64_t v3 = v47;
      sub_1008F2E34(&v29, &v37);
      if (v4 == v3)
      {
        int v13 = 1;
      }

      else
      {
        if ((v32 & 0x80u) == 0) {
          size_t v5 = v32;
        }
        else {
          size_t v5 = (size_t)v31[1];
        }
        if ((v32 & 0x80u) == 0) {
          unsigned int v6 = v31;
        }
        else {
          unsigned int v6 = (void **)v31[0];
        }
        uint64_t v7 = v4 + 104;
        do
        {
          int v8 = *(char *)(v7 - 73);
          if (v8 >= 0) {
            size_t v9 = *(unsigned __int8 *)(v7 - 73);
          }
          else {
            size_t v9 = *(void *)(v7 - 88);
          }
          if (v8 >= 0) {
            uint64_t v10 = (const void *)(v7 - 96);
          }
          else {
            uint64_t v10 = *(const void **)(v7 - 96);
          }
          if (v9 >= v5) {
            size_t v11 = v5;
          }
          else {
            size_t v11 = v9;
          }
          BOOL v12 = memcmp(v6, v10, v11) != 0;
          int v13 = v9 != v5 || v12;
          BOOL v14 = v13 != 1 || v7 == v3;
          v7 += 104LL;
        }

        while (!v14);
      }

      if (v36 < 0) {
        operator delete(v35);
      }
      if (v34 < 0) {
        operator delete(v33);
      }
      if (v30 < 0)
      {
        operator delete(v29);
        if (v13)
        {
LABEL_39:
          LOBYTE(v20) = 0;
          *(void *)uint64_t v21 = *((void *)&v38 + 1);
          if ((v39[23] & 0x80000000) != 0)
          {
            sub_1010DD48C(&v21[8], *(void **)v39, *(unint64_t *)&v39[8]);
          }

          else
          {
            *(_OWORD *)&v21[8] = *(_OWORD *)v39;
            *(void *)__int16 v22 = *(void *)&v39[16];
          }

          if ((v40[23] & 0x80000000) != 0)
          {
            sub_1010DD48C(&v22[8], *(void **)v40, *(unint64_t *)&v40[8]);
          }

          else
          {
            *(_OWORD *)&v22[8] = *(_OWORD *)v40;
            *(void *)uint64_t v23 = *(void *)&v40[16];
          }

          if ((v41[23] & 0x80000000) != 0)
          {
            sub_1010DD48C(&v23[8], *(void **)v41, *(unint64_t *)&v41[8]);
          }

          else
          {
            *(_OWORD *)&v23[8] = *(_OWORD *)v41;
            *(void *)int v24 = *(void *)&v41[16];
          }

          *(_OWORD *)&v24[8] = v42;
          char v25 = v43;
          __int16 v26 = 0;
          int v27 = HIDWORD(v42);
          int v28 = 0;
          int v19 = 11;
          ((void (*)(const void ***, int *, uint64_t *, uint64_t, uint64_t, void))(*a1)[19])( a1,  &v19,  &v20,  1LL,  0xFFFFFFFFLL,  0LL);
          if ((v24[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v23[8]);
          }
          if ((v23[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v22[8]);
          }
          if ((v22[7] & 0x80000000) != 0) {
            operator delete(*(void **)&v21[8]);
          }
        }
      }

      else if (v13)
      {
        goto LABEL_39;
      }

      if ((v41[23] & 0x80000000) != 0) {
        operator delete(*(void **)v41);
      }
      if ((v40[23] & 0x80000000) != 0) {
        operator delete(*(void **)v40);
      }
      if ((v39[23] & 0x80000000) != 0) {
        operator delete(*(void **)v39);
      }
      if (SBYTE7(v38) < 0) {
        operator delete((void *)v37);
      }
      char v15 = (__int128 *)*((void *)v2 + 1);
      if (v15)
      {
        do
        {
          __int16 v16 = v15;
          char v15 = *(__int128 **)v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          __int16 v16 = (__int128 *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v16 == (void)v2;
          pid_t v2 = v16;
        }

        while (!v14);
      }

      pid_t v2 = v16;
    }

    while (v16 != (__int128 *)v45);
  }

  uint64_t v17 = v46;
  for (uint64_t i = v47; v17 != i; v17 += 104LL)
  {
    sub_1008F2EA8((uint64_t)&v20, v17);
    LOBYTE(v37) = 0;
    *((void *)&v37 + 1) = v20;
    if ((v21[23] & 0x80000000) != 0)
    {
      sub_1010DD48C(&v38, *(void **)v21, *(unint64_t *)&v21[8]);
    }

    else
    {
      __int128 v38 = *(_OWORD *)v21;
      *(void *)__int128 v39 = *(void *)&v21[16];
    }

    if ((v22[23] & 0x80000000) != 0)
    {
      sub_1010DD48C(&v39[8], *(void **)v22, *(unint64_t *)&v22[8]);
    }

    else
    {
      *(_OWORD *)&v39[8] = *(_OWORD *)v22;
      *(void *)char v40 = *(void *)&v22[16];
    }

    if ((v23[23] & 0x80000000) != 0)
    {
      sub_1010DD48C(&v40[8], *(void **)v23, *(unint64_t *)&v23[8]);
    }

    else
    {
      *(_OWORD *)&v40[8] = *(_OWORD *)v23;
      *(void *)__int16 v41 = *(void *)&v23[16];
    }

    *(_OWORD *)&v41[8] = *(_OWORD *)v24;
    LOBYTE(v42) = v24[16];
    WORD4(v42) = 0;
    HIDWORD(v42) = *(_DWORD *)&v24[12];
    int v43 = 0;
    int v19 = 4;
    ((void (*)(const void ***, int *, __int128 *, uint64_t, uint64_t, void))(*a1)[19])( a1,  &v19,  &v37,  1LL,  0xFFFFFFFFLL,  0LL);
    int v19 = 10;
    ((void (*)(const void ***, int *, __int128 *, uint64_t, uint64_t, void))(*a1)[19])( a1,  &v19,  &v37,  1LL,  0xFFFFFFFFLL,  0LL);
    if ((v41[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v40[8]);
    }
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(*(void **)&v39[8]);
    }
    if ((v39[7] & 0x80000000) != 0) {
      operator delete((void *)v38);
    }
    if ((v23[23] & 0x80000000) != 0) {
      operator delete(*(void **)v23);
    }
    if ((v22[23] & 0x80000000) != 0) {
      operator delete(*(void **)v22);
    }
    if ((v21[23] & 0x80000000) != 0) {
      operator delete(*(void **)v21);
    }
  }

  sub_1008F0640((uint64_t)a1);
  sub_1008F2FAC((uint64_t)&v44, v45[0]);
  *(void *)&__int128 v37 = &v46;
  sub_1008F3BB4((void ***)&v37);
}

void sub_1008EDD88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,void **a52)
{
  *(void *)(v52 + 12_Block_object_dispose(va, 8) = v53 - 112;
  sub_1008F3BB4(&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_1008EDE6C(uint64_t a1)
{
  return a1;
}

void sub_1008EDEBC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10185FF00);
  }
  BOOL v12 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67240960;
    int v43 = a3;
    __int16 v44 = 1026;
    int v45 = a4;
    __int16 v46 = 1026;
    int v47 = a5;
    __int16 v48 = 1026;
    int v49 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "service mask 0x%{public}x event type %{public}d event %{public}d result %{public}d",  buf,  0x1Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    v32[0] = 67240960;
    v32[1] = a3;
    LOWORD(v33[0]) = 1026;
    *(_DWORD *)((char *)v33 + 2) = a4;
    HIWORD(v33[0]) = 1026;
    LODWORD(v33[1]) = a5;
    WORD2(v33[1]) = 1026;
    *(_DWORD *)((char *)&v33[1] + 6) = a6;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "service mask 0x%{public}x event type %{public}d event %{public}d result %{public}d",  v32,  26);
    int v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  LOBYTE(v32[0]) = 0;
  __int16 v39 = 0;
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)char v34 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  char v38 = 0;
  int v40 = a3;
  int v41 = a6;
  switch(a4)
  {
    case 2:
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      char v15 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        int v43 = a5;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        int v30 = 67109120;
        int v31 = a5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d",  &v30);
        char v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      switch(a5)
      {
        case 'e':
        case 'g':
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          __int16 v16 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 67109120;
            int v43 = a5;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_CONNECTED|START_VOICE_COMMAND",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_10185FF00);
            }
            int v30 = 67109120;
            int v31 = a5;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_CONNECTED|START_VOICE_COMMAND",  &v30);
            int v27 = (uint8_t *)v26;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecific Event, BTResult)",  "%s\n",  v26);
            if (v27 != buf) {
              free(v27);
            }
          }

          if (sub_1008EE948(a2, (uint64_t)v33))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 6;
            (*(void (**)(uint64_t, uint8_t *, _DWORD *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v32,  0LL,  0xFFFFFFFFLL,  0LL);
          }

          break;
        case 'f':
        case 'h':
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          uint64_t v17 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 67109120;
            int v43 = a5;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_DISCONNECTED|END_VOICE_COMMAND",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_10185FF00);
            }
            int v30 = 67109120;
            int v31 = a5;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_DISCONNECTED|END_VOICE_COMMAND",  &v30);
            int v29 = (uint8_t *)v28;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecific Event, BTResult)",  "%s\n",  v28);
            if (v29 != buf) {
              free(v29);
            }
          }

          if (sub_1008EE948(a2, (uint64_t)v33))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 7;
            (*(void (**)(uint64_t, uint8_t *, _DWORD *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v32,  0LL,  0xFFFFFFFFLL,  0LL);
          }

          break;
        default:
          goto LABEL_48;
      }

      break;
    case 1:
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      BOOL v14 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        int v43 = a5;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "BT: BT_SERVICE_DISCONNECT, event, %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        int v30 = 67109120;
        int v31 = a5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BT: BT_SERVICE_DISCONNECT, event, %d",  &v30);
        uint64_t v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }

      if (a5 == 12 && sub_1008EE948(a2, (uint64_t)v33))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 5;
        (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152LL))( a1,  buf,  v32,  1LL,  0xFFFFFFFFLL,  1LL);
      }

      break;
    case 0:
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v13 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 67109120;
        int v43 = a5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_CONNECT, event, %d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        int v30 = 67109120;
        int v31 = a5;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BT: BT_SERVICE_CONNECT, event, %d",  &v30);
        uint64_t v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      if (a5 == 11)
      {
        if (sub_1008EE948(a2, (uint64_t)v33))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 10;
          (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v32,  1LL,  0xFFFFFFFFLL,  0LL);
        }
      }

      else if (a5 == 1 && sub_1008EE948(a2, (uint64_t)v33))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 4;
        (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152LL))( a1,  buf,  v32,  1LL,  0xFFFFFFFFLL,  1LL);
      }

      break;
  }

void sub_1008EE8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_1008EE948(uint64_t a1, uint64_t a2)
{
  *(CFAbsoluteTime *)a2 = CFAbsoluteTimeGetCurrent();
  int AddressString = BTDeviceGetAddressString(a1, __s, 248LL);
  if (AddressString)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    size_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "BTDeviceGetAddressString failed", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v30[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BTDeviceGetAddressString failed",  v30,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    std::string::assign((std::string *)(a2 + 8), __s);
    if (BTDeviceGetDefaultName(a1, __s, 248LL))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v8 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning BTDeviceGetDefaultName failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v30[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning BTDeviceGetDefaultName failed",  v30,  2);
        __int16 v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      if (*(char *)(a2 + 79) < 0)
      {
        **(_BYTE **)(a2 + 56) = 0;
        *(void *)(a2 + 64) = 0LL;
      }

      else
      {
        *(_BYTE *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 79) = 0;
      }
    }

    else
    {
      std::string::assign((std::string *)(a2 + 56), __s);
    }

    if (BTDeviceGetName(a1, __s, 248LL))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      size_t v9 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetName failed", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v30[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning BTDeviceGetName failed",  v30,  v27);
        __int16 v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      if (*(char *)(a2 + 55) < 0)
      {
        **(_BYTE **)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0LL;
      }

      else
      {
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 55) = 0;
      }
    }

    else
    {
      std::string::assign((std::string *)(a2 + 32), __s);
    }

    if (BTDeviceGetDeviceType(a1, a2 + 84))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      uint64_t v10 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning BTDeviceGetDeviceType failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v30[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning BTDeviceGetDeviceType failed",  v30,  v27);
        uint64_t v20 = (uint8_t *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      *(_DWORD *)(a2 + 84) = 0;
    }

    if (BTDeviceGetDeviceClass(a1, a2 + 80))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      size_t v11 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning BTDeviceGetDeviceClass failed",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v30[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning BTDeviceGetDeviceClass failed",  v30,  v27);
        __int16 v22 = (uint8_t *)v21;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v21);
        if (v22 != buf) {
          free(v22);
        }
      }

      *(_DWORD *)(a2 + 80) = 0;
    }

    v30[0] = 0;
    if (BTDeviceGetConnectedServices(a1, v30))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      BOOL v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning BTDeviceGetConnectedServices failed.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v29[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning BTDeviceGetConnectedServices failed.",  v29,  v27);
        int v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }
    }

    *(_DWORD *)(a2 + 92) = v30[0];
    v29[0] = 0;
    if (BTDeviceIsAppleAudioDevice(a1, v29))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v13 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning BTDeviceIsAppleAudioDevice failed.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        v28[0] = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning BTDeviceIsAppleAudioDevice failed.",  v28,  v27);
        __int16 v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }
    }

    *(_BYTE *)(a2 + 96) = v29[0] != 0;
    *(_DWORD *)(a2 + 8_Block_object_dispose(va, 8) = 0;
  }

  return AddressString == 0;
}

void sub_1008EF334(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10185FF00);
  }
  uint64_t v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 67109376;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "discovery status %d result %d", buf, 0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    v10[0] = 67109376;
    v10[1] = a3;
    __int16 v11 = 1024;
    int v12 = a5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "discovery status %d result %d",  v10,  14);
    size_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback(BTDiscoveryAgent, BTDiscoveryStatus, BTDevice, BTResult)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

void sub_1008EF4F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  v8[0] = 0;
  __int16 v16 = 0;
  int v17 = 0;
  int v18 = 0;
  *(_OWORD *)size_t v9 = 0u;
  __int128 v10 = 0u;
  *(_OWORD *)__int16 v11 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  char v15 = 0;
  if (a3 == 2)
  {
    if (sub_1008EE948(a4, (uint64_t)v9))
    {
      DWORD2(v14) = a5;
      int v7 = 2;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v7,  v8,  1LL,  0xFFFFFFFFLL,  0LL);
    }
  }

  else if (a3 == 1)
  {
    if (sub_1008EE948(a4, (uint64_t)v9))
    {
      DWORD2(v14) = a5;
      int v7 = 3;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v7,  v8,  1LL,  0xFFFFFFFFLL,  0LL);
    }
  }

  else if (!a3 && sub_1008EE948(a4, (uint64_t)v9))
  {
    DWORD2(v14) = a5;
    int v7 = 1;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v7,  v8,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
}

void sub_1008EF654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008EF674(uint64_t a1)
{
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = *(void *)(a1 + 128);
    if (v2)
    {
      int v30 = 0;
      if (BTLocalDeviceGetModulePower(v2, 1LL, &v30))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        uint64_t v3 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "could not get module power", buf, 2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          __int16 v18 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not get module power",  &v18,  2);
          size_t v5 = (uint8_t *)v4;
          sub_10029211C("Generic", 1LL, 0, 0LL, "void CLBluetoothService::updatePowerState()", "%s\n", v4);
LABEL_28:
          if (v5 != buf) {
            free(v5);
          }
        }
      }

      else
      {
        BOOL v10 = v30 == -1;
        *(_BYTE *)(a1 + 109) = v30 == -1;
        LOBYTE(v1_Block_object_dispose(va, 8) = 0;
        char v26 = 0;
        *(_OWORD *)int v19 = 0u;
        __int128 v20 = 0u;
        *(_OWORD *)uint64_t v21 = 0u;
        *(_OWORD *)__n128 __p = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        char v25 = 0;
        BOOL v27 = v10;
        int v28 = 0;
        int v29 = 0;
        *(_DWORD *)std::stringbuf::string_type buf = 9;
        (*(void (**)(uint64_t, uint8_t *, __int16 *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152LL))( a1,  buf,  &v18,  1LL,  0xFFFFFFFFLL,  1LL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        __int16 v11 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(a1 + 112);
          int v13 = *(unsigned __int8 *)(a1 + 109);
          *(_DWORD *)std::stringbuf::string_type buf = 134218240;
          uint64_t v36 = v12;
          __int16 v37 = 1024;
          int v38 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "BluetoothSession, %p, power, %d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          uint64_t v14 = *(void *)(a1 + 112);
          int v15 = *(unsigned __int8 *)(a1 + 109);
          int v31 = 134218240;
          uint64_t v32 = v14;
          __int16 v33 = 1024;
          int v34 = v15;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "BluetoothSession, %p, power, %d",  &v31,  18);
          int v17 = (uint8_t *)v16;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLBluetoothService::updatePowerState()", "%s\n", v16);
          if (v17 != buf) {
            free(v17);
          }
        }

        if (SHIBYTE(v23) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v21[0]);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[1]);
        }
      }
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v8 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        __int16 v18 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not get local device",  &v18,  2);
        size_t v5 = (uint8_t *)v9;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLBluetoothService::updatePowerState()", "%s\n", v9);
        goto LABEL_28;
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    unsigned int v6 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "no bluetooth session", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      __int16 v18 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "no bluetooth session",  &v18,  2);
      size_t v5 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLBluetoothService::updatePowerState()", "%s\n", v7);
      goto LABEL_28;
    }
  }

void sub_1008EFC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008EFC9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 104LL;
      sub_1008F3C38((uint64_t)(a2 + 2), v4);
    }

    while (v4 != v5);
  }

  a2[1] = v5;
  if (*(void *)(a1 + 112))
  {
    uint64_t v6 = *(void *)(a1 + 128);
    if (v6)
    {
      if (BTLocalDeviceGetConnectedDevices(v6, v50, &v38, 10LL))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        int v7 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "BTLocalDeviceGetConnectedDevices failed",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          *(_WORD *)int v45 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BTLocalDeviceGetConnectedDevices failed",  v45,  2);
          size_t v9 = (uint8_t *)v8;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)",  "%s\n",  v8);
LABEL_74:
          if (v9 != buf) {
            free(v9);
          }
        }
      }

      else
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        int v13 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 134349056;
          uint64_t v52 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "received %{public}zu connected devices",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          *(_DWORD *)int v45 = 134349056;
          *(void *)&v45[4] = v38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "received %{public}zu connected devices",  v45,  12);
          uint64_t v36 = (uint8_t *)v35;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)",  "%s\n",  v35);
          if (v36 != buf) {
            free(v36);
          }
        }

        if ((int)v38 >= 1)
        {
          uint64_t v14 = 0LL;
          do
          {
            uint64_t v47 = 0LL;
            __int128 __p = 0u;
            memset(&v45[8], 0, 48);
            if (sub_1008EE948(v50[v14], (uint64_t)v45))
            {
              unint64_t v15 = a2[1];
              if (v15 >= a2[2])
              {
                uint64_t v17 = sub_1008F3EA4(a2, (uint64_t)v45);
              }

              else
              {
                *(void *)unint64_t v15 = *(void *)v45;
                if ((v45[31] & 0x80000000) != 0)
                {
                  sub_1010DD48C((_BYTE *)(v15 + 8), *(void **)&v45[8], *(unint64_t *)&v45[16]);
                }

                else
                {
                  __int128 v16 = *(_OWORD *)&v45[8];
                  *(void *)(v15 + 24) = *(void *)&v45[24];
                  *(_OWORD *)(v15 + _Block_object_dispose(va, 8) = v16;
                }

                if ((v45[55] & 0x80000000) != 0)
                {
                  sub_1010DD48C((_BYTE *)(v15 + 32), *(void **)&v45[32], *(unint64_t *)&v45[40]);
                }

                else
                {
                  __int128 v18 = *(_OWORD *)&v45[32];
                  *(void *)(v15 + 4_Block_object_dispose(va, 8) = *(void *)&v45[48];
                  *(_OWORD *)(v15 + 32) = v18;
                }

                int v19 = (_BYTE *)(v15 + 56);
                if (SHIBYTE(v47) < 0)
                {
                  sub_1010DD48C(v19, (void *)__p, *((unint64_t *)&__p + 1));
                }

                else
                {
                  __int128 v20 = __p;
                  *(void *)(v15 + 72) = v47;
                  *(_OWORD *)int v19 = v20;
                }

                __int128 v21 = v48;
                *(_BYTE *)(v15 + 96) = v49;
                *(_OWORD *)(v15 + 80) = v21;
                uint64_t v17 = v15 + 104;
                a2[1] = v15 + 104;
              }

              a2[1] = v17;
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_10185FF00);
              }
              __int16 v22 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
              {
                int v23 = v45[31];
                __int128 v24 = *(_BYTE **)&v45[8];
                int v25 = sub_1008F09B0(&v45[8]);
                if (v23 >= 0) {
                  char v26 = &v45[8];
                }
                else {
                  char v26 = v24;
                }
                *(_DWORD *)std::stringbuf::string_type buf = 136315650;
                uint64_t v52 = v26;
                __int16 v53 = 1026;
                int v54 = v25;
                __int16 v55 = 1026;
                int v56 = HIDWORD(v48);
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "connected device,address,%s,oui,%{public}d,services,0x%{public}x",  buf,  0x18u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_10185FF00);
                }
                uint64_t v27 = qword_101934A78;
                int v28 = v45[31];
                int v29 = *(_BYTE **)&v45[8];
                int v30 = sub_1008F09B0(&v45[8]);
                if (v28 >= 0) {
                  int v31 = &v45[8];
                }
                else {
                  int v31 = v29;
                }
                int v39 = 136315650;
                int v40 = v31;
                __int16 v41 = 1026;
                int v42 = v30;
                __int16 v43 = 1026;
                int v44 = HIDWORD(v48);
                LODWORD(v37) = 24;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v27,  0LL,  "connected device,address,%s,oui,%{public}d,services,0x%{public}x",  &v39,  v37);
                __int16 v33 = (uint8_t *)v32;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)",  "%s\n",  v32);
                if (v33 != buf) {
                  free(v33);
                }
              }
            }

            if (SHIBYTE(v47) < 0) {
              operator delete((void *)__p);
            }
            if ((v45[55] & 0x80000000) != 0) {
              operator delete(*(void **)&v45[32]);
            }
            if ((v45[31] & 0x80000000) != 0) {
              operator delete(*(void **)&v45[8]);
            }
            ++v14;
          }

          while (v14 < (int)v38);
        }
      }
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      uint64_t v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        *(_WORD *)int v45 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not get local device",  v45,  2);
        size_t v9 = (uint8_t *)v34;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)",  "%s\n",  v34);
        goto LABEL_74;
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    BOOL v10 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "no session available - cannot get connected devices",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      *(_WORD *)int v45 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "no session available - cannot get connected devices",  v45,  2);
      size_t v9 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)",  "%s\n",  v11);
      goto LABEL_74;
    }
  }

void sub_1008F052C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1008F0590(uint64_t a1)
{
  return a1;
}

uint64_t sub_1008F05F0(uint64_t a1)
{
  return a1;
}

void sub_1008F0640(uint64_t a1)
{
  if (*(void *)(a1 + 112))
  {
    uint64_t v2 = *(void *)(a1 + 128);
    if (v2)
    {
      __int128 v9 = off_10185FE40;
      uint64_t v10 = 0LL;
      if (!BTLocalDeviceAddCallbacks(v2, &v9, a1))
      {
        sub_1008EF674(a1);
        return;
      }

      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      uint64_t v3 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "BTLocalDeviceAddCallbacks failed", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v_Block_object_dispose(va, 8) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "BTLocalDeviceAddCallbacks failed",  &v8,  2,  v8);
LABEL_28:
        int v7 = (uint8_t *)v4;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLBluetoothService::initializePowerState()", "%s\n", v4);
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      uint64_t v6 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        LOWORD(v9) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "could not get local device",  &v9,  2,  v8);
        goto LABEL_28;
      }
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v5 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "no session available - cannot get connected devices",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "no session available - cannot get connected devices",  &v9,  2,  v8);
      goto LABEL_28;
    }
  }

uint64_t sub_1008F09B0(const char *a1)
{
  uint64_t v1 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (sscanf(a1, "%x:%x:%x:%x:%x:%x", v13, &v13[4], &v13[8], &v13[12], &v13[16], &v13[20]) == 6)
  {
    uint64_t v2 = 0LL;
    LODWORD(result) = 0;
    do
    {
      uint64_t result = v13[v2] | ((_DWORD)result << 8);
      v2 += 4LL;
    }

    while (v2 != 12);
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v5 = (uint64_t *)*v1;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      uint64_t v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Input BT MAC address %s is malformed.",  buf,  0xCu);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      else {
        uint64_t v6 = (uint64_t *)*v1;
      }
      int v9 = 136315138;
      uint64_t v10 = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning Input BT MAC address %s is malformed.",  (const char *)&v9);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static uint32_t CLBluetoothService::getOuiFromBtMacAddress(const std::string &)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
      return 0LL;
    }
  }

  return result;
}

void sub_1008F0BE4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  if (!os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 0;
    if (a2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  char v9 = 1;
  uint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLBluetoothService::onBluetoothLocalDeviceStatusEvent",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  int v7 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    unint64_t v15 = "activity";
    __int16 v16 = 2050;
    uint64_t v17 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLBluetoothService::onBluetoothLocalDeviceStatusEvent, event:%{public, location:escap e_only}s, this:%{public}p}",  buf,  0x26u);
  }

  if (!a2) {
LABEL_11:
  }
    sub_1008EF674(a4);
LABEL_12:
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008F0D98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008F0DB8(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 112)) {
    return 0LL;
  }
  if (!*(void *)(a1 + 128))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v8 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning could not get local device", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      LOWORD(v15.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  0LL,  "#Warning could not get local device",  &v15,  2);
      __int16 v14 = (uint8_t *)v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBluetoothService::setAFHChannelAvoidance(uint8_t *)", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    return 0LL;
  }

  int v3 = BTLocalDeviceSetAFHMap();
  uint64_t v4 = 0LL;
  memset(&v15, 0, sizeof(v15));
  do
  {
    snprintf(__str, 0xAuLL, "%02x ", *(unsigned __int8 *)(a2 + v4));
    std::string::append(&v15, __str);
    ++v4;
  }

  while (v4 != 10);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10185FF00);
  }
  uint64_t v5 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = &v15;
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136315394;
    __int16 v22 = v6;
    __int16 v23 = 1024;
    int v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Setting AFH map: %s - result: %d", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    uint64_t v10 = &v15;
    if ((v15.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    int v16 = 136315394;
    uint64_t v17 = v10;
    __int16 v18 = 1024;
    int v19 = v3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Setting AFH map: %s - result: %d",  (const char *)&v16,  18);
    __int16 v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLBluetoothService::setAFHChannelAvoidance(uint8_t *)", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  BOOL v7 = v3 != 202;
  return v7;
}

void sub_1008F1150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008F117C(uint64_t a1, int *a2, unsigned int a3)
{
  *(void *)a1 = -1LL;
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 0x7FFF;
  if (a3 > 0xA)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185FF00);
    }
    int v13 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240448;
      int v23 = 10;
      __int16 v24 = 1026;
      int v25 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Max AFH channels cannot exceed %{public}d - input %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185FF00);
      }
      int v18 = 67240448;
      int v19 = 10;
      __int16 v20 = 1026;
      int v21 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Max AFH channels cannot exceed %{public}d - input %{public}d",  &v18,  14);
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLBluetoothService::getAFHBitmapFromIntArray(uint8_t *, const unsigned int *, const unsigned int)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  else if (a3)
  {
    uint64_t v6 = a3;
    do
    {
      unint64_t v7 = *a2;
      if (v7 > 0x4E)
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10185FF00);
        }
        uint64_t v8 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
        {
          int v9 = *a2;
          *(_DWORD *)std::stringbuf::string_type buf = 67240448;
          int v23 = v9;
          __int16 v24 = 1026;
          int v25 = 78;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "AFH channel %{public}d cannot exceed %{public}d",  buf,  0xEu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10185FF00);
          }
          int v10 = *a2;
          int v18 = 67240448;
          int v19 = v10;
          __int16 v20 = 1026;
          int v21 = 78;
          LODWORD(v17) = 14;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "AFH channel %{public}d cannot exceed %{public}d",  &v18,  v17);
          __int16 v12 = (uint8_t *)v11;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLBluetoothService::getAFHBitmapFromIntArray(uint8_t *, const unsigned int *, const unsigned int)",  "%s\n",  v11);
          if (v12 != buf) {
            free(v12);
          }
        }
      }

      else
      {
        *(_BYTE *)(a1 + (v7 >> 3)) &= ~(1 << (v7 & 7));
      }

      ++a2;
      --v6;
    }

    while (v6);
  }

  return a3 < 0xB;
}

void *sub_1008F1540@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_1008F15B8()
{
  return 1LL;
}

uint64_t sub_1008F15C0()
{
  return 1LL;
}

void sub_1008F15C8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLBluetoothService");
  sub_1008F175C((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = off_10185FE68;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1008F1664( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1008F1690(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  char v10 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLBluetoothService");
  sub_1008F175C((uint64_t)v10, a1, (uint64_t *)__p, a4, a2, a3);
  *char v10 = off_10185FE68;
  *a5 = v10;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1008F1730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1008F175C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_101860080;
  *(void *)(a1 + _Block_object_dispose(va, 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    char v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1008F1830(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::stringbuf::string_type buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10185FEE0);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        int v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_10185FEE0);
        }
        char v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        uint64_t v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::rem oveClient(int) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothServic e_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_1008F1AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198D940);
}

BOOL sub_1008F1AB8(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v40 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          int v23 = (uint64_t *)v17;
        }
        else {
          int v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }

      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          int v28 = (uint64_t *)v24;
        }
        else {
          int v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }

      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)int v42 = v25;
        uint64_t v33 = *(void *)(v25 + 56);
        char v34 = *a4;
        *(void *)std::stringbuf::string_type buf = &v41;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v25 + 40), &v41, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        __int16 v52 = 0;
        int v53 = 0;
        int v54 = 0;
        *(_OWORD *)&uint8_t buf[8] = 0u;
        __int128 v46 = 0u;
        *(_OWORD *)uint64_t v47 = 0u;
        *(_OWORD *)__int128 __p = 0u;
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        char v51 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          __int128 v35 = sub_1008F4418((uint64_t)buf);
          sub_1008F34DC((_BYTE *)a1, (uint64_t)&v40, (uint64_t)v42, v35);
        }

        if (SHIBYTE(v49) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v47[0]);
        }
        if (SHIBYTE(v46) < 0) {
          operator delete(*(void **)&buf[16]);
        }
        if (v33) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        *(void *)int v42 = a1 + 64;
        char v29 = byte_10198D941;
        HIDWORD(v39) = v16;
        *(void *)std::stringbuf::string_type buf = (char *)&v39 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v39) = *a3;
        *(void *)std::stringbuf::string_type buf = (char *)&v39 + 4;
        int v30 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v30 + 8);
        char v31 = *a4;
        HIDWORD(v39) = *a3;
        *(void *)std::stringbuf::string_type buf = (char *)&v39 + 4;
        uint64_t v32 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::stringbuf::string_type buf = &v41;
        *((_BYTE *)sub_1004EF3D4(v32 + 5, &v41, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v31;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)std::stringbuf::string_type buf = *a3;
        sub_10004A8FC((uint64_t **)(v40 + 40), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v36 = (void *)(a1 + 8);
    *(_DWORD *)int v42 = 136446466;
    *(void *)&v42[4] = v36;
    __int16 v43 = 1026;
    int v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    int v38 = (char *)v37;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::registe rForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBluetoothService_Typ e::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, Regist rationInfo_T = char]",  "%s\n",  v37);
    if (v38 != buf) {
      free(v38);
    }
    return 0LL;
  }

  return result;
}

void sub_1008F1F78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_1008F1F98(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      int v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10185FEE0);
      }
      BOOL v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      int v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::clien tRegistered(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationDa ta_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1008F2218(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10185FEE0);
              }
              int v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10185FEE0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationDa ta>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBluetoothService_Type: :Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = ch ar, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_1008F25A0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }

  while (*v11);
  if (v8 == v3) {
    return 0LL;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0LL;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0LL;
  }
  *(_BYTE *)a3 = *(_BYTE *)v12;
  *(void *)(a3 + _Block_object_dispose(va, 8) = *(void *)(v12 + 8);
  std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v12 + 16));
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v12 + 40));
  std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v12 + 64));
  __int128 v13 = *(_OWORD *)(v12 + 88);
  *(_BYTE *)(a3 + 104) = *(_BYTE *)(v12 + 104);
  *(_OWORD *)(a3 + 8_Block_object_dispose(va, 8) = v13;
  int v14 = *(_DWORD *)(v12 + 120);
  *(void *)(a3 + 112) = *(void *)(v12 + 112);
  *(_DWORD *)(a3 + 120) = v14;
  return 1LL;
}

uint64_t sub_1008F2664(uint64_t a1, int *a2, uint64_t a3)
{
  int v10 = *a2;
  uint64_t v12 = &v10;
  uint64_t v5 = sub_10023347C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_1012CF090, &v12);
  sub_10005F550((uint64_t)(v5 + 8), &v11);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    int v7 = (unint64_t *)(*((void *)&v11 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 1LL;
}

void sub_1008F2710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008F2724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  __int16 v12 = 0;
  int v13 = 0;
  int v14 = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  __int128 v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  *(_OWORD *)__int128 __p = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  char v11 = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v4,  a3,  a4,  0LL);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
}

void sub_1008F27BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008F27D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      uint64_t v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10185FEE0);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      __int128 v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listC lients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185FEE0);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::stringbuf::string_type buf = 136315394;
      uint64_t v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10185FEE0);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listC lients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    __int128 v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      char v11 = (void *)(a1 + 8);
      do
      {
        __int16 v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_10185FEE0);
            }
            int v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              int v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::stringbuf::string_type buf = 136315650;
              uint64_t v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10185FEE0);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData >::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoo thService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                BOOL v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                BOOL v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                __int16 v12 = v18;
              }

              while (!v19);
            }

            __int16 v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            int v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            int v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            __int128 v10 = v26;
          }

          while (!v19);
        }

        __int128 v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_1008F2D7C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1008F43B8(a1);
  operator delete(v1);
}

id sub_1008F2D90(uint64_t a1, int a2, void *a3)
{
  id result = sub_1008F3790(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_1008F2DDC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1008F2E08(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_1008F2E34(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)char __dst = v4;
  }

  sub_1008F2EA8((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1008F2E8C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1008F2EA8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = v4;
  }

  if (*(char *)(a2 + 55) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }

  int v6 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1010DD48C(v6, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)int v6 = v7;
  }

  __int128 v8 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_1008F2F78(_Unwind_Exception *exception_object)
{
}

void sub_1008F2FAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1008F2FAC(a1, *a2);
    sub_1008F2FAC(a1, a2[1]);
    sub_1008F2FF4((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_1008F2FF4(uint64_t a1)
{
}

CLCppContainer *sub_1008F3058(uint64_t a1)
{
  uint64_t v2 = operator new(0x80uLL);
  *(_BYTE *)uint64_t v2 = *(_BYTE *)a1;
  sub_1008F2EA8((uint64_t)(v2 + 1), a1 + 8);
  v2[14] = *(void *)(a1 + 112);
  *((_DWORD *)v2 + 30) = *(_DWORD *)(a1 + 120);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1008F3730;
  v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  128LL);
}

void sub_1008F30F4(_Unwind_Exception *a1)
{
}

void sub_1008F3108(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    __int128 v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          __int16 v12 = (uint64_t *)v4;
        }
        else {
          __int16 v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        char v51 = v9;
        id v13 = sub_1008F3790(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int128 v50 = v19;
              sub_1008F34DC(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              char v51 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                __int128 v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    __int128 v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      __int128 v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int128 v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_10185FEE0);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                BOOL v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_10185FEE0);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                int v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                __int128 v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::inv okeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBluetoothService_Type ::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = c har, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_1008F34DC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    __int128 v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_1008F3790(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    int v14 = (int *)(*(void *)a2 + 32LL);
    __int16 v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

uint64_t sub_1008F35B8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x98uLL);
  uint64_t result = sub_1008F3610((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1008F35FC(_Unwind_Exception *a1)
{
}

uint64_t sub_1008F3610(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_101860010;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)a2;
  sub_1008F2EA8(a1 + 32, a2 + 8);
  uint64_t v4 = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v4;
  return a1;
}

void sub_1008F3668(_Unwind_Exception *a1)
{
}

void sub_1008F367C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101860010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1008F3690(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101860010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1008F36B4(uint64_t a1)
{
}

void sub_1008F36DC(uint64_t a1, uint64_t a2)
{
}

void sub_1008F3730(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    operator delete((void *)v1);
  }

id sub_1008F3790(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1008F37DC(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1008F37DC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860050);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101340863LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860050);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860050);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101340863LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860050);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  __int128 v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBluetoothService_Type::NotificationData, Callb acuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

void sub_1008F3B88(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1008F3BB4(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104LL;
        sub_1008F3C38((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1008F3C38(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_1008F3C8C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_1008F3CE0(a1, *a2, a2 + 1);
  return a1;
}

void sub_1008F3CC8(_Unwind_Exception *a1)
{
}

uint64_t *sub_1008F3CE0(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    __int128 v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = sub_1008F3D64(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      __int128 v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          __int128 v7 = (const void **)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }

        while (!v9);
      }

      uint64_t v4 = (const void **)v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_1008F3D64(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  int v6 = sub_1003F9A10(a1, a2, &v12, &v11, a3);
  __int128 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_1008F3DF8((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, (uint64_t)v12, v8, v10[0]);
    __int128 v7 = v10[0];
    v10[0] = 0LL;
    sub_1008F3E60((uint64_t)v10, 0LL);
  }

  return v7;
}

void *sub_1008F3DF8@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0xA0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = sub_1008F2E34(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1008F3E48(_Unwind_Exception *a1)
{
}

void sub_1008F3E60(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1008F2FF4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

uint64_t sub_1008F3EA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5LL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5LL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276LL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    id v10 = (char *)sub_1003F7F84(v7, v9);
  }
  else {
    id v10 = 0LL;
  }
  __int16 v13 = v10;
  unint64_t v14 = &v10[104 * v4];
  int v16 = &v10[104 * v9];
  sub_1008F2EA8((uint64_t)v14, a2);
  int v15 = v14 + 104;
  sub_1008F3FC0(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1008F4198(&v13);
  return v11;
}

void sub_1008F3FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008F3FC0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1008F4034((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1008F4034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v19 = a6;
  *((void *)&v19 + 1) = a7;
  __int128 v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }

  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 104);
      a3 -= 104LL;
      *(void *)(v8 - 104) = v9;
      v8 -= 104LL;
      __int128 v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = v10;
      *(void *)(a3 + 16) = 0LL;
      *(void *)(a3 + 24) = 0LL;
      *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
      __int128 v11 = *(_OWORD *)(a3 + 32);
      *(void *)(v8 + 4_Block_object_dispose(va, 8) = *(void *)(a3 + 48);
      *(_OWORD *)(v8 + 32) = v11;
      *(void *)(a3 + 40) = 0LL;
      *(void *)(a3 + 4_Block_object_dispose(va, 8) = 0LL;
      *(void *)(a3 + 32) = 0LL;
      __int128 v12 = *(_OWORD *)(a3 + 56);
      *(void *)(v8 + 72) = *(void *)(a3 + 72);
      *(_OWORD *)(v8 + 56) = v12;
      *(void *)(a3 + 64) = 0LL;
      *(void *)(a3 + 72) = 0LL;
      *(void *)(a3 + 56) = 0LL;
      __int128 v13 = *(_OWORD *)(a3 + 80);
      *(_BYTE *)(v8 + 96) = *(_BYTE *)(a3 + 96);
      *(_OWORD *)(v8 + 80) = v13;
      v7 -= 104LL;
    }

    while (a3 != a5);
    *((void *)&v19 + 1) = v8;
    uint64_t v14 = v19;
  }

  char v17 = 1;
  sub_1008F4114((uint64_t)v16);
  return v14;
}

uint64_t sub_1008F4114(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1008F4148((uint64_t *)a1);
  }
  return a1;
}

void sub_1008F4148(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1008F3C38(v3, v1);
      v1 += 104LL;
    }

    while (v1 != v2);
  }

void **sub_1008F4198(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1008F41C8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    sub_1008F3C38(v4, i - 104);
  }

uint64_t *sub_1008F420C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1008F42B4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0LL;
    sub_1008F3E60((uint64_t)v10, 0LL);
  }

  return v7;
}

double sub_1008F42B4@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xA0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1010DD48C(v7, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }

  *((void *)v6 + 19) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1008F4348(_Unwind_Exception *a1)
{
}

uint64_t sub_1008F4360(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_10008E8D0((uint64_t)a1, a2);
  uint64_t v4 = v3;
  sub_1000087E8(a1, v3);
  sub_1008F2FF4((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1LL;
}

uint64_t sub_1008F43B8(uint64_t a1)
{
  *(void *)a1 = off_101860080;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

CLCppContainer *sub_1008F4418(uint64_t a1)
{
  uint64_t v2 = operator new(0x80uLL);
  *(_BYTE *)uint64_t v2 = *(_BYTE *)a1;
  sub_1008F2EA8((uint64_t)(v2 + 1), a1 + 8);
  v2[14] = *(void *)(a1 + 112);
  *((_DWORD *)v2 + 30) = *(_DWORD *)(a1 + 120);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1008F44C8;
  v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  128LL);
}

void sub_1008F44B4(_Unwind_Exception *a1)
{
}

void sub_1008F44C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    operator delete((void *)v1);
  }

uint64_t sub_1008F4528(uint64_t a1, double *a2, double *a3, double *a4, char a5)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(void *)a1 = off_1018600A8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 9) = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0x3FF0000000000000LL;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(void *)(a1 + 200) = 0xBFF0000000000000LL;
  uint64_t v13 = (int)(0.100000001 / *a4);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = off_10184DB98;
  *(void *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0LL;
  uint64_t v14 = (int)(0.100000001 / *a4);
  *(void *)(a1 + 280) = off_10184DB98;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = v14;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 0LL;
  *(_WORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 472) = a5;
  double v15 = *a2;
  *(double *)(a1 + 480) = *a2;
  *(double *)(a1 + 48_Block_object_dispose(va, 8) = *a4;
  *(_DWORD *)(a1 + 496) = 4;
  *(void *)(a1 + 504) = 0x3FA0A3D70A3D70A4LL;
  *(_BYTE *)(a1 + 512) = 1;
  int v16 = (void *)(a1 + 520);
  *(void *)(a1 + sub_10000AE14(v1 + 520) = off_10184DB98;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 100LL;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 56_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 584) = 0LL;
  *(void *)(a1 + 592) = off_101850538;
  *(void *)(a1 + 600) = 20LL;
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = off_101850568;
  *(void *)(a1 + 616) = 20LL;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 68_Block_object_dispose(va, 8) = off_101850568;
  *(void *)(a1 + 696) = 20LL;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 76_Block_object_dispose(va, 8) = off_101850568;
  *(void *)(a1 + 776) = 20LL;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 896) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 904) = 0;
  char v17 = (char *)operator new[](0x54uLL);
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v17;
  *(void *)(a1 + 112) = v17 + 24;
  if (v15 > 0.011 || *a3 > 0.021)
  {
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
    sub_10074DFF8(v16);
    *(void *)(a1 + 600) = 0LL;
    *(void *)(a1 + 616) = 0LL;
    sub_1007C39F0((void *)(a1 + 608));
    *(void *)(a1 + 696) = 0LL;
    sub_1007C39F0((void *)(a1 + 688));
    *(void *)(a1 + 776) = 0LL;
    sub_1007C39F0((void *)(a1 + 768));
    *(_BYTE *)(a1 + 512) = 0;
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    __int128 v19 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Doing crude accel measurement update.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      LOWORD(v45) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Doing crude accel measurement update.",  &v45,  2);
      BOOL v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, BOOL)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }
  }

  else
  {
    if (fabs(v15 * 200.0 + -1.0) > 0.25)
    {
      if (v15 <= 0.008 || v15 > 0.011) {
        uint64_t v18 = (0.5 / v15);
      }
      else {
        uint64_t v18 = 50LL;
      }
      *(void *)(a1 + 52_Block_object_dispose(va, 8) = v18;
      sub_10074DFF8(v16);
    }

    if (fabs(*a3 * 100.0 + -1.0) > 0.25)
    {
      uint64_t v22 = (0.200000003 / *a3);
      *(void *)(a1 + 600) = v22;
      *(void *)(a1 + 616) = v22;
      sub_1007C39F0((void *)(a1 + 608));
      *(void *)(a1 + 696) = v22;
      sub_1007C39F0((void *)(a1 + 688));
      *(void *)(a1 + 776) = v22;
      sub_1007C39F0((void *)(a1 + 768));
      double v23 = *a3;
      int v24 = (int)((double)*(int *)(a1 + 496) / (*a3 * 100.0));
      if (v24 <= 2) {
        int v24 = 2;
      }
      *(_DWORD *)(a1 + 496) = v24;
      *(double *)(a1 + 504) = fmax(sqrt(v23 * 75.0) * 0.0325, 0.0325);
    }
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101860170);
  }
  int v25 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    double v26 = *(double *)(a1 + 528);
    uint64_t v27 = *(void *)(a1 + 600);
    int v28 = *(_DWORD *)(a1 + 496);
    uint64_t v29 = *(void *)(a1 + 288);
    *(_DWORD *)std::stringbuf::string_type buf = 134218752;
    double v54 = v26;
    __int16 v55 = 2048;
    uint64_t v56 = v27;
    __int16 v57 = 1024;
    int v58 = v28;
    __int16 v59 = 2048;
    uint64_t v60 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    double v34 = *(double *)(a1 + 528);
    uint64_t v35 = *(void *)(a1 + 600);
    int v36 = *(_DWORD *)(a1 + 496);
    uint64_t v37 = *(void *)(a1 + 288);
    int v45 = 134218752;
    double v46 = v34;
    __int16 v47 = 2048;
    uint64_t v48 = v35;
    __int16 v49 = 1024;
    int v50 = v36;
    __int16 v51 = 2048;
    uint64_t v52 = v37;
    LODWORD(v44) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu",  (size_t)&v45,  v44);
    int v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, BOOL)",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101860170);
  }
  int v30 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    double v31 = *a2;
    int v32 = *(unsigned __int8 *)(a1 + 512);
    *(_DWORD *)std::stringbuf::string_type buf = 134218240;
    double v54 = v31;
    __int16 v55 = 1024;
    LODWORD(v56) = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "gyroDt9, %.4f, doAccelCheck, %d", buf, 0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    double v40 = *a2;
    int v41 = *(unsigned __int8 *)(a1 + 512);
    int v45 = 134218240;
    double v46 = v40;
    __int16 v47 = 1024;
    LODWORD(v4_Block_object_dispose(va, 8) = v41;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "gyroDt9, %.4f, doAccelCheck, %d",  COERCE_DOUBLE(&v45),  18);
    __int16 v43 = (uint8_t *)v42;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, BOOL)",  "%s\n",  v42);
    if (v43 != buf) {
      free(v43);
    }
  }

  return a1;
}

void sub_1008F4CD8(_Unwind_Exception *a1)
{
  v1[65] = v2 + 16;
  sub_10046E180(v1 + 68);
  v1[35] = v2 + 16;
  sub_10046E180(v1 + 38);
  v1[26] = v2 + 16;
  sub_10046E180(v1 + 29);
  _Unwind_Resume(a1);
}

void *sub_1008F4D24(void *a1)
{
  *a1 = off_1018600A8;
  uint64_t v2 = (void *)a1[16];
  if (v2) {
    operator delete[](v2);
  }
  sub_1007C3990(a1 + 74);
  a1[65] = off_10184DB98;
  sub_10046E180(a1 + 68);
  a1[35] = off_10184DB98;
  sub_10046E180(a1 + 38);
  a1[26] = off_10184DB98;
  sub_10046E180(a1 + 29);
  return a1;
}

void sub_1008F4D98(void *a1)
{
  uint64_t v1 = sub_1008F4D24(a1);
  operator delete(v1);
}

uint64_t sub_1008F4DAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1008F4DB4(uint64_t a1)
{
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(void *)(a1 + 40) = 0x3FF0000000000000LL;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  uint64_t v2 = *(void *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_10132C280, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_10132C290, 0xCuLL);
  *(_BYTE *)(a1 + 12) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = _Q0;
  *(void *)(a1 + 184) = 0xBFF0000000000000LL;
  bzero((void *)(a1 + 352), 0xCuLL);
  bzero((void *)(a1 + 364), 0xCuLL);
  bzero((void *)(a1 + 376), 0x18uLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 448), 0x18uLL);
  bzero((void *)(a1 + 400), 0x18uLL);
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 0LL;
  *(_WORD *)(a1 + 440) = 0;
  bzero((void *)(a1 + 848), 0xCuLL);
  bzero((void *)(a1 + 864), 0x18uLL);
  *(_DWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 896) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 904) = 0;
  sub_1007C39F0((void *)(a1 + 608));
  sub_1007C39F0((void *)(a1 + 688));
  sub_1007C39F0((void *)(a1 + 768));
  sub_10074DFF8((void *)(a1 + 520));
  sub_10074DFF8((void *)(a1 + 208));
  sub_10074DFF8((void *)(a1 + 280));
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_101860170);
  }
  uint64_t v8 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 600);
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    uint64_t v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "fAccelBuffer,size,%zu", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    uint64_t v10 = *(void *)(a1 + 600);
    int v13 = 134217984;
    uint64_t v14 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "fAccelBuffer,size,%zu",  (size_t)&v13);
    __int128 v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLSensorFusion9AxisMekf::reset()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

BOOL sub_1008F5098(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0LL;
  *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = 0;
  int v2 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    *(float32x2_t *)a2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 376));
    float v3 = *(double *)(a1 + 392);
    *(float *)(a2 + _Block_object_dispose(va, 8) = v3;
  }

  return v2 != 0;
}

void sub_1008F50D0(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, void *a5)
{
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = *a5;
  ++*(_DWORD *)(a1 + 152);
  float v7 = *a4;
  float64x2_t v8 = *(float64x2_t *)(a1 + 88);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64( vsubq_f64( vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))),  v8));
  float32x2_t v54 = *(float32x2_t *)&v8.f64[0];
  float v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  float v55 = v9;
  *(float *)(a1 + 164) = v9;
  *(float32x2_t *)(a1 + 156) = v54;
  float v10 = *((float *)v8.f64 + 1);
  float64x2_t v31 = v8;
  float v33 = sqrtf( vmlas_n_f32( vmuls_lane_f32(*((float *)v8.f64 + 1), *(float32x2_t *)&v8.f64[0], 1),  *(float *)v8.f64,  *(float *)v8.f64)
        + (float)(v9 * v9));
  sub_10074DC40(a1 + 520, &v33);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    uint64_t v11 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      double v45 = (float)(v33 / 0.017453);
      __int16 v46 = 2048;
      double v47 = (float)(*(float *)v31.f64 / 0.017453);
      __int16 v48 = 2048;
      double v49 = (float)(v10 / 0.017453);
      __int16 v50 = 2048;
      double v51 = (float)(v9 / 0.017453);
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "omegaMag9, %.3f, omega, %.3f, %.3f, %.3f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      int v34 = 134218752;
      double v35 = (float)(v33 / 0.017453);
      __int16 v36 = 2048;
      double v37 = (float)(*(float *)v31.f64 / 0.017453);
      __int16 v38 = 2048;
      double v39 = (float)(v10 / 0.017453);
      __int16 v40 = 2048;
      double v41 = (float)(v9 / 0.017453);
      LODWORD(v30) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "omegaMag9, %.3f, omega, %.3f, %.3f, %.3f",  COERCE_DOUBLE(&v34),  v30,  v31.f64[0],  v31.f64[1]);
      uint64_t v22 = (uint8_t *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

  sub_1008F55E4(a1 + 16, &v54, (double *)(a1 + 480));
  float32x2_t v12 = vadd_f32(*(float32x2_t *)(a1 + 136), *(float32x2_t *)&v31.f64[0]);
  *(float32x2_t *)(a1 + 136) = v12;
  float v13 = *(float *)(a1 + 144) + v9;
  *(float *)(a1 + 144) = v13;
  ++*(_DWORD *)(a1 + 148);
  double v14 = *(double *)(a1 + 480)
  if (v14 > 0.122500002) {
    sub_1008F567C(a1, v14, (int32x2_t)0x3FBF5C2900000000LL);
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v15 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(a1 + 16);
      double v17 = *(double *)(a1 + 24);
      double v18 = *(double *)(a1 + 32);
      double v19 = *(double *)(a1 + 40);
      uint64_t v20 = *a5;
      *(_DWORD *)std::stringbuf::string_type buf = 134219008;
      double v45 = v16;
      __int16 v46 = 2048;
      double v47 = v17;
      __int16 v48 = 2048;
      double v49 = v18;
      __int16 v50 = 2048;
      double v51 = v19;
      __int16 v52 = 2048;
      uint64_t v53 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v23 = *(double *)(a1 + 16);
      double v24 = *(double *)(a1 + 24);
      double v25 = *(double *)(a1 + 32);
      double v26 = *(double *)(a1 + 40);
      uint64_t v27 = *a5;
      int v34 = 134219008;
      double v35 = v23;
      __int16 v36 = 2048;
      double v37 = v24;
      __int16 v38 = 2048;
      double v39 = v25;
      __int16 v40 = 2048;
      double v41 = v26;
      __int16 v42 = 2048;
      uint64_t v43 = v27;
      LODWORD(v30) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f",  COERCE_DOUBLE(&v34),  v30,  v31.f64[0],  v31.f64[1],  v32);
      uint64_t v29 = (uint8_t *)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v28);
      if (v29 != buf) {
        free(v29);
      }
    }
  }

double sub_1008F55E4(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v4 = *a3;
  float64x2_t v9 = vmulq_n_f64(vcvtq_f64_f32(*a2), *a3);
  double v10 = v4 * a2[1].f32[0];
  sub_1008F5C00(v8, v9.f64);
  sub_10070D224((double *)v7, v8, (double *)a1);
  double result = *(double *)v7;
  __int128 v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_1008F567C(uint64_t result, double a2, int32x2_t a3)
{
  int v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = (void *)(result + 136);
    *(float *)a3.i32 = (float)v3;
    int32x2_t v22 = a3;
    float v6 = *(float *)(result + 136) / (float)v3;
    double v26 = *(double *)(result + 480) * (double)v3;
    double v7 = v26;
    *(_DWORD *)(result + 14_Block_object_dispose(va, 8) = 0;
    double v20 = exp(v7 / -5000.0);
    float32x2_t v21 = vdiv_f32(*(float32x2_t *)(v4 + 140), (float32x2_t)vdup_lane_s32(v22, 0));
    bzero(v5, 0xCuLL);
    float32x2_t v8 = v21;
    *(float64x2_t *)(v4 + 8_Block_object_dispose(va, 8) = vmulq_n_f64(*(float64x2_t *)(v4 + 88), v20);
    *(double *)(v4 + 104) = v20 * *(double *)(v4 + 104);
    v41[0] = 0;
    v41[1] = v21.i32[1];
    _S9 = v21.i32[1];
    float32x2_t v42 = vneg_f32(v21);
    int v43 = 0;
    float v44 = v6;
    __int32 v45 = v21.i32[0];
    float v46 = -v6;
    int v47 = 0;
    float v10 = vmul_f32(v8, v8).f32[0];
    float v11 = vmuls_lane_f32(v21.f32[1], v21, 1);
    v33[0] = -(float)(v10 + v11);
    v33[1] = v6 * v21.f32[0];
    float v34 = vmuls_lane_f32(v6, v21, 1);
    float v35 = v6 * v21.f32[0];
    float v36 = -(float)((float)(v6 * v6) + v11);
    float v37 = vmuls_lane_f32(v8.f32[0], v8, 1);
    float v38 = v34;
    float v39 = v37;
    float v40 = -(float)((float)(v6 * v6) + v10);
    sub_1007C0DC4((uint64_t)v32, &v26, (uint64_t)v41, (uint64_t)v33);
    uint64_t v12 = *(void *)(v4 + 112);
    v4 += 112LL;
    sub_1007C0FC4(v32, v12, 6);
    v25[0] = &v30;
    v25[1] = &v29;
    _V1.S[1] = v21.i32[1];
    __asm { FMLA            S0, S9, V1.S[1] }

    double v23 = (float)(*(float *)v22.i32 * 0.00000021323) * 0.5;
    double v24 = 2.76135698e-10 / (7.0 / (exp((0.11 - sqrtf(_S0)) / 0.012) + 1.0) + 1.0);
    sub_1007C1058(v31, &v26, (uint64_t)v41, &v23, &v24);
    sub_1007C1298(v25, (uint64_t)v31, 6);
    double result = sub_1007C142C((uint64_t)&v27, (uint64_t *)v4, (uint64_t)v32, (uint64_t *)v25, 6LL);
    uint64_t v19 = *(void *)(v4 + 8);
    *(_OWORD *)uint64_t v19 = v27;
    *(void *)(v19 + 16) = v28;
  }

  return result;
}

double sub_1008F58CC(uint64_t a1, float32x2_t *a2, float *a3)
{
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    float v6 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v7 = a2->f32[0];
      double v8 = a2->f32[1];
      double v9 = a2[1].f32[0];
      double v10 = *a3;
      double v11 = a3[1];
      double v12 = a3[2];
      *(_DWORD *)std::stringbuf::string_type buf = 134219264;
      *(double *)&uint8_t buf[4] = v7;
      __int16 v40 = 2048;
      double v41 = v8;
      __int16 v42 = 2048;
      double v43 = v9;
      __int16 v44 = 2048;
      double v45 = v10;
      __int16 v46 = 2048;
      double v47 = v11;
      __int16 v48 = 2048;
      double v49 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v19 = a2->f32[0];
      double v20 = a2->f32[1];
      double v21 = a2[1].f32[0];
      double v22 = *a3;
      double v23 = a3[1];
      double v24 = a3[2];
      *(_DWORD *)uint64_t v28 = 134219264;
      *(double *)&v28[4] = v19;
      __int16 v29 = 2048;
      double v30 = v20;
      __int16 v31 = 2048;
      double v32 = v21;
      __int16 v33 = 2048;
      double v34 = v22;
      __int16 v35 = 2048;
      double v36 = v23;
      __int16 v37 = 2048;
      double v38 = v24;
      LODWORD(v27) = 62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f",  COERCE_DOUBLE(v28),  v27);
      double v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }
  }

  if (*(_BYTE *)(a1 + 12))
  {
    uint64_t v13 = 0LL;
    double result = *(double *)a3;
    *(void *)std::stringbuf::string_type buf = *(void *)a3;
    *(float *)&uint8_t buf[8] = a3[2];
    LODWORD(result) = 897988541;
    do
    {
      float v15 = *(float *)&buf[v13];
      if (v15 < 0.000001) {
        float v15 = 0.000001;
      }
      *(float *)&buf[v13] = v15;
      v13 += 4LL;
    }

    while (v13 != 12);
    int v16 = *(_DWORD *)(a1 + 152);
    if (v16 >= 1)
    {
      if (v16 >= 50) {
        int v17 = 50;
      }
      else {
        int v17 = *(_DWORD *)(a1 + 152);
      }
      do
      {
        *(float32x2_t *)uint64_t v28 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        float v18 = a2[1].f32[0] - *(double *)(a1 + 104);
        *(float *)&_WORD v28[8] = v18;
        double result = sub_1007C0690(a1, (uint64_t)v28, (uint64_t *)buf);
        --v17;
      }

      while (v17);
    }

    *(_DWORD *)(a1 + 152) = 0;
  }

  else
  {
    *(float64x2_t *)(a1 + 8_Block_object_dispose(va, 8) = vcvtq_f64_f32(*a2);
    double result = a2[1].f32[0];
    *(double *)(a1 + 104) = result;
    *(_BYTE *)(a1 + 12) = 1;
  }

  return result;
}

void sub_1008F5C00(double *a1, double *a2)
{
  double v4 = *a2;
  double v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    __double2 v13 = __sincos_stret(v5 * 0.5);
    double cosval = v13.__cosval;
    *a1 = v4 * (v13.__sinval / v5);
    a1[1] = v13.__sinval / v5 * a2[1];
    double v11 = v13.__sinval / v5 * a2[2];
  }

  else
  {
    *a1 = v4 * 0.5;
    double v6 = a2[1] * 0.5;
    a1[1] = v6;
    double v7 = a2[2] * 0.5;
    double v8 = v5 * v5 * 0.125;
    double v9 = 1.0 - v8;
    double v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    double v11 = v7 / v10;
    double cosval = v9 / v10;
  }

  a1[2] = v11;
  a1[3] = cosval;
}

double sub_1008F5CD4(double *a1)
{
  double v2 = a1[5];
  double v3 = a1[4] + a1[4];
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = v2 * (v5 + v5) - v4 * v3;
  double v7 = -(v2 * (v4 + v4)) - v5 * v3;
  double v8 = -1.0;
  double v9 = v4 * (v4 + v4) + -1.0 + v5 * (v5 + v5);
  uint64_t v19 = 0x3F8000003F800000LL;
  v17.i64[0] = 0LL;
  v17.i64[1] = 0x3F80000000000000LL;
  *(float *)&double v3 = v20[0];
  *(float *)&double v2 = v20[1];
  *(float *)&double v4 = v20[2];
  *(float *)&double v5 = v6;
  float v10 = v7;
  *(float *)&double v6 = v9;
  if (sub_100833764( (float *)&v19,  &v17,  (uint64_t)v18,  *(float *)&v3,  *(float *)&v2,  *(float *)&v4,  *(float *)&v5,  v10,  *(float *)&v6,  v9,  v7,  v11,  v12,  v13,  v14,  v15,  0x3F800000uLL,  0.0))
  {
    return sub_1008348C4(v17.f32);
  }

  return v8;
}

double sub_1008F5DCC(double *a1, double *a2, double *a3)
{
  double v4 = a1[2];
  double v3 = a1[3];
  double v5 = v3 + v3;
  double v6 = a1[1];
  double v7 = *a1 + *a1;
  double v8 = v6 + v6;
  double v9 = v3 * (v3 + v3);
  double v10 = (v6 + v6) * v6 + -1.0;
  double v11 = (v4 + v4) * v4 + -1.0;
  double v12 = v7 * v6;
  double v13 = v7 * v4;
  double v14 = v3 * v7;
  double v15 = v8 * v4;
  double v16 = v3 * v8;
  double v17 = v5 * v4;
  *a3 = (v12 + v17) * a2[1] + (v9 + (*a1 + *a1) * *a1 + -1.0) * *a2 + (v13 - v16) * a2[2];
  a3[1] = (v9 + v10) * a2[1] + (v12 - v17) * *a2 + (v14 + v15) * a2[2];
  double result = (v15 - v14) * a2[1] + (v13 + v16) * *a2 + (v9 + v11) * a2[2];
  a3[2] = result;
  return result;
}

void sub_1008F5E80(uint64_t a1, double *a2, double *a3, double *a4, void *a5)
{
  v10.f64[0] = *a2;
  float v11 = *a2;
  *(float *)(a1 + 352) = v11;
  double v12 = *a3;
  float v13 = *a3;
  *(float *)(a1 + 356) = v13;
  double v14 = *a4;
  float v15 = *a4;
  *(float *)(a1 + 360) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_10070D13C(a1 + 16, a2, a3, a4);
    *(void *)(a1 + 176) = *a5;
    float v16 = *a2;
    *(float *)(a1 + 84_Block_object_dispose(va, 8) = v16;
    float v17 = *a3;
    *(float *)(a1 + 852) = v17;
    float v18 = *a4;
    *(float *)(a1 + 856) = v18;
    *(_DWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0;
    sub_1007C0D6C((double *)(a1 + 864), (double *)(a1 + 16));
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
    return;
  }

  v10.f64[1] = v12;
  float32x2_t v19 = vcvt_f32_f64( vmlaq_f64( vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 848)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)),  (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL),  v10));
  *(float32x2_t *)(a1 + 84_Block_object_dispose(va, 8) = v19;
  float v20 = *(float *)(a1 + 856) * 0.1 + v14 * 0.9;
  *(float *)(a1 + 856) = v20;
  *(double *)std::stringbuf::string_type buf = v19.f32[0];
  *(double *)int v153 = v19.f32[1];
  double v149 = v20;
  sub_1007C3A68(a1 + 608, (double *)buf);
  sub_1007C3A68(a1 + 688, (double *)v153);
  sub_1007C3A68(a1 + 768, &v149);
  *(void *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148)) {
    return;
  }
  double v21 = *(double *)a5;
  double v22 = *(double *)(a1 + 168);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v23 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v24 = *a2;
      double v25 = *a3;
      double v26 = *a4;
      double v27 = *(double *)a5;
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      *(double *)&uint8_t buf[4] = v24;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      double v166 = v26;
      __int16 v167 = 2048;
      double v168 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v95 = *a2;
      double v96 = *a3;
      double v97 = *a4;
      double v98 = *(double *)a5;
      *(_DWORD *)int v153 = 134218752;
      *(double *)&v153[4] = v95;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v96;
      *(_WORD *)&v153[22] = 2048;
      double v154 = v97;
      __int16 v155 = 2048;
      double v156 = v98;
      LODWORD(v13_Block_object_dispose(va, 8) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf",  COERCE_DOUBLE(v153),  v138,  v139,  v140);
      int v100 = (char *)v99;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, cons t CFTimeInterval &)",  "%s\n",  v99);
      if (v100 != buf) {
        free(v100);
      }
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    uint64_t v28 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v29 = *(float *)(a1 + 156);
      double v30 = *(float *)(a1 + 160);
      double v31 = *(float *)(a1 + 164);
      unint64_t v32 = *(void *)(a1 + 584);
      if (v32) {
        float v33 = *(float *)(a1 + 536) / (float)v32;
      }
      else {
        float v33 = 0.0;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      *(double *)&uint8_t buf[4] = v29;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2048;
      double v166 = v31;
      __int16 v167 = 2048;
      double v168 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "[RotationRate9] %.3f, %.3f, %.3f, %.3f",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v101 = *(float *)(a1 + 156);
      double v102 = *(float *)(a1 + 160);
      double v103 = *(float *)(a1 + 164);
      unint64_t v104 = *(void *)(a1 + 584);
      if (v104) {
        float v105 = *(float *)(a1 + 536) / (float)v104;
      }
      else {
        float v105 = 0.0;
      }
      *(_DWORD *)int v153 = 134218752;
      *(double *)&v153[4] = v101;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v102;
      *(_WORD *)&v153[22] = 2048;
      double v154 = v103;
      __int16 v155 = 2048;
      double v156 = v105;
      LODWORD(v13_Block_object_dispose(va, 8) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[RotationRate9] %.3f, %.3f, %.3f, %.3f",  COERCE_DOUBLE(v153),  v138,  v139,  v140);
      uint64_t v116 = (char *)v115;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, cons t CFTimeInterval &)",  "%s\n",  v115);
      if (v116 != buf) {
        free(v116);
      }
    }
  }

  double v35 = *a3;
  *(double *)&__int128 v163 = *a2;
  double v34 = *(double *)&v163;
  *((double *)&v163 + 1) = v35;
  double v164 = *a4;
  double v36 = v164;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  float v147 = *(float *)(a1 + 140);
  float v148 = *(float *)&v22;
  LODWORD(v21) = *(_DWORD *)(a1 + 144);
  int v37 = *(_DWORD *)(a1 + 148);
  float v146 = *(float *)&v21;
  sub_1008F567C(a1, v21, *(int32x2_t *)&v22);
  double v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
  double v39 = fabs(v38 + -1.0) / v38;
  if (v39 > 0.1) {
    return;
  }
  if (!*(_BYTE *)(a1 + 512) || *(_DWORD *)(a1 + 904)) {
    goto LABEL_22;
  }
  float v64 = fabsf(*(float *)(a1 + 156));
  if (v64 > 10.0) {
    goto LABEL_82;
  }
  float v65 = fabsf(*(float *)(a1 + 160));
  if (v65 > 10.0) {
    goto LABEL_82;
  }
  float v66 = fabsf(*(float *)(a1 + 164));
  if (v66 > 10.0) {
    goto LABEL_82;
  }
  unint64_t v67 = *(void *)(a1 + 584);
  if (v67)
  {
  }

  if (v64 > 3.14159265
    || v65 > 3.14159265
    || v66 > 3.14159265
    || (!v67 ? (float v68 = 0.0) : (float v68 = *(float *)(a1 + 536) / (float)v67), v68 > 3.14159265))
  {
    if (v67 < 2
      || (float v69 = (float)((float)v67 * *(float *)(a1 + 540)) - (float)(*(float *)(a1 + 536) * *(float *)(a1 + 536)),
          v69 < 0.0)
      || (float)(v69 / (float)((v67 - 1) * v67)) < 1.25)
    {
      sub_1007C0D6C((double *)(a1 + 864), (double *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 472))
      {
        *(_DWORD *)(a1 + 88_Block_object_dispose(va, 8) = 0;
        goto LABEL_28;
      }

      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      __int16 v70 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        *(_WORD *)int v153 = 0;
        LODWORD(v13_Block_object_dispose(va, 8) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "rotating and going through.",  v153,  *(void *)&v138);
        __int16 v72 = (char *)v71;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, co nst CFTimeInterval &)",  "%s\n",  v71);
        if (v72 != buf) {
          free(v72);
        }
      }

void sub_1008F7B2C(uint64_t a1, double *a2, double a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  double v8 = *(double *)(a1 + 40);
  double v9 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 16);
  double v11 = *(double *)(a1 + 24);
  double v12 = v8 * (v11 + v11) - v10 * v9;
  double v13 = -(v8 * (v10 + v10)) - v11 * v9;
  double v14 = v10 * (v10 + v10) + -1.0 + v11 * (v11 + v11);
  *(float *)&double v9 = v13;
  *(float *)&double v8 = v14;
  v72[0] = 0;
  v72[1] = LODWORD(v8);
  *(float *)&v72[2] = -*(float *)&v9;
  *(float *)&double v10 = v12;
  *(float *)&v72[3] = -*(float *)&v8;
  v72[4] = 0;
  v72[5] = LODWORD(v10);
  v72[6] = LODWORD(v9);
  *(float *)&v72[7] = -*(float *)&v10;
  v72[8] = 0;
  do
  {
    for (uint64_t i = 0LL; i != 9; i += 3LL)
      *(_DWORD *)&v70[v6 * 4 + i * 4] = v72[v6 + i];
    ++v7;
    ++v6;
  }

  while (v7 != 3);
  bzero(&v71, 0x24uLL);
  float v16 = a3;
  *(float *)float v69 = v16;
  *(float *)&v69[1] = v16;
  *(float *)&v69[2] = v16;
  float v17 = *a2 - v12;
  float v18 = a2[1] - v13;
  *(float *)float v68 = v17;
  *(float *)&v68[1] = v18;
  float v19 = a2[2] - v14;
  *(float *)&v68[2] = v19;
  sub_1007C07AC(&v65, (uint64_t *)(a1 + 112), (uint64_t)v70, (uint64_t)v69, (uint64_t)v68, 6, 3, (uint64_t)v64);
  double v20 = v13 * v66 + v65 * v12 + v67 * v14;
  double v21 = v65 - v20 * v12;
  double v22 = v66 - v20 * v13;
  double v65 = v21;
  double v66 = v22;
  double v23 = v67 - v20 * v14;
  double v67 = v23;
  sub_1008F7EC4(a1, &v65);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v24 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *(void *)(a1 + 88);
      uint64_t v26 = *(void *)(a1 + 96);
      uint64_t v27 = *(void *)(a1 + 104);
      uint64_t v28 = *(void *)(a1 + 176);
      *(_DWORD *)std::stringbuf::string_type buf = 134219520;
      double v51 = v21;
      __int16 v52 = 2048;
      double v53 = v22;
      __int16 v54 = 2048;
      double v55 = v23;
      __int16 v56 = 2048;
      uint64_t v57 = v25;
      __int16 v58 = 2048;
      uint64_t v59 = v26;
      __int16 v60 = 2048;
      uint64_t v61 = v27;
      __int16 v62 = 2048;
      uint64_t v63 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f",  buf,  0x48u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      uint64_t v29 = *(void *)(a1 + 88);
      uint64_t v30 = *(void *)(a1 + 96);
      uint64_t v31 = *(void *)(a1 + 104);
      uint64_t v32 = *(void *)(a1 + 176);
      int v36 = 134219520;
      double v37 = v21;
      __int16 v38 = 2048;
      double v39 = v22;
      __int16 v40 = 2048;
      double v41 = v23;
      __int16 v42 = 2048;
      uint64_t v43 = v29;
      __int16 v44 = 2048;
      uint64_t v45 = v30;
      __int16 v46 = 2048;
      uint64_t v47 = v31;
      __int16 v48 = 2048;
      uint64_t v49 = v32;
      LODWORD(v35) = 72;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f",  COERCE_DOUBLE(&v36),  v35);
      double v34 = (uint8_t *)v33;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSensorFusion9AxisMekf::doAccelerometerMeasurementUpdate(double *, double)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }
  }

double sub_1008F7EC4(uint64_t a1, double *a2)
{
  uint64_t v4 = 0LL;
  __int128 v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = a1 + 88;
  do
  {
    double result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * _Block_object_dispose(va, 8) = result;
    ++v4;
  }

  while (v4 != 3);
  return result;
}

void sub_1008F7F34(uint64_t a1)
{
  *(_WORD *)(a1 + 440) = 256;
  *(_DWORD *)(a1 + 436) = 0;
}

BOOL sub_1008F7F6C(uint64_t a1, uint64_t *a2, _BYTE *a3, _BYTE *a4, double *a5)
{
  *(_BYTE *)(a1 + 9) = 0;
  int v10 = *((_DWORD *)a2 + 9);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v11 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *a5;
      int v13 = *a3;
      int v14 = *a4;
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      double v168 = v12;
      __int16 v169 = 1024;
      *(_DWORD *)double v170 = v10;
      *(_WORD *)&v170[4] = 1024;
      *(_DWORD *)&v170[6] = v13;
      LOWORD(v171) = 1024;
      *(_DWORD *)((char *)&v171 + 2) = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d",  buf,  0x1Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v104 = *a5;
      int v105 = *a3;
      int v106 = *a4;
      *(_DWORD *)double v156 = 134218752;
      *(double *)&v156[4] = v104;
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = v10;
      *(_WORD *)&v156[18] = 1024;
      *(_DWORD *)&v156[20] = v105;
      LOWORD(v157) = 1024;
      *(_DWORD *)((char *)&v157 + 2) = v106;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d",  COERCE_DOUBLE(v156),  30,  LODWORD(v151),  LODWORD(v152[0]));
      float v108 = (uint8_t *)v107;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, c onst CFTimeInterval &)",  "%s\n",  v107);
      if (v108 != buf) {
        free(v108);
      }
    }
  }

  if (v10 <= 2)
  {
    if (v10 <= 0)
    {
      BOOL v15 = 0LL;
      *(void *)(a1 + 184) = 0xBFF0000000000000LL;
      *(_BYTE *)(a1 + 441) = 1;
      *(_BYTE *)(a1 + 11) = 0;
      return v15;
    }

    return 0LL;
  }

  if (*(double *)(a1 + 176) < 0.0)
  {
    if (!*(_BYTE *)(a1 + 472)) {
      return 0LL;
    }
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    float v16 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v17 = *(double *)(a1 + 176);
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      double v168 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] fLastAccelTime,%f", buf, 0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    uint64_t v97 = qword_101934578;
    uint64_t v109 = *(void *)(a1 + 176);
    *(_DWORD *)double v156 = 134217984;
    *(void *)&v156[4] = v109;
    LODWORD(v150) = 12;
    double v149 = v156;
    double v98 = "[CompassIntoKF] fLastAccelTime,%f";
    goto LABEL_176;
  }

  if (*a3)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      float v18 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "[CompassIntoKF] magneticFieldAdjusted!",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_1018601B0);
        }
        *(_WORD *)double v156 = 0;
        LODWORD(v150) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[CompassIntoKF] magneticFieldAdjusted!",  v156,  *(void *)&v150);
        uint64_t v113 = (uint8_t *)v112;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v112);
        if (v113 != buf) {
          free(v113);
        }
      }
    }

    BOOL v15 = 0LL;
    *(_WORD *)(a1 + 440) = 1;
    *(_DWORD *)(a1 + 432) = 0;
    return v15;
  }

  double v20 = *(double *)(a1 + 16);
  double v21 = *(double *)(a1 + 24);
  double v22 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v23 = *(double *)(a1 + 40);
  double v24 = v23 * (v21 + v21) - v20 * v22;
  double v25 = -(v23 * (v20 + v20)) - v21 * v22;
  v166[0] = v24;
  v166[1] = v25;
  double v26 = v20 * (v20 + v20) + -1.0 + v21 * (v21 + v21);
  v166[2] = v26;
  float v27 = v25 * *(float *)(a1 + 160) + *(float *)(a1 + 156) * v24 + *(float *)(a1 + 164) * v26;
  *(float *)&double v20 = *(float *)(a1 + 436) + (float)(v27 * 57.296) * *(double *)(a1 + 488);
  *(_DWORD *)(a1 + 436) = LODWORD(v20);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    uint64_t v28 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      double v29 = *(float *)(a1 + 436);
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      double v168 = v27;
      __int16 v169 = 2048;
      *(double *)double v170 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "rotAroundGrav, %.3f, sum, %.3f", buf, 0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      double v114 = *(float *)(a1 + 436);
      *(_DWORD *)double v156 = 134218240;
      *(double *)&v156[4] = v27;
      *(_WORD *)&v156[12] = 2048;
      *(double *)&v156[14] = v114;
      LODWORD(v150) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "rotAroundGrav, %.3f, sum, %.3f",  COERCE_DOUBLE(v156),  v150);
      uint64_t v116 = (uint8_t *)v115;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, c onst CFTimeInterval &)",  "%s\n",  v115);
      if (v116 != buf) {
        free(v116);
      }
    }
  }

  unint64_t v30 = *(void *)(a1 + 584);
  float v31 = 0.0;
  if (v30)
  {
    float v32 = *(float *)(a1 + 536);
    float v33 = v32 / (float)v30;
    if (v30 != 1)
    {
      float v34 = (float)((float)v30 * *(float *)(a1 + 540)) - (float)(v32 * v32);
      if (v34 >= 0.0) {
        float v31 = v34 / (float)((v30 - 1) * v30);
      }
    }
  }

  else
  {
    float v33 = 0.0;
  }

  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v35 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218240;
      double v168 = v33;
      __int16 v169 = 2048;
      *(double *)double v170 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      *(_DWORD *)double v156 = 134218240;
      *(double *)&v156[4] = v33;
      *(_WORD *)&v156[12] = 2048;
      *(double *)&v156[14] = v31;
      LODWORD(v150) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f",  COERCE_DOUBLE(v156),  v150);
      uint64_t v118 = (uint8_t *)v117;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, c onst CFTimeInterval &)",  "%s\n",  v117);
      if (v118 != buf) {
        free(v118);
      }
    }
  }

  *(_DWORD *)(a1 + 364) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 1);
  *(_DWORD *)(a1 + 372) = *((_DWORD *)a2 + 2);
  if (!*a4 && *(_BYTE *)(a1 + 440))
  {
    BOOL v15 = 0LL;
    sub_10074DC40(a1 + 208, (float *)a2 + 11);
    sub_10074DC40(a1 + 280, (float *)a2 + 12);
    unint64_t v60 = *(void *)(a1 + 272);
    if (v60 < *(void *)(a1 + 216)) {
      return 0LL;
    }
    float v61 = 0.0;
    float v62 = 0.0;
    if (v60) {
      float v62 = *(float *)(a1 + 224) / (float)v60;
    }
    unint64_t v63 = *(void *)(a1 + 344);
    if (v63) {
      float v61 = *(float *)(a1 + 296) / (float)v63;
    }
    float v64 = *(float *)(a1 + 424);
    float v65 = 0.0;
    float v66 = 0.0;
    if (v60 >= 2)
    {
      float v67 = (float)((float)v60 * *(float *)(a1 + 228)) - (float)(*(float *)(a1 + 224) * *(float *)(a1 + 224));
      if (v67 >= 0.0) {
        float v66 = v67 / (float)((v60 - 1) * v60);
      }
    }

    float v68 = vabds_f32(v62, v64);
    if (v63 >= 2)
    {
      float v69 = (float)((float)v63 * *(float *)(a1 + 300)) - (float)(*(float *)(a1 + 296) * *(float *)(a1 + 296));
      uint64_t v70 = (v63 - 1) * v63;
      if (v69 >= 0.0) {
        float v65 = v69 / (float)(unint64_t)v70;
      }
      else {
        float v65 = 0.0;
      }
    }

    float v71 = vabds_f32(v61, *(float *)(a1 + 428));
    float v72 = v68 / v64;
    if (*(_BYTE *)(a1 + 472))
    {
      *(float *)double v152 = v71;
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      double v73 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134218752;
        double v168 = v72;
        __int16 v169 = 2048;
        *(double *)double v170 = *(float *)v152;
        *(_WORD *)&v170[8] = 2048;
        double v171 = v66;
        __int16 v172 = 2048;
        *(double *)__int16 v173 = v65;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "FieldDiff, %.3f, %.3f, %.3f, %.3f",  buf,  0x2Au);
      }

      BOOL v74 = sub_1002921D0(115, 2);
      float v71 = *(float *)v152;
      if (v74)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        *(_DWORD *)double v156 = 134218752;
        *(double *)&v156[4] = v72;
        *(_WORD *)&v156[12] = 2048;
        *(double *)&v156[14] = *(float *)v152;
        *(_WORD *)&v156[22] = 2048;
        double v157 = v66;
        __int16 v158 = 2048;
        *(double *)__int16 v159 = v65;
        LODWORD(v150) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "FieldDiff, %.3f, %.3f, %.3f, %.3f",  COERCE_DOUBLE(v156),  v150,  v151,  v152[0]);
        float v146 = (uint8_t *)v145;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v145);
        if (v146 != buf) {
          free(v146);
        }
        float v71 = *(float *)v152;
      }
    }

    if (v72 < 0.07 && v71 < 4.0 && v66 < 2.25 && v65 < 4.0)
    {
      *(_DWORD *)(a1 + 432) = 0;
    }

    else
    {
      int v78 = *(_DWORD *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = v78 + 1;
      if (v78 < 2)
      {
        sub_10074DFF8((void *)(a1 + 208));
        sub_10074DFF8((void *)(a1 + 280));
        if (!*(_BYTE *)(a1 + 472)) {
          return 0LL;
        }
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        int v99 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          int v100 = *(_DWORD *)(a1 + 432);
          *(_DWORD *)std::stringbuf::string_type buf = 67109120;
          LODWORD(v16_Block_object_dispose(va, 8) = v100;
          _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEBUG,  "Checking again for magField. checkcount, %d",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        uint64_t v97 = qword_101934568;
        int v101 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)double v156 = 67109120;
        *(_DWORD *)&v156[4] = v101;
        LODWORD(v150) = 8;
        double v149 = v156;
        double v98 = "Checking again for magField. checkcount, %d";
LABEL_176:
        uint64_t v103 = 2LL;
LABEL_177:
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v97,  v103,  v98,  v149,  *(void *)&v150);
        double v111 = (uint8_t *)v110;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v110);
        if (v111 != buf) {
          free(v111);
        }
        return 0LL;
      }

      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        double v79 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Aborted yawUpdate.", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_101860170);
          }
          *(_WORD *)double v156 = 0;
          LODWORD(v150) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Aborted yawUpdate.",  v156,  *(void *)&v150);
          float v148 = (uint8_t *)v147;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v147);
          if (v148 != buf) {
            free(v148);
          }
        }
      }

      sub_1008F7F34(a1);
    }
  }

  int v36 = (float32x2_t *)(a1 + 364);
  if (*(_BYTE *)(a1 + 441))
  {
    if (!*a4)
    {
      *(void *)(a1 + 424) = *(uint64_t *)((char *)a2 + 44);
      *(float64x2_t *)double v160 = vcvtq_f64_f32(*v36);
      *(double *)&v160[16] = *(float *)(a1 + 372);
      sub_10070D208((uint64_t)v156, a1 + 16);
      sub_1008F5DCC((double *)v156, (double *)v160, (double *)(a1 + 400));
      double v81 = *(double *)(a1 + 400);
      double v80 = *(double *)(a1 + 408);
      double v82 = *(double *)(a1 + 416);
      double v83 = sqrt(v80 * v80 + v81 * v81 + v82 * v82);
      if (v83 <= 0.0)
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        double v95 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "Warning: Compass outputs field magnitude 0.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_101860170);
          }
          *(_WORD *)double v164 = 0;
          LODWORD(v150) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  1LL,  "Warning: Compass outputs field magnitude 0.",  v164,  *(void *)&v150);
          int v133 = (uint8_t *)v132;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v132);
          if (v133 != buf) {
            free(v133);
          }
        }

        *(void *)(a1 + 184) = 0xBFF0000000000000LL;
      }

      else
      {
        *(double *)(a1 + 44_Block_object_dispose(va, 8) = v81 / v83;
        *(double *)(a1 + 456) = v80 / v83;
        *(double *)(a1 + 464) = v82 / v83;
        if (*(_BYTE *)(a1 + 472))
        {
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_1018601B0);
          }
          double v84 = (os_log_s *)qword_101934578;
          if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
          {
            double v85 = *(double *)(a1 + 448);
            uint64_t v86 = *(void *)(a1 + 456);
            double v87 = *(double *)(a1 + 464);
            *(_DWORD *)std::stringbuf::string_type buf = 134218496;
            double v168 = v85;
            __int16 v169 = 2048;
            *(void *)double v170 = v86;
            *(_WORD *)&v170[8] = 2048;
            double v171 = v87;
            _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "[!!!CompassInertialReference] x,%f,y,%f,z,%f",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934570 != -1) {
              dispatch_once(&qword_101934570, &stru_1018601B0);
            }
            uint64_t v134 = *(void *)(a1 + 448);
            uint64_t v135 = *(void *)(a1 + 456);
            uint64_t v136 = *(void *)(a1 + 464);
            *(_DWORD *)double v164 = 134218496;
            *(void *)&v164[4] = v134;
            *(_WORD *)&v164[12] = 2048;
            *(void *)&v164[14] = v135;
            *(_WORD *)&v164[22] = 2048;
            uint64_t v165 = v136;
            LODWORD(v150) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[!!!CompassInertialReference] x,%f,y,%f,z,%f",  COERCE_DOUBLE(v164),  v150,  v151);
            double v138 = (uint8_t *)v137;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const boo l &, const CFTimeInterval &)",  "%s\n",  v137);
            if (v138 != buf) {
              free(v138);
            }
          }
        }

        *(double *)(a1 + 184) = *a5;
        *(double *)(a1 + 200) = *a5;
      }

      return 0LL;
    }

    if (!*(_BYTE *)(a1 + 11))
    {
      float v88 = sub_10070D0E8((double *)(a1 + 16));
      v155[0] = -v88;
      float v89 = sub_10070D104((double *)(a1 + 16));
      v155[1] = -v89;
      float v90 = sub_10070D120((double *)(a1 + 16));
      v155[2] = -v90;
      sub_10070D2E0(v155);
      uint64_t v153 = *a2;
      int v154 = *((_DWORD *)a2 + 2);
      sub_10070D2A0((float *)v152 + 1, v155, (float *)&v153);
      sub_10070D2E0((float *)v152 + 1);
      sub_10070D2A0((float *)&v153, (float *)v152 + 1, v155);
      sub_10070D420((double *)v156, (float *)&v153, (float *)v152 + 1, v155);
      sub_10070D028(a1 + 16, (uint64_t *)v156);
      *(_BYTE *)(a1 + 11) = 1;
      *(double *)(a1 + 184) = *a5;
      *(_BYTE *)(a1 + 441) = 0;
      sub_10070D208((uint64_t)v164, a1 + 16);
      float64x2_t v162 = vcvtq_f64_f32(*v36);
      double v163 = *(float *)(a1 + 372);
      sub_1008F5DCC((double *)v164, v162.f64, (double *)(a1 + 376));
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      float v91 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        double v92 = *(double *)(a1 + 376);
        uint64_t v93 = *(void *)(a1 + 384);
        double v94 = *(double *)(a1 + 392);
        *(_DWORD *)std::stringbuf::string_type buf = 134218496;
        double v168 = v92;
        __int16 v169 = 2048;
        *(void *)double v170 = v93;
        *(_WORD *)&v170[8] = 2048;
        double v171 = v94;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "fCorrected, %.3f, %.3f, %.3f", buf, 0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        uint64_t v127 = *(void *)(a1 + 376);
        uint64_t v128 = *(void *)(a1 + 384);
        uint64_t v129 = *(void *)(a1 + 392);
        *(_DWORD *)double v160 = 134218496;
        *(void *)&v160[4] = v127;
        *(_WORD *)&v160[12] = 2048;
        *(void *)&v160[14] = v128;
        *(_WORD *)&v160[22] = 2048;
        uint64_t v161 = v129;
        LODWORD(v150) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "fCorrected, %.3f, %.3f, %.3f",  COERCE_DOUBLE(v160),  v150,  v151);
        uint64_t v131 = (uint8_t *)v130;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v130);
        if (v131 != buf) {
          free(v131);
        }
      }

      BOOL v15 = 1LL;
      *(_BYTE *)(a1 + 9) = 1;
      *(void *)(a1 + 456) = 0LL;
      *(void *)(a1 + 464) = 0LL;
      *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0x3FF0000000000000LL;
      *(double *)(a1 + 200) = *a5;
      return v15;
    }

    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v37 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
      {
        double v38 = *(double *)(a1 + 448);
        uint64_t v39 = *(void *)(a1 + 456);
        double v40 = *(double *)(a1 + 464);
        double v41 = *a5;
        *(_DWORD *)std::stringbuf::string_type buf = 134219008;
        double v168 = v38;
        __int16 v169 = 2048;
        *(void *)double v170 = v39;
        *(_WORD *)&v170[8] = 2048;
        double v171 = v40;
        __int16 v172 = 1024;
        *(_DWORD *)__int16 v173 = v10;
        *(_WORD *)&v173[4] = 2048;
        *(double *)&v173[6] = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf",  buf,  0x30u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_1018601B0);
        }
        uint64_t v121 = *(void *)(a1 + 448);
        uint64_t v122 = *(void *)(a1 + 456);
        double v123 = *(double *)(a1 + 464);
        double v124 = *a5;
        *(_DWORD *)double v156 = 134219008;
        *(void *)&v156[4] = v121;
        *(_WORD *)&v156[12] = 2048;
        *(void *)&v156[14] = v122;
        *(_WORD *)&v156[22] = 2048;
        double v157 = v123;
        __int16 v158 = 1024;
        *(_DWORD *)__int16 v159 = v10;
        *(_WORD *)&v159[4] = 2048;
        *(double *)&v159[6] = v124;
        LODWORD(v150) = 48;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf",  COERCE_DOUBLE(v156),  v150,  v151,  LODWORD(v152[0]),  v152[1]);
        uint64_t v126 = (uint8_t *)v125;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v125);
        if (v126 != buf) {
          free(v126);
        }
      }
    }
  }

  if (!*(_BYTE *)(a1 + 440)) {
    return 0LL;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    __int16 v42 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "UpdatingYaw!", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      *(_WORD *)double v156 = 0;
      LODWORD(v150) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "UpdatingYaw!",  v156,  *(void *)&v150);
      unsigned int v120 = (uint8_t *)v119;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, c onst CFTimeInterval &)",  "%s\n",  v119);
      if (v120 != buf) {
        free(v120);
      }
    }
  }

  BOOL v15 = 0LL;
  if (v33 <= 5.0 && v31 <= 8.0)
  {
    *(double *)(a1 + 184) = *a5;
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      uint64_t v43 = (os_log_s *)qword_101934578;
      if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
      {
        double v44 = *(float *)(a1 + 364);
        double v45 = *(float *)(a1 + 368);
        double v46 = *(float *)(a1 + 372);
        double v47 = *a5;
        *(_DWORD *)std::stringbuf::string_type buf = 134218752;
        double v168 = v44;
        __int16 v169 = 2048;
        *(double *)double v170 = v45;
        *(_WORD *)&v170[8] = 2048;
        double v171 = v46;
        __int16 v172 = 2048;
        *(double *)__int16 v173 = v47;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_1018601B0);
        }
        double v139 = *(float *)(a1 + 364);
        double v140 = *(float *)(a1 + 368);
        double v141 = *(float *)(a1 + 372);
        double v142 = *a5;
        *(_DWORD *)double v156 = 134218752;
        *(double *)&v156[4] = v139;
        *(_WORD *)&v156[12] = 2048;
        *(double *)&v156[14] = v140;
        *(_WORD *)&v156[22] = 2048;
        double v157 = v141;
        __int16 v158 = 2048;
        *(double *)__int16 v159 = v142;
        LODWORD(v150) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf",  COERCE_DOUBLE(v156),  v150,  v151,  v152[0]);
        double v144 = (uint8_t *)v143;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)",  "%s\n",  v143);
        if (v144 != buf) {
          free(v144);
        }
      }
    }

    double v48 = *(float *)(a1 + 364);
    double v49 = *(float *)(a1 + 368);
    double v50 = *(float *)(a1 + 372);
    double v51 = sqrt(v49 * v49 + v48 * v48 + v50 * v50);
    if (v51 <= 0.0)
    {
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      double v96 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_INFO,  "Warning: Hey! Compass outputs field magnitude 0.",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 0LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      uint64_t v97 = qword_101934568;
      *(_WORD *)double v156 = 0;
      LODWORD(v150) = 2;
      double v149 = v156;
      double v98 = "Warning: Hey! Compass outputs field magnitude 0.";
    }

    else
    {
      double v52 = v48 / v51;
      double v53 = v49 / v51;
      *(double *)double v156 = v52;
      *(double *)&v156[8] = v53;
      double v54 = v50 / v51;
      *(double *)&v156[16] = v54;
      int v55 = *a4;
      if (!*a4) {
        goto LABEL_80;
      }
      uint64_t v56 = 0LL;
      double v57 = -(v53 * v25 + v52 * v24 + v54 * v26);
      do
      {
        *(double *)&v156[v56 * 8] = *(double *)&v156[v56 * 8] + v57 * v166[v56];
        ++v56;
      }

      while (v56 != 3);
      double v58 = sqrt( *(double *)&v156[8] * *(double *)&v156[8] + *(double *)v156 * *(double *)v156 + *(double *)&v156[16] * *(double *)&v156[16]);
      if (v58 > 0.001)
      {
        *(double *)double v156 = *(double *)v156 / v58;
        *(double *)&v156[8] = *(double *)&v156[8] / v58;
        *(double *)&v156[16] = *(double *)&v156[16] / v58;
LABEL_80:
        float v59 = sub_1008F9BFC(a1, (double *)v156, v10, v55 != 0, 0.00000399999999);
        sub_10070D208((uint64_t)buf, a1 + 16);
        *(float64x2_t *)double v164 = vcvtq_f64_f32(*v36);
        *(double *)&v164[16] = *(float *)(a1 + 372);
        sub_1008F5DCC((double *)buf, (double *)v164, (double *)(a1 + 376));
        BOOL v15 = v59 >= 0.1;
        if (v59 < 0.1)
        {
          sub_1008F7F34(a1);
          *(_BYTE *)(a1 + 440) = 0;
        }

        return v15;
      }

      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      double v102 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_INFO,  "Warning: Hey! Compass outputs field magnitude 0.",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 0LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      uint64_t v97 = qword_101934568;
      *(_WORD *)double v164 = 0;
      LODWORD(v150) = 2;
      double v149 = v164;
      double v98 = "Warning: Hey! Compass outputs field magnitude 0.";
    }

    uint64_t v103 = 1LL;
    goto LABEL_177;
  }

  return v15;
}

float sub_1008F9BFC(uint64_t a1, double *a2, int a3, int a4, double a5)
{
  *(_BYTE *)(a1 + 9) = 1;
  sub_1008F5DCC((double *)(a1 + 16), (double *)(a1 + 448), &v116);
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  double v12 = *(double *)(a1 + 40);
  double v13 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  double v15 = *(double *)(a1 + 16);
  double v14 = *(double *)(a1 + 24);
  double v16 = v12 * (v14 + v14) - v15 * v13;
  double v17 = -(v12 * (v15 + v15));
  double v18 = v15 * (v15 + v15) + -1.0;
  double v19 = v116;
  double v20 = v117;
  *(float *)&unsigned int v21 = v116;
  *(float *)&unsigned int v22 = v117;
  double v23 = v118;
  float v24 = v118;
  v115[0] = 0;
  *(float *)&v115[1] = v24;
  *(float *)&v115[2] = -*(float *)&v22;
  *(float *)&double v69 = -*(float *)&v22;
  *((float *)&v68 + 1) = -v24;
  *(float *)&v115[3] = -v24;
  v115[4] = 0;
  v115[5] = v21;
  v115[6] = v22;
  double v70 = COERCE_DOUBLE(__PAIR64__(v22, v21));
  *((float *)&v69 + 1) = -*(float *)&v21;
  *(float *)&v115[7] = -*(float *)&v21;
  v115[8] = 0;
  do
  {
    for (uint64_t i = 0LL; i != 9; i += 3LL)
      *(_DWORD *)&v113[v10 * 4 + i * 4] = v115[v10 + i];
    ++v11;
    ++v10;
  }

  while (v11 != 3);
  double v26 = v17 - v14 * v13;
  double v27 = v18 + v14 * (v14 + v14);
  bzero(&v114, 0x24uLL);
  float v28 = a5;
  *(float *)int v112 = v28;
  *(float *)&v112[1] = v28;
  *(float *)&v112[2] = v28;
  float v29 = *a2 - v19;
  float v30 = a2[1] - v20;
  *(float *)double v111 = v29;
  *(float *)&v111[1] = v30;
  float v31 = a2[2] - v23;
  *(float *)&v111[2] = v31;
  sub_1007C07AC(&v108, (uint64_t *)(a1 + 112), (uint64_t)v113, (uint64_t)v112, (uint64_t)v111, 6, 3, (uint64_t)v107);
  double v32 = v26 * v109 + v108 * v16 + v110 * v27;
  double v33 = v26 * v32;
  double v34 = v16 * v32;
  double v108 = v34;
  double v109 = v33;
  double v35 = v27 * v32;
  double v36 = v33;
  double v110 = v35;
  float v37 = sqrt(v33 * v33 + v34 * v34 + v35 * v35) * 57.2957802;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v38 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = *(void *)(a1 + 184);
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      double v90 = v19;
      __int16 v91 = 2048;
      double v92 = v20;
      __int16 v93 = 2048;
      double v94 = v23;
      __int16 v95 = 2048;
      *(void *)double v96 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "[ExpectedCompass] %f,%f,%f,%f", buf, 0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      uint64_t v52 = *(void *)(a1 + 184);
      int v71 = 134218752;
      double v72 = v19;
      __int16 v73 = 2048;
      double v74 = v20;
      __int16 v75 = 2048;
      double v76 = v23;
      __int16 v77 = 2048;
      *(void *)int v78 = v52;
      LODWORD(v6_Block_object_dispose(va, 8) = 42;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[ExpectedCompass] %f,%f,%f,%f",  COERCE_DOUBLE(&v71),  v68,  v69,  v70);
      double v54 = (uint8_t *)v53;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)",  "%s\n",  v53);
      if (v54 != buf) {
        free(v54);
      }
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v40 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v41 = *a2;
      double v42 = a2[1];
      double v43 = a2[2];
      uint64_t v44 = *(void *)(a1 + 184);
      *(_DWORD *)std::stringbuf::string_type buf = 134219008;
      double v90 = v41;
      __int16 v91 = 2048;
      double v92 = v42;
      __int16 v93 = 2048;
      double v94 = v43;
      __int16 v95 = 1024;
      *(_DWORD *)double v96 = a3;
      *(_WORD *)&v96[4] = 2048;
      *(void *)&v96[6] = v44;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "[TrueCompass] %f,%f,%f,%d,%f", buf, 0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v55 = *a2;
      double v56 = a2[1];
      double v57 = a2[2];
      uint64_t v58 = *(void *)(a1 + 184);
      int v71 = 134219008;
      double v72 = v55;
      __int16 v73 = 2048;
      double v74 = v56;
      __int16 v75 = 2048;
      double v76 = v57;
      __int16 v77 = 1024;
      *(_DWORD *)int v78 = a3;
      *(_WORD *)&v78[4] = 2048;
      *(void *)&v78[6] = v58;
      LODWORD(v6_Block_object_dispose(va, 8) = 48;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[TrueCompass] %f,%f,%f,%d,%f",  COERCE_DOUBLE(&v71),  v68,  v69,  LODWORD(v70));
      unint64_t v60 = (uint8_t *)v59;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)",  "%s\n",  v59);
      if (v60 != buf) {
        free(v60);
      }
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v45 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v46 = *(void *)(a1 + 184);
      *(_DWORD *)std::stringbuf::string_type buf = 134220288;
      double v90 = 0.0;
      __int16 v91 = 2048;
      double v92 = v24;
      __int16 v93 = 2048;
      double v94 = *(float *)&v69;
      __int16 v95 = 2048;
      *(double *)double v96 = *((float *)&v68 + 1);
      *(_WORD *)&v96[8] = 2048;
      *(void *)&v96[10] = 0LL;
      __int16 v97 = 2048;
      double v98 = *(float *)&v70;
      __int16 v99 = 2048;
      double v100 = *((float *)&v70 + 1);
      __int16 v101 = 2048;
      double v102 = *((float *)&v69 + 1);
      __int16 v103 = 2048;
      uint64_t v104 = 0LL;
      __int16 v105 = 2048;
      uint64_t v106 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f",  buf,  0x66u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      uint64_t v61 = *(void *)(a1 + 184);
      int v71 = 134220288;
      double v72 = 0.0;
      __int16 v73 = 2048;
      double v74 = v24;
      __int16 v75 = 2048;
      double v76 = *(float *)&v69;
      __int16 v77 = 2048;
      *(double *)int v78 = *((float *)&v68 + 1);
      *(_WORD *)&v78[8] = 2048;
      *(void *)&v78[10] = 0LL;
      __int16 v79 = 2048;
      double v80 = *(float *)&v70;
      __int16 v81 = 2048;
      double v82 = *((float *)&v70 + 1);
      __int16 v83 = 2048;
      double v84 = *((float *)&v69 + 1);
      __int16 v85 = 2048;
      uint64_t v86 = 0LL;
      __int16 v87 = 2048;
      uint64_t v88 = v61;
      LODWORD(v6_Block_object_dispose(va, 8) = 102;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f",  COERCE_DOUBLE(&v71),  v68,  v69,  v70);
      unint64_t v63 = (uint8_t *)v62;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)",  "%s\n",  v62);
      if (v63 != buf) {
        free(v63);
      }
    }

    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_1018601B0);
    }
    double v47 = (os_log_s *)qword_101934578;
    if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
    {
      double v48 = fabsf(*(float *)(a1 + 436));
      double v49 = *(double *)(a1 + 184);
      *(_DWORD *)std::stringbuf::string_type buf = 134219264;
      double v90 = v34;
      __int16 v91 = 2048;
      double v92 = v36;
      __int16 v93 = 2048;
      double v94 = v35;
      __int16 v95 = 2048;
      *(double *)double v96 = v37;
      *(_WORD *)&v96[8] = 2048;
      *(double *)&v96[10] = v48;
      __int16 v97 = 2048;
      double v98 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018601B0);
      }
      double v64 = fabsf(*(float *)(a1 + 436));
      double v65 = *(double *)(a1 + 184);
      int v71 = 134219264;
      double v72 = v34;
      __int16 v73 = 2048;
      double v74 = v36;
      __int16 v75 = 2048;
      double v76 = v35;
      __int16 v77 = 2048;
      *(double *)int v78 = v37;
      *(_WORD *)&v78[8] = 2048;
      *(double *)&v78[10] = v64;
      __int16 v79 = 2048;
      double v80 = v65;
      LODWORD(v6_Block_object_dispose(va, 8) = 62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f",  COERCE_DOUBLE(&v71),  v68,  v69,  v70);
      float v67 = (uint8_t *)v66;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)",  "%s\n",  v66);
      if (v67 != buf) {
        free(v67);
      }
    }
  }

  if (a4 && v37 > 3.0)
  {
    double v50 = (float)(sqrtf(v37) / v37);
    double v108 = v34 * v50;
    double v109 = v36 * v50;
    double v110 = v35 * v50;
  }

  sub_1008F7EC4(a1, &v108);
  return v37;
}

BOOL sub_1008FA5A0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(void *)a2 = 0LL;
    float v10 = 0.0;
  }

  else
  {
    double v3 = *(double *)(a1 + 40);
    double v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    double v5 = *(double *)(a1 + 16);
    double v6 = *(double *)(a1 + 24);
    double v7 = v3 * (v6 + v6) - v5 * v4;
    double v8 = -(v3 * (v5 + v5)) - v6 * v4;
    double v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&double v5 = *(float *)(a1 + 352) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&double v8 = *(float *)(a1 + 356) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    float v10 = *(float *)(a1 + 360) - v9;
  }

  BOOL result = v2 > 0.0;
  *(float *)(a2 + _Block_object_dispose(va, 8) = v10;
  return result;
}

uint64_t sub_1008FA630(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

void sub_1008FA638(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1008FA664(id a1)
{
  qword_101934578 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_1008FA690()
{
  return (sub_1004F97F4() & 3) != 0;
}

void sub_1008FA6AC()
{
  if ((sub_1004F97F4() & 2) != 0)
  {
    qword_1019A1850 = sub_100358938(0);
  }

  else if ((sub_1004F97F4() & 3) != 0)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018607B0);
    }
    unsigned __int8 v0 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "CLMotionCoprocessorInterface supported but not created.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018607B0);
      }
      v2[0] = 0;
      uint64_t v1 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "CLMotionCoprocessorInterface supported but not created.",  v2,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "static void CLMotionCoprocessorInterface::create(BOOL)", "%s\n", v1);
    }
  }

uint64_t sub_1008FA854(char a1)
{
  uint64_t result = qword_1019A1850;
  if (!qword_1019A1850)
  {
    uint64_t v3 = sub_1006E27E8();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _DWORD v4[2] = sub_1008FA8C4;
    v4[3] = &unk_101833840;
    char v5 = a1;
    sub_1006E28B8(v3, (uint64_t)v4);
    return qword_1019A1850;
  }

  return result;
}

void sub_1008FA8C4()
{
  if (!qword_1019A1850) {
    sub_1008FA6AC();
  }
}

void *sub_1008FA8DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (void *)sub_1006DC9EC(a1, a2, a3);
  void *result = off_1018601E0;
  result[4] = off_1018602A8;
  result[5] = off_1018602F0;
  result[6] = off_101860328;
  result[7] = off_101860350;
  result[8] = off_1018603A0;
  result[9] = off_1018603D8;
  result[10] = off_101860418;
  result[11] = off_101860450;
  result[12] = off_101860480;
  result[13] = off_1018604D0;
  result[14] = off_1018604F8;
  result[15] = off_101860560;
  result[16] = off_101860588;
  result[17] = off_1018605B0;
  return result;
}

void sub_1008FA9D0(void *a1@<X8>)
{
  *a1 = 0LL;
}

void sub_1008FA9D8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1008FAA04@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1002DC708((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1008FAA50(_Unwind_Exception *a1)
{
}

_DWORD *sub_1008FAA64(_DWORD *a1, uint64_t a2)
{
  double v4 = sub_1002E0454(a1);
  sub_1002DCA80((uint64_t)v4, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1008FAAAC(_Unwind_Exception *a1)
{
}

_DWORD *sub_1008FAAC0(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  double v6 = sub_1002E0454(a1);
  double v7 = v6 + 1618;
  *(_OWORD *)(v6 + 161_Block_object_dispose(va, 8) = 0u;
  sub_1002DCA80((uint64_t)v6, a2);
  sub_1002DC4C4((uint64_t)(a1 + 202), a2 + 808);
  sub_1002DC708((uint64_t)(a1 + 754), a2 + 3016);
  sub_1000F2F30(v7, a3);
  return a1;
}

void sub_1008FAB30(_Unwind_Exception *a1)
{
}

void sub_1008FAB4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6376) && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) > 0))
  {
    int v4 = *(_DWORD *)(a1 + 3328);
    __int128 v47 = *(_OWORD *)(a1 + 3332);
    uint64_t v5 = *(void *)(a1 + 3348);
    uint64_t v6 = *(void *)(a1 + 3356);
    uint64_t v7 = *(void *)(a1 + 3364);
    uint64_t v8 = *(void *)(a1 + 3372);
    uint64_t v9 = *(void *)(a1 + 3380);
    uint64_t v10 = *(void *)(a1 + 3388);
    uint64_t v11 = *(void *)(a1 + 3396);
    uint64_t v12 = *(void *)(a1 + 3404);
    int v13 = *(_DWORD *)(a1 + 3412);
    uint64_t v14 = *(void *)(a1 + 3416);
    __int128 v45 = *(_OWORD *)(a1 + 3424);
    int v46 = *(_DWORD *)(a1 + 3440);
    uint64_t v18 = *(void *)(a1 + 3444);
    uint64_t v19 = v14;
    int v15 = *(_DWORD *)(a1 + 3452);
    v44[0] = *(_OWORD *)(a1 + 3456);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a1 + 3465);
    __int16 v42 = *(_WORD *)(a1 + 3481);
    char v43 = *(_BYTE *)(a1 + 3483);
    v41[0] = sub_1008FAE20(a1 + 3208);
    v41[1] = v16;
    memset(v39, 0, sizeof(v39));
    int v40 = 1065353216;
    for (uint64_t i = *(void **)(a1 + 1120); i; uint64_t i = (void *)*i)
      sub_1002DFB20((uint64_t)v39, i + 2, i + 2);
    int v20 = v4;
    __int128 v21 = v47;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    uint64_t v28 = v11;
    uint64_t v29 = v12;
    int v30 = v13;
    uint64_t v31 = v19;
    __int128 v32 = v45;
    int v33 = v46;
    uint64_t v34 = v18;
    int v35 = v15;
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v44 + 9);
    *(_OWORD *)double v36 = v44[0];
    char v38 = v43;
    __int16 v37 = v42;
    sub_1008FAF18(a1, v39, (uint64_t)v41, (uint64_t)&v20, 0, 1, (uint64_t)v48);
    sub_1008FAE78((void *)(a1 + 1144), v48, a2);
    sub_1002E1244((uint64_t)&v50);
    sub_1002E1094((uint64_t)&v49);
    sub_1002DDAD8((uint64_t)v48);
    sub_100019CEC((uint64_t)v39);
  }

  else
  {
    sub_1002E1330(a2, (uint64_t)v51);
  }

  sub_1002E1244((uint64_t)&v53);
  sub_1002E1094((uint64_t)&v52);
  sub_1002DDAD8((uint64_t)v51);
}

void sub_1008FADD8(_Unwind_Exception *a1)
{
}

unint64_t sub_1008FAE20(uint64_t a1)
{
  if (sub_100B83D5C(a1) && (sub_100B83D64(a1) & 1) == 0)
  {
    uint64_t v4 = sub_1005B46E8(a1);
    unint64_t v3 = v4 & 0xFFFFFFFFFFFFFF00LL;
    uint64_t v2 = v4;
  }

  else
  {
    uint64_t v2 = 0LL;
    unint64_t v3 = 0LL;
  }

  return v3 | v2;
}

uint64_t sub_1008FAE78@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  for (uint64_t i = (void *)a2[150]; i; uint64_t i = (void *)*i)
  {
    uint64_t v10 = i[2];
    uint64_t v7 = sub_1005CE368(a1, &v10);
    if (!v7) {
      sub_10000C918("unordered_map::at: key not found");
    }
    sub_100C3A3F8((uint64_t)(i + 3), *((_DWORD *)v7 + 14), *((_DWORD *)v7 + 16), *((double *)v7 + 10));
  }

  uint64_t v8 = a2[399];
  uint64_t v10 = a2[798];
  sub_1008FCD88(v8, (double *)&v10);
  return sub_1002E1330(a3, (uint64_t)a2);
}

void sub_1008FAF18( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  if (a2[3]) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = *(_BYTE *)(a3 + 8) == 0;
  }
  if (v13) {
    return;
  }
  uint64_t v14 = (void *)a2[2];
  double v109 = 0LL;
  unint64_t v110 = 0LL;
  __int128 __p = 0LL;
  unint64_t v15 = 0LL;
  if (v14)
  {
    uint64_t v16 = v14;
    do
    {
      ++v15;
      uint64_t v16 = (void *)*v16;
    }

    while (v16);
  }

  sub_100449070((char *)&__p, v14, 0LL, v15);
  if (*(_BYTE *)(a3 + 8) && !sub_1005CE368(a2, (void *)a3))
  {
    double v17 = v109;
    if ((unint64_t)v109 >= v110)
    {
      uint64_t v19 = (char *)__p;
      uint64_t v20 = (v109 - (_BYTE *)__p) >> 3;
      unint64_t v21 = v20 + 1;
      uint64_t v22 = v110 - (void)__p;
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)sub_1000071BC((uint64_t)&v110, v23);
        uint64_t v19 = (char *)__p;
        double v17 = v109;
      }

      else
      {
        uint64_t v24 = 0LL;
      }

      uint64_t v25 = &v24[8 * v20];
      uint64_t v26 = &v24[8 * v23];
      *(void *)uint64_t v25 = *(void *)a3;
      uint64_t v18 = v25 + 8;
      while (v17 != v19)
      {
        uint64_t v27 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v25 - 1) = v27;
        v25 -= 8;
      }

      __int128 __p = v25;
      double v109 = v18;
      unint64_t v110 = (unint64_t)v26;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      *(void *)double v109 = *(void *)a3;
      uint64_t v18 = v17 + 8;
    }

    double v109 = v18;
  }

  uint64_t v106 = 0LL;
  uint64_t v107 = 0LL;
  __int16 v105 = &v106;
  if (a5 == 1)
  {
    (*(void (**)(_BYTE *__return_ptr, void, void **, double))(**(void **)(a1 + 6472) + 24LL))( buf,  *(void *)(a1 + 6472),  &__p,  *(double *)(a1 + 6384));
    goto LABEL_31;
  }

  if (!a5)
  {
    (*(void (**)(_BYTE *__return_ptr, void, void **, uint64_t, double))(**(void **)(a1 + 6472) + 16LL))( buf,  *(void *)(a1 + 6472),  &__p,  a4,  *(double *)(a1 + 6384));
LABEL_31:
    sub_100008390((uint64_t)&v105, v106);
    uint64_t v28 = *(void **)&buf[8];
    __int16 v105 = *(void ***)buf;
    uint64_t v106 = *(void **)&buf[8];
    uint64_t v107 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      *(void *)(*(void *)&buf[8] + 1sub_10000CF44(&v50, (uint64_t)"concha", 6LL) = &v106;
      *(void *)std::stringbuf::string_type buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&uint8_t buf[16] = 0LL;
      uint64_t v28 = 0LL;
    }

    else
    {
      __int16 v105 = &v106;
    }

    sub_100008390((uint64_t)buf, v28);
  }

  if (a6)
  {
    (*(void (**)(_BYTE *__return_ptr, void, void ***))(**(void **)(a1 + 6472) + 48LL))( buf,  *(void *)(a1 + 6472),  &v105);
    sub_100008390((uint64_t)&v105, v106);
    uint64_t v29 = *(void **)&buf[8];
    __int16 v105 = *(void ***)buf;
    uint64_t v106 = *(void **)&buf[8];
    uint64_t v107 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      *(void *)(*(void *)&buf[8] + 1sub_10000CF44(&v50, (uint64_t)"concha", 6LL) = &v106;
      *(void *)std::stringbuf::string_type buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&uint8_t buf[16] = 0LL;
      uint64_t v29 = 0LL;
    }

    else
    {
      __int16 v105 = &v106;
    }

    sub_100008390((uint64_t)buf, v29);
  }

  else
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018607D0);
    }
    int v30 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "MovingApDetector, skip cross-checking centroids with GPS/Cell as requested",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018607D0);
      }
      LOWORD(v111.__r_.__value_.__l.__data_) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "MovingApDetector, skip cross-checking centroids with GPS/Cell as requested",  &v111,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const",  "%s\n",  v31);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  sub_1010DDBC0(&v104, "default");
  uint64_t v92 = a3;
  int v91 = a5;
  uint64_t v90 = a1;
  __int128 v32 = (void *)a2[2];
  if (v32)
  {
    int v95 = 0;
    int v33 = 0;
    std::string::size_type v94 = a2[3];
    unint64_t v34 = 1LL;
    while (1)
    {
      uint64_t v103 = v32[2];
      int v35 = (double *)sub_1002FB09C((uint64_t)&v105, &v103);
      double v36 = v35;
      if (&v106 == (void **)v35) {
        break;
      }
      if (!sub_100C3A418(v35 + 5))
      {
        sub_1002DFB20(a7 + 1264, &v103, &v103);
        __int16 v37 = "unknown";
        goto LABEL_57;
      }

      sub_10068CB5C(a7 + 1184, (void *)v36 + 4, (void *)v36 + 4, v36 + 5);
      if (*((_BYTE *)v36 + 128))
      {
        std::string::assign(&v104, "tile");
        ++v33;
      }

      else
      {
        std::string::assign(&v104, "als");
        ++v95;
      }

void sub_1008FBE8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, char a42, void *a43, uint64_t a44, void *__p, uint64_t a46)
{
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_1002D9D34(a19);
  _Unwind_Resume(a1);
}

void sub_1008FBF2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 809))
  {
    int v4 = *(_DWORD *)(a1 + 3328);
    __int128 v47 = *(_OWORD *)(a1 + 3332);
    uint64_t v5 = *(void *)(a1 + 3348);
    uint64_t v6 = *(void *)(a1 + 3356);
    uint64_t v7 = *(void *)(a1 + 3364);
    uint64_t v8 = *(void *)(a1 + 3372);
    uint64_t v9 = *(void *)(a1 + 3380);
    uint64_t v10 = *(void *)(a1 + 3388);
    uint64_t v11 = *(void *)(a1 + 3396);
    uint64_t v12 = *(void *)(a1 + 3404);
    int v13 = *(_DWORD *)(a1 + 3412);
    uint64_t v14 = *(void *)(a1 + 3416);
    __int128 v45 = *(_OWORD *)(a1 + 3424);
    int v46 = *(_DWORD *)(a1 + 3440);
    uint64_t v18 = *(void *)(a1 + 3444);
    uint64_t v19 = v14;
    int v15 = *(_DWORD *)(a1 + 3452);
    v44[0] = *(_OWORD *)(a1 + 3456);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a1 + 3465);
    __int16 v42 = *(_WORD *)(a1 + 3481);
    char v43 = *(_BYTE *)(a1 + 3483);
    v41[0] = sub_1008FAE20(a1 + 3208);
    v41[1] = v16;
    memset(v39, 0, sizeof(v39));
    int v40 = 1065353216;
    for (uint64_t i = *(void **)(a1 + 1120); i; uint64_t i = (void *)*i)
      sub_1002DFB20((uint64_t)v39, i + 2, i + 2);
    int v20 = v4;
    __int128 v21 = v47;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    uint64_t v28 = v11;
    uint64_t v29 = v12;
    int v30 = v13;
    uint64_t v31 = v19;
    __int128 v32 = v45;
    int v33 = v46;
    uint64_t v34 = v18;
    int v35 = v15;
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v44 + 9);
    *(_OWORD *)double v36 = v44[0];
    char v38 = v43;
    __int16 v37 = v42;
    sub_1008FAF18(a1, v39, (uint64_t)v41, (uint64_t)&v20, 0, 1, (uint64_t)v48);
    sub_1008FAE78((void *)(a1 + 1144), v48, a2);
    sub_1002E1244((uint64_t)&v50);
    sub_1002E1094((uint64_t)&v49);
    sub_1002DDAD8((uint64_t)v48);
    sub_100019CEC((uint64_t)v39);
  }

  else
  {
    sub_1002E1330(a2, (uint64_t)v51);
  }

  sub_1002E1244((uint64_t)&v53);
  sub_1002E1094((uint64_t)&v52);
  sub_1002DDAD8((uint64_t)v51);
}

void sub_1008FC194(_Unwind_Exception *a1)
{
}

void sub_1008FC1DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(a1 + 6376) && *(_BYTE *)(a1 + 808))
  {
    int v4 = *(_DWORD *)(a1 + 3328);
    __int128 v47 = *(_OWORD *)(a1 + 3332);
    uint64_t v5 = *(void *)(a1 + 3348);
    uint64_t v6 = *(void *)(a1 + 3356);
    uint64_t v7 = *(void *)(a1 + 3364);
    uint64_t v8 = *(void *)(a1 + 3372);
    uint64_t v9 = *(void *)(a1 + 3380);
    uint64_t v10 = *(void *)(a1 + 3388);
    uint64_t v11 = *(void *)(a1 + 3396);
    uint64_t v12 = *(void *)(a1 + 3404);
    int v13 = *(_DWORD *)(a1 + 3412);
    uint64_t v14 = *(void *)(a1 + 3416);
    __int128 v45 = *(_OWORD *)(a1 + 3424);
    int v46 = *(_DWORD *)(a1 + 3440);
    uint64_t v18 = *(void *)(a1 + 3444);
    uint64_t v19 = v14;
    int v15 = *(_DWORD *)(a1 + 3452);
    v44[0] = *(_OWORD *)(a1 + 3456);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a1 + 3465);
    __int16 v42 = *(_WORD *)(a1 + 3481);
    char v43 = *(_BYTE *)(a1 + 3483);
    v41[0] = sub_1008FAE20(a1 + 3208);
    v41[1] = v16;
    memset(v39, 0, sizeof(v39));
    int v40 = 1065353216;
    for (uint64_t i = *(void **)(a1 + 1120); i; uint64_t i = (void *)*i)
      sub_1002DFB20((uint64_t)v39, i + 2, i + 2);
    int v20 = v4;
    __int128 v21 = v47;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    uint64_t v28 = v11;
    uint64_t v29 = v12;
    int v30 = v13;
    uint64_t v31 = v19;
    __int128 v32 = v45;
    int v33 = v46;
    uint64_t v34 = v18;
    int v35 = v15;
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v44 + 9);
    *(_OWORD *)double v36 = v44[0];
    char v38 = v43;
    __int16 v37 = v42;
    sub_1008FAF18(a1, v39, (uint64_t)v41, (uint64_t)&v20, 0, 1, (uint64_t)v48);
    sub_1008FAE78((void *)(a1 + 1144), v48, a2);
    sub_1002E1244((uint64_t)&v50);
    sub_1002E1094((uint64_t)&v49);
    sub_1002DDAD8((uint64_t)v48);
    sub_100019CEC((uint64_t)v39);
  }

  else
  {
    sub_1002E1330(a2, (uint64_t)v51);
  }

  sub_1002E1244((uint64_t)&v53);
  sub_1002E1094((uint64_t)&v52);
  sub_1002DDAD8((uint64_t)v51);
}

void sub_1008FC44C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void sub_1008FC494(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 6376))
  {
    int v6 = *(_DWORD *)(a1 + 3328);
    __int128 v39 = *(_OWORD *)(a1 + 3332);
    __int128 v15 = *(_OWORD *)(a1 + 3364);
    __int128 v16 = *(_OWORD *)(a1 + 3348);
    __int128 v13 = *(_OWORD *)(a1 + 3396);
    __int128 v14 = *(_OWORD *)(a1 + 3380);
    int v7 = *(_DWORD *)(a1 + 3412);
    uint64_t v8 = *(void *)(a1 + 3416);
    __int128 v37 = *(_OWORD *)(a1 + 3424);
    int v38 = *(_DWORD *)(a1 + 3440);
    uint64_t v9 = *(void *)(a1 + 3444);
    int v10 = *(_DWORD *)(a1 + 3452);
    v36[0] = *(_OWORD *)(a1 + 3456);
    *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(a1 + 3465);
    __int16 v34 = *(_WORD *)(a1 + 3481);
    char v35 = *(_BYTE *)(a1 + 3483);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018607D0);
    }
    uint64_t v11 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling WSB event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018607D0);
      }
      __int16 v32 = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling WSB event",  &v32,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::operator()(const Events::Wifi::Wsb &) const",  "%s\n",  v12);
    }

    sub_1006DBEF4(a2, (uint64_t)buf);
    LOBYTE(v32) = 0;
    char v33 = 0;
    int v17 = v6;
    __int128 v18 = v39;
    __int128 v19 = v16;
    __int128 v20 = v15;
    __int128 v21 = v14;
    __int128 v22 = v13;
    int v23 = v7;
    uint64_t v24 = v8;
    __int128 v25 = v37;
    int v26 = v38;
    uint64_t v27 = v9;
    int v28 = v10;
    *(_OWORD *)uint64_t v29 = v36[0];
    *(_OWORD *)&v29[9] = *(_OWORD *)((char *)v36 + 9);
    __int16 v30 = v34;
    char v31 = v35;
    sub_1008FAF18(a1, buf, (uint64_t)&v32, (uint64_t)&v17, 0, 0, a3);
    sub_100019CEC((uint64_t)buf);
  }

  else
  {
    sub_1002E1330(a3, (uint64_t)v41);
  }

  sub_1002E1244((uint64_t)&v43);
  sub_1002E1094((uint64_t)&v42);
  sub_1002DDAD8((uint64_t)v41);
}

void sub_1008FC7B4(_Unwind_Exception *a1)
{
}

void sub_1008FC7EC(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*a2 | 2) == 2)
  {
    (*(void (**)(void))(**(void **)(a1 + 6472) + 32LL))(*(void *)(a1 + 6472));
    sub_1002E1330(a3, (uint64_t)v36);
  }

  else
  {
    v32[0] = sub_1008FAE20(a1 + 3208);
    v32[1] = v6;
    memset(v30, 0, sizeof(v30));
    int v31 = 1065353216;
    int v12 = 0xFFFF;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    __int128 v15 = xmmword_1012E0070;
    __asm { FMOV            V0.2D, #-1.0 }

    __int128 v16 = _Q0;
    __int128 v17 = _Q0;
    __int128 v18 = _Q0;
    int v19 = 0;
    uint64_t v22 = 0LL;
    unint64_t v20 = 0xBFF0000000000000LL;
    uint64_t v21 = 0LL;
    int v23 = 0;
    unint64_t v24 = 0xBFF0000000000000LL;
    int v25 = 0x7FFFFFFF;
    uint64_t v27 = 0LL;
    uint64_t v26 = 0LL;
    char v29 = 0;
    uint64_t v28 = 0LL;
    sub_1008FAF18(a1, v30, (uint64_t)v32, (uint64_t)&v12, 1, 1, (uint64_t)v33);
    sub_1008FAE78((void *)(a1 + 1144), v33, a3);
    sub_1002E1244((uint64_t)&v35);
    sub_1002E1094((uint64_t)&v34);
    sub_1002DDAD8((uint64_t)v33);
    sub_100019CEC((uint64_t)v30);
  }

  sub_1002E1244((uint64_t)&v38);
  sub_1002E1094((uint64_t)&v37);
  sub_1002DDAD8((uint64_t)v36);
}

void sub_1008FC99C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_1008FC9E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 6280);
  uint64_t v5 = *(void *)(a1 + 6288);
  if (v4 == v5)
  {
    sub_1002E1330(a2, (uint64_t)v44);
  }

  else
  {
    int v18 = *(_DWORD *)(a1 + 3328);
    __int128 v42 = *(_OWORD *)(a1 + 3332);
    __int128 v16 = *(_OWORD *)(a1 + 3364);
    __int128 v17 = *(_OWORD *)(a1 + 3348);
    __int128 v14 = *(_OWORD *)(a1 + 3396);
    __int128 v15 = *(_OWORD *)(a1 + 3380);
    int v6 = *(_DWORD *)(a1 + 3412);
    uint64_t v7 = *(void *)(a1 + 3416);
    __int128 v40 = *(_OWORD *)(a1 + 3424);
    int v41 = *(_DWORD *)(a1 + 3440);
    uint64_t v8 = *(void *)(a1 + 3444);
    int v9 = *(_DWORD *)(a1 + 3452);
    v39[0] = *(_OWORD *)(a1 + 3456);
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)(a1 + 3465);
    __int16 v37 = *(_WORD *)(a1 + 3481);
    char v38 = *(_BYTE *)(a1 + 3483);
    memset(v35, 0, sizeof(v35));
    int v36 = 1065353216;
    do
    {
      uint64_t v11 = *(void **)v4;
      int v10 = *(void **)(v4 + 8);
      while (v11 != v10)
      {
        *(void *)std::stringbuf::string_type buf = *v11;
        sub_1002DFB20((uint64_t)v35, buf, buf);
        v11 += 11;
      }

      v4 += 24LL;
    }

    while (v4 != v5);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018607D0);
    }
    int v12 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling ReprocessWifiScanBuffer event",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018607D0);
      }
      v34[0] = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling ReprocessWifiScanBuffer event",  v34,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const",  "%s\n",  v13);
    }

    buf[0] = 0;
    uint8_t buf[8] = 0;
    int v19 = v18;
    __int128 v20 = v42;
    __int128 v21 = v17;
    __int128 v22 = v16;
    __int128 v23 = v15;
    __int128 v24 = v14;
    int v25 = v6;
    uint64_t v26 = v7;
    __int128 v27 = v40;
    int v28 = v41;
    uint64_t v29 = v8;
    int v30 = v9;
    *(_OWORD *)int v31 = v39[0];
    *(_OWORD *)&v31[9] = *(_OWORD *)((char *)v39 + 9);
    __int16 v32 = v37;
    char v33 = v38;
    sub_1008FAF18(a1, v35, (uint64_t)buf, (uint64_t)&v19, 0, 0, a2);
    sub_100019CEC((uint64_t)v35);
  }

  sub_1002E1244((uint64_t)&v46);
  sub_1002E1094((uint64_t)&v45);
  sub_1002DDAD8((uint64_t)v44);
}

void sub_1008FCD50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

uint64_t sub_1008FCD88(uint64_t result, double *a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (v2)
  {
    unint64_t v3 = (void *)result;
    double v4 = *a2 + -30.0;
    uint64_t v5 = result + 8;
    do
    {
      unint64_t v6 = v3[5];
      v3[5] = v6 + 1;
      v3[6] = v2 - 1;
      uint64_t result = sub_100232D40(v5, 1);
      uint64_t v2 = v3[6];
    }

    while (v2);
  }

  return result;
}

NSDictionary *sub_1008FCE08(uint64_t a1)
{
  v3[0] = @"sources";
  v4[0] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)(a1 + 32));
  v3[1] = @"scanApsBin";
  v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  _DWORD v3[2] = @"als";
  _DWORD v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[3] = @"tiles";
  v4[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[4] = @"invalid";
  void v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v3[5] = @"unknown";
  void v4[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  6LL);
}

void sub_1008FCF20(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5 = a1[1];
  uint64_t v14 = *a1;
  __int128 v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    unint64_t v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  sub_1008FAAC0(v16, (uint64_t)a2, &v14);
  sub_1008FD0B0(a2, (uint64_t)v16, a3);
  uint64_t v8 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_1002E1244((uint64_t)&v18);
  sub_1002E1094((uint64_t)&v17);
  sub_1002DDAD8((uint64_t)v16);
  uint64_t v11 = v15;
  if (v15)
  {
    int v12 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1008FD060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1008FD084(id a1)
{
  qword_101934868 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1008FD0B0(_DWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t v3 = (uint64_t **)(a1 + 2);
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_1008FAA64(a3, a2);
      break;
    case 7:
      sub_1008FC1DC(a2, (uint64_t)a3);
      break;
    case 8:
      sub_1008FC494(a2, v3, (uint64_t)a3);
      break;
    case 9:
      sub_1008FC7EC(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_1008FAB4C(a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_1008FBF2C(a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_1008FC9E0(a2, (uint64_t)a3);
      break;
    default:
      sub_1002DDAB0();
  }

void sub_1008FD144()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1008FD1E0(_Unwind_Exception *a1)
{
}

void sub_1008FD1F8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1008FD284(_Unwind_Exception *a1)
{
}

uint64_t *sub_1008FD29C(uint64_t *a1, uint64_t *a2, __int128 *a3, __int128 *a4, int a5, char a6)
{
  __int128 v8 = *a3;
  a1[2] = *((void *)a3 + 2);
  *(_OWORD *)a1 = v8;
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *(void *)a3 = 0LL;
  __int128 v9 = *a4;
  a1[5] = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 3) = v9;
  *((void *)a4 + 1) = 0LL;
  *((void *)a4 + 2) = 0LL;
  *(void *)a4 = 0LL;
  *((_DWORD *)a1 + 12) = a5;
  uint64_t v10 = *a2;
  a1[7] = *a2;
  uint64_t v11 = a2[1];
  a1[8] = v11;
  if (v11)
  {
    int v12 = (unint64_t *)(v11 + 16);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    uint64_t v10 = *a2;
  }

  uint64_t v14 = a1 + 3;
  *((_BYTE *)a1 + 72) = a6;
  if (!v10)
  {
LABEL_14:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860838);
    }
    __int128 v16 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      BOOL v17 = *a2 != 0;
      uint64_t v18 = a1;
      int v19 = a1 + 3;
      *(_DWORD *)std::stringbuf::string_type buf = 68290307;
      int v29 = 0;
      __int16 v30 = 2082;
      int v31 = "";
      __int16 v32 = 1026;
      BOOL v33 = v17;
      __int16 v34 = 2082;
      uint64_t v35 = v18;
      __int16 v36 = 2082;
      __int16 v37 = v19;
      __int16 v38 = 2082;
      __int128 v39 = "assert";
      __int16 v40 = 2081;
      int v41 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Required parameter missing, logic:%{public}hhd, clientKey:%{public, loca tion:escape_only}s, reason:%{public, location:escape_only}s, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  buf,  0x40u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    __int128 v20 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      BOOL v21 = *a2 != 0;
      __int128 v22 = a1;
      __int128 v23 = a1 + 3;
      *(_DWORD *)std::stringbuf::string_type buf = 68290307;
      int v29 = 0;
      __int16 v30 = 2082;
      int v31 = "";
      __int16 v32 = 1026;
      BOOL v33 = v21;
      __int16 v34 = 2082;
      uint64_t v35 = v22;
      __int16 v36 = 2082;
      __int16 v37 = v23;
      __int16 v38 = 2082;
      __int128 v39 = "assert";
      __int16 v40 = 2081;
      int v41 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#CLIUA Required parameter missing",  "{msg%{public}.0s:#CLIUA Required parameter missing, logic:%{public}hhd, clientKey:%{public, loca tion:escape_only}s, reason:%{public, location:escape_only}s, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  buf,  0x40u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    __int128 v24 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      BOOL v25 = *a2 != 0;
      uint64_t v26 = a1;
      __int128 v27 = a1 + 3;
      *(_DWORD *)std::stringbuf::string_type buf = 68290307;
      int v29 = 0;
      __int16 v30 = 2082;
      int v31 = "";
      __int16 v32 = 1026;
      BOOL v33 = v25;
      __int16 v34 = 2082;
      uint64_t v35 = v26;
      __int16 v36 = 2082;
      __int16 v37 = v27;
      __int16 v38 = 2082;
      __int128 v39 = "assert";
      __int16 v40 = 2081;
      int v41 = "tracker && !fClientKey.empty() && !fReason.empty()";
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLIUA Required parameter missing, logic:%{public}hhd, clientKey:%{public, loca tion:escape_only}s, reason:%{public, location:escape_only}s, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  buf,  0x40u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm",  23,  "Assertion");
    __break(1u);
  }

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      goto LABEL_14;
    }
  }

  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_14;
  }

  if (*((char *)a1 + 47) < 0)
  {
    if (!a1[4]) {
      goto LABEL_14;
    }
  }

  else if (!*((_BYTE *)a1 + 47))
  {
    goto LABEL_14;
  }

  sub_1008FD6C4(v10, (unsigned __int8 *)a1, a1 + 3, *((_DWORD *)a1 + 12), 1);
  return a1;
}

void sub_1008FD698(_Unwind_Exception *a1)
{
  double v4 = *(std::__shared_weak_count **)(v1 + 64);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_101253210(v1, v2);
  _Unwind_Resume(a1);
}

void sub_1008FD6C4(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int a4, int a5)
{
  if (a4 - 6 <= 0xFFFFFFFA) {
    sub_10125324C();
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "silo"), "assertInside");
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101860838);
  }
  uint64_t v10 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      int v12 = (uint64_t *)a2;
    }
    else {
      int v12 = *(uint64_t **)a2;
    }
    else {
      unint64_t v13 = (uint64_t *)*a3;
    }
    *(_DWORD *)std::stringbuf::string_type buf = 68290050;
    int v18 = 0;
    __int16 v19 = 2082;
    __int128 v20 = "";
    __int16 v21 = 2082;
    __int128 v22 = v12;
    __int16 v23 = 2082;
    __int128 v24 = v13;
    __int16 v25 = 2050;
    uint64_t v26 = a4;
    __int16 v27 = 1026;
    int v28 = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLIUA Marking change, clientKey:%{public, location:escape_only}s, reason:%{publi c, location:escape_only}s, AssertionLevel:%{public, location:CLClientInUseLevel}lld, coming:%{public}hhd}",  buf,  0x36u);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_1008FF108;
  void v14[3] = &unk_101860818;
  char v16 = a5;
  unsigned int v15 = a4;
  sub_1008FED7C(a1, a2, v11, (uint64_t)v14);
}

uint64_t sub_1008FD86C(uint64_t a1, __int128 *a2)
{
  *(_OWORD *)__int16 v25 = *(_OWORD *)a1;
  uint64_t v26 = *(void *)(a1 + 16);
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  __int128 v9 = (void **)(a1 + 24);
  __int128 v10 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  __int128 v11 = *(__int128 *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)__int128 v9 = v11;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 12);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v12 = *((void *)a2 + 8);
  if (v12)
  {
    uint64_t v14 = (unint64_t *)(v12 + 16);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  char v16 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v12;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  BOOL v17 = (std::__shared_weak_count *)*((void *)a2 + 8);
  *((void *)a2 + 7) = 0LL;
  *((void *)a2 + _Block_object_dispose(va, 8) = 0LL;
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v5)
  {
    int v18 = std::__shared_weak_count::lock(v5);
    if (v18)
    {
      __int16 v19 = v18;
      if (v6) {
        sub_1008FD6C4(v6, (unsigned __int8 *)v25, (uint64_t *)__p, v4, 0);
      }
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    std::__shared_weak_count::__release_weak(v5);
  }

  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  return a1;
}

void sub_1008FDA28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008FDA64(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 56);
      if (v5) {
        sub_1008FD6C4(v5, (unsigned __int8 *)a1, (uint64_t *)(a1 + 24), *(_DWORD *)(a1 + 48), 0);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return a1;
}

_OWORD *sub_1008FDB14(_OWORD *a1, __int128 *a2)
{
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  sub_1008FD86C((uint64_t)a1, a2);
  return a1;
}

void sub_1008FDB48(_Unwind_Exception *a1)
{
}

uint64_t sub_1008FDB60(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 1065353216;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  return a1;
}

void sub_1008FDBE0(_Unwind_Exception *a1)
{
  unsigned int v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008FDC04(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v2 = *(void **)(a1 + 64);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( objc_msgSend( *(id *)(a1 + 64),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v8 + 1) + 8 * (void)i)),  "invalidate");
      }

      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v3);
  }

  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_1008FF1E4(a1 + 120);
  sub_1008FF1E4(a1 + 80);
  sub_10004AD90(a1 + 16);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_1008FDD30(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1008FDD4C( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  *(_OWORD *)char v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  *(_OWORD *)__int128 __p = *(_OWORD *)a3;
  uint64_t v15 = *(void *)(a3 + 16);
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  sub_1008FD29C(a6, &v18, (__int128 *)v16, (__int128 *)__p, a4, a5);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  __int128 v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1008FDE40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101226D18((uint64_t)&a16);
  sub_10000AE14((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1008FDE6C(std::string *this@<X2>, void *a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char v10 = std::string::compare(this, "Location in use on paired watch by 3rd party app") == 0;
  sub_1004C6CFC(&v17, a2);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
  uint64_t v16 = *(void *)(a3 + 16);
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  *(void *)a3 = 0LL;
  std::string __p = *this;
  this->__r_.__value_.__r.__words[0] = 0LL;
  this->__r_.__value_.__l.__size_ = 0LL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  sub_1008FD29C(a5, &v17, (__int128 *)v15, (__int128 *)&__p, a4, v10);
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  __int128 v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1008FDF78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101226D18((uint64_t)&a16);
  sub_10000AE14((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1008FDFA4(void *a1, uint64_t a2, unsigned int *a3, int *a4, void *a5)
{
  if (a5)
  {
    [a5 cppClientKey];
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v31 = 0LL;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101860838);
  }
  __int128 v8 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v9 = (int *)*a3;
    int v10 = *a4;
    else {
      __int128 v11 = (int *)*((void *)a4 + 1);
    }
    uint64_t v12 = __p;
    if (v31 < 0) {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)std::stringbuf::string_type buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v33 = 2082;
    __int16 v34 = "";
    __int16 v35 = 2050;
    __int16 v36 = v9;
    __int16 v37 = 1026;
    *(_DWORD *)__int16 v38 = v10;
    *(_WORD *)&v38[4] = 2082;
    *(void *)&v38[6] = v11;
    __int16 v39 = 2082;
    __int16 v40 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLIUA AppMonitor notification, notification:%{public, location:CLAppMonitor_Type::No tification}lld, pid:%{public}d, bundleId:%{public, location:escape_only}s, ClientKey:%{public, locatio n:escape_only}s}",  buf,  0x36u);
  }

  switch(*a3)
  {
    case 1u:
      sub_1008FF65C(a1 + 10, (unsigned __int8 *)a4 + 8);
      goto LABEL_26;
    case 2u:
    case 3u:
    case 6u:
      unint64_t v13 = sub_100121918(a1 + 10, (unsigned __int8 *)a4 + 8);
      if (v13)
      {
        sub_1010DDBC0(buf, "Decaying in-use status from process state");
        sub_1008FE604((uint64_t)a1, __p, (uint64_t)buf);
        if (SBYTE3(v36) < 0) {
          operator delete(*(void **)buf);
        }
        sub_10005BEB8(a1 + 10, v13, (uint64_t)buf);
        sub_1008FF618((uint64_t)buf, 0LL);
      }

      else
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101860838);
        }
        uint64_t v14 = qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          else {
            uint64_t v15 = (int *)*((void *)a4 + 1);
          }
          *(_DWORD *)std::stringbuf::string_type buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v33 = 2082;
          __int16 v34 = "";
          __int16 v35 = 2082;
          __int16 v36 = v15;
          uint64_t v16 = "{msg%{public}.0s:skip erasing #CLIUA for RunningBoard Process State. Does not exists, bundleId"
                ":%{public, location:escape_only}s}";
          uint64_t v17 = (os_log_s *)v14;
          uint32_t v18 = 28;
          goto LABEL_35;
        }
      }

      break;
    case 4u:
      __int16 v19 = a1 + 10;
      if (sub_100121918(a1 + 10, (unsigned __int8 *)a4 + 8))
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101860838);
        }
        uint64_t v20 = qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          sub_100121918(v19, (unsigned __int8 *)a4 + 8);
          unint64_t v21 = (int *)*((unsigned int *)sub_100121918(v19, (unsigned __int8 *)a4 + 8) + 22);
          else {
            __int128 v22 = (int *)*((void *)a4 + 1);
          }
          *(_DWORD *)std::stringbuf::string_type buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v33 = 2082;
          __int16 v34 = "";
          __int16 v35 = 2050;
          __int16 v36 = v21;
          __int16 v37 = 2082;
          *(void *)__int16 v38 = v22;
          uint64_t v16 = "{msg%{public}.0s:skip taking #CLIUA for RunningBoard Process State. Already exists, AssertionL"
                "evel:%{public, location:CLClientInUseLevel}lld, bundleId:%{public, location:escape_only}s}";
          uint64_t v17 = (os_log_s *)v20;
          uint32_t v18 = 38;
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
        }
      }

      else
      {
        if (SHIBYTE(v31) < 0)
        {
          sub_1010DD48C(__dst, __p[0], (unint64_t)__p[1]);
        }

        else
        {
          *(_OWORD *)char __dst = *(_OWORD *)__p;
          uint64_t v29 = v31;
        }

        sub_1010DDBC0(&v27, "Process state from RunningBoard");
        sub_1008FDE6C(&v27, a1, (uint64_t)__dst, 5, (uint64_t *)buf);
        sub_1008FF294((uint64_t)(a1 + 10), (unsigned __int8 *)a4 + 8, (__int128 *)(a4 + 2), (__int128 *)buf);
        sub_1008FDA64((uint64_t)buf);
        if (SHIBYTE(v29) < 0) {
          operator delete(__dst[0]);
        }
LABEL_26:
        sub_1008FE5AC((uint64_t)a1, (uint64_t *)__p);
      }

      break;
    default:
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
      __int16 v23 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        int v24 = *a3;
        *(_DWORD *)std::stringbuf::string_type buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        __int16 v34 = "";
        __int16 v35 = 1026;
        LODWORD(v36) = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Unexpected app monitor notification, notification:%{public}d}",  buf,  0x18u);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_101860838);
        }
      }

      __int16 v25 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        int v26 = *a3;
        *(_DWORD *)std::stringbuf::string_type buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v33 = 2082;
        __int16 v34 = "";
        __int16 v35 = 1026;
        LODWORD(v36) = v26;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#CLIUA Unexpected app monitor notification",  "{msg%{public}.0s:#CLIUA Unexpected app monitor notification, notification:%{public}d}",  buf,  0x18u);
      }

      break;
  }

  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1008FE504( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008FE5AC(uint64_t a1, uint64_t *a2)
{
  else {
    id v3 = (uint64_t *)*a2;
  }
  uint64_t v4 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v4), "invalidate");
  return [*(id *)(a1 + 64) setObject:0 forKeyedSubscript:v4];
}

uint64_t sub_1008FE604(uint64_t a1, void **a2, uint64_t a3)
{
  else {
    uint64_t v6 = *a2;
  }
  unint64_t v7 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6);
  id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "silo"), "newTimer");
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x8012000000LL;
  void v14[3] = sub_1008FEB3C;
  void v14[4] = sub_1008FEB48;
  v14[5] = &unk_10175E27B;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *a2, (unint64_t)a2[1]);
  }

  else
  {
    *(_OWORD *)char __dst = *(_OWORD *)a2;
    unint64_t v13 = a2[2];
  }

  else {
    std::string __p = *(std::string *)a3;
  }
  sub_1008FDE6C(&__p, (void *)a1, (uint64_t)__dst, 3, v15);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _DWORD v10[2] = sub_1008FEB50;
  v10[3] = &unk_1018607F8;
  v10[6] = v14;
  v10[7] = a1;
  v10[4] = v8;
  void v10[5] = v7;
  v10[8] = a2;
  v10[9] = a3;
  [v8 setHandler:v10];
  [v8 setNextFireDelay:10.0];
  sub_1008FE5AC(a1, (uint64_t *)a2);
  [*(id *)(a1 + 64) setObject:v8 forKeyedSubscript:v7];
  _Block_object_dispose(v14, 8);
  return sub_1008FDA64((uint64_t)v15);
}

void sub_1008FE7C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, char a33)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008FE810(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v4 = (void *)(a1 + 16);
  if (v2)
  {
    [v2 cppClientKey];
  }

  else
  {
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v10 = 0LL;
  }

  uint64_t v5 = sub_10023BD04(v4, (unsigned __int8 *)__p);
  uint64_t v6 = v5;
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_8;
    }
    return 0LL;
  }

  operator delete(__p[0]);
  if (!v6) {
    return 0LL;
  }
LABEL_8:
  uint64_t v7 = &dword_100000014;
  do
  {
    if (v7 == -4) {
      goto LABEL_13;
    }
    uint64_t result = *(unsigned int *)((char *)&unk_101340A90 + v7);
    v7 -= 4LL;
  }

  while (!*(_DWORD *)&v6[4 * result + 40]);
  if (!(_DWORD)result) {
LABEL_13:
  }
    sub_1012533F4();
  return result;
}

void sub_1008FE8E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1008FE900(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  for (uint64_t i = *(uint64_t **)(a1 + 32); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_1010DD48C(__p, (void *)i[2], i[3]);
    }

    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)i + 1);
      uint64_t v10 = i[4];
    }

    __int128 v11 = *(_OWORD *)(i + 5);
    uint64_t v12 = i[7];
    if (v10 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    uint64_t v5 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4, __p[0], __p[1], v10);
    v14[0] = @"ActiveAssertionLevel";
    uint64_t v6 = &dword_100000014;
    while (v6 != -4)
    {
      uint64_t v7 = *(unsigned int *)((char *)&unk_101340A90 + v6);
      v6 -= 4LL;
      if (*((_DWORD *)&v11 + v7)) {
        goto LABEL_14;
      }
    }

    uint64_t v7 = 0LL;
LABEL_14:
    v15[0] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v7);
    v14[1] = @"AssertionCounts";
    v13[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v11);
    v13[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", DWORD1(v11));
    v13[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", DWORD2(v11));
    void v13[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", HIDWORD(v11));
    _DWORD v13[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v12);
    v13[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", HIDWORD(v12));
    v15[1] = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 6LL);
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2),  v5);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }

  return v2;
}

void sub_1008FEB14( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

_OWORD *sub_1008FEB3C(uint64_t a1, uint64_t a2)
{
  return sub_1008FDB14((_OWORD *)(a1 + 48), (__int128 *)(a2 + 48));
}

uint64_t sub_1008FEB48(uint64_t a1)
{
  return sub_1008FDA64(a1 + 48);
}

void sub_1008FEB50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  [*(id *)(a1 + 32) invalidate];
  if ([*(id *)(v2 + 64) objectForKeyedSubscript:*(void *)(a1 + 40)] == *(id *)(a1 + 32))
  {
    [*(id *)(v2 + 64) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860838);
    }
    id v3 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      uint64_t v4 = *(uint64_t **)(a1 + 64);
      uint64_t v5 = *(uint64_t **)(a1 + 72);
      int v9 = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = v4;
      __int16 v15 = 2082;
      uint64_t v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Inconsistent state detected.  An unknown decay timer fired!, clientKey:%{pub lic, location:escape_only}s, originalReason:%{public, location:escape_only}s}",  (uint8_t *)&v9,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    uint64_t v6 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      uint64_t v7 = *(uint64_t **)(a1 + 64);
      id v8 = *(uint64_t **)(a1 + 72);
      int v9 = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = v7;
      __int16 v15 = 2082;
      uint64_t v16 = v8;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#CLIUA Inconsistent state detected.  An unknown decay timer fired!",  "{msg%{public}.0s:#CLIUA Inconsistent state detected.  An unknown decay timer fired!, clientKey:%{pub lic, location:escape_only}s, originalReason:%{public, location:escape_only}s}",  (uint8_t *)&v9,  0x26u);
    }
  }

void sub_1008FED7C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)(a1 + 16);
  *(void *)std::stringbuf::string_type buf = a2;
  id v8 = sub_1008FF6A8(a1 + 16, a2, (uint64_t)&unk_1012CF090, (__int128 **)buf) + 40;
  uint64_t v9 = &dword_100000014;
  while (v9 != -4)
  {
    uint64_t v10 = *(unsigned int *)((char *)&unk_101340A90 + v9);
    v9 -= 4LL;
    if (*(_DWORD *)&v8[4 * v10]) {
      goto LABEL_7;
    }
  }

  LODWORD(v10) = 0;
LABEL_7:
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101860838);
  }
  __int16 v11 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v12 = (uint64_t *)a2;
    }
    else {
      uint64_t v12 = *(uint64_t **)a2;
    }
    *(_DWORD *)std::stringbuf::string_type buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2082;
    __int16 v25 = v12;
    __int16 v26 = 2050;
    uint64_t v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLIUA updating AssertionRecord, ClientKey:%{public, location:escape_only}s, Assert ionLevel:%{public, location:CLClientInUseLevel}lld}",  buf,  0x26u);
  }

  (*(void (**)(uint64_t, unsigned __int8 *))(a4 + 16))(a4, v8);
  uint64_t v13 = &dword_100000014;
  while (v13 != -4)
  {
    uint64_t v14 = *(unsigned int *)((char *)&unk_101340A90 + v13);
    v13 -= 4LL;
    if (*(_DWORD *)&v8[4 * v14]) {
      goto LABEL_20;
    }
  }

  uint64_t v14 = 0LL;
LABEL_20:
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101860838);
  }
  __int16 v15 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v16 = (uint64_t *)a2;
    }
    else {
      uint64_t v16 = *(uint64_t **)a2;
    }
    *(_DWORD *)std::stringbuf::string_type buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2082;
    __int16 v25 = v16;
    __int16 v26 = 2050;
    uint64_t v27 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLIUA AssertionRecord updated, ClientKey:%{public, location:escape_only}s, Asserti onLevel:%{public, location:CLClientInUseLevel}lld}",  buf,  0x26u);
  }

  if (!(_DWORD)v14) {
    sub_100588F4C(v7, a2);
  }
  if ((_DWORD)v14 != (_DWORD)v10 && *(void *)(a1 + 56))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860838);
    }
    uint64_t v17 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2[23] & 0x80u) == 0) {
        uint32_t v18 = (uint64_t *)a2;
      }
      else {
        uint32_t v18 = *(uint64_t **)a2;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      __int16 v23 = "";
      __int16 v24 = 2082;
      __int16 v25 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#CLIUA in-use level changed for client, ClientKey:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v19 = *(void *)(a1 + 56);
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v20 = (uint64_t *)a2;
    }
    else {
      uint64_t v20 = *(uint64_t **)a2;
    }
    (*(void (**)(uint64_t, CLClientKeyPath *, uint64_t))(*(void *)v19 + 16LL))( v19,  +[CLClientKeyPath clientKeyPathWithClientKey:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientKey:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v20)),  v14);
  }

uint64_t sub_1008FF108(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 32);
  if (!*(_BYTE *)(result + 36)) {
    return sub_1008FF154(a2, v2);
  }
  ++*(_DWORD *)(a2 + 4 * v2);
  return result;
}

uint64_t sub_1008FF154(uint64_t result, unsigned int a2)
{
  if (a2 >= 6) {
    sub_10000C918("array::at");
  }
  int v2 = *(_DWORD *)(result + 4LL * a2);
  *(_DWORD *)(result + 4LL * a2) = v2 - 1;
  if (v2 <= 0) {
    sub_1012535B0();
  }
  return result;
}

BOOL sub_1008FF190(const std::string *a1)
{
  return std::string::compare(a1 + 1, "Location in use on paired watch by 3rd party app") == 0;
}

void sub_1008FF1B8(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1008FF1E4(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1008FF21C(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_1008FF258((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
  }

void sub_1008FF258(uint64_t a1)
{
}

unsigned __int8 *sub_1008FF294(uint64_t a1, unsigned __int8 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }

    __int16 v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }

          else
          {
            v17 &= v12 - 1;
          }

          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_1008FF51C(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1LL;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100019E10(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }

  __int16 v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *__int16 v24 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }

      else
      {
        v25 &= v12 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0LL;
  ++*v9;
  sub_1008FF618((uint64_t)v27, 0LL);
  return i;
}

void sub_1008FF504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

char *sub_1008FF51C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x78uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + _Block_object_dispose(va, 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0LL;
  *((void *)v10 + 1) = a2;
  uint64_t result = sub_1008FF5A0((char *)v10 + 16, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1008FF588(_Unwind_Exception *a1)
{
}

char *sub_1008FF5A0(char *__dst, __int128 *a2, __int128 *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)char __dst = v5;
  }

  sub_1008FDB14(__dst + 24, a3);
  return __dst;
}

void sub_1008FF5FC(_Unwind_Exception *exception_object)
{
}

void sub_1008FF618(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_1008FF258((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

unsigned __int8 *sub_1008FF65C(void *a1, unsigned __int8 *a2)
{
  uint64_t result = sub_100121918(a1, a2);
  if (result)
  {
    sub_10005BEB8(a1, result, (uint64_t)v4);
    sub_1008FF618((uint64_t)v4, 0LL);
    return (unsigned __int8 *)1;
  }

  return result;
}

unsigned __int8 *sub_1008FF6A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  id v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_1008FF93C(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100019E10(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1008FF918( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10004B64C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1008FF93C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  id v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  void *v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    double v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  v8[5] = 0LL;
  v8[6] = 0LL;
  v8[7] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1008FF9CC(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10004B64C(v3, v2);
  _Unwind_Resume(a1);
}

  ;
}

void sub_1008FFA20(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

BOOL sub_1008FFA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    mach_error_t v7 = -536870187;
    uint64_t v23 = 256LL;
    mach_error_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(void *)v3 + 80LL))( v3,  a2,  a3,  &v25,  &v23);
    if (v8 == -536870187)
    {
      while (*(_DWORD *)(a1 + 16) < 5u)
      {
        if (qword_1019344C0 != -1) {
          dispatch_once(&qword_1019344C0, &stru_101860858);
        }
        unint64_t v9 = (os_log_s *)qword_1019344C8;
        if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
        {
          int v10 = dword_101340AA8[*(int *)(a1 + 16)];
          *(_DWORD *)std::stringbuf::string_type buf = 67109120;
          LODWORD(v32) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CMA busy. Waiting %d microseconds.", buf, 8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344C0 != -1) {
            dispatch_once(&qword_1019344C0, &stru_101860858);
          }
          int v11 = dword_101340AA8[*(int *)(a1 + 16)];
          v24[0] = 67109120;
          v24[1] = v11;
          uint8x8_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "CMA busy. Waiting %d microseconds.",  v24);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionCoprocessorCommander::sendCommandPayload(const void *, size_t)",  "%s\n",  v12);
        }

        usleep(dword_101340AA8[*(int *)(a1 + 16)]);
        ++*(_DWORD *)(a1 + 16);
        uint64_t v23 = 256LL;
        mach_error_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(*(void *)v3 + 80LL))( v3,  a2,  a3,  &v25,  &v23);
        if (v8 != -536870187) {
          goto LABEL_15;
        }
      }
    }

    else
    {
LABEL_15:
      mach_error_t v7 = v8;
      if (!v8)
      {
        *(_DWORD *)(a1 + 16) = 0;
        return 1LL;
      }
    }

    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101860858);
    }
    unint64_t v13 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      unint64_t v14 = mach_error_string(v7);
      int v15 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)std::stringbuf::string_type buf = 136446722;
      __int16 v32 = v14;
      __int16 v33 = 1026;
      mach_error_t v34 = v7;
      __int16 v35 = 1026;
      int v36 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "sendCommandPayload() = %{public}s (0x%{public}x),fNumConsecutiveCMAFailures,%{public}d",  buf,  0x18u);
    }

    BOOL v16 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v16)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101860858);
      }
      uint64_t v18 = qword_1019344C8;
      BOOL v19 = mach_error_string(v7);
      int v20 = *(_DWORD *)(a1 + 16);
      int v25 = 136446722;
      __int16 v26 = v19;
      __int16 v27 = 1026;
      mach_error_t v28 = v7;
      __int16 v29 = 1026;
      int v30 = v20;
      unint64_t v21 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  17LL,  "sendCommandPayload() = %{public}s (0x%{public}x),fNumConsecutiveCMAFailures,%{public}d",  &v25,  24);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMotionCoprocessorCommander::sendCommandPayload(const void *, size_t)",  "%s\n");
LABEL_32:
      if (v21 != buf) {
        free(v21);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_1019344C0 != -1) {
      dispatch_once(&qword_1019344C0, &stru_101860858);
    }
    size_t v22 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "cmaHidDriverInterface NULL", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101860858);
      }
      LOWORD(v25) = 0;
      unint64_t v21 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344C8,  1LL,  "cmaHidDriverInterface NULL",  &v25,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMotionCoprocessorCommander::sendCommandPayload(const void *, size_t)",  "%s\n");
      goto LABEL_32;
    }
  }

  return result;
}

void sub_1008FFF5C(id a1)
{
  qword_1019344C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_100900070(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10090034C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __int128 v9 = *(_OWORD *)(a2 + 16);
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  __int128 v13 = *(_OWORD *)(a2 + 96);
  __int128 v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  __int128 v15 = *(_OWORD *)(a2 + 144);
  __int128 v16 = *(_OWORD *)(a2 + 160);
  __int128 v17 = *(_OWORD *)(a2 + 176);
  *(void *)(v8 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 144) = v15;
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[5] + 1LL;
  a1[5] = v19;
  unint64_t v20 = v18 + v19;
  uint64_t v21 = a1[1];
  size_t v22 = (void *)(v21 + 8 * (v20 / 0x14));
  uint64_t v23 = *v22 + 200 * (v20 % 0x14);
  if (a1[2] == v21) {
    uint64_t v23 = 0LL;
  }
  if (v23 == *v22) {
    uint64_t v23 = *(v22 - 1) + 4000LL;
  }
  return v23 - 200;
}

uint64_t sub_1009002F0(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x14) {
    a2 = 1;
  }
  if (v2 < 0x28) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8LL;
    *(void *)(a1 + 32) -= 20LL;
  }

  return v4 ^ 1u;
}

void sub_10090034C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x14;
  unint64_t v4 = v2 - 20;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      mach_error_t v34 = (char *)sub_1000071BC(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100900614( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100900708()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1009007A4(_Unwind_Exception *a1)
{
}

void sub_1009007BC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100900848(_Unwind_Exception *a1)
{
}

void sub_100900860()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101340ADC;
      v1[3] = unk_101340AEC;
      v1[4] = xmmword_101340AFC;
      v1[0] = xmmword_101340ABC;
      v1[1] = unk_101340ACC;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_100900934(_Unwind_Exception *a1)
{
}

uint64_t sub_10090094C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019992E0, (void *)&_mh_execute_header);
}

void sub_100900A34(id a1)
{
  qword_1019992F8 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLOnBodyNotifierSilo");
}

uint64_t sub_100900AE8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100900CAC;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_101999318 != -1) {
    dispatch_once(&qword_101999318, block);
  }
  return qword_1019A1858;
}

void sub_100900C88(id a1)
{
  if ((sub_1004F97F4() & 0x800) != 0) {
    byte_101999308 = 1;
  }
}

void *sub_100900CAC(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  sub_100413284(v2, &v11);
  char v3 = sub_1002A6F64(v11, "ForceAPOnBodyDetection", &v13);
  char v4 = v3;
  uint64_t v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((v4 & 1) != 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }

  if ((v3 & 1) == 0) {
LABEL_6:
  }
    BOOL v13 = 0;
LABEL_7:
  __int16 v8 = sub_1004F97F4();
  if (v13 || (v8 & 0x1000) == 0)
  {
    __int128 v9 = operator new(0x4488uLL);
    BOOL result = (void *)sub_100E305C0(v9, *(void *)(a1 + 32));
  }

  else
  {
    __int128 v9 = operator new(0x78uLL);
    BOOL result = sub_100C5F5C0((uint64_t)v9, *(void **)(a1 + 32));
  }

  qword_1019A1858 = (uint64_t)v9;
  return result;
}

void sub_100900D8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100900DB4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100900E9C(a1, "CLOnBodyNotifier", a2);
  *(void *)uint64_t v3 = off_1018608C8;
  *(_BYTE *)(v3 + 109) = 0;
  char v4 = (BOOL *)(v3 + 109);
  uint64_t v5 = sub_1006E27E8();
  sub_100413284(v5, &v12);
  char v6 = sub_1002A6F64(v12, "LogOnBody", v4);
  char v7 = v6;
  __int16 v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0) {
        return a1;
      }
      goto LABEL_6;
    }
  }

  if ((v6 & 1) == 0) {
LABEL_6:
  }
    BOOL *v4 = 0;
  return a1;
}

void sub_100900E78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100900E9C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_101860A68;
  sub_1010DDBC0((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  return a1;
}

void sub_100900F1C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100900F38(uint64_t a1)
{
  *(void *)a1 = off_101860A68;
  [*(id *)(a1 + 48) invalidate];

  sub_100231CA4(a1 + 80, *(void **)(a1 + 88));
  sub_100231CF0(a1 + 56, *(void **)(a1 + 64));
  return a1;
}

uint64_t sub_100900FB8(_BYTE *a1)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 224LL))(a1);
  a1[108] = 1;
  return result;
}

void *sub_100900FE8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_100901060(uint64_t a1)
{
  int v3 = 0;
  return 1LL;
}

uint64_t sub_1009010AC(uint64_t a1)
{
  int v3 = 0;
  return 1LL;
}

uint64_t sub_1009010F8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_101860B48;
  *(void *)(a1 + _Block_object_dispose(va, 8) = -[CLNotifierClientAdapter initWithClient:]( objc_alloc(&OBJC_CLASS___CLNotifierClientAdapter),  "initWithClient:",  a1);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = objc_msgSend( objc_msgSend(a4, "vendor"),  "proxyForService:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(void *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1009011CC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  __int16 v8 = operator new(0x30uLL);
  sub_1010DDBC0(__p, "CLOnBodyNotifier");
  sub_1009010F8((uint64_t)v8, 0LL, (uint64_t *)__p, a3, a1, a2);
  void *v8 = off_1018609C0;
  *a4 = v8;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100901268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

id sub_100901294(uint64_t a1)
{
  return objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLOnBodyNotifier"),  "syncgetDoSync:",  a1);
}

void sub_1009012CC(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::stringbuf::string_type buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101860A38);
      }
      char v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101860A38);
        }
        uint64_t v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        uint64_t v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        id v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::removeC lient(int) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_100901540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198DAC8);
}

uint64_t sub_100901554(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)std::stringbuf::string_type buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        *(void *)std::stringbuf::string_type buf = 0LL;
        *(void *)&uint8_t buf[8] = 0LL;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v36 = sub_100902DE8(buf);
          sub_100902E68((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_10198DAC9;
        HIDWORD(v40) = v17;
        *(void *)std::stringbuf::string_type buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v40) = *a3;
        *(void *)std::stringbuf::string_type buf = (char *)&v40 + 4;
        __int128 v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v40) = *a3;
        *(void *)std::stringbuf::string_type buf = (char *)&v40 + 4;
        unint64_t v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::stringbuf::string_type buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)std::stringbuf::string_type buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101860A38);
  }
  id v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101860A38);
    }
    __int16 v37 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v40) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    uint64_t v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::registerFor Notification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOnBodyNotifier_Type::Not ification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_1009019B0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101860A38);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101860A38);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::clientReg istered(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_100901C30(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101860A38);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int16 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101860A38);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                unint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>: :unregisterForNotification(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notif ication, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, Regi strationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

uint64_t sub_100901FB8(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = (char *)operator new(0x28uLL);
  *((void *)v6 + 2) = 0LL;
  *(void *)uint64_t v6 = off_101860B90;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 24) = *a3;
  *(void *)&__int128 v13 = v6 + 24;
  *((void *)&v13 + 1) = v6;
  int v12 = *a2;
  uint64_t v14 = &v12;
  int v7 = sub_10023347C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_1012CF090, &v14);
  sub_10005F550((uint64_t)(v7 + 8), &v13);
  BOOL v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    int v9 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_10090208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1009020A0(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101860A38);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::stringbuf::string_type buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      uint64_t v68 = v12;
      __int16 v69 = 2050;
      uint64_t v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      uint64_t v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0x28uLL);
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_101860B90;
      *((void *)v27 + 1) = 0LL;
      *(_OWORD *)(v27 + 24) = *a3;
      *(void *)std::stringbuf::string_type buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_1009037B4(a3);
    if (a5 == -1)
    {
      sub_100903834((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          __int16 v37 = (uint64_t *)v33;
        }
        else {
          __int16 v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          uint64_t v43 = (unint64_t *)v38;
        }
        else {
          uint64_t v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        uint64_t v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_101860A38);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            unint64_t v46 = v71;
          }
          else {
            unint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::stringbuf::string_type buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_101860A38);
          }
          uint64_t v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            uint64_t v49 = __p;
          }
          else {
            uint64_t v49 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          double v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::notif yClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLOn BodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationI nfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      uint64_t v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      uint64_t v52 = v40 + 3;
      uint64_t v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      double v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          uint64_t v59 = v53;
        }
        else {
          uint64_t v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          double v56 = v53;
        }
        uint64_t v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_100902E68((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_1009026D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100902724(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101860A38);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 136315138;
      __int16 v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101860A38);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClien ts() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101860A38);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::stringbuf::string_type buf = 136315394;
      __int16 v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101860A38);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClien ts() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    unint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        int v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_101860A38);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::stringbuf::string_type buf = 136315650;
              __int16 v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101860A38);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::l istClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifie r_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                int v12 = v18;
              }

              while (!v19);
            }

            int v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            unint64_t v10 = v26;
          }

          while (!v19);
        }

        unint64_t v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_100902CD0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100902D5C(a1);
  operator delete(v1);
}

id sub_100902CE4(uint64_t a1, int a2, void *a3)
{
  id result = sub_100902F54(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0LL, &v6, result, *(void *)(a1 + 32));
  }

  return result;
}

void sub_100902D30(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100902D5C(uint64_t a1)
{
  *(void *)a1 = &off_101860B48;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0LL;
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

void sub_100902DBC(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_100902DE8(_OWORD *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  _OWORD *v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100902F44;
  int v7 = &unk_10181D3D0;
  BOOL v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

_BYTE *sub_100902E68(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_100902F54(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    int v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    int v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    id result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_100902F44(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_100902F54(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_100902FCC(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_100903354(a1);
  }
  else {
    return 0LL;
  }
}

id sub_100902FCC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100903700((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101340C03LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = 0x8000000101340C03LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  int v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOnBodyNotifier_Type::NotificationData, Callbac uint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100903354(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    int v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101340C03LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = 0x8000000101340C03LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_101860B60);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  int v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOnBodyNotifier_Type::NotificationData, Callbac uint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_100903700(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D3BF0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)16) {
      sub_1012538F4();
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_100903774(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101860B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100903788(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101860B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

CLCppContainer *sub_1009037B4(_OWORD *a1)
{
  id v2 = operator new(0x10uLL);
  _OWORD *v2 = *a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_100903C08;
  int v7 = &unk_10181D3D0;
  uint64_t v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_100903834(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        double v51 = v9;
        id v13 = sub_100902F54(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        unint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          unint64_t v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_100902E68(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              double v51 = v29;
              uint64_t v34 = v29[6];
              unint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      unint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      unint64_t v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      unint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_101860A38);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_101860A38);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::invokeC lientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLOnBodyNotifier_Type::Noti fication, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, Reg istrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

void sub_100903C08(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_100903C18(uint64_t a1)
{
  *(void *)a1 = off_101860BE0;
  sub_10090C9D4(a1 + 8);
  sub_10090C9D4(a1 + 880);
  sub_100D2D9A4(a1 + 1752);
  *(_BYTE *)(a1 + 832) = 1;
  return a1;
}

void sub_100903C60(_Unwind_Exception *a1)
{
  v1[110] = off_101860C40;
  sub_10090C938(v1 + 111);
  v1[1] = off_101860C40;
  sub_10090C938(v1 + 2);
  _Unwind_Resume(a1);
}

void *sub_100903C9C(void *a1)
{
  *a1 = off_101860C40;
  sub_10090C938(a1 + 1);
  return a1;
}

void *sub_100903CD0(void *a1)
{
  *a1 = off_101860BE0;
  a1[110] = off_101860C40;
  sub_10090C938(a1 + 111);
  a1[1] = off_101860C40;
  sub_10090C938(a1 + 2);
  return a1;
}

void sub_100903D1C(void *a1)
{
  *a1 = off_101860BE0;
  a1[110] = off_101860C40;
  sub_10090C938(a1 + 111);
  a1[1] = off_101860C40;
  sub_10090C938(a1 + 2);
  operator delete(a1);
}

void sub_100903D68(uint64_t a1)
{
}

void sub_100903D90(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_10090B27C(a1);
  *(_DWORD *)(v1 + 420) = 0xFFFF;
  *(void *)(v1 + 424) = 0LL;
  *(void *)(v1 + 432) = 0LL;
  *(void *)(v1 + 440) = 0xBFF0000000000000LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(v1 + 44_Block_object_dispose(va, 8) = xmmword_1012EA5D0;
  *(_OWORD *)(v1 + 464) = _Q1;
  *(_OWORD *)(v1 + 480) = _Q1;
  *(void *)(v1 + 496) = 0xBFF0000000000000LL;
  *(_DWORD *)(v1 + 504) = 0;
  *(void *)(v1 + 516) = 0LL;
  *(void *)(v1 + 524) = 0LL;
  *(void *)(v1 + 50_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(v1 + 532) = 0;
  *(void *)(v1 + 536) = 0xBFF0000000000000LL;
  *(_DWORD *)(v1 + 544) = 0x7FFFFFFF;
  *(void *)(v1 + 556) = 0LL;
  *(void *)(v1 + 564) = 0LL;
  *(void *)(v1 + 54_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v1 + 572) = 0;
  uint64_t v7 = *(void *)(v1 + 112);
  v1 += 112LL;
  *(void *)(v1 + _Block_object_dispose(va, 8) = v7;
  uint64_t v8 = 0LL;
  sub_10009BEEC(v1, 4uLL, &v8);
  *(_DWORD *)(v1 + 472) = 0;
}

uint64_t sub_100903E30(uint64_t a1, double *a2, int *a3, int *a4)
{
  int v8 = sub_100903E8C(a1 + 8, a2, a3, a4);
  return v8 & sub_100903E8C(a1 + 880, a2, a3, a4);
}

uint64_t sub_100903E8C(uint64_t a1, double *a2, int *a3, int *a4)
{
  if (!*(_BYTE *)(a1 + 824)
    || !*(_BYTE *)(a1 + 249)
    || *(_BYTE *)(a1 + 825)
    || (double v8 = *(double *)(a1 + 340), *a2 - v8 <= 60.0))
  {
    sub_10090DAC0(a1, *a2);
    *(_DWORD *)(a1 + 624) = *(_DWORD *)(a1 + 628);
    *(_DWORD *)(a1 + 62_Block_object_dispose(va, 8) = *a3;
    if (*(_BYTE *)(a1 + 249))
    {
      if ((sub_100D2E600( (double *)(a1 + 832),  (double *)(a1 + 208),  (double *)(a1 + 200),  **(double **)(a1 + 112) * 57.2957795,  *(float *)(a1 + 584)) & 1) == 0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        unint64_t v14 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
        }

        BOOL v15 = sub_1002921D0(115, 0);
        uint64_t result = 0LL;
        if (v15)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          *(_WORD *)BOOL v38 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:calc_dNdE failed",  v38,  2,  v35);
          goto LABEL_36;
        }

        return result;
      }

      if ((sub_10090DBE8(a1, a2) & 1) == 0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        uint64_t v17 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "KF:Prediction failed", buf, 2u);
        }

        BOOL v18 = sub_1002921D0(115, 0);
        uint64_t result = 0LL;
        if (v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          *(_WORD *)BOOL v38 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:Prediction failed",  v38,  2,  v35);
          goto LABEL_36;
        }

        return result;
      }

      sub_10090E178(a1, (uint64_t)"propagation for motion", -1.0);
      *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
      switch(*a3)
      {
        case 1:
        case 10:
          goto LABEL_14;
        case 2:
        case 11:
          if (*a4 < 1) {
            goto LABEL_50;
          }
LABEL_14:
          *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 1;
          if ((sub_10090E688(a1) & 1) == 0)
          {
            sub_10090B27C(a1);
            *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
            *(void *)(a1 + 624) = 0LL;
          }

          __int128 v11 = *(_OWORD *)(a1 + 656);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 640);
          *(_OWORD *)(a1 + 40) = v11;
          uint64_t v12 = *(void *)(a1 + 672);
LABEL_49:
          *(void *)(a1 + 56) = v12;
LABEL_50:
          if (*(_BYTE *)(a1 + 249)
            && sqrt(**(double **)(a1 + 88) + *(double *)(*(void *)(a1 + 88) + 40LL)) > 900000.0)
          {
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            int v28 = (os_log_s *)qword_101934838;
            if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 134349056;
              uint64_t v40 = 0x412B774000000000LL;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "KF:re-init,uncertainty growth>%{public}.0lf",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934830 != -1) {
                dispatch_once(&qword_101934830, &stru_101860CB0);
              }
              *(_DWORD *)BOOL v38 = 134349056;
              *(void *)&v38[4] = 0x412B774000000000LL;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:re-init,uncertainty growth>%{public}.0lf",  v38,  12);
              uint64_t v34 = (uint8_t *)v33;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotion Activity::Confidence &)",  "%s\n",  v33);
              if (v34 != buf) {
                free(v34);
              }
            }

            sub_10090B27C(a1);
          }

          sub_10090E178(a1, (uint64_t)"motion update", -1.0);
          break;
        case 4:
          __int128 v26 = *(_OWORD *)(a1 + 704);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 688);
          *(_OWORD *)(a1 + 40) = v26;
          uint64_t v12 = *(void *)(a1 + 720);
          goto LABEL_49;
        case 8:
          __int128 v27 = *(_OWORD *)(a1 + 752);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 736);
          *(_OWORD *)(a1 + 40) = v27;
          uint64_t v12 = *(void *)(a1 + 768);
          goto LABEL_49;
        default:
          __int128 v24 = *(_OWORD *)(a1 + 800);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
          *(_OWORD *)(a1 + 40) = v24;
          uint64_t v12 = *(void *)(a1 + 816);
          goto LABEL_49;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
      int v13 = *a3;
      if (*a3 <= 40)
      {
        switch(v13)
        {
          case 1:
          case 10:
            uint64_t result = 1LL;
            goto LABEL_42;
          case 2:
          case 11:
            uint64_t result = 1LL;
            if (*a4 >= 1)
            {
LABEL_42:
              *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 1;
              __int128 v22 = *(_OWORD *)(a1 + 656);
              *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 640);
              *(_OWORD *)(a1 + 40) = v22;
              *(void *)(a1 + 56) = *(void *)(a1 + 672);
            }

            break;
          case 4:
            goto LABEL_43;
          case 8:
            __int128 v25 = *(_OWORD *)(a1 + 752);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 736);
            *(_OWORD *)(a1 + 40) = v25;
            uint64_t v21 = *(void *)(a1 + 768);
            goto LABEL_46;
          default:
            goto LABEL_40;
        }

        return result;
      }

      if (v13 == 41)
      {
LABEL_43:
        __int128 v23 = *(_OWORD *)(a1 + 704);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 688);
        *(_OWORD *)(a1 + 40) = v23;
        uint64_t v21 = *(void *)(a1 + 720);
      }

      else
      {
LABEL_40:
        __int128 v20 = *(_OWORD *)(a1 + 800);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
        *(_OWORD *)(a1 + 40) = v20;
        uint64_t v21 = *(void *)(a1 + 816);
      }

BOOL sub_100904754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_10029286C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:invalid update,null island",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      uint64_t v8 = qword_101934838;
      *(_WORD *)double v96 = 0;
      LODWORD(v90) = 2;
      uint64_t v89 = (int *)v96;
      uint64_t v9 = "#Warning,KF:invalid update,null island";
LABEL_88:
      uint64_t v56 = 0LL;
      goto LABEL_89;
    }

    return result;
  }

  if (*(double *)(a2 + 20) > 0.0)
  {
    double v10 = *(double *)(a1 + 1164);
    *(_OWORD *)&v96[4] = 0uLL;
    *(_OWORD *)&v96[20] = xmmword_1012E0070;
    __asm { FMOV            V1.2D, #-1.0 }

    *(_OWORD *)&v96[36] = _Q1;
    *(_OWORD *)&v96[52] = _Q1;
    *(_OWORD *)&v96[68] = _Q1;
    *(_DWORD *)double v96 = 0xFFFF;
    *(_DWORD *)&v96[84] = 0;
    __int128 v97 = 0uLL;
    *(void *)&v96[88] = 0xBFF0000000000000LL;
    *(void *)((char *)&v98 + 4) = 0xBFF0000000000000LL;
    LODWORD(v9_Block_object_dispose(va, 8) = 0;
    HIDWORD(v9_Block_object_dispose(va, 8) = 0x7FFFFFFF;
    memset(v99, 0, 25);
    __int16 v100 = 0;
    *(_DWORD *)int v91 = 0xFFFF;
    *(_OWORD *)&v91[4] = 0uLL;
    *(_OWORD *)&v91[20] = xmmword_1012E0070;
    *(_OWORD *)&v91[36] = _Q1;
    *(_OWORD *)&v91[52] = _Q1;
    *(_OWORD *)&v91[68] = _Q1;
    *(_DWORD *)&v91[84] = 0;
    __int128 v92 = 0uLL;
    *(void *)&v91[88] = 0xBFF0000000000000LL;
    LODWORD(v93) = 0;
    *(void *)((char *)&v93 + 4) = 0xBFF0000000000000LL;
    HIDWORD(v93) = 0x7FFFFFFF;
    memset(v94, 0, 25);
    v95[0] = 0;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v16 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *(_DWORD *)(a2 + 96);
      uint64_t v18 = *(void *)(a2 + 4);
      uint64_t v19 = *(void *)(a2 + 12);
      uint64_t v20 = *(void *)(a2 + 20);
      uint64_t v21 = *(void *)(a2 + 28);
      uint64_t v22 = *(void *)(a2 + 36);
      int v23 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)std::stringbuf::string_type buf = 67241729;
      *(_DWORD *)int v112 = v17;
      *(_WORD *)&v112[4] = 2049;
      *(void *)&v112[6] = v18;
      *(_WORD *)&v112[14] = 2049;
      *(void *)&v112[16] = v19;
      __int16 v113 = 2050;
      uint64_t v114 = v20;
      __int16 v115 = 2049;
      uint64_t v116 = v21;
      __int16 v117 = 2050;
      uint64_t v118 = v22;
      __int16 v119 = 1026;
      int v120 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,alt,%{private}.3f,vun c,%{public}.3f,conf,%{public}d",  buf,  0x40u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      int v76 = *(_DWORD *)(a2 + 96);
      uint64_t v77 = *(void *)(a2 + 4);
      uint64_t v78 = *(void *)(a2 + 12);
      uint64_t v79 = *(void *)(a2 + 20);
      uint64_t v80 = *(void *)(a2 + 28);
      uint64_t v81 = *(void *)(a2 + 36);
      int v82 = *(_DWORD *)(a2 + 84);
      int v101 = 67241729;
      *(_DWORD *)std::string v102 = v76;
      *(_WORD *)&v102[4] = 2049;
      *(void *)&v102[6] = v77;
      *(_WORD *)&v102[14] = 2049;
      *(void *)&v102[16] = v78;
      __int16 v103 = 2050;
      uint64_t v104 = v79;
      __int16 v105 = 2049;
      uint64_t v106 = v80;
      __int16 v107 = 2050;
      uint64_t v108 = v81;
      __int16 v109 = 1026;
      int v110 = v82;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,alt,%{private}.3f,vun c,%{public}.3f,conf,%{public}d",  &v101,  64);
      double v84 = (uint8_t *)v83;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)",  "%s\n",  v83);
      if (v84 != buf) {
        free(v84);
      }
    }

    double v24 = -1.0;
    int v25 = sub_10090549C(a1 + 880, a2, (uint64_t)v91, v95, 0);
    BOOL result = 0LL;
    HIBYTE(v95[0]) = v25;
    if (!v25) {
      return result;
    }
    int v26 = *(_DWORD *)(a2 + 96);
    if (LOBYTE(v95[0]))
    {
      if (v26 == 4 && *(_DWORD *)(a2 + 84) == 65 && v24 < 36000.0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        __int128 v27 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = *(void *)(a2 + 4);
          uint64_t v29 = *(void *)(a2 + 12);
          *(_DWORD *)std::stringbuf::string_type buf = 134283777;
          *(void *)int v112 = v28;
          *(_WORD *)&v112[8] = 2049;
          *(void *)&v112[10] = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f",  buf,  0x16u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        uint64_t v8 = qword_101934838;
        uint64_t v30 = *(void *)(a2 + 4);
        uint64_t v31 = *(void *)(a2 + 12);
        int v101 = 134283777;
        *(void *)std::string v102 = v30;
        *(_WORD *)&v102[8] = 2049;
        *(void *)&v102[10] = v31;
        LODWORD(v90) = 22;
        uint64_t v89 = &v101;
        uint64_t v9 = "KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f";
        goto LABEL_67;
      }

      if (v24 <= 7200.0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        uint64_t v49 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          int v50 = *(_DWORD *)(a2 + 96);
          uint64_t v51 = *(void *)(a2 + 4);
          uint64_t v52 = *(void *)(a2 + 12);
          *(_DWORD *)std::stringbuf::string_type buf = 67240705;
          *(_DWORD *)int v112 = v50;
          *(_WORD *)&v112[4] = 2049;
          *(void *)&v112[6] = v51;
          *(_WORD *)&v112[14] = 2049;
          *(void *)&v112[16] = v52;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected",  buf,  0x1Cu);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        uint64_t v8 = qword_101934838;
        int v53 = *(_DWORD *)(a2 + 96);
        uint64_t v54 = *(void *)(a2 + 4);
        uint64_t v55 = *(void *)(a2 + 12);
        int v101 = 67240705;
        *(_DWORD *)std::string v102 = v53;
        *(_WORD *)&v102[4] = 2049;
        *(void *)&v102[6] = v54;
        *(_WORD *)&v102[14] = 2049;
        *(void *)&v102[16] = v55;
        LODWORD(v90) = 28;
        uint64_t v89 = &v101;
        uint64_t v9 = "KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected";
LABEL_67:
        uint64_t v56 = 2LL;
LABEL_89:
        double v85 = _os_log_send_and_compose_impl(2LL, 0LL, buf, 1628LL, &_mh_execute_header, v8, v56, v9, v89, v90);
        BOOL v38 = v86;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)",  "%s\n",  v85);
LABEL_90:
        if (v38 != buf) {
          free(v38);
        }
        return 0LL;
      }

      sub_10090B27C(a1 + 8);
      sub_10090B27C(a1 + 880);
      int v33 = sub_10090549C(a1 + 880, a2, (uint64_t)v91, v95, 0);
      BOOL result = 0LL;
      if (!v33) {
        return result;
      }
      if (LOBYTE(v95[0]))
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        uint64_t v34 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_FAULT,  "KF:input should not be rejected after a hard reset",  buf,  2u);
        }

        BOOL v35 = sub_1002921D0(115, 0);
        BOOL result = 0LL;
        if (v35)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          LOWORD(v101) = 0;
          LODWORD(v90) = 2;
          double v36 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:input should not be rejected after a hard reset",  &v101,  v90);
          BOOL v38 = v37;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)",  "%s\n",  v36);
          goto LABEL_90;
        }

        return result;
      }

      __int128 v62 = v93;
      *(_OWORD *)(a3 + 96) = v92;
      *(_OWORD *)(a3 + 112) = v62;
      *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)v94;
      *(_OWORD *)(a3 + 140) = *(_OWORD *)&v94[12];
      __int128 v63 = *(_OWORD *)&v91[48];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v91[32];
      *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v63;
      __int128 v64 = *(_OWORD *)&v91[80];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)&v91[64];
      *(_OWORD *)(a3 + 80) = v64;
      __int128 v65 = *(_OWORD *)&v91[16];
      *(_OWORD *)a3 = *(_OWORD *)v91;
      *(_OWORD *)(a3 + 16) = v65;
      sub_10090B2FC(0LL, a2, a3, (uint64_t)"airTravelMode,ltn");
      sub_10090B624(a1);
    }

    else
    {
      if (v26 == 4 && *(int *)(a2 + 84) > 72 || (sub_10090B6F8(v26) & 1) != 0 || v24 < 600.0)
      {
        sub_10090B624(a1);
        __int128 v45 = v93;
        *(_OWORD *)(a3 + 96) = v92;
        *(_OWORD *)(a3 + 112) = v45;
        *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)v94;
        *(_OWORD *)(a3 + 140) = *(_OWORD *)&v94[12];
        __int128 v46 = *(_OWORD *)&v91[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v91[32];
        *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v46;
        __int128 v47 = *(_OWORD *)&v91[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v91[64];
        *(_OWORD *)(a3 + 80) = v47;
        __int128 v48 = *(_OWORD *)&v91[16];
        *(_OWORD *)a3 = *(_OWORD *)v91;
        *(_OWORD *)(a3 + 16) = v48;
        BOOL v44 = "intervalOfInterest,ltn";
      }

      else if ((sub_10090549C(a1 + 8, a2, (uint64_t)v96, &v100, 0) & 1) != 0)
      {
        if ((_BYTE)v100)
        {
          sub_10090B624(a1);
          __int128 v40 = v93;
          *(_OWORD *)(a3 + 96) = v92;
          *(_OWORD *)(a3 + 112) = v40;
          *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)v94;
          *(_OWORD *)(a3 + 140) = *(_OWORD *)&v94[12];
          __int128 v41 = *(_OWORD *)&v91[48];
          *(_OWORD *)(a3 + 32) = *(_OWORD *)&v91[32];
          *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v41;
          __int128 v42 = *(_OWORD *)&v91[80];
          *(_OWORD *)(a3 + 64) = *(_OWORD *)&v91[64];
          *(_OWORD *)(a3 + 80) = v42;
          __int128 v43 = *(_OWORD *)&v91[16];
          *(_OWORD *)a3 = *(_OWORD *)v91;
          *(_OWORD *)(a3 + 16) = v43;
          BOOL v44 = "notStatic,ltn";
        }

        else
        {
          *(void *)(a1 + 64) = *(void *)(a1 + 936);
          __int128 v66 = *(_OWORD *)(a1 + 920);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 904);
          *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v66;
          *(_BYTE *)(a1 + 256) = *(_BYTE *)(a1 + 1128);
          *(void *)(a1 + 632) = *(void *)(a1 + 1504);
          uint64_t v39 = sub_10090BAB8(a1 + 888, a1 + 16);
          __int128 v67 = *(_OWORD *)&v96[80];
          *(_OWORD *)(a3 + 64) = *(_OWORD *)&v96[64];
          *(_OWORD *)(a3 + 80) = v67;
          __int128 v68 = *(_OWORD *)&v96[48];
          *(_OWORD *)(a3 + 32) = *(_OWORD *)&v96[32];
          *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v68;
          *(_OWORD *)(a3 + 140) = *(_OWORD *)&v99[12];
          __int128 v69 = *(_OWORD *)v99;
          __int128 v70 = v97;
          *(_OWORD *)(a3 + 112) = v98;
          *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = v69;
          *(_OWORD *)(a3 + 96) = v70;
          __int128 v71 = *(_OWORD *)&v96[16];
          *(_OWORD *)a3 = *(_OWORD *)v96;
          *(_OWORD *)(a3 + 16) = v71;
          if (v10 > 0.0 && *(double *)(a2 + 20) > 0.0)
          {
            sub_100D2DCA4((double *)(a1 + 1752), a3, a2);
            if (v72 > *(double *)(a3 + 20))
            {
              double v73 = fmax(v72, 1.0);
              uint64_t v74 = *(void *)(a1 + 968);
              double v75 = v73 * v73 * 0.5;
              *(double *)uint64_t v74 = v75;
              *(_OWORD *)(v74 + _Block_object_dispose(va, 8) = 0u;
              *(_OWORD *)(v74 + 24) = 0u;
              *(double *)(v74 + 40) = v75;
              *(_OWORD *)(v74 + 4_Block_object_dispose(va, 8) = 0u;
              *(_OWORD *)(v74 + 64) = 0u;
              *(void *)(v74 + 96) = 0LL;
              *(void *)(v74 + 104) = 0LL;
            }
          }

          BOOL v44 = "staticAssumed,lts";
        }
      }

      else
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        int v57 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:longTermStatic should not fail if longTermNormal succeeded",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          LOWORD(v101) = 0;
          LODWORD(v90) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:longTermStatic should not fail if longTermNormal succeeded",  &v101,  v90);
          uint64_t v88 = (uint8_t *)v87;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)",  "%s\n",  v87);
          if (v88 != buf) {
            free(v88);
          }
        }

        sub_10090B624(a1);
        __int128 v58 = v93;
        *(_OWORD *)(a3 + 96) = v92;
        *(_OWORD *)(a3 + 112) = v58;
        *(_OWORD *)(a3 + 12_Block_object_dispose(va, 8) = *(_OWORD *)v94;
        *(_OWORD *)(a3 + 140) = *(_OWORD *)&v94[12];
        __int128 v59 = *(_OWORD *)&v91[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v91[32];
        *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v59;
        __int128 v60 = *(_OWORD *)&v91[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v91[64];
        *(_OWORD *)(a3 + 80) = v60;
        __int128 v61 = *(_OWORD *)&v91[16];
        *(_OWORD *)a3 = *(_OWORD *)v91;
        *(_OWORD *)(a3 + 16) = v61;
        BOOL v44 = "unexpected,ltn";
      }

      sub_10090B2FC(v39, a2, a3, (uint64_t)v44);
    }

    return 1LL;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  BOOL v32 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,hunc<=0", buf, 2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v8 = qword_101934838;
    *(_WORD *)double v96 = 0;
    LODWORD(v90) = 2;
    uint64_t v89 = (int *)v96;
    uint64_t v9 = "#Warning,KF:invalid update,hunc<=0";
    goto LABEL_88;
  }

  return result;
}

uint64_t sub_10090549C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, char a5)
{
  double v357 = 0.0;
  double v356 = 0.0;
  double v10 = *(double *)(a1 + 256);
  *a4 = 0;
  if (!sub_10029286C(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (*(double *)(a2 + 20) <= 0.0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      BOOL v38 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:invalid update,hunc<=0",  buf,  2u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 0LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      LOWORD(v354[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:invalid update,hunc<=0",  v354,  2);
      int v13 = (uint8_t *)v172;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v172);
      goto LABEL_318;
    }

    double v14 = *(double *)(a2 + 4);
    double v15 = *(double *)(a2 + 12);
    double v16 = *(double *)(a2 + 60);
    double v17 = *(double *)(a2 + 76);
    double v355 = v17;
    double v18 = *(double *)(a2 + 44);
    double v19 = *(double *)(a2 + 52);
    int v20 = *(_DWORD *)(a2 + 84);
    sub_10090C720((uint64_t)v354);
    uint64_t v351 = a3;
    sub_10090BAB8((uint64_t)v354, a1 + 8);
    uint64_t v21 = (_OWORD *)(a1 + 420);
    __int128 v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 420) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 436) = v22;
    __int128 v23 = *(_OWORD *)(a2 + 32);
    __int128 v24 = *(_OWORD *)(a2 + 48);
    __int128 v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 500) = v25;
    *(_OWORD *)(a1 + 452) = v23;
    *(_OWORD *)(a1 + 46_Block_object_dispose(va, 8) = v24;
    __int128 v26 = *(_OWORD *)(a2 + 96);
    __int128 v27 = *(_OWORD *)(a2 + 112);
    __int128 v28 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 532) = v27;
    *(_OWORD *)(a1 + 54_Block_object_dispose(va, 8) = v28;
    *(_OWORD *)(a1 + 516) = v26;
    double v29 = *(double *)(a1 + 456);
    if (v29 > 0.0 && *(double *)(a1 + 448) < -450.0)
    {
      *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0xC07C200000000000LL;
      if (v29 < 300.0) {
        *(void *)(a1 + 456) = 0x4072C00000000000LL;
      }
    }

    uint64_t v30 = a1 + 88;
    if (*(void *)(a1 + 96) - *(void *)(a1 + 88) != 128LL)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      uint64_t v39 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_45;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      *(_WORD *)v366 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:P is not dimensioned",  v366,  2);
      __int128 v41 = (uint8_t *)v40;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v40);
      goto LABEL_368;
    }

    double v349 = (double **)(a1 + 112);
    if (*(void *)(a1 + 120) - *(void *)(a1 + 112) != 32LL)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      __int128 v42 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned", buf, 2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_45;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      *(_WORD *)v366 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:x is not dimensioned",  v366,  2);
      __int128 v41 = (uint8_t *)v187;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v187);
      goto LABEL_368;
    }

    double v347 = v15;
    uint64_t v31 = (double *)(a1 + 284);
    double v32 = *(double *)(a1 + 440);
    sub_100D2DCA4((double *)(a1 + 832), a1 + 264, a1 + 420);
    double v34 = *(double *)(a1 + 440);
    unsigned int v35 = *(_DWORD *)(a2 + 96);
    if (((v35 < 9) & (0x1C1u >> v35) & (v34 < 1500.0)) != 0) {
      double v34 = 1500.0;
    }
    double v36 = 6.0;
    if (v35 == 7) {
      double v36 = 2.5;
    }
    if (v33 >= v36 * v34)
    {
      uint64_t v37 = 1LL;
      *a4 = 1;
      sub_10090E178(a1, (uint64_t)"lts rejected by distance check", -1.0);
LABEL_46:
      sub_10090C938(v354);
      return v37;
    }

    *(double *)v366 = *(double *)(a1 + 340) + 60.0;
    int v358 = 2;
    int v353 = 2;
    if (*(double *)v366 <= *(double *)(a1 + 184))
    {
      if ((sub_100903E8C(a1, (double *)(a1 + 184), &v358, &v353) & 1) == 0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        int v53 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_FAULT,  "KF:updateMotion failed unexpectedly",  buf,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_193;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 == -1) {
          goto LABEL_56;
        }
        goto LABEL_683;
      }
    }

    else if ((sub_100903E8C(a1, (double *)v366, &v358, &v353) & 1) == 0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      BOOL v44 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_FAULT,  "KF:updateMotion failed unexpectedly",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_193;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934830 == -1) {
        goto LABEL_56;
      }
LABEL_683:
      dispatch_once(&qword_101934830, &stru_101860CB0);
LABEL_56:
      v352[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:updateMotion failed unexpectedly",  v352,  2);
      __int128 v46 = (uint8_t *)v45;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v45);
      goto LABEL_395;
    }

    uint64_t v47 = *(void *)(a1 + 88);
    double v48 = *(double *)(a1 + 440);
    if (*(double *)v47 + *(double *)(v47 + 40) <= v48 * v48 * 0.5625)
    {
LABEL_74:
      double v350 = (double *)(a1 + 284);
      uint64_t v346 = a1 + 8;
      if (v10 >= 3.9)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        uint64_t v55 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "KF:too many consecutive update rejections,KF reset",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          *(_WORD *)v366 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:too many consecutive update rejections,KF reset",  v366,  2);
          int v190 = (uint8_t *)v189;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v189);
          if (v190 != buf) {
            free(v190);
          }
        }

        sub_10090B27C(a1);
        uint64_t v31 = (double *)(a1 + 284);
      }

      if (*(_BYTE *)(a1 + 249))
      {
        if (*(_DWORD *)(a1 + 516) == 6)
        {
          if (*(_BYTE *)(a1 + 576) && (a5 & 1) == 0)
          {
            sub_100D2DCA4((double *)(a1 + 832), a1 + 264, a1 + 420);
            if (v56 >= 50.0 || *(double *)(a2 + 76) - v31[7] >= 30.0)
            {
            }

            else
            {
              if (qword_101934830 != -1) {
                dispatch_once(&qword_101934830, &stru_101860CB0);
              }
              int v57 = (os_log_s *)qword_101934838;
              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::stringbuf::string_type buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "KF:update with same cell location ignored",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934830 != -1) {
                  dispatch_once(&qword_101934830, &stru_101860CB0);
                }
                *(_WORD *)v366 = 0;
                LODWORD(v341) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:update with same cell location ignored",  v366,  v341);
                __int128 v59 = (uint8_t *)v58;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v58);
                if (v59 != buf) {
                  free(v59);
                }
              }
            }
          }
        }

        else if (*(_BYTE *)(a1 + 576))
        {
          *(_BYTE *)(a1 + 576) = 0;
        }
      }

      double v60 = 42.25;
      if (*(_DWORD *)(a1 + 516) == 4)
      {
        if (v20 <= 66)
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          __int128 v61 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "KF:increment num rejections by half",  buf,  2u);
          }

          double v60 = 26.2;
          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            *(_WORD *)v366 = 0;
            LODWORD(v341) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:increment num rejections by half",  v366,  v341);
            char v193 = (uint8_t *)v192;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v192);
            if (v193 != buf) {
              free(v193);
            }
          }

          int v62 = 1;
LABEL_111:
          unsigned int v63 = *(_DWORD *)(a2 + 96);
          if (v63 <= 8 && ((1 << v63) & 0x1C1) != 0)
          {
            if (*(_BYTE *)(a1 + 824)) {
              double v60 = 225.0;
            }
            if (v32 < 1500.0 && *(_DWORD *)(a1 + 516) != 6) {
              double v32 = 1500.0;
            }
          }

          if (!*(_BYTE *)(a1 + 249))
          {
            *(void *)(a1 + 192) = 0LL;
            goto LABEL_142;
          }

          double v65 = v17 - *(double *)(a1 + 184);
          if (v65 < 0.0) {
            double v65 = 0.0;
          }
          *(double *)(a1 + 192) = v65;
          double v66 = v17 - *(double *)(a1 + 340);
          if (v66 < 0.0) {
            double v66 = 0.0;
          }
          if (*(_BYTE *)(a1 + 248) && v66 > 172800.0)
          {
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            __int128 v67 = (os_log_s *)qword_101934838;
            if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 134349056;
              *(void *)v376 = 0x4105180000000000LL;
              _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "KF:re-init,dT>%{public}.0lf",  buf,  0xCu);
            }

            if (!sub_1002921D0(115, 2)) {
              goto LABEL_141;
            }
            bzero(buf, 0x65CuLL);
            if (qword_101934830 == -1) {
              goto LABEL_428;
            }
          }

          else
          {
            if (v66 <= 172800.0) {
              goto LABEL_142;
            }
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            __int128 v68 = (os_log_s *)qword_101934838;
            if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::stringbuf::string_type buf = 134349056;
              *(void *)v376 = 0x4105180000000000LL;
              _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "KF:re-init,dT>%{public}.0lf",  buf,  0xCu);
            }

            if (!sub_1002921D0(115, 2))
            {
LABEL_141:
              sub_10090B27C(a1);
              __int128 v69 = *(_OWORD *)(a1 + 800);
              *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
              *(_OWORD *)(a1 + 40) = v69;
              *(void *)(a1 + 56) = *(void *)(a1 + 816);
              *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
              *(void *)(a1 + 624) = 0LL;
LABEL_142:
              if (sub_10090B6F8(*(_DWORD *)(a2 + 96)))
              {
                sub_10090B27C(a1);
              }

              else
              {
                if (!*(_BYTE *)(a1 + 249)) {
                  goto LABEL_179;
                }
                double v345 = v10;
                double v70 = v14;
                double v71 = v60;
                double v72 = v16;
                double v73 = v19;
                double v74 = v18;
                double v75 = v32;
                double v76 = *(double *)(a1 + 496);
                double v77 = *(double *)(a1 + 340);
                int v78 = sub_10090B6F8(*(_DWORD *)(a1 + 360));
                if (vabdd_f64(v76, v77) < 4.0) {
                  int v79 = v78;
                }
                else {
                  int v79 = 0;
                }
                double v32 = v75;
                double v18 = v74;
                double v19 = v73;
                double v16 = v72;
                double v60 = v71;
                double v14 = v70;
                double v10 = v345;
                if (v79 == 1 && *(_DWORD *)(a1 + 516) != 9)
                {
                  if (qword_101934830 != -1) {
                    dispatch_once(&qword_101934830, &stru_101860CB0);
                  }
                  __int128 v93 = (os_log_s *)qword_101934838;
                  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)std::stringbuf::string_type buf = 134349056;
                    *(void *)v376 = 0x4010000000000000LL;
                    _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "KF:non-GPS within %{public}.1f of GPS,ignoring.",  buf,  0xCu);
                  }

                  if (!sub_1002921D0(115, 2)) {
                    goto LABEL_45;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_101934830 != -1) {
                    dispatch_once(&qword_101934830, &stru_101860CB0);
                  }
                  *(_DWORD *)v366 = 134349056;
                  *(void *)&v366[4] = 0x4010000000000000LL;
                  LODWORD(v341) = 12;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:non-GPS within %{public}.1f of GPS,ignoring.",  v366,  v341);
                  __int128 v41 = (uint8_t *)v94;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v94);
                  goto LABEL_368;
                }
              }

              if (*(_BYTE *)(a1 + 249))
              {
                if (*(_DWORD *)(a1 + 516) != 4) {
                  goto LABEL_163;
                }
                if (*(int *)(a1 + 504) >= 73)
                {
                  double v80 = 0.0;
                  if (sub_100D2DBDC( (double *)(a1 + 832),  **(double **)(a1 + 112) * 57.2957795,  *(double *)(*(void *)(a1 + 112) + 8LL) * 57.2957795,  *(double *)(a1 + 424),  *(double *)(a1 + 432),  v80) > *(double *)(a1 + 440) * 5.0)
                  {
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    uint64_t v81 = (os_log_s *)qword_101934838;
                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)std::stringbuf::string_type buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "KF:diverged compared to med/high conf WiFi,resetting",  buf,  2u);
                    }

                    if (sub_1002921D0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_101934830 != -1) {
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                      }
                      *(_WORD *)v366 = 0;
                      LODWORD(v341) = 2;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:diverged compared to med/high conf WiFi,resetting",  v366,  v341);
                      float v228 = (uint8_t *)v227;
                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v227);
                      if (v228 != buf) {
                        free(v228);
                      }
                    }

                    sub_10090B27C(a1);
                  }
                }

                if (*(_BYTE *)(a1 + 249))
                {
LABEL_163:
                  int v82 = (double *)(a1 + 832);
                  if ((sub_100D2E600( (double *)(a1 + 832),  (double *)(a1 + 208),  (double *)(a1 + 200),  **(double **)(a1 + 112) * 57.2957795,  *(float *)(a1 + 584)) & 1) == 0)
                  {
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    uint64_t v89 = (os_log_s *)qword_101934838;
                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)std::stringbuf::string_type buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
                    }

                    if (!sub_1002921D0(115, 0)) {
                      goto LABEL_193;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    *(_WORD *)v366 = 0;
                    LODWORD(v341) = 2;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:calc_dNdE failed",  v366,  v341);
                    __int128 v46 = (uint8_t *)v194;
                    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v194);
                    goto LABEL_395;
                  }

                  if ((sub_10090DBE8(a1, &v355) & 1) == 0)
                  {
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    int v91 = (os_log_s *)qword_101934838;
                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)std::stringbuf::string_type buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_FAULT, "KF:Prediction failed", buf, 2u);
                    }

                    if (!sub_1002921D0(115, 0)) {
                      goto LABEL_45;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    *(_WORD *)v366 = 0;
                    LODWORD(v341) = 2;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:Prediction failed",  v366,  v341);
                    __int128 v41 = (uint8_t *)v92;
                    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v92);
                    goto LABEL_368;
                  }

                  uint64_t v83 = sub_10090E178(a1, (uint64_t)"prediction", -1.0);
                  double v84 = **(double **)v30 + *(double *)(*(void *)v30 + 40LL);
                  if (v84 > 8.1e11)
                  {
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    double v85 = (os_log_s *)qword_101934838;
                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)std::stringbuf::string_type buf = 134349056;
                      *(void *)v376 = 0x412B774000000000LL;
                      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "KF:re-init,uncertainty growth>%{public}.0lf",  buf,  0xCu);
                    }

                    if (sub_1002921D0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_101934830 != -1) {
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                      }
                      *(_DWORD *)v366 = 134349056;
                      *(void *)&v366[4] = 0x412B774000000000LL;
                      LODWORD(v341) = 12;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:re-init,uncertainty growth>%{public}.0lf",  v366,  v341);
                      char v237 = (uint8_t *)v236;
                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v236);
                      if (v237 != buf) {
                        free(v237);
                      }
                    }

                    sub_10090B27C(a1);
                    __int128 v86 = *(_OWORD *)(a1 + 800);
                    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                    *(_OWORD *)(a1 + 40) = v86;
                    *(void *)(a1 + 56) = *(void *)(a1 + 816);
                    *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
                    *(void *)(a1 + 624) = 0LL;
                    if ((sub_1009101C4(a1, v351) & 1) == 0)
                    {
                      if (qword_101934830 != -1) {
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                      }
                      int v87 = (os_log_s *)qword_101934838;
                      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)std::stringbuf::string_type buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_FAULT,  "KF:seedTheFilter failed",  buf,  2u);
                      }

                      if (!sub_1002921D0(115, 0)) {
                        goto LABEL_45;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_101934830 == -1) {
                        goto LABEL_450;
                      }
LABEL_727:
                      dispatch_once(&qword_101934830, &stru_101860CB0);
LABEL_450:
                      *(_WORD *)v366 = 0;
                      LODWORD(v341) = 2;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:seedTheFilter failed",  v366,  v341);
                      __int128 v41 = (uint8_t *)v226;
                      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v226);
LABEL_368:
                      if (v41 != buf) {
                        free(v41);
                      }
                      goto LABEL_45;
                    }

                    goto LABEL_180;
                  }

                  double v344 = v60;
                  double v95 = v14 * 0.0174532925;
                  double v343 = **(double **)v30 + *(double *)(*(void *)v30 + 40LL);
                  double v96 = v347 * 0.0174532925;
                  unsigned int v97 = *(_DWORD *)(a2 + 96);
                  double v342 = *(double *)(a1 + 440) * *(double *)(a1 + 440);
                  if (v97 <= 8
                    && ((1 << v97) & 0x1C1) != 0
                    && v84 * 9.0 < *(double *)(a1 + 440) * *(double *)(a1 + 440))
                  {
                    double v98 = sub_100D2DBDC( (double *)(a1 + 832),  v95 * 57.2957795,  v96 * 57.2957795,  **v349 * 57.2957795,  (*v349)[1] * 57.2957795,  0.0);
                    if (v98 > 0.0 && v98 < *(double *)(a1 + 440) + *(double *)(a1 + 440))
                    {
                      double v95 = **v349;
                      double v96 = (*v349)[1];
                    }
                  }

                  if (*(_DWORD *)(a1 + 516) == 4
                    && *(_DWORD *)(a1 + 360) == 9
                    && *(int *)(a1 + 580) >= 11
                    && *(int *)(a1 + 504) >= 66
                    && *(double *)(a1 + 440) < 100.0)
                  {
                    uint64_t v99 = *(void *)(a1 + 88);
                    double v100 = *v350;
                    if (*(double *)v99 + *(double *)(v99 + 40) < v100 * v100)
                    {
                      double v101 = fmax(v100, 1.0);
                      double v102 = v101 * v101 * 0.5;
                      *(double *)uint64_t v99 = v102;
                      *(_OWORD *)(v99 + _Block_object_dispose(va, 8) = 0u;
                      *(_OWORD *)(v99 + 24) = 0u;
                      *(double *)(v99 + 40) = v102;
                      *(_OWORD *)(v99 + 4_Block_object_dispose(va, 8) = 0u;
                      *(_OWORD *)(v99 + 64) = 0u;
                      *(void *)(v99 + 96) = 0LL;
                      *(void *)(v99 + 104) = 0LL;
                      if (qword_101934830 != -1) {
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                      }
                      __int16 v103 = (os_log_s *)qword_101934838;
                      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                      {
                        double v104 = *v350;
                        *(_DWORD *)std::stringbuf::string_type buf = 134349056;
                        *(double *)v376 = v104;
                        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEBUG,  "KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f",  buf,  0xCu);
                      }

                      uint64_t v83 = sub_1002921D0(115, 2);
                      int v82 = (double *)(a1 + 832);
                      if ((_DWORD)v83)
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_101934830 != -1) {
                          dispatch_once(&qword_101934830, &stru_101860CB0);
                        }
                        double v299 = *v350;
                        *(_DWORD *)v366 = 134349056;
                        *(double *)&v366[4] = v299;
                        LODWORD(v341) = 12;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:Transition,coarse GPS to WiFi,hunc bumped,%{public}.1f",  v366,  v341);
                        v301 = (uint8_t *)v300;
                        uint64_t v83 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v300);
                        if (v301 != buf) {
                          free(v301);
                        }
                        int v82 = (double *)(a1 + 832);
                      }
                    }
                  }

                  double v348 = (double **)(a1 + 160);
                  uint64_t v105 = sub_10090EFEC(v83, (uint64_t *)(a1 + 88), &dword_101340DB8, (void *)(a1 + 160), &v356);
                  if ((v105 & 1) != 0)
                  {
                    double v106 = v32 * v32 * 0.5;
                    double v107 = v106 + v356;
                    __int16 v109 = (double **)(a1 + 136);
                    uint64_t v108 = *(double **)(a1 + 136);
                    int v110 = *(double **)(a1 + 160);
                    *uint64_t v108 = *v110 / (v106 + v356);
                    v108[1] = v110[1] / v107;
                    v108[2] = v110[2] / v107;
                    v108[3] = v110[3] / v107;
                    double v111 = (v95 - **(double **)(a1 + 112)) * *(double *)(a1 + 208);
                    double v357 = v111;
                    if (v107 <= 0.0)
                    {
                      if (qword_101934830 != -1) {
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                      }
                      __int16 v141 = (os_log_s *)qword_101934838;
                      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)std::stringbuf::string_type buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                      }

                      if (!sub_1002921D0(115, 0)) {
                        goto LABEL_45;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_101934830 == -1) {
                        goto LABEL_272;
                      }
                      goto LABEL_685;
                    }

                    double v112 = v111 * v111 / v107;
                    if (v112 > v344)
                    {
                      if (!*(_BYTE *)(a1 + 592))
                      {
                        if (qword_101934830 != -1) {
                          dispatch_once(&qword_101934830, &stru_101860CB0);
                        }
                        __int16 v173 = (os_log_s *)qword_101934838;
                        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                        {
                          *(_WORD *)std::stringbuf::string_type buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_DEBUG,  "KF:Input is not consistent with prior input. Filter reseeding.",  buf,  2u);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          *(_WORD *)v366 = 0;
                          LODWORD(v341) = 2;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:Input is not consistent with prior input. Filter reseeding.",  v366,  v341);
                          int v244 = (uint8_t *)v243;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v243);
                          if (v244 != buf) {
                            free(v244);
                          }
                        }

                        sub_10090B27C(a1);
                        if ((sub_1009101C4(a1, v351) & 1) == 0)
                        {
                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          uint64_t v174 = (os_log_s *)qword_101934838;
                          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)std::stringbuf::string_type buf = 0;
                            _os_log_impl( (void *)&_mh_execute_header,  v174,  OS_LOG_TYPE_FAULT,  "KF:seedTheFilter failed",  buf,  2u);
                          }

                          if (!sub_1002921D0(115, 0)) {
                            goto LABEL_45;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 == -1) {
                            goto LABEL_450;
                          }
                          goto LABEL_727;
                        }

                        goto LABEL_180;
                      }

                      sub_10090BAB8(v346, (uint64_t)v354);
                      uint64_t v113 = a1 + 600;
                      if (*(void *)(a1 + 616)
                        && *(double *)(*(void *)v113 + 20LL) == *(double *)(a2 + 4)
                        && *(double *)(*(void *)v113 + 28LL) == *(double *)(a2 + 12))
                      {
                        if (qword_101934830 != -1) {
                          dispatch_once(&qword_101934830, &stru_101860CB0);
                        }
                        uint64_t v114 = (os_log_s *)qword_101934838;
                        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                        {
                          *(_WORD *)std::stringbuf::string_type buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEBUG,  "KF:increment num rejections by half",  buf,  2u);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          *(_WORD *)v366 = 0;
                          LODWORD(v341) = 2;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:increment num rejections by half",  v366,  v341);
                          int v297 = (uint8_t *)v296;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v296);
                          if (v297 != buf) {
                            free(v297);
                          }
                        }

                        int v62 = 1;
                      }

                      __int16 v115 = operator new(0xB0uLL);
                      __int128 v116 = *(_OWORD *)(a2 + 112);
                      v115[7] = *(_OWORD *)(a2 + 96);
                      v115[8] = v116;
                      _DWORD v115[9] = *(_OWORD *)(a2 + 128);
                      *(_OWORD *)((char *)v115 + 156) = *(_OWORD *)(a2 + 140);
                      __int128 v117 = *(_OWORD *)(a2 + 48);
                      v115[3] = *(_OWORD *)(a2 + 32);
                      v115[4] = v117;
                      __int128 v118 = *(_OWORD *)(a2 + 80);
                      v115[5] = *(_OWORD *)(a2 + 64);
                      v115[6] = v118;
                      __int128 v119 = *(_OWORD *)(a2 + 16);
                      v115[1] = *(_OWORD *)a2;
                      v115[2] = v119;
                      uint64_t v120 = *(void *)(a1 + 600);
                      *(void *)__int16 v115 = v120;
                      *((void *)v115 + 1) = v113;
                      *(void *)(v120 + _Block_object_dispose(va, 8) = v115;
                      *(void *)(a1 + 600) = v115;
                      ++*(void *)(a1 + 616);
                      if (sub_100910818(a1))
                      {
                        __int128 v121 = *(_OWORD *)(a2 + 16);
                        _OWORD *v21 = *(_OWORD *)a2;
                        *(_OWORD *)(a1 + 436) = v121;
                        __int128 v122 = *(_OWORD *)(a2 + 32);
                        __int128 v123 = *(_OWORD *)(a2 + 48);
                        __int128 v124 = *(_OWORD *)(a2 + 80);
                        *(_OWORD *)(a1 + 484) = *(_OWORD *)(a2 + 64);
                        *(_OWORD *)(a1 + 500) = v124;
                        *(_OWORD *)(a1 + 452) = v122;
                        *(_OWORD *)(a1 + 46_Block_object_dispose(va, 8) = v123;
                        __int128 v125 = *(_OWORD *)(a2 + 96);
                        __int128 v126 = *(_OWORD *)(a2 + 112);
                        __int128 v127 = *(_OWORD *)(a2 + 128);
                        *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 140);
                        *(_OWORD *)(a1 + 532) = v126;
                        *(_OWORD *)(a1 + 54_Block_object_dispose(va, 8) = v127;
                        *(_OWORD *)(a1 + 516) = v125;
                        if (qword_101934830 != -1) {
                          dispatch_once(&qword_101934830, &stru_101860CB0);
                        }
                        uint64_t v128 = (os_log_s *)qword_101934838;
                        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                        {
                          int v129 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)std::stringbuf::string_type buf = 134349568;
                          *(double *)v376 = v355;
                          *(_WORD *)&v376[8] = 1026;
                          *(_DWORD *)&v376[10] = v129;
                          __int16 v377 = 2050;
                          *(double *)v378 = v112;
                          _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEBUG,  "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf",  buf,  0x1Cu);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          int v245 = *(_DWORD *)(a2 + 96);
                          *(_DWORD *)v366 = 134349568;
                          *(double *)&v366[4] = v355;
                          *(_WORD *)&v366[12] = 1026;
                          *(_DWORD *)&v366[14] = v245;
                          __int16 v367 = 2050;
                          *(double *)int v368 = v112;
                          LODWORD(v341) = 28;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:diverged,%{public}.3lf,reseeding,inputType,%{public}d,lat,v2,%{public}.1lf",  v366,  v341);
                          int v247 = (uint8_t *)v246;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v246);
                          if (v247 != buf) {
                            free(v247);
                          }
                        }

                        sub_10090B27C(a1);
                        if (qword_101934830 != -1) {
                          dispatch_once(&qword_101934830, &stru_101860CB0);
                        }
                        uint64_t v130 = (os_log_s *)qword_101934838;
                        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                        {
                          int v131 = *(_DWORD *)(a2 + 96);
                          uint64_t v132 = *(void *)(a2 + 4);
                          uint64_t v133 = *(void *)(a2 + 12);
                          uint64_t v134 = *(void *)(a2 + 28);
                          uint64_t v135 = *(void *)(a2 + 20);
                          uint64_t v136 = *(void *)(a2 + 36);
                          int v137 = *(_DWORD *)(a2 + 84);
                          *(_DWORD *)std::stringbuf::string_type buf = 67241729;
                          *(_DWORD *)v376 = v131;
                          *(_WORD *)&v376[4] = 2049;
                          *(void *)&v376[6] = v132;
                          __int16 v377 = 2049;
                          *(void *)v378 = v133;
                          *(_WORD *)&v378[8] = 2049;
                          *(void *)&v378[10] = v134;
                          __int16 v379 = 2050;
                          uint64_t v380 = v135;
                          __int16 v381 = 2050;
                          uint64_t v382 = v136;
                          __int16 v383 = 1026;
                          int v384 = v137;
                          _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEBUG,  "KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vu nc,%{public}.1lf,conf,%{public}d",  buf,  0x40u);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          int v248 = *(_DWORD *)(a2 + 96);
                          uint64_t v249 = *(void *)(a2 + 4);
                          uint64_t v250 = *(void *)(a2 + 12);
                          uint64_t v251 = *(void *)(a2 + 28);
                          uint64_t v252 = *(void *)(a2 + 20);
                          uint64_t v253 = *(void *)(a2 + 36);
                          int v254 = *(_DWORD *)(a2 + 84);
                          *(_DWORD *)v366 = 67241729;
                          *(_DWORD *)&v366[4] = v248;
                          *(_WORD *)&v366[8] = 2049;
                          *(void *)&v366[10] = v249;
                          __int16 v367 = 2049;
                          *(void *)int v368 = v250;
                          *(_WORD *)&v368[8] = 2049;
                          *(void *)&v368[10] = v251;
                          __int16 v369 = 2050;
                          uint64_t v370 = v252;
                          __int16 v371 = 2050;
                          uint64_t v372 = v253;
                          __int16 v373 = 1026;
                          int v374 = v254;
                          LODWORD(v341) = 64;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:reseed,type,%{public}d,%{private}.7lf,%{private}.7lf,%{private}.3lf,hunc,%{public}.1lf,vu nc,%{public}.1lf,conf,%{public}d",  v366,  v341);
                          char v256 = (uint8_t *)v255;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v255);
                          if (v256 != buf) {
                            free(v256);
                          }
                        }

                        if ((sub_1009101C4(a1, v351) & 1) == 0)
                        {
                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          int v138 = (os_log_s *)qword_101934838;
                          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)std::stringbuf::string_type buf = 0;
                            _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_FAULT,  "KF:seedTheFilter failed",  buf,  2u);
                          }

                          if (!sub_1002921D0(115, 0)) {
                            goto LABEL_45;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 == -1) {
                            goto LABEL_450;
                          }
                          goto LABEL_727;
                        }

LABEL_546:
                                  double v272 = *(double *)(a1 + 456);
                                  if (v272 <= 0.0) {
                                    goto LABEL_566;
                                  }
                                  if (*(float *)(a1 + 588) < 0.0)
                                  {
                                    float v273 = *(double *)(a1 + 448);
                                    *(float *)(a1 + 584) = v273;
                                    float v274 = v272 * v272;
                                    goto LABEL_549;
                                  }

                                  uint64_t v275 = *(void *)(a1 + 584);
                                  int v276 = sub_10090B6F8(*(_DWORD *)(a1 + 360));
                                  float v277 = v272;
                                  float v278 = *(float *)(a1 + 588);
                                  if (v278 > 9000000.0)
                                  {
                                    *(_DWORD *)(a1 + 58_Block_object_dispose(va, 8) = 1258902592;
                                    float v278 = *(float *)"@T\tK";
                                  }

                                  float v279 = v278 + (float)(v277 * v277);
                                  if (v279 > 0.0)
                                  {
                                    float v280 = *(float *)(a1 + 584);
                                    float v281 = *(double *)(a1 + 448) - v280;
                                    float v282 = (float)(v281 * v281) / v279;
                                    if (v282 <= 81.0)
                                    {
                                      float v298 = v278 / v279;
                                      *(float *)(a1 + 584) = v280 + (float)(v298 * v281);
                                      float v274 = v278 - (float)(v298 * v278);
LABEL_549:
                                      *(float *)(a1 + 58_Block_object_dispose(va, 8) = v274;
                                      if (v274 < 1.0) {
                                        *(_DWORD *)(a1 + 58_Block_object_dispose(va, 8) = 1065353216;
                                      }
                                      goto LABEL_566;
                                    }

                                    *(void *)(a1 + 584) = v275;
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    double v283 = v282;
                                    v284 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                                    {
                                      if (*(_BYTE *)(a1 + 824)) {
                                        int v285 = 115;
                                      }
                                      else {
                                        int v285 = 110;
                                      }
                                      int v286 = *(_DWORD *)(a2 + 96);
                                      *(_DWORD *)std::stringbuf::string_type buf = 67240960;
                                      *(_DWORD *)v376 = v285;
                                      *(_WORD *)&v376[4] = 2050;
                                      *(double *)&v376[6] = v355;
                                      __int16 v377 = 1026;
                                      *(_DWORD *)v378 = v286;
                                      *(_WORD *)&v378[4] = 2048;
                                      *(double *)&v378[6] = v283;
                                      _os_log_impl( (void *)&_mh_execute_header,  v284,  OS_LOG_TYPE_DEBUG,  "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf",  buf,  0x22u);
                                    }

                                    if (sub_1002921D0(115, 2))
                                    {
                                      bzero(buf, 0x65CuLL);
                                      if (qword_101934830 != -1) {
                                        dispatch_once(&qword_101934830, &stru_101860CB0);
                                      }
                                      if (*(_BYTE *)(a1 + 824)) {
                                        int v336 = 115;
                                      }
                                      else {
                                        int v336 = 110;
                                      }
                                      int v337 = *(_DWORD *)(a2 + 96);
                                      *(_DWORD *)v366 = 67240960;
                                      *(_DWORD *)&v366[4] = v336;
                                      *(_WORD *)&v366[8] = 2050;
                                      *(double *)&v366[10] = v355;
                                      __int16 v367 = 1026;
                                      *(_DWORD *)int v368 = v337;
                                      *(_WORD *)&v368[4] = 2048;
                                      *(double *)&v368[6] = v283;
                                      LODWORD(v341) = 34;
                                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,alt,v2,%.1lf",  v366,  v341);
                                      int v339 = (uint8_t *)v338;
                                      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v338);
                                      if (v339 != buf) {
                                        free(v339);
                                      }
                                    }
                                  }

    memset(buf, 0, 24);
    sub_1002F0B04(&v376);
    v300 = sub_1002A8560(v376, "LogLocationsFile", (std::string *)buf);
    v301 = v300;
    uint64_t v302 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (!*((void *)&v376 + 1)) {
      goto LABEL_550;
    }
    int v303 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
    do
      unsigned int v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
      if (!v301) {
        goto LABEL_562;
      }
    }

    else
    {
LABEL_550:
      if (!v300) {
        goto LABEL_562;
      }
    }

    sub_1002F0B04(&v376);
    sub_1002A667C(v376, "LogLocationsFile", 0xFFFFFFFFLL);
    double v305 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (*((void *)&v376 + 1))
    {
      double v306 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
      do
        int v307 = __ldaxr(v306);
      while (__stlxr(v307 - 1, v306));
      if (!v307)
      {
        ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
        std::__shared_weak_count::__release_weak(v305);
      }
    }

    sub_1002F0B04(&v376);
    sub_1002ACD58(v376, "LogFile", buf);
    int v308 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (*((void *)&v376 + 1))
    {
      int v309 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
      do
        v310 = __ldaxr(v309);
      while (__stlxr(v310 - 1, v309));
      if (!v310)
      {
        ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
        std::__shared_weak_count::__release_weak(v308);
      }
    }

LABEL_566:
                                  if (*(_DWORD *)(a1 + 516) == 9) {
                                    int v287 = *(_DWORD *)(a1 + 580) + 1;
                                  }
                                  else {
                                    int v287 = 0;
                                  }
                                  *(_DWORD *)(a1 + 580) = v287;
                                  if ((sub_100910E10(a1, v351, 0) & 1) == 0)
                                  {
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    int v294 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_WORD *)std::stringbuf::string_type buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v294,  OS_LOG_TYPE_FAULT,  "KF:getResult failed",  buf,  2u);
                                    }

                                    if (!sub_1002921D0(115, 0)) {
                                      goto LABEL_193;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    *(_WORD *)v366 = 0;
                                    LODWORD(v341) = 2;
                                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:getResult failed",  v366,  v341);
                                    __int128 v46 = (uint8_t *)v295;
                                    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v295);
                                    goto LABEL_395;
                                  }

                                  unsigned int v288 = *(_DWORD *)(a1 + 516);
                                  *(_BYTE *)(a1 + 576) = v288 == 6;
                                  *(_BYTE *)(a1 + 577) = 0;
                                  *(void *)(a1 + 256) = 0LL;
                                  if (*(_BYTE *)(a1 + 592)
                                    || (unsigned int v289 = *(_DWORD *)(a1 + 360), v289 <= 8) && ((1 << v289) & 0x181) != 0
                                    || v288 <= 8 && ((1 << v288) & 0x181) != 0)
                                  {
LABEL_573:
                                    sub_1001B4C40((void *)(a1 + 600));
                                    __int128 v290 = *(_OWORD *)(a1 + 532);
                                    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 516);
                                    *(_OWORD *)(a1 + 376) = v290;
                                    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 548);
                                    *(_OWORD *)(a1 + 404) = *(_OWORD *)(a1 + 560);
                                    __int128 v291 = *(_OWORD *)(a1 + 468);
                                    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 452);
                                    *(_OWORD *)(a1 + 312) = v291;
                                    __int128 v292 = *(_OWORD *)(a1 + 500);
                                    *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 484);
                                    *(_OWORD *)(a1 + 344) = v292;
                                    __int128 v293 = *(_OWORD *)(a1 + 436);
                                    uint64_t v37 = 1LL;
                                    *(_OWORD *)(a1 + 264) = *v21;
                                    *(_OWORD *)(a1 + 280) = v293;
                                    goto LABEL_46;
                                  }

                                  if (v288 == v289)
                                  {
                                    sub_100D2DCA4(v82, a1 + 420, a1 + 264);
                                    double v306 = *(double *)(a1 + 440);
                                    if (v306 > *v350) {
                                      double v306 = *v350;
                                    }
                                    if (v305 <= v306) {
                                      goto LABEL_573;
                                    }
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    int v307 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                                    {
                                      *(_WORD *)std::stringbuf::string_type buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v307,  OS_LOG_TYPE_DEBUG,  "KF:Filter corrobarated by position,rejects now allowed",  buf,  2u);
                                    }

                                    if (!sub_1002921D0(115, 2)) {
                                      goto LABEL_643;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    *(_WORD *)v366 = 0;
                                    LODWORD(v341) = 2;
                                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:Filter corrobarated by position,rejects now allowed",  v366,  v341);
                                    int v309 = (uint8_t *)v308;
                                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v308);
                                  }

                                  else
                                  {
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    v315 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                                    {
                                      *(_WORD *)std::stringbuf::string_type buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v315,  OS_LOG_TYPE_DEBUG,  "KF:Filter corrobarated by type,rejects now allowed",  buf,  2u);
                                    }

                                    if (!sub_1002921D0(115, 2)) {
                                      goto LABEL_643;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    *(_WORD *)v366 = 0;
                                    LODWORD(v341) = 2;
                                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:Filter corrobarated by type,rejects now allowed",  v366,  v341);
                                    int v309 = (uint8_t *)v340;
                                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v340);
                                  }

                                  if (v309 != buf) {
                                    free(v309);
                                  }
LABEL_643:
                                  *(_BYTE *)(a1 + 592) = 1;
                                  goto LABEL_573;
                                }

                                sub_10090E178(a1, (uint64_t)"Applying uncertainty floor to stop averaging", -1.0);
                                double v262 = fmax(sqrt(v343), 1.0);
                                double v263 = v262 * v262 * 0.5;
                                uint64_t v264 = *(void *)v30;
                              }

                              *(double *)uint64_t v264 = v263;
                              *(_OWORD *)(v264 + 24) = 0u;
                              *(_OWORD *)(v264 + _Block_object_dispose(va, 8) = 0u;
                              *(double *)(v264 + 40) = v263;
                              *(_OWORD *)(v264 + 4_Block_object_dispose(va, 8) = 0u;
                              *(_OWORD *)(v264 + 64) = 0u;
                              *(void *)(v264 + 96) = 0LL;
                              *(void *)(v264 + 104) = 0LL;
                              double v260 = **(double **)v30 + *(double *)(*(void *)v30 + 40LL);
                              goto LABEL_530;
                            }

                            sub_10090C720((uint64_t)v366);
                            sub_10090BAB8((uint64_t)v366, v346);
                            __double2 v198 = __sincos_stret(v16 * 0.0174532925);
                            if (v19 < 0.5) {
                              double v19 = 0.5;
                            }
                            uint64_t v199 = sub_10090EFEC(v197, (uint64_t *)(a1 + 88), &dword_101340DB0, v348, &v356);
                            if ((v199 & 1) != 0)
                            {
                              double v200 = v356 + v19 * v19;
                              uint64_t v201 = *v348;
                              __int16 v202 = *v109;
                              double *v202 = **v348 / v200;
                              v202[1] = v201[1] / v200;
                              v202[2] = v201[2] / v200;
                              v202[3] = v201[3] / v200;
                              double v203 = v198.__cosval * v18 - (*v349)[2];
                              double v357 = v203;
                              if (v200 <= 0.0)
                              {
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                int v242 = (os_log_s *)qword_101934838;
                                if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)std::stringbuf::string_type buf = 0;
                                  _os_log_impl( (void *)&_mh_execute_header,  v242,  OS_LOG_TYPE_FAULT,  "KF:sigma2_v <= 0",  buf,  2u);
                                }

                                if (!sub_1002921D0(115, 0)) {
                                  goto LABEL_500;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_101934830 == -1) {
                                  goto LABEL_698;
                                }
                                goto LABEL_731;
                              }

                              double v204 = v203 * v203 / v200;
                              if (v204 > v344)
                              {
                                sub_10090BAB8(v346, (uint64_t)v366);
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                int v257 = (os_log_s *)qword_101934838;
                                if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                                {
                                  if (*(_BYTE *)(a1 + 824)) {
                                    int v258 = 115;
                                  }
                                  else {
                                    int v258 = 110;
                                  }
                                  int v259 = *(_DWORD *)(a2 + 96);
                                  *(_DWORD *)std::stringbuf::string_type buf = 67240960;
                                  *(_DWORD *)v376 = v258;
                                  *(_WORD *)&v376[4] = 2050;
                                  *(double *)&v376[6] = v355;
                                  __int16 v377 = 1026;
                                  *(_DWORD *)v378 = v259;
                                  *(_WORD *)&v378[4] = 2050;
                                  *(double *)&v378[6] = v204;
                                  _os_log_impl( (void *)&_mh_execute_header,  v257,  OS_LOG_TYPE_DEBUG,  "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf",  buf,  0x22u);
                                }

                                if (!sub_1002921D0(115, 2)) {
                                  goto LABEL_521;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                if (*(_BYTE *)(a1 + 824)) {
                                  int v333 = 115;
                                }
                                else {
                                  int v333 = 110;
                                }
                                int v334 = *(_DWORD *)(a2 + 96);
                                int v358 = 67240960;
                                int v359 = v333;
                                __int16 v360 = 2050;
                                double v361 = v355;
                                __int16 v362 = 1026;
                                int v363 = v334;
                                __int16 v364 = 2050;
                                double v365 = v204;
                                LODWORD(v341) = 34;
                                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,vn,v2,%{public}.1lf",  &v358,  v341);
                                int v219 = (uint8_t *)v335;
                                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v335);
LABEL_707:
                                if (v219 != buf) {
                                  free(v219);
                                }
                                goto LABEL_521;
                              }

                              uint64_t v205 = sub_10090F420( v199,  &v357,  (void *)(a1 + 136),  (double *)(a1 + 208),  (double *)(a1 + 200),  v349);
                              if ((v205 & 1) == 0)
                              {
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                uint64_t v302 = (os_log_s *)qword_101934838;
                                if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)std::stringbuf::string_type buf = 0;
                                  _os_log_impl( (void *)&_mh_execute_header,  v302,  OS_LOG_TYPE_FAULT,  "KF:vn innovation update failed",  buf,  2u);
                                }

                                if (!sub_1002921D0(115, 0)) {
                                  goto LABEL_494;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                LOWORD(v35_Block_object_dispose(va, 8) = 0;
                                LODWORD(v341) = 2;
                                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:vn innovation update failed",  &v358,  v341);
                                unsigned int v304 = (uint8_t *)v303;
                                sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v303);
                                goto LABEL_695;
                              }

                              if (!sub_10090FADC(v205, (uint64_t *)(a1 + 88), (double **)(a1 + 136), &dword_101340DB0))
                              {
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                v310 = (os_log_s *)qword_101934838;
                                if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)std::stringbuf::string_type buf = 0;
                                  _os_log_impl( (void *)&_mh_execute_header,  v310,  OS_LOG_TYPE_FAULT,  "KF:updateP failed",  buf,  2u);
                                }

                                if (!sub_1002921D0(115, 0)) {
                                  goto LABEL_494;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_101934830 == -1) {
                                  goto LABEL_620;
                                }
                                goto LABEL_732;
                              }

                              sub_10090E178(a1, (uint64_t)"vn update", -1.0);
                              sub_10090FFCC(a1);
                              if ((v206 & 1) == 0)
                              {
                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                int v312 = (os_log_s *)qword_101934838;
                                if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)std::stringbuf::string_type buf = 0;
                                  _os_log_impl( (void *)&_mh_execute_header,  v312,  OS_LOG_TYPE_FAULT,  "KF:sanityTestP failed",  buf,  2u);
                                }

                                if (!sub_1002921D0(115, 0)) {
                                  goto LABEL_494;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_101934830 == -1) {
                                  goto LABEL_627;
                                }
LABEL_733:
                                dispatch_once(&qword_101934830, &stru_101860CB0);
LABEL_627:
                                LOWORD(v35_Block_object_dispose(va, 8) = 0;
                                LODWORD(v341) = 2;
                                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:sanityTestP failed",  &v358,  v341);
                                unsigned int v304 = (uint8_t *)v313;
                                sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v313);
                                goto LABEL_695;
                              }

                              uint64_t v207 = sub_10090EFEC(v206, (uint64_t *)(a1 + 88), &dword_101340DB4, v348, &v356);
                              if ((v207 & 1) != 0)
                              {
                                double v208 = v356 + v19 * v19;
                                double v209 = *v348;
                                double v210 = *v109;
                                double *v210 = **v348 / v208;
                                v210[1] = v209[1] / v208;
                                v210[2] = v209[2] / v208;
                                v210[3] = v209[3] / v208;
                                double v211 = v198.__sinval * v18 - (*v349)[3];
                                double v357 = v211;
                                if (v208 > 0.0)
                                {
                                  double v212 = v211 * v211 / v208;
                                  if (v212 > v344)
                                  {
                                    sub_10090BAB8(v346, (uint64_t)v366);
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    uint64_t v213 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
                                    {
                                      if (*(_BYTE *)(a1 + 824)) {
                                        int v214 = 115;
                                      }
                                      else {
                                        int v214 = 110;
                                      }
                                      int v215 = *(_DWORD *)(a2 + 96);
                                      *(_DWORD *)std::stringbuf::string_type buf = 67240960;
                                      *(_DWORD *)v376 = v214;
                                      *(_WORD *)&v376[4] = 2050;
                                      *(double *)&v376[6] = v355;
                                      __int16 v377 = 1026;
                                      *(_DWORD *)v378 = v215;
                                      *(_WORD *)&v378[4] = 2050;
                                      *(double *)&v378[6] = v212;
                                      _os_log_impl( (void *)&_mh_execute_header,  v213,  OS_LOG_TYPE_DEBUG,  "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf",  buf,  0x22u);
                                    }

                                    if (!sub_1002921D0(115, 2)) {
                                      goto LABEL_521;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    if (*(_BYTE *)(a1 + 824)) {
                                      int v216 = 115;
                                    }
                                    else {
                                      int v216 = 110;
                                    }
                                    int v217 = *(_DWORD *)(a2 + 96);
                                    int v358 = 67240960;
                                    int v359 = v216;
                                    __int16 v360 = 2050;
                                    double v361 = v355;
                                    __int16 v362 = 1026;
                                    int v363 = v217;
                                    __int16 v364 = 2050;
                                    double v365 = v212;
                                    LODWORD(v341) = 34;
                                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:lt%{public}c,%{public}.3lf,inputType,%{public}d,ve,v2,%{public}.1lf",  &v358,  v341);
                                    int v219 = (uint8_t *)v218;
                                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v218);
                                    goto LABEL_707;
                                  }

                                  uint64_t v322 = sub_10090F420( v207,  &v357,  (void *)(a1 + 136),  (double *)(a1 + 208),  (double *)(a1 + 200),  v349);
                                  if ((v322 & 1) == 0)
                                  {
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    unsigned int v327 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_WORD *)std::stringbuf::string_type buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v327,  OS_LOG_TYPE_FAULT,  "KF:ve innovation update failed",  buf,  2u);
                                    }

                                    if (!sub_1002921D0(115, 0)) {
                                      goto LABEL_494;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    LOWORD(v35_Block_object_dispose(va, 8) = 0;
                                    LODWORD(v341) = 2;
                                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:ve innovation update failed",  &v358,  v341);
                                    unsigned int v304 = (uint8_t *)v328;
                                    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v328);
                                    goto LABEL_695;
                                  }

                                  if (sub_10090FADC( v322,  (uint64_t *)(a1 + 88),  (double **)(a1 + 136),  &dword_101340DB4))
                                  {
                                    sub_10090E178(a1, (uint64_t)"ve update", -1.0);
                                    sub_10090FFCC(a1);
                                    if ((v323 & 1) != 0)
                                    {
LABEL_521:
                                      sub_10090C938(v366);
                                      goto LABEL_522;
                                    }

                                    if (qword_101934830 != -1) {
                                      dispatch_once(&qword_101934830, &stru_101860CB0);
                                    }
                                    v324 = (os_log_s *)qword_101934838;
                                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_WORD *)std::stringbuf::string_type buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v324,  OS_LOG_TYPE_FAULT,  "KF:sanityTestP failed",  buf,  2u);
                                    }

                                    if (!sub_1002921D0(115, 0)) {
                                      goto LABEL_494;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_101934830 == -1) {
                                      goto LABEL_627;
                                    }
                                    goto LABEL_733;
                                  }

                                  if (qword_101934830 != -1) {
                                    dispatch_once(&qword_101934830, &stru_101860CB0);
                                  }
                                  int v329 = (os_log_s *)qword_101934838;
                                  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                  {
                                    *(_WORD *)std::stringbuf::string_type buf = 0;
                                    _os_log_impl( (void *)&_mh_execute_header,  v329,  OS_LOG_TYPE_FAULT,  "KF:updateP failed",  buf,  2u);
                                  }

                                  if (!sub_1002921D0(115, 0)) {
                                    goto LABEL_494;
                                  }
                                  bzero(buf, 0x65CuLL);
                                  if (qword_101934830 == -1)
                                  {
LABEL_620:
                                    LOWORD(v35_Block_object_dispose(va, 8) = 0;
                                    LODWORD(v341) = 2;
                                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:updateP failed",  &v358,  v341);
                                    unsigned int v304 = (uint8_t *)v311;
                                    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v311);
                                    goto LABEL_695;
                                  }

LABEL_732:
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                  goto LABEL_620;
                                }

                                if (qword_101934830 != -1) {
                                  dispatch_once(&qword_101934830, &stru_101860CB0);
                                }
                                uint64_t v316 = (os_log_s *)qword_101934838;
                                if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                                {
                                  *(_WORD *)std::stringbuf::string_type buf = 0;
                                  _os_log_impl( (void *)&_mh_execute_header,  v316,  OS_LOG_TYPE_FAULT,  "KF:sigma2_v <= 0",  buf,  2u);
                                }

                                if (!sub_1002921D0(115, 0)) {
                                  goto LABEL_500;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_101934830 == -1)
                                {
LABEL_698:
                                  LOWORD(v35_Block_object_dispose(va, 8) = 0;
                                  LODWORD(v341) = 2;
                                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:sigma2_v <= 0",  &v358,  v341);
                                  int v332 = (uint8_t *)v331;
                                  sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v331);
                                  if (v332 != buf) {
                                    free(v332);
                                  }
                                  goto LABEL_500;
                                }

          *(void *)(a1 + 72) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          __double2 v198 = *((void *)this + 1);
          uint64_t v199 = *((void *)this + 2);
          double v200 = *(void *)this;
          if (v198 <= 0xFFFFFFFFFFFFFFF5LL && v198 + 10 <= v199)
          {
            uint64_t v201 = 0;
            __int16 v202 = 0;
            double v203 = 0LL;
            do
            {
              double v204 = v198 + 1;
              *((void *)this + 1) = v198 + 1;
              uint64_t v205 = *(_BYTE *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0) {
                goto LABEL_736;
              }
              v201 += 7;
              __double2 v198 = v204;
              double v15 = v202++ > 8;
            }

            while (!v15);
LABEL_496:
            double v203 = 0LL;
            goto LABEL_736;
          }

          v463 = 0;
          v464 = 0;
          double v203 = 0LL;
          if (v199 <= v198) {
            uint64_t v199 = *((void *)this + 1);
          }
          while (2)
          {
            if (v199 == v198)
            {
              double v203 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v465 = v198 + 1;
              v466 = *(_BYTE *)(v200 + v198);
              *((void *)this + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                __double2 v198 = v465;
                double v15 = v464++ > 8;
                if (v15) {
                  goto LABEL_496;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                double v203 = 0LL;
              }
            }

            break;
          }

LABEL_731:
                                dispatch_once(&qword_101934830, &stru_101860CB0);
                                goto LABEL_698;
                              }

                              if (qword_101934830 != -1) {
                                dispatch_once(&qword_101934830, &stru_101860CB0);
                              }
                              int v314 = (os_log_s *)qword_101934838;
                              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)std::stringbuf::string_type buf = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v314,  OS_LOG_TYPE_FAULT,  "KF:computePht_and_hPht failed",  buf,  2u);
                              }

                              if (!sub_1002921D0(115, 0)) {
                                goto LABEL_494;
                              }
                              bzero(buf, 0x65CuLL);
                              if (qword_101934830 == -1)
                              {
LABEL_694:
                                LOWORD(v35_Block_object_dispose(va, 8) = 0;
                                LODWORD(v341) = 2;
                                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:computePht_and_hPht failed",  &v358,  v341);
                                unsigned int v304 = (uint8_t *)v330;
                                sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v330);
LABEL_695:
                                if (v304 != buf) {
                                  free(v304);
                                }
LABEL_494:
                                sub_10090B27C(a1);
                                __int128 v241 = *(_OWORD *)(a1 + 800);
                                *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                                *(_OWORD *)(a1 + 40) = v241;
                                *(void *)(a1 + 56) = *(void *)(a1 + 816);
                                *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
                                *(void *)(a1 + 624) = 0LL;
LABEL_500:
                                sub_10090C938(v366);
LABEL_45:
                                uint64_t v37 = 0LL;
                                goto LABEL_46;
                              }
                            }

                            else
                            {
                              if (qword_101934830 != -1) {
                                dispatch_once(&qword_101934830, &stru_101860CB0);
                              }
                              double v240 = (os_log_s *)qword_101934838;
                              if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                              {
                                *(_WORD *)std::stringbuf::string_type buf = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v240,  OS_LOG_TYPE_FAULT,  "KF:computePht_and_hPht failed",  buf,  2u);
                              }

                              if (!sub_1002921D0(115, 0)) {
                                goto LABEL_494;
                              }
                              bzero(buf, 0x65CuLL);
                              if (qword_101934830 == -1) {
                                goto LABEL_694;
                              }
                            }

                            dispatch_once(&qword_101934830, &stru_101860CB0);
                            goto LABEL_694;
                          }

                          if (qword_101934830 != -1) {
                            dispatch_once(&qword_101934830, &stru_101860CB0);
                          }
                          uint64_t v239 = (os_log_s *)qword_101934838;
                          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)std::stringbuf::string_type buf = 0;
                            _os_log_impl( (void *)&_mh_execute_header,  v239,  OS_LOG_TYPE_FAULT,  "KF:sanityTestP failed",  buf,  2u);
                          }

                          if (!sub_1002921D0(115, 0)) {
                            goto LABEL_193;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_101934830 == -1) {
                            goto LABEL_364;
                          }
LABEL_718:
                          dispatch_once(&qword_101934830, &stru_101860CB0);
LABEL_364:
                          *(_WORD *)v366 = 0;
                          LODWORD(v341) = 2;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:sanityTestP failed",  v366,  v341);
                          __int128 v46 = (uint8_t *)v186;
                          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v186);
LABEL_395:
                          if (v46 != buf) {
                            free(v46);
                          }
LABEL_193:
                          sub_10090B27C(a1);
                          uint64_t v37 = 0LL;
                          __int128 v90 = *(_OWORD *)(a1 + 800);
                          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
                          *(_OWORD *)(a1 + 40) = v90;
                          *(void *)(a1 + 56) = *(void *)(a1 + 816);
                          *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
                          *(void *)(a1 + 624) = 0LL;
                          goto LABEL_46;
                        }

                        if (qword_101934830 != -1) {
                          dispatch_once(&qword_101934830, &stru_101860CB0);
                        }
                        BOOL v238 = (os_log_s *)qword_101934838;
                        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                        {
                          *(_WORD *)std::stringbuf::string_type buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v238,  OS_LOG_TYPE_FAULT,  "KF:updateP failed",  buf,  2u);
                        }

                        if (!sub_1002921D0(115, 0)) {
                          goto LABEL_193;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_101934830 == -1)
                        {
LABEL_357:
                          *(_WORD *)v366 = 0;
                          LODWORD(v341) = 2;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:updateP failed",  v366,  v341);
                          __int128 v46 = (uint8_t *)v184;
                          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v184);
                          goto LABEL_395;
                        }

LABEL_700:
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                        goto LABEL_357;
                      }

                      if (qword_101934830 != -1) {
                        dispatch_once(&qword_101934830, &stru_101860CB0);
                      }
                      int v191 = (os_log_s *)qword_101934838;
                      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                      {
                        *(_WORD *)std::stringbuf::string_type buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_FAULT, "KF:sigma2_v <= 0", buf, 2u);
                      }

                      if (!sub_1002921D0(115, 0)) {
                        goto LABEL_45;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_101934830 == -1)
                      {
LABEL_272:
                        *(_WORD *)v366 = 0;
                        LODWORD(v341) = 2;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:sigma2_v <= 0",  v366,  v341);
                        __int128 v41 = (uint8_t *)v142;
                        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v142);
                        goto LABEL_368;
                      }

          *(void *)(a1 + 20_Block_object_dispose(va, 8) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          uint64_t v134 = *((void *)this + 1);
          uint64_t v135 = *((void *)this + 2);
          uint64_t v136 = *(void *)this;
          if (v134 <= 0xFFFFFFFFFFFFFFF5LL && v134 + 10 <= v135)
          {
            int v137 = 0;
            int v138 = 0;
            __int16 v139 = 0LL;
            do
            {
              uint64_t v140 = v134 + 1;
              *((void *)this + 1) = v134 + 1;
              __int16 v141 = *(_BYTE *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0) {
                goto LABEL_704;
              }
              v137 += 7;
              uint64_t v134 = v140;
              double v15 = v138++ > 8;
            }

            while (!v15);
LABEL_440:
            __int16 v139 = 0LL;
            goto LABEL_704;
          }

          v431 = 0;
          v432 = 0;
          __int16 v139 = 0LL;
          if (v135 <= v134) {
            uint64_t v135 = *((void *)this + 1);
          }
          while (2)
          {
            if (v135 == v134)
            {
              __int16 v139 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v433 = v134 + 1;
              v434 = *(_BYTE *)(v136 + v134);
              *((void *)this + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                uint64_t v134 = v433;
                double v15 = v432++ > 8;
                if (v15) {
                  goto LABEL_440;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                __int16 v139 = 0LL;
              }
            }

            break;
          }

LABEL_685:
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                      goto LABEL_272;
                    }

                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    int v188 = (os_log_s *)qword_101934838;
                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)std::stringbuf::string_type buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v188,  OS_LOG_TYPE_FAULT,  "KF:computePht_and_hPht failed",  buf,  2u);
                    }

                    if (!sub_1002921D0(115, 0)) {
                      goto LABEL_193;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_101934830 == -1)
                    {
LABEL_265:
                      *(_WORD *)v366 = 0;
                      LODWORD(v341) = 2;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:computePht_and_hPht failed",  v366,  v341);
                      __int128 v46 = (uint8_t *)v140;
                      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, BOOL &, BOOL)",  "%s\n",  v140);
                      goto LABEL_395;
                    }
                  }

                  else
                  {
                    if (qword_101934830 != -1) {
                      dispatch_once(&qword_101934830, &stru_101860CB0);
                    }
                    __int16 v139 = (os_log_s *)qword_101934838;
                    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
                    {
                      *(_WORD *)std::stringbuf::string_type buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_FAULT,  "KF:computePht_and_hPht failed",  buf,  2u);
                    }

                    if (!sub_1002921D0(115, 0)) {
                      goto LABEL_193;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_101934830 == -1) {
                      goto LABEL_265;
                    }
                  }

                  dispatch_once(&qword_101934830, &stru_101860CB0);
                  goto LABEL_265;
                }
              }

void sub_10090B124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void *sub_10090B27C(uint64_t a1)
{
  *(_BYTE *)(a1 + 249) = 0;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  *(_DWORD *)(a1 + 264) = 0xFFFF;
  *(void *)(a1 + 276) = 0LL;
  *(void *)(a1 + 26_Block_object_dispose(va, 8) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 284) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 300) = _Q1;
  *(_OWORD *)(a1 + 316) = _Q1;
  *(_OWORD *)(a1 + 332) = _Q1;
  *(_DWORD *)(a1 + 34_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 352) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 380) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 38_Block_object_dispose(va, 8) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(_BYTE *)(a1 + 416) = 0;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 58_Block_object_dispose(va, 8) = -1082130432;
  return sub_1001B4C40((void *)(a1 + 600));
}

uint64_t sub_10090B2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = *(double *)(a3 + 44);
  if (v7 >= 0.0) {
    double v8 = v7 * 3.6;
  }
  else {
    double v8 = *(double *)(a3 + 44);
  }
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  uint64_t v9 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a3 + 76);
    int v11 = *(_DWORD *)(a2 + 96);
    int v12 = *(_DWORD *)(a3 + 96);
    uint64_t v13 = *(void *)(a3 + 4);
    uint64_t v14 = *(void *)(a3 + 12);
    uint64_t v15 = *(void *)(a3 + 28);
    uint64_t v16 = *(void *)(a3 + 60);
    uint64_t v17 = *(void *)(a3 + 20);
    uint64_t v18 = *(void *)(a3 + 36);
    uint64_t v19 = *(void *)(a3 + 52);
    uint64_t v20 = *(void *)(a3 + 68);
    *(_DWORD *)std::stringbuf::string_type buf = 134352387;
    uint64_t v64 = v10;
    __int16 v65 = 1026;
    int v66 = v11;
    __int16 v67 = 1026;
    int v68 = v12;
    __int16 v69 = 1026;
    int v70 = 0;
    __int16 v71 = 2049;
    uint64_t v72 = v13;
    __int16 v73 = 2049;
    uint64_t v74 = v14;
    __int16 v75 = 2049;
    uint64_t v76 = v15;
    __int16 v77 = 2050;
    double v78 = v8;
    __int16 v79 = 2050;
    uint64_t v80 = v16;
    __int16 v81 = 2050;
    uint64_t v82 = v17;
    __int16 v83 = 2050;
    uint64_t v84 = v18;
    __int16 v85 = 2050;
    uint64_t v86 = v19;
    __int16 v87 = 2050;
    uint64_t v88 = v20;
    __int16 v89 = 2082;
    uint64_t v90 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{pub lic}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s",  buf,  0x82u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v22 = *(void *)(a3 + 76);
    int v23 = *(_DWORD *)(a2 + 96);
    int v24 = *(_DWORD *)(a3 + 96);
    uint64_t v25 = *(void *)(a3 + 4);
    uint64_t v26 = *(void *)(a3 + 12);
    uint64_t v27 = *(void *)(a3 + 28);
    uint64_t v28 = *(void *)(a3 + 60);
    uint64_t v29 = *(void *)(a3 + 20);
    uint64_t v30 = *(void *)(a3 + 36);
    uint64_t v31 = *(void *)(a3 + 52);
    uint64_t v32 = *(void *)(a3 + 68);
    int v35 = 134352387;
    uint64_t v36 = v22;
    __int16 v37 = 1026;
    int v38 = v23;
    __int16 v39 = 1026;
    int v40 = v24;
    __int16 v41 = 1026;
    int v42 = 0;
    __int16 v43 = 2049;
    uint64_t v44 = v25;
    __int16 v45 = 2049;
    uint64_t v46 = v26;
    __int16 v47 = 2049;
    uint64_t v48 = v27;
    __int16 v49 = 2050;
    double v50 = v8;
    __int16 v51 = 2050;
    uint64_t v52 = v28;
    __int16 v53 = 2050;
    uint64_t v54 = v29;
    __int16 v55 = 2050;
    uint64_t v56 = v30;
    __int16 v57 = 2050;
    uint64_t v58 = v31;
    __int16 v59 = 2050;
    uint64_t v60 = v32;
    __int16 v61 = 2082;
    uint64_t v62 = a4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{pub lic}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s",  &v35,  130);
    double v34 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDualModeKalmanFilter::debugPrint(const CLDaemonLocation &, const CLDaemonLocation &, const char *)",  "%s\n",  v33);
    if (v34 != buf) {
      free(v34);
    }
  }

  return 1LL;
}

double sub_10090B624(uint64_t a1)
{
  *(void *)(a1 + 64) = *(void *)(a1 + 936);
  __int128 v2 = *(_OWORD *)(a1 + 920);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 904);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v2;
  sub_1000F9040( (char *)(a1 + 72),  *(char **)(a1 + 944),  *(void *)(a1 + 952),  (uint64_t)(*(void *)(a1 + 952) - *(void *)(a1 + 944)) >> 3);
  sub_1000F9040( (char *)(a1 + 96),  *(char **)(a1 + 968),  *(void *)(a1 + 976),  (uint64_t)(*(void *)(a1 + 976) - *(void *)(a1 + 968)) >> 3);
  sub_1000F9040( (char *)(a1 + 120),  *(char **)(a1 + 992),  *(void *)(a1 + 1000),  (uint64_t)(*(void *)(a1 + 1000) - *(void *)(a1 + 992)) >> 3);
  sub_1000F9040( (char *)(a1 + 144),  *(char **)(a1 + 1016),  *(void *)(a1 + 1024),  (uint64_t)(*(void *)(a1 + 1024) - *(void *)(a1 + 1016)) >> 3);
  sub_1000F9040( (char *)(a1 + 168),  *(char **)(a1 + 1040),  *(void *)(a1 + 1048),  (uint64_t)(*(void *)(a1 + 1048) - *(void *)(a1 + 1040)) >> 3);
  memcpy((void *)(a1 + 192), (const void *)(a1 + 1064), 0x199uLL);
  sub_100911D78((uint64_t *)(a1 + 608), *(void *)(a1 + 1488), a1 + 1480);
  double result = *(double *)(a1 + 1504);
  *(double *)(a1 + 632) = result;
  return result;
}

uint64_t sub_10090B6F8(int a1)
{
  char v1 = a1 - 1;
  if ((a1 - 1) >= 0xB || ((0x7EFu >> v1) & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      int v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "unsupported location type,%{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      v10[0] = 67240192;
      v10[1] = a1;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "unsupported location type,%{public}d",  v10,  8);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLKalmanFilter::isLocationTypeNotFiltered(CLLocationType)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "assert";
      __int16 v17 = 2081;
      uint64_t v18 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed - unsupported location type, event:%{public, location:escape_only} s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
    }

    int v6 = (os_log_s *)qword_101934838;
    if (os_signpost_enabled((os_log_t)qword_101934838))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "assert";
      __int16 v17 = 2081;
      uint64_t v18 = "false";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed - unsupported location type",  "{msg%{public}.0s:Assertion failed - unsupported location type, event:%{public, location:escape_only} s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
    }

    double v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "assert";
      __int16 v17 = 2081;
      uint64_t v18 = "false";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed - unsupported location type, event:%{public, location:escape_only} s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLKalmanFilter.cpp",  3133,  "isLocationTypeNotFiltered");
  }

  return (0x617u >> v1) & 1;
}

uint64_t sub_10090BAB8(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 == a2)
  {
    memcpy((void *)(a1 + 176), (const void *)(a2 + 176), 0x199uLL);
  }

  else
  {
    sub_1000F9040( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( (char *)(a1 + 104),  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_1000F9040( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
    sub_1000F9040( (char *)(a1 + 152),  *(char **)(a2 + 152),  *(void *)(a2 + 160),  (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
    memcpy((void *)(a1 + 176), (const void *)(a2 + 176), 0x199uLL);
    sub_100911D78((uint64_t *)(a1 + 592), *(void *)(a2 + 600), a2 + 592);
  }

  return a1;
}

uint64_t sub_10090BB8C(uint64_t a1, double *a2)
{
  *(_BYTE *)(a1 + 584) = 0;
  uint64_t result = sub_10090DAC0(a1 + 880, *a2);
  *(_BYTE *)(a1 + 1456) = 0;
  return result;
}

uint64_t sub_10090BBCC(uint64_t a1, double *a2, uint64_t a3)
{
  return sub_10090BBD4(a1 + 880, a2, a3);
}

uint64_t sub_10090BBD4(uint64_t a1, double *a2, uint64_t a3)
{
  double v3 = *a2 - *(double *)(a1 + 184);
  double v64 = v3;
  double v62 = 0.0;
  double v63 = 0.0;
  double v60 = 0.0;
  double v61 = 0.0;
  double v58 = 0.0;
  double v59 = 0.0;
  char v57 = 0;
  unint64_t v56 = 0LL;
  *(void *)(a3 + 96) = 0LL;
  *(void *)(a3 + 104) = 0LL;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 136) = 0LL;
  *(void *)(a3 + 144) = 0LL;
  *(void *)(a3 + 12_Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 12) = 0LL;
  *(void *)(a3 + 4) = 0LL;
  *(_OWORD *)(a3 + 20) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 6_Block_object_dispose(va, 8) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 8_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(a3 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  if (!*(_BYTE *)(a1 + 249)) {
    return 0LL;
  }
  int v11 = *(const void **)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 - (void)v11 != 128)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v13 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:fKalman.P.size() != %{public}d",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v65 = (void *)0x1004020100LL;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:fKalman.P.size() != %{public}d",  &v65,  8);
    __int16 v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)",  "%s\n",  v14);
LABEL_84:
    if (v15 != buf) {
      free(v15);
    }
    return 0LL;
  }

  if (*(void *)(a1 + 120) - *(void *)(a1 + 112) != 32LL)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v16 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 4;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:fKalman.x.size() != %{public}d",  buf,  8u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v65 = (void *)0x404020100LL;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:fKalman.x.size() != %{public}d",  &v65,  8);
    __int16 v15 = (uint8_t *)v52;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)",  "%s\n",  v52);
    goto LABEL_84;
  }

  __int16 v65 = 0LL;
  int v66 = 0LL;
  uint64_t v67 = 0LL;
  sub_100007590(&v65, v11, v12, 0x10uLL);
  sub_1000071F0(__p, 0x10uLL);
  if (v3 >= 0.0)
  {
    if (!*(_BYTE *)(a1 + 248) && v3 > 600.0 && !*(_BYTE *)(a1 + 824)) {
      char v57 = 1;
    }
  }

  else
  {
    double v64 = 0.0;
  }

  if ((sub_10090CB5C(a1, &v64, &v57, (uint64_t *)__p, (double **)&v65, a1 + 16, &v59, &v58) & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v37 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "KF:calcTPTQ failed", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_67;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    v54[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:calcTPTQ failed",  v54,  2);
    __int16 v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)",  "%s\n",  v38);
    goto LABEL_89;
  }

  uint64_t v19 = sub_100D2E600((double *)(a1 + 832), &v61, &v60, **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584));
  if ((v19 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v40 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_67;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    v54[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:calc_dNdE failed",  v54,  2);
    __int16 v39 = (uint8_t *)v41;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)",  "%s\n",  v41);
    goto LABEL_89;
  }

  uint64_t v20 = *(double **)(a1 + 112);
  double v21 = v58;
  double v22 = v20[2];
  double v23 = v20[3];
  double v24 = *v20 + v59 * v22 / v61;
  double v62 = v20[1] + v59 * v23 / v60;
  double v63 = v24;
  BOOL v25 = sub_10090D568(v19, &v63);
  if (!v25)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v42 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_67;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    v54[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:boundLatitude failed",  v54,  2);
    __int16 v39 = (uint8_t *)v43;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)",  "%s\n",  v43);
    goto LABEL_89;
  }

  uint64_t v26 = sub_10090D784(v25, &v62);
  if ((v26 & 1) != 0)
  {
    double v27 = v22 * v21;
    double v28 = v23 * v21;
    double v29 = v63 * 57.2957795;
    double v30 = v62 * 57.2957795;
    uint64_t v31 = (double *)v65;
    double v32 = sqrt(*(double *)v65 + *((double *)v65 + 5));
    double v33 = sqrt(*((double *)v65 + 10) + *((double *)v65 + 15));
    if (v33 >= 0.001 || v33 < 0.0) {
      double v35 = v33;
    }
    else {
      double v35 = 0.001;
    }
    if (v35 > 30.0)
    {
      unint64_t v56 = 0xBFF0000000000000LL;
      double v36 = -1.0;
LABEL_77:
      *(_DWORD *)(a3 + 96) = *(_DWORD *)(a1 + 360);
      *(double *)(a3 + 76) = *a2;
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)(a3 + 84) = *(_DWORD *)(a1 + 348);
      *(void *)(a3 + 8_Block_object_dispose(va, 8) = *(void *)(a1 + 352);
      double v47 = v31[15];
      double v48 = v31[10];
      double v49 = v31[11];
      *(void *)std::stringbuf::string_type buf = 0xBFF0000000000000LL;
      sub_10090D9DC(v27, v28, v48, v47, v49, v26, (double *)&v56, (double *)buf);
      *(void *)(a3 + 60) = v56;
      *(void *)(a3 + 6_Block_object_dispose(va, 8) = *(void *)buf;
      *(double *)(a3 + 4) = v29;
      *(double *)(a3 + 12) = v30;
      *(_DWORD *)(a3 + 132) = *(_DWORD *)(a1 + 396);
      *(double *)(a3 + 20) = v32;
      *(double *)(a3 + 44) = v36;
      *(double *)(a3 + 52) = v35;
      double v50 = *(double *)(a1 + 300);
      if (v50 <= 0.0)
      {
        uint64_t v51 = 0LL;
        double v50 = -1.0;
      }

      else
      {
        uint64_t v51 = *(void *)(a1 + 292);
      }

      *(double *)(a3 + 36) = v50;
      *(void *)(a3 + 2_Block_object_dispose(va, 8) = v51;
      uint64_t v17 = 1LL;
      goto LABEL_68;
    }

    double v36 = sqrt(v28 * v28 + v27 * v27);
    if (fabs(v27) + fabs(v28) >= 0.3)
    {
      double v46 = atan2(v28, v27) * 57.2957795;
      unint64_t v56 = *(void *)&v46;
      if (v46 >= 0.0) {
        goto LABEL_77;
      }
      double v45 = v46 + 360.0;
    }

    else
    {
      double v45 = *(double *)(a1 + 240);
    }

    unint64_t v56 = *(void *)&v45;
    goto LABEL_77;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  uint64_t v44 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    v54[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:boundLongitude failed",  v54,  2);
    __int16 v39 = (uint8_t *)v53;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)",  "%s\n",  v53);
LABEL_89:
    if (v39 != buf) {
      free(v39);
    }
  }

void sub_10090C6CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10090C720(uint64_t a1)
{
  *(void *)a1 = off_101860C20;
  *(void *)(a1 + _Block_object_dispose(va, 8) = &off_101860C00;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v2 = a1 + 56;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v3 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v4 = a1 + 152;
  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 128;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(_WORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 256) = 0xFFFF;
  *(void *)(a1 + 26_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 260) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 276) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 292) = _Q1;
  *(_OWORD *)(a1 + 30_Block_object_dispose(va, 8) = _Q1;
  *(_OWORD *)(a1 + 324) = _Q1;
  *(_DWORD *)(a1 + 340) = 0;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 344) = 0xBFF0000000000000LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = 0LL;
  *(void *)(a1 + 372) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 380) = 0x7FFFFFFF;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(_BYTE *)(a1 + 40_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 412) = 0xFFFF;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(_OWORD *)(a1 + 432) = xmmword_1012E0070;
  *(_OWORD *)(a1 + 44_Block_object_dispose(va, 8) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_OWORD *)(a1 + 480) = _Q1;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 500) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 524) = 0;
  *(void *)(a1 + 50_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 516) = 0LL;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 536) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 564) = 0;
  *(void *)(a1 + 54_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 556) = 0LL;
  *(void *)(a1 + 540) = 0LL;
  *(_WORD *)(a1 + 56_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(void *)(a1 + 576) = 0xBF80000000000000LL;
  *(_BYTE *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = a1 + 592;
  *(void *)(a1 + 600) = a1 + 592;
  *(void *)(a1 + 60_Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 52) = 1115684864;
  *(_OWORD *)(a1 + 16) = xmmword_101340CC0;
  *(_OWORD *)(a1 + 32) = xmmword_101340CD0;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 1;
  sub_10064C7C4(a1 + 80, 0x10uLL);
  sub_10064C7C4(v2, 0x10uLL);
  sub_10064C7C4(v3, 4uLL);
  sub_10064C7C4(v5, 4uLL);
  sub_10064C7C4(v4, 4uLL);
  return a1;
}

void sub_10090C8D4(_Unwind_Exception *a1)
{
  uint64_t v9 = *v6;
  if (*v6)
  {
    v1[20] = v9;
    operator delete(v9);
  }

  uint64_t v10 = *v5;
  if (*v5)
  {
    v1[17] = v10;
    operator delete(v10);
  }

  int v11 = *v4;
  if (*v4)
  {
    v1[14] = v11;
    operator delete(v11);
  }

  uint64_t v12 = *v3;
  if (*v3)
  {
    v1[11] = v12;
    operator delete(v12);
  }

  __int16 v13 = *v2;
  if (*v2)
  {
    v1[8] = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void *sub_10090C938(void *a1)
{
  *a1 = off_101860C20;
  sub_1001B4C40(a1 + 74);
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }

  int v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }

  return a1;
}

void sub_10090C9C0(void *a1)
{
  char v1 = sub_10090C938(a1);
  operator delete(v1);
}

uint64_t sub_10090C9D4(uint64_t a1)
{
  *(void *)a1 = off_101860C40;
  sub_10090C720(a1 + 8);
  *(void *)(a1 + 624) = 0LL;
  *(void *)(a1 + 632) = &off_101860C00;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_BYTE *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 676) = 1115684864;
  *(void *)(a1 + 680) = &off_101860C00;
  *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_BYTE *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 724) = 1115684864;
  *(void *)(a1 + 72_Block_object_dispose(va, 8) = &off_101860C00;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_BYTE *)(a1 + 76_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 772) = 1115684864;
  *(void *)(a1 + 776) = &off_101860C00;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_BYTE *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 820) = 1115684864;
  *(_WORD *)(a1 + 824) = 0;
  sub_100D2D9A4(a1 + 832);
  float v2 = 0.0001;
  *(float *)(a1 + 676) = v2;
  *(_OWORD *)(a1 + 640) = xmmword_101340CE0;
  *(_OWORD *)(a1 + 656) = xmmword_101340CF0;
  *(_BYTE *)(a1 + 672) = 1;
  *(_DWORD *)(a1 + 724) = 1115684864;
  *(_OWORD *)(a1 + 68_Block_object_dispose(va, 8) = xmmword_101340D00;
  *(_OWORD *)(a1 + 704) = xmmword_101340D10;
  *(_BYTE *)(a1 + 720) = 1;
  *(_DWORD *)(a1 + 772) = 1115684864;
  *(_OWORD *)(a1 + 736) = xmmword_101340D20;
  *(_OWORD *)(a1 + 752) = xmmword_101340D30;
  *(_BYTE *)(a1 + 76_Block_object_dispose(va, 8) = 1;
  *(_DWORD *)(a1 + 820) = 1115684864;
  *(_OWORD *)(a1 + 784) = xmmword_101340CC0;
  *(_OWORD *)(a1 + 800) = xmmword_101340CD0;
  *(_BYTE *)(a1 + 816) = 1;
  __int128 v3 = *(_OWORD *)(a1 + 784);
  __int128 v4 = *(_OWORD *)(a1 + 800);
  *(void *)(a1 + 56) = *(void *)(a1 + 816);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  return a1;
}

void sub_10090CB18(_Unwind_Exception *a1)
{
}

void sub_10090CB2C(void *a1)
{
  *a1 = off_101860C40;
  sub_10090C938(a1 + 1);
  operator delete(a1);
}

uint64_t sub_10090CB5C( uint64_t a1, double *a2, _BYTE *a3, uint64_t *a4, double **a5, uint64_t a6, double *a7, double *a8)
{
  double v16 = *(double *)(a6 + 24);
  sub_1000071F0(__p, 0x10uLL);
  if (*a2 < 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v17 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "KF:dT < 0", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v61 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:dT < 0",  &v61,  2);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const Ka lmanTuningInfo &, double &, double &)",  "%s\n",  v18);
LABEL_60:
    if (v19 != buf) {
      free(v19);
    }
LABEL_33:
    uint64_t v24 = 0LL;
    goto LABEL_34;
  }

  if ((char *)a5[1] - (char *)*a5 != 128)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v23 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      __int16 v61 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:P is not dimensioned",  &v61,  2);
      __int16 v55 = (uint8_t *)v54;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)",  "%s\n",  v54);
      if (v55 != buf) {
        free(v55);
      }
    }

    sub_10064C7C4((uint64_t)a5, 0x10uLL);
    goto LABEL_33;
  }

  if (a4[1] - *a4 != 128)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v20 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,Q is not dimensioned", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      __int16 v61 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,Q is not dimensioned",  &v61,  2);
      char v57 = (uint8_t *)v56;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)",  "%s\n",  v56);
      if (v57 != buf) {
        free(v57);
      }
    }

    sub_10064C7C4((uint64_t)a4, 0x10uLL);
  }

  if (v16 == 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v21 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:beta is zero", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v61 = 0;
    LODWORD(v60) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:beta is zero",  &v61,  v60);
    uint64_t v19 = (uint8_t *)v22;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const Ka lmanTuningInfo &, double &, double &)",  "%s\n",  v22);
    goto LABEL_60;
  }

  *a7 = (1.0 - exp(-(v16 * *a2))) / v16;
  *a8 = exp(-(v16 * *a2));
  if ((sub_100911784(a1, a3, a4, a6, a2) & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v52 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "KF:setQ failed", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int16 v61 = 0;
    LODWORD(v60) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:setQ failed",  &v61,  v60);
    uint64_t v19 = (uint8_t *)v53;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const Ka lmanTuningInfo &, double &, double &)",  "%s\n",  v53);
    goto LABEL_60;
  }

  uint64_t v26 = 0LL;
  double v27 = *a7;
  double v28 = *a8;
  double v29 = v27 * v27;
  double v30 = v28 * v28;
  double v31 = *a7 * *a8;
  double v32 = *a5;
  double v33 = (*a5)[2];
  double v34 = (*a5)[3];
  double v35 = (*a5)[5];
  double v36 = (*a5)[6];
  double v37 = (*a5)[7];
  double v38 = (*a5)[10];
  double v39 = (*a5)[11];
  double v40 = (*a5)[15];
  double v41 = v27 + v27;
  double v42 = **a5 + (v27 + v27) * v33 + v27 * v27 * v38;
  __int16 v43 = (double *)__p[0];
  double v44 = (*a5)[1] + *a7 * v36 + *a7 * v34 + v27 * v27 * v39;
  *(double *)__p[0] = v42;
  v43[1] = v44;
  double v45 = v31 * v38 + v28 * v33;
  double v46 = v31 * v39 + v28 * v34;
  v43[2] = v45;
  v43[3] = v46;
  v43[4] = v44;
  v43[5] = v35 + v41 * v37 + v29 * v40;
  double v47 = v31 * v39 + v28 * v36;
  double v48 = v31 * v40 + v28 * v37;
  v43[6] = v47;
  v43[7] = v48;
  v43[8] = v45;
  v43[9] = v47;
  v43[10] = v30 * v38;
  v43[11] = v30 * v39;
  _BYTE v43[12] = v46;
  v43[13] = v48;
  v43[14] = v30 * v39;
  v43[15] = v30 * v40;
  uint64_t v49 = *(void *)(a1 + 64);
  do
  {
    v32[v26] = *(double *)(v49 + v26 * 8) + v43[v26];
    ++v26;
  }

  while (v26 != 16);
  if (vabdd_f64(v32[4], v32[1]) <= 0.00000001
    && vabdd_f64(v32[8], v32[2]) <= 0.00000001
    && vabdd_f64(v32[9], v32[6]) <= 0.00000001
    && vabdd_f64(v32[12], v32[3]) <= 0.00000001
    && vabdd_f64(v32[13], v32[7]) <= 0.00000001
    && vabdd_f64(v32[14], v32[11]) <= 0.00000001)
  {
    uint64_t v24 = 1LL;
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v50 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#Warning,KF:P is not symmetric", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      __int16 v61 = 0;
      LODWORD(v60) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:P is not symmetric",  &v61,  v60);
      double v59 = (uint8_t *)v58;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::calcTPTQ(const double &, const BOOL &, std::vector<double> &, std::vector<double> &, const KalmanTuningInfo &, double &, double &)",  "%s\n",  v58);
      if (v59 != buf) {
        free(v59);
      }
    }

    sub_10090B27C(a1);
    uint64_t v24 = 0LL;
    __int128 v51 = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 40) = v51;
    *(void *)(a1 + 56) = *(void *)(a1 + 816);
    *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    *(void *)(a1 + 624) = 0LL;
  }

void sub_10090D528( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10090D568(uint64_t a1, double *a2)
{
  double v3 = *a2;
  double v4 = 3.14159265 - *a2;
  if (*a2 > 1.57079633 || (double v4 = *a2, *a2 < -1.57079633))
  {
    double v3 = -3.14159265 - v4;
    if (v4 >= -1.57079633) {
      double v3 = v4;
    }
    *a2 = v3;
  }

  BOOL v5 = v3 >= -1.57079633 && v3 <= 1.57079633;
  if (!v5)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      double v7 = *a2;
      *(_DWORD *)std::stringbuf::string_type buf = 134283521;
      double v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "KF:latRads,%{private}.7f,out of bounds",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      double v9 = *a2;
      int v12 = 134283521;
      double v13 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:latRads,%{private}.7f,out of bounds",  &v12,  12);
      int v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::boundLatitude(double &)", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  return v5;
}

uint64_t sub_10090D784(uint64_t a1, double *a2)
{
  double v3 = *a2;
  if (*a2 >= -3.14159265 && v3 <= 3.14159265) {
    return 1LL;
  }
  if (v3 < -3.14159265)
  {
    unsigned int v4 = 0;
    do
      double v3 = v3 + 6.28318531;
    while (v3 < -3.14159265 && v4++ < 0x13);
    *a2 = v3;
  }

  if (v3 <= 3.14159265)
  {
    BOOL v7 = 0;
  }

  else
  {
    unsigned int v6 = 0;
    do
    {
      double v3 = v3 + -6.28318531;
      BOOL v7 = v3 > 3.14159265;
    }

    while (v3 > 3.14159265 && v6++ < 0x13);
    *a2 = v3;
  }

  if (v3 >= -3.14159265 && !v7) {
    return 1LL;
  }
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  uint64_t v10 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    double v11 = *a2;
    *(_DWORD *)std::stringbuf::string_type buf = 134283521;
    double v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "KF:lonRads,%{private}.7f,out of bounds",  buf,  0xCu);
  }

  BOOL v12 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v14 = *a2;
    int v17 = 134283521;
    double v18 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:lonRads,%{private}.7f,out of bounds",  &v17,  12);
    double v16 = (uint8_t *)v15;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::boundLongitude(double &)", "%s\n", v15);
    if (v16 != buf) {
      free(v16);
    }
    return 0LL;
  }

  return result;
}

void sub_10090D9DC( double a1, double a2, double a3, double a4, double a5, uint64_t a6, double *a7, double *a8)
{
  if (*a7 < 0.0
    || (double v8 = fabs(a1), v9 = fabs(a2), v8 < 0.000001) && v9 < 0.000001
    || (v8 >= 0.000001
      ? (v9 >= 0.000001
       ? (double v11 = 1.0 / (a2 * a2 / (a1 * a1) + 1.0),
          double v10 = v11 / a1 * (-a2 / (a1 * a1) * v11 + -a2 / (a1 * a1) * v11) * a5
              + -a2 / (a1 * a1) * v11 * (-a2 / (a1 * a1) * v11) * a3
              + v11 / a1 * (v11 / a1) * a4)
       : (double v10 = 1.0 / a1 * (1.0 / a1) * a4))
      : (double v10 = -1.0 / a2 * (-1.0 / a2) * a3),
        v10 <= 0.0 || (double v12 = sqrt(v10) * 57.2957795, *a8 = v12, v12 > 60.0)))
  {
    *a7 = -1.0;
    *a8 = -1.0;
  }

uint64_t sub_10090DAC0(uint64_t result, double a2)
{
  float v2 = (double *)(result + 284);
  double v3 = *(double *)(result + 284);
  if (v3 > 0.0)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)(result + 360) == 6
      && *(_BYTE *)(result + 576)
      && !*(_BYTE *)(result + 824)
      && a2 - *(double *)(result + 340) > 30.0)
    {
      __int128 v5 = *(_OWORD *)(result + 376);
      __int128 v15 = *(_OWORD *)(result + 360);
      __int128 v16 = v5;
      v17[0] = *(_OWORD *)(result + 392);
      *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(result + 404);
      __int128 v6 = *(_OWORD *)(result + 312);
      v13[2] = *(_OWORD *)(result + 296);
      void v13[3] = v6;
      __int128 v7 = *(_OWORD *)(result + 344);
      *(_OWORD *)double v14 = *(_OWORD *)(result + 328);
      *(_OWORD *)&v14[16] = v7;
      __int128 v8 = *(_OWORD *)(result + 280);
      v13[0] = *(_OWORD *)(result + 264);
      v13[1] = v8;
      double v9 = v3 * v3;
      *(double *)&v14[12] = a2;
      sub_10090549C(result, v13, v18, &v19, 1LL);
      uint64_t v10 = *(void *)(v4 + 88);
      if (*(double *)v10 + *(double *)(v10 + 40) < v9)
      {
        double v11 = fmax(*v2, 1.0);
        double v12 = v11 * v11 * 0.5;
        *(double *)uint64_t v10 = v12;
        *(_OWORD *)(v10 + _Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(double *)(v10 + 40) = v12;
        *(_OWORD *)(v10 + 4_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(void *)(v10 + 96) = 0LL;
        *(void *)(v10 + 104) = 0LL;
      }

      return sub_10090E178(v4, (uint64_t)"activeCellUpdate complete", -1.0);
    }
  }

  return result;
}

uint64_t sub_10090DBE8(uint64_t a1, double *a2)
{
  char v26 = 0;
  if (!*(_BYTE *)(a1 + 249)) {
    return 0LL;
  }
  double v4 = *a2 - *(double *)(a1 + 184);
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  *(double *)(a1 + 192) = v4;
  if (*(double *)(a1 + 208) == 0.0 || *(double *)(a1 + 200) == 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int128 v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "KF:fKalman.dN == 0.0 || fKalman.dE == 0.0",  buf,  2u);
    }

    BOOL v6 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      LOWORD(v25) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:fKalman.dN == 0.0 || fKalman.dE == 0.0",  &v25,  2,  v25);
LABEL_14:
      double v9 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::predictAhead(const CFAbsoluteTime &)", "%s\n", v8);
      if (v9 != buf) {
        free(v9);
      }
      return 0LL;
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + 248)
      && *(double *)(a1 + 284) > 0.0
      && *a2 - *(double *)(a1 + 340) > 600.0
      && !*(_BYTE *)(a1 + 824))
    {
      char v26 = 1;
    }

    uint64_t v10 = sub_10090CB5C( a1,  (double *)(a1 + 192),  &v26,  (uint64_t *)(a1 + 64),  (double **)(a1 + 88),  a1 + 16,  (double *)(a1 + 224),  (double *)(a1 + 232));
    if ((v10 & 1) != 0)
    {
      double v11 = *(double **)(a1 + 112);
      double *v11 = *v11 + *(double *)(a1 + 224) * v11[2] / *(double *)(a1 + 208);
      BOOL v12 = sub_10090D568(v10, v11);
      if (v12)
      {
        double v13 = *(double **)(a1 + 112);
        double v14 = v13[1];
        ++v13;
        *double v13 = v14 + *(double *)(a1 + 224) * v13[2] / *(double *)(a1 + 200);
        if ((sub_10090D784(v12, v13) & 1) != 0)
        {
          uint64_t v15 = *(void *)(a1 + 112);
          double v16 = *(double *)(v15 + 24);
          *(double *)(v15 + 16) = *(double *)(a1 + 232) * *(double *)(v15 + 16);
          *(double *)(v15 + 24) = *(double *)(a1 + 232) * v16;
          *(double *)(a1 + 184) = *a2;
          if (*(double *)(a1 + 456) > 0.0)
          {
            float v17 = *(float *)(a1 + 588);
            if (v17 > 0.0)
            {
              float v18 = v17 + *(float *)(a1 + 60) * *(double *)(a1 + 192);
              *(float *)(a1 + 58_Block_object_dispose(va, 8) = v18;
            }
          }

          return 1LL;
        }

        else
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          double v23 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::stringbuf::string_type buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
          }

          BOOL v24 = sub_1002921D0(115, 0);
          uint64_t result = 0LL;
          if (v24)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101860CB0);
            }
            LOWORD(v25) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:boundLongitude failed",  &v25,  2,  v25);
            goto LABEL_14;
          }
        }
      }

      else
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        double v21 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
        }

        BOOL v22 = sub_1002921D0(115, 0);
        uint64_t result = 0LL;
        if (v22)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          LOWORD(v25) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:boundLatitude failed",  &v25,  2,  v25);
          goto LABEL_14;
        }
      }
    }

    else
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      char v19 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "KF:calcTPTQ failed", buf, 2u);
      }

      BOOL v20 = sub_1002921D0(115, 0);
      uint64_t result = 0LL;
      if (v20)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        LOWORD(v25) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:calcTPTQ failed",  &v25,  2,  v25);
        goto LABEL_14;
      }
    }
  }

  return result;
}

uint64_t sub_10090E178(uint64_t a1, uint64_t a2, double a3)
{
  int v27 = 0xFFFF;
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  __int128 v30 = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v31 = _Q0;
  __int128 v32 = _Q0;
  __int128 v33 = _Q0;
  int v34 = 0;
  uint64_t v37 = 0LL;
  unint64_t v35 = 0xBFF0000000000000LL;
  uint64_t v36 = 0LL;
  int v38 = 0;
  unint64_t v39 = 0xBFF0000000000000LL;
  int v40 = 0x7FFFFFFF;
  uint64_t v43 = 0LL;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  char v44 = 0;
  uint64_t v11 = sub_100910E10(a1, (uint64_t)&v27, 1);
  if ((_DWORD)v11)
  {
    if ((byte_101999320 & 1) == 0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      BOOL v12 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitu de(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        LOWORD(v45[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitu de(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2",  v45,  2);
        uint64_t v25 = (uint8_t *)v24;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKalmanFilter::debugPrint(const char *, double)", "%s\n", v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      byte_101999320 = 1;
    }

    else {
      double v13 = *((double *)&v31 + 1);
    }
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v14 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      if (*(_BYTE *)(a1 + 824)) {
        int v15 = 115;
      }
      else {
        int v15 = 110;
      }
      int v16 = *(_DWORD *)(a1 + 516);
      int v17 = *(_DWORD *)(a1 + 628);
      *(_DWORD *)std::stringbuf::string_type buf = 67244035;
      int v77 = v15;
      __int16 v78 = 2050;
      uint64_t v79 = *((void *)&v33 + 1);
      __int16 v80 = 1026;
      int v81 = v16;
      __int16 v82 = 1026;
      int v83 = v36;
      __int16 v84 = 1026;
      int v85 = v17;
      __int16 v86 = 2049;
      uint64_t v87 = v28;
      __int16 v88 = 2049;
      uint64_t v89 = v29;
      __int16 v90 = 2049;
      uint64_t v91 = *((void *)&v30 + 1);
      __int16 v92 = 2050;
      double v93 = v13;
      __int16 v94 = 2050;
      uint64_t v95 = *((void *)&v32 + 1);
      __int16 v96 = 2050;
      uint64_t v97 = v30;
      __int16 v98 = 2050;
      uint64_t v99 = v31;
      __int16 v100 = 2050;
      uint64_t v101 = v32;
      __int16 v102 = 2050;
      uint64_t v103 = v33;
      __int16 v104 = 2050;
      double v105 = a3;
      __int16 v106 = 2082;
      uint64_t v107 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{publi c}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s",  buf,  0x92u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      if (*(_BYTE *)(a1 + 824)) {
        int v19 = 115;
      }
      else {
        int v19 = 110;
      }
      int v20 = *(_DWORD *)(a1 + 516);
      int v21 = *(_DWORD *)(a1 + 628);
      v45[0] = 67244035;
      v45[1] = v19;
      __int16 v46 = 2050;
      uint64_t v47 = *((void *)&v33 + 1);
      __int16 v48 = 1026;
      int v49 = v20;
      __int16 v50 = 1026;
      int v51 = v36;
      __int16 v52 = 1026;
      int v53 = v21;
      __int16 v54 = 2049;
      uint64_t v55 = v28;
      __int16 v56 = 2049;
      uint64_t v57 = v29;
      __int16 v58 = 2049;
      uint64_t v59 = *((void *)&v30 + 1);
      __int16 v60 = 2050;
      double v61 = v13;
      __int16 v62 = 2050;
      uint64_t v63 = *((void *)&v32 + 1);
      __int16 v64 = 2050;
      uint64_t v65 = v30;
      __int16 v66 = 2050;
      uint64_t v67 = v31;
      __int16 v68 = 2050;
      uint64_t v69 = v32;
      __int16 v70 = 2050;
      uint64_t v71 = v33;
      __int16 v72 = 2050;
      double v73 = a3;
      __int16 v74 = 2082;
      uint64_t v75 = a2;
      LODWORD(v26) = 146;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:,lt%{public}c,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.7f,%{private}.1f,%{publi c}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s",  v45,  v26);
      double v23 = (uint8_t *)v22;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLKalmanFilter::debugPrint(const char *, double)", "%s\n", v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

  return v11;
}

uint64_t sub_10090E688(uint64_t a1)
{
  double v38 = 0.0;
  float v2 = (uint64_t *)(a1 + 88);
  double v3 = (double **)(a1 + 160);
  uint64_t v4 = sub_10090EFEC(a1, (uint64_t *)(a1 + 88), &dword_101340DB0, (void *)(a1 + 160), &v38);
  if ((v4 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    float v18 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }

    BOOL v19 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v19) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    LOWORD(v37) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:ZUPT failed",  &v37,  2,  v36[0]);
LABEL_68:
    unint64_t v35 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::zupt()", "%s\n", v20);
    if (v35 != buf) {
      free(v35);
    }
    return 0LL;
  }

  double v5 = v38 + 0.0001;
  uint64_t v6 = *(void *)(a1 + 112);
  __int128 v7 = *(double **)(a1 + 160);
  __int128 v8 = *(double **)(a1 + 136);
  double *v8 = *v7 / (v38 + 0.0001);
  v8[1] = v7[1] / v5;
  _OWORD v8[2] = v7[2] / v5;
  void v8[3] = v7[3] / v5;
  double v37 = 0.0 - *(double *)(v6 + 16);
  uint64_t v9 = sub_10090F420(v4, &v37, (void *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), (double **)(a1 + 112));
  if ((v9 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v21 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:ZUPT innovation update failed", buf, 2u);
    }

    BOOL v22 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v22) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1) {
      goto LABEL_24;
    }
LABEL_71:
    dispatch_once(&qword_101934830, &stru_101860CB0);
LABEL_24:
    LOWORD(v36[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:ZUPT innovation update failed",  v36,  2,  v36[0]);
    goto LABEL_68;
  }

  if (!sub_10090FADC(v9, v2, (double **)(a1 + 136), &dword_101340DB0))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v23 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
    }

    BOOL v24 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v24) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1) {
      goto LABEL_31;
    }
LABEL_72:
    dispatch_once(&qword_101934830, &stru_101860CB0);
LABEL_31:
    LOWORD(v36[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:updateP failed",  v36,  2,  v36[0]);
    goto LABEL_68;
  }

  sub_10090E178(a1, (uint64_t)"zupt, vn update", -1.0);
  sub_10090FFCC(a1);
  if ((v10 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v25 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }

    BOOL v26 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v26) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1) {
      goto LABEL_67;
    }
    goto LABEL_73;
  }

  uint64_t v11 = sub_10090EFEC(v10, v2, &dword_101340DB4, v3, &v38);
  if ((v11 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    int v27 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }

    BOOL v28 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v28) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1) {
      goto LABEL_67;
    }
    goto LABEL_73;
  }

  double v12 = v38 + 0.0001;
  double v13 = *v3;
  double v14 = *(double **)(a1 + 136);
  *double v14 = **v3 / (v38 + 0.0001);
  v14[1] = v13[1] / v12;
  void v14[2] = v13[2] / v12;
  void v14[3] = v13[3] / v12;
  double v37 = 0.0 - *(double *)(*(void *)(a1 + 112) + 24LL);
  uint64_t v15 = sub_10090F420( v11,  &v37,  (void *)(a1 + 136),  (double *)(a1 + 208),  (double *)(a1 + 200),  (double **)(a1 + 112));
  if ((v15 & 1) == 0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v29 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "KF:ZUPT innovation update failed", buf, 2u);
    }

    BOOL v30 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v30) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }

  if (!sub_10090FADC(v15, v2, (double **)(a1 + 136), &dword_101340DB4))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int128 v31 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
    }

    BOOL v32 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v32) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1) {
      goto LABEL_31;
    }
    goto LABEL_72;
  }

  sub_10090E178(a1, (uint64_t)"ZUPT, ve update", -1.0);
  sub_10090FFCC(a1);
  if ((v16 & 1) != 0) {
    return 1LL;
  }
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  __int128 v33 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
  }

  BOOL v34 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v34)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 == -1)
    {
LABEL_67:
      LOWORD(v36[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:ZUPT failed",  v36,  2,  v36[0]);
      goto LABEL_68;
    }

uint64_t sub_10090EFEC(uint64_t a1, uint64_t *a2, unsigned int *a3, void *a4, void *a5)
{
  if (a2[1] - *a2 == 128)
  {
    if (a4[1] - *a4 != 32LL)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      uint64_t v9 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:Pht is not dimensioned",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        LOWORD(v23[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:Pht is not dimensioned",  v23,  2);
        int v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      sub_10064C7C4((uint64_t)a4, 4uLL);
    }

    uint64_t v10 = *a3;
    if (v10 < 4)
    {
      uint64_t v18 = *a2;
      BOOL v19 = (void *)*a4;
      void *v19 = *(void *)(*a2 + 8 * v10);
      v19[1] = *(void *)(v18 + 8 * v10 + 32);
      v19[2] = *(void *)(v18 + 8LL * (v10 + 8));
      v19[3] = *(void *)(v18 + 8LL * (v10 + 12));
      *a5 = v19[v10];
      return 1LL;
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v11 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:h_index exceeds bounds", buf, 2u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      LOWORD(v23[0]) = 0;
      LODWORD(v22) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:h_index exceeds bounds",  v23,  v22,  v23[0]);
LABEL_26:
      int v17 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)",  "%s\n",  v14);
      if (v17 != buf) {
        free(v17);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v15 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }

    BOOL v16 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v16)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:P is not dimensioned",  v23,  2,  v23[0]);
      goto LABEL_26;
    }
  }

  return result;
}

uint64_t sub_10090F420(uint64_t a1, double *a2, void *a3, double *a4, double *a5, double **a6)
{
  if (*a4 == 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v6 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "KF:dN == 0", buf, 2u);
    }

    BOOL v7 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 == -1)
      {
LABEL_8:
        LOWORD(v31[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:dN == 0",  v31,  2,  v31[0]);
LABEL_55:
        BOOL v30 = (uint8_t *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::applyInnovation(const double &, const std::vector<double> &, const double &, const double &, std::vector<double> &)",  "%s\n",  v9);
        if (v30 != buf) {
          free(v30);
        }
        return 0LL;
      }

BOOL sub_10090FADC(uint64_t a1, uint64_t *a2, double **a3, unsigned int *a4)
{
  if (a2[1] - *a2 != 128)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v11 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,KF:P is not dimensioned", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      v24[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:P is not dimensioned",  v24,  2);
      double v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    sub_10064C7C4((uint64_t)a2, 0x10uLL);
    return 0LL;
  }

  if ((char *)a3[1] - (char *)*a3 != 32)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    BOOL v12 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "KF:k is not dimensioned", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      v24[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:k is not dimensioned",  v24,  2);
      BOOL v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    sub_10064C7C4((uint64_t)a3, 4uLL);
    return 0LL;
  }

  uint64_t v6 = *a4;
  if (v6 < 4)
  {
    sub_1000071F0(buf, 0x10uLL);
    uint64_t v13 = 0LL;
    double v14 = *a3;
    uint64_t v15 = *a2;
    BOOL v16 = *(char **)buf;
    do
    {
      BOOL v17 = (double *)&v16[v13];
      double *v17 = *v14 * *(double *)(v15 + 32 * v6);
      v17[1] = *v14 * *(double *)(v15 + 8LL * ((4 * (_DWORD)v6) | 1u));
      _OWORD v17[2] = *v14 * *(double *)(v15 + 8LL * ((4 * (_DWORD)v6) | 2u));
      double v18 = *v14++;
      v17[3] = v18 * *(double *)(v15 + 8LL * ((4 * (_DWORD)v6) | 3u));
      v13 += 32LL;
    }

    while (v13 != 128);
    for (uint64_t i = 0LL; i != 128; i += 8LL)
      *(double *)(v15 + i) = *(double *)(v15 + i) - *(double *)&v16[i];
    BOOL v26 = v16;
    operator delete(v16);
    return 1LL;
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    BOOL v7 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "KF:h_index exceeds bounds", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      v24[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:h_index exceeds bounds",  v24,  2);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
      return 0LL;
    }
  }

  return result;
}

double sub_10090FFCC(uint64_t a1)
{
  float v2 = *(double **)(a1 + 88);
  if (*v2 <= 0.0 || v2[5] <= 0.0 || v2[10] <= 0.0 || (double result = v2[15], result <= 0.0))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    uint64_t v4 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "KF:diagonal element of P < 0", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:diagonal element of P < 0",  v8,  2);
      BOOL v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::sanityTestP()", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    sub_10090B27C(a1);
    __int128 v5 = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 40) = v5;
    *(void *)(a1 + 56) = *(void *)(a1 + 816);
    *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    double result = 0.0;
    *(void *)(a1 + 624) = 0LL;
  }

  return result;
}

uint64_t sub_1009101C4(uint64_t a1, uint64_t a2)
{
  float v2 = (_OWORD *)(a1 + 420);
  __int128 v3 = *(_OWORD *)(a1 + 532);
  __int128 v44 = *(_OWORD *)(a1 + 516);
  __int128 v45 = v3;
  v46[0] = *(_OWORD *)(a1 + 548);
  *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)(a1 + 560);
  __int128 v4 = *(_OWORD *)(a1 + 468);
  *(_OWORD *)uint64_t v42 = *(_OWORD *)(a1 + 452);
  *(_OWORD *)&v42[16] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 500);
  *(_OWORD *)&v42[32] = *(_OWORD *)(a1 + 484);
  __int128 v43 = v5;
  unsigned __int128 v6 = *(_OWORD *)(a1 + 436);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)(a1 + 420);
  *(_OWORD *)&v41[16] = v6;
  double v7 = COERCE_DOUBLE(v6 >> 32);
  if (v7 > 0.0)
  {
    uint64_t v9 = a1;
    float64x2_t v38 = *(float64x2_t *)&v41[4];
    double v10 = *(double *)&v42[28];
    v40[0] = fmax(v7, 1.0);
    if (*(double *)&v42[20] <= 0.0)
    {
      BOOL v16 = (uint64_t *)(a1 + 88);
      if (*(_BYTE *)(a1 + 248)) {
        BOOL v17 = (double *)&unk_101340DC0;
      }
      else {
        BOOL v17 = (double *)&unk_101340DC8;
      }
LABEL_27:
      if ((sub_100911348(a1, v16, v40, v17) & 1) != 0)
      {
        __int128 v19 = v2[7];
        *(_OWORD *)(v9 + 360) = v2[6];
        *(_OWORD *)(v9 + 376) = v19;
        *(_OWORD *)(v9 + 392) = v2[8];
        __int128 v20 = v2[3];
        *(_OWORD *)(v9 + 296) = v2[2];
        *(_OWORD *)(v9 + 312) = v20;
        __int128 v21 = v2[5];
        *(_OWORD *)(v9 + 32_Block_object_dispose(va, 8) = v2[4];
        *(_OWORD *)(v9 + 344) = v21;
        __int128 v22 = v2[1];
        *(_OWORD *)(v9 + 264) = *v2;
        *(_OWORD *)(v9 + 280) = v22;
        *(_OWORD *)(v9 + 404) = *(_OWORD *)((char *)v2 + 140);
        *(void *)(v9 + 184) = *(void *)(v9 + 496);
        BOOL v23 = *(float64x2_t **)(v9 + 112);
        *BOOL v23 = vmulq_f64(v38, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
        double v24 = *(double *)&v42[12];
        double v25 = 0.0;
        if (*(double *)&v42[12] < 0.0)
        {
          double v26 = 0.0;
        }

        else
        {
          double v26 = 0.0;
          if (v10 >= 0.0)
          {
            __double2 v27 = __sincos_stret(v10 * 0.0174532925);
            double v25 = v27.__cosval * v24;
            double v26 = v27.__sinval * v24;
          }
        }

        v23[1].f64[0] = v25;
        v23[1].f64[1] = v26;
        double v30 = *(double *)(v9 + 456);
        if (v30 > 0.0)
        {
          float v31 = *(double *)(v9 + 448);
          *(float *)(v9 + 584) = v31;
          float v32 = v30 * v30;
          *(float *)(v9 + 58_Block_object_dispose(va, 8) = v32;
          if (v32 < 1.0) {
            *(_DWORD *)(v9 + 58_Block_object_dispose(va, 8) = 1065353216;
          }
        }

        *(_BYTE *)(v9 + 249) = 1;
        *(void *)(v9 + 256) = 0LL;
        int v33 = *(_DWORD *)(v9 + 516);
        if (v33 == 6) {
          *(_BYTE *)(v9 + 576) = 1;
        }
        BOOL v34 = (sub_10090B6F8(v33) & 1) != 0 || *(_DWORD *)(v9 + 516) == 4 && *(int *)(v9 + 504) > 72;
        *(_BYTE *)(v9 + 592) = v34;
        sub_1001B4C40((void *)(v9 + 600));
        if ((sub_100910E10(v9, a2, 0) & 1) != 0)
        {
          sub_10090E178(v9, (uint64_t)"init", -1.0);
          return 1LL;
        }

        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        unint64_t v35 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "KF:getResult failed", buf, 2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_57;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        v39[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:getResult failed",  v39,  2);
      }

      else
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        BOOL v28 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "KF:init P failed", buf, 2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_57;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        v39[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:init P failed",  v39,  2);
      }

      double v37 = (uint8_t *)v29;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::seedTheFilter(CLDaemonLocation &)", "%s\n", v29);
      if (v37 != buf) {
        free(v37);
      }
LABEL_57:
      sub_10090B27C(v9);
      uint64_t result = 0LL;
      __int128 v36 = *(_OWORD *)(v9 + 800);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 784);
      *(_OWORD *)(v9 + 40) = v36;
      *(void *)(v9 + 56) = *(void *)(v9 + 816);
      *(_BYTE *)(v9 + 24_Block_object_dispose(va, 8) = 0;
      *(void *)(v9 + 624) = 0LL;
      return result;
    }

    if (*(double *)&v42[12] < 0.0)
    {
LABEL_26:
      BOOL v16 = (uint64_t *)(v9 + 88);
      BOOL v17 = (double *)&v42[20];
      goto LABEL_27;
    }

    if (*(double *)&v42[12] > 1.5 && *(_BYTE *)(a1 + 248))
    {
      *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
    }

    else
    {
      a1 = sub_10090B6F8(v44);
      if (*(double *)&v42[20] >= 5.0 || *(double *)&v42[12] <= 10.0 || !(_DWORD)a1)
      {
LABEL_24:
        if (v10 >= 0.0) {
          *(double *)(v9 + 240) = v10;
        }
        goto LABEL_26;
      }
    }

    __int128 v18 = *(_OWORD *)(v9 + 800);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 784);
    *(_OWORD *)(v9 + 40) = v18;
    *(void *)(v9 + 56) = *(void *)(v9 + 816);
    goto LABEL_24;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  uint64_t v11 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:seedTheFilter,hunc<=0", buf, 2u);
  }

  BOOL v12 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    LOWORD(v40[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:seedTheFilter,hunc<=0",  v40,  2);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::seedTheFilter(CLDaemonLocation &)", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_100910818(uint64_t a1)
{
  if (*(void *)(a1 + 616) < 2uLL) {
    return 0LL;
  }
  uint64_t v69 = 0LL;
  uint64_t v70 = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  __int128 v71 = xmmword_1012E0070;
  __int128 v72 = _Q1;
  __int128 v73 = _Q1;
  __int128 v74 = _Q1;
  int v68 = 0xFFFF;
  int v75 = 0;
  unint64_t v76 = 0xBFF0000000000000LL;
  uint64_t v77 = 0LL;
  uint64_t v78 = 0LL;
  unint64_t v80 = 0xBFF0000000000000LL;
  int v79 = 0;
  int v81 = 0x7FFFFFFF;
  uint64_t v83 = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v82 = 0LL;
  char v85 = 0;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  __int128 v53 = xmmword_1012E0070;
  __int128 v54 = _Q1;
  __int128 v55 = _Q1;
  __int128 v56 = _Q1;
  int v50 = 0xFFFF;
  int v57 = 0;
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  unint64_t v58 = 0xBFF0000000000000LL;
  unint64_t v62 = 0xBFF0000000000000LL;
  int v61 = 0;
  int v63 = 0x7FFFFFFF;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v64 = 0LL;
  char v67 = 0;
  int v32 = 0xFFFF;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  __int128 v35 = xmmword_1012E0070;
  __int128 v36 = _Q1;
  __int128 v37 = _Q1;
  __int128 v38 = _Q1;
  int v39 = 0;
  uint64_t v42 = 0LL;
  unint64_t v40 = 0xBFF0000000000000LL;
  uint64_t v41 = 0LL;
  unint64_t v44 = 0xBFF0000000000000LL;
  int v43 = 0;
  int v45 = 0x7FFFFFFF;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v46 = 0LL;
  char v49 = 0;
  uint64_t v7 = *(void *)(a1 + 608);
  if (v7 == a1 + 600) {
    return 0LL;
  }
  do
  {
    int v8 = *(_DWORD *)(v7 + 112);
    switch(v8)
    {
      case 9:
        uint64_t v9 = &v32;
        break;
      case 6:
        uint64_t v9 = &v68;
        break;
      case 4:
        uint64_t v9 = &v50;
        break;
      default:
        goto LABEL_10;
    }

    __int128 v10 = *(_OWORD *)(v7 + 128);
    *((_OWORD *)v9 + 6) = *(_OWORD *)(v7 + 112);
    *((_OWORD *)v9 + 7) = v10;
    *((_OWORD *)v9 + _Block_object_dispose(va, 8) = *(_OWORD *)(v7 + 144);
    *(_OWORD *)(v9 + 35) = *(_OWORD *)(v7 + 156);
    __int128 v11 = *(_OWORD *)(v7 + 64);
    *((_OWORD *)v9 + 2) = *(_OWORD *)(v7 + 48);
    *((_OWORD *)v9 + 3) = v11;
    __int128 v12 = *(_OWORD *)(v7 + 96);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(v7 + 80);
    *((_OWORD *)v9 + 5) = v12;
    __int128 v13 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(v7 + 16);
    *((_OWORD *)v9 + 1) = v13;
LABEL_10:
    uint64_t v7 = *(void *)(v7 + 8);
  }

  while (v7 != a1 + 600);
  double v14 = *(double *)&v71;
  double v15 = *(double *)&v53;
  if (*(double *)&v71 <= 0.0
    || *(double *)&v53 <= 0.0
    || ((sub_100D2DCA4((double *)(a1 + 832), (uint64_t)&v50, (uint64_t)&v68),
         double v14 = *(double *)&v71,
         double v15 = *(double *)&v53,
         *(double *)&v53 <= *(double *)&v71)
      ? (double v17 = *(double *)&v71)
      : (double v17 = *(double *)&v53),
        v16 >= v17 * 3.0))
  {
    double v21 = *(double *)&v35;
    if (v14 > 0.0 && *(double *)&v35 > 0.0)
    {
      sub_100D2DCA4((double *)(a1 + 832), (uint64_t)&v32, (uint64_t)&v68);
      double v23 = *(double *)&v71;
      double v21 = *(double *)&v35;
      if (v22 < v23 * 3.0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        double v24 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "KF:rejected cell and coarse-gps locations are consistent,filter should reset",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 1LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        v31[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:rejected cell and coarse-gps locations are consistent,filter should reset",  v31,  2);
        __int128 v20 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()",  "%s\n",  v25);
        goto LABEL_54;
      }

      double v15 = *(double *)&v53;
    }

    if (v15 > 0.0 && v21 > 0.0)
    {
      sub_100D2DCA4((double *)(a1 + 832), (uint64_t)&v50, (uint64_t)&v32);
      double v27 = *(double *)&v53;
      if (v26 < v27 * 3.0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        BOOL v28 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "KF:rejected wifi and coarse-gps locations are consistent,filter should reset",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          return 1LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        v31[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:rejected wifi and coarse-gps locations are consistent,filter should reset",  v31,  2);
        __int128 v20 = (uint8_t *)v30;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()",  "%s\n",  v30);
LABEL_54:
        if (v20 != buf) {
          free(v20);
        }
        return 1LL;
      }
    }

    return 0LL;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  __int128 v18 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "KF:rejected cell and wifi locations are consistent,filter should reset",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    v31[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "KF:rejected cell and wifi locations are consistent,filter should reset",  v31,  2);
    __int128 v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()",  "%s\n",  v19);
    goto LABEL_54;
  }

  return 1LL;
}

uint64_t sub_100910E10(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v51 = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;
  __int128 v3 = (_DWORD *)(a2 + 128);
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(void *)(a2 + 12) = 0LL;
  *(void *)(a2 + 4) = 0LL;
  *(_OWORD *)(a2 + 20) = xmmword_1012E0070;
  __asm { FMOV            V3.2D, #-1.0 }

  *(_OWORD *)(a2 + 36) = _Q3;
  *(_OWORD *)(a2 + 52) = _Q3;
  *(_OWORD *)(a2 + 6_Block_object_dispose(va, 8) = _Q3;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(a2 + 116) = 0xBFF0000000000000LL;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  int v8 = *(double **)(a1 + 88);
  if (*(void *)(a1 + 96) - (void)v8 == 128LL)
  {
    __int128 v10 = *(float64x2_t **)(a1 + 112);
    if (*(void *)(a1 + 120) - (void)v10 == 32LL)
    {
      double v13 = *v8;
      double v14 = v8[5];
      double v15 = sqrt(v8[10] + v8[15]);
      if (v15 >= 0.001 || v15 < 0.0) {
        double v17 = v15;
      }
      else {
        double v17 = 0.001;
      }
      __int128 v48 = _Q3;
      float64x2_t v49 = *v10;
      if (v17 <= 30.0)
      {
        double v27 = v10[1].f64[0];
        double v26 = v10[1].f64[1];
        double v18 = sqrt(v26 * v26 + v27 * v27);
        if (fabs(v27) + fabs(v26) >= 0.1)
        {
          double v28 = atan2(v26, v27) * 57.2957795;
          if (v28 < 0.0) {
            double v28 = v28 + 360.0;
          }
          unint64_t v51 = *(void *)&v28;
          *(double *)(a1 + 240) = v28;
        }

        else
        {
          unint64_t v51 = *(void *)(a1 + 240);
        }
      }

      else
      {
        unint64_t v51 = 0xBFF0000000000000LL;
        *(void *)(a1 + 240) = 0xBFF0000000000000LL;
        double v18 = -1.0;
      }

      uint64_t v29 = sub_10090B6F8(*(_DWORD *)(a1 + 516));
      if ((_DWORD)v29)
      {
        __int128 v30 = *(_OWORD *)(a1 + 436);
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 420);
        *(_OWORD *)(a2 + 16) = v30;
        __int128 v31 = *(_OWORD *)(a1 + 452);
        __int128 v32 = *(_OWORD *)(a1 + 468);
        __int128 v33 = *(_OWORD *)(a1 + 500);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 484);
        *(_OWORD *)(a2 + 80) = v33;
        *(_OWORD *)(a2 + 32) = v31;
        *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v32;
        __int128 v34 = *(_OWORD *)(a1 + 516);
        __int128 v35 = *(_OWORD *)(a1 + 532);
        __int128 v36 = *(_OWORD *)(a1 + 548);
        *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 560);
        *(_OWORD *)(a2 + 112) = v35;
        *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = v36;
        *(_OWORD *)(a2 + 96) = v34;
      }

      else
      {
        double v37 = sqrt(v13 + v14);
        int v38 = *(_DWORD *)(a1 + 516);
        *(_DWORD *)(a2 + 96) = v38;
        *(void *)(a2 + 76) = *(void *)(a1 + 184);
        *(_DWORD *)a2 = *(_DWORD *)(a1 + 420);
        *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 504);
        *(void *)(a2 + 8_Block_object_dispose(va, 8) = *(void *)(a1 + 508);
        *(float64x2_t *)(a2 + 4) = vmulq_f64(v49, (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F5uLL));
        *(_DWORD *)(a2 + 132) = 1;
        *(double *)(a2 + 20) = v37;
        uint64_t v39 = *(void *)(a1 + 112);
        double v40 = *(double *)(v39 + 16);
        double v41 = *(double *)(v39 + 24);
        uint64_t v42 = *(double **)(a1 + 88);
        double v43 = v42[15];
        double v44 = v42[10];
        double v45 = v42[11];
        *(void *)std::stringbuf::string_type buf = 0xBFF0000000000000LL;
        sub_10090D9DC(v40, v41, v44, v43, v45, v29, (double *)&v51, (double *)buf);
        *(void *)(a2 + 60) = v51;
        *(void *)(a2 + 6_Block_object_dispose(va, 8) = *(void *)buf;
        *(double *)(a2 + 44) = v18;
        *(double *)(a2 + 52) = v17;
        if ((a3 & 1) == 0)
        {
          if (v38 != 4 && v38 != 9)
          {
            *(_OWORD *)(a2 + 44) = v48;
            *(_OWORD *)(a2 + 60) = v48;
          }

          if (*(_DWORD *)(a1 + 516) == 9 && v37 < 200.0) {
            *(void *)(a2 + 20) = 0x4069000000000000LL;
          }
        }

        float v46 = *(float *)(a1 + 588);
        if (v46 > 0.0)
        {
          *(double *)(a2 + 2_Block_object_dispose(va, 8) = *(float *)(a1 + 584);
          float v47 = sqrtf(v46);
          *(double *)(a2 + 36) = v47;
          if (v47 < 1.0) {
            *(void *)(a2 + 36) = 0x3FF0000000000000LL;
          }
        }
      }

      *__int128 v3 = *(_DWORD *)(a1 + 548);
      return 1LL;
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    double v23 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:x is not dimensioned", buf, 2u);
    }

    BOOL v24 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v24)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      __int16 v50 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:x is not dimensioned",  &v50,  2);
LABEL_27:
      double v25 = (uint8_t *)v22;
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLKalmanFilter::getResult(CLDaemonLocation &, BOOL)", "%s\n", v22);
      if (v25 != buf) {
        free(v25);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int128 v19 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "KF:P is not dimensioned", buf, 2u);
    }

    BOOL v20 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v20)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      __int16 v50 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:P is not dimensioned",  &v50,  2);
      goto LABEL_27;
    }
  }

  return result;
}

uint64_t sub_100911348(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  if (*a3 <= 0.0)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int128 v12 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "KF:initP,hunc <= 0", buf, 2u);
    }

    BOOL v13 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (!v13) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:initP,hunc <= 0",  v20,  2,  v20[0]);
LABEL_27:
    double v17 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)",  "%s\n",  v14);
    if (v17 != buf) {
      free(v17);
    }
    return 0LL;
  }

  if (*a4 > 0.0)
  {
    if (a2[1] - *a2 != 128)
    {
      sub_10064C7C4((uint64_t)a2, 0x10uLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      uint64_t v7 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,P was not dimensioned", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        LOWORD(v20[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,P was not dimensioned",  v20,  2);
        __int128 v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }
    }

    double v8 = *a3 * *a3 * 0.5;
    uint64_t v9 = *a2;
    double v10 = *a4 * *a4 * 0.5;
    *(double *)uint64_t v9 = v8;
    *(_OWORD *)(v9 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(double *)(v9 + 40) = v8;
    *(_OWORD *)(v9 + 4_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(double *)(v9 + 80) = v10;
    *(_OWORD *)(v9 + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(double *)(v9 + 120) = v10;
    return 1LL;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101860CB0);
  }
  double v15 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "KF:initP,speedUnc <= 0", buf, 2u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    LOWORD(v20[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:initP,speedUnc <= 0",  v20,  2,  v20[0]);
    goto LABEL_27;
  }

  return result;
}

uint64_t sub_100911784(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4, double *a5)
{
  if (*a5 >= 0.0)
  {
    if (*(_BYTE *)(a4 + 40))
    {
      if (a3[1] - *a3 != 128)
      {
        sub_10064C7C4((uint64_t)a3, 0x10uLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        double v14 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning,KF:Q was not dimensioned",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          LOWORD(v35[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "#Warning,KF:Q was not dimensioned",  v35,  2);
          __int128 v33 = (uint8_t *)v32;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLKalmanFilter::setQ(const BOOL &, std::vector<double> &, const KalmanTuningInfo &, const double &)",  "%s\n",  v32);
          if (v33 != buf) {
            free(v33);
          }
        }
      }

      double v15 = *(double *)(a4 + 24);
      if (v15 == 0.0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        BOOL v16 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "KF:tuning invalid, beta == 0", buf, 2u);
        }

        BOOL v17 = sub_1002921D0(115, 0);
        uint64_t result = 0LL;
        if (v17)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101860CB0);
          }
          LOWORD(v35[0]) = 0;
          LODWORD(v34) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:tuning invalid, beta == 0",  v35,  v34,  v35[0]);
          goto LABEL_34;
        }
      }

      else
      {
        double v21 = *a5;
        double v22 = exp(-(v15 * *a5));
        double v23 = exp(v15 * -2.0 * v21);
        double v24 = *(double *)(a4 + 32);
        double v25 = 1.0 - v23;
        double v26 = (1.0 - v23) / (v15 + v15);
        double v27 = v24 / (v15 * v15) * (v26 + v21 - (1.0 - v22 + 1.0 - v22) / v15);
        double v28 = v24 / v15 * ((1.0 - v22) / v15 - v26);
        uint64_t v29 = *a3;
        *(double *)uint64_t v29 = v27;
        *(void *)(v29 + _Block_object_dispose(va, 8) = 0LL;
        *(double *)(v29 + 16) = v28;
        *(void *)(v29 + 24) = 0LL;
        *(void *)(v29 + 32) = 0LL;
        *(double *)(v29 + 40) = v27;
        *(void *)(v29 + 4_Block_object_dispose(va, 8) = 0LL;
        *(double *)(v29 + 56) = v28;
        *(double *)(v29 + 64) = v28;
        *(void *)(v29 + 72) = 0LL;
        double v30 = v24 * v25 / (v15 + v15);
        *(double *)(v29 + 80) = v30;
        *(void *)(v29 + 8_Block_object_dispose(va, 8) = 0LL;
        *(void *)(v29 + 96) = 0LL;
        *(double *)(v29 + 104) = v28;
        *(void *)(v29 + 112) = 0LL;
        *(double *)(v29 + 120) = v30;
        if (*a2)
        {
          double v31 = v27 + *a5 * dbl_101340D40[((*(_DWORD *)(a1 + 628) - 4) & 0xFFFFFFFB) == 0];
          *(double *)uint64_t v29 = v31;
          *(double *)(v29 + 40) = v31;
        }

        return 1LL;
      }
    }

    else
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      double v18 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "KF:tuning invalid", buf, 2u);
      }

      BOOL v19 = sub_1002921D0(115, 0);
      uint64_t result = 0LL;
      if (v19)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101860CB0);
        }
        LOWORD(v35[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:tuning invalid",  v35,  2,  v35[0]);
        goto LABEL_34;
      }
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101860CB0);
    }
    __int128 v5 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "KF:dT < 0", buf, 2u);
    }

    BOOL v6 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101860CB0);
      }
      LOWORD(v35[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "KF:dT < 0",  v35,  2,  v35[0]);
LABEL_34:
      BOOL v20 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLKalmanFilter::setQ(const BOOL &, std::vector<double> &, const KalmanTuningInfo &, const double &)",  "%s\n",  v8);
      if (v20 != buf) {
        free(v20);
      }
      return 0LL;
    }
  }

  return result;
}

void sub_100911D4C(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t *sub_100911D78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = a1[1]; a2 != a3 && (uint64_t *)i != a1; uint64_t i = *(void *)(i + 8))
  {
    __int128 v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(i + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(i + 32) = v6;
    __int128 v7 = *(_OWORD *)(a2 + 48);
    __int128 v8 = *(_OWORD *)(a2 + 64);
    __int128 v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(i + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(i + 96) = v9;
    *(_OWORD *)(i + 4_Block_object_dispose(va, 8) = v7;
    *(_OWORD *)(i + 64) = v8;
    __int128 v10 = *(_OWORD *)(a2 + 112);
    __int128 v11 = *(_OWORD *)(a2 + 128);
    __int128 v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(i + 156) = *(_OWORD *)(a2 + 156);
    *(_OWORD *)(i + 12_Block_object_dispose(va, 8) = v11;
    *(_OWORD *)(i + 144) = v12;
    *(_OWORD *)(i + 112) = v10;
    a2 = *(void *)(a2 + 8);
  }

  else {
    return sub_100911DE8((uint64_t)a1, (uint64_t *)i, a1);
  }
}

uint64_t *sub_100911DE8(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + _Block_object_dispose(va, 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + _Block_object_dispose(va, 8) = v6;
    do
    {
      __int128 v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      std::string __p = v7;
    }

    while (v7 != a3);
  }

  return a3;
}

uint64_t sub_100911E58(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 0;
  sub_10001A504(a1 + 8, a3);
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  return a1;
}

void sub_100911EA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void **)(v3 + 32);
  if (v5 == v1)
  {
    uint64_t v6 = 4LL;
  }

  else
  {
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
    char v1 = v5;
  }

  (*(void (**)(void *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100911EE4(uint64_t a1)
{
  *(void *)(a1 + 40) = 0LL;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 == (void *)(a1 + 8))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 8);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_100911F48(uint64_t a1, uint64_t a2, double a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_100007590( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(_DWORD *)(a1 + 24) = (*(void *)(a2 + 8) - *(void *)a2) >> 3;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 4_Block_object_dispose(va, 8) = a3;
  if (!sub_10091205C(a1))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "Hour bin edges must be strictly increasing, [0.0, 24.0), and there must be at least one edge");
  }

  sub_100912104(a1, a3);
  int v6 = sub_1009124E8(a1, *(double *)(a1 + 48));
  if (v6 != *(_DWORD *)(a1 + 40)) {
    *(_DWORD *)(a1 + 40) = v6;
  }
  return a1;
}

void sub_100912030(_Unwind_Exception *a1)
{
  __int128 v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

BOOL sub_10091205C(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  unint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  double v3 = *v1;
  if (*v1 < 0.0 || v3 >= 24.0) {
    return 0LL;
  }
  BOOL result = 0LL;
  double v6 = v1[1];
  if (v6 < 24.0 && v6 >= 0.0 && v6 > v3)
  {
    uint64_t v8 = (int)((uint64_t)v2 >> 3);
    uint64_t v9 = (v2 >> 3);
    uint64_t v10 = 2LL;
    do
    {
      uint64_t v11 = v10;
      if (v9 == v10) {
        break;
      }
      double v12 = v1[v10];
      if (v12 >= 24.0) {
        break;
      }
      ++v10;
      BOOL v13 = v12 >= 0.0 && v12 > v6;
      double v6 = v1[v11];
    }

    while (v13);
    return v11 >= v8;
  }

  return result;
}

BOOL sub_100912104(uint64_t a1, double a2)
{
  double v3 = (double)-[NSTimeZone secondsFromGMTForDate:]( +[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"),  "secondsFromGMTForDate:",  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  a2));
  double v4 = *(double *)(a1 + 32);
  if (v4 != v3) {
    *(double *)(a1 + 32) = v3;
  }
  return v4 != v3;
}

double sub_100912178(uint64_t a1)
{
  double v2 = *(double *)(*(void *)a1 + 8LL * *(int *)(a1 + 40)) * 3600.0;
  double v3 = *(double *)(a1 + 48);
  uint64_t v4 = -[NSTimeZone secondsFromGMTForDate:]( +[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"),  "secondsFromGMTForDate:",  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v3));
  double v5 = *(double *)(a1 + 32);
  double v6 = floor((*(double *)(a1 + 48) + v5) / 86400.0) * 86400.0;
  else {
    double v7 = v6 + -86400.0;
  }
  return v2 + v7 - v5;
}

double sub_100912280(double a1)
{
  uint64_t v2 = -[NSTimeZone secondsFromGMTForDate:]( +[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"),  "secondsFromGMTForDate:",  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  a1));
  return ((double)v2 + a1 - floor(((double)v2 + a1) / 86400.0) * 86400.0) / 3600.0;
}

uint64_t sub_1009122FC(uint64_t a1, unsigned int a2, double a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if (v3 > (int)a2)
    {
      int v4 = v3 - 1;
      double v5 = *(double **)a1;
      double v6 = *(double *)(*(void *)a1 + 8LL * a2);
      if (v4 == a2)
      {
        if (v6 <= a3) {
          return 1LL;
        }
        double v7 = *v5;
        return v7 > a3;
      }

      if (v6 <= a3)
      {
        double v7 = v5[a2 + 1];
        return v7 > a3;
      }

      return 0LL;
    }
  }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_101860CD0);
  }
  uint64_t v8 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "WallClockHourBinTracker, bin index out of bounds",  buf,  2u);
  }

  BOOL v9 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101860CD0);
    }
    v12[0] = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "WallClockHourBinTracker, bin index out of bounds",  v12,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWallClockHourBinTracker::isHourInBin(double, int) const", "%s\n", v11);
    return 0LL;
  }

  return result;
}

uint64_t sub_1009124E8(uint64_t a1, double a2)
{
  uint64_t v4 = -[NSTimeZone secondsFromGMTForDate:]( +[NSTimeZone localTimeZone](&OBJC_CLASS___NSTimeZone, "localTimeZone"),  "secondsFromGMTForDate:",  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  a2));
  double v5 = ((double)v4 + a2 - floor(((double)v4 + a2) / 86400.0) * 86400.0) / 3600.0;
  char v6 = sub_1009122FC(a1, *(_DWORD *)(a1 + 40), v5);
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    int v8 = *(_DWORD *)(a1 + 24) + v7;
    for (int i = v7 + 1; i < v8; ++i)
    {
      int v10 = *(_DWORD *)(a1 + 24);
      uint64_t v7 = (i % v10);
      char v11 = sub_1009122FC(a1, i % v10, v5);
      if ((v11 & 1) != 0) {
        return v7;
      }
    }

    return *(unsigned int *)(a1 + 40);
  }

  return v7;
}

BOOL sub_1009125CC(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 48) <= a2)
  {
    *(double *)(a1 + 4_Block_object_dispose(va, 8) = a2;
    BOOL v7 = sub_100912104(a1, a2);
    int v8 = sub_1009124E8(a1, *(double *)(a1 + 48));
    int v9 = *(_DWORD *)(a1 + 40);
    BOOL result = v8 != v9;
    if (v8 != v9) {
      *(_DWORD *)(a1 + 40) = v8;
    }
    if (v7)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101860CD0);
      }
      int v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "WallClockHourBinTracker, time zone change",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_101860CD0);
        }
        v12[0] = 0;
        char v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "WallClockHourBinTracker, time zone change",  v12,  2);
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLWallClockHourBinTracker::update(CFAbsoluteTime)", "%s\n", v11);
      }

      return 1LL;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101860CD0);
    }
    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "WallClockHourBinTracker, unexpected time rollback",  buf,  2u);
    }

    BOOL v3 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101860CD0);
      }
      v12[0] = 0;
      double v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  16LL,  "WallClockHourBinTracker, unexpected time rollback",  v12,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLWallClockHourBinTracker::update(CFAbsoluteTime)", "%s\n", v5);
      return 0LL;
    }
  }

  return result;
}

void sub_1009128D4(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100912900(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  if (v5)
  {
    char v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  uint64_t v8 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    int v9 = (unint64_t *)(v8 + 8);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  uint64_t v11 = a4[1];
  *(void *)(a1 + 32) = *a4;
  *(void *)(a1 + 40) = v11;
  if (v11)
  {
    double v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  double v14 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v29 = *(void *)a1;
  double v30 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  sub_10091937C(a1 + 48, &v29);
  BOOL v17 = v30;
  if (v30)
  {
    double v18 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  BOOL v20 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v27 = *(void *)a1;
  double v28 = v20;
  if (v20)
  {
    double v21 = (unint64_t *)&v20->__shared_owners_;
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  sub_10091942C(a1 + 216, &v27);
  double v23 = v28;
  if (v28)
  {
    double v24 = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  *(_BYTE *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 564) = xmmword_101340EB0;
  *(_OWORD *)(a1 + 580) = unk_101340EC0;
  *(_OWORD *)(a1 + 596) = xmmword_101340ED0;
  *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = *(__int128 *)((char *)&xmmword_101340ED0 + 12);
  *(void *)(a1 + 624) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 632) = 0LL;
  *(void *)(a1 + 64_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 640) = 0LL;
  *(_DWORD *)(a1 + 656) = 0;
  return a1;
}

void sub_100912AAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100912AF0(uint64_t a1)
{
  return sub_10000AE14(a1);
}

void sub_100912B24(uint64_t a1, uint64_t a2)
{
}

void sub_100912B5C(uint64_t a1, __int128 *a2)
{
  if (*(double *)(a1 + 176) == 0.0)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    uint64_t v4 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }

      uint64_t v5 = __p;
      if (__p[23] < 0) {
        uint64_t v5 = *(_BYTE **)__p;
      }
      uint64_t v6 = *((void *)a2 + 1);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&buf[14] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "BoutDetector (%{public}s): Initializing StepCountEntry %{public}.2f",  buf,  0x16u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      uint64_t v65 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }

      char v67 = buf;
      if (buf[23] < 0) {
        char v67 = *(_BYTE **)buf;
      }
      uint64_t v68 = *((void *)a2 + 1);
      *(_DWORD *)char __dst = 136446466;
      *(void *)&__dst[4] = v67;
      *(_WORD *)&_OWORD __dst[12] = 2050;
      *(void *)&__dst[14] = v68;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v65,  2LL,  "BoutDetector (%{public}s): Initializing StepCountEntry %{public}.2f",  __dst,  22);
      uint64_t v70 = v69;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v70);
      if (v70 != __p) {
        free(v70);
      }
    }

    __int128 v7 = *a2;
    __int128 v8 = a2[1];
    *(_OWORD *)(a1 + 200) = a2[2];
    *(_OWORD *)(a1 + 184) = v8;
    *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v7;
    __int128 v9 = a2[3];
    __int128 v10 = a2[4];
    __int128 v11 = a2[5];
    *(_OWORD *)(a1 + 264) = a2[6];
    *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = v11;
    *(_OWORD *)(a1 + 232) = v10;
    *(_OWORD *)(a1 + 216) = v9;
    __int128 v12 = a2[7];
    __int128 v13 = a2[8];
    __int128 v14 = a2[10];
    *(_OWORD *)(a1 + 312) = a2[9];
    *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = v14;
    *(_OWORD *)(a1 + 280) = v12;
    *(_OWORD *)(a1 + 296) = v13;
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  double v15 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *((void *)a2 + 1);
    int v17 = *((_DWORD *)a2 + 6) - *(_DWORD *)(a1 + 192);
    *(_DWORD *)std::string __p = 134218240;
    *(void *)&__p[4] = v16;
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Received StepCountEntry -- startTime,%.2f,deltaSteps,%d",  __p,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    uint64_t v61 = *((void *)a2 + 1);
    int v62 = *((_DWORD *)a2 + 6) - *(_DWORD *)(a1 + 192);
    *(_DWORD *)std::stringbuf::string_type buf = 134218240;
    *(void *)&uint8_t buf[4] = v61;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v62;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Received StepCountEntry -- startTime,%.2f,deltaSteps,%d",  COERCE_DOUBLE(buf),  18);
    uint64_t v64 = (char *)v63;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v63);
    if (v64 != __p) {
      free(v64);
    }
  }

  if (!*(_DWORD *)(a1 + 148))
  {
    int v18 = *((_DWORD *)a2 + 6);
    int v19 = *(_DWORD *)(a1 + 192);
    if (v18 < v19)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      BOOL v20 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }

        double v26 = buf;
        if (buf[23] < 0) {
          double v26 = *(_BYTE **)buf;
        }
        BOOL v27 = *(double *)(a1 + 80) != 0.0;
        int v28 = *((_DWORD *)a2 + 6);
        int v29 = *(_DWORD *)(a1 + 192);
        uint64_t v30 = *((void *)a2 + 1);
        uint64_t v31 = *(void *)(a1 + 176);
        *(_DWORD *)std::string __p = 136447491;
        *(void *)&__p[4] = v26;
        *(_WORD *)&_BYTE __p[12] = 1026;
        *(_DWORD *)&__p[14] = v27;
        *(_WORD *)&__p[18] = 1025;
        *(_DWORD *)&__p[20] = v28;
        *(_WORD *)&__p[24] = 1025;
        *(_DWORD *)&__p[26] = v29;
        *(_WORD *)&__p[30] = 2050;
        *(void *)&__p[32] = v30;
        *(_WORD *)&__p[40] = 2050;
        *(void *)&__p[42] = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): Step count rolled back. boutInProgress, %{public}d, curStepCount, %{private}u, prev StepCount, %{private}u, curStepTime, %{public}.2f, prevStepTime, %{public}.2f",  __p,  0x32u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_45;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      uint64_t v66 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)char __dst = *(_OWORD *)(a1 + 40);
        *(void *)&__dst[16] = *(void *)(a1 + 56);
      }

      __int128 v72 = __dst;
      if (__dst[23] < 0) {
        __int128 v72 = *(_BYTE **)__dst;
      }
      BOOL v73 = *(double *)(a1 + 80) != 0.0;
      int v74 = *((_DWORD *)a2 + 6);
      int v75 = *(_DWORD *)(a1 + 192);
      uint64_t v76 = *((void *)a2 + 1);
      uint64_t v77 = *(void *)(a1 + 176);
      *(_DWORD *)std::stringbuf::string_type buf = 136447491;
      *(void *)&uint8_t buf[4] = v72;
      *(_WORD *)&_BYTE buf[12] = 1026;
      *(_DWORD *)&buf[14] = v73;
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v74;
      *(_WORD *)&_BYTE buf[24] = 1025;
      *(_DWORD *)&buf[26] = v75;
      *(_WORD *)&buf[30] = 2050;
      *(void *)&buf[32] = v76;
      *(_WORD *)&buf[40] = 2050;
      *(void *)&buf[42] = v77;
      LODWORD(v104) = 50;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v66,  16LL,  "BoutDetector (%{public}s): Step count rolled back. boutInProgress, %{public}d, curStepCount, %{private}u, prevSt epCount, %{private}u, curStepTime, %{public}.2f, prevStepTime, %{public}.2f",  buf,  v104);
      int v79 = v78;
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v79);
      if (v79 == __p) {
        goto LABEL_45;
      }
      goto LABEL_107;
    }

    double v21 = *((double *)a2 + 11) - *(double *)(a1 + 256);
    if (v21 < 0.0)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      unint64_t v22 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }

        __int128 v32 = buf;
        if (buf[23] < 0) {
          __int128 v32 = *(_BYTE **)buf;
        }
        BOOL v33 = *(double *)(a1 + 80) != 0.0;
        uint64_t v34 = *((void *)a2 + 11);
        uint64_t v35 = *(void *)(a1 + 256);
        uint64_t v36 = *((void *)a2 + 1);
        uint64_t v37 = *(void *)(a1 + 176);
        *(_DWORD *)std::string __p = 136447491;
        *(void *)&__p[4] = v32;
        *(_WORD *)&_BYTE __p[12] = 1026;
        *(_DWORD *)&__p[14] = v33;
        *(_WORD *)&__p[18] = 2049;
        *(void *)&__p[20] = v34;
        *(_WORD *)&_BYTE __p[28] = 2049;
        *(void *)&__p[30] = v35;
        *(_WORD *)&__p[38] = 2050;
        *(void *)&__p[40] = v36;
        *(_WORD *)&__p[48] = 2050;
        *(void *)&__p[50] = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): Active time rolled back. boutInProgress, %{public}d, curActiveTime, %{private}.2f, prevActiveTime, %{private}.2f, curStepTime, %{public}.2f, prevStepTime, %{public}.2f",  __p,  0x3Au);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_45;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      uint64_t v71 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)char __dst = *(_OWORD *)(a1 + 40);
        *(void *)&__dst[16] = *(void *)(a1 + 56);
      }

      uint64_t v82 = __dst;
      if (__dst[23] < 0) {
        uint64_t v82 = *(_BYTE **)__dst;
      }
      BOOL v83 = *(double *)(a1 + 80) != 0.0;
      uint64_t v84 = *((void *)a2 + 11);
      uint64_t v85 = *(void *)(a1 + 256);
      uint64_t v86 = *((void *)a2 + 1);
      uint64_t v87 = *(void *)(a1 + 176);
      *(_DWORD *)std::stringbuf::string_type buf = 136447491;
      *(void *)&uint8_t buf[4] = v82;
      *(_WORD *)&_BYTE buf[12] = 1026;
      *(_DWORD *)&buf[14] = v83;
      *(_WORD *)&buf[18] = 2049;
      *(void *)&buf[20] = v84;
      *(_WORD *)&_BYTE buf[28] = 2049;
      *(void *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2050;
      *(void *)&buf[40] = v86;
      *(_WORD *)&_BYTE buf[48] = 2050;
      *(void *)&buf[50] = v87;
      LODWORD(v104) = 58;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v71,  16LL,  "BoutDetector (%{public}s): Active time rolled back. boutInProgress, %{public}d, curActiveTime, %{private}.2f, pr evActiveTime, %{private}.2f, curStepTime, %{public}.2f, prevStepTime, %{public}.2f",  buf,  v104);
      int v79 = v88;
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v79);
      if (v79 == __p) {
        goto LABEL_45;
      }
LABEL_107:
      free(v79);
LABEL_45:
      sub_10083D394(a1, 5);
LABEL_76:
      __int128 v53 = *a2;
      __int128 v54 = a2[2];
      *(_OWORD *)(a1 + 184) = a2[1];
      *(_OWORD *)(a1 + 200) = v54;
      *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = v53;
      __int128 v55 = a2[3];
      __int128 v56 = a2[4];
      __int128 v57 = a2[6];
      *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = a2[5];
      *(_OWORD *)(a1 + 264) = v57;
      *(_OWORD *)(a1 + 216) = v55;
      *(_OWORD *)(a1 + 232) = v56;
      __int128 v58 = a2[7];
      __int128 v59 = a2[8];
      __int128 v60 = a2[10];
      *(_OWORD *)(a1 + 312) = a2[9];
      *(_OWORD *)(a1 + 32_Block_object_dispose(va, 8) = v60;
      *(_OWORD *)(a1 + 280) = v58;
      *(_OWORD *)(a1 + 296) = v59;
      return;
    }

    double v23 = *((double *)a2 + 2);
    if (v23 <= 0.0)
    {
      double v24 = *((double *)a2 + 1);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      unint64_t v25 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }

        int v38 = buf;
        if (buf[23] < 0) {
          int v38 = *(_BYTE **)buf;
        }
        uint64_t v40 = *((void *)a2 + 1);
        uint64_t v39 = *((void *)a2 + 2);
        uint64_t v41 = *(void *)a2;
        *(_DWORD *)std::string __p = 136446978;
        *(void *)&__p[4] = v38;
        *(_WORD *)&_BYTE __p[12] = 2050;
        *(void *)&__p[14] = v39;
        *(_WORD *)&__p[22] = 2050;
        *(void *)&__p[24] = v40;
        *(_WORD *)&__p[32] = 2050;
        *(void *)&__p[34] = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "BoutDetector(%{public}s): #warning, invalid firstStepTime (%{public}.2f)) at start of bout (%{public}.2f)). ti mestamp=%{public}.2f",  __p,  0x2Au);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      double v23 = v24 + -2.56;
      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        uint64_t v80 = qword_1019346B8;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)char __dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }

        uint64_t v89 = __dst;
        if (__dst[23] < 0) {
          uint64_t v89 = *(_BYTE **)__dst;
        }
        uint64_t v91 = *((void *)a2 + 1);
        uint64_t v90 = *((void *)a2 + 2);
        uint64_t v92 = *(void *)a2;
        *(_DWORD *)std::stringbuf::string_type buf = 136446978;
        *(void *)&uint8_t buf[4] = v89;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v90;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&_BYTE buf[24] = v91;
        *(_WORD *)&buf[32] = 2050;
        *(void *)&buf[34] = v92;
        LODWORD(v104) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v80,  0LL,  "BoutDetector(%{public}s): #warning, invalid firstStepTime (%{public}.2f)) at start of bout (%{public}.2f)). ti mestamp=%{public}.2f",  buf,  v104);
        __int16 v94 = v93;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v94);
        if (v94 != __p) {
          free(v94);
        }
      }
    }

    else
    {
      double v24 = v21 + v23;
    }

    double v42 = *((double *)a2 + 1);
    if (v24 > v42)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      double v43 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
          *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
        }

        double v44 = buf;
        if (buf[23] < 0) {
          double v44 = *(_BYTE **)buf;
        }
        uint64_t v46 = *(void *)a2;
        uint64_t v45 = *((void *)a2 + 1);
        uint64_t v47 = *((void *)a2 + 11);
        uint64_t v49 = *(void *)(a1 + 168);
        uint64_t v48 = *(void *)(a1 + 176);
        uint64_t v50 = *(void *)(a1 + 256);
        *(_DWORD *)std::string __p = 136448002;
        *(void *)&__p[4] = v44;
        *(_WORD *)&_BYTE __p[12] = 2050;
        *(double *)&__p[14] = v24;
        *(_WORD *)&__p[22] = 2050;
        *(void *)&__p[24] = v45;
        *(_WORD *)&__p[32] = 2050;
        *(void *)&__p[34] = v46;
        *(_WORD *)&__p[42] = 2050;
        *(void *)&__p[44] = v47;
        *(_WORD *)&__p[52] = 2050;
        *(void *)&__p[54] = v48;
        __int16 v112 = 2050;
        uint64_t v113 = v49;
        __int16 v114 = 2050;
        uint64_t v115 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "BoutDetector(%{public}s): #warning, lastStepTime (%{public}.2f) exceeds startTime (%{public}.2f)). {timestamp= %{public}.2f, activeTime=%{public}.2f, prevStartTime=%{public}.2f}, prevTimestamp=%{public}.2f}, prevActiveTime=%{public}.2f}",  __p,  0x52u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        uint64_t v81 = qword_1019346B8;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)char __dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }

        uint64_t v95 = __dst;
        if (__dst[23] < 0) {
          uint64_t v95 = *(_BYTE **)__dst;
        }
        uint64_t v97 = *(void *)a2;
        uint64_t v96 = *((void *)a2 + 1);
        uint64_t v98 = *((void *)a2 + 11);
        uint64_t v100 = *(void *)(a1 + 168);
        uint64_t v99 = *(void *)(a1 + 176);
        uint64_t v101 = *(void *)(a1 + 256);
        *(_DWORD *)std::stringbuf::string_type buf = 136448002;
        *(void *)&uint8_t buf[4] = v95;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(double *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&_BYTE buf[24] = v96;
        *(_WORD *)&buf[32] = 2050;
        *(void *)&buf[34] = v97;
        *(_WORD *)&buf[42] = 2050;
        *(void *)&buf[44] = v98;
        *(_WORD *)&buf[52] = 2050;
        *(void *)&buf[54] = v99;
        __int16 v106 = 2050;
        uint64_t v107 = v100;
        __int16 v108 = 2050;
        uint64_t v109 = v101;
        LODWORD(v104) = 82;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v81,  0LL,  "BoutDetector(%{public}s): #warning, lastStepTime (%{public}.2f) exceeds startTime (%{public}.2f)). {timestamp= %{public}.2f, activeTime=%{public}.2f, prevStartTime=%{public}.2f}, prevTimestamp=%{public}.2f}, prevActiveTime=%{public}.2f}",  buf,  v104);
        uint64_t v103 = v102;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)",  "%s\n",  v103);
        if (v103 != __p) {
          free(v103);
        }
      }

      double v42 = *((double *)a2 + 1);
      double v24 = v42;
    }

    sub_10083EB1C(a1, v42);
    double v51 = v23 + -0.2;
    sub_10083E79C(a1, 0, v51);
    double v52 = v24 + -0.2;
    sub_10083EDC4(a1, v52);
    if (v18 != v19)
    {
      sub_10083E320(a1, v52);
      goto LABEL_76;
    }
  }

void sub_100913A80(uint64_t a1, __int128 *a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  uint64_t v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 560)) {
      uint64_t v5 = "update";
    }
    else {
      uint64_t v5 = "init";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136315138;
    double v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Received user info (%s)",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    if (*(_BYTE *)(a1 + 560)) {
      __int128 v9 = "update";
    }
    else {
      __int128 v9 = "init";
    }
    int v12 = 136315138;
    __int128 v13 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Received user info (%s)",  (const char *)&v12);
    __int128 v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::WalkingBoutExtractor::handleUserInfoUpdate(const CLBodyMetrics &)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  __int128 v8 = a2[2];
  *(_OWORD *)(a1 + 60_Block_object_dispose(va, 8) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 580) = v7;
  *(_OWORD *)(a1 + 596) = v8;
  *(_OWORD *)(a1 + 564) = v6;
  *(_BYTE *)(a1 + 560) = 1;
  sub_10083D0AC(a1 + 48, a2);
  sub_10083D0AC(a1 + 216, a2);
}

void sub_100913CA0(uint64_t a1, uint64_t a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  BOOL v3 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134352385;
    uint64_t v55 = v11;
    __int16 v56 = 2050;
    *(void *)__int128 v57 = v12;
    *(_WORD *)&v57[8] = 2049;
    double v58 = v13;
    *(_WORD *)__int128 v59 = 2049;
    *(double *)&v59[2] = v14;
    __int16 v60 = 2049;
    *(double *)uint64_t v61 = v15;
    *(_WORD *)&v61[8] = 2049;
    *(double *)&v61[10] = v16;
    *(_WORD *)&v61[18] = 257;
    v62[0] = v17;
    *(_WORD *)&v62[1] = 2049;
    *(double *)&v62[3] = v24;
    *(_WORD *)&v62[11] = 2049;
    *(double *)&v62[13] = v29;
    __int16 v63 = 2049;
    double v64 = v30;
    __int16 v65 = 2049;
    double v66 = v31;
    __int16 v67 = 2049;
    double v68 = v32;
    __int16 v69 = 2049;
    double v70 = v33;
    __int16 v71 = 2049;
    double v72 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "GaitMetrics,startTime,%{public}.2f,timestamp,%{public}llu,walkingSpeed,%{private}.3f,doubleSupportPercentage,%{pri vate}.3f,stepLength,%{private}.3f,asymmetryProbability,%{private}.3f,deviceSide,%{private}hhu,cycleTime,%{private} .3f,stepIndexOfHarmonicityAP,%{private}.3f,stepIndexOfHarmonicityML,%{private}.3f,stepIndexOfHarmonicityVT,%{priva te}.3f,swingIndexOfHarmonicityAP,%{private}.3f,swingIndexOfHarmonicityML,%{private}.3f,swingIndexOfHarmonicityVT,%{private}.3f",  buf,  0x87u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    int v35 = 134352385;
    uint64_t v36 = v11;
    __int16 v37 = 2050;
    *(void *)int v38 = v12;
    *(_WORD *)&v38[8] = 2049;
    double v39 = v13;
    *(_WORD *)uint64_t v40 = 2049;
    *(double *)&double v40[2] = v14;
    __int16 v41 = 2049;
    *(double *)double v42 = v15;
    *(_WORD *)&v42[8] = 2049;
    *(double *)&v42[10] = v16;
    *(_WORD *)&v42[18] = 257;
    v43[0] = v17;
    *(_WORD *)&v43[1] = 2049;
    *(double *)&v43[3] = v24;
    *(_WORD *)&v43[11] = 2049;
    *(double *)&v43[13] = v29;
    __int16 v44 = 2049;
    double v45 = v30;
    __int16 v46 = 2049;
    double v47 = v31;
    __int16 v48 = 2049;
    double v49 = v32;
    __int16 v50 = 2049;
    double v51 = v33;
    __int16 v52 = 2049;
    double v53 = v34;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "GaitMetrics,startTime,%{public}.2f,timestamp,%{public}llu,walkingSpeed,%{private}.3f,doubleSupportPercentage,%{pri vate}.3f,stepLength,%{private}.3f,asymmetryProbability,%{private}.3f,deviceSide,%{private}hhu,cycleTime,%{private} .3f,stepIndexOfHarmonicityAP,%{private}.3f,stepIndexOfHarmonicityML,%{private}.3f,stepIndexOfHarmonicityVT,%{priva te}.3f,swingIndexOfHarmonicityAP,%{private}.3f,swingIndexOfHarmonicityML,%{private}.3f,swingIndexOfHarmonicityVT,%{private}.3f",  &v35,  135);
    __int128 v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::WalkingBoutExtractor::handleSPUGaitMetrics(const SPUGaitMetrics &)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  uint64_t v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134351617;
    uint64_t v55 = v11;
    __int16 v56 = 1025;
    *(_DWORD *)__int128 v57 = v18;
    *(_WORD *)&v57[4] = 1025;
    *(_DWORD *)&v57[6] = v19;
    LOWORD(v5_Block_object_dispose(va, 8) = 1025;
    *(_DWORD *)((char *)&v58 + 2) = v20;
    HIWORD(v5_Block_object_dispose(va, 8) = 1025;
    *(_DWORD *)__int128 v59 = v21;
    *(_WORD *)&v59[4] = 1025;
    *(_DWORD *)&v59[6] = v22;
    __int16 v60 = 1025;
    *(_DWORD *)uint64_t v61 = v23;
    *(_WORD *)&v61[4] = 2049;
    *(double *)&v61[6] = v25;
    *(_WORD *)&v61[14] = 1026;
    *(_DWORD *)&v61[16] = v26;
    *(_WORD *)int v62 = 2049;
    *(double *)&v62[2] = v27;
    *(_WORD *)&v62[10] = 1026;
    *(_DWORD *)&v62[12] = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "GaitMetrics::segmentsRejected,startTime,%{public}.2f,isSwingStanceCycle,%{private}hhu,isNotRunning,%{private}hhu,i sFeasibleWalkingSpeed,%{private}hhu,isPendular,%{private}hhu,isSufficientVerticalTwist,%{private}hhu,isCadenceConc ordant,%{private}hhu,userHeight,%{private}.2f,isHeightSet,%{public}d,userWeight,%{private}.2f,isWeightSet,%{public}d,",  buf,  0x50u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    int v35 = 134351617;
    uint64_t v36 = v11;
    __int16 v37 = 1025;
    *(_DWORD *)int v38 = v18;
    *(_WORD *)&v38[4] = 1025;
    *(_DWORD *)&v38[6] = v19;
    LOWORD(v39) = 1025;
    *(_DWORD *)((char *)&v39 + 2) = v20;
    HIWORD(v39) = 1025;
    *(_DWORD *)uint64_t v40 = v21;
    *(_WORD *)&v40[4] = 1025;
    *(_DWORD *)&v40[6] = v22;
    __int16 v41 = 1025;
    *(_DWORD *)double v42 = v23;
    *(_WORD *)&v42[4] = 2049;
    *(double *)&v42[6] = v25;
    *(_WORD *)&v42[14] = 1026;
    *(_DWORD *)&v42[16] = v26;
    *(_WORD *)double v43 = 2049;
    *(double *)&v43[2] = v27;
    *(_WORD *)&v43[10] = 1026;
    *(_DWORD *)&_BYTE v43[12] = v28;
    LODWORD(v9) = 80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "GaitMetrics::segmentsRejected,startTime,%{public}.2f,isSwingStanceCycle,%{private}hhu,isNotRunning,%{private}hhu,i sFeasibleWalkingSpeed,%{private}hhu,isPendular,%{private}hhu,isSufficientVerticalTwist,%{private}hhu,isCadenceConc ordant,%{private}hhu,userHeight,%{private}.2f,isHeightSet,%{public}d,userWeight,%{private}.2f,isWeightSet,%{public}d,",  &v35,  v9);
    __int128 v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::WalkingBoutExtractor::handleSPUGaitMetrics(const SPUGaitMetrics &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  (*(void (**)(void, _BYTE *))(**(void **)(a1 + 16) + 16LL))(*(void *)(a1 + 16), v10);
  sub_1009142CC(a1 + 48, (uint64_t)v10);
}

double sub_100914260@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(va, 8) = *(void *)(a2 + 72);
  *(void *)(a3 + 16) = *(void *)(a2 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 1);
  *(_BYTE *)(a3 + 44) = *(_BYTE *)(a2 + 5);
  *(_WORD *)(a3 + 45) = *(_WORD *)(a2 + 6);
  int v3 = *(_DWORD *)(a1 + 572);
  *(_DWORD *)(a3 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a3 + 52) = v3;
  *(_BYTE *)(a3 + 56) = *(_BYTE *)(a1 + 621);
  *(_DWORD *)(a3 + 60) = *(_DWORD *)(a1 + 576);
  *(_BYTE *)(a3 + 64) = *(_BYTE *)(a1 + 622);
  *(_OWORD *)(a3 + 6_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 44);
  double result = *(double *)(a2 + 60);
  *(double *)(a3 + 84) = result;
  return result;
}

void sub_1009142CC(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 148))
  {
    sub_10083EB1C(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
    sub_10083E79C(a1, 2u, *(double *)(a2 + 8));
    sub_10083EDC4(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
    sub_10083E320(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
  }

__n128 sub_100914368(uint64_t a1, uint64_t a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  uint64_t v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Received workout override",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Received workout override",  v9,  2);
    __int128 v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::WalkingBoutExtractor::handleWorkoutSessionOverride(const CLWorkoutUpdate &)",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  __n128 result = *(__n128 *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 32);
  *(__n128 *)(a1 + 624) = result;
  *(_OWORD *)(a1 + 640) = v6;
  return result;
}

double sub_10091450C(uint64_t a1, uint64_t a2)
{
  return result;
}

BOOL sub_100914554(void *a1, double *a2, double *a3)
{
  if (((*(uint64_t (**)(void, double *, double *))(*(void *)*a1 + 40LL))(*a1, &v31, &v30) & 1) != 0)
  {
    if (v31 == v30)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      __int128 v6 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BoutExtractor: No bouts in db", buf, 2u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        LOWORD(v32) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: No bouts in db",  &v32,  2);
LABEL_46:
        unsigned __int8 v19 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)",  "%s\n",  v8);
        if (v19 != buf) {
          free(v19);
        }
        return 0LL;
      }
    }

    else
    {
      if (*((_DWORD *)a1 + 158) || *((_DWORD *)a1 + 159))
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        __int128 v10 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
        {
          int v11 = *((_DWORD *)a1 + 159);
          int v12 = *((_DWORD *)a1 + 158);
          uint64_t v13 = a1[78];
          *(_DWORD *)std::stringbuf::string_type buf = 67240704;
          *(_DWORD *)uint64_t v36 = v11;
          *(_WORD *)&v36[4] = 1026;
          *(_DWORD *)&v36[6] = v12;
          LOWORD(v37[0]) = 2050;
          *(void *)((char *)v37 + 2) = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Currently in workout predictedType %{public}u activityType %{public}u since (%{public}.2f)",  buf,  0x18u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          int v20 = *((_DWORD *)a1 + 159);
          int v21 = *((_DWORD *)a1 + 158);
          uint64_t v22 = a1[78];
          int v32 = 67240704;
          *(_DWORD *)float v33 = v20;
          *(_WORD *)&v33[4] = 1026;
          *(_DWORD *)&v33[6] = v21;
          LOWORD(v34[0]) = 2050;
          *(void *)((char *)v34 + 2) = v22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "Currently in workout predictedType %{public}u activityType %{public}u since (%{public}.2f)",  &v32,  24);
          float v24 = (uint8_t *)v23;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)",  "%s\n",  v23);
          if (v24 != buf) {
            free(v24);
          }
        }

        double v14 = *((double *)a1 + 78);
      }

      else
      {
        double v14 = CFAbsoluteTimeGetCurrent() + -30.0;
      }

      *a2 = v31;
      if (v30 < v14) {
        double v14 = v30;
      }
      *a3 = v14;
      if (*a2 >= v14)
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        unsigned __int8 v18 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: All bouts deferred",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          LOWORD(v32) = 0;
          LODWORD(v29) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: All bouts deferred",  &v32,  v29);
          goto LABEL_46;
        }
      }

      else
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        float v15 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
        {
          double v16 = *a2;
          double v17 = *a3;
          *(_DWORD *)std::stringbuf::string_type buf = 134349312;
          *(double *)uint64_t v36 = v16;
          *(_WORD *)&char v36[8] = 2050;
          v37[0] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Returned time range to process (%{public}.2f) to (%{public}.2f)",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          double v25 = *a2;
          double v26 = *a3;
          int v32 = 134349312;
          *(double *)float v33 = v25;
          *(_WORD *)&v33[8] = 2050;
          v34[0] = v26;
          LODWORD(v29) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Returned time range to process (%{public}.2f) to (%{public}.2f)",  &v32,  v29);
          unsigned __int8 v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        return 1LL;
      }
    }
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    uint64_t v9 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Unable to get time range to process",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Unable to get time range to process",  &v32,  2);
      goto LABEL_46;
    }
  }

  return result;
}

uint64_t sub_100914C10(void *a1, uint64_t *a2, void **a3, double a4, double a5)
{
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  int v11 = &OBJC_METACLASS___CLPrivacyManager.vtable;
  int v12 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134349312;
    *(double *)int v177 = a4;
    *(_WORD *)&v177[8] = 2050;
    *(double *)&v177[10] = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "BoutExtractor: Checking for bouts from %{public}.2f to %{public}.2f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = a4;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = a5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  0LL,  "BoutExtractor: Checking for bouts from %{public}.2f to %{public}.2f",  &__p,  22);
    uint64_t v98 = (uint8_t *)v97;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkou t>, std::vector<ProcessedBoutResult> &)",  "%s\n",  v97);
    if (v98 != buf) {
      free(v98);
    }
  }

  __int16 v141 = 0LL;
  uint64_t v142 = 0LL;
  uint64_t v143 = 0LL;
  uint64_t v13 = (*(uint64_t (**)(void, void **, double, double))(*(void *)*a1 + 48LL))( *a1,  &v141,  a4 + -0.0001,  a5 + 0.0001);
  if ((_DWORD)v13 == 100)
  {
    if (v142 == v141)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      uint64_t v95 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "BoutExtractor: No bouts found.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v101) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: No bouts found.",  &__p,  v101);
        uint64_t v100 = (uint8_t *)v99;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWo rkout>, std::vector<ProcessedBoutResult> &)",  "%s\n",  v99);
        if (v100 != buf) {
          free(v100);
        }
      }

void sub_100915D34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100915DB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = *a2 + 40LL;
    while (v6 != v5)
    {
      double v7 = *(double *)(v6 + 8);
      double v8 = *(double *)(v6 - 32);
      v6 += 40LL;
      if (v7 < v8)
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        uint64_t v9 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "BoutExtractor: Error, unsorted bouts.",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          LOWORD(v25[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  17LL,  "BoutExtractor: Error, unsorted bouts.",  v25,  2,  v25[0]);
LABEL_36:
          float v24 = (uint8_t *)v10;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMobility::WalkingBoutExtractor::updateBoundariesWithWorkouts(std::vector<BoutBoundary> &, const std:: vector<HealthKitWorkout> &) const",  "%s\n",  v10);
          if (v24 != buf) {
            free(v24);
          }
        }

        goto LABEL_22;
      }
    }
  }

  int v11 = (double *)a3[1];
  if ((double *)*a3 != v11)
  {
    int v12 = (double *)(*a3 + 24LL);
    while (v12 != v11)
    {
      double v13 = *v12;
      double v14 = *(v12 - 3);
      v12 += 3;
      if (v13 < v14)
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        unint64_t v15 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::stringbuf::string_type buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "BoutExtractor: Error, unsorted workouts.",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          LOWORD(v25[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  17LL,  "BoutExtractor: Error, unsorted workouts.",  v25,  2,  v25[0]);
          goto LABEL_36;
        }

        break;
      }
    }
  }

void *sub_1009160FC@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  double v8 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 5);
    uint64_t v12 = 0x2E8BA2E8BA2E8BA3LL * ((a4[1] - *a4) >> 4);
    *(_DWORD *)std::stringbuf::string_type buf = 134349824;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&_BYTE buf[24] = v11;
    LOWORD(v293) = 2050;
    *(void *)((char *)&v293 + 2) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Evaluating Bout -- startTime,%{public}.2f,endTime,%{public}.2f,numberOfGaitMetrics,%{public}lu,numb erOfStepCountEntries,%{public}lu",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    double v214 = *(double *)(a2 + 8);
    double v215 = *(double *)(a2 + 16);
    unint64_t v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 5);
    uint64_t v217 = 0x2E8BA2E8BA2E8BA3LL * ((a4[1] - *a4) >> 4);
    int v284 = 134349824;
    double v285 = v214;
    __int16 v286 = 2050;
    double v287 = v215;
    __int16 v288 = 2050;
    double v289 = *(double *)&v216;
    __int16 v290 = 2050;
    double v291 = *(double *)&v217;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Evaluating Bout -- startTime,%{public}.2f,endTime,%{public}.2f,numberOfGaitMetrics,%{public}lu,numb erOfStepCountEntries,%{public}lu",  &v284,  42);
    int v219 = (uint8_t *)v218;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v218);
    if (v219 != buf) {
      free(v219);
    }
  }

  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 52) = 0;
  *(void *)(a5 + 24) = 0LL;
  *(void *)(a5 + 32) = 0LL;
  *(void *)(a5 + 40) = 0LL;
  *(_BYTE *)(a5 + 4_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a5 + 56) = xmmword_101338660;
  int64x2_t v13 = vdupq_n_s64(0xFFF0000000000000LL);
  *(int64x2_t *)(a5 + 72) = v13;
  *(int64x2_t *)(a5 + 8_Block_object_dispose(va, 8) = v13;
  *(void *)(a5 + 104) = 0xFFF0000000000000LL;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_DWORD *)(a5 + 20_Block_object_dispose(va, 8) = 1071225242;
  *(_BYTE *)(a5 + 212) = 0;
  *(_DWORD *)(a5 + 216) = 1116213084;
  *(_BYTE *)(a5 + 220) = 0;
  *(_OWORD *)(a5 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a5 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  BOOL v16 = v15 == *a3;
  *(_DWORD *)(a5 + 36) = -1431655765 * ((unint64_t)(v15 - *a3) >> 5);
  if (!v16)
  {
    *(_DWORD *)(a5 + 20_Block_object_dispose(va, 8) = *(_DWORD *)(v15 - 44);
    int v17 = *(unsigned __int8 *)(v15 - 40);
    *(_BYTE *)(a5 + 212) = v17;
    *(_DWORD *)(a5 + 216) = *(_DWORD *)(v15 - 36);
    int v18 = *(unsigned __int8 *)(v15 - 32);
    *(_BYTE *)(a5 + 220) = v18;
    if (*(unsigned __int8 *)(v14 + 56) != v17 || *(unsigned __int8 *)(v14 + 64) != v18)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      unint64_t v19 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "User setting changed mid bout... very weird",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        LOWORD(v284) = 0;
        LODWORD(v241) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "User setting changed mid bout... very weird",  &v284,  v241);
        int v221 = (uint8_t *)v220;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics > &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v220);
        if (v221 != buf) {
          free(v221);
        }
      }
    }
  }

  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  if (v21 != *a3)
  {
    *(_DWORD *)(a5 + 20_Block_object_dispose(va, 8) = *(_DWORD *)(v21 - 44);
    int v22 = *(unsigned __int8 *)(v21 - 40);
    *(_BYTE *)(a5 + 212) = v22;
    *(_DWORD *)(a5 + 216) = *(_DWORD *)(v21 - 36);
    int v23 = *(unsigned __int8 *)(v21 - 32);
    *(_BYTE *)(a5 + 220) = v23;
    if (*(unsigned __int8 *)(v20 + 56) != v22 || *(unsigned __int8 *)(v20 + 64) != v23)
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      float v24 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = a3[1];
        double v26 = *(float *)(*a3 + 52LL);
        double v27 = *(float *)(*a3 + 60LL);
        double v28 = *(float *)(v25 - 44);
        double v29 = *(float *)(v25 - 36);
        *(_DWORD *)std::stringbuf::string_type buf = 134284289;
        *(double *)&uint8_t buf[4] = v26;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(double *)&buf[14] = v27;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&_BYTE buf[24] = v28;
        LOWORD(v293) = 2049;
        *(double *)((char *)&v293 + 2) = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "User body metric setting changed mid bout from userHeight,%{private}.2f, userWeight,%{private}.2f to userHeigh t,%{private}.2f, userWeight,%{private}.2f",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        uint64_t v222 = a3[1];
        double v223 = *(float *)(*a3 + 52LL);
        double v224 = *(float *)(*a3 + 60LL);
        double v225 = *(float *)(v222 - 44);
        double v226 = *(float *)(v222 - 36);
        int v284 = 134284289;
        double v285 = v223;
        __int16 v286 = 2049;
        double v287 = v224;
        __int16 v288 = 2049;
        double v289 = v225;
        __int16 v290 = 2049;
        double v291 = v226;
        LODWORD(v241) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  16LL,  "User body metric setting changed mid bout from userHeight,%{private}.2f, userWeight,%{private}.2f to userHeigh t,%{private}.2f, userWeight,%{private}.2f",  &v284,  v241);
        float v228 = (uint8_t *)v227;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics > &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v227);
        if (v228 != buf) {
          free(v228);
        }
      }
    }
  }

  if (*(_DWORD *)(a5 + 24))
  {
    int v243 = 0;
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    double v30 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      uint64_t v31 = *(void *)(a2 + 8);
      int v32 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "BoutExtractor: Discarding bout (%{public}.2f) due to insufficient steps: %u",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      double v229 = *(double *)(a2 + 8);
      int v230 = *(_DWORD *)(a2 + 24);
      int v284 = 134349312;
      double v285 = v229;
      __int16 v286 = 1024;
      LODWORD(v287) = v230;
      LODWORD(v241) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "BoutExtractor: Discarding bout (%{public}.2f) due to insufficient steps: %u",  &v284,  v241);
      int v232 = (uint8_t *)v231;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v231);
      if (v232 != buf) {
        free(v232);
      }
    }

    int v243 = 1;
  }

  uint64_t v33 = sub_100470F48((uint64_t)&v284);
  int v244 = a3;
  uint64_t v34 = *a4;
  uint64_t v35 = a4[1];
  if (*a4 == v35) {
    goto LABEL_47;
  }
  int v36 = 0;
  int v37 = 0;
  do
  {
    __int128 v293 = 0u;
    __int128 v294 = 0u;
    memset(buf, 0, sizeof(buf));
    DWORD2(v293) = 1000;
    LODWORD(v294) = -1082130432;
    *(void *)&uint8_t buf[8] = *(void *)(v34 + 8);
    *(void *)&uint8_t buf[16] = *(void *)(v34 + 156);
    DWORD2(v293) = 0;
    uint64_t v33 = sub_100B7CDD8((uint64_t)&v284, (__int128 *)buf, (uint64_t)__p);
    if ((_DWORD)v33)
    {
      if (fabs(v283) > 0.0001)
      {
        double v38 = *(double *)(v34 + 72);
        if (fabs(v38) > 0.0001)
        {
          ++v36;
          double v39 = v283 * v38 * 100.0;
          int v40 = v39 < -5.0;
          if (v39 > 5.0) {
            int v40 = 1;
          }
          v37 += v40;
        }
      }
    }

    v34 += 176LL;
  }

  while (v34 != v35);
  if (v36 <= 0)
  {
LABEL_47:
    *(void *)(a5 + 40) = 0LL;
    goto LABEL_48;
  }

  double v41 = (double)v37 / (double)v36 * 100.0;
  *(double *)(a5 + 40) = v41;
  if (v41 <= 50.0)
  {
LABEL_48:
    BOOL v43 = v244;
    goto LABEL_49;
  }

  double v42 = (double)v36 / (double)(unint64_t)(0x2E8BA2E8BA2E8BA3LL * ((a4[1] - *a4) >> 4));
  BOOL v43 = v244;
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  double v44 = v42 * 100.0;
  BOOL v45 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = *(void *)(a2 + 8);
    uint64_t v47 = *(void *)(a5 + 40);
    *(_DWORD *)std::stringbuf::string_type buf = 134349568;
    *(void *)&uint8_t buf[4] = v46;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = v47;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&_BYTE buf[24] = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "BoutExtractor: Discarding bout (%{public}.2f) due to too much invalid grade. invalidGradePct,%{public}.2f%%,gradeA vailability,%{public}.2f%%",  buf,  0x20u);
  }

  uint64_t v33 = sub_1002921D0(115, 2);
  if ((_DWORD)v33)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    char v237 = *(void **)(a2 + 8);
    BOOL v238 = *(void **)(a5 + 40);
    LODWORD(__p[0]) = 134349568;
    *(void **)((char *)__p + 4) = v237;
    WORD2(__p[1]) = 2050;
    *(void **)((char *)&__p[1] + 6) = v238;
    HIWORD(__p[2]) = 2050;
    __p[3] = *(void **)&v44;
    LODWORD(v241) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  0LL,  "BoutExtractor: Discarding bout (%{public}.2f) due to too much invalid grade. invalidGradePct,%{public}.2f%%,gradeA vailability,%{public}.2f%%",  __p,  v241);
    double v240 = (uint8_t *)v239;
    uint64_t v33 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetri cs> &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v239);
    if (v240 != buf) {
      free(v240);
    }
    BOOL v43 = v244;
  }

  v243 |= 4u;
LABEL_49:
  unsigned int v48 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a5 + 2_Block_object_dispose(va, 8) = v48;
  if (v48 > 0x34 || ((1LL << v48) & 0x10002001000001LL) == 0)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    double v211 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      uint64_t v212 = *(void *)(a2 + 8);
      int v213 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(void *)&uint8_t buf[4] = v212;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v213;
      _os_log_impl( (void *)&_mh_execute_header,  v211,  OS_LOG_TYPE_INFO,  "BoutExtractor: Discarding bout (%{public}.2f) due to ineligible workout type: %u",  buf,  0x12u);
    }

    uint64_t v33 = sub_1002921D0(115, 2);
    if ((_DWORD)v33)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      int v233 = *(void **)(a2 + 8);
      int v234 = *(_DWORD *)(a2 + 28);
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v233;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v234;
      LODWORD(v241) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  1LL,  "BoutExtractor: Discarding bout (%{public}.2f) due to ineligible workout type: %u",  __p,  v241);
      uint64_t v236 = (uint8_t *)v235;
      uint64_t v33 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMet rics> &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v235);
      if (v236 != buf) {
        free(v236);
      }
      BOOL v43 = v244;
    }

    v243 |= 8u;
  }

  memset(__p, 0, 24);
  float v277 = 0LL;
  float v278 = 0LL;
  float v279 = 0LL;
  float v274 = 0LL;
  uint64_t v275 = 0LL;
  int v276 = 0LL;
  uint64_t v271 = 0LL;
  double v272 = 0LL;
  float v273 = 0LL;
  int v268 = 0LL;
  int v269 = 0LL;
  size_t v270 = 0LL;
  double v265 = 0LL;
  int v266 = 0LL;
  int v267 = 0LL;
  double v262 = 0LL;
  double v263 = 0LL;
  uint64_t v264 = 0LL;
  int v259 = 0LL;
  double v260 = 0LL;
  double v261 = 0LL;
  char v256 = 0LL;
  int v257 = 0LL;
  int v258 = 0LL;
  uint64_t v253 = 0LL;
  int v254 = 0LL;
  float v255 = 0LL;
  uint64_t v250 = 0LL;
  uint64_t v251 = 0LL;
  uint64_t v252 = 0LL;
  int v247 = 0LL;
  int v248 = 0LL;
  uint64_t v249 = 0LL;
  uint64_t v49 = *v43;
  uint64_t v246 = v43[1];
  if (*v43 != v246)
  {
    unint64_t v50 = 0LL;
    size_t v51 = 0LL;
    __int16 v52 = 0LL;
    do
    {
      float v53 = *(float *)(v49 + 24);
      if (v53 > 0.0)
      {
        unint64_t v54 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          uint64_t v33 = (uint64_t)__p[0];
          int64_t v56 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          unint64_t v57 = v56 + 1;
          int64_t v58 = (char *)__p[2] - (char *)__p[0];
          else {
            unint64_t v59 = v57;
          }
          if (v59)
          {
            __int128 v60 = (char *)sub_10000956C((uint64_t)&__p[2], v59);
            uint64_t v33 = (uint64_t)__p[0];
            unint64_t v54 = (char *)__p[1];
            float v53 = *(float *)(v49 + 24);
          }

          else
          {
            __int128 v60 = 0LL;
          }

          __int128 v61 = (float *)&v60[4 * v56];
          float *v61 = v53;
          unint64_t v55 = v61 + 1;
          while (v54 != (char *)v33)
          {
            int v62 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *((_DWORD *)v61-- - 1) = v62;
          }

          __p[0] = v61;
          __p[1] = v55;
          __p[2] = &v60[4 * v59];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          *(float *)__p[1] = v53;
          unint64_t v55 = v54 + 4;
        }

        __p[1] = v55;
        __int16 v63 = v263;
        if (v263 >= v264)
        {
          uint64_t v33 = (uint64_t)v262;
          uint64_t v65 = ((char *)v263 - (_BYTE *)v262) >> 2;
          unint64_t v66 = v65 + 1;
          uint64_t v67 = (char *)v264 - (_BYTE *)v262;
          else {
            unint64_t v68 = v66;
          }
          if (v68)
          {
            __int128 v69 = (char *)sub_10000956C((uint64_t)&v264, v68);
            uint64_t v33 = (uint64_t)v262;
            __int16 v63 = v263;
          }

          else
          {
            __int128 v69 = 0LL;
          }

          __int128 v70 = &v69[4 * v65];
          *(_DWORD *)__int128 v70 = *(_DWORD *)(v49 + 68);
          double v64 = (float *)(v70 + 4);
          while (v63 != (float *)v33)
          {
            int v71 = *((_DWORD *)v63-- - 1);
            *((_DWORD *)v70 - 1) = v71;
            v70 -= 4;
          }

          double v262 = v70;
          double v263 = v64;
          uint64_t v264 = (float *)&v69[4 * v68];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          *double v263 = *(float *)(v49 + 68);
          double v64 = v63 + 1;
        }

        double v263 = v64;
        __int128 v72 = v260;
        if (v260 >= v261)
        {
          uint64_t v33 = (uint64_t)v259;
          uint64_t v74 = ((char *)v260 - (_BYTE *)v259) >> 2;
          unint64_t v75 = v74 + 1;
          uint64_t v76 = (char *)v261 - (_BYTE *)v259;
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            uint64_t v78 = (char *)sub_10000956C((uint64_t)&v261, v77);
            uint64_t v33 = (uint64_t)v259;
            __int128 v72 = v260;
          }

          else
          {
            uint64_t v78 = 0LL;
          }

          int v79 = &v78[4 * v74];
          *(_DWORD *)int v79 = *(_DWORD *)(v49 + 72);
          __int128 v73 = (float *)(v79 + 4);
          while (v72 != (float *)v33)
          {
            int v80 = *((_DWORD *)v72-- - 1);
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }

          int v259 = v79;
          double v260 = v73;
          double v261 = (float *)&v78[4 * v77];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          float *v260 = *(float *)(v49 + 72);
          __int128 v73 = v72 + 1;
        }

        double v260 = v73;
        uint64_t v81 = v257;
        if (v257 >= v258)
        {
          uint64_t v33 = (uint64_t)v256;
          uint64_t v83 = ((char *)v257 - (_BYTE *)v256) >> 2;
          unint64_t v84 = v83 + 1;
          uint64_t v85 = (char *)v258 - (_BYTE *)v256;
          else {
            unint64_t v86 = v84;
          }
          if (v86)
          {
            BOOL v87 = (char *)sub_10000956C((uint64_t)&v258, v86);
            uint64_t v33 = (uint64_t)v256;
            uint64_t v81 = v257;
          }

          else
          {
            BOOL v87 = 0LL;
          }

          BOOL v88 = &v87[4 * v83];
          *(_DWORD *)BOOL v88 = *(_DWORD *)(v49 + 76);
          uint64_t v82 = (float *)(v88 + 4);
          while (v81 != (float *)v33)
          {
            int v89 = *((_DWORD *)v81-- - 1);
            *((_DWORD *)v88 - 1) = v89;
            v88 -= 4;
          }

          char v256 = v88;
          int v257 = v82;
          int v258 = (float *)&v87[4 * v86];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          float *v257 = *(float *)(v49 + 76);
          uint64_t v82 = v81 + 1;
        }

        int v257 = v82;
        uint64_t v90 = v254;
        if (v254 >= v255)
        {
          uint64_t v33 = (uint64_t)v253;
          uint64_t v92 = ((char *)v254 - (_BYTE *)v253) >> 2;
          unint64_t v93 = v92 + 1;
          uint64_t v94 = (char *)v255 - (_BYTE *)v253;
          else {
            unint64_t v95 = v93;
          }
          if (v95)
          {
            uint64_t v96 = (char *)sub_10000956C((uint64_t)&v255, v95);
            uint64_t v33 = (uint64_t)v253;
            uint64_t v90 = v254;
          }

          else
          {
            uint64_t v96 = 0LL;
          }

          uint64_t v97 = &v96[4 * v92];
          *(_DWORD *)uint64_t v97 = *(_DWORD *)(v49 + 80);
          uint64_t v91 = (float *)(v97 + 4);
          while (v90 != (float *)v33)
          {
            int v98 = *((_DWORD *)v90-- - 1);
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }

          uint64_t v253 = v97;
          int v254 = v91;
          float v255 = (float *)&v96[4 * v95];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          float *v254 = *(float *)(v49 + 80);
          uint64_t v91 = v90 + 1;
        }

        int v254 = v91;
        uint64_t v99 = v251;
        if (v251 >= v252)
        {
          uint64_t v33 = (uint64_t)v250;
          uint64_t v101 = ((char *)v251 - (_BYTE *)v250) >> 2;
          unint64_t v102 = v101 + 1;
          uint64_t v103 = (char *)v252 - (_BYTE *)v250;
          else {
            unint64_t v104 = v102;
          }
          if (v104)
          {
            __int128 v105 = (char *)sub_10000956C((uint64_t)&v252, v104);
            uint64_t v33 = (uint64_t)v250;
            uint64_t v99 = v251;
          }

          else
          {
            __int128 v105 = 0LL;
          }

          std::string::size_type v106 = &v105[4 * v101];
          *(_DWORD *)std::string::size_type v106 = *(_DWORD *)(v49 + 84);
          uint64_t v100 = (float *)(v106 + 4);
          while (v99 != (float *)v33)
          {
            int v107 = *((_DWORD *)v99-- - 1);
            *((_DWORD *)v106 - 1) = v107;
            v106 -= 4;
          }

          uint64_t v250 = v106;
          uint64_t v251 = v100;
          uint64_t v252 = (float *)&v105[4 * v104];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          float *v251 = *(float *)(v49 + 84);
          uint64_t v100 = v99 + 1;
        }

        uint64_t v251 = v100;
        std::string::size_type v108 = v248;
        if (v248 >= v249)
        {
          uint64_t v33 = (uint64_t)v247;
          uint64_t v110 = v248 - v247;
          unint64_t v111 = v110 + 1;
          uint64_t v112 = (char *)v249 - (char *)v247;
          else {
            unint64_t v113 = v111;
          }
          if (v113)
          {
            double v114 = (char *)sub_10000956C((uint64_t)&v249, v113);
            uint64_t v33 = (uint64_t)v247;
            std::string::size_type v108 = v248;
          }

          else
          {
            double v114 = 0LL;
          }

          int v115 = &v114[4 * v110];
          *(_DWORD *)int v115 = *(_DWORD *)(v49 + 88);
          int v109 = (float *)(v115 + 4);
          while (v108 != (float *)v33)
          {
            int v116 = *((_DWORD *)v108-- - 1);
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }

          int v247 = (float *)v115;
          uint64_t v249 = (float *)&v114[4 * v113];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          float *v248 = *(float *)(v49 + 88);
          int v109 = v248 + 1;
        }

        int v248 = v109;
        float v117 = *(float *)(v49 + 48);
        if (v117 > 0.0)
        {
          int v118 = v266;
          if (v266 >= v267)
          {
            uint64_t v33 = (uint64_t)v265;
            uint64_t v120 = ((char *)v266 - (_BYTE *)v265) >> 2;
            unint64_t v121 = v120 + 1;
            uint64_t v122 = (char *)v267 - (_BYTE *)v265;
            else {
              unint64_t v123 = v121;
            }
            if (v123)
            {
              char v124 = (char *)sub_10000956C((uint64_t)&v267, v123);
              uint64_t v33 = (uint64_t)v265;
              int v118 = v266;
              float v117 = *(float *)(v49 + 48);
            }

            else
            {
              char v124 = 0LL;
            }

            __int16 v125 = (float *)&v124[4 * v120];
            float *v125 = v117;
            int v119 = v125 + 1;
            while (v118 != (float *)v33)
            {
              int v126 = *((_DWORD *)v118-- - 1);
              *((_DWORD *)v125-- - 1) = v126;
            }

            double v265 = v125;
            int v266 = v119;
            int v267 = (float *)&v124[4 * v123];
            if (v33) {
              operator delete((void *)v33);
            }
          }

          else
          {
            *int v266 = v117;
            int v119 = v118 + 1;
          }

          int v266 = v119;
        }
      }

      float v127 = *(float *)(v49 + 28);
      if (v127 > 0.0 && *(float *)(v49 + 36) <= 0.75)
      {
        __int128 v129 = v278;
        if (v278 >= v279)
        {
          uint64_t v33 = (uint64_t)v277;
          uint64_t v131 = ((char *)v278 - (_BYTE *)v277) >> 2;
          unint64_t v132 = v131 + 1;
          uint64_t v133 = (char *)v279 - (_BYTE *)v277;
          else {
            unint64_t v134 = v132;
          }
          if (v134)
          {
            uint64_t v135 = (char *)sub_10000956C((uint64_t)&v279, v134);
            uint64_t v33 = (uint64_t)v277;
            __int128 v129 = v278;
            float v127 = *(float *)(v49 + 28);
          }

          else
          {
            uint64_t v135 = 0LL;
          }

          uint64_t v136 = (float *)&v135[4 * v131];
          float *v136 = v127;
          __int16 v130 = v136 + 1;
          while (v129 != (float *)v33)
          {
            int v137 = *((_DWORD *)v129-- - 1);
            *((_DWORD *)v136-- - 1) = v137;
          }

          float v277 = v136;
          float v278 = v130;
          float v279 = (float *)&v135[4 * v134];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          *float v278 = v127;
          __int16 v130 = v129 + 1;
        }

        float v278 = v130;
      }

      float v138 = *(float *)(v49 + 32);
      if (v138 > 0.0)
      {
        __int128 v139 = v275;
        if (v275 >= v276)
        {
          uint64_t v33 = (uint64_t)v274;
          uint64_t v141 = ((char *)v275 - (_BYTE *)v274) >> 2;
          unint64_t v142 = v141 + 1;
          uint64_t v143 = (char *)v276 - (_BYTE *)v274;
          else {
            unint64_t v144 = v142;
          }
          if (v144)
          {
            int v145 = (char *)sub_10000956C((uint64_t)&v276, v144);
            uint64_t v33 = (uint64_t)v274;
            __int128 v139 = v275;
            float v138 = *(float *)(v49 + 32);
          }

          else
          {
            int v145 = 0LL;
          }

          __int16 v146 = (float *)&v145[4 * v141];
          *__int16 v146 = v138;
          uint64_t v140 = v146 + 1;
          while (v139 != (float *)v33)
          {
            int v147 = *((_DWORD *)v139-- - 1);
            *((_DWORD *)v146-- - 1) = v147;
          }

          float v274 = v146;
          uint64_t v275 = v140;
          int v276 = (float *)&v145[4 * v144];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          *uint64_t v275 = v138;
          uint64_t v140 = v139 + 1;
        }

        uint64_t v275 = v140;
      }

      float v148 = *(float *)(v49 + 36);
      if (v148 > 0.0)
      {
        BOOL v149 = v272;
        if (v272 >= v273)
        {
          uint64_t v33 = (uint64_t)v271;
          uint64_t v151 = ((char *)v272 - (_BYTE *)v271) >> 2;
          unint64_t v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62) {
LABEL_366:
          }
            sub_100007008();
          uint64_t v153 = (char *)v273 - (_BYTE *)v271;
          else {
            unint64_t v154 = v152;
          }
          if (v154)
          {
            uint64_t v155 = (char *)sub_10000956C((uint64_t)&v273, v154);
            uint64_t v33 = (uint64_t)v271;
            BOOL v149 = v272;
            float v148 = *(float *)(v49 + 36);
          }

          else
          {
            uint64_t v155 = 0LL;
          }

          __int16 v156 = (float *)&v155[4 * v151];
          float *v156 = v148;
          __int16 v150 = v156 + 1;
          while (v149 != (float *)v33)
          {
            int v157 = *((_DWORD *)v149-- - 1);
            *((_DWORD *)v156-- - 1) = v157;
          }

          uint64_t v271 = v156;
          double v272 = v150;
          float v273 = (float *)&v155[4 * v154];
          if (v33) {
            operator delete((void *)v33);
          }
        }

        else
        {
          float *v272 = v148;
          __int16 v150 = v149 + 1;
        }

        double v272 = v150;
        if ((unint64_t)v52 >= v51)
        {
          double v159 = &v52[-v50];
          uint64_t v160 = (uint64_t)&v52[-v50 + 1];
          if (v160 < 0) {
            sub_100007008();
          }
          if (2 * (v51 - v50) > v160) {
            uint64_t v160 = 2 * (v51 - v50);
          }
          if (v51 - v50 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v161 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v161 = v160;
          }
          if (v161) {
            uint64_t v33 = (uint64_t)operator new(v161);
          }
          else {
            uint64_t v33 = 0LL;
          }
          __int16 v162 = &v159[v33];
          uint64_t v163 = &v159[v33];
          _BYTE *v163 = *(_BYTE *)(v49 + 40);
          __int16 v158 = v163 + 1;
          if (v52 != (_BYTE *)v50)
          {
            __int16 v164 = &v52[~v50];
            do
            {
              char v165 = *--v52;
              (v164--)[v33] = v165;
            }

            while (v52 != (_BYTE *)v50);
            __int16 v162 = (_BYTE *)v33;
          }

          size_t v51 = v33 + v161;
          int v268 = v162;
          int v269 = v158;
          size_t v270 = v33 + v161;
          if (v50) {
            operator delete((void *)v50);
          }
          unint64_t v50 = (unint64_t)v162;
          BOOL v43 = v244;
        }

        else
        {
          *__int16 v52 = *(_BYTE *)(v49 + 40);
          __int16 v158 = v52 + 1;
        }

        int v269 = v158;
        __int16 v52 = v158;
      }

      double v166 = *(double *)(v49 + 8);
      if (v166 != *(double *)(*v43 + 8LL))
      {
        LODWORD(v166) = *(_DWORD *)(v49 + 41);
        uint16x4_t v167 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)&v166).u64[0];
        *(uint32x4_t *)(a5 + 16_Block_object_dispose(va, 8) = vaddw_u16(*(uint32x4_t *)(a5 + 168), v167);
        int v168 = *(_DWORD *)(a5 + 188);
        *(_DWORD *)(a5 + 184) += *(unsigned __int8 *)(v49 + 45);
        *(_DWORD *)(a5 + 18_Block_object_dispose(va, 8) = v168 + *(unsigned __int8 *)(v49 + 46);
        if (v167.i8[4] == -1
          || *(unsigned __int8 *)(v49 + 44) == 255
          || *(unsigned __int8 *)(v49 + 42) == 255
          || *(unsigned __int8 *)(v49 + 41) == 255
          || *(unsigned __int8 *)(v49 + 45) == 255
          || *(unsigned __int8 *)(v49 + 46) == 255)
        {
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          double v169 = (os_log_s *)qword_1019346B8;
          if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v170 = *(void *)(a2 + 8);
            *(_DWORD *)std::stringbuf::string_type buf = 134349056;
            *(void *)&uint8_t buf[4] = v170;
            _os_log_impl( (void *)&_mh_execute_header,  v169,  OS_LOG_TYPE_DEFAULT,  "#warning One or more of GaitMetrics rejection counters hit capacity, Bout (%{public}.2f) segment rejection will undercount",  buf,  0xCu);
          }

          uint64_t v33 = sub_1002921D0(115, 2);
          if ((_DWORD)v33)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019346B0 != -1) {
              dispatch_once(&qword_1019346B0, &stru_101860D10);
            }
            uint64_t v171 = *(void *)(a2 + 8);
            int v280 = 134349056;
            uint64_t v281 = v171;
            LODWORD(v241) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  0LL,  "#warning One or more of GaitMetrics rejection counters hit capacity, Bout (%{public}.2f) segment rejection will undercount",  &v280,  v241);
            double v173 = (uint8_t *)v172;
            uint64_t v33 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<G aitMetrics> &, const std::vector<CLStepCountEntry> &)",  "%s\n",  v172);
            if (v173 != buf) {
              free(v173);
            }
          }
        }
      }

      v49 += 96LL;
    }

    while (v49 != v246);
  }

  int v174 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a5 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a5 + 52) = v174;
  *(_BYTE *)(a5 + 4_Block_object_dispose(va, 8) = sub_100917DA0(v33, &v268);
  int v175 = (float *)v265;
  float v176 = 0.0;
  float v177 = 0.0;
  if (v266 != v265)
  {
    do
    {
      float v178 = *v175++;
      float v177 = v177 + v178;
    }

    while (v175 != v266);
    float v177 = v177 / (float)(unint64_t)(((char *)v266 - (_BYTE *)v265) >> 2);
  }

  *(double *)(a5 + 56) = v177;
  int v179 = (float *)v262;
  if (v263 != v262)
  {
    float v180 = 0.0;
    do
    {
      float v181 = *v179++;
      float v180 = v180 + v181;
    }

    while (v179 != v263);
    float v176 = v180 / (float)(unint64_t)(((char *)v263 - (_BYTE *)v262) >> 2);
  }

  *(float *)(a5 + 144) = v176;
  __int128 v182 = (float *)v259;
  float v183 = 0.0;
  float v184 = 0.0;
  if (v260 != v259)
  {
    do
    {
      float v185 = *v182++;
      float v184 = v184 + v185;
    }

    while (v182 != v260);
    float v184 = v184 / (float)(unint64_t)(((char *)v260 - (_BYTE *)v259) >> 2);
  }

  *(float *)(a5 + 14_Block_object_dispose(va, 8) = v184;
  uint64_t v186 = (float *)v256;
  if (v257 != v256)
  {
    float v187 = 0.0;
    do
    {
      float v188 = *v186++;
      float v187 = v187 + v188;
    }

    while (v186 != v257);
    float v183 = v187 / (float)(unint64_t)(((char *)v257 - (_BYTE *)v256) >> 2);
  }

  *(float *)(a5 + 152) = v183;
  __int128 v189 = (float *)v253;
  float v190 = 0.0;
  float v191 = 0.0;
  if (v254 != v253)
  {
    do
    {
      float v192 = *v189++;
      float v191 = v191 + v192;
    }

    while (v189 != v254);
    float v191 = v191 / (float)(unint64_t)(((char *)v254 - (_BYTE *)v253) >> 2);
  }

  *(float *)(a5 + 156) = v191;
  int v193 = (float *)v250;
  if (v251 != v250)
  {
    float v194 = 0.0;
    do
    {
      float v195 = *v193++;
      float v194 = v194 + v195;
    }

    while (v193 != v251);
    float v190 = v194 / (float)(unint64_t)(((char *)v251 - (_BYTE *)v250) >> 2);
  }

  *(float *)(a5 + 160) = v190;
  unsigned __int8 v196 = v247;
  if (v248 == v247)
  {
    float v199 = 0.0;
  }

  else
  {
    float v197 = 0.0;
    do
    {
      float v198 = *v196++;
      float v197 = v197 + v198;
    }

    while (v196 != v248);
    float v199 = v197 / (float)(unint64_t)(v248 - v247);
  }

  *(float *)(a5 + 164) = v199;
  *(void *)(a5 + 112) = sub_100918048(a1, 0, (float **)__p, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 192) = v243 | v200;
  *(void *)(a5 + 120) = sub_100918048(a1, 1u, (float **)&v277, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 196) = v243 | v201;
  *(void *)(a5 + 12_Block_object_dispose(va, 8) = sub_100918048(a1, 2u, (float **)&v274, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 200) = v243 | v202;
  uint64_t v203 = sub_100918048(a1, 3u, (float **)&v271, *(_DWORD *)(a5 + 24));
  *(void *)(a5 + 136) = v203;
  *(_DWORD *)(a5 + 204) = v243 | v204;
  *(double *)(a5 + 72) = sub_10091893C(v203, (float **)&v274);
  *(void *)(a5 + 80) = v205;
  *(double *)(a5 + 96) = sub_10091893C(v206, (float **)&v265);
  *(void *)(a5 + 104) = v207;
  *(double *)(a5 + 64) = sub_100918DB0(0.025, v208, (uint64_t *)&v274);
  *(double *)(a5 + 8_Block_object_dispose(va, 8) = sub_100918DB0(0.05, v209, (uint64_t *)&v265);
  if (v247) {
    operator delete(v247);
  }
  if (v250)
  {
    uint64_t v251 = (float *)v250;
    operator delete(v250);
  }

  if (v253)
  {
    int v254 = (float *)v253;
    operator delete(v253);
  }

  if (v256)
  {
    int v257 = (float *)v256;
    operator delete(v256);
  }

  if (v259)
  {
    double v260 = (float *)v259;
    operator delete(v259);
  }

  if (v262)
  {
    double v263 = (float *)v262;
    operator delete(v262);
  }

  if (v265)
  {
    int v266 = (float *)v265;
    operator delete(v265);
  }

  if (v268) {
    operator delete(v268);
  }
  if (v271)
  {
    double v272 = (float *)v271;
    operator delete(v271);
  }

  if (v274)
  {
    uint64_t v275 = (float *)v274;
    operator delete(v274);
  }

  if (v277)
  {
    float v278 = (float *)v277;
    operator delete(v277);
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return sub_10046E138(&v284);
}

void sub_100917C80(_Unwind_Exception *a1)
{
}

uint64_t sub_100917DA0(uint64_t a1, void *a2)
{
  int v3 = (unsigned __int8 *)*a2;
  uint64_t v2 = (unsigned __int8 *)a2[1];
  unint64_t v4 = (unint64_t)&v2[-*a2];
  int v5 = 0;
  int v6 = 0;
  do
  {
    int v8 = *v3++;
    int v7 = v8;
    if (v8 == 1) {
      int v9 = v5 + 1;
    }
    else {
      int v9 = v5;
    }
    if (v7 == 2) {
      ++v6;
    }
    else {
      int v5 = v9;
    }
  }

  while (v3 != v2);
  double v10 = (double)v5 / (double)v4;
  double v11 = (double)v6 / (double)v4;
  if (v10 >= 0.666666667) {
    uint64_t v12 = 1LL;
  }
  else {
    uint64_t v12 = 2 * (v11 >= 0.666666667);
  }
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_101860D10);
  }
  int64x2_t v13 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    sub_100CFC070(v12, &__p);
    uint64_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::stringbuf::string_type buf = 136315650;
    double v26 = v14;
    __int16 v27 = 2048;
    double v28 = v10;
    __int16 v29 = 2048;
    double v30 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Bout DeviceSide: %s (left=%.4f, right=%.4f)",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    uint64_t v15 = qword_1019346B8;
    sub_100CFC070(v12, &v22);
    if ((v22.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v16 = &v22;
    }
    else {
      BOOL v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v10;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    double v24 = v11;
    LODWORD(v20) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v15,  2LL,  "Bout DeviceSide: %s (left=%.4f, right=%.4f)",  (const char *)&__p,  v20,  v21);
    int v18 = v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "DeviceSide CLMobility::WalkingBoutExtractor::calculateBoutSidedness(const std::vector<DeviceSide> &) const",  "%s\n",  v18);
  }

  return v12;
}

uint64_t sub_100918048(_OWORD *a1, unsigned int a2, float **a3, int a4)
{
  int v6 = *a3;
  int v5 = a3[1];
  uint64_t v7 = v5 - *a3;
  if ((_DWORD)v7)
  {
    switch(a2)
    {
      case 0u:
        float v11 = 0.0;
        if (v5 == v6) {
          goto LABEL_32;
        }
        do
        {
          float v12 = *v6++;
          float v11 = v11 + v12;
        }

        while (v6 != v5);
        goto LABEL_31;
      case 1u:
        float v19 = 0.0;
        if (v5 != v6)
        {
          do
          {
            float v20 = *v6++;
            float v19 = v19 + v20;
          }

          while (v6 != v5);
          float v19 = v19 / (float)(unint64_t)v7;
        }

        double v21 = v19;
        double v22 = 0.1;
        goto LABEL_33;
      case 2u:
        float v11 = 0.0;
        if (v5 != v6)
        {
          do
          {
            float v23 = *v6++;
            float v11 = v11 + v23;
          }

          while (v6 != v5);
LABEL_31:
          float v11 = v11 / (float)(unint64_t)v7;
        }

double sub_10091893C(uint64_t a1, float **a2)
{
  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if ((unint64_t)v3 > 0x53)
  {
    __int128 buf = 0uLL;
    int v40 = 0LL;
    __int128 __p = 0uLL;
    double v38 = 0LL;
    sub_1001AC380((void **)&buf, v3 >> 2);
    sub_1001AC380((void **)&__p, a2[1] - *a2);
    uint64_t v7 = *a2;
    if ((char *)a2[1] - (char *)*a2 != 4)
    {
      unint64_t v8 = 0LL;
      double v9 = *v7 * 0.707106781;
      do
      {
        double v10 = v9;
        double v9 = v7[++v8] * 0.707106781;
        double v11 = v10 - v9;
        float v12 = (char *)*((void *)&buf + 1);
        if (*((void *)&buf + 1) >= (unint64_t)v40)
        {
          uint64_t v14 = (char *)buf;
          uint64_t v15 = (uint64_t)(*((void *)&buf + 1) - buf) >> 3;
          unint64_t v16 = v15 + 1;
          uint64_t v17 = (uint64_t)&v40[-buf];
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            float v19 = (char *)sub_1000071BC((uint64_t)&v40, v18);
            float v12 = (char *)*((void *)&buf + 1);
            uint64_t v14 = (char *)buf;
          }

          else
          {
            float v19 = 0LL;
          }

          float v20 = (double *)&v19[8 * v15];
          double *v20 = v11;
          int64x2_t v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v20-- - 1) = v21;
          }

          *(void *)&__int128 buf = v20;
          *((void *)&buf + 1) = v13;
          int v40 = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }

        else
        {
          **((double **)&buf + 1) = v11;
          int64x2_t v13 = (double *)(v12 + 8);
        }

        *((void *)&buf + 1) = v13;
        double v22 = v10 + v9;
        float v23 = (char *)*((void *)&__p + 1);
        if (*((void *)&__p + 1) >= (unint64_t)v38)
        {
          uint64_t v25 = (char *)__p;
          uint64_t v26 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
          unint64_t v27 = v26 + 1;
          uint64_t v28 = (uint64_t)&v38[-__p];
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            double v30 = (char *)sub_1000071BC((uint64_t)&v38, v29);
            float v23 = (char *)*((void *)&__p + 1);
            uint64_t v25 = (char *)__p;
          }

          else
          {
            double v30 = 0LL;
          }

          uint64_t v31 = (double *)&v30[8 * v26];
          *uint64_t v31 = v22;
          int v24 = v31 + 1;
          while (v23 != v25)
          {
            uint64_t v32 = *((void *)v23 - 1);
            v23 -= 8;
            *((void *)v31-- - 1) = v32;
          }

          *(void *)&__int128 __p = v31;
          *((void *)&__p + 1) = v24;
          double v38 = &v30[8 * v29];
          if (v25) {
            operator delete(v25);
          }
        }

        else
        {
          **((double **)&__p + 1) = v22;
          int v24 = (double *)(v23 + 8);
        }

        *((void *)&__p + 1) = v24;
        uint64_t v7 = *a2;
      }

      while (a2[1] - *a2 - 1 > v8);
    }

    double v6 = sub_100CFC168((double **)&buf);
    sub_100CFC168((double **)&__p);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }

    if ((void)buf)
    {
      *((void *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    unint64_t v4 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = a2[1] - *a2;
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Does not meet minimum number of samples criteria for Poincare, size: %lu",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      uint64_t v34 = a2[1] - *a2;
      LODWORD(__p) = 134217984;
      *(void *)((char *)&__p + 4) = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "Does not meet minimum number of samples criteria for Poincare, size: %lu",  &__p);
      int v36 = (char *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingBoutExtractor::PoincareMetrics CLMobility::WalkingBoutExtractor::computePoincareMetrics(const std::vector <float> &) const",  "%s\n",  v35);
    }

    return -INFINITY;
  }

  return v6;
}

void sub_100918D68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
}

double sub_100918DB0(float a1, uint64_t a2, uint64_t *a3)
{
  if ((unint64_t)(a3[1] - *a3) > 0x53)
  {
    __int128 buf = 0uLL;
    __int128 v61 = 0LL;
    for (unint64_t i = 2LL; i != 4; ++i)
    {
      __int128 v58 = 0uLL;
      unint64_t v59 = 0LL;
      uint64_t v9 = *a3;
      double v10 = 0.0;
      if (((a3[1] - *a3) >> 2) - i == -1LL)
      {
        unint64_t v32 = 0LL;
      }

      else
      {
        unint64_t v11 = 0LL;
        do
        {
          int v55 = 0LL;
          int64_t v56 = 0LL;
          uint64_t v57 = 0LL;
          sub_10001B72C(&v55, (const void *)(v9 + 4 * v11), v9 + 4 * v11 + 4 * i, i);
          uint64_t v12 = *a3;
          unint64_t v13 = (a3[1] - *a3) >> 2;
          if (v13 - i == -1LL)
          {
            unint64_t v20 = 0LL;
            float v15 = 0.0;
          }

          else
          {
            unint64_t v14 = 0LL;
            float v15 = 0.0;
            do
            {
              if (v13 < v14 + i) {
                goto LABEL_25;
              }
              __int128 __p = 0LL;
              int v53 = 0LL;
              uint64_t v54 = 0LL;
              sub_10001B72C(&__p, (const void *)(v12 + 4 * v14), v12 + 4 * v14 + 4 * i, i);
              uint64_t v16 = 0LL;
              int v17 = 0;
              do
              {
                ++v16;
              }

              while (i != v16);
              int v53 = __p;
              operator delete(__p);
              if (!v17) {
LABEL_25:
              }
                float v15 = v15 + 1.0;
              ++v14;
              uint64_t v12 = *a3;
              unint64_t v13 = (a3[1] - *a3) >> 2;
              unint64_t v20 = v13 - i + 1;
            }

            while (v20 > v14);
          }

          float v21 = v15 / (float)v20;
          double v22 = (char *)*((void *)&v58 + 1);
          if (*((void *)&v58 + 1) >= (unint64_t)v59)
          {
            int v24 = (char *)v58;
            uint64_t v25 = (uint64_t)(*((void *)&v58 + 1) - v58) >> 2;
            unint64_t v26 = v25 + 1;
            uint64_t v27 = (uint64_t)&v59[-v58];
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              unint64_t v29 = (char *)sub_10000956C((uint64_t)&v59, v28);
              double v22 = (char *)*((void *)&v58 + 1);
              int v24 = (char *)v58;
            }

            else
            {
              unint64_t v29 = 0LL;
            }

            double v30 = (float *)&v29[4 * v25];
            *double v30 = v21;
            float v23 = v30 + 1;
            while (v22 != v24)
            {
              int v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30-- - 1) = v31;
            }

            *(void *)&__int128 v58 = v30;
            *((void *)&v58 + 1) = v23;
            unint64_t v59 = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
          }

          else
          {
            **((float **)&v58 + 1) = v21;
            float v23 = (float *)(v22 + 4);
          }

          *((void *)&v58 + 1) = v23;
          if (v55)
          {
            int64_t v56 = v55;
            operator delete(v55);
          }

          ++v11;
          uint64_t v9 = *a3;
          unint64_t v32 = ((a3[1] - *a3) >> 2) - i + 1;
        }

        while (v32 > v11);
        __int128 v33 = (float *)v58;
        if ((void)v58 != *((void *)&v58 + 1))
        {
          double v10 = 0.0;
          do
          {
            float v34 = *v33++;
            double v10 = v10 + v34;
          }

          while (v33 != *((float **)&v58 + 1));
        }
      }

      float v35 = v10 / (double)v32;
      int v36 = (char *)*((void *)&buf + 1);
      if (*((void *)&buf + 1) >= (unint64_t)v61)
      {
        double v38 = (char *)buf;
        uint64_t v39 = (uint64_t)(*((void *)&buf + 1) - buf) >> 2;
        unint64_t v40 = v39 + 1;
        uint64_t v41 = (uint64_t)&v61[-buf];
        else {
          unint64_t v42 = v40;
        }
        if (v42)
        {
          BOOL v43 = (char *)sub_10000956C((uint64_t)&v61, v42);
          int v36 = (char *)*((void *)&buf + 1);
          double v38 = (char *)buf;
        }

        else
        {
          BOOL v43 = 0LL;
        }

        uint64_t v44 = (float *)&v43[4 * v39];
        float *v44 = v35;
        int v37 = v44 + 1;
        while (v36 != v38)
        {
          int v45 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v44-- - 1) = v45;
        }

        *(void *)&__int128 buf = v44;
        *((void *)&buf + 1) = v37;
        __int128 v61 = &v43[4 * v42];
        if (v38) {
          operator delete(v38);
        }
      }

      else
      {
        **((float **)&buf + 1) = v35;
        int v37 = (float *)(v36 + 4);
      }

      *((void *)&buf + 1) = v37;
      if ((void)v58)
      {
        *((void *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }
    }

    uint64_t v46 = (void *)buf;
    if (*((void *)&buf + 1) - (void)buf == 8LL)
    {
      float v47 = *(float *)(buf + 4);
      if (v47 == 0.0) {
        double v6 = -INFINITY;
      }
      else {
        double v6 = logf(*(float *)buf / v47);
      }
    }

    else
    {
      double v6 = -INFINITY;
      if (!(void)buf) {
        return v6;
      }
    }

    *((void *)&buf + 1) = v46;
    operator delete(v46);
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    unint64_t v4 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = (a3[1] - *a3) >> 2;
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Does not meet minimum number of samples criteria for Entropy, size: %lu",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      uint64_t v49 = (a3[1] - *a3) >> 2;
      LODWORD(v5_Block_object_dispose(va, 8) = 134217984;
      *(void *)((char *)&v58 + 4) = v49;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "Does not meet minimum number of samples criteria for Entropy, size: %lu",  &v58);
      std::string v51 = (char *)v50;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLMobility::WalkingBoutExtractor::computeEntropy(const std::vector<float> &, const float) const",  "%s\n",  v50);
    }

    return -INFINITY;
  }

  return v6;
}

void sub_100919310( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22)
{
}

uint64_t sub_10091936C(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 24LL))(*a1);
}

uint64_t sub_10091937C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  unint64_t v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  sub_10083D00C(a1, &v10, 0, 300.0, 10.0);
  double v6 = v11;
  if (v11)
  {
    uint64_t v7 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return a1;
}

void sub_100919418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10091942C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  unint64_t v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }

  sub_10083D00C(a1, &v10, 1, 86400.0, 10.0);
  double v6 = v11;
  if (v11)
  {
    uint64_t v7 = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  *(void *)(a1 + 272) = 0LL;
  *(_WORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_BYTE *)(a1 + 320) = 0;
  *(void *)(a1 + 324) = 0LL;
  *(_DWORD *)(a1 + 331) = 0;
  return a1;
}

void sub_10091950C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100919520(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_10091954C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = a2 - v8;
    uint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*(double *)(a2 - 32) < *(double *)(v8 + 8))
        {
          uint64_t v145 = *(void *)(v8 + 32);
          __int128 v126 = *(_OWORD *)v8;
          __int128 v135 = *(_OWORD *)(v8 + 16);
          __int128 v50 = *(_OWORD *)(a2 - 40);
          __int128 v51 = *(_OWORD *)(a2 - 24);
          *(void *)(v8 + 32) = *(void *)(a2 - 8);
          *(_OWORD *)unint64_t v8 = v50;
          *(_OWORD *)(v8 + 16) = v51;
          *(void *)(a2 - _Block_object_dispose(va, 8) = v145;
          *(_OWORD *)(a2 - 24) = v135;
          *(_OWORD *)(a2 - 40) = v126;
        }

        return;
      case 3LL:
        sub_100919EB8((__int128 *)v8, (double *)(v8 + 40), (double *)(a2 - 40));
        return;
      case 4LL:
        sub_10091A254(v8, v8 + 40, v8 + 80, a2 - 40);
        return;
      case 5LL:
        __int16 v52 = (__int128 *)(v8 + 40);
        int v53 = (__int128 *)(v8 + 80);
        uint64_t v54 = (__int128 *)(v8 + 120);
        sub_10091A254(v8, v8 + 40, v8 + 80, v8 + 120);
        if (*(double *)(a2 - 32) < *(double *)(v8 + 128))
        {
          __int128 v55 = *v54;
          __int128 v136 = *(_OWORD *)(v8 + 136);
          uint64_t v56 = *(void *)(v8 + 152);
          __int128 v57 = *(_OWORD *)(a2 - 24);
          __int128 v58 = *(_OWORD *)(a2 - 40);
          *(void *)(v8 + 152) = *(void *)(a2 - 8);
          __int128 *v54 = v58;
          *(_OWORD *)(v8 + 136) = v57;
          *(_OWORD *)(a2 - 24) = v136;
          *(void *)(a2 - _Block_object_dispose(va, 8) = v56;
          *(_OWORD *)(a2 - 40) = v55;
          if (*(double *)(v8 + 128) < *(double *)(v8 + 88))
          {
            uint64_t v59 = *(void *)(v8 + 112);
            __int128 v61 = *v53;
            __int128 v60 = *(_OWORD *)(v8 + 96);
            __int128 v62 = *(_OWORD *)(v8 + 136);
            __int128 *v53 = *v54;
            *(_OWORD *)(v8 + 96) = v62;
            *(void *)(v8 + 112) = *(void *)(v8 + 152);
            __int128 *v54 = v61;
            *(_OWORD *)(v8 + 136) = v60;
            *(void *)(v8 + 152) = v59;
            if (*(double *)(v8 + 88) < *(double *)(v8 + 48))
            {
              uint64_t v63 = *(void *)(v8 + 72);
              __int128 v65 = *v52;
              __int128 v64 = *(_OWORD *)(v8 + 56);
              __int128 v66 = *(_OWORD *)(v8 + 96);
              *__int16 v52 = *v53;
              *(_OWORD *)(v8 + 56) = v66;
              *(void *)(v8 + 72) = *(void *)(v8 + 112);
              __int128 *v53 = v65;
              *(_OWORD *)(v8 + 96) = v64;
              *(void *)(v8 + 112) = v63;
              if (*(double *)(v8 + 48) < *(double *)(v8 + 8))
              {
                uint64_t v146 = *(void *)(v8 + 32);
                __int128 v127 = *(_OWORD *)v8;
                __int128 v137 = *(_OWORD *)(v8 + 16);
                __int128 v67 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)unint64_t v8 = *v52;
                *(_OWORD *)(v8 + 16) = v67;
                *(void *)(v8 + 32) = *(void *)(v8 + 72);
                *__int16 v52 = v127;
                *(_OWORD *)(v8 + 56) = v137;
                *(void *)(v8 + 72) = v146;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 959)
        {
          unint64_t v68 = v8 + 40;
          BOOL v70 = v8 == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v70)
            {
              uint64_t v71 = 0LL;
              unint64_t v72 = v8;
              do
              {
                unint64_t v73 = v68;
                double v74 = *(double *)(v72 + 48);
                if (v74 < *(double *)(v72 + 8))
                {
                  uint64_t v75 = *(void *)v68;
                  __int128 v128 = *(_OWORD *)(v72 + 56);
                  uint64_t v138 = *(void *)(v72 + 72);
                  uint64_t v76 = v71;
                  while (1)
                  {
                    uint64_t v77 = v8 + v76;
                    __int128 v78 = *(_OWORD *)(v8 + v76 + 16);
                    *(_OWORD *)(v77 + 40) = *(_OWORD *)(v8 + v76);
                    *(_OWORD *)(v77 + 56) = v78;
                    *(void *)(v77 + 72) = *(void *)(v8 + v76 + 32);
                    if (!v76) {
                      break;
                    }
                    v76 -= 40LL;
                    if (v74 >= *(double *)(v77 - 32))
                    {
                      uint64_t v79 = v8 + v76 + 40;
                      goto LABEL_78;
                    }
                  }

                  uint64_t v79 = v8;
LABEL_78:
                  *(void *)uint64_t v79 = v75;
                  *(double *)(v79 + _Block_object_dispose(va, 8) = v74;
                  *(_OWORD *)(v79 + 16) = v128;
                  *(void *)(v79 + 32) = v138;
                }

                unint64_t v68 = v73 + 40;
                v71 += 40LL;
                unint64_t v72 = v73;
              }

              while (v73 + 40 != a2);
            }
          }

          else if (!v70)
          {
            do
            {
              uint64_t v112 = v68;
              double v113 = *(double *)(a1 + 48);
              if (v113 < *(double *)(a1 + 8))
              {
                uint64_t v114 = *(void *)v68;
                __int128 v131 = *(_OWORD *)(a1 + 56);
                uint64_t v141 = *(void *)(a1 + 72);
                do
                {
                  __int128 v115 = *(_OWORD *)(v68 - 24);
                  *(_OWORD *)unint64_t v68 = *(_OWORD *)(v68 - 40);
                  *(_OWORD *)(v68 + 16) = v115;
                  *(void *)(v68 + 32) = *(void *)(v68 - 8);
                  double v116 = *(double *)(v68 - 72);
                  v68 -= 40LL;
                }

                while (v113 < v116);
                *(void *)unint64_t v68 = v114;
                *(double *)(v68 + _Block_object_dispose(va, 8) = v113;
                *(void *)(v68 + 32) = v141;
                *(_OWORD *)(v68 + 16) = v131;
              }

              unint64_t v68 = v112 + 40;
              a1 = v112;
            }

            while (v112 + 40 != a2);
          }

          return;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v80 = (unint64_t)(v10 - 2) >> 1;
            int64_t v81 = v80;
            do
            {
              int64_t v82 = v81;
              if (v80 >= v81)
              {
                uint64_t v83 = (2 * v81) | 1;
                unint64_t v84 = v8 + 40 * v83;
                if (2 * v82 + 2 < v10 && *(double *)(v8 + 40 * v83 + 8) < *(double *)(v84 + 48))
                {
                  v84 += 40LL;
                  uint64_t v83 = 2 * v82 + 2;
                }

                double v85 = *(double *)(v8 + 40 * v82 + 8);
                if (*(double *)(v84 + 8) >= v85)
                {
                  unint64_t v86 = v8 + 40 * v82;
                  uint64_t v87 = *(void *)v86;
                  uint64_t v139 = *(void *)(v86 + 32);
                  __int128 v129 = *(_OWORD *)(v86 + 16);
                  do
                  {
                    unint64_t v88 = v86;
                    unint64_t v86 = v84;
                    __int128 v89 = *(_OWORD *)v84;
                    __int128 v90 = *(_OWORD *)(v84 + 16);
                    *(void *)(v88 + 32) = *(void *)(v84 + 32);
                    *(_OWORD *)unint64_t v88 = v89;
                    *(_OWORD *)(v88 + 16) = v90;
                    if (v80 < v83) {
                      break;
                    }
                    uint64_t v91 = (2 * v83) | 1;
                    unint64_t v84 = v8 + 40 * v91;
                    uint64_t v92 = 2 * v83 + 2;
                    if (v92 < v10 && *(double *)(v8 + 40 * v91 + 8) < *(double *)(v84 + 48))
                    {
                      v84 += 40LL;
                      uint64_t v91 = v92;
                    }

                    uint64_t v83 = v91;
                  }

                  while (*(double *)(v84 + 8) >= v85);
                  *(void *)unint64_t v86 = v87;
                  *(double *)(v86 + _Block_object_dispose(va, 8) = v85;
                  *(_OWORD *)(v86 + 16) = v129;
                  *(void *)(v86 + 32) = v139;
                }
              }

              int64_t v81 = v82 - 1;
            }

            while (v82);
            int64_t v93 = v9 / 0x28uLL;
            do
            {
              uint64_t v94 = 0LL;
              uint64_t v147 = *(void *)(v8 + 32);
              __int128 v130 = *(_OWORD *)v8;
              __int128 v140 = *(_OWORD *)(v8 + 16);
              unint64_t v95 = v8;
              do
              {
                unint64_t v96 = v95;
                uint64_t v97 = v94 + 1;
                v95 += 40 * (v94 + 1);
                uint64_t v98 = 2 * v94;
                uint64_t v94 = (2 * v94) | 1;
                int64_t v99 = v98 + 2;
                if (v99 < v93 && *(double *)(v96 + 40 * v97 + 8) < *(double *)(v95 + 48))
                {
                  v95 += 40LL;
                  uint64_t v94 = v99;
                }

                __int128 v100 = *(_OWORD *)v95;
                __int128 v101 = *(_OWORD *)(v95 + 16);
                *(void *)(v96 + 32) = *(void *)(v95 + 32);
                *(_OWORD *)unint64_t v96 = v100;
                *(_OWORD *)(v96 + 16) = v101;
              }

              while (v94 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
              a2 -= 40LL;
              if (v95 == a2)
              {
                *(void *)(v95 + 32) = v147;
                *(_OWORD *)unint64_t v95 = v130;
                *(_OWORD *)(v95 + 16) = v140;
              }

              else
              {
                __int128 v102 = *(_OWORD *)a2;
                __int128 v103 = *(_OWORD *)(a2 + 16);
                *(void *)(v95 + 32) = *(void *)(a2 + 32);
                *(_OWORD *)unint64_t v95 = v102;
                *(_OWORD *)(v95 + 16) = v103;
                *(void *)(a2 + 32) = v147;
                *(_OWORD *)a2 = v130;
                *(_OWORD *)(a2 + 16) = v140;
                uint64_t v104 = v95 - v8 + 40;
                if (v104 >= 41)
                {
                  unint64_t v105 = (v104 / 0x28uLL - 2) >> 1;
                  double v106 = *(double *)(v95 + 8);
                  if (*(double *)(v8 + 40 * v105 + 8) < v106)
                  {
                    uint64_t v107 = *(void *)v95;
                    uint64_t v122 = *(void *)(v95 + 32);
                    __int128 v119 = *(_OWORD *)(v95 + 16);
                    do
                    {
                      unint64_t v108 = v95;
                      unint64_t v95 = v8 + 40 * v105;
                      __int128 v109 = *(_OWORD *)v95;
                      __int128 v110 = *(_OWORD *)(v95 + 16);
                      *(void *)(v108 + 32) = *(void *)(v95 + 32);
                      *(_OWORD *)unint64_t v108 = v109;
                      *(_OWORD *)(v108 + 16) = v110;
                      if (!v105) {
                        break;
                      }
                      unint64_t v105 = (v105 - 1) >> 1;
                    }

                    while (*(double *)(v8 + 40 * v105 + 8) < v106);
                    *(void *)unint64_t v95 = v107;
                    *(double *)(v95 + _Block_object_dispose(va, 8) = v106;
                    *(void *)(v95 + 32) = v122;
                    *(_OWORD *)(v95 + 16) = v119;
                  }
                }
              }
            }

            while (v93-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          sub_100919EB8((__int128 *)v12, (double *)a1, (double *)(a2 - 40));
        }

        else
        {
          sub_100919EB8((__int128 *)a1, (double *)v12, (double *)(a2 - 40));
          uint64_t v13 = 5 * v11;
          unint64_t v14 = (double *)(a1 + 40 * v11 - 40);
          sub_100919EB8((__int128 *)(a1 + 40), v14, (double *)(a2 - 80));
          float v15 = (double *)(a1 + 40 + 8 * v13);
          sub_100919EB8((__int128 *)(a1 + 80), v15, (double *)(a2 - 120));
          sub_100919EB8((__int128 *)v14, (double *)v12, v15);
          uint64_t v142 = *(void *)(a1 + 32);
          __int128 v123 = *(_OWORD *)a1;
          __int128 v132 = *(_OWORD *)(a1 + 16);
          __int128 v16 = *(_OWORD *)v12;
          __int128 v17 = *(_OWORD *)(v12 + 16);
          *(void *)(a1 + 32) = *(void *)(v12 + 32);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(void *)(v12 + 32) = v142;
          *(_OWORD *)unint64_t v12 = v123;
          *(_OWORD *)(v12 + 16) = v132;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v18 = *(double *)(a1 + 8);
          double v36 = *(double *)a1;
          __int128 v118 = *(_OWORD *)(a1 + 16);
          uint64_t v121 = *(void *)(a1 + 32);
          if (v18 >= *(double *)(a2 - 32))
          {
            unint64_t v39 = a1 + 40;
            do
            {
              unint64_t v8 = v39;
              if (v39 >= a2) {
                break;
              }
              double v40 = *(double *)(v39 + 8);
              v39 += 40LL;
            }

            while (v18 >= v40);
          }

          else
          {
            uint64_t v37 = a1;
            do
            {
              unint64_t v8 = v37 + 40;
              double v38 = *(double *)(v37 + 48);
              v37 += 40LL;
            }

            while (v18 >= v38);
          }

          unint64_t v41 = a2;
          if (v8 < a2)
          {
            unint64_t v42 = a2;
            do
            {
              unint64_t v41 = v42 - 40;
              double v43 = *(double *)(v42 - 32);
              v42 -= 40LL;
            }

            while (v18 < v43);
          }

          while (v8 < v41)
          {
            uint64_t v144 = *(void *)(v8 + 32);
            __int128 v125 = *(_OWORD *)v8;
            __int128 v134 = *(_OWORD *)(v8 + 16);
            __int128 v44 = *(_OWORD *)v41;
            __int128 v45 = *(_OWORD *)(v41 + 16);
            *(void *)(v8 + 32) = *(void *)(v41 + 32);
            *(_OWORD *)unint64_t v8 = v44;
            *(_OWORD *)(v8 + 16) = v45;
            *(void *)(v41 + 32) = v144;
            *(_OWORD *)unint64_t v41 = v125;
            *(_OWORD *)(v41 + 16) = v134;
            do
            {
              double v46 = *(double *)(v8 + 48);
              v8 += 40LL;
            }

            while (v18 >= v46);
            do
            {
              double v47 = *(double *)(v41 - 32);
              v41 -= 40LL;
            }

            while (v18 < v47);
          }

          if (v8 - 40 != a1)
          {
            __int128 v48 = *(_OWORD *)(v8 - 40);
            __int128 v49 = *(_OWORD *)(v8 - 24);
            *(void *)(a1 + 32) = *(void *)(v8 - 8);
            *(_OWORD *)a1 = v48;
            *(_OWORD *)(a1 + 16) = v49;
          }

          a4 = 0;
          *(double *)(v8 - 40) = v36;
          *(double *)(v8 - 32) = v18;
          *(void *)(v8 - _Block_object_dispose(va, 8) = v121;
          *(_OWORD *)(v8 - 24) = v118;
          continue;
        }

        double v18 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v19 = 0LL;
        double v20 = *(double *)a1;
        __int128 v117 = *(_OWORD *)(a1 + 16);
        uint64_t v120 = *(void *)(a1 + 32);
        do
        {
          double v21 = *(double *)(a1 + v19 + 48);
          v19 += 40LL;
        }

        while (v21 < v18);
        unint64_t v22 = a1 + v19;
        unint64_t v23 = a2;
        if (v19 == 40)
        {
          unint64_t v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = v26 - 40;
            double v27 = *(double *)(v26 - 32);
            v26 -= 40LL;
            if (v27 < v18) {
              goto LABEL_21;
            }
          }

          unint64_t v24 = v26;
        }

        else
        {
          do
          {
            unint64_t v24 = v23 - 40;
            double v25 = *(double *)(v23 - 32);
            v23 -= 40LL;
          }

          while (v25 >= v18);
        }

__int128 *sub_100919EB8(__int128 *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      __int128 v10 = *(_OWORD *)a2;
      __int128 v11 = *((_OWORD *)a2 + 1);
      uint64_t v12 = *((void *)a2 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      __int128 v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((void *)a2 + 4) = v13;
      *((void *)a3 + 4) = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (a2[1] < *((double *)result + 1))
      {
        __int128 v15 = *result;
        __int128 v16 = result[1];
        uint64_t v17 = *((void *)result + 4);
        uint64_t v18 = *((void *)a2 + 4);
        __int128 v19 = *((_OWORD *)a2 + 1);
        void *result = *(_OWORD *)a2;
        result[1] = v19;
        *((void *)result + 4) = v18;
        *((void *)a2 + 4) = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }

  else
  {
    if (v4 >= v3)
    {
      __int128 v20 = *result;
      __int128 v21 = result[1];
      uint64_t v22 = *((void *)result + 4);
      uint64_t v23 = *((void *)a2 + 4);
      __int128 v24 = *((_OWORD *)a2 + 1);
      void *result = *(_OWORD *)a2;
      result[1] = v24;
      *((void *)result + 4) = v23;
      *((void *)a2 + 4) = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (a3[1] >= a2[1]) {
        return result;
      }
      __int128 v5 = *(_OWORD *)a2;
      __int128 v6 = *((_OWORD *)a2 + 1);
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v25 = *((void *)a3 + 4);
      __int128 v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((void *)a2 + 4) = v25;
    }

    else
    {
      __int128 v5 = *result;
      __int128 v6 = result[1];
      uint64_t v7 = *((void *)result + 4);
      uint64_t v8 = *((void *)a3 + 4);
      __int128 v9 = *((_OWORD *)a3 + 1);
      void *result = *(_OWORD *)a3;
      result[1] = v9;
      *((void *)result + 4) = v8;
    }

    *((void *)a3 + 4) = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }

  return result;
}

BOOL sub_100919FA8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        __int128 v6 = *(_OWORD *)a1;
        __int128 v7 = *(_OWORD *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a2 - 8);
        __int128 v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = v9;
        *(void *)(a2 - _Block_object_dispose(va, 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }

      return result;
    case 3uLL:
      sub_100919EB8((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1LL;
    case 4uLL:
      sub_10091A254(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1LL;
    case 5uLL:
      __int128 v21 = (__int128 *)(a1 + 40);
      uint64_t v22 = (__int128 *)(a1 + 80);
      uint64_t v23 = (__int128 *)(a1 + 120);
      sub_10091A254(a1, a1 + 40, a1 + 80, a1 + 120);
      __int128 v24 = *v23;
      __int128 v25 = *(_OWORD *)(a1 + 136);
      uint64_t v26 = *(void *)(a1 + 152);
      uint64_t v27 = *(void *)(a2 - 8);
      __int128 v28 = *(_OWORD *)(a2 - 24);
      *uint64_t v23 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v28;
      *(void *)(a1 + 152) = v27;
      *(void *)(a2 - _Block_object_dispose(va, 8) = v26;
      *(_OWORD *)(a2 - 24) = v25;
      *(_OWORD *)(a2 - 40) = v24;
      uint64_t v29 = *(void *)(a1 + 112);
      __int128 v31 = *v22;
      __int128 v30 = *(_OWORD *)(a1 + 96);
      __int128 v32 = *(_OWORD *)(a1 + 136);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 96) = v32;
      *(void *)(a1 + 112) = *(void *)(a1 + 152);
      *uint64_t v23 = v31;
      *(_OWORD *)(a1 + 136) = v30;
      *(void *)(a1 + 152) = v29;
      uint64_t v33 = *(void *)(a1 + 72);
      __int128 v35 = *v21;
      __int128 v34 = *(_OWORD *)(a1 + 56);
      __int128 v36 = *(_OWORD *)(a1 + 96);
      __int128 *v21 = *v22;
      *(_OWORD *)(a1 + 56) = v36;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      *uint64_t v22 = v35;
      *(_OWORD *)(a1 + 96) = v34;
      *(void *)(a1 + 112) = v33;
      uint64_t v37 = *(void *)(a1 + 32);
      __int128 v39 = *(_OWORD *)a1;
      __int128 v38 = *(_OWORD *)(a1 + 16);
      __int128 v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v40;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      __int128 *v21 = v39;
      *(_OWORD *)(a1 + 56) = v38;
      BOOL result = 1LL;
      *(void *)(a1 + 72) = v37;
      return result;
    default:
      uint64_t v11 = a1 + 80;
      sub_100919EB8((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1LL;
      }
      uint64_t v13 = 0LL;
      int v14 = 0;
      break;
  }

  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      __int128 v41 = *(_OWORD *)(v12 + 16);
      uint64_t v42 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        __int128 v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40LL;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }

      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + _Block_object_dispose(va, 8) = v15;
      *(_OWORD *)(v20 + 16) = v41;
      *(void *)(v20 + 32) = v42;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }

    uint64_t v11 = v12;
    v13 += 40LL;
    v12 += 40LL;
    if (v12 == a2) {
      return 1LL;
    }
  }

__n128 sub_10091A254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    __int128 v9 = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a4 + 32);
    __int128 v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      __int128 v13 = *(_OWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      __int128 v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        __int128 v17 = *(_OWORD *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(a2 + 32);
        __int128 v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 32) = v19;
        *(void *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }

  return result;
}

void sub_10091A320(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        double v39 = *(double *)(a2 - 24);
        unint64_t v38 = a2 - 24;
        if (v39 < *(double *)v8)
        {
          *(void *)&v96[16] = *(void *)(v8 + 16);
          *(_OWORD *)unint64_t v96 = *(_OWORD *)v8;
          __int128 v40 = *(_OWORD *)v38;
          *(void *)(v8 + 13) = *(void *)(v38 + 13);
          *(_OWORD *)unint64_t v8 = v40;
          *(void *)(v38 + 13) = *(void *)&v96[13];
          *(_OWORD *)unint64_t v38 = *(_OWORD *)v96;
        }

        return;
      case 3LL:
        sub_10091ABE8((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4LL:
        sub_10091AFCC(v8, v8 + 24, v8 + 48, (unint64_t *)(a2 - 24));
        return;
      case 5LL:
        __int128 v41 = (_OWORD *)(v8 + 24);
        uint64_t v42 = (_OWORD *)(v8 + 48);
        double v43 = (_OWORD *)(v8 + 72);
        sub_10091AFCC(v8, v8 + 24, v8 + 48, (unint64_t *)(v8 + 72));
        double v45 = *(double *)(a2 - 24);
        unint64_t v44 = a2 - 24;
        if (v45 < *(double *)(v8 + 72))
        {
          *(_OWORD *)uint64_t v97 = *v43;
          __int128 v46 = *v43;
          *(void *)&v97[16] = *(void *)(v8 + 88);
          uint64_t v47 = *(void *)(v44 + 13);
          _OWORD *v43 = *(_OWORD *)v44;
          *(void *)(v8 + 85) = v47;
          *(void *)(v44 + 13) = *(void *)&v97[13];
          *(_OWORD *)unint64_t v44 = v46;
          if (*(double *)v43 < *(double *)v42)
          {
            *(_OWORD *)uint64_t v98 = *v42;
            __int128 v48 = *v42;
            *(void *)&v98[16] = *(void *)(v8 + 64);
            _OWORD *v42 = *v43;
            *(void *)(v8 + 61) = *(void *)(v8 + 85);
            _OWORD *v43 = v48;
            *(void *)(v8 + 85) = *(void *)&v98[13];
            if (*(double *)v42 < *(double *)v41)
            {
              *(_OWORD *)int64_t v99 = *v41;
              __int128 v49 = *v41;
              *(void *)&v99[16] = *(void *)(v8 + 40);
              *__int128 v41 = *v42;
              *(void *)(v8 + 37) = *(void *)(v8 + 61);
              _OWORD *v42 = v49;
              *(void *)(v8 + 61) = *(void *)&v99[13];
              if (*(double *)(v8 + 24) < *(double *)v8)
              {
                *(void *)&v100[16] = *(void *)(v8 + 16);
                *(_OWORD *)__int128 v100 = *(_OWORD *)v8;
                *(_OWORD *)unint64_t v8 = *v41;
                *(void *)(v8 + 13) = *(void *)(v8 + 37);
                *__int128 v41 = *(_OWORD *)v100;
                *(void *)(v8 + 37) = *(void *)&v100[13];
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 575)
        {
          unint64_t v50 = v8 + 24;
          BOOL v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              uint64_t v53 = 0LL;
              unint64_t v54 = v8;
              do
              {
                unint64_t v55 = v50;
                double v56 = *(double *)(v54 + 24);
                if (v56 < *(double *)v54)
                {
                  __int128 v101 = *(_OWORD *)(v54 + 32);
                  uint64_t v57 = v53;
                  while (1)
                  {
                    uint64_t v58 = v8 + v57;
                    *(_OWORD *)(v58 + 24) = *(_OWORD *)(v8 + v57);
                    *(void *)(v58 + 37) = *(void *)(v8 + v57 + 13);
                    if (!v57) {
                      break;
                    }
                    v57 -= 24LL;
                    if (v56 >= *(double *)(v58 - 24))
                    {
                      uint64_t v59 = v8 + v57 + 24;
                      goto LABEL_75;
                    }
                  }

                  uint64_t v59 = v8;
LABEL_75:
                  *(double *)uint64_t v59 = v56;
                  *(void *)(v59 + _Block_object_dispose(va, 8) = v101;
                  *(void *)(v59 + 13) = *(void *)((char *)&v101 + 5);
                }

                unint64_t v50 = v55 + 24;
                v53 += 24LL;
                unint64_t v54 = v55;
              }

              while (v55 + 24 != a2);
            }
          }

          else if (!v52)
          {
            do
            {
              uint64_t v86 = v50;
              double v87 = *(double *)(a1 + 24);
              if (v87 < *(double *)a1)
              {
                __int128 v104 = *(_OWORD *)(a1 + 32);
                unint64_t v88 = v50;
                do
                {
                  *(_OWORD *)unint64_t v88 = *(_OWORD *)(v88 - 24);
                  *(void *)(v88 + 13) = *(void *)(v88 - 11);
                  double v89 = *(double *)(v88 - 48);
                  v88 -= 24LL;
                }

                while (v87 < v89);
                *(double *)unint64_t v88 = v87;
                *(void *)(v88 + 13) = *(void *)((char *)&v104 + 5);
                *(void *)(v88 + _Block_object_dispose(va, 8) = v104;
              }

              v50 += 24LL;
              a1 = v86;
            }

            while (v86 + 24 != a2);
          }

          return;
        }

        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v60 = (unint64_t)(v10 - 2) >> 1;
            int64_t v61 = v60;
            do
            {
              int64_t v62 = v61;
              if (v60 >= v61)
              {
                uint64_t v63 = (2 * v61) | 1;
                unint64_t v64 = v8 + 24 * v63;
                if (2 * v62 + 2 < v10 && *(double *)v64 < *(double *)(v64 + 24))
                {
                  v64 += 24LL;
                  uint64_t v63 = 2 * v62 + 2;
                }

                unint64_t v65 = v8 + 24 * v62;
                double v66 = *(double *)v65;
                if (*(double *)v64 >= *(double *)v65)
                {
                  __int128 v102 = *(_OWORD *)(v65 + 8);
                  do
                  {
                    unint64_t v67 = v65;
                    unint64_t v65 = v64;
                    __int128 v68 = *(_OWORD *)v64;
                    *(void *)(v67 + 13) = *(void *)(v64 + 13);
                    *(_OWORD *)unint64_t v67 = v68;
                    if (v60 < v63) {
                      break;
                    }
                    uint64_t v69 = 2 * v63;
                    uint64_t v63 = (2 * v63) | 1;
                    unint64_t v64 = v8 + 24 * v63;
                    uint64_t v70 = v69 + 2;
                    if (v70 < v10 && *(double *)v64 < *(double *)(v64 + 24))
                    {
                      v64 += 24LL;
                      uint64_t v63 = v70;
                    }
                  }

                  while (*(double *)v64 >= v66);
                  *(double *)unint64_t v65 = v66;
                  *(void *)(v65 + _Block_object_dispose(va, 8) = v102;
                  *(void *)(v65 + 13) = *(void *)((char *)&v102 + 5);
                }
              }

              int64_t v61 = v62 - 1;
            }

            while (v62);
            int64_t v71 = v9 / 0x18uLL;
            do
            {
              uint64_t v72 = 0LL;
              *(void *)&v103[16] = *(void *)(v8 + 16);
              *(_OWORD *)__int128 v103 = *(_OWORD *)v8;
              unint64_t v73 = v8;
              do
              {
                unint64_t v74 = v73;
                v73 += 24 * v72 + 24;
                uint64_t v75 = 2 * v72;
                uint64_t v72 = (2 * v72) | 1;
                int64_t v76 = v75 + 2;
                if (v76 < v71 && *(double *)v73 < *(double *)(v73 + 24))
                {
                  v73 += 24LL;
                  uint64_t v72 = v76;
                }

                __int128 v77 = *(_OWORD *)v73;
                *(void *)(v74 + 13) = *(void *)(v73 + 13);
                *(_OWORD *)unint64_t v74 = v77;
              }

              while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              a2 -= 24LL;
              if (v73 == a2)
              {
                *(void *)(v73 + 13) = *(void *)&v103[13];
                *(_OWORD *)unint64_t v73 = *(_OWORD *)v103;
              }

              else
              {
                __int128 v78 = *(_OWORD *)a2;
                *(void *)(v73 + 13) = *(void *)(a2 + 13);
                *(_OWORD *)unint64_t v73 = v78;
                *(void *)(a2 + 13) = *(void *)&v103[13];
                *(_OWORD *)a2 = *(_OWORD *)v103;
                uint64_t v79 = v73 - v8 + 24;
                if (v79 >= 25)
                {
                  unint64_t v80 = (v79 / 0x18uLL - 2) >> 1;
                  unint64_t v81 = v8 + 24 * v80;
                  double v82 = *(double *)v73;
                  if (*(double *)v81 < *(double *)v73)
                  {
                    __int128 v92 = *(_OWORD *)(v73 + 8);
                    do
                    {
                      unint64_t v83 = v73;
                      unint64_t v73 = v81;
                      __int128 v84 = *(_OWORD *)v81;
                      *(void *)(v83 + 13) = *(void *)(v81 + 13);
                      *(_OWORD *)unint64_t v83 = v84;
                      if (!v80) {
                        break;
                      }
                      unint64_t v80 = (v80 - 1) >> 1;
                      unint64_t v81 = v8 + 24 * v80;
                    }

                    while (*(double *)v81 < v82);
                    *(double *)unint64_t v73 = v82;
                    *(void *)(v73 + _Block_object_dispose(va, 8) = v92;
                    *(void *)(v73 + 13) = *(void *)((char *)&v92 + 5);
                  }
                }
              }
            }

            while (v71-- > 2);
          }

          return;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        unint64_t v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_10091ABE8((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }

        else
        {
          sub_10091ABE8((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          uint64_t v13 = 3 * v11;
          uint64_t v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_10091ABE8((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          uint64_t v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_10091ABE8((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_10091ABE8(v14, (__int128 *)v12, v15);
          *(void *)&v93[16] = *(void *)(a1 + 16);
          *(_OWORD *)int64_t v93 = *(_OWORD *)a1;
          uint64_t v16 = *(void *)(v12 + 13);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(void *)(a1 + 13) = v16;
          *(void *)(v12 + 13) = *(void *)&v93[13];
          *(_OWORD *)unint64_t v12 = *(_OWORD *)v93;
        }

        --a3;
        double v17 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 24) >= v17)
        {
          __int128 v91 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(double *)(a2 - 24))
          {
            unint64_t v31 = a1 + 24;
            do
            {
              unint64_t v8 = v31;
              if (v31 >= a2) {
                break;
              }
              v31 += 24LL;
            }

            while (v17 >= *(double *)v8);
          }

          else
          {
            unint64_t v8 = a1;
            do
            {
              double v30 = *(double *)(v8 + 24);
              v8 += 24LL;
            }

            while (v17 >= v30);
          }

          unint64_t v32 = a2;
          if (v8 < a2)
          {
            unint64_t v32 = a2;
            do
            {
              double v33 = *(double *)(v32 - 24);
              v32 -= 24LL;
            }

            while (v17 < v33);
          }

          while (v8 < v32)
          {
            *(void *)&v95[16] = *(void *)(v8 + 16);
            *(_OWORD *)unint64_t v95 = *(_OWORD *)v8;
            __int128 v34 = *(_OWORD *)v32;
            *(void *)(v8 + 13) = *(void *)(v32 + 13);
            *(_OWORD *)unint64_t v8 = v34;
            *(void *)(v32 + 13) = *(void *)&v95[13];
            *(_OWORD *)unint64_t v32 = *(_OWORD *)v95;
            do
            {
              double v35 = *(double *)(v8 + 24);
              v8 += 24LL;
            }

            while (v17 >= v35);
            do
            {
              double v36 = *(double *)(v32 - 24);
              v32 -= 24LL;
            }

            while (v17 < v36);
          }

          if (v8 - 24 != a1)
          {
            __int128 v37 = *(_OWORD *)(v8 - 24);
            *(void *)(a1 + 13) = *(void *)(v8 - 11);
            *(_OWORD *)a1 = v37;
          }

          a4 = 0;
          *(double *)(v8 - 24) = v17;
          *(void *)(v8 - 11) = *(void *)((char *)&v91 + 5);
          *(void *)(v8 - 16) = v91;
          continue;
        }

        uint64_t v18 = 0LL;
        __int128 v90 = *(_OWORD *)(a1 + 8);
        do
        {
          double v19 = *(double *)(a1 + v18 + 24);
          v18 += 24LL;
        }

        while (v19 < v17);
        unint64_t v20 = a1 + v18;
        unint64_t v21 = a2;
        if (v18 == 24)
        {
          unint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            double v23 = *(double *)(v21 - 24);
            v21 -= 24LL;
          }

          while (v23 >= v17);
        }

        else
        {
          do
          {
            double v22 = *(double *)(v21 - 24);
            v21 -= 24LL;
          }

          while (v22 >= v17);
        }

        unint64_t v8 = a1 + v18;
        if (v20 < v21)
        {
          unint64_t v24 = v21;
          do
          {
            *(void *)&v94[16] = *(void *)(v8 + 16);
            *(_OWORD *)uint64_t v94 = *(_OWORD *)v8;
            __int128 v25 = *(_OWORD *)v24;
            *(void *)(v8 + 13) = *(void *)(v24 + 13);
            *(_OWORD *)unint64_t v8 = v25;
            *(void *)(v24 + 13) = *(void *)&v94[13];
            *(_OWORD *)unint64_t v24 = *(_OWORD *)v94;
            do
            {
              double v26 = *(double *)(v8 + 24);
              v8 += 24LL;
            }

            while (v26 < v17);
            do
            {
              double v27 = *(double *)(v24 - 24);
              v24 -= 24LL;
            }

            while (v27 >= v17);
          }

          while (v8 < v24);
        }

        if (v8 - 24 != a1)
        {
          __int128 v28 = *(_OWORD *)(v8 - 24);
          *(void *)(a1 + 13) = *(void *)(v8 - 11);
          *(_OWORD *)a1 = v28;
        }

        *(double *)(v8 - 24) = v17;
        *(void *)(v8 - 11) = *(void *)((char *)&v90 + 5);
        *(void *)(v8 - 16) = v90;
        if (v20 < v21)
        {
LABEL_29:
          sub_10091A320(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }

        BOOL v29 = sub_10091AD10(a1, v8 - 24);
        if (!sub_10091AD10(v8, a2))
        {
          if (v29) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = v8 - 24;
        if (!v29) {
          goto LABEL_1;
        }
        return;
    }
  }

__int128 *sub_10091ABE8(__int128 *result, __int128 *a2, __int128 *a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v4 < v3)
    {
      *(_OWORD *)uint64_t v15 = *a2;
      __int128 v7 = *a2;
      *(void *)&v15[16] = *((void *)a2 + 2);
      uint64_t v8 = *(void *)((char *)a3 + 13);
      *a2 = *a3;
      *(void *)((char *)a2 + 13) = v8;
      *a3 = v7;
      *(void *)((char *)a3 + 13) = *(void *)&v15[13];
      if (*(double *)a2 < *(double *)result)
      {
        *(_OWORD *)uint64_t v16 = *result;
        __int128 v9 = *result;
        *(void *)&v16[16] = *((void *)result + 2);
        uint64_t v10 = *(void *)((char *)a2 + 13);
        void *result = *a2;
        *(void *)((char *)result + 13) = v10;
        *a2 = v9;
        *(void *)((char *)a2 + 13) = *(void *)&v16[13];
      }
    }
  }

  else
  {
    if (v4 >= v3)
    {
      *(_OWORD *)double v17 = *result;
      __int128 v11 = *result;
      *(void *)&v17[16] = *((void *)result + 2);
      uint64_t v12 = *(void *)((char *)a2 + 13);
      void *result = *a2;
      *(void *)((char *)result + 13) = v12;
      *a2 = v11;
      *(void *)((char *)a2 + 13) = *(void *)&v17[13];
      __int128 v5 = *a2;
      *(_OWORD *)uint64_t v14 = *a2;
      *(void *)&v14[16] = *((void *)a2 + 2);
      uint64_t v13 = *(void *)((char *)a3 + 13);
      *a2 = *a3;
      *(void *)((char *)a2 + 13) = v13;
    }

    else
    {
      __int128 v5 = *result;
      *(_OWORD *)uint64_t v14 = *result;
      *(void *)&v14[16] = *((void *)result + 2);
      uint64_t v6 = *(void *)((char *)a3 + 13);
      void *result = *a3;
      *(void *)((char *)result + 13) = v6;
    }

    *a3 = v5;
    *(void *)((char *)a3 + 13) = *(void *)&v14[13];
  }

  return result;
}

BOOL sub_10091AD10(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (_OWORD *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        *(_OWORD *)double v27 = *(_OWORD *)a1;
        __int128 v7 = *(_OWORD *)a1;
        *(void *)&v27[16] = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a2 - 11);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 13) = v8;
        *uint64_t v6 = v7;
        *(void *)(a2 - 11) = *(void *)&v27[13];
      }

      return result;
    case 3uLL:
      sub_10091ABE8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1LL;
    case 4uLL:
      sub_10091AFCC(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1LL;
    case 5uLL:
      double v17 = (__int128 *)(a1 + 24);
      uint64_t v18 = (__int128 *)(a1 + 48);
      double v19 = (__int128 *)(a1 + 72);
      sub_10091AFCC(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      double v21 = *(double *)(a2 - 24);
      uint64_t v20 = a2 - 24;
      if (v21 < *(double *)(a1 + 72))
      {
        *(_OWORD *)BOOL v29 = *v19;
        __int128 v22 = *v19;
        *(void *)&v29[16] = *(void *)(a1 + 88);
        uint64_t v23 = *(void *)(v20 + 13);
        __int128 *v19 = *(_OWORD *)v20;
        *(void *)(a1 + 85) = v23;
        *(_OWORD *)uint64_t v20 = v22;
        *(void *)(v20 + 13) = *(void *)&v29[13];
        if (*(double *)v19 < *(double *)v18)
        {
          *(_OWORD *)double v30 = *v18;
          __int128 v24 = *v18;
          *(void *)&v30[16] = *(void *)(a1 + 64);
          *uint64_t v18 = *v19;
          *(void *)(a1 + 61) = *(void *)(a1 + 85);
          __int128 *v19 = v24;
          *(void *)(a1 + 85) = *(void *)&v30[13];
          if (*(double *)v18 < *(double *)v17)
          {
            *(_OWORD *)unint64_t v31 = *v17;
            __int128 v25 = *v17;
            *(void *)&v31[16] = *(void *)(a1 + 40);
            __int128 *v17 = *v18;
            *(void *)(a1 + 37) = *(void *)(a1 + 61);
            *uint64_t v18 = v25;
            *(void *)(a1 + 61) = *(void *)&v31[13];
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              *(_OWORD *)unint64_t v32 = *(_OWORD *)a1;
              __int128 v26 = *(_OWORD *)a1;
              *(void *)&v32[16] = *(void *)(a1 + 16);
              *(_OWORD *)a1 = *v17;
              *(void *)(a1 + 13) = *(void *)(a1 + 37);
              __int128 *v17 = v26;
              *(void *)(a1 + 37) = *(void *)&v32[13];
            }
          }
        }
      }

      return 1LL;
    default:
      __int128 v9 = (double *)(a1 + 48);
      sub_10091ABE8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    double v13 = *(double *)v10;
    if (*(double *)v10 < *v9)
    {
      __int128 v28 = *(_OWORD *)(v10 + 8);
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 85) = *(void *)(a1 + v14 + 61);
        if (v14 == -48) {
          break;
        }
        v14 -= 24LL;
        if (v13 >= *(double *)(v15 + 24))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }

      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v13;
      *(void *)(v16 + _Block_object_dispose(va, 8) = v28;
      *(void *)(v16 + 13) = *(void *)((char *)&v28 + 5);
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }

    __int128 v9 = (double *)v10;
    v11 += 24LL;
    v10 += 24LL;
    if (v10 == a2) {
      return 1LL;
    }
  }

__n128 sub_10091AFCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    *(_OWORD *)int v12 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)a3;
    *(void *)&v12[16] = *(void *)(a3 + 16);
    uint64_t v9 = *(unint64_t *)((char *)a4 + 13);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 13) = v9;
    *(__n128 *)a4 = result;
    *(unint64_t *)((char *)a4 + 13) = *(void *)&v12[13];
    result.n128_u64[0] = *(void *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      *(_OWORD *)double v13 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)a2;
      *(void *)&v13[16] = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 13) = v10;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 13) = *(void *)&v13[13];
      result.n128_u64[0] = *(void *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)a1;
        *(void *)&v14[16] = *(void *)(a1 + 16);
        uint64_t v11 = *(void *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 13) = v11;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 13) = *(void *)&v14[13];
      }
    }
  }

  return result;
}

void sub_10091B0BC(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v8 = a1;
  while (2)
  {
    a1 = v8;
    uint64_t v9 = (uint64_t)a2 - v8;
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (*((double *)a2 - 11) < *(double *)(v8 + 8))
        {
          __int128 v159 = *(_OWORD *)v8;
          __int128 v171 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)uint64_t v206 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)&v206[16] = *(_OWORD *)(v8 + 80);
          __int128 v182 = *(_OWORD *)(v8 + 32);
          __int128 v194 = *(_OWORD *)(v8 + 48);
          __int128 v61 = *(a2 - 3);
          __int128 v60 = *(a2 - 2);
          __int128 v62 = *(a2 - 4);
          *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v61;
          *(_OWORD *)(v8 + 64) = v60;
          *(_OWORD *)(v8 + 32) = v62;
          __int128 v63 = *(a2 - 5);
          *(_OWORD *)unint64_t v8 = *(a2 - 6);
          *(_OWORD *)(v8 + 16) = v63;
          *(a2 - 6) = v159;
          *(a2 - 5) = v171;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v206[12];
          *(a2 - 3) = v194;
          *(a2 - 2) = *(_OWORD *)v206;
          *(a2 - 4) = v182;
        }

        return;
      case 3LL:
        sub_10091BC94(v8, v8 + 96, (uint64_t)(a2 - 6));
        return;
      case 4LL:
        sub_10091C25C(v8, v8 + 96, v8 + 192, (uint64_t)(a2 - 6));
        return;
      case 5LL:
        unint64_t v64 = (__int128 *)(v8 + 96);
        unint64_t v65 = (__int128 *)(v8 + 192);
        double v66 = (__int128 *)(v8 + 288);
        sub_10091C25C(v8, v8 + 96, v8 + 192, v8 + 288);
        if (*((double *)a2 - 11) < *(double *)(v8 + 296))
        {
          __int128 v183 = *(_OWORD *)(v8 + 320);
          __int128 v195 = *(_OWORD *)(v8 + 336);
          *(_OWORD *)uint64_t v207 = *(_OWORD *)(v8 + 352);
          *(_OWORD *)&v207[16] = *(_OWORD *)(v8 + 368);
          __int128 v160 = *v66;
          __int128 v172 = *(_OWORD *)(v8 + 304);
          __int128 v67 = *(a2 - 5);
          __int128 *v66 = *(a2 - 6);
          *(_OWORD *)(v8 + 304) = v67;
          __int128 v69 = *(a2 - 3);
          __int128 v68 = *(a2 - 2);
          __int128 v70 = *(a2 - 4);
          *(_OWORD *)(v8 + 364) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 336) = v69;
          *(_OWORD *)(v8 + 352) = v68;
          *(_OWORD *)(v8 + 320) = v70;
          *(a2 - 6) = v160;
          *(a2 - 5) = v172;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v207[12];
          *(a2 - 3) = v195;
          *(a2 - 2) = *(_OWORD *)v207;
          *(a2 - 4) = v183;
          if (*(double *)(v8 + 296) < *(double *)(v8 + 200))
          {
            __int128 v184 = *(_OWORD *)(v8 + 224);
            __int128 v196 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)uint64_t v208 = *(_OWORD *)(v8 + 256);
            *(_OWORD *)&v208[16] = *(_OWORD *)(v8 + 272);
            __int128 v161 = *v65;
            __int128 v173 = *(_OWORD *)(v8 + 208);
            __int128 v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 26_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 364);
            __int128 v72 = *(_OWORD *)(v8 + 304);
            *unint64_t v65 = *v66;
            *(_OWORD *)(v8 + 20_Block_object_dispose(va, 8) = v72;
            __int128 *v66 = v161;
            *(_OWORD *)(v8 + 304) = v173;
            *(_OWORD *)(v8 + 364) = *(_OWORD *)&v208[12];
            BOOL v73 = *(double *)(v8 + 200) < *(double *)(v8 + 104);
            *(_OWORD *)(v8 + 336) = v196;
            *(_OWORD *)(v8 + 352) = *(_OWORD *)v208;
            *(_OWORD *)(v8 + 320) = v184;
            if (v73)
            {
              __int128 v185 = *(_OWORD *)(v8 + 128);
              __int128 v197 = *(_OWORD *)(v8 + 144);
              *(_OWORD *)uint64_t v209 = *(_OWORD *)(v8 + 160);
              *(_OWORD *)&v209[16] = *(_OWORD *)(v8 + 176);
              __int128 v162 = *v64;
              __int128 v174 = *(_OWORD *)(v8 + 112);
              __int128 v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 172) = *(_OWORD *)(v8 + 268);
              __int128 v75 = *(_OWORD *)(v8 + 208);
              __int128 *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v75;
              *unint64_t v65 = v162;
              *(_OWORD *)(v8 + 20_Block_object_dispose(va, 8) = v174;
              *(_OWORD *)(v8 + 26_Block_object_dispose(va, 8) = *(_OWORD *)&v209[12];
              BOOL v73 = *(double *)(v8 + 104) < *(double *)(v8 + 8);
              *(_OWORD *)(v8 + 240) = v197;
              *(_OWORD *)(v8 + 256) = *(_OWORD *)v209;
              *(_OWORD *)(v8 + 224) = v185;
              if (v73)
              {
                __int128 v163 = *(_OWORD *)v8;
                __int128 v175 = *(_OWORD *)(v8 + 16);
                *(_OWORD *)double v210 = *(_OWORD *)(v8 + 64);
                *(_OWORD *)&v210[16] = *(_OWORD *)(v8 + 80);
                __int128 v186 = *(_OWORD *)(v8 + 32);
                __int128 v198 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)(v8 + 76) = *(_OWORD *)(v8 + 172);
                __int128 v76 = *(_OWORD *)(v8 + 160);
                __int128 v77 = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 64) = v76;
                __int128 v78 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)unint64_t v8 = *v64;
                *(_OWORD *)(v8 + 16) = v78;
                *(_OWORD *)(v8 + 32) = v77;
                __int128 *v64 = v163;
                *(_OWORD *)(v8 + 112) = v175;
                *(_OWORD *)(v8 + 172) = *(_OWORD *)&v210[12];
                *(_OWORD *)(v8 + 144) = v198;
                *(_OWORD *)(v8 + 160) = *(_OWORD *)v210;
                *(_OWORD *)(v8 + 12_Block_object_dispose(va, 8) = v186;
              }
            }
          }
        }

        return;
      default:
        if (v9 <= 2303)
        {
          uint64_t v79 = (_OWORD *)(v8 + 96);
          BOOL v81 = (_OWORD *)v8 == a2 || v79 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v81)
            {
              uint64_t v82 = 0LL;
              unint64_t v83 = v8;
              do
              {
                __int128 v84 = v79;
                double v85 = *(double *)(v83 + 104);
                if (v85 < *(double *)(v83 + 8))
                {
                  uint64_t v86 = *(void *)v79;
                  __int128 v187 = *(_OWORD *)(v83 + 144);
                  *(_OWORD *)float v199 = *(_OWORD *)(v83 + 160);
                  *(_OWORD *)&v199[16] = *(_OWORD *)(v83 + 176);
                  __int128 v88 = *(_OWORD *)(v83 + 112);
                  __int128 v87 = *(_OWORD *)(v83 + 128);
                  uint64_t v89 = v82;
                  __int128 v164 = v88;
                  while (1)
                  {
                    __int128 v90 = (_OWORD *)(v8 + v89);
                    __int128 v91 = *(_OWORD *)(v8 + v89 + 48);
                    v90[8] = *(_OWORD *)(v8 + v89 + 32);
                    v90[9] = v91;
                    v90[10] = *(_OWORD *)(v8 + v89 + 64);
                    *(_OWORD *)((char *)v90 + 172) = *(_OWORD *)(v8 + v89 + 76);
                    __int128 v92 = *(_OWORD *)(v8 + v89 + 16);
                    v90[6] = *(_OWORD *)(v8 + v89);
                    v90[7] = v92;
                    if (!v89) {
                      break;
                    }
                    v89 -= 96LL;
                    if (v85 >= *((double *)v90 - 11))
                    {
                      uint64_t v93 = v8 + v89 + 96;
                      goto LABEL_80;
                    }
                  }

                  uint64_t v93 = v8;
LABEL_80:
                  *(void *)uint64_t v93 = v86;
                  *(double *)(v93 + _Block_object_dispose(va, 8) = v85;
                  *(_OWORD *)(v93 + 4_Block_object_dispose(va, 8) = v187;
                  *(_OWORD *)(v93 + 64) = *(_OWORD *)v199;
                  *(_OWORD *)(v93 + 76) = *(_OWORD *)&v199[12];
                  *(_OWORD *)(v93 + 16) = v164;
                  *(_OWORD *)(v93 + 32) = v87;
                }

                uint64_t v79 = v84 + 6;
                v82 += 96LL;
                unint64_t v83 = (unint64_t)v84;
              }

              while (v84 + 6 != a2);
            }
          }

          else if (!v81)
          {
            do
            {
              uint64_t v138 = (uint64_t)v79;
              double v139 = *(double *)(a1 + 104);
              if (v139 < *(double *)(a1 + 8))
              {
                uint64_t v140 = *(void *)v79;
                __int128 v190 = *(_OWORD *)(a1 + 144);
                *(_OWORD *)int v202 = *(_OWORD *)(a1 + 160);
                *(_OWORD *)&v202[16] = *(_OWORD *)(a1 + 176);
                __int128 v167 = *(_OWORD *)(a1 + 112);
                __int128 v178 = *(_OWORD *)(a1 + 128);
                do
                {
                  __int128 v141 = *(v79 - 3);
                  v79[2] = *(v79 - 4);
                  v79[3] = v141;
                  v79[4] = *(v79 - 2);
                  *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)((char *)v79 - 20);
                  __int128 v142 = *(v79 - 5);
                  _OWORD *v79 = *(v79 - 6);
                  v79[1] = v142;
                  double v143 = *((double *)v79 - 23);
                  v79 -= 6;
                }

                while (v139 < v143);
                *(void *)uint64_t v79 = v140;
                *((double *)v79 + 1) = v139;
                v79[1] = v167;
                *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)&v202[12];
                v79[3] = v190;
                v79[4] = *(_OWORD *)v202;
                v79[2] = v178;
              }

              uint64_t v79 = (_OWORD *)(v138 + 96);
              a1 = v138;
            }

            while ((_OWORD *)(v138 + 96) != a2);
          }

          return;
        }

        if (!a3)
        {
          if ((_OWORD *)v8 == a2) {
            return;
          }
          int64_t v94 = (unint64_t)(v10 - 2) >> 1;
          int64_t v95 = v94;
          do
          {
            int64_t v96 = v95;
            if (v94 >= v95)
            {
              uint64_t v97 = (2 * v95) | 1;
              unint64_t v98 = v8 + 96 * v97;
              if (2 * v96 + 2 < v10 && *(double *)(v8 + 96 * v97 + 8) < *(double *)(v98 + 104))
              {
                v98 += 96LL;
                uint64_t v97 = 2 * v96 + 2;
              }

              double v99 = *(double *)(v8 + 96 * v96 + 8);
              if (*(double *)(v98 + 8) >= v99)
              {
                unint64_t v100 = v8 + 96 * v96;
                uint64_t v101 = *(void *)v100;
                __int128 v165 = *(_OWORD *)(v100 + 16);
                *(_OWORD *)int v200 = *(_OWORD *)(v100 + 64);
                *(_OWORD *)&v200[16] = *(_OWORD *)(v100 + 80);
                __int128 v176 = *(_OWORD *)(v100 + 32);
                __int128 v188 = *(_OWORD *)(v100 + 48);
                do
                {
                  __int128 v102 = (_OWORD *)v100;
                  unint64_t v100 = v98;
                  __int128 v103 = *(_OWORD *)(v98 + 16);
                  *__int128 v102 = *(_OWORD *)v98;
                  v102[1] = v103;
                  __int128 v104 = *(_OWORD *)(v98 + 32);
                  __int128 v105 = *(_OWORD *)(v98 + 48);
                  __int128 v106 = *(_OWORD *)(v98 + 64);
                  *(_OWORD *)((char *)v102 + 76) = *(_OWORD *)(v98 + 76);
                  v102[3] = v105;
                  v102[4] = v106;
                  _OWORD v102[2] = v104;
                  if (v94 < v97) {
                    break;
                  }
                  uint64_t v107 = (2 * v97) | 1;
                  unint64_t v98 = v8 + 96 * v107;
                  uint64_t v108 = 2 * v97 + 2;
                  if (v108 < v10 && *(double *)(v8 + 96 * v107 + 8) < *(double *)(v98 + 104))
                  {
                    v98 += 96LL;
                    uint64_t v107 = v108;
                  }

                  uint64_t v97 = v107;
                }

                while (*(double *)(v98 + 8) >= v99);
                *(void *)unint64_t v100 = v101;
                *(double *)(v100 + _Block_object_dispose(va, 8) = v99;
                *(_OWORD *)(v100 + 4_Block_object_dispose(va, 8) = v188;
                *(_OWORD *)(v100 + 64) = *(_OWORD *)v200;
                *(_OWORD *)(v100 + 76) = *(_OWORD *)&v200[12];
                *(_OWORD *)(v100 + 16) = v165;
                *(_OWORD *)(v100 + 32) = v176;
              }
            }

            int64_t v95 = v96 - 1;
          }

          while (v96);
          int64_t v109 = v9 / 0x60uLL;
          while (2)
          {
            uint64_t v110 = 0LL;
            __int128 v166 = *(_OWORD *)v8;
            __int128 v177 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)double v211 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v211[16] = *(_OWORD *)(v8 + 80);
            __int128 v189 = *(_OWORD *)(v8 + 32);
            __int128 v201 = *(_OWORD *)(v8 + 48);
            unint64_t v111 = v8;
            do
            {
              uint64_t v112 = (_OWORD *)v111;
              uint64_t v113 = v110 + 1;
              v111 += 96 * (v110 + 1);
              uint64_t v114 = 2 * v110;
              uint64_t v110 = (2 * v110) | 1;
              int64_t v115 = v114 + 2;
              if (v115 < v109 && *((double *)&v112[6 * v113] + 1) < *(double *)(v111 + 104))
              {
                v111 += 96LL;
                uint64_t v110 = v115;
              }

              __int128 v116 = *(_OWORD *)(v111 + 16);
              *uint64_t v112 = *(_OWORD *)v111;
              v112[1] = v116;
              __int128 v117 = *(_OWORD *)(v111 + 32);
              __int128 v118 = *(_OWORD *)(v111 + 48);
              __int128 v119 = *(_OWORD *)(v111 + 64);
              *(_OWORD *)((char *)v112 + 76) = *(_OWORD *)(v111 + 76);
              _DWORD v112[3] = v118;
              v112[4] = v119;
              v112[2] = v117;
            }

            while (v110 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
            a2 -= 6;
            if ((_OWORD *)v111 != a2)
            {
              __int128 v120 = a2[1];
              *(_OWORD *)unint64_t v111 = *a2;
              *(_OWORD *)(v111 + 16) = v120;
              __int128 v121 = a2[2];
              __int128 v122 = a2[3];
              __int128 v123 = a2[4];
              *(_OWORD *)(v111 + 76) = *(_OWORD *)((char *)a2 + 76);
              *(_OWORD *)(v111 + 4_Block_object_dispose(va, 8) = v122;
              *(_OWORD *)(v111 + 64) = v123;
              *(_OWORD *)(v111 + 32) = v121;
              *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)&v211[12];
              a2[3] = v201;
              a2[4] = *(_OWORD *)v211;
              a2[2] = v189;
              *a2 = v166;
              a2[1] = v177;
              uint64_t v124 = v111 - v8 + 96;
              if (v124 >= 97)
              {
                unint64_t v125 = (v124 / 0x60uLL - 2) >> 1;
                double v126 = *(double *)(v111 + 8);
                if (*(double *)(v8 + 96 * v125 + 8) < v126)
                {
                  uint64_t v127 = *(void *)v111;
                  __int128 v146 = *(_OWORD *)(v111 + 16);
                  *(_OWORD *)uint64_t v155 = *(_OWORD *)(v111 + 64);
                  *(_OWORD *)&v155[16] = *(_OWORD *)(v111 + 80);
                  __int128 v149 = *(_OWORD *)(v111 + 32);
                  __int128 v152 = *(_OWORD *)(v111 + 48);
                  do
                  {
                    __int128 v128 = (_OWORD *)v111;
                    unint64_t v111 = v8 + 96 * v125;
                    __int128 v129 = *(_OWORD *)(v111 + 16);
                    _OWORD *v128 = *(_OWORD *)v111;
                    v128[1] = v129;
                    __int128 v130 = *(_OWORD *)(v111 + 32);
                    __int128 v131 = *(_OWORD *)(v111 + 48);
                    __int128 v132 = *(_OWORD *)(v111 + 64);
                    *(_OWORD *)((char *)v128 + 76) = *(_OWORD *)(v111 + 76);
                    v128[3] = v131;
                    v128[4] = v132;
                    v128[2] = v130;
                    if (!v125) {
                      break;
                    }
                    unint64_t v125 = (v125 - 1) >> 1;
                  }

                  while (*(double *)(v8 + 96 * v125 + 8) < v126);
                  *(void *)unint64_t v111 = v127;
                  *(double *)(v111 + _Block_object_dispose(va, 8) = v126;
                  *(_OWORD *)(v111 + 16) = v146;
                  __int128 v133 = v149;
                  __int128 v134 = v152;
                  __int128 v135 = *(_OWORD *)v155;
                  __int128 v136 = *(_OWORD *)&v155[12];
LABEL_112:
                  *(_OWORD *)(v111 + 76) = v136;
                  *(_OWORD *)(v111 + 4_Block_object_dispose(va, 8) = v134;
                  *(_OWORD *)(v111 + 64) = v135;
                  *(_OWORD *)(v111 + 32) = v133;
                }
              }

              if (v109-- <= 2) {
                return;
              }
              continue;
            }

            break;
          }

          *(_OWORD *)unint64_t v111 = v166;
          *(_OWORD *)(v111 + 16) = v177;
          __int128 v133 = v189;
          __int128 v134 = v201;
          __int128 v135 = *(_OWORD *)v211;
          __int128 v136 = *(_OWORD *)&v211[12];
          goto LABEL_112;
        }

        unint64_t v11 = (unint64_t)v10 >> 1;
        int v12 = (_OWORD *)(v8 + 96 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x3000)
        {
          sub_10091BC94(a1 + 96 * v11, a1, (uint64_t)(a2 - 6));
        }

        else
        {
          sub_10091BC94(a1, a1 + 96 * v11, (uint64_t)(a2 - 6));
          uint64_t v13 = 3 * v11;
          uint64_t v14 = a1 + 96 * v11 - 96;
          sub_10091BC94(a1 + 96, v14, (uint64_t)(a2 - 12));
          uint64_t v15 = a1 + 96 + 32 * v13;
          sub_10091BC94(a1 + 192, v15, (uint64_t)(a2 - 18));
          sub_10091BC94(v14, (uint64_t)v12, v15);
          __int128 v156 = *(_OWORD *)a1;
          __int128 v168 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)uint64_t v203 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v203[16] = *(_OWORD *)(a1 + 80);
          __int128 v179 = *(_OWORD *)(a1 + 32);
          __int128 v191 = *(_OWORD *)(a1 + 48);
          __int128 v17 = v12[3];
          __int128 v16 = v12[4];
          __int128 v18 = v12[2];
          *(_OWORD *)(a1 + 76) = *(_OWORD *)((char *)v12 + 76);
          *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v17;
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          __int128 v19 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v19;
          _OWORD *v12 = v156;
          v12[1] = v168;
          *(_OWORD *)((char *)v12 + 76) = *(_OWORD *)&v203[12];
          v12[3] = v191;
          v12[4] = *(_OWORD *)v203;
          _DWORD v12[2] = v179;
        }

        --a3;
        if ((a4 & 1) == 0)
        {
          double v20 = *(double *)(a1 + 8);
          uint64_t v42 = *(void *)a1;
          *(_OWORD *)unint64_t v154 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v154[16] = *(_OWORD *)(a1 + 80);
          __int128 v148 = *(_OWORD *)(a1 + 32);
          __int128 v151 = *(_OWORD *)(a1 + 48);
          __int128 v145 = *(_OWORD *)(a1 + 16);
          if (v20 >= *((double *)a2 - 11))
          {
            unint64_t v45 = a1 + 96;
            do
            {
              unint64_t v8 = v45;
              double v46 = *(double *)(v45 + 8);
              v45 += 96LL;
            }

            while (v20 >= v46);
          }

          else
          {
            uint64_t v43 = a1;
            do
            {
              unint64_t v8 = v43 + 96;
              double v44 = *(double *)(v43 + 104);
              v43 += 96LL;
            }

            while (v20 >= v44);
          }

          uint64_t v47 = (double *)a2;
          if (v8 < (unint64_t)a2)
          {
            __int128 v48 = (double *)a2;
            do
            {
              uint64_t v47 = v48 - 12;
              double v49 = *(v48 - 11);
              v48 -= 12;
            }

            while (v20 < v49);
          }

          while (v8 < (unint64_t)v47)
          {
            __int128 v158 = *(_OWORD *)v8;
            __int128 v170 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)uint64_t v205 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v205[16] = *(_OWORD *)(v8 + 80);
            __int128 v181 = *(_OWORD *)(v8 + 32);
            __int128 v193 = *(_OWORD *)(v8 + 48);
            __int128 v51 = *((_OWORD *)v47 + 3);
            __int128 v50 = *((_OWORD *)v47 + 4);
            __int128 v52 = *((_OWORD *)v47 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v47 + 76);
            *(_OWORD *)(v8 + 4_Block_object_dispose(va, 8) = v51;
            *(_OWORD *)(v8 + 64) = v50;
            *(_OWORD *)(v8 + 32) = v52;
            __int128 v53 = *((_OWORD *)v47 + 1);
            *(_OWORD *)unint64_t v8 = *(_OWORD *)v47;
            *(_OWORD *)(v8 + 16) = v53;
            *(_OWORD *)uint64_t v47 = v158;
            *((_OWORD *)v47 + 1) = v170;
            *(_OWORD *)((char *)v47 + 76) = *(_OWORD *)&v205[12];
            *((_OWORD *)v47 + 3) = v193;
            *((_OWORD *)v47 + 4) = *(_OWORD *)v205;
            *((_OWORD *)v47 + 2) = v181;
            do
            {
              double v54 = *(double *)(v8 + 104);
              v8 += 96LL;
            }

            while (v20 >= v54);
            do
            {
              double v55 = *(v47 - 11);
              v47 -= 12;
            }

            while (v20 < v55);
          }

          if (v8 - 96 != a1)
          {
            __int128 v56 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 16) = v56;
            __int128 v57 = *(_OWORD *)(v8 - 64);
            __int128 v58 = *(_OWORD *)(v8 - 48);
            __int128 v59 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
            *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v58;
            *(_OWORD *)(a1 + 64) = v59;
            *(_OWORD *)(a1 + 32) = v57;
          }

          a4 = 0;
          *(void *)(v8 - 96) = v42;
          *(double *)(v8 - 8_Block_object_dispose(va, 8) = v20;
          *(_OWORD *)(v8 - 80) = v145;
          *(_OWORD *)(v8 - 20) = *(_OWORD *)&v154[12];
          *(_OWORD *)(v8 - 4_Block_object_dispose(va, 8) = v151;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v154;
          *(_OWORD *)(v8 - 64) = v148;
          continue;
        }

        double v20 = *(double *)(a1 + 8);
LABEL_11:
        uint64_t v21 = 0LL;
        uint64_t v22 = *(void *)a1;
        *(_OWORD *)uint64_t v153 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v153[16] = *(_OWORD *)(a1 + 80);
        __int128 v147 = *(_OWORD *)(a1 + 32);
        __int128 v150 = *(_OWORD *)(a1 + 48);
        __int128 v144 = *(_OWORD *)(a1 + 16);
        do
        {
          double v23 = *(double *)(a1 + v21 + 104);
          v21 += 96LL;
        }

        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        __int128 v25 = (double *)a2;
        if (v21 == 96)
        {
          __int128 v28 = (double *)a2;
          while (v24 < (unint64_t)v28)
          {
            __int128 v26 = v28 - 12;
            double v29 = *(v28 - 11);
            v28 -= 12;
            if (v29 < v20) {
              goto LABEL_21;
            }
          }

          __int128 v26 = v28;
        }

        else
        {
          do
          {
            __int128 v26 = v25 - 12;
            double v27 = *(v25 - 11);
            v25 -= 12;
          }

          while (v27 >= v20);
        }

__n128 sub_10091BC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v4 = *(double *)(a3 + 8);
  if (result.n128_f64[0] >= *(double *)(a1 + 8))
  {
    if (v4 < result.n128_f64[0])
    {
      __int128 v34 = *(_OWORD *)(a2 + 32);
      __int128 v38 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 80);
      __n128 v26 = *(__n128 *)a2;
      __int128 v30 = *(_OWORD *)(a2 + 16);
      __int128 v9 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v9;
      __int128 v11 = *(_OWORD *)(a3 + 48);
      __int128 v10 = *(_OWORD *)(a3 + 64);
      __int128 v12 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v11;
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 32) = v12;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v42;
      *(_OWORD *)(a3 + 76) = *(_OWORD *)&v42[12];
      *(_OWORD *)(a3 + 32) = v34;
      *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v38;
      result.n128_u64[1] = v26.n128_u64[1];
      *(__n128 *)a3 = v26;
      *(_OWORD *)(a3 + 16) = v30;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        __int128 v35 = *(_OWORD *)(a1 + 32);
        __int128 v39 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 80);
        __n128 v27 = *(__n128 *)a1;
        __int128 v31 = *(_OWORD *)(a1 + 16);
        __int128 v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v13;
        __int128 v15 = *(_OWORD *)(a2 + 48);
        __int128 v14 = *(_OWORD *)(a2 + 64);
        __int128 v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v15;
        *(_OWORD *)(a1 + 64) = v14;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v43;
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v43[12];
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v39;
        __n128 result = v27;
        *(__n128 *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v31;
      }
    }
  }

  else
  {
    if (v4 >= result.n128_f64[0])
    {
      __int128 v36 = *(_OWORD *)(a1 + 32);
      __int128 v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)double v44 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 80);
      __n128 v28 = *(__n128 *)a1;
      __int128 v32 = *(_OWORD *)(a1 + 16);
      __int128 v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      __int128 v19 = *(_OWORD *)(a2 + 48);
      __int128 v18 = *(_OWORD *)(a2 + 64);
      __int128 v20 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v19;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v44;
      *(_OWORD *)(a2 + 76) = *(_OWORD *)&v44[12];
      *(_OWORD *)(a2 + 32) = v36;
      *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v40;
      result.n128_u64[1] = v28.n128_u64[1];
      *(__n128 *)a2 = v28;
      *(_OWORD *)(a2 + 16) = v32;
      result.n128_u64[0] = *(void *)(a3 + 8);
      __int128 v33 = *(_OWORD *)(a2 + 32);
      __int128 v37 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)BOOL v41 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 80);
      __n128 v25 = *(__n128 *)a2;
      __int128 v29 = *(_OWORD *)(a2 + 16);
      __int128 v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      __int128 v23 = *(_OWORD *)(a3 + 48);
      __int128 v22 = *(_OWORD *)(a3 + 64);
      __int128 v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
    }

    else
    {
      __int128 v33 = *(_OWORD *)(a1 + 32);
      __int128 v37 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)BOOL v41 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a1 + 80);
      __n128 v25 = *(__n128 *)a1;
      __int128 v29 = *(_OWORD *)(a1 + 16);
      __int128 v5 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v5;
      __int128 v7 = *(_OWORD *)(a3 + 48);
      __int128 v6 = *(_OWORD *)(a3 + 64);
      __int128 v8 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
      *(_OWORD *)(a1 + 64) = v6;
      *(_OWORD *)(a1 + 32) = v8;
    }

    *(_OWORD *)(a3 + 64) = *(_OWORD *)v41;
    *(_OWORD *)(a3 + 76) = *(_OWORD *)&v41[12];
    *(_OWORD *)(a3 + 32) = v33;
    *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v37;
    __n128 result = v25;
    *(__n128 *)a3 = v25;
    *(_OWORD *)(a3 + 16) = v29;
  }

  return result;
}

BOOL sub_10091BE84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) < *(double *)(a1 + 8))
      {
        __int128 v47 = *(_OWORD *)(a1 + 32);
        __int128 v53 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)__int128 v59 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 80);
        __int128 v35 = *(_OWORD *)a1;
        __int128 v41 = *(_OWORD *)(a1 + 16);
        __int128 v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        __int128 v8 = *(_OWORD *)(a2 - 48);
        __int128 v7 = *(_OWORD *)(a2 - 32);
        __int128 v9 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v8;
        *(_OWORD *)(a1 + 64) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 64) = v47;
        *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v53;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v59;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v59[12];
        *(_OWORD *)(a2 - 96) = v35;
        *(_OWORD *)(a2 - 80) = v41;
      }

      return result;
    case 3uLL:
      sub_10091BC94(a1, a1 + 96, a2 - 96);
      return 1LL;
    case 4uLL:
      sub_10091C25C(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1LL;
    case 5uLL:
      __int128 v21 = (__int128 *)(a1 + 96);
      __int128 v22 = (__int128 *)(a1 + 192);
      __int128 v23 = (__int128 *)(a1 + 288);
      sub_10091C25C(a1, a1 + 96, a1 + 192, a1 + 288);
      __int128 v49 = *(_OWORD *)(a1 + 320);
      __int128 v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)__int128 v60 = *(_OWORD *)(a1 + 352);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 368);
      __int128 v37 = *v23;
      __int128 v43 = *(_OWORD *)(a1 + 304);
      __int128 v24 = *(_OWORD *)(a2 - 80);
      *__int128 v23 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      __int128 v26 = *(_OWORD *)(a2 - 48);
      __int128 v25 = *(_OWORD *)(a2 - 32);
      __int128 v27 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a1 + 352) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a2 - 64) = v49;
      *(_OWORD *)(a2 - 4_Block_object_dispose(va, 8) = v55;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v60;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a2 - 96) = v37;
      *(_OWORD *)(a2 - 80) = v43;
      __int128 v50 = *(_OWORD *)(a1 + 224);
      __int128 v56 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)__int128 v61 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 272);
      __int128 v38 = *v22;
      __int128 v44 = *(_OWORD *)(a1 + 208);
      __int128 v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 26_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 364);
      __int128 v29 = *(_OWORD *)(a1 + 304);
      *__int128 v22 = *v23;
      *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v29;
      *__int128 v23 = v38;
      *(_OWORD *)(a1 + 304) = v44;
      *(_OWORD *)(a1 + 364) = *(_OWORD *)&v61[12];
      BOOL v30 = *(double *)(a1 + 200) < *(double *)(a1 + 104);
      *(_OWORD *)(a1 + 336) = v56;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 320) = v50;
      if (!v30) {
        return 1LL;
      }
      __int128 v51 = *(_OWORD *)(a1 + 128);
      __int128 v57 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)__int128 v62 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 176);
      __int128 v39 = *v21;
      __int128 v45 = *(_OWORD *)(a1 + 112);
      __int128 v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 268);
      __int128 v32 = *(_OWORD *)(a1 + 208);
      __int128 *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v32;
      *__int128 v22 = v39;
      *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v45;
      *(_OWORD *)(a1 + 26_Block_object_dispose(va, 8) = *(_OWORD *)&v62[12];
      BOOL v30 = *(double *)(a1 + 104) < *(double *)(a1 + 8);
      *(_OWORD *)(a1 + 240) = v57;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)v62;
      *(_OWORD *)(a1 + 224) = v51;
      if (!v30) {
        return 1LL;
      }
      __int128 v52 = *(_OWORD *)(a1 + 32);
      __int128 v58 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)__int128 v63 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
      __int128 v40 = *(_OWORD *)a1;
      __int128 v46 = *(_OWORD *)(a1 + 16);
      __int128 v33 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v33;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 172);
      __int128 v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v34;
      __int128 *v21 = v40;
      *(_OWORD *)(a1 + 112) = v46;
      *(_OWORD *)(a1 + 172) = *(_OWORD *)&v63[12];
      BOOL result = 1LL;
      *(_OWORD *)(a1 + 144) = v58;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v52;
      return result;
    default:
      uint64_t v10 = a1 + 192;
      sub_10091BC94(a1, a1 + 96, a1 + 192);
      uint64_t v11 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    double v14 = *(double *)(v11 + 8);
    if (v14 < *(double *)(v10 + 8))
    {
      uint64_t v15 = *(void *)v11;
      __int128 v48 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)double v54 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)&v54[16] = *(_OWORD *)(v11 + 80);
      uint64_t v16 = v12;
      __int128 v36 = *(_OWORD *)(v11 + 16);
      __int128 v42 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        uint64_t v17 = a1 + v16;
        __int128 v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        __int128 v19 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 28_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v19;
        *(_OWORD *)(a1 + v16 + 364) = *(_OWORD *)(a1 + v16 + 268);
        if (v16 == -192) {
          break;
        }
        v16 -= 96LL;
        if (v14 >= *(double *)(v17 + 104))
        {
          uint64_t v20 = a1 + v16 + 288;
          goto LABEL_13;
        }
      }

      uint64_t v20 = a1;
LABEL_13:
      *(void *)uint64_t v20 = v15;
      *(double *)(v20 + _Block_object_dispose(va, 8) = v14;
      *(_OWORD *)(v20 + 4_Block_object_dispose(va, 8) = v48;
      *(_OWORD *)(v20 + 64) = *(_OWORD *)v54;
      *(_OWORD *)(v20 + 76) = *(_OWORD *)&v54[12];
      ++v13;
      *(_OWORD *)(v20 + 16) = v36;
      *(_OWORD *)(v20 + 32) = v42;
      if (v13 == 8) {
        return v11 + 96 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 96LL;
    v11 += 96LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

__n128 sub_10091C25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    __int128 v27 = *(_OWORD *)(a3 + 32);
    __int128 v30 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)__int128 v33 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v33[16] = *(_OWORD *)(a3 + 80);
    __int128 v21 = *(_OWORD *)a3;
    __int128 v24 = *(_OWORD *)(a3 + 16);
    __int128 v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    __int128 v11 = *(_OWORD *)(a4 + 48);
    __int128 v10 = *(_OWORD *)(a4 + 64);
    __int128 v12 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 76) = *(_OWORD *)(a4 + 76);
    *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v11;
    *(_OWORD *)(a3 + 64) = v10;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v33;
    *(_OWORD *)(a4 + 76) = *(_OWORD *)&v33[12];
    *(_OWORD *)(a4 + 32) = v27;
    *(_OWORD *)(a4 + 4_Block_object_dispose(va, 8) = v30;
    result.n128_u64[1] = *((void *)&v21 + 1);
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v24;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      __int128 v28 = *(_OWORD *)(a2 + 32);
      __int128 v31 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)__int128 v34 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v34[16] = *(_OWORD *)(a2 + 80);
      __int128 v22 = *(_OWORD *)a2;
      __int128 v25 = *(_OWORD *)(a2 + 16);
      __int128 v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v13;
      __int128 v15 = *(_OWORD *)(a3 + 48);
      __int128 v14 = *(_OWORD *)(a3 + 64);
      __int128 v16 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v15;
      *(_OWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v34;
      *(_OWORD *)(a3 + 76) = *(_OWORD *)&v34[12];
      *(_OWORD *)(a3 + 32) = v28;
      *(_OWORD *)(a3 + 4_Block_object_dispose(va, 8) = v31;
      result.n128_u64[1] = *((void *)&v22 + 1);
      *(_OWORD *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v25;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        __int128 v29 = *(_OWORD *)(a1 + 32);
        __int128 v32 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)__int128 v35 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 80);
        __n128 v23 = *(__n128 *)a1;
        __int128 v26 = *(_OWORD *)(a1 + 16);
        __int128 v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        __int128 v19 = *(_OWORD *)(a2 + 48);
        __int128 v18 = *(_OWORD *)(a2 + 64);
        __int128 v20 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
        *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v19;
        *(_OWORD *)(a1 + 64) = v18;
        *(_OWORD *)(a1 + 32) = v20;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v35;
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v35[12];
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v32;
        __n128 result = v23;
        *(__n128 *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v26;
      }
    }
  }

  return result;
}

void sub_10091C3D0(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v24 = 0LL;
  __int128 v25 = &v24;
  uint64_t v26 = 0xA812000000LL;
  __int128 v27 = sub_10091C678;
  __int128 v28 = sub_10091C6F4;
  __int128 v29 = &unk_10175E27B;
  uint64_t v30 = 1LL;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  uint64_t v38 = 0LL;
  CFAbsoluteTime Current = -1.0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)&v32, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)(v25 + 17), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(v25 + 14), (const std::string *)(a1 + 8));
  char v6 = *(_BYTE *)(a1 + 36);
  __int128 v7 = v25;
  *((_BYTE *)v25 + 161) = (v6 & 4) != 0;
  *((_BYTE *)v7 + 160) = (v6 & 2) != 0;
  uint64_t v8 = a2[23];
  if ((v8 & 0x80u) == 0LL) {
    uint64_t v9 = a2[23];
  }
  else {
    uint64_t v9 = *((void *)a2 + 1);
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0LL) {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  if (v9 == v10)
  {
    if (v11 >= 0) {
      __int128 v12 = (unsigned __int8 *)(a1 + 40);
    }
    else {
      __int128 v12 = *(unsigned __int8 **)(a1 + 40);
    }
    if ((v8 & 0x80) != 0)
    {
      BOOL v20 = memcmp(*(const void **)a2, v12, *((void *)a2 + 1)) == 0;
    }

    else if (a2[23])
    {
      uint64_t v13 = v8 - 1;
      do
      {
        int v15 = *a2++;
        int v14 = v15;
        int v17 = *v12++;
        int v16 = v17;
        BOOL v19 = v13-- != 0;
        BOOL v20 = v14 == v16;
      }

      while (v20 && v19);
    }

    else
    {
      BOOL v20 = 1;
    }
  }

  else
  {
    BOOL v20 = 0;
  }

  *((_BYTE *)v7 + 162) = v20;
  __int128 v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  void v23[2] = sub_10091C7B8;
  _DWORD v23[3] = &unk_101860D38;
  v23[4] = v21;
  v23[5] = &v24;
  objc_msgSend( objc_msgSend( objc_msgSend(a3, "vendor"),  "proxyForService:forClient:",  @"CLBeaconFenceAuthorizationManager",  @"CLBTLEFenceManager"),  "fetchAllFencesCountWithReply:",  v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10091C7CC;
  v22[3] = &unk_10182EFC8;
  v22[4] = &v24;
  dispatch_group_notify(v21, (dispatch_queue_t)objc_msgSend(objc_msgSend(a3, "silo"), "queue"), v22);
  dispatch_release(v21);
  _Block_object_dispose(&v24, 8);
  if (SHIBYTE(v37) < 0) {
    operator delete(*((void **)&v36 + 1));
  }
  if (SBYTE7(v36) < 0) {
    operator delete((void *)v35);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(*((void **)&v33 + 1));
  }
  if (SBYTE7(v33) < 0) {
    operator delete((void *)v32);
  }
}

void sub_10091C650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

__n128 sub_10091C678(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v3;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;
  __int128 v4 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;
  __n128 result = *(__n128 *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 152) = 0LL;
  int v6 = *(_DWORD *)(a2 + 160);
  *(_WORD *)(a1 + 164) = *(_WORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v6;
  return result;
}

void sub_10091C6F4(uint64_t a1)
{
}

uint64_t sub_10091C758(uint64_t a1)
{
  return a1;
}

void sub_10091C7B8(uint64_t a1, __int16 a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 164LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10091C7CC(uint64_t a1)
{
  uint64_t v2 = sub_1004DD868();
  return sub_1004DFD24(v2, (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL));
}

void sub_10091C7F8(uint64_t a1, void *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0xA812000000LL;
  uint64_t v10 = sub_10091C9E8;
  int v11 = sub_10091CA5C;
  uint64_t v12 = &unk_10175E27B;
  uint64_t v13 = 1LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v21 = 0LL;
  CFAbsoluteTime Current = -1.0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)&v15, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a1 + 8));
  __int128 v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10091CAC0;
  v6[3] = &unk_101860D38;
  v6[4] = v4;
  v6[5] = &v7;
  objc_msgSend( objc_msgSend( objc_msgSend(a2, "vendor"),  "proxyForService:forClient:",  @"CLBeaconFenceAuthorizationManager",  @"CLBTLEFenceManager"),  "fetchAllFencesCountWithReply:",  v6);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10091CAD4;
  v5[3] = &unk_10182EFC8;
  v5[4] = &v7;
  dispatch_group_notify(v4, (dispatch_queue_t)objc_msgSend(objc_msgSend(a2, "silo"), "queue"), v5);
  dispatch_release(v4);
  _Block_object_dispose(&v7, 8);
  if (SHIBYTE(v20) < 0) {
    operator delete(*((void **)&v19 + 1));
  }
  if (SBYTE7(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(*((void **)&v16 + 1));
  }
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_10091C9C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

__n128 sub_10091C9E8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  __int128 v3 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v3;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = 0LL;
  *(void *)(a2 + 8_Block_object_dispose(va, 8) = 0LL;
  __int128 v4 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a2 + 112) = 0LL;
  *(void *)(a2 + 120) = 0LL;
  *(void *)(a2 + 12_Block_object_dispose(va, 8) = 0LL;
  __n128 result = *(__n128 *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(void *)(a2 + 136) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 152) = 0LL;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return result;
}

void sub_10091CA5C(uint64_t a1)
{
}

void sub_10091CAC0(uint64_t a1, __int16 a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 16sub_1008FF618(v1, 0LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10091CAD4(uint64_t a1)
{
  uint64_t v2 = sub_1004DD868();
  return sub_1004E0124(v2, (unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL));
}

void sub_10091CB00(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  *(_OWORD *)__int128 v22 = 0u;
  *(_OWORD *)__int128 __p = 0u;
  *(_OWORD *)__int128 v20 = 0u;
  __int128 v21 = 0u;
  v18[0] = 1LL;
  *(_OWORD *)__int128 v19 = 0u;
  LODWORD(v25) = 0;
  v18[1] = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)v19, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)&__p[1], (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)v22, (const std::string *)(a1 + 8));
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  if (v5 == v6)
  {
    if (v7 >= 0) {
      uint64_t v8 = (unsigned __int8 *)(a1 + 40);
    }
    else {
      uint64_t v8 = *(unsigned __int8 **)(a1 + 40);
    }
    if ((v4 & 0x80) != 0)
    {
      BOOL v16 = memcmp(*(const void **)a2, v8, *((void *)a2 + 1)) == 0;
    }

    else if (a2[23])
    {
      uint64_t v9 = v4 - 1;
      do
      {
        int v11 = *a2++;
        int v10 = v11;
        int v13 = *v8++;
        int v12 = v13;
        BOOL v15 = v9-- != 0;
        BOOL v16 = v10 == v12;
      }

      while (v16 && v15);
    }

    else
    {
      BOOL v16 = 1;
    }
  }

  else
  {
    BOOL v16 = 0;
  }

  BYTE4(v25) = v16;
  HIDWORD(v25) = *(_DWORD *)(a1 + 168);
  uint64_t v17 = sub_1004DD868();
  sub_1004E0474(v17, (unsigned __int8 *)v18);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(v19[0]);
  }
}

void sub_10091CC74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10091CC88(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a2 && [a2 UTF8String]) {
    std::string::assign(&__str, (const std::string::value_type *)[a2 UTF8String]);
  }
  *(_BYTE *)a1 = 1;
  *(CFAbsoluteTime *)(a1 + _Block_object_dispose(va, 8) = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)(a1 + 16), &__str);
  memset(&v31, 0, sizeof(v31));
  for (uint64_t i = *(void *)(a4 + 8); i != a4; uint64_t i = *(void *)(i + 8))
  {
    else {
      size_t v9 = *(void *)(i + 32);
    }
    sub_1000392EC((uint64_t)__p, v9 + 2);
    if ((v30 & 0x80u) == 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    if (v9)
    {
      else {
        int v11 = *(const void **)(i + 24);
      }
      memmove(v10, v11, v9);
    }

    strcpy((char *)v10 + v9, ", ");
    if ((v30 & 0x80u) == 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      std::string::size_type v13 = v30;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v31, (const std::string::value_type *)v12, v13);
  }

  std::string::operator=((std::string *)(a1 + 40), &v31);
  *(double *)(a1 + 8_Block_object_dispose(va, 8) = sub_101171D4C();
  unint64_t v14 = *(void *)(a4 + 16);
  if (v14 >= 0xFF) {
    LOBYTE(v14) = -1;
  }
  *(_BYTE *)(a1 + 80) = v14;
  unsigned __int8 size = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v16 = __str.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = a3[23];
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0LL) {
    uint64_t v17 = *((void *)a3 + 1);
  }
  if (v16 == v17)
  {
    if (v18 >= 0) {
      __int128 v19 = a3;
    }
    else {
      __int128 v19 = *(unsigned __int8 **)a3;
    }
    if ((char)__str.__r_.__value_.__s.__size_ < 0)
    {
      BOOL v28 = memcmp(__str.__r_.__value_.__l.__data_, v19, __str.__r_.__value_.__l.__size_) == 0;
    }

    else if (__str.__r_.__value_.__s.__size_)
    {
      uint64_t v20 = __str.__r_.__value_.__s.__size_ - 1LL;
      p_str = &__str;
      do
      {
        int v23 = p_str->__r_.__value_.__s.__data_[0];
        p_str = (std::string *)((char *)p_str + 1);
        int v22 = v23;
        int v25 = *v19++;
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v28 = v22 == v24;
      }

      while (v28 && v27);
    }

    else
    {
      BOOL v28 = 1;
    }
  }

  else
  {
    BOOL v28 = 0;
  }

  *(_BYTE *)(a1 + 81) = v28;
  if (((char)v31.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if ((size & 0x80) == 0) {
      return;
    }
LABEL_53:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }

  operator delete(v31.__r_.__value_.__l.__data_);
  if ((__str.__r_.__value_.__s.__size_ & 0x80) != 0) {
    goto LABEL_53;
  }
}

void sub_10091CEC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10091CF10(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 72) - *(void *)(a2 + 64) + *(unsigned int *)(result + 64);
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  *(_DWORD *)(result + 64) = v4;
  if (*(_DWORD *)(a2 + 40))
  {
    __n128 result = sub_10091D110(*(void *)(result + 96), *(void *)(result + 104), a2);
    if (result == *(void *)(v3 + 104))
    {
      unint64_t v5 = result;
      uint64_t v6 = (uint64_t *)(v3 + 96);
      if (v5 >= *(void *)(v3 + 112))
      {
        __n128 result = sub_10091D288(v6, a2);
      }

      else
      {
        sub_10091D208((uint64_t)v6, a2);
        __n128 result = v5 + 40;
      }

      *(void *)(v3 + 104) = result;
    }
  }

  int v7 = *(_DWORD *)(a2 + 40);
  if (v7 != *(_DWORD *)(v3 + 120))
  {
    ++*(_DWORD *)(v3 + 84);
    *(_DWORD *)(v3 + 120) = v7;
  }

  return result;
}

uint64_t sub_10091CFD4(uint64_t a1)
{
  double v2 = *(double *)(a1 + 88);
  *(double *)(a1 + 72) = sub_101171D4C() - v2;
  uint64_t v3 = sub_1004DD868();
  return sub_1004E07E8(v3, (unsigned __int8 *)a1);
}

void sub_10091D010(void *a1, int a2)
{
  uint64_t v11 = 0LL;
  *(_OWORD *)__int128 __p = 0u;
  __int128 v10 = 0u;
  uint64_t v6 = 0LL;
  *(_OWORD *)uint64_t v8 = 0u;
  CFAbsoluteTime Current = -1.0;
  sub_1010DDBC0(&__str, "unknown-client-bundleID");
  if (a1 && [a1 UTF8String]) {
    std::string::assign(&__str, (const std::string::value_type *)[a1 UTF8String]);
  }
  LOBYTE(v6) = 1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)v8, &__str);
  LODWORD(v11) = a2;
  uint64_t v4 = sub_1004DD868();
  sub_1004E0C0C(v4, (unsigned __int8 *)&v6);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_10091D0E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_10091D110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2 && a1 != a3)
  {
    uint64_t v6 = a1 + 40;
    while (1)
    {
      if (*(_DWORD *)(v6 - 4) == *(_DWORD *)(a3 + 36))
      {
        uint64_t v3 = v6 - 40;
        if ((sub_10091D194(v6 - 40, a3) & 1) != 0) {
          break;
        }
      }

      uint64_t v7 = v6 + 40;
      if (v6 != a2)
      {
        BOOL v8 = v6 == a3;
        v6 += 40LL;
        if (!v8) {
          continue;
        }
      }

      return v7 - 40;
    }
  }

  return v3;
}

uint64_t sub_10091D194(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 36);
  if ((v4 & 1) != 0)
  {
    uint64_t result = sub_100E9E3E8((char *)(a1 + 8), (char *)(a2 + 8));
    if (!(_DWORD)result) {
      return result;
    }
    int v4 = *(_DWORD *)(a1 + 36);
  }

  if ((v4 & 4) != 0) {
    return *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34);
  }
  return 1LL;
}

_BYTE *sub_10091D208(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 8);
  void *v4 = &off_10182CE18;
  uint64_t result = v4 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 8);
    v4[3] = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t result = v6;
  }

  void v4[4] = *(void *)(a2 + 32);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4 + 5;
  return result;
}

void sub_10091D280(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10091D288(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333LL) {
    unint64_t v9 = 0x666666666666666LL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int128 v19 = a1 + 2;
  if (v9) {
    __int128 v10 = sub_100100EF8(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  uint64_t v11 = &v10[5 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v17 = v11;
  int v18 = (char *)&v10[5 * v9];
  void *v11 = &off_10182CE18;
  int v12 = v11 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C(v12, *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v11 = v17;
  }

  else
  {
    __int128 v13 = *(_OWORD *)(a2 + 8);
    v11[3] = *(void *)(a2 + 24);
    *(_OWORD *)int v12 = v13;
  }

  v10[5 * v4 + 4] = *(void *)(a2 + 32);
  uint64_t v17 = v11 + 5;
  sub_10091D3D0(a1, v16);
  uint64_t v14 = a1[1];
  sub_10091D524((uint64_t)v16);
  return v14;
}

void sub_10091D3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10091D3D0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10091D444((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10091D444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      *(void *)(a7 + v11 - 40) = &off_10182CE18;
      int v12 = (_BYTE *)(a7 + v11 - 32);
      __int128 v13 = (void **)(a3 + v11 - 32);
      if (*(char *)(a3 + v11 - 9) < 0)
      {
        sub_1010DD48C(v12, *v13, *(void *)(a3 + v11 - 24));
      }

      else
      {
        __int128 v14 = *(_OWORD *)v13;
        *(void *)(a7 + v11 - 16) = *(void *)(a3 + v11 - 16);
        *(_OWORD *)int v12 = v14;
      }

      *(void *)(a7 + v11 - _Block_object_dispose(va, 8) = *(void *)(a3 + v11 - 8);
      v11 -= 40LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_10091D4FC(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 40LL)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10091D524(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10091DB58(_Unwind_Exception *a1)
{
}

void sub_10091E3D0(_Unwind_Exception *a1)
{
}

void sub_10091E4D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10091E4E8(uint64_t a1, uint64_t a2)
{
}

void sub_10091E4F8(uint64_t a1)
{
}

void sub_10091E504(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  id v7 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  id v11 = [a2 description];
  int v12 = *(void **)(a1 + 32);
  [a2 center];
  objc_msgSend(v12, "valueOutForValueIn:");
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 4sub_1008FF618(v1, 0) =  [v7 stringByAppendingFormat:@"ValueInName,%@,ValueOutName,%@,Bin,%02lu,%@,RetrievedValueOut,%f\n", v9, v10, a3, v11, v13];
  objc_autoreleasePoolPop(v6);
}

void sub_10091EAA4(_Unwind_Exception *a1)
{
}

id sub_10091EB60(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc(&OBJC_CLASS___CMPedometerBin);
  [a2 kValue];
  double v6 = v5;
  [a2 begin];
  double v8 = v7;
  [a2 end];
  return objc_msgSend( v3,  "addObject:",  objc_msgSend(v4, "initWithValueOut:begin:end:state:", objc_msgSend(a2, "state"), v6, v8, v9));
}

id sub_10091EC88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc(&OBJC_CLASS___CMStrideCalibrationData);
  [a2 begin];
  double v6 = v5;
  [a2 end];
  double v8 = v7;
  id v9 = [a2 state];
  [a2 valueOut];
  return objc_msgSend( v3,  "addObject:",  objc_msgSend(v4, "initWithBegin:end:state:kValue:", v9, v6, v8, v10));
}

void sub_10091ED88(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_10091EDB4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  id v4 = a2;
  do
    sub_10091EE14(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *sub_10091EE14(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  double v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    double v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1000071BC((uint64_t)v6, v12);
      double v8 = *(void **)v4;
      double v5 = *(void **)(v4 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    __int128 v14 = &v13[8 * v9];
    BOOL v15 = &v13[8 * v12];
    *(void *)__int128 v14 = *a2;
    double v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    void *v5 = *a2;
    double v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose(va, 8) = v7;
  return a1;
}

void sub_10091F544( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100920584( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1011F6920((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100920610(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 127) < 0)
  {
    sub_1010DD48C((_BYTE *)a2, *(void **)(a1 + 104), *(void *)(a1 + 112));
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
    *(void *)(a2 + 16) = *(void *)(a1 + 120);
  }

NSURL *sub_100920664(uint64_t a1)
{
  uint64_t v1 = +[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", a1, 1LL);
  uint64_t v7 = 0LL;
  -[NSURL setResourceValue:forKey:error:]( v1,  "setResourceValue:forKey:error:",  NSURLFileProtectionCompleteUntilFirstUserAuthentication,  NSFileProtectionKey,  &v7);
  if (v7)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860E58);
    }
    uint64_t v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor #Warning unable to set file protection, path:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860E58);
      }
    }

    uint64_t v3 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      *(_DWORD *)__int128 buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v1;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor #Warning unable to set file protection",  "{msg%{public}.0s:#monitor #Warning unable to set file protection, path:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

  -[NSURL setResourceValue:forKey:error:]( v1,  "setResourceValue:forKey:error:",  &__kCFBooleanTrue,  NSURLIsExcludedFromBackupKey,  &v7);
  if (v7)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860E58);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor #Warning unable to exclude path from backup, path:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860E58);
      }
    }

    double v5 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      *(_DWORD *)__int128 buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v1;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor #Warning unable to exclude path from backup",  "{msg%{public}.0s:#monitor #Warning unable to exclude path from backup, path:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

  return v1;
}

NSString *sub_10092097C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(void *)(a1 + 56)) {
      goto LABEL_7;
    }
    uint64_t v2 = (void *)*v2;
    return -[NSURL lastPathComponent]( +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2)),  "lastPathComponent");
  }

  if (*(_BYTE *)(a1 + 71)) {
    return -[NSURL lastPathComponent]( +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2)),  "lastPathComponent");
  }
LABEL_7:
  sub_100920610(a1, (uint64_t)__p);
  if (v13 < 0)
  {
    uint64_t v6 = __p[1];
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_9;
    }
LABEL_15:
    sub_100FE370C(a1);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 127);
    if ((v7 & 0x80u) != 0LL) {
      uint64_t v7 = *(void *)(a1 + 112);
    }
    if (!v7) {
      return 0LL;
    }
    sub_100FE370C(a1);
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v9 = a1 + 104;
    uint64_t v8 = v10;
    else {
      uint64_t v11 = v8;
    }
    return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v11);
  }

  if (!v13) {
    goto LABEL_15;
  }
LABEL_9:
  sub_100920610(a1, (uint64_t)__p);
  if (v13 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  double v5 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_100920AC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100921278( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, id a37)
{
}

id sub_100921488(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend( objc_msgSend(a3, "daemonCondition"),  "setCallbackHandler:",  objc_msgSend(*(id *)(a1 + 32), "callbackHandler"));
}

void sub_1009214DC(id a1, NSString *a2, CLDaemonMonitoringRecord *a3, BOOL *a4)
{
}

void sub_10092274C(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100922778(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1009227A4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1009227CC(float a1, uint64_t a2, uint64_t a3)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + _Block_object_dispose(va, 8) = 2082;
}

void sub_1009227E0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 1_Block_object_dispose(va, 8) = v2;
  *(void *)(a1 + 20) = a2;
  *(_WORD *)(a1 + 2_Block_object_dispose(va, 8) = v2;
}

char *sub_1009227F4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 __dst = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(v12, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)__int16 v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(v10, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }

  sub_1010DDBC0(__p, "");
  sub_100922C1C( a1,  &__dst,  (__int128 *)v12,  (__int128 *)v10,  -1,  (__int128 *)__p,  0LL,  0,  1.79769313e308,  1.79769313e308,  -1.0,  -1.0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__dst);
  }
  return a1;
}

void sub_100922930( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100922994(char *a1)
{
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  return a1;
}

void sub_100922A30( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100922A7C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 __dst = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(v12, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)__int16 v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(v10, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }

  sub_1010DDBC0(__p, "");
  sub_100922C1C( a1,  &__dst,  (__int128 *)v12,  (__int128 *)v10,  -1,  (__int128 *)__p,  0LL,  0,  1.79769313e308,  1.79769313e308,  -1.0,  -1.0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__dst);
  }
  return a1;
}

void sub_100922BB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100922C1C( char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, int a5, __int128 *a6, void *a7, char a8, double a9, double a10, double a11, double a12)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v23 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v23;
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v24 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v24;
  }

  if (*((char *)a4 + 23) < 0)
  {
    sub_1010DD48C(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v25 = *a4;
    *((void *)__dst + _Block_object_dispose(va, 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v25;
  }

  *((double *)__dst + 9) = a9;
  *((double *)__dst + 10) = a10;
  *((double *)__dst + 11) = a11;
  *((double *)__dst + 12) = a11;
  *((double *)__dst + 13) = a12;
  *((void *)__dst + 14) = 0xBFF0000000000000LL;
  *((CFAbsoluteTime *)__dst + 15) = CFAbsoluteTimeGetCurrent();
  *((void *)__dst + 16) = 0xBFF0000000000000LL;
  *((void *)__dst + 17) = 0LL;
  *((_DWORD *)__dst + 36) = 0;
  *((void *)__dst + 20) = 0LL;
  *((void *)__dst + 21) = 0LL;
  *((void *)__dst + 19) = 0xBFF0000000000000LL;
  __dst[176] = a8;
  *((_DWORD *)__dst + 45) = 0;
  *((_DWORD *)__dst + 46) = a5;
  __dst[188] = 0;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1010DD48C(__dst + 192, *(void **)a6, *((void *)a6 + 1));
  }

  else
  {
    __int128 v26 = *a6;
    *((void *)__dst + 26) = *((void *)a6 + 2);
    *((_OWORD *)__dst + 12) = v26;
  }

  *((void *)__dst + 27) = 0LL;
  id v27 = a7;
  *((void *)__dst + 2_Block_object_dispose(va, 8) = 0LL;
  *((void *)__dst + 27) = v27;
  *((void *)__dst + 29) = 0LL;
  *((void *)__dst + 30) = 0LL;
  double v28 = *((double *)__dst + 12);
  if (v28 >= 0.0 && v28 < sub_100922EBC((uint64_t)__dst))
  {
    int v29 = __dst[23];
    if (v29 < 0)
    {
      if (*((void *)__dst + 1) != 21LL)
      {
LABEL_27:
        *((double *)__dst + 12) = sub_100922EBC((uint64_t)__dst);
        goto LABEL_28;
      }

      unsigned __int8 v30 = *(uint64_t **)__dst;
    }

    else
    {
      unsigned __int8 v30 = (uint64_t *)__dst;
      if (v29 != 21) {
        goto LABEL_27;
      }
    }

    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = *(uint64_t *)((char *)v30 + 13);
    if (v31 != 0x6C7070612E6D6F63LL || v32 != 0x2E65726F74732E65LL || v33 != 0x796C6C6F4A2E6572LL) {
      goto LABEL_27;
    }
  }

void sub_100922E34(_Unwind_Exception *exception_object)
{
}

double sub_100922EBC(uint64_t a1)
{
  if (*(_BYTE *)sub_100D0ABB4() || *((_BYTE *)sub_100D0ABB4() + 1) && *(_BYTE *)(a1 + 176))
  {
    sub_1004F2598();
    char v2 = sub_1004F64FC();
    uint64_t v3 = (char *)sub_100D0ABB4();
    char v4 = (uint64_t *)(v3 + 24);
    if ((v2 & 8) != 0) {
      char v4 = (uint64_t *)(v3 + 8);
    }
  }

  else
  {
    char v4 = &qword_10198DAD0;
  }

  return *(double *)v4;
}

uint64_t sub_100922F28(uint64_t a1)
{
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v3 = *(const std::string::value_type **)a1;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v4 = *(void *)(a1 + 8);
  }
  double v5 = std::string::append(&v17, v3, v4);
  __int128 v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__l.__cap_ = v5->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0LL;
  v5->__r_.__value_.__l.__cap_ = 0LL;
  v5->__r_.__value_.__r.__words[0] = 0LL;
  std::string::push_back(&v18, 47);
  std::string v19 = v18;
  memset(&v18, 0, sizeof(v18));
  char v9 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v8 = a1 + 24;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)v8;
  }
  else {
    uint64_t v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = std::string::append(&v19, v11, v12);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type cap = v13->__r_.__value_.__l.__cap_;
  __int128 v20 = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v15 = sub_10010E2F8((uint64_t)&v19, (char *)&v20);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v20);
  }
}

void sub_100923074( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

char *sub_1009230D4( char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, char a9)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(&__dsta, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    __int128 __dsta = *(_OWORD *)a2;
    uint64_t v23 = *(void *)(a2 + 16);
  }

  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(v20, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)__int128 v20 = *(_OWORD *)a3;
    uint64_t v21 = *(void *)(a3 + 16);
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(v18, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string v18 = *(_OWORD *)a4;
    uint64_t v19 = *(void *)(a4 + 16);
  }

  if (*(char *)(a7 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a7, *(void *)(a7 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a7;
    uint64_t v17 = *(void *)(a7 + 16);
  }

  sub_100922C1C( __dst,  &__dsta,  (__int128 *)v20,  (__int128 *)v18,  -1,  (__int128 *)__p,  a8,  a9,  1.79769313e308,  1.79769313e308,  -1.0,  -1.0);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__dsta);
  }
  return __dst;
}

void sub_100923258( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

double sub_1009232CC(uint64_t a1)
{
  double v2 = fmax(sub_100922EBC(a1), *(double *)(a1 + 88));
  return v2;
}

uint64_t sub_100923324(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v2 = (const void **)(a1 + 48);
  signed __int8 v3 = a1[71];
  if (v3 >= 0) {
    size_t v4 = a1[71];
  }
  else {
    size_t v4 = *((void *)a1 + 7);
  }
  int v5 = (char)a2[71];
  if (v5 >= 0) {
    size_t v6 = a2[71];
  }
  else {
    size_t v6 = *((void *)a2 + 7);
  }
  if (v5 >= 0) {
    uint64_t v7 = a2 + 48;
  }
  else {
    uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 6);
  }
  if (v4 != v6) {
    goto LABEL_18;
  }
  if ((a1[71] & 0x80) != 0)
  {
    if (!memcmp(*v2, v7, *((void *)a1 + 7))) {
      goto LABEL_25;
    }
LABEL_18:
    if (v3 >= 0) {
      uint64_t v13 = v2;
    }
    else {
      uint64_t v13 = *v2;
    }
    if (v6 >= v4) {
      size_t v14 = v4;
    }
    else {
      size_t v14 = v6;
    }
    int v15 = memcmp(v13, v7, v14);
    BOOL v16 = v4 >= v6;
    goto LABEL_72;
  }

  if (a1[71])
  {
    int v10 = v7;
    uint64_t v11 = a1 + 48;
    uint64_t v12 = a1[71];
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        goto LABEL_25;
      }
    }

    goto LABEL_18;
  }

BOOL sub_100923574(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 232) - v2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 224);
    uint64_t v5 = *(void *)(a2 + 232) - v4;
    if (v5)
    {
      unint64_t v6 = v3 >> 4;
      if (v6 == v5 >> 4 && *(_DWORD *)(a1 + 180) == *(_DWORD *)(a2 + 180))
      {
        if (v6 <= 1) {
          unint64_t v6 = 1LL;
        }
        uint64_t v7 = (double *)(v2 + 8);
        for (uint64_t i = (double *)(v4 + 8); *(v7 - 1) == *(i - 1) && *v7 == *i; i += 2)
        {
          v7 += 2;
          if (!--v6) {
            return 1LL;
          }
        }
      }
    }

    return 0LL;
  }

  if (*(void *)(a2 + 232) != *(void *)(a2 + 224)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || *(double *)(a1 + 96) != *(double *)(a2 + 96)
    || *(void *)(a1 + 160) != *(void *)(a2 + 160))
  {
    return 0LL;
  }

  return *(_DWORD *)(a1 + 180) == *(_DWORD *)(a2 + 180);
}

uint64_t sub_100923668@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v56, (uint64_t)"[", 1LL);
  int v5 = *(char *)(a1 + 71);
  if (v5 >= 0) {
    uint64_t v6 = a1 + 48;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 56);
  }
  uint64_t v8 = sub_10000CF44(v4, v6, v7);
  char v9 = sub_10000CF44(v8, (uint64_t)"]/", 2LL);
  int v10 = *(char *)(a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  uint64_t v13 = sub_10000CF44(v9, v11, v12);
  size_t v14 = sub_10000CF44(v13, (uint64_t)"/", 1LL);
  int v15 = *(char *)(a1 + 47);
  if (v15 >= 0) {
    uint64_t v16 = a1 + 24;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 24);
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 32);
  }
  sub_10000CF44(v14, v16, v17);
  if (*(void *)(a1 + 232) == *(void *)(a1 + 224))
  {
    if (*(double *)(a1 + 72) == 1.79769313e308 && *(double *)(a1 + 80) == 1.79769313e308)
    {
      size_t v18 = sub_10000CF44(&v56, (uint64_t)", latitude, ", 12LL);
      sub_10000CF44(v18, (uint64_t)"DBL_MAX", 7LL);
      unsigned __int8 v19 = sub_10000CF44(&v56, (uint64_t)", longitude, ", 13LL);
      sub_10000CF44(v19, (uint64_t)"DBL_MAX", 7LL);
    }

    else
    {
      size_t v20 = sub_10000CF44(&v56, (uint64_t)", latitude, ", 12LL);
      uint64_t v21 = *v20;
      *(uint64_t *)((char *)v20 + *(void *)(*v20 - 24) + 24) = 13LL;
      *(uint64_t *)((char *)v20 + *(void *)(v21 - 24) + 16) = 8LL;
      *(_DWORD *)((char *)v20 + *(void *)(v21 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v20 + *(void *)(v21 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<(*(double *)(a1 + 72));
      int v22 = sub_10000CF44(&v56, (uint64_t)", longitude, ", 13LL);
      uint64_t v23 = *v22;
      *(uint64_t *)((char *)v22 + *(void *)(*v22 - 24) + 24) = 13LL;
      *(uint64_t *)((char *)v22 + *(void *)(v23 - 24) + 16) = 8LL;
      *(_DWORD *)((char *)v22 + *(void *)(v23 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v22 + *(void *)(v23 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<(*(double *)(a1 + 80));
    }
  }

  else
  {
    sub_10000CF44(&v56, (uint64_t)", latitude, ", 12LL);
    std::ostream::operator<<(-1.0);
    sub_10000CF44(&v56, (uint64_t)", longitude, ", 13LL);
    std::ostream::operator<<(-1.0);
  }

  uint64_t v24 = sub_10000CF44(&v56, (uint64_t)", refFrame, ", 12LL);
  std::ostream::operator<<(v24, *(unsigned int *)(a1 + 180));
  __int128 v25 = sub_10000CF44(&v56, (uint64_t)", distance, ", 12LL);
  uint64_t v26 = *v25;
  *(uint64_t *)((char *)v25 + *(void *)(*v25 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v25 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 88));
  id v27 = sub_10000CF44(&v56, (uint64_t)", eFistance, ", 13LL);
  uint64_t v28 = *v27;
  *(uint64_t *)((char *)v27 + *(void *)(*v27 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v27 + *(void *)(v28 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v27 + *(void *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 96));
  size_t v29 = sub_10000CF44(&v56, (uint64_t)", lDown, ", 9LL);
  uint64_t v30 = *v29;
  *(uint64_t *)((char *)v29 + *(void *)(*v29 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v29 + *(void *)(v30 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v29 + *(void *)(v30 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 112));
  uint64_t v31 = sub_10000CF44(&v56, (uint64_t)", time, ", 8LL);
  uint64_t v32 = *v31;
  *(uint64_t *)((char *)v31 + *(void *)(*v31 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v31 + *(void *)(v32 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v31 + *(void *)(v32 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 120));
  uint64_t v33 = sub_10000CF44(&v56, (uint64_t)", ctime, ", 9LL);
  uint64_t v34 = *v33;
  *(uint64_t *)((char *)v33 + *(void *)(*v33 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v33 + *(void *)(v34 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v33 + *(void *)(v34 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 128));
  size_t v35 = sub_10000CF44(&v56, (uint64_t)", flags, ", 9LL);
  if ((*(void *)(a1 + 160) & 1LL) != 0) {
    char v36 = 69;
  }
  else {
    char v36 = 45;
  }
  char v59 = v36;
  sub_10000CF44(v35, (uint64_t)&v59, 1LL);
  if ((*(void *)(a1 + 160) & 2LL) != 0) {
    char v37 = 88;
  }
  else {
    char v37 = 45;
  }
  char v59 = v37;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  if ((~*(_DWORD *)(a1 + 160) & 5LL) != 0) {
    char v38 = 45;
  }
  else {
    char v38 = 67;
  }
  char v59 = v38;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  int v39 = _os_feature_enabled_impl("CoreLocation", "cl_fence_handoff");
  char v40 = 45;
  if (v39)
  {
    if ((*(void *)(a1 + 160) & 0x40LL) != 0) {
      char v40 = 72;
    }
    else {
      char v40 = 45;
    }
  }

  char v59 = v40;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  if ((*(void *)(a1 + 160) & 0x10LL) != 0) {
    char v41 = 77;
  }
  else {
    char v41 = 45;
  }
  char v59 = v41;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224))
  {
    uint64_t v42 = 8LL;
    goto LABEL_46;
  }

  if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) == 0)
  {
    uint64_t v42 = 64LL;
LABEL_46:
    if ((*(void *)(a1 + 160) & v42) != 0) {
      char v43 = 78;
    }
    else {
      char v43 = 45;
    }
    goto LABEL_49;
  }

  char v43 = 45;
LABEL_49:
  char v59 = v43;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  if ((*(void *)(a1 + 160) & 0x20LL) != 0) {
    char v44 = 76;
  }
  else {
    char v44 = 45;
  }
  char v59 = v44;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  if ((*(void *)(a1 + 160) & 0x80LL) != 0) {
    char v45 = 83;
  }
  else {
    char v45 = 45;
  }
  char v59 = v45;
  sub_10000CF44(&v56, (uint64_t)&v59, 1LL);
  __int128 v46 = sub_10000CF44(&v56, (uint64_t)", key, ", 7LL);
  std::ostream::operator<<(v46, *(unsigned int *)(a1 + 184));
  __int128 v47 = sub_10000CF44(&v56, (uint64_t)", throttled, ", 13LL);
  if (*(_BYTE *)(a1 + 188)) {
    char v48 = 89;
  }
  else {
    char v48 = 78;
  }
  char v59 = v48;
  sub_10000CF44(v47, (uint64_t)&v59, 1LL);
  __int128 v49 = sub_10000CF44(&v56, (uint64_t)", polygon, ", 11LL);
  if (*(void *)(a1 + 232) == *(void *)(a1 + 224)) {
    uint64_t v50 = 0LL;
  }
  else {
    uint64_t v50 = (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 4;
  }
  std::ostream::operator<<(v49, v50);
  __int128 v51 = sub_10000CF44(&v56, (uint64_t)", envType, ", 11LL);
  std::ostream::operator<<(v51, *(unsigned int *)(a1 + 168));
  __int128 v52 = sub_10000CF44(&v56, (uint64_t)", locType, ", 11LL);
  std::ostream::operator<<(v52, *(unsigned int *)(a1 + 172));
  std::stringbuf::str(a2, &v57);
  *(void *)((char *)v55
  uint64_t v56 = v53;
  std::streambuf::~streambuf(&v57);
  return std::ios::~ios(&v58);
}

void sub_100923D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100923D38@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, std::stringbuf::string_type *a4@<X8>)
{
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224))
  {
    uint64_t v8 = sub_10000CF44(&v26, (uint64_t)"{latitude: ", 13LL);
    uint64_t v9 = *v8;
    *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 8LL;
    *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
    int v10 = (void *)std::ostream::operator<<(*(double *)(*(void *)(a1 + 224) + 16LL * a2));
    uint64_t v11 = sub_10000CF44(v10, (uint64_t)", longitude: ", 15LL);
    uint64_t v12 = *v11;
    *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 16) = 8LL;
    *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
    uint64_t v13 = (void *)std::ostream::operator<<(*(double *)(*(void *)(a1 + 224) + 16LL * a2 + 8));
    sub_10000CF44(v13, (uint64_t)"}", 1LL);
    if (a3 <= a2) {
      int v14 = a2;
    }
    else {
      int v14 = a3;
    }
    uint64_t v15 = v14 - (uint64_t)a2 + 1;
    for (uint64_t i = 16LL * a2; --v15; i += 16LL)
    {
      uint64_t v17 = sub_10000CF44(&v26, (uint64_t)", {latitude:", 14LL);
      uint64_t v18 = *v17;
      *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + 16) = 8LL;
      *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
      unsigned __int8 v19 = (void *)std::ostream::operator<<(*(double *)(*(void *)(a1 + 224) + i + 16));
      size_t v20 = sub_10000CF44(v19, (uint64_t)",longitude:", 13LL);
      uint64_t v21 = *v20;
      *(uint64_t *)((char *)v20 + *(void *)(*v20 - 24) + 16) = 8LL;
      *(_DWORD *)((char *)v20 + *(void *)(v21 - 24) + _Block_object_dispose(va, 8) = *(_DWORD *)((_BYTE *)v20 + *(void *)(v21 - 24) + 8) & 0xFFFFFEFB | 4;
      int v22 = (void *)std::ostream::operator<<(*(double *)(*(void *)(a1 + 224) + i + 24));
      sub_10000CF44(v22, (uint64_t)"}", 1LL);
    }
  }

  sub_10000CF44(&v26, (uint64_t)" ] }", 4LL);
  std::stringbuf::str(a4, &v27);
  *(void *)((char *)v25
  uint64_t v26 = v23;
  std::streambuf::~streambuf(&v27);
  return std::ios::~ios(&v28);
}

void sub_100923FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100923FF0(uint64_t a1)
{
  signed int v1 = llround(*(double *)(a1 + 72) * 10000.0);
  signed int v2 = llround(*(double *)(a1 + 80) * 10000.0);
  return 1540483477
}

unint64_t sub_100924068(uint64_t a1)
{
  signed int v2 = (double *)(a1 + 72);
  uint64_t v3 = (double *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 224);
  if (*(void *)(a1 + 232) != v4)
  {
    signed int v2 = *(double **)(a1 + 224);
    uint64_t v3 = (double *)(v4 + 8);
  }

  double v5 = *v3;
  double v6 = *v2;
  sub_10051050C((const void **)(a1 + 48), 47, (uint64_t)&v24);
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a1;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a1 + 8);
  }
  int v10 = std::string::append(&v24, v8, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  std::string::push_back(&v25, 47);
  std::string v26 = v25;
  memset(&v25, 0, sizeof(v25));
  int v14 = *(const std::string::value_type **)(a1 + 24);
  uint64_t v13 = a1 + 24;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v13 + 8);
  }
  uint64_t v18 = std::string::append(&v26, v16, v17);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type cap = v18->__r_.__value_.__l.__cap_;
  __int128 v27 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v20 = sub_10010E2F8((uint64_t)&v26, (char *)&v27);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v27);
  }
  unint64_t v21 = llround(v6 * 1000000.0);
  unint64_t v22 = llround(v5 * 1000000.0);
  return 0xC6A4A7935BD1E995LL
       * ((0xC6A4A7935BD1E995LL
         * ((0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v20) ^ ((0xC6A4A7935BD1E995LL * v20) >> 47))) ^ (0x35A98F4D286A90B9LL * ((0xC6A4A7935BD1E995LL * v22) ^ ((0xC6A4A7935BD1E995LL * v22) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995LL * ((0xC6A4A7935BD1E995LL * v21) ^ ((0xC6A4A7935BD1E995LL * v21) >> 47))))
       + 3864292196u;
}

void sub_100924224( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

uint64_t sub_100924284( uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18)
{
  *(_DWORD *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(double *)(result + _Block_object_dispose(va, 8) = a9;
  *(double *)(result + 16) = a10;
  *(double *)(result + 24) = a11;
  *(double *)(result + 32) = a12;
  *(double *)(result + 40) = a13;
  *(double *)(result + 4_Block_object_dispose(va, 8) = a14;
  *(double *)(result + 56) = a15;
  *(double *)(result + 64) = a16;
  *(void *)(result + 72) = a4;
  *(_DWORD *)(result + 80) = a5;
  *(void *)(result + 8_Block_object_dispose(va, 8) = a6;
  *(_DWORD *)(result + 96) = a7;
  *(void *)(result + 104) = a17;
  *(void *)(result + 112) = a18;
  *(_DWORD *)(result + 120) = a8;
  *(void *)(result + 132) = 0LL;
  *(void *)(result + 124) = 0LL;
  return result;
}

uint64_t sub_1009242C0( uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(double *)(result + _Block_object_dispose(va, 8) = a9;
  *(double *)(result + 16) = a10;
  *(double *)(result + 24) = a11;
  *(double *)(result + 32) = a12;
  *(double *)(result + 40) = a13;
  *(double *)(result + 4_Block_object_dispose(va, 8) = a14;
  *(double *)(result + 56) = a15;
  *(double *)(result + 64) = a16;
  *(void *)(result + 72) = a4;
  *(_DWORD *)(result + 80) = a5;
  *(void *)(result + 8_Block_object_dispose(va, 8) = a6;
  *(_DWORD *)(result + 96) = a7;
  *(void *)(result + 104) = a17;
  *(void *)(result + 112) = a18;
  *(_DWORD *)(result + 120) = a8;
  *(void *)(result + 124) = a19;
  *(void *)(result + 132) = a20;
  return result;
}

uint64_t sub_100924300(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

double sub_100924308(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

double sub_100924310(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double sub_100924318(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

uint64_t sub_100924320(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_100924328(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

double sub_100924330(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

double sub_100924338(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

double sub_100924340@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  int v5 = 0;
  uint64_t v3 = sub_1008ACE9C(a2, &v5);
  double result = *a1;
  *(double *)(v3 + 4) = *a1;
  *(void *)(v3 + 16) = -1LL;
  return result;
}

BOOL sub_100924384(uint64_t *a1)
{
  int v9 = 0;
  sub_1008ACE9C((uint64_t)&v4, &v9);
  uint64_t v5 = *a1;
  uint64_t v6 = -1LL;
  BOOL v2 = sub_1008AD1E0(&v4);
  if (v8 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_1009243E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100924404(uint64_t a1)
{
  return *(void *)(a1 + 124);
}

_DWORD *sub_100924414(_DWORD *result, int a2, int a3, int a4, int a5)
{
  _BYTE *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t sub_100924420(uint64_t a1)
{
  uint64_t v1 = a1 + 648;
  if (!*(void *)(a1 + 648))
  {
    sub_1004EEF6C((uint64_t)sub_1009244A4, a1, *(void **)(a1 + 8), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 648);
    *(void *)(a1 + 64_Block_object_dispose(va, 8) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

void sub_1009244A4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018610E8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLPlaceInferenceSubscription::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018610E8);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      std::string::size_type v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLPlaceInferenceSubscription::onLocationNotification, event:%{public, location:esca pe_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_1009305D4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10092465C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10092467C(uint64_t a1)
{
  uint64_t v1 = a1 + 656;
  if (!*(void *)(a1 + 656))
  {
    sub_1005DCB1C((uint64_t)sub_1009244A4, a1, *(void **)(a1 + 8), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 656);
    *(void *)(a1 + 656) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

uint64_t sub_100924700(uint64_t a1)
{
  uint64_t v1 = a1 + 664;
  if (!*(void *)(a1 + 664))
  {
    sub_10034FF34((uint64_t)sub_100924784, a1, *(void **)(a1 + 8), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 664);
    *(void *)(a1 + 664) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

void sub_100924784(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018610E8);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLPlaceInferenceSubscription::onWifiServiceNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018610E8);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      std::string::size_type v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLPlaceInferenceSubscription::onWifiServiceNotification, event:%{public, location:e scape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100930844(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10092493C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100924A20(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100C6AAF0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_101860EA8;
  *(_DWORD *)(v6 + 41) = 0x10000;
  *(_BYTE *)(v6 + 45) = 0;
  *(void *)(v6 + 4_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(void *)(v6 + 56) = 0LL;
  *(void *)(a1 + 64) = objc_alloc_init(&OBJC_CLASS___CLPlaceInferenceSubscriptionAdapter);
  *(void *)(a1 + 80) = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  *(void *)(a1 + 160) = off_10182F180;
  *(void *)(a1 + 152) = v7;
  char v8 = operator new(0x20uLL);
  _OWORD v8[2] = 0LL;
  void *v8 = off_10182F1B8;
  v8[1] = 0LL;
  *((_DWORD *)v8 + 6) = 31337;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v8 + 3;
  *(void *)(a1 + 176) = v8;
  *(void *)(a1 + 192) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 216) = 0xBFF0000000000000LL;
  *(void *)(a1 + 224) = 0LL;
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 244) = 257;
  *(_BYTE *)(a1 + 24_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 256) = 0xBFF0000000000000LL;
  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 296) = 0;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 304) = _Q1;
  *(_OWORD *)(a1 + 320) = xmmword_101339620;
  *(_DWORD *)(a1 + 336) = -1;
  *(void *)(a1 + 344) = 0xBFF0000000000000LL;
  *(void *)(a1 + 352) = -1LL;
  *(void *)(a1 + 360) = 0xBFF0000000000000LL;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0xBFF0000000000000LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 424) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0xBFF0000000000000LL;
  *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 456) = xmmword_101339620;
  *(_DWORD *)(a1 + 472) = -1;
  *(void *)(a1 + 480) = 0xBFF0000000000000LL;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = -1LL;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 0;
  *(void *)(a1 + 536) = 0LL;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 544) = -1LL;
  *(void *)(a1 + 552) = -1082130432LL;
  *(void *)(a1 + 560) = 0xBF800000FFFFFFFFLL;
  *(void *)(a1 + 56_Block_object_dispose(va, 8) = 3212836864LL;
  *(_BYTE *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  *(void *)(a1 + 592) = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  *(void *)(a1 + 600) = objc_alloc_init(&OBJC_CLASS___NSDictionary);
  sub_100D2D9A4(a1 + 608);
  *(_DWORD *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0LL;
  *(_OWORD *)(a1 + 64_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 680) = &off_1018D6AA8;
  *(void *)(a1 + 68_Block_object_dispose(va, 8) = 0LL;
  id v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLRoutineMonitor");
  *(void *)(a1 + 56) = v14;
  objc_msgSend(v14, "registerDelegate:inSilo:", *(void *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "silo"));
  int v15 = *(void **)(a1 + 80);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  _OWORD v17[2] = sub_100924D48;
  v17[3] = &unk_10181D3D0;
  _DWORD v17[4] = a1;
  [v15 setHandler:v17];
  *(void *)(a1 + 68_Block_object_dispose(va, 8) =  objc_msgSend( objc_msgSend(*(id *)(a1 + 8), "vendor"),  "proxyForService:",  @"CLAnalyticsLogger");
  return a1;
}

void sub_100924CBC(_Unwind_Exception *a1)
{
}

uint64_t sub_100924D48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  BOOL v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "#dsa client '%{public}@' starts receiving CLPlaceInferenceSubscription updates",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v5 = *(void *)(v1 + 24);
    int v8 = 138543362;
    uint64_t v9 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "#dsa client '%{public}@' starts receiving CLPlaceInferenceSubscription updates",  &v8,  12);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLPlaceInferenceSubscription::CLPlaceInferenceSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAut horizationContext *, CLClientKeyPath *)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_100924F08(v1);
  return sub_100925678(v1);
}

void sub_100924F08(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 120) copy];
  id v3 = v2;
  if (*(void *)(a1 + 104) == 5LL && *(void *)(a1 + 136))
  {
    uint64_t v4 = [v2 count];
    id v3 = sub_10049CA7C(v3, *(void *)(a1 + 136));
    uint64_t v5 = [v3 count];
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
    -[NSDateFormatter setDateStyle:](v6, "setDateStyle:", 1LL);
    -[NSDateFormatter setTimeStyle:](v6, "setTimeStyle:", 4LL);
    -[NSDateFormatter setFormatterBehavior:](v6, "setFormatterBehavior:", 1040LL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v7 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      int v8 = -[NSDateFormatter stringFromDate:](v6, "stringFromDate:", *(void *)(a1 + 136));
      *(_DWORD *)__int128 buf = 134218498;
      *(void *)&uint8_t buf[4] = v4 - v5;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v8;
      __int16 v37 = 2048;
      char v38 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "#placeInfer filtered out %lu locations predating request date (%@), %lu locations remaining",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      uint64_t v19 = qword_101934978;
      unint64_t v20 = -[NSDateFormatter stringFromDate:](v6, "stringFromDate:", *(void *)(a1 + 136));
      int v30 = 134218498;
      id v31 = (id)(v4 - v5);
      __int16 v32 = 2112;
      uint64_t v33 = v20;
      __int16 v34 = 2048;
      size_t v35 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  1LL,  "#placeInfer filtered out %lu locations predating request date (%@), %lu locations remaining",  &v30,  32);
      unint64_t v22 = (char *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }
  }

  if (*(_BYTE *)(a1 + 44))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v9 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "#placeInfer client authorized for coarse locations only, sending fallback message",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_14;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    LOWORD(v30) = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer client authorized for coarse locations only, sending fallback message",  &v30,  v26);
    __int16 v18 = (char *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()",  "%s\n",  v17);
    if (v18 == buf) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }

  if (!*(void *)(a1 + 56))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    __int16 v16 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "#placeInfer no valid RoutineMonitor configured, sending fallback message",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_14;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    LOWORD(v30) = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer no valid RoutineMonitor configured, sending fallback message",  &v30,  v26);
    __int16 v18 = (char *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()",  "%s\n",  v25);
    if (v18 == buf) {
      goto LABEL_14;
    }
LABEL_38:
    free(v18);
LABEL_14:
    sub_100926368(a1, v3);
    return;
  }

  id v10 =  objc_msgSend( [RTPlaceInferenceOptions alloc],  "initWithFidelityPolicy:locations:accessPoints:clientIdentifier:",  *(void *)(a1 + 96),  v3,  objc_msgSend(*(id *)(a1 + 152), "copy"),  objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"));
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v11 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "#placeInfer running fetchPlaceInferencesWithOptions: %@",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    int v30 = 138412290;
    id v31 = v10;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer running fetchPlaceInferencesWithOptions: %@",  &v30,  v26);
    std::string v24 = (char *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

  sub_1002B68E8(a1 + 160, buf);
  double Current = CFAbsoluteTimeGetCurrent();
  int v13 = *(void **)(a1 + 56);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3321888768LL;
  v27[2] = sub_1009266B8;
  void v27[3] = &unk_101860FA8;
  v27[6] = a1;
  v27[7] = *(void *)buf;
  uint64_t v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    id v14 = (unint64_t *)(*(void *)&buf[8] + 16LL);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  double v29 = Current;
  v27[4] = v10;
  v27[5] = v3;
  [v13 fetchPlaceInferencesWithOptions:v10 withReply:v27];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_100925644( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, std::__shared_weak_count *a26)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100925678(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 43))
  {
    uint64_t v2 = sub_100924700(a1);
    [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:3];
  }

  [*(id *)(a1 + 80) setNextFireDelay:1.79769313e308];
  *(_BYTE *)(a1 + 42) = 0;
  return sub_100C6ACFC(a1);
}

uint64_t sub_1009256E8(uint64_t a1)
{
  *(void *)a1 = off_101860EA8;
  [*(id *)(a1 + 64) invalidate];

  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  [*(id *)(a1 + 80) invalidate];

  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 120) = 0LL;

  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 136) = 0LL;

  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;

  *(void *)(a1 + 592) = 0LL;
  *(void *)(a1 + 584) = 0LL;

  *(void *)(a1 + 600) = 0LL;
  *(void *)(a1 + 68_Block_object_dispose(va, 8) = 0LL;
  uint64_t v2 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 656);
  *(void *)(a1 + 656) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 648);
  *(void *)(a1 + 64_Block_object_dispose(va, 8) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1002B729C((void *)(a1 + 160));
  return sub_100C6AB50(a1);
}

void sub_10092582C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1009256E8(a1);
  operator delete(v1);
}

void sub_100925840(uint64_t a1)
{
  if ([*(id *)(a1 + 16) isAuthorizedForServiceType:12])
  {
    switch(*(void *)(a1 + 104))
    {
      case 0LL:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x3FB999999999999ALL;
        *(void *)(a1 + 96) = 0LL;
        goto LABEL_45;
      case 1LL:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x3FB999999999999ALL;
        *(void *)(a1 + 96) = 4LL;
        goto LABEL_45;
      case 2LL:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x3FF8000000000000LL;
        *(void *)(a1 + 96) = 5LL;
        goto LABEL_21;
      case 3LL:
        *(_DWORD *)(a1 + 72) = 0;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x4014000000000000LL;
        *(void *)(a1 + 96) = 7LL;
LABEL_21:
        *(_BYTE *)(a1 + 43) = 1;
        goto LABEL_46;
      case 4LL:
        *(_DWORD *)(a1 + 72) = 0;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x4014000000000000LL;
        *(void *)(a1 + 96) = 7LL;
        *(_BYTE *)(a1 + 43) = 1;
        *(_BYTE *)(a1 + 45) = 1;
        return;
      case 5LL:
        double Current = CFAbsoluteTimeGetCurrent();
        sub_1002F0B04(buf);
        if (sub_1002A82BC( *(uint64_t *)buf,  "PlaceInferenceTimestampOfLastBestLocationRequestForFidelityLowWithPreciseLocation",  v32)) {
          double v8 = *(double *)v32;
        }
        else {
          double v8 = -1.0;
        }
        uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          id v10 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }

        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101861108);
        }
        uint64_t v12 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = *(void *)(a1 + 112);
          *(_DWORD *)__int128 buf = 134217984;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "#placeInfer fFidelityLowWithPreciseLocationQueriesCFIndex Count = %lu",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          uint64_t v21 = *(void *)(a1 + 112);
          *(_DWORD *)__int16 v32 = 134217984;
          *(void *)&v32[4] = v21;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer fFidelityLowWithPreciseLocationQueriesCFIndex Count = %lu",  v32);
          uint64_t v23 = (char *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }

        uint64_t v14 = *(void *)(a1 + 112);
        if (v14 == 2)
        {
          if (Current - v8 <= 43200.0)
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            unint64_t v20 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "#placeInfer no GPS budget remaining, configuring a cached location request",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_101861108);
              }
              *(_WORD *)__int16 v32 = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer no GPS budget remaining, configuring a cached location request",  v32,  2);
              id v31 = (char *)v30;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()",  "%s\n",  v30);
              if (v31 != buf) {
                free(v31);
              }
            }

            *(_DWORD *)(a1 + 72) = 1;
            *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x4008000000000000LL;
            *(void *)(a1 + 96) = 24LL;
            *(_BYTE *)(a1 + 43) = 0;
            *(_BYTE *)(a1 + 45) = 0;
            uint64_t v16 = 3LL;
            goto LABEL_68;
          }

          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          std::string::size_type v17 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "#placeInfer GPS budget is still available, configuring a smoothed GPS query",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            *(_WORD *)__int16 v32 = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer GPS budget is still available, configuring a smoothed GPS query",  v32,  2);
            double v29 = (char *)v28;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()",  "%s\n",  v28);
            if (v29 != buf) {
              free(v29);
            }
          }

          *(_DWORD *)(a1 + 72) = 0;
          uint64_t v18 = 0x4044000000000000LL;
        }

        else
        {
          if (v14 == 1)
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            unint64_t v15 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "#placeInfer configuring a high accuracy LOI query",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_101861108);
              }
              *(_WORD *)__int16 v32 = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer configuring a high accuracy LOI query",  v32,  2);
              std::string v25 = (char *)v24;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()",  "%s\n",  v24);
              if (v25 != buf) {
                free(v25);
              }
            }

            uint64_t v16 = 1LL;
            *(_DWORD *)(a1 + 72) = 1;
            *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x4008000000000000LL;
            *(void *)(a1 + 96) = 8LL;
            *(_BYTE *)(a1 + 43) = 0;
            *(_BYTE *)(a1 + 45) = 0;
LABEL_68:
            *(void *)(a1 + 224) = v16;
            return;
          }

          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          uint64_t v19 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "#placeInfer configuring an extra GPS request",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            *(_WORD *)__int16 v32 = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer configuring an extra GPS request",  v32,  2);
            __int128 v27 = (char *)v26;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()",  "%s\n",  v26);
            if (v27 != buf) {
              free(v27);
            }
          }

          *(_DWORD *)(a1 + 72) = 0;
          uint64_t v18 = 0x4034000000000000LL;
        }

        *(void *)(a1 + 8_Block_object_dispose(va, 8) = v18;
        *(void *)(a1 + 96) = 26LL;
        *(_BYTE *)(a1 + 43) = 0;
        *(_BYTE *)(a1 + 45) = 0;
        uint64_t v16 = 2LL;
        goto LABEL_68;
      case 6LL:
        *(_DWORD *)(a1 + 72) = 1;
        *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
        *(void *)(a1 + 96) = 0LL;
LABEL_45:
        *(_BYTE *)(a1 + 43) = 0;
        goto LABEL_46;
      default:
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101861108);
        }
        uint64_t v4 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "#dsa Please update initializePlaceInferencesOptions",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          *(_WORD *)__int16 v32 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "#dsa Please update initializePlaceInferencesOptions",  v32,  2);
          uint64_t v6 = (char *)v5;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()",  "%s\n",  v5);
          if (v6 != buf) {
            free(v6);
          }
        }

        return;
    }
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)__int128 buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v34 = 2114;
    uint64_t v35 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa client is authorized only for coarse, Client:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0x3FB999999999999ALL;
  *(void *)(a1 + 96) = 4LL;
  *(_WORD *)(a1 + 43) = 256;
LABEL_46:
  *(_BYTE *)(a1 + 45) = 0;
}

void sub_100926274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

id sub_1009262AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 44))
  {
    uint64_t v2 = sub_100924420(a1);
    [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:*(unsigned int *)(a1 + 72)];
    uint64_t v3 = sub_10092467C(a1);
  }

  else
  {
    uint64_t v4 = sub_10092467C(a1);
    [*(id *)(*(void *)v4 + 16) unregister:*(void *)(*(void *)v4 + 8) forNotification:*(unsigned int *)(a1 + 72)];
    uint64_t v3 = sub_100924420(a1);
  }

  return [*(id *)(*(void *)v3 + 16) register:*(void *)(*(void *)v3 + 8) forNotification:*(unsigned int *)(a1 + 72) registrationInfo:0];
}

id sub_100926324(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 44)) {
    uint64_t v2 = sub_10092467C(a1);
  }
  else {
    uint64_t v2 = sub_100924420(a1);
  }
  return [*(id *)(*(void *)v2 + 16) unregister:*(void *)(*(void *)v2 + 8) forNotification:*(unsigned int *)(a1 + 72)];
}

void sub_100926368(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      uint64_t v6 = v5;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      uint64_t v8 = v7;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "horizontalAccuracy");
      *(_DWORD *)__int128 buf = 134284547;
      uint64_t v29 = v6;
      __int16 v30 = 2049;
      uint64_t v31 = v8;
      __int16 v32 = 2050;
      uint64_t v33 = v9;
      __int16 v34 = 2082;
      uint64_t v35 = sub_100832C40(objc_msgSend(objc_msgSend(a2, "lastObject"), "type"));
      __int16 v36 = 2112;
      id v37 = objc_msgSend(objc_msgSend(a2, "lastObject"), "timestamp");
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#placeInfer fallback result message location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, t ype, %{public}s, timestamp, %@",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      uint64_t v10 = qword_101934978;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      uint64_t v12 = v11;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      uint64_t v14 = v13;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "horizontalAccuracy");
      int v18 = 134284547;
      uint64_t v19 = v12;
      __int16 v20 = 2049;
      uint64_t v21 = v14;
      __int16 v22 = 2050;
      uint64_t v23 = v15;
      __int16 v24 = 2082;
      std::string v25 = sub_100832C40(objc_msgSend(objc_msgSend(a2, "lastObject"), "type"));
      __int16 v26 = 2112;
      id v27 = objc_msgSend(objc_msgSend(a2, "lastObject"), "timestamp");
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  0LL,  "#placeInfer fallback result message location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, t ype, %{public}s, timestamp, %@",  &v18,  52);
      std::string::size_type v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::sendFallBackResultMessage(const NSArray<CLLocation *> *)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    sub_10092A8A4(a1, 0, (uint64_t)[a2 lastObject]);
  }

  else
  {
    sub_100927F78( a1,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  6LL,  0LL));
  }

void sub_1009266B8(void *a1, uint64_t a2, uint64_t a3)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768LL;
  _OWORD v8[2] = sub_100926798;
  void v8[3] = &unk_101860F70;
  v8[9] = a1[9];
  double v8[4] = a1[4];
  v8[5] = a2;
  uint64_t v3 = a1[7];
  _WORD v8[8] = a1[6];
  v8[6] = a3;
  uint64_t v4 = (std::__shared_weak_count *)a1[8];
  v8[10] = v3;
  uint64_t v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    uint64_t v7 = a1[8];
    v8[7] = a1[5];
  }

void sub_100926780( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100926798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    double v5 = (Current - *(double *)(a1 + 72)) * 1000.0;
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) count];
    id v8 = [*(id *)(a1 + 40) firstObject];
    uint64_t v9 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 134219010;
    *(double *)unint64_t v64 = v5;
    *(_WORD *)&v64[8] = 2112;
    *(void *)&v64[10] = v6;
    __int16 v65 = 2050;
    id v66 = v7;
    __int16 v67 = 2112;
    id v68 = v8;
    __int16 v69 = 2114;
    uint64_t v70 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "#placeInfer RECEIVED RESPONSE to fetchPlaceInferencesWithOptions in %f s with options, %@, %{public}lu placeInfere nces, placeInferences[0], %@, error, %{public}@",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v34 = qword_101934978;
    double v35 = *(double *)(a1 + 72);
    uint64_t v36 = *(void *)(a1 + 32);
    id v37 = [*(id *)(a1 + 40) count];
    id v38 = [*(id *)(a1 + 40) firstObject];
    uint64_t v39 = *(void *)(a1 + 48);
    int v53 = 134219010;
    double v54 = (Current - v35) * 1000.0;
    __int16 v55 = 2112;
    uint64_t v56 = v36;
    __int16 v57 = 2050;
    id v58 = v37;
    __int16 v59 = 2112;
    id v60 = v38;
    __int16 v61 = 2114;
    uint64_t v62 = v39;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v34,  1LL,  "#placeInfer RECEIVED RESPONSE to fetchPlaceInferencesWithOptions in %f s with options, %@, %{public}lu placeInfere nces, placeInferences[0], %@, error, %{public}@",  &v53,  52);
    char v41 = (uint8_t *)v40;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v40);
    if (v41 != buf) {
      free(v41);
    }
  }

  if ([*(id *)(a1 + 48) code] == (id)2)
  {
    *(_DWORD *)(v2 + sub_10000AE14(v1 + 520) = 6;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v10 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kDSAResultErrorLSOff",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v53) = 0;
      LODWORD(v4_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kDSAResultErrorLSOff",  &v53,  v48);
      char v43 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v42);
      if (v43 != buf) {
        free(v43);
      }
    }

    *(void *)(v2 + 324) = 0x600000002LL;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v11 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorLSOff",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v53) = 0;
      LODWORD(v4_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultErrorLSOff",  &v53,  v48);
      char v45 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v44);
      if (v45 != buf) {
        free(v45);
      }
    }

    *(_BYTE *)(v2 + 244) = 0;
  }

  if ((*(void *)(a1 + 48) || ![*(id *)(a1 + 40) count]) && *(void *)(v2 + 104) == 5)
  {
    uint64_t v12 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(v2 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_1009272A4;
    block[3] = &unk_101860EC8;
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
    block[4] = v2;
    void block[5] = v14;
    __int128 v52 = v13;
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
    }

    dispatch_async(v12, block);
    std::string::size_type v17 = v52;
    if (!v52) {
      return;
    }
LABEL_41:
    std::__shared_weak_count::__release_weak(v17);
    return;
  }

  if (![*(id *)(a1 + 40) count])
  {
    if (*(void *)(a1 + 48))
    {
      sub_1004F2598();
      if (sub_1004F76B8()
        && (id v28 = [*(id *)(a1 + 48) domain],
            [v28 isEqualToString:RTErrorDomain])
        && [*(id *)(a1 + 48) code] == (id)8)
      {
        sub_100926368(v2, *(void **)(a1 + 56));
      }

      else
      {
        sub_100927F78(v2, *(void *)(a1 + 48));
      }
    }

    else
    {
      sub_100927F78( v2,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  6LL,  0LL));
    }

    return;
  }

  sub_1004F2598();
  if (sub_1004F76B8())
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    int v18 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)unint64_t v64 = 0;
      *(_WORD *)&uint8_t v64[4] = 2082;
      *(void *)&v64[6] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
    }

    uint64_t v19 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)unint64_t v64 = 0;
      *(_WORD *)&uint8_t v64[4] = 2082;
      *(void *)&v64[6] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!",  "{msg%{public}.0s:Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!}",  buf,  0x12u);
    }
  }

  +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  __int16 v20 = *(void **)(a1 + 40);
  if (!*(_BYTE *)(v2 + 45))
  {
    id v29 = sub_10092B578((uint64_t)v20, *(void **)(a1 + 40));
    sub_10092A8A4(v2, v29, 0LL);
    return;
  }

  *(_DWORD *)(v2 + 54_Block_object_dispose(va, 8) = [v20 count];
  *(_DWORD *)(v2 + 544) = (int)((Current - *(double *)(a1 + 72)) * 1000.0);
  *(_DWORD *)(v2 + 336) = [*(id *)(a1 + 40) count];
  *(_DWORD *)(v2 + 332) = (int)((Current - *(double *)(a1 + 72)) * 1000.0);
  id v21 = sub_100928154(v2, *(void **)(a1 + 40), *(void **)(a1 + 56));
  if ([v21 count])
  {
    id v22 = [v21 objectAtIndexedSubscript:0];
    uint64_t v23 = *(void **)(v2 + 56);
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3321888768LL;
    _OWORD v49[2] = sub_10092AC04;
    v49[3] = &unk_101860F38;
    uint64_t v25 = *(void *)(a1 + 80);
    __int16 v24 = *(std::__shared_weak_count **)(a1 + 88);
    v49[6] = v2;
    v49[7] = v25;
    uint64_t v50 = v24;
    if (v24)
    {
      __int16 v26 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        unint64_t v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }

    v49[4] = *(void *)(a1 + 56);
    void v49[5] = v22;
    [v23 fetchFormattedPostalAddressesFromMeCardWithReply:v49];
    std::string::size_type v17 = v50;
    if (!v50) {
      return;
    }
    goto LABEL_41;
  }

  sub_10092A8A4(v2, v21, 0LL);
  if (!*(_DWORD *)(v2 + 328))
  {
    *(_DWORD *)(v2 + 32_Block_object_dispose(va, 8) = 7;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    __int16 v30 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v53) = 0;
      LODWORD(v4_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable",  &v53,  v48);
      __int128 v47 = (uint8_t *)v46;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v46);
      if (v47 != buf) {
        free(v47);
      }
    }
  }

  if (!*(_DWORD *)(v2 + 520))
  {
    *(_DWORD *)(v2 + sub_10000AE14(v1 + 520) = 7;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v31 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultErrorPlacemarkUnavailable",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v53) = 0;
      LODWORD(v4_Block_object_dispose(va, 8) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kERAResultErrorPlacemarkUnavailable",  &v53,  v48);
      uint64_t v33 = (uint8_t *)v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v32);
      if (v33 != buf) {
        free(v33);
      }
    }
  }

void sub_100927284( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1009272A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10092730C;
  v3[3] = &unk_10181D3D0;
  v3[4] = v1;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1LL) {
      sub_10092730C((uint64_t)v3);
    }
  }

void sub_10092730C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(v1 + 112);
    *(_DWORD *)__int128 buf = 134349056;
    uint64_t v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#placeInfer FidelityPolicyLowWithPreciseLocation query attempt #%{public}lu failed",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v9 = *(void *)(v1 + 112);
    int v15 = 134349056;
    uint64_t v16 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#placeInfer FidelityPolicyLowWithPreciseLocation query attempt #%{public}lu failed",  &v15,  12);
    uint64_t v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  uint64_t v4 = *(void *)(v1 + 112);
  if (v4 == 2)
  {
    if (!sub_1009278A0(v1))
    {
LABEL_18:
      ++*(void *)(v1 + 112);
      sub_100925840(v1);
      sub_100927788(v1);
    }
  }

  else
  {
    if (v4 == 1)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      double v5 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#placeInfer high accuracy LOI not available",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101861108);
        }
        LOWORD(v15) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#placeInfer high accuracy LOI not available",  &v15,  v14);
        id v7 = (uint8_t *)v6;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v6);
        if (v7 != buf) {
          free(v7);
        }
      }

      goto LABEL_18;
    }

    if (!sub_1009278A0(v1))
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      id v8 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#placeInfer failed to determine current placeInference, return no result",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101861108);
        }
        LOWORD(v15) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#placeInfer failed to determine current placeInference, return no result",  &v15,  v14);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      *(_BYTE *)(v1 + 245) = 0;
      sub_100927F78( v1,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  6LL,  0LL));
    }
  }

uint64_t sub_100927788(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 43))
  {
    uint64_t v2 = sub_100924700(a1);
    [*(id *)(*(void *)v2 + 16) register:*(void *)(*(void *)v2 + 8) forNotification:3 registrationInfo:0];
    [*(id *)(*(void *)sub_100924700(a1) + 16) syncgetStartScanWithType:10 lowPriority:0 passive:0 requester:"placeinference"];
  }

  [*(id *)(a1 + 80) setNextFireDelay:*(double *)(a1 + 88)];
  *(_BYTE *)(a1 + 42) = 1;
  if (*(double *)(a1 + 88) == 40.0)
  {
    sub_1002F0B04(&v9);
    uint64_t v3 = v9;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1002AC7B8(v3, "PlaceInferenceTimestampOfLastBestLocationRequestForFidelityLowWithPreciseLocation", &Current);
    uint64_t v4 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

  return sub_100C6ACFC(a1);
}

void sub_10092788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_1009278A0(uint64_t a1)
{
  if (!*(void *)(a1 + 128))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v14 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "#placeInfer attempted to send the last available location, but none found",  buf,  2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    LOWORD(v39) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer attempted to send the last available location, but none found",  &v39,  2);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v15);
    if (v16 == buf) {
      return 0LL;
    }
LABEL_22:
    free(v16);
    return 0LL;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    [*(id *)(a1 + 128) coordinate];
    uint64_t v4 = v3;
    [*(id *)(a1 + 128) coordinate];
    uint64_t v6 = v5;
    [*(id *)(a1 + 128) horizontalAccuracy];
    uint64_t v8 = v7;
    uint64_t v9 = sub_100832C40([*(id *)(a1 + 128) type]);
    id v10 = [*(id *)(a1 + 128) timestamp];
    *(_DWORD *)__int128 buf = 134284547;
    id v50 = v4;
    __int16 v51 = 2049;
    uint64_t v52 = v6;
    __int16 v53 = 2050;
    uint64_t v54 = v8;
    __int16 v55 = 2082;
    uint64_t v56 = v9;
    __int16 v57 = 2112;
    id v58 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "#placeInfer last available location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{publ ic}s, timestamp, %@",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v20 = qword_101934978;
    [*(id *)(a1 + 128) coordinate];
    id v22 = v21;
    [*(id *)(a1 + 128) coordinate];
    uint64_t v24 = v23;
    [*(id *)(a1 + 128) horizontalAccuracy];
    uint64_t v26 = v25;
    unint64_t v27 = sub_100832C40([*(id *)(a1 + 128) type]);
    id v28 = [*(id *)(a1 + 128) timestamp];
    int v39 = 134284547;
    id v40 = v22;
    __int16 v41 = 2049;
    uint64_t v42 = v24;
    __int16 v43 = 2050;
    uint64_t v44 = v26;
    __int16 v45 = 2082;
    __int128 v46 = v27;
    __int16 v47 = 2112;
    id v48 = v28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  1LL,  "#placeInfer last available location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{publ ic}s, timestamp, %@",  &v39,  52);
    __int16 v30 = (uint8_t *)v29;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v29);
    if (v30 != buf) {
      free(v30);
    }
  }

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "timestamp"), "compare:", *(void *)(a1 + 136)) != (id)-1)
  {
    id v11 = [[_CLPlaceInference alloc] initWithUserType:0 placeType:2 placemark:0 referenceLocation:*(void *)(a1 + 128) confidence:0 preferredName:0 loiIdentifier:0.0];
    *(void *)(a1 + 224) = 4LL;
    id v38 = v11;
    sub_10092A8A4( a1,  +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v38, 1LL),  0LL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v12 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "#placeInfer last available location sent!",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v39) = 0;
      LODWORD(v37) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "#placeInfer last available location sent!",  &v39,  v37);
      __int16 v32 = (uint8_t *)v31;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v31);
      if (v32 != buf) {
        free(v32);
      }
    }

    return 1LL;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  std::string::size_type v17 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    id v18 = [*(id *)(a1 + 128) timestamp];
    uint64_t v19 = *(void *)(a1 + 136);
    *(_DWORD *)__int128 buf = 138412546;
    id v50 = v18;
    __int16 v51 = 2112;
    uint64_t v52 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "#placeInfer attempted to send the last available location, but it was stale - last location timestamp, %@, placeIn ference request timestamp, %@",  buf,  0x16u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v33 = qword_101934978;
    id v34 = [*(id *)(a1 + 128) timestamp];
    uint64_t v35 = *(void *)(a1 + 136);
    int v39 = 138412546;
    id v40 = v34;
    __int16 v41 = 2112;
    uint64_t v42 = v35;
    LODWORD(v37) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  1LL,  "#placeInfer attempted to send the last available location, but it was stale - last location timestamp, %@, placeIn ference request timestamp, %@",  &v39,  v37);
    uint64_t v16 = (uint8_t *)v36;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v36);
    if (v16 == buf) {
      return 0LL;
    }
    goto LABEL_22;
  }

  return result;
}

void sub_100927F78(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 41))
  {
    uint64_t v6 = @"kCLConnectionMessageError";
    uint64_t v7 = a2;
    *(void *)__int128 buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL);
    sub_10092E7AC(a1, buf);
    *(_BYTE *)(a1 + 41) = 0;
    [*(id *)(a1 + 144) horizontalAccuracy];
    *(void *)(a1 + 216) = v3;
    *(_DWORD *)(a1 + 240) = [*(id *)(a1 + 144) signalEnvironmentType];
    sub_10092E84C(a1);

    *(void *)(a1 + 144) = 0LL;
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v9 = 2082;
      id v10 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dsa Trying to send a result while the request is stopped}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
    }

    uint64_t v5 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v9 = 2082;
      id v10 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dsa Trying to send a result while the request is stopped",  "{msg%{public}.0s:#dsa Trying to send a result while the request is stopped}",  buf,  0x12u);
    }
  }

id sub_100928154(uint64_t a1, void *a2, void *a3)
{
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  id v242 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  __int128 v267 = 0u;
  __int128 v268 = 0u;
  __int128 v269 = 0u;
  __int128 v270 = 0u;
  obuint64_t j = a2;
  id v266 = [a2 countByEnumeratingWithState:&v267 objects:v291 count:16];
  if (!v266) {
    return v242;
  }
  uint64_t v265 = *(void *)v268;
  uint64_t v5 = 2LL;
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  double v7 = 65.0;
  double v8 = 0.85;
  double v9 = 20.0;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v241 = _Q0;
  while (2)
  {
    int v15 = 0LL;
    do
    {
      if (*(void *)v268 != v265) {
        objc_enumerationMutation(obj);
      }
      uint64_t v16 = *(void **)(*((void *)&v267 + 1) + 8LL * (void)v15);
      unint64_t v17 = sub_10092E14C((unint64_t)[v16 userType]);
      uint64_t v18 = sub_10092E2DC((unint64_t)[v16 placeType]);
      id v19 = [v16 userTypeSource];
      id v20 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
      id v21 = v20;
      if (!v19)
      {
        id v22 = @"Unknown";
LABEL_14:
        [v21 addObject:v22];
        goto LABEL_15;
      }

      id v22 = @"User";
LABEL_15:
      if (objc_msgSend(v21, "count", v22)) {
        double v23 = COERCE_DOUBLE(objc_msgSend(v21, "componentsJoinedByString:", @", "));
      }
      else {
        double v23 = 0.0;
      }
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101861128);
      }
      uint64_t v24 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68289282;
        *(_DWORD *)__int16 v288 = 0;
        *(_WORD *)&v288[4] = 2082;
        *(void *)&v288[6] = "";
        *(_WORD *)&v288[14] = 1026;
        *(_DWORD *)&v288[16] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa userType, userType:%{public}d}",  buf,  0x18u);
      }

      *(void *)(a1 + 324) = v5;
      *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 0;
      LOBYTE(v25) = 0;
      if (([v16 userTypeSource] & 1) != 0
        && (unint64_t v32 = (unint64_t)[v16 userTypeSource], v25 = (v32 >> 1) & 1, v17)
        && (v32 & 2) != 0)
      {
        objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
        if (v33 <= v7)
        {
          [v16 confidence];
          if (v41 >= v8)
          {
            [v16 confidence];
            double v58 = fabs((v57 - *(double *)(a1 + 48)) * 100.0);
            if (v58 <= v9)
            {
              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_101861128);
              }
              unint64_t v216 = (os_log_s *)qword_101934898;
              if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
              {
                [v16 confidence];
                uint64_t v217 = *(void *)(a1 + 48);
                *(_DWORD *)__int128 buf = 134350082;
                *(void *)__int16 v288 = v218;
                *(_WORD *)&v288[8] = 2050;
                *(void *)&v288[10] = v217;
                *(_WORD *)&v288[18] = 2050;
                *(double *)&v288[20] = v58;
                *(_WORD *)&v288[28] = 2114;
                *(double *)&v288[30] = v23;
                *(_WORD *)&v288[38] = 1024;
                *(_DWORD *)&v288[40] = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v216,  OS_LOG_TYPE_DEFAULT,  "#dsa zone of confusion,dropping dsa,current confidence,%{public}.2f,last confidence,%{public}.2f,confi denceinpercent,%{public}.2f,loisource,%{public}@,userType,%d",  buf,  0x30u);
              }

              int v219 = v242;
              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                uint64_t v229 = qword_101934898;
                [v16 confidence];
                uint64_t v230 = *(void *)(a1 + 48);
                int v271 = 134350082;
                double v272 = v231;
                __int16 v273 = 2050;
                uint64_t v274 = v230;
                __int16 v275 = 2050;
                double v276 = v58;
                __int16 v277 = 2114;
                double v278 = v23;
                __int16 v279 = 1024;
                *(_DWORD *)int v280 = v17;
                LODWORD(v23_Block_object_dispose(va, 8) = 48;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v229,  0LL,  "#dsa zone of confusion,dropping dsa,current confidence,%{public}.2f,last confidence,%{public}.2f,confi denceinpercent,%{public}.2f,loisource,%{public}@,userType,%d",  &v271,  v238);
                int v233 = (uint8_t *)v232;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency( NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v232);
                if (v233 != buf) {
                  free(v233);
                }
                int v219 = v242;
              }

              if (!*(_DWORD *)(a1 + 520))
              {
                *(void *)(a1 + 52_Block_object_dispose(va, 8) = [v16 userTypeSource];
                *(void *)(a1 + 536) = [v16 userType];
                [v16 confidence];
                *(float *)&double v220 = v220;
                *(_DWORD *)(a1 + 552) = LODWORD(v220);
                *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 7;
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_101861108);
                }
                int v221 = (os_log_s *)p_vtable[303];
                if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v221,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultErrorPlacemarkUnavailable",  buf,  2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934970 != -1) {
                    dispatch_once(&qword_101934970, &stru_101861108);
                  }
                  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
                  LOWORD(v271) = 0;
                  LODWORD(v23_Block_object_dispose(va, 8) = 2;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kERAResultErrorPlacemarkUnavailable",  &v271,  v238);
                  uint64_t v235 = (uint8_t *)v234;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergenc y(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v234);
                  if (v235 != buf) {
                    free(v235);
                  }
                  int v219 = v242;
                }
              }

              if (!*(_DWORD *)(a1 + 328))
              {
                id v222 = [v16 userTypeSource];
                if (v222)
                {
                  if ((v222 & 2) != 0)
                  {
                    int v223 = 2;
                  }

                  else if ((v222 & 1) != 0)
                  {
                    int v223 = 3;
                  }

                  else if ((v222 & 4) != 0)
                  {
                    int v223 = 6;
                  }

                  else
                  {
                    int v223 = 0;
                  }
                }

                else
                {
                  int v223 = 0;
                }

                *(_DWORD *)(a1 + 292) = v223;
                double v224 = (char *)[v16 userType];
                else {
                  int v225 = 0;
                }
                *(_DWORD *)(a1 + 296) = v225;
                [v16 confidence];
                *(void *)(a1 + 344) = v226;
                *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 7;
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_101861108);
                }
                float v227 = (os_log_s *)p_vtable[303];
                if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v227,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable",  buf,  2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934970 != -1) {
                    dispatch_once(&qword_101934970, &stru_101861108);
                  }
                  LOWORD(v271) = 0;
                  LODWORD(v23_Block_object_dispose(va, 8) = 2;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable",  &v271,  v238);
                  char v237 = (uint8_t *)v236;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergenc y(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v236);
                  if (v237 != buf) {
                    free(v237);
                  }
                  int v219 = v242;
                }
              }

              [v219 removeAllObjects];
              return v242;
            }

            [v16 confidence];
            if (v59 <= *(double *)(a1 + 48))
            {
              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_101861128);
              }
              BOOL v73 = (os_log_s *)qword_101934898;
              if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v74 = [v16 userType];
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                int v76 = (int)v75;
                [v16 confidence];
                int v77 = (int)*(double *)(a1 + 48);
                *(_DWORD *)__int128 buf = 68290306;
                *(_DWORD *)__int16 v288 = 0;
                *(_WORD *)&v288[4] = 2082;
                *(void *)&v288[6] = "";
                *(_WORD *)&v288[14] = 1026;
                *(_DWORD *)&v288[16] = v74;
                *(_WORD *)&v288[20] = 2114;
                *(double *)&v288[22] = v23;
                *(_WORD *)&v288[30] = 1026;
                *(_DWORD *)&v288[32] = v76;
                *(_WORD *)&v288[36] = 1026;
                *(_DWORD *)&v288[38] = (int)v78;
                *(_WORD *)&v288[42] = 1026;
                *(_DWORD *)&v288[44] = v77;
                _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa confidence do not meet the emergency case requirement, userType:%{pu blic}d, userTypeSource:%{public, location:escape_only}@, hunc:%{public}d, confidence:%{pub lic}d, lastconfidence:%{public}d}",  buf,  0x34u);
              }
            }

            else
            {
              id v60 = sub_10092E47C(objc_msgSend(objc_msgSend(v16, "mapItem"), "location"));
              double v261 = sub_10092E47C([v16 referenceLocation]);
              __int16 v61 = sub_10092E564([v16 mapItem], (uint64_t)v60);
              -[CLLocation coordinate](-[CLPlacemark location](v61, "location"), "coordinate");
              double v63 = v62;
              double v262 = v61;
              -[CLLocation coordinate](-[CLPlacemark location](v61, "location"), "coordinate");
              double v65 = v64;
              objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
              double v67 = v66;
              objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
              double v69 = sub_100D2DBDC((double *)(a1 + 608), v63, v65, v67, v68, 0.0);
              *(void *)(a1 + 52_Block_object_dispose(va, 8) = [v16 userTypeSource];
              *(void *)(a1 + 536) = [v16 userType];
              [v16 confidence];
              *(float *)&double v70 = v70;
              *(_DWORD *)(a1 + 552) = LODWORD(v70);
              *(_DWORD *)(a1 + 560) = (int)v69;
              id v71 = [v16 userTypeSource];
              if (v71)
              {
                if ((v71 & 2) != 0)
                {
                  int v72 = 2;
                }

                else if ((v71 & 1) != 0)
                {
                  int v72 = 3;
                }

                else if ((v71 & 4) != 0)
                {
                  int v72 = 6;
                }

                else
                {
                  int v72 = 0;
                }
              }

              else
              {
                int v72 = 0;
              }

              *(_DWORD *)(a1 + 292) = v72;
              __int128 v88 = (char *)[v16 userType];
              else {
                int v89 = 0;
              }
              *(_DWORD *)(a1 + 296) = v89;
              [v16 confidence];
              *(void *)(a1 + 344) = v90;
              *(_DWORD *)(a1 + 356) = (int)v69;
              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_101861128);
              }
              __int128 v91 = (os_log_s *)qword_101934898;
              if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
              {
                -[CLLocation coordinate](-[CLPlacemark location](v262, "location"), "coordinate");
                uint64_t v258 = v92;
                -[CLLocation coordinate](-[CLPlacemark location](v262, "location"), "coordinate");
                uint64_t v255 = v93;
                -[CLLocation horizontalAccuracy](-[CLPlacemark location](v262, "location"), "horizontalAccuracy");
                uint64_t v95 = v94;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                uint64_t v97 = v96;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                double v98 = v69;
                double v99 = v7;
                uint64_t v101 = v100;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                uint64_t v102 = v5;
                double v103 = v8;
                uint64_t v105 = v104;
                [v16 confidence];
                *(_DWORD *)__int128 buf = 134285571;
                *(void *)__int16 v288 = v258;
                *(_WORD *)&v288[8] = 2049;
                *(void *)&v288[10] = v255;
                *(_WORD *)&v288[18] = 2050;
                *(void *)&v288[20] = v95;
                *(_WORD *)&v288[28] = 2049;
                *(void *)&v288[30] = v97;
                double v9 = 20.0;
                *(_WORD *)&v288[38] = 2049;
                *(void *)&v288[40] = v101;
                double v7 = v99;
                double v69 = v98;
                *(_WORD *)&v288[48] = 2050;
                *(void *)&v288[50] = v105;
                double v8 = v103;
                uint64_t v5 = v102;
                *(_WORD *)&v288[58] = 2050;
                *(double *)&v288[60] = v98;
                *(_WORD *)&v288[68] = 2050;
                *(void *)&v288[70] = v106;
                *(_WORD *)&v288[78] = 2114;
                *(double *)&v288[80] = v23;
                _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "#dsa mapitem's geodetic location ,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f, currentlat,%{p rivate}.7f,currentlon,%{private}.7f,currentacc,%{public}.2f,dist,%{public}.2f, currconf,%{public}.2f,l oisource,%{public}@",  buf,  0x5Cu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                double v239 = v8;
                double v240 = v7;
                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                uint64_t v180 = qword_101934898;
                -[CLLocation coordinate](-[CLPlacemark location](v262, "location"), "coordinate");
                double v182 = v181;
                -[CLLocation coordinate](-[CLPlacemark location](v262, "location"), "coordinate");
                uint64_t v184 = v183;
                -[CLLocation horizontalAccuracy](-[CLPlacemark location](v262, "location"), "horizontalAccuracy");
                double v186 = v185;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                double v188 = v187;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                uint64_t v190 = v189;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                uint64_t v192 = v191;
                [v16 confidence];
                int v271 = 134285571;
                double v272 = v182;
                __int16 v273 = 2049;
                uint64_t v274 = v184;
                __int16 v275 = 2050;
                double v276 = v186;
                __int16 v277 = 2049;
                double v278 = v188;
                __int16 v279 = 2049;
                *(void *)int v280 = v190;
                *(_WORD *)&v280[8] = 2050;
                *(void *)uint64_t v281 = v192;
                *(_WORD *)&v281[8] = 2050;
                double v282 = v69;
                __int16 v283 = 2050;
                uint64_t v284 = v193;
                __int16 v285 = 2114;
                double v286 = v23;
                LODWORD(v23_Block_object_dispose(va, 8) = 92;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v180,  0LL,  "#dsa mapitem's geodetic location ,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f, currentlat,%{p rivate}.7f,currentlon,%{private}.7f,currentacc,%{public}.2f,dist,%{public}.2f, currconf,%{public}.2f,l oisource,%{public}@",  &v271,  v238);
                __int128 v195 = (uint8_t *)v194;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency( NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v194);
                if (v195 != buf) {
                  free(v195);
                }
                double v8 = v239;
                double v7 = v240;
                double v9 = 20.0;
              }

              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_101861128);
              }
              uint64_t v107 = (os_log_s *)qword_101934898;
              if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
              {
                int v259 = -[NSString UTF8String](-[CLPlacemark name](v262, "name"), "UTF8String");
                char v256 = -[NSString UTF8String](-[CLPlacemark thoroughfare](v262, "thoroughfare"), "UTF8String");
                uint64_t v253 = -[NSString UTF8String](-[CLPlacemark subThoroughfare](v262, "subThoroughfare"), "UTF8String");
                uint64_t v251 = -[NSString UTF8String](-[CLPlacemark locality](v262, "locality"), "UTF8String");
                uint64_t v249 = -[NSString UTF8String](-[CLPlacemark subLocality](v262, "subLocality"), "UTF8String");
                int v247 = -[NSString UTF8String]( -[CLPlacemark administrativeArea](v262, "administrativeArea"),  "UTF8String");
                int v245 = -[NSString UTF8String]( -[CLPlacemark subAdministrativeArea](v262, "subAdministrativeArea"),  "UTF8String");
                int v243 = -[NSString UTF8String](-[CLPlacemark postalCode](v262, "postalCode"), "UTF8String");
                uint64_t v108 = -[NSString UTF8String](-[CLPlacemark ISOcountryCode](v262, "ISOcountryCode"), "UTF8String");
                int64_t v109 = -[NSString UTF8String](-[CLPlacemark country](v262, "country"), "UTF8String");
                uint64_t v110 = -[NSString UTF8String](-[CLPlacemark inlandWater](v262, "inlandWater"), "UTF8String");
                unint64_t v111 = -[NSString UTF8String](-[CLPlacemark ocean](v262, "ocean"), "UTF8String");
                *(_DWORD *)__int128 buf = 68292099;
                *(_DWORD *)__int16 v288 = 0;
                *(_WORD *)&v288[4] = 2082;
                *(void *)&v288[6] = "";
                *(_WORD *)&v288[14] = 2081;
                *(void *)&v288[16] = v259;
                *(_WORD *)&v288[24] = 2081;
                *(void *)&v288[26] = v256;
                *(_WORD *)&v288[34] = 2081;
                *(void *)&v288[36] = v253;
                *(_WORD *)&v288[44] = 2081;
                *(void *)&v288[46] = v251;
                *(_WORD *)&v288[54] = 2081;
                *(void *)&v288[56] = v249;
                *(_WORD *)&v288[64] = 2081;
                *(void *)&v288[66] = v247;
                *(_WORD *)&v288[74] = 2081;
                *(void *)&v288[76] = v245;
                *(_WORD *)&v288[84] = 2081;
                *(void *)&v288[86] = v243;
                *(_WORD *)&v288[94] = 2081;
                *(void *)&v288[96] = v108;
                *(_WORD *)&v288[104] = 2081;
                *(void *)&v288[106] = v109;
                *(_WORD *)&v288[114] = 2081;
                *(void *)&v288[116] = v110;
                p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
                *(_WORD *)&v288[124] = 2081;
                *(void *)&v288[126] = v111;
                _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa,received infered place address from coreroutine, name:%{private, loc ation:escape_only}s, thoroughfare:%{private, location:escape_only}s, subThoroughfare:%{private , location:escape_only}s, locality:%{private, location:escape_only}s, subLocality:%{private, l ocation:escape_only}s, administrativeArea:%{private, location:escape_only}s, subAdministrativeAr ea:%{private, location:escape_only}s, postalCode:%{private, location:escape_only}s, ISOcountry Code:%{private, location:escape_only}s, country:%{private, location:escape_only}s, inlandWater :%{private, location:escape_only}s, ocean:%{private, location:escape_only}s}",  buf,  0x8Au);
              }

              if (v69 <= 50.0)
              {
                [v16 mapItem];
                id v118 = objc_msgSend(objc_msgSend(v16, "mapItem"), "location");
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                double v120 = v119;
                __int128 v121 = (const __CFDate *)objc_msgSend(objc_msgSend(a3, "lastObject"), "timestamp");
                memset(&v288[92], 0, 20);
                *(void *)&v288[132] = 0LL;
                uint64_t v289 = 0LL;
                char v290 = 0;
                [v118 latitude];
                uint64_t v123 = v122;
                [v118 longitude];
                uint64_t v125 = v124;
                double v126 = v69 + v120;
                CFAbsoluteTime AbsoluteTime = CFDateGetAbsoluteTime(v121);
                LODWORD(v11_Block_object_dispose(va, 8) = [v118 referenceFrame];
                __int128 v128 = objc_alloc(&OBJC_CLASS___CLLocation);
                *(void *)__int16 v288 = v123;
                *(void *)&v288[8] = v125;
                *(double *)&v288[16] = v126;
                *(_OWORD *)&v288[24] = xmmword_1012EA5D0;
                *(_OWORD *)&v288[40] = v241;
                *(_OWORD *)&v288[56] = v241;
                *(CFAbsoluteTime *)&v288[72] = AbsoluteTime;
                *(_DWORD *)__int128 buf = 0xFFFF;
                *(_DWORD *)&v288[80] = 0;
                *(void *)&v288[84] = 0xBFF0000000000000LL;
                *(void *)&v288[112] = 0xBFF0000000000000LL;
                *(void *)&v288[120] = 0x7FFFFFFFLL;
                *(_DWORD *)&v288[128] = (_DWORD)v118;
                __int128 v129 = -[CLLocation initWithClientLocation:](v128, "initWithClientLocation:", buf);
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                *(double *)(a1 + 360) = v69 + v130;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                *(float *)&double v131 = v69 + v131;
                *(_DWORD *)(a1 + 564) = LODWORD(v131);
                __int128 v132 = sub_10092E564([v16 mapItem], (uint64_t)v129);
                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                double v9 = 20.0;
                __int128 v133 = (os_log_s *)qword_101934898;
                if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
                {
                  -[CLLocation coordinate](-[CLPlacemark location](v132, "location"), "coordinate");
                  uint64_t v135 = v134;
                  -[CLLocation coordinate](-[CLPlacemark location](v132, "location"), "coordinate");
                  uint64_t v137 = v136;
                  -[CLLocation horizontalAccuracy](-[CLPlacemark location](v132, "location"), "horizontalAccuracy");
                  uint64_t v139 = v138;
                  -[CLLocation horizontalAccuracy](-[CLPlacemark location](v262, "location"), "horizontalAccuracy");
                  uint64_t v141 = v140;
                  [v16 confidence];
                  *(_DWORD *)__int128 buf = 134285057;
                  *(void *)__int16 v288 = v135;
                  *(_WORD *)&v288[8] = 2049;
                  *(void *)&v288[10] = v137;
                  *(_WORD *)&v288[18] = 2050;
                  *(void *)&v288[20] = v139;
                  *(_WORD *)&v288[28] = 2050;
                  *(void *)&v288[30] = v141;
                  *(_WORD *)&v288[38] = 1026;
                  *(_DWORD *)&v288[40] = v17;
                  *(_WORD *)&v288[44] = 1026;
                  *(_DWORD *)&v288[46] = v18;
                  *(_WORD *)&v288[50] = 2050;
                  *(void *)&v288[52] = v142;
                  _os_log_impl( (void *)&_mh_execute_header,  v133,  OS_LOG_TYPE_DEFAULT,  "#dsa updated mapItem after cross-check ,maplat,%{private}.7f,maplon,%{private}.7f,updatedacc,%{publi c}.2f,origacc,%{public}.2f, usertype,%{public}d, placeType,%{public}d,inferredconf,%{public}.2f",  buf,  0x40u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934890 != -1) {
                    dispatch_once(&qword_101934890, &stru_101861128);
                  }
                  uint64_t v203 = qword_101934898;
                  -[CLLocation coordinate](-[CLPlacemark location](v132, "location"), "coordinate");
                  double v205 = v204;
                  -[CLLocation coordinate](-[CLPlacemark location](v132, "location"), "coordinate");
                  uint64_t v207 = v206;
                  -[CLLocation horizontalAccuracy](-[CLPlacemark location](v132, "location"), "horizontalAccuracy");
                  double v209 = v208;
                  -[CLLocation horizontalAccuracy](-[CLPlacemark location](v262, "location"), "horizontalAccuracy");
                  double v211 = v210;
                  [v16 confidence];
                  int v271 = 134285057;
                  double v272 = v205;
                  __int16 v273 = 2049;
                  uint64_t v274 = v207;
                  __int16 v275 = 2050;
                  double v276 = v209;
                  __int16 v277 = 2050;
                  double v278 = v211;
                  __int16 v279 = 1026;
                  *(_DWORD *)int v280 = v17;
                  *(_WORD *)&v280[4] = 1026;
                  *(_DWORD *)&v280[6] = v18;
                  *(_WORD *)uint64_t v281 = 2050;
                  *(void *)&v281[2] = v212;
                  LODWORD(v23_Block_object_dispose(va, 8) = 64;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v203,  0LL,  "#dsa updated mapItem after cross-check ,maplat,%{private}.7f,maplon,%{private}.7f,updatedacc,%{publi c}.2f,origacc,%{public}.2f, usertype,%{public}d, placeType,%{public}d,inferredconf,%{public}.2f",  &v271,  v238);
                  double v214 = (uint8_t *)v213;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergenc y(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v213);
                  if (v214 != buf) {
                    free(v214);
                  }
                }

                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                double v143 = (os_log_s *)qword_101934898;
                if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
                {
                  double v260 = -[NSString UTF8String](-[CLPlacemark name](v132, "name"), "UTF8String");
                  int v257 = -[NSString UTF8String](-[CLPlacemark thoroughfare](v132, "thoroughfare"), "UTF8String");
                  int v254 = -[NSString UTF8String](-[CLPlacemark subThoroughfare](v132, "subThoroughfare"), "UTF8String");
                  uint64_t v252 = -[NSString UTF8String](-[CLPlacemark locality](v132, "locality"), "UTF8String");
                  uint64_t v250 = -[NSString UTF8String](-[CLPlacemark subLocality](v132, "subLocality"), "UTF8String");
                  int v248 = -[NSString UTF8String]( -[CLPlacemark administrativeArea](v132, "administrativeArea"),  "UTF8String");
                  uint64_t v246 = -[NSString UTF8String]( -[CLPlacemark subAdministrativeArea](v132, "subAdministrativeArea"),  "UTF8String");
                  int v244 = -[NSString UTF8String](-[CLPlacemark postalCode](v132, "postalCode"), "UTF8String");
                  __int128 v144 = -[NSString UTF8String](-[CLPlacemark ISOcountryCode](v132, "ISOcountryCode"), "UTF8String");
                  __int128 v145 = -[NSString UTF8String](-[CLPlacemark country](v132, "country"), "UTF8String");
                  __int128 v146 = -[NSString UTF8String](-[CLPlacemark inlandWater](v262, "inlandWater"), "UTF8String");
                  __int128 v147 = -[NSString UTF8String](-[CLPlacemark ocean](v132, "ocean"), "UTF8String");
                  *(_DWORD *)__int128 buf = 68292099;
                  *(_DWORD *)__int16 v288 = 0;
                  *(_WORD *)&v288[4] = 2082;
                  *(void *)&v288[6] = "";
                  *(_WORD *)&v288[14] = 2081;
                  *(void *)&v288[16] = v260;
                  *(_WORD *)&v288[24] = 2081;
                  *(void *)&v288[26] = v257;
                  *(_WORD *)&v288[34] = 2081;
                  *(void *)&v288[36] = v254;
                  *(_WORD *)&v288[44] = 2081;
                  *(void *)&v288[46] = v252;
                  *(_WORD *)&v288[54] = 2081;
                  *(void *)&v288[56] = v250;
                  *(_WORD *)&v288[64] = 2081;
                  *(void *)&v288[66] = v248;
                  *(_WORD *)&v288[74] = 2081;
                  *(void *)&v288[76] = v246;
                  *(_WORD *)&v288[84] = 2081;
                  *(void *)&v288[86] = v244;
                  *(_WORD *)&v288[94] = 2081;
                  *(void *)&v288[96] = v144;
                  *(_WORD *)&v288[104] = 2081;
                  *(void *)&v288[106] = v145;
                  *(_WORD *)&v288[114] = 2081;
                  *(void *)&v288[116] = v146;
                  p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
                  *(_WORD *)&v288[124] = 2081;
                  *(void *)&v288[126] = v147;
                  _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa,sending infered place address to client, name:%{private, location: escape_only}s, thoroughfare:%{private, location:escape_only}s, subThoroughfare:%{private, lo cation:escape_only}s, locality:%{private, location:escape_only}s, subLocality:%{private, loc ation:escape_only}s, administrativeArea:%{private, location:escape_only}s, subAdministrativeAr ea:%{private, location:escape_only}s, postalCode:%{private, location:escape_only}s, ISOcount ryCode:%{private, location:escape_only}s, country:%{private, location:escape_only}s, inlandW ater:%{private, location:escape_only}s, ocean:%{private, location:escape_only}s}",  buf,  0x8Au);
                }

                id v148 = objc_alloc(&OBJC_CLASS____CLPlaceInference);
                [v16 confidence];
                id v150 =  objc_msgSend( v148,  "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:",  v17,  v18,  v132,  v261,  objc_msgSend(v16, "preferredName"),  objc_msgSend(v16, "loiIdentifier"),  v149);
                if ([v242 count]) {
                  [v242 removeAllObjects];
                }
                [v16 confidence];
                *(void *)(a1 + 4_Block_object_dispose(va, 8) = v151;
                [v242 addObject:v150];
              }

              else
              {
                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                uint64_t v112 = (os_log_s *)qword_101934898;
                if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
                {
                  [v16 confidence];
                  *(_DWORD *)__int128 buf = 134349312;
                  *(double *)__int16 v288 = v69;
                  *(_WORD *)&v288[8] = 2050;
                  *(void *)&v288[10] = v113;
                  _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "#dsa did not meet the emergecy confidence and distance requirement,distance,%{public}.2f,confidence,%{public}.2f",  buf,  0x16u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934890 != -1) {
                    dispatch_once(&qword_101934890, &stru_101861128);
                  }
                  uint64_t v196 = qword_101934898;
                  [v16 confidence];
                  int v271 = 134349312;
                  double v272 = v69;
                  __int16 v273 = 2050;
                  uint64_t v274 = v197;
                  LODWORD(v23_Block_object_dispose(va, 8) = 22;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v196,  0LL,  "#dsa did not meet the emergecy confidence and distance requirement,distance,%{public}.2f,confidence,%{public}.2f",  &v271,  v238);
                  float v199 = (uint8_t *)v198;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergenc y(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v198);
                  if (v199 != buf) {
                    free(v199);
                  }
                }

                *(void *)(a1 + 52_Block_object_dispose(va, 8) = [v16 userTypeSource];
                *(void *)(a1 + 536) = [v16 userType];
                [v16 confidence];
                *(float *)&double v114 = v114;
                *(_DWORD *)(a1 + 552) = LODWORD(v114);
                *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 4;
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_101861108);
                }
                int64_t v115 = (os_log_s *)p_vtable[303];
                if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultErrorDistanceCheck",  buf,  2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934970 != -1) {
                    dispatch_once(&qword_101934970, &stru_101861108);
                  }
                  int v200 = p_vtable[303];
                  LOWORD(v271) = 0;
                  LODWORD(v23_Block_object_dispose(va, 8) = 2;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v200,  0LL,  "#era CA result - kERAResultErrorDistanceCheck",  &v271,  v238);
                  int v202 = (uint8_t *)v201;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergenc y(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v201);
                  if (v202 != buf) {
                    free(v202);
                  }
                }

                id v116 = [v16 userTypeSource];
                if (v116)
                {
                  if ((v116 & 2) != 0)
                  {
                    int v117 = 2;
                  }

                  else if ((v116 & 1) != 0)
                  {
                    int v117 = 3;
                  }

                  else if ((v116 & 4) != 0)
                  {
                    int v117 = 6;
                  }

                  else
                  {
                    int v117 = 0;
                  }
                }

                else
                {
                  int v117 = 0;
                }

                *(_DWORD *)(a1 + 292) = v117;
                __int128 v152 = (char *)[v16 userType];
                else {
                  int v153 = 0;
                }
                *(_DWORD *)(a1 + 296) = v153;
                [v16 confidence];
                *(void *)(a1 + 344) = v154;
                *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 4;
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_101861108);
                }
                uint64_t v155 = (os_log_s *)p_vtable[303];
                if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v155,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorDistanceCheck",  buf,  2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934970 != -1) {
                    dispatch_once(&qword_101934970, &stru_101861108);
                  }
                  __int128 v156 = p_vtable[303];
                  LOWORD(v271) = 0;
                  LODWORD(v23_Block_object_dispose(va, 8) = 2;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v156,  0LL,  "#dsa AWD result - kDSAResultErrorDistanceCheck",  &v271,  v238);
                  goto LABEL_214;
                }
              }
            }
          }

          else
          {
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_101861128);
            }
            uint64_t v42 = (os_log_s *)qword_101934898;
            if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
            {
              [v16 confidence];
              uint64_t v43 = *(void *)(a1 + 48);
              *(_DWORD *)__int128 buf = 134349826;
              *(void *)__int16 v288 = v44;
              *(_WORD *)&v288[8] = 2050;
              *(void *)&v288[10] = v43;
              *(_WORD *)&v288[18] = 2114;
              *(double *)&v288[20] = v23;
              *(_WORD *)&v288[28] = 1024;
              *(_DWORD *)&v288[30] = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "#dsa invalid confidence, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d",  buf,  0x26u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934890 != -1) {
                dispatch_once(&qword_101934890, &stru_101861128);
              }
              uint64_t v170 = qword_101934898;
              [v16 confidence];
              uint64_t v171 = *(void *)(a1 + 48);
              int v271 = 134349826;
              double v272 = v172;
              __int16 v273 = 2050;
              uint64_t v274 = v171;
              __int16 v275 = 2114;
              double v276 = v23;
              __int16 v277 = 1024;
              LODWORD(v27_Block_object_dispose(va, 8) = v17;
              LODWORD(v23_Block_object_dispose(va, 8) = 38;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v170,  0LL,  "#dsa invalid confidence, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d",  &v271,  v238);
              __int128 v174 = (uint8_t *)v173;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NS Array<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v173);
              if (v174 != buf) {
                free(v174);
              }
            }

            *(void *)(a1 + 52_Block_object_dispose(va, 8) = [v16 userTypeSource];
            *(void *)(a1 + 536) = [v16 userType];
            [v16 confidence];
            *(float *)&double v45 = v45;
            *(_DWORD *)(a1 + 552) = LODWORD(v45);
            *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 2;
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            __int128 v46 = (os_log_s *)p_vtable[303];
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#era CA result - invalid hunc kERAResultErrorConfidenceCheck",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_101861108);
              }
              __int128 v175 = p_vtable[303];
              LOWORD(v271) = 0;
              LODWORD(v23_Block_object_dispose(va, 8) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v175,  0LL,  "#era CA result - invalid hunc kERAResultErrorConfidenceCheck",  &v271,  v238);
              __int128 v177 = (uint8_t *)v176;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NS Array<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v176);
              if (v177 != buf) {
                free(v177);
              }
            }

            id v47 = [v16 userTypeSource];
            if (v47)
            {
              if ((v47 & 2) != 0)
              {
                int v48 = 2;
              }

              else if ((v47 & 1) != 0)
              {
                int v48 = 3;
              }

              else if ((v47 & 4) != 0)
              {
                int v48 = 6;
              }

              else
              {
                int v48 = 0;
              }
            }

            else
            {
              int v48 = 0;
            }

            *(_DWORD *)(a1 + 292) = v48;
            __int128 v84 = (char *)[v16 userType];
            else {
              int v85 = 0;
            }
            *(_DWORD *)(a1 + 296) = v85;
            [v16 confidence];
            *(void *)(a1 + 344) = v86;
            *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 2;
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            __int128 v87 = (os_log_s *)p_vtable[303];
            if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorConfidenceCheck",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_101861108);
              }
              __int128 v178 = p_vtable[303];
              LOWORD(v271) = 0;
              LODWORD(v23_Block_object_dispose(va, 8) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v178,  0LL,  "#dsa AWD result - kDSAResultErrorConfidenceCheck",  &v271,  v238);
              goto LABEL_214;
            }
          }
        }

        else
        {
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_101861128);
          }
          id v34 = (os_log_s *)qword_101934898;
          if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
          {
            [v16 confidence];
            uint64_t v35 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 134349826;
            *(void *)__int16 v288 = v36;
            *(_WORD *)&v288[8] = 2050;
            *(void *)&v288[10] = v35;
            *(_WORD *)&v288[18] = 2114;
            *(double *)&v288[20] = v23;
            *(_WORD *)&v288[28] = 1024;
            *(_DWORD *)&v288[30] = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "#dsa invalid hunc, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d",  buf,  0x26u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_101861128);
            }
            uint64_t v162 = qword_101934898;
            [v16 confidence];
            uint64_t v163 = *(void *)(a1 + 48);
            int v271 = 134349826;
            double v272 = v164;
            __int16 v273 = 2050;
            uint64_t v274 = v163;
            __int16 v275 = 2114;
            double v276 = v23;
            __int16 v277 = 1024;
            LODWORD(v27_Block_object_dispose(va, 8) = v17;
            LODWORD(v23_Block_object_dispose(va, 8) = 38;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v162,  0LL,  "#dsa invalid hunc, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d",  &v271,  v238);
            __int128 v166 = (uint8_t *)v165;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSAr ray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v165);
            if (v166 != buf) {
              free(v166);
            }
          }

          *(void *)(a1 + 52_Block_object_dispose(va, 8) = [v16 userTypeSource];
          *(void *)(a1 + 536) = [v16 userType];
          [v16 confidence];
          *(float *)&double v37 = v37;
          *(_DWORD *)(a1 + 552) = LODWORD(v37);
          *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 7;
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          id v38 = (os_log_s *)p_vtable[303];
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "#era CA result - invalid hunc KERAResultErrorPlacemarkUnavailable",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            __int128 v167 = p_vtable[303];
            LOWORD(v271) = 0;
            LODWORD(v23_Block_object_dispose(va, 8) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v167,  0LL,  "#era CA result - invalid hunc KERAResultErrorPlacemarkUnavailable",  &v271,  v238);
            __int128 v169 = (uint8_t *)v168;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSAr ray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v168);
            if (v169 != buf) {
              free(v169);
            }
          }

          id v39 = [v16 userTypeSource];
          if (v39)
          {
            if ((v39 & 2) != 0)
            {
              int v40 = 2;
            }

            else if ((v39 & 1) != 0)
            {
              int v40 = 3;
            }

            else if ((v39 & 4) != 0)
            {
              int v40 = 6;
            }

            else
            {
              int v40 = 0;
            }
          }

          else
          {
            int v40 = 0;
          }

          *(_DWORD *)(a1 + 292) = v40;
          uint64_t v79 = (char *)[v16 userType];
          else {
            int v80 = 0;
          }
          *(_DWORD *)(a1 + 296) = v80;
          [v16 confidence];
          *(void *)(a1 + 344) = v81;
          *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 7;
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          uint64_t v82 = (os_log_s *)p_vtable[303];
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - invalid hunc kDSAResultErrorPlacemarkUnavailable",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            unint64_t v83 = p_vtable[303];
            LOWORD(v271) = 0;
            LODWORD(v23_Block_object_dispose(va, 8) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v83,  0LL,  "#dsa AWD result - invalid hunc kDSAResultErrorPlacemarkUnavailable",  &v271,  v238);
LABEL_214:
            __int128 v179 = (uint8_t *)v54;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSAr ray<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v54);
            if (v179 != buf) {
              free(v179);
            }
          }
        }
      }

      else
      {
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_101861128);
        }
        uint64_t v26 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          [v16 confidence];
          uint64_t v27 = *(void *)(a1 + 48);
          *(_DWORD *)__int128 buf = 134349826;
          *(void *)__int16 v288 = v28;
          *(_WORD *)&v288[8] = 2050;
          *(void *)&v288[10] = v27;
          *(_WORD *)&v288[18] = 2114;
          *(double *)&v288[20] = v23;
          *(_WORD *)&v288[28] = 1024;
          *(_DWORD *)&v288[30] = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#dsa invalid usertype and sourcetype, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d",  buf,  0x26u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_101861128);
          }
          uint64_t v157 = qword_101934898;
          [v16 confidence];
          uint64_t v158 = *(void *)(a1 + 48);
          int v271 = 134349826;
          double v272 = v159;
          __int16 v273 = 2050;
          uint64_t v274 = v158;
          __int16 v275 = 2114;
          double v276 = v23;
          __int16 v277 = 1024;
          LODWORD(v27_Block_object_dispose(va, 8) = v17;
          LODWORD(v23_Block_object_dispose(va, 8) = 38;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v157,  0LL,  "#dsa invalid usertype and sourcetype, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d",  &v271,  v238);
          __int128 v161 = (uint8_t *)v160;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArra y<RTPlaceInference *> *, NSArray<CLLocation *> *)",  "%s\n",  v160);
          if (v161 != buf) {
            free(v161);
          }
        }

        *(void *)(a1 + 52_Block_object_dispose(va, 8) = [v16 userTypeSource];
        *(void *)(a1 + 536) = [v16 userType];
        [v16 confidence];
        *(float *)&double v29 = v29;
        *(_DWORD *)(a1 + 552) = LODWORD(v29);
        id v30 = [v16 userTypeSource];
        if (v30)
        {
          if ((v30 & 2) != 0)
          {
            int v31 = 2;
          }

          else if ((v30 & 1) != 0)
          {
            int v31 = 3;
          }

          else if ((v30 & 4) != 0)
          {
            int v31 = 6;
          }

          else
          {
            int v31 = 0;
          }
        }

        else
        {
          int v31 = 0;
        }

        *(_DWORD *)(a1 + 292) = v31;
        __int128 v49 = (char *)[v16 userType];
        else {
          int v50 = 0;
        }
        *(_DWORD *)(a1 + 296) = v50;
        [v16 confidence];
        *(void *)(a1 + 344) = v51;
        if (v17 - 1 >= 4)
        {
          *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 3;
          *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 3;
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          __int16 v55 = (os_log_s *)p_vtable[303];
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorCategoryCheck",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            uint64_t v56 = p_vtable[303];
            LOWORD(v271) = 0;
            LODWORD(v23_Block_object_dispose(va, 8) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  0LL,  "#dsa AWD result - kDSAResultErrorCategoryCheck",  &v271,  v238);
            goto LABEL_214;
          }
        }

        else if ((v25 & 1) == 0)
        {
          *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 5;
          *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 5;
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101861108);
          }
          uint64_t v52 = (os_log_s *)p_vtable[303];
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorSourceCheck",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101861108);
            }
            __int16 v53 = p_vtable[303];
            LOWORD(v271) = 0;
            LODWORD(v23_Block_object_dispose(va, 8) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v53,  0LL,  "#dsa AWD result - kDSAResultErrorSourceCheck",  &v271,  v238);
            goto LABEL_214;
          }
        }
      }

      int v15 = (char *)v15 + 1;
    }

    while (v266 != v15);
    id v215 = [obj countByEnumeratingWithState:&v267 objects:v291 count:16];
    id v266 = v215;
    if (v215) {
      continue;
    }
    return v242;
  }

void sub_10092A8A4(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 41))
  {
    id v6 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
    objc_msgSend( v6,  "setObject:forKeyedSubscript:",  a2,  @"kCLConnectionMessagePlaceInferencePlaceInferenceKey",  v6);
    [v6 setObject:a3 forKeyedSubscript:@"kCLConnectionMessagePlaceInferencePlaceInferenceFallbackLocationKey"];
    sub_10092EA74(a1, &v23);
    *(_BYTE *)(a1 + 41) = 0;
    if ([a2 count]
      && (objc_msgSend( objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"),  "coordinate"),  double v8 = v7,  objc_msgSend( objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"),  "coordinate"),  v9 >= -180.0)
      && v8 <= 90.0
      && v8 >= -90.0
      && v9 <= 180.0
      && (fabs(v8) >= 0.0000001 || fabs(v9) >= 0.0000001)
      && ([*(id *)(a1 + 144) coordinate],
          double v11 = v10,
          [*(id *)(a1 + 144) coordinate],
          v12 >= -180.0)
      && v11 <= 90.0
      && v11 >= -90.0
      && v12 <= 180.0
      && (fabs(v11) >= 0.0000001 || fabs(v12) >= 0.0000001))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate");
      double v17 = v16;
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate");
      double v19 = v18;
      [*(id *)(a1 + 144) coordinate];
      double v21 = v20;
      [*(id *)(a1 + 144) coordinate];
      *(double *)(a1 + 232) = sub_100D2DBDC((double *)(a1 + 608), v17, v19, v21, v22, 0.0);
    }

    else
    {
      *(_BYTE *)(a1 + 245) = 0;
    }

    [*(id *)(a1 + 144) horizontalAccuracy];
    *(void *)(a1 + 216) = v13;
    *(_DWORD *)(a1 + 240) = [*(id *)(a1 + 144) signalEnvironmentType];
    sub_10092E84C(a1);

    *(void *)(a1 + 144) = 0LL;
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v14 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v23 = 68289026LL;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dsa Trying to send a result while the request is stopped}",  (uint8_t *)&v23,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
    }

    int v15 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v23 = 68289026LL;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dsa Trying to send a result while the request is stopped",  "{msg%{public}.0s:#dsa Trying to send a result while the request is stopped}",  (uint8_t *)&v23,  0x12u);
    }
  }

void sub_10092AC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768LL;
  _OWORD v8[2] = sub_10092ACD8;
  void v8[3] = &unk_101860F00;
  double v8[4] = a3;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  double v11 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    uint64_t v7 = *(void *)(a1 + 64);
    v8[5] = a2;
    __int128 v9 = *(_OWORD *)(a1 + 32);
  }

void sub_10092ACC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092ACD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 32))
  {
    sub_100927F78( v2,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  6LL,  0LL));
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101861128);
    }
    uint64_t v3 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v30 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#dsa mecard returned error %@", buf, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101861128);
      }
      uint64_t v15 = *(void *)(a1 + 32);
      int v27 = 138412290;
      uint64_t v28 = v15;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#dsa mecard returned error %@",  &v27,  12);
      double v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    *(_DWORD *)(v2 + 32_Block_object_dispose(va, 8) = 8;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v5 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorMeCardFetchFailed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v27) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultErrorMeCardFetchFailed",  &v27,  v20);
      double v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    *(_DWORD *)(v2 + sub_10000AE14(v1 + 520) = 8;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    unint64_t v6 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultErrorMeCardFetchFailed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v27) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kERAResultErrorMeCardFetchFailed",  &v27,  v20);
      double v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    __int128 v9 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(v2 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_10092B1A8;
    block[3] = &unk_101860F00;
    uint64_t v11 = *(void *)(a1 + 72);
    __int128 v10 = *(std::__shared_weak_count **)(a1 + 80);
    uint64_t v24 = v2;
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    if (v10)
    {
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }

    __int128 v14 = *(_OWORD *)(a1 + 48);
    int8x16_t v22 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    __int128 v23 = v14;
    dispatch_async(v9, block);
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
  }

void sub_10092B1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768LL;
  void v9[2] = sub_10092B27C;
  v9[3] = &unk_101860F00;
  __int128 v4 = *(_OWORD *)(a1 + 64);
  __int128 v10 = *(_OWORD *)(a1 + 32);
  __int128 v12 = v4;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  unint64_t v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    uint64_t v8 = *(void *)(a1 + 80);
    __int128 v11 = *(_OWORD *)(a1 + 48);
  }

void sub_10092B264( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092B27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 64);
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  v9[0] = *(void *)(a1 + 72);
  v9[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  sub_10092B304(v5, v4, a3, v9, *(void **)(a1 + 48), *(void **)(a1 + 56));
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_10092B2EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10092B304(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6)
{
  __int128 v11 = operator new(0x20uLL);
  v11[1] = 0LL;
  __int128 v12 = v11 + 1;
  void v11[2] = 0LL;
  void *v11 = off_10182F1B8;
  *((_DWORD *)v11 + 6) = 0;
  v30[2] = (uint64_t)(v11 + 3);
  int v31 = (std::__shared_weak_count *)v11;
  if ([*(id *)(a1 + 600) isEqualToDictionary:a2])
  {
    unint64_t v13 = (std::__shared_weak_count *)a4[1];
    v30[0] = *a4;
    v30[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        unint64_t v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
    }

    sub_10092B770(a1, a5, v30, a6);
    if (!v13) {
      goto LABEL_20;
    }
LABEL_19:
    std::__shared_weak_count::__release_weak(v13);
    goto LABEL_20;
  }

  *(void *)(a1 + 600) = a2;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3321888768LL;
  v26[2] = sub_10092C994;
  void v26[3] = &unk_101861050;
  v26[6] = a1;
  v26[7] = v11 + 3;
  int v27 = (std::__shared_weak_count *)v11;
  do
    unint64_t v16 = __ldxr(v12);
  while (__stxr(v16 + 1, v12));
  uint64_t v18 = *a4;
  double v17 = (std::__shared_weak_count *)a4[1];
  v26[4] = a5;
  uint64_t v28 = v18;
  double v29 = v17;
  if (v17)
  {
    double v19 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      unint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }

  v26[5] = a6;
  [a2 enumerateKeysAndObjectsUsingBlock:v26];
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  unint64_t v13 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      goto LABEL_19;
    }
  }

void sub_10092B500( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  sub_10000AE14(v20);
  sub_10000AE14(v21 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_10092B544(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_10092B568(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

id sub_10092B578(uint64_t a1, void *a2)
{
  id v16 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v18;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(a2);
        }
        unint64_t v6 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        unint64_t v7 = sub_10092E14C((unint64_t)[v6 userType]);
        uint64_t v8 = sub_10092E2DC((unint64_t)[v6 placeType]);
        __int128 v9 = sub_10092E47C(objc_msgSend(objc_msgSend(v6, "mapItem"), "location"));
        __int128 v10 = sub_10092E47C([v6 referenceLocation]);
        __int128 v11 = sub_10092E564([v6 mapItem], (uint64_t)v9);
        id v12 = objc_alloc(&OBJC_CLASS____CLPlaceInference);
        [v6 confidence];
        objc_msgSend( v16,  "addObject:",   objc_msgSend( v12,  "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:",  v7,  v8,  v11,  v10,  objc_msgSend(v6, "preferredName"),  objc_msgSend(v6, "loiIdentifier"),  v13));
      }

      id v3 = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v3);
  }

  return v16;
}

uint64_t sub_10092B73C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 88);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(result + 8_Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    id v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_10092B760(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 88);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10092B770(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  id v44 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  [*(id *)(a1 + 592) removeAllObjects];
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  unint64_t v6 = *(void **)(a1 + 584);
  id v7 = [v6 countByEnumeratingWithState:&v46 objects:v58 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v47;
    do
    {
      __int128 v9 = 0LL;
      do
      {
        if (*(void *)v47 != v8) {
          objc_enumerationMutation(v6);
        }
        __int128 v10 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)v9);
        double v11 = sub_10092C020(a1, [v10 meCardMapItem], a2);
        if (v11 >= 50.0)
        {
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_101861128);
          }
          __int128 v14 = (os_log_s *)qword_101934898;
          if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
          {
            id v15 = [v10 meCardString];
            *(_DWORD *)__int128 buf = 138478083;
            id v55 = v15;
            __int16 v56 = 2050;
            double v57 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#dsa %{private}@ address is %{public}.2f away from current location ",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_101861128);
            }
            uint64_t v20 = qword_101934898;
            id v21 = [v10 meCardString];
            int v50 = 138478083;
            id v51 = v21;
            __int16 v52 = 2050;
            double v53 = v11;
            LODWORD(v41) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v20,  0LL,  "#dsa %{private}@ address is %{public}.2f away from current location ",  &v50,  v41);
            __int128 v23 = (uint8_t *)v22;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackD ropper, _CLPlaceInference *)",  "%s\n",  v22);
            if (v23 != buf) {
              free(v23);
            }
          }
        }

        else
        {
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_101861128);
          }
          id v12 = (os_log_s *)qword_101934898;
          if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
          {
            id v13 = [v10 meCardString];
            *(_DWORD *)__int128 buf = 138478083;
            id v55 = v13;
            __int16 v56 = 2050;
            double v57 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#dsa adding mecard address %{private}@,deviation,%{public}.2f",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934890 != -1) {
              dispatch_once(&qword_101934890, &stru_101861128);
            }
            uint64_t v16 = qword_101934898;
            id v17 = [v10 meCardString];
            int v50 = 138478083;
            id v51 = v17;
            __int16 v52 = 2050;
            double v53 = v11;
            LODWORD(v41) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v16,  0LL,  "#dsa adding mecard address %{private}@,deviation,%{public}.2f",  &v50,  v41);
            __int128 v19 = (uint8_t *)v18;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackD ropper, _CLPlaceInference *)",  "%s\n",  v18);
            if (v19 != buf) {
              free(v19);
            }
          }

          objc_msgSend(*(id *)(a1 + 592), "addObject:", objc_msgSend(v10, "meCardString"));
        }

        __int128 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v24 = [v6 countByEnumeratingWithState:&v46 objects:v58 count:16];
      id v7 = v24;
    }

    while (v24);
  }

  if ((unint64_t)[*(id *)(a1 + 592) count] <= 1 && objc_msgSend(*(id *)(a1 + 592), "count"))
  {
    id v25 = [*(id *)(a1 + 592) lastObject];
    uint64_t v26 = (std::__shared_weak_count *)a3[1];
    v45[0] = *a3;
    v45[1] = (uint64_t)v26;
    if (v26)
    {
      p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
      do
        unint64_t v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
    }

    sub_10092C3D4(a1, a4, (uint64_t)v25, v45);
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101861128);
    }
    double v29 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = [*(id *)(a1 + 592) count];
      *(_DWORD *)__int128 buf = 134217984;
      id v55 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "#dsa no valid address in contacts.skip sending dsa %lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101861128);
      }
      uint64_t v33 = qword_101934898;
      id v34 = [*(id *)(a1 + 592) count];
      int v50 = 134217984;
      id v51 = v34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  0LL,  "#dsa no valid address in contacts.skip sending dsa %lu",  &v50);
      uint64_t v36 = (uint8_t *)v35;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper , _CLPlaceInference *)",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    [v44 removeAllObjects];
    sub_10092A8A4(a1, v44, 0LL);
    *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 8;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    int v31 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultErrorMeCardFetchFailed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v50) = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultErrorMeCardFetchFailed",  &v50,  v41);
      id v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper , _CLPlaceInference *)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 8;
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    unint64_t v32 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultErrorMeCardFetchFailed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      LOWORD(v50) = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kERAResultErrorMeCardFetchFailed",  &v50,  v41);
      int v40 = (uint8_t *)v39;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper , _CLPlaceInference *)",  "%s\n",  v39);
      if (v40 != buf) {
        free(v40);
      }
    }
  }

void sub_10092C000(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_10092C020(uint64_t a1, void *a2, void *a3)
{
  double v7 = v6;
  [a2 coordinate];
  double v9 = -1.0;
  if (v8 >= -180.0 && v7 <= 90.0 && v7 >= -90.0 && v8 <= 180.0 && (fabs(v7) >= 0.0000001 || fabs(v8) >= 0.0000001))
  {
    objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
    double v11 = v10;
    objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
    if (v12 >= -180.0
      && v11 <= 90.0
      && v11 >= -90.0
      && v12 <= 180.0
      && (fabs(v11) >= 0.0000001 || fabs(v12) >= 0.0000001))
    {
      [a2 coordinate];
      double v14 = v13;
      [a2 coordinate];
      double v16 = v15;
      objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
      double v18 = v17;
      objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
      double v9 = sub_100D2DBDC((double *)(a1 + 608), v14, v16, v18, v19, 0.0);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101861128);
      }
      uint64_t v20 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        [a2 coordinate];
        uint64_t v22 = v21;
        [a2 coordinate];
        uint64_t v24 = v23;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        uint64_t v26 = v25;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        *(_DWORD *)__int128 buf = 134284545;
        uint64_t v50 = v22;
        __int16 v51 = 2049;
        uint64_t v52 = v24;
        __int16 v53 = 2049;
        uint64_t v54 = v26;
        __int16 v55 = 2049;
        uint64_t v56 = v27;
        __int16 v57 = 2050;
        double v58 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#dsa mecard geodetic location,lat,%{private}.7f,lon,%{private}.7f,currentlat,%{private}.7f,currentlon,%{privat e}.7f,distance,%{public}.2f",  buf,  0x34u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_101861128);
        }
        uint64_t v29 = qword_101934898;
        [a2 coordinate];
        uint64_t v31 = v30;
        [a2 coordinate];
        uint64_t v33 = v32;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        uint64_t v35 = v34;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        int v39 = 134284545;
        uint64_t v40 = v31;
        __int16 v41 = 2049;
        uint64_t v42 = v33;
        __int16 v43 = 2049;
        uint64_t v44 = v35;
        __int16 v45 = 2049;
        uint64_t v46 = v36;
        __int16 v47 = 2050;
        double v48 = v9;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  0LL,  "#dsa mecard geodetic location,lat,%{private}.7f,lon,%{private}.7f,currentlat,%{private}.7f,currentlon,%{privat e}.7f,distance,%{public}.2f",  &v39,  52);
        id v38 = (uint8_t *)v37;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLPlaceInferenceSubscription::calculateDistanceBetweenLocations(CLLocation *, NSArray<CLLocation *> *)",  "%s\n",  v37);
        if (v38 != buf) {
          free(v38);
        }
      }
    }
  }

  return v9;
}

void sub_10092C3D4(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768LL;
  _OWORD v8[2] = sub_10092D1F4;
  void v8[3] = &unk_101861088;
  uint64_t v5 = *a4;
  unint64_t v4 = (std::__shared_weak_count *)a4[1];
  void v8[6] = a1;
  v8[7] = v5;
  double v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  double v8[4] = a2;
  v8[5] = a3;
  objc_msgSend( objc_msgSend(a2, "placemark"),  "fetchFormattedAddress:queue:",  v8,  objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"));
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_10092C480( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  _Unwind_Resume(exception_object);
}

id sub_10092C498(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(a1 + 680) allKeys];
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  obuint64_t j = v4;
  id result = [v4 countByEnumeratingWithState:&v39 objects:v48 count:16];
  id v33 = result;
  if (result)
  {
    uint64_t v32 = *(void *)v40;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v40 != v32) {
          objc_enumerationMutation(obj);
        }
        uint64_t v34 = v6;
        uint64_t v7 = *(void *)(*((void *)&v39 + 1) + 8 * v6);
        double v8 = -[NSRegularExpression matchesInString:options:range:]( +[NSRegularExpression regularExpressionWithPattern:options:error:]( NSRegularExpression,  "regularExpressionWithPattern:options:error:",  v7,  1,  0),  "matchesInString:options:range:",  a2,  0,  0,  [a2 length]);
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        id v9 = -[NSArray countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v35,  v47,  16LL);
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v36;
          do
          {
            double v12 = 0LL;
            do
            {
              if (*(void *)v36 != v11) {
                objc_enumerationMutation(v8);
              }
              double v13 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v12);
              double v14 = objc_autoreleasePoolPush();
              id v15 = [v13 range];
              id v17 = objc_msgSend(a2, "substringWithRange:", v15, v16);
              if (v17)
              {
                id v18 = v17;
                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                double v19 = (os_log_s *)qword_101934898;
                if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  id v46 = v18;
                  _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "#dsa substringForMatch matched %@",  buf,  0xCu);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934890 != -1) {
                    dispatch_once(&qword_101934890, &stru_101861128);
                  }
                  int v43 = 138412290;
                  id v44 = v18;
                  LODWORD(v30) = 12;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#dsa substringForMatch matched %@",  &v43,  v30);
                  uint64_t v24 = (uint8_t *)v23;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::enumerateSubPremisesForAddressString(NSString *)",  "%s\n",  v23);
                  if (v24 != buf) {
                    free(v24);
                  }
                }

                if ([*(id *)(a1 + 680) objectForKey:v7])
                {
                  unsigned int v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 680), "objectForKey:", v7), "integerValue");
                }

                if (qword_101934890 != -1) {
                  dispatch_once(&qword_101934890, &stru_101861128);
                }
                uint64_t v21 = (os_log_s *)qword_101934898;
                if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
                {
                  int v22 = *(_DWORD *)(a1 + 672);
                  *(_DWORD *)__int128 buf = 67109120;
                  LODWORD(v46) = v22;
                  _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#dsa sub-premise type is, %u",  buf,  8u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934890 != -1) {
                    dispatch_once(&qword_101934890, &stru_101861128);
                  }
                  int v25 = *(_DWORD *)(a1 + 672);
                  int v43 = 67109120;
                  LODWORD(v44) = v25;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#dsa sub-premise type is, %u",  &v43);
                  uint64_t v27 = (uint8_t *)v26;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::enumerateSubPremisesForAddressString(NSString *)",  "%s\n",  v26);
                  if (v27 != buf) {
                    free(v27);
                  }
                }
              }

              objc_autoreleasePoolPop(v14);
              double v12 = (char *)v12 + 1;
            }

            while (v10 != v12);
            id v28 = -[NSArray countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v35,  v47,  16LL);
            id v10 = v28;
          }

          while (v28);
        }

        uint64_t v6 = v34 + 1;
      }

      while ((id)(v34 + 1) != v33);
      id result = [obj countByEnumeratingWithState:&v39 objects:v48 count:16];
      id v33 = result;
    }

    while (result);
  }

  int v29 = *(_DWORD *)(a1 + 672);
  *(_DWORD *)(a1 + 376) = v29;
  *(_DWORD *)(a1 + 572) = v29;
  return result;
}

id sub_10092C994(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1[6];
  [*(id *)(v5 + 584) removeAllObjects];
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id result = [a3 countByEnumeratingWithState:&v36 objects:v52 count:16];
  id v7 = result;
  if (result)
  {
    uint64_t v8 = *(void *)v37;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v37 != v8) {
          objc_enumerationMutation(a3);
        }
        id v10 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)v9);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_101861128);
        }
        uint64_t v11 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412803;
          uint64_t v47 = a2;
          __int16 v48 = 2113;
          __int128 v49 = a3;
          __int16 v50 = 2112;
          __int16 v51 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#dsa address type in mecard is %@, %{private}@, %@{private}",  buf,  0x20u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_101861128);
          }
          int v40 = 138412803;
          uint64_t v41 = a2;
          __int16 v42 = 2113;
          int v43 = a3;
          __int16 v44 = 2112;
          __int16 v45 = v10;
          LODWORD(v2_Block_object_dispose(va, 8) = 32;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#dsa address type in mecard is %@, %{private}@, %@{private}",  &v40,  v28);
          uint64_t v27 = (uint8_t *)v26;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::enumerateOverAddressDictionaryAndSendInferredResults(NSDictionary<NSNumbe r *,NSArray<NSString *> *> *, NSError *, CLCallbackDropper, NSArray<CLLocation *> *, _CLPlaceInference *)_block_invoke",  "%s\n",  v26);
          if (v27 != buf) {
            free(v27);
          }
        }

        double v12 = objc_alloc_init(&OBJC_CLASS___CLGeocoder);
        -[CLGeocoder _setResponseSilo:](v12, "_setResponseSilo:", [*(id *)(v5 + 8) silo]);
        sub_10092C498(v5, v10);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3321888768LL;
        void v32[2] = sub_10092CDE4;
        v32[3] = &unk_101860FE0;
        v32[4] = v10;
        uint64_t v14 = a1[7];
        double v13 = (std::__shared_weak_count *)a1[8];
        v32[7] = v5;
        v32[8] = v14;
        id v33 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }

        uint64_t v17 = a1[9];
        id v18 = (std::__shared_weak_count *)a1[10];
        v32[5] = a1[4];
        uint64_t v34 = v17;
        __int128 v35 = v18;
        if (v18)
        {
          p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
          do
            unint64_t v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          uint64_t v17 = a1[9];
          id v18 = (std::__shared_weak_count *)a1[10];
        }

        v32[6] = a1[5];
        ++*(_DWORD *)a1[7];
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3321888768LL;
        v30[2] = sub_10092D160;
        uint64_t v30[3] = &unk_101861018;
        v30[5] = v17;
        uint64_t v31 = v18;
        if (v18)
        {
          uint64_t v21 = (unint64_t *)&v18->__shared_weak_owners_;
          do
            unint64_t v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }

        void v30[4] = v32;
        -[CLGeocoder geocodeAddressString:completionHandler:](v12, "geocodeAddressString:completionHandler:", v10, v30);
        if (v31) {
          std::__shared_weak_count::__release_weak(v31);
        }
        if (v35) {
          std::__shared_weak_count::__release_weak(v35);
        }
        uint64_t v23 = v33;
        if (v33)
        {
          uint64_t v24 = (unint64_t *)&v33->__shared_owners_;
          do
            unint64_t v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }

        id v9 = (char *)v9 + 1;
      }

      while (v9 != v7);
      id result = [a3 countByEnumeratingWithState:&v36 objects:v52 count:16];
      id v7 = result;
    }

    while (result);
  }

  return result;
}

void sub_10092CDB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, std::__shared_weak_count *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, std::__shared_weak_count *a34)
{
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (a34) {
    std::__shared_weak_count::__release_weak(a34);
  }
  sub_10000AE14(a12);
  _Unwind_Resume(a1);
}

void sub_10092CDE4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a3)
  {
    --**(_DWORD **)(a1 + 64);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101861128);
    }
    uint64_t v6 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v27 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#dsa geocode returned error %@", buf, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101861128);
      }
      int v24 = 138412290;
      uint64_t v25 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#dsa geocode returned error %@",  &v24,  12);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLPlaceInferenceSubscription::enumerateOverAddressDictionaryAndSendInferredResults(NSDictionary<NSNumber *, NSArray<NSString *> *> *, NSError *, CLCallbackDropper, NSArray<CLLocation *> *, _CLPlaceInference *)_block_invoke",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

  else
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v10 = [a2 countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v21;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(a2);
          }
          double v13 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
          uint64_t v14 = objc_alloc_init(&OBJC_CLASS___CLMeCardEntry);
          -[CLMeCardEntry setMeCardString:](v14, "setMeCardString:", *(void *)(a1 + 32));
          -[CLMeCardEntry setMeCardMapItem:](v14, "setMeCardMapItem:", [v13 location]);
          [*(id *)(v4 + 584) addObject:v14];
        }

        id v10 = [a2 countByEnumeratingWithState:&v20 objects:v28 count:16];
      }

      while (v10);
    }

    --**(_DWORD **)(a1 + 64);
  }

  if (!**(_DWORD **)(a1 + 64))
  {
    id v15 = *(void **)(a1 + 40);
    unint64_t v16 = *(std::__shared_weak_count **)(a1 + 88);
    v19[0] = *(void *)(a1 + 80);
    v19[1] = (uint64_t)v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }

    sub_10092B770(v4, v15, v19, *(void **)(a1 + 48));
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
  }

void sub_10092D0D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10092D0F0(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    id v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  uint64_t v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return result;
}

uint64_t sub_10092D134(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_10000AE14(a1 + 64);
}

uint64_t sub_10092D160(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1)
  {
    id result = *(void *)(result + 32);
    if (*(void *)(v1 + 8) != -1LL) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }

  return result;
}

void *sub_10092D184(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    id v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  uint64_t v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  return result;
}

uint64_t sub_10092D1C8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_10000AE14(a1 + 56);
}

void sub_10092D1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10092D268;
  v5[3] = &unk_10184F428;
  uint64_t v3 = *(void *)(a1 + 32);
  v5[4] = a3;
  void v5[5] = v3;
  v5[6] = a2;
  __int128 v6 = *(_OWORD *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    if (*(void *)(v4 + 8) != -1LL) {
      sub_10092D268((uint64_t)v5);
    }
  }

void sub_10092D268(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 32))
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101861128);
    }
    uint64_t v3 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "#dsa fetchformattedaddress returned error %@",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101861128);
      }
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 138412290;
      uint64_t v9 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#dsa fetchformattedaddress returned error %@",  &v8,  12);
      unint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLPlaceInferenceSubscription::fetchFormattedAddressAndSendResults(_CLPlaceInference *, NSString *, CLCallba ckDropper)_block_invoke",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    sub_100927F78( v2,  (uint64_t)+[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  6LL,  0LL));
  }

  else
  {
    sub_10092D48C(*(void *)(a1 + 64), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
  }

void sub_10092D48C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101861128);
  }
  uint64_t v9 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138477827;
    id v46 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#dsa meCardAddress  %{private}@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101861128);
    }
    int v39 = 138477827;
    int v40 = a4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#dsa meCardAddress  %{private}@",  &v39,  12);
    uint64_t v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  id v10 = [a4 stringByReplacingOccurrencesOfString:@"\n" withString:@","];
  id v11 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "name"), @"Name");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "thoroughfare"),  @"Thoroughfare");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "subThoroughfare"),  @"SubThoroughfare");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "locality"),  @"City");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "subLocality"),  @"SubLocality");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "administrativeArea"),  @"State");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "subAdministrativeArea"),  @"SubAdministrativeArea");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "postalCode"),  @"ZIP");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "ISOcountryCode"),  @"CountryCode");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "country"),  @"Country");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "inlandWater"),  @"InlandWater");
  objc_msgSend( v11,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a2, "placemark"), "ocean"),  @"Ocean");
  double v12 = a3;
  [v11 setObject:a3 forKeyedSubscript:@"FormattedAddressLines"];
  double v13 =  -[CLPlacemark initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:meCardAddress:]( [CLPlacemark alloc],  "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:meCardAddress:",  objc_msgSend(objc_msgSend(a2, "placemark"), "location"),  v11,  0,  objc_msgSend(objc_msgSend(a2, "placemark"), "areasOfInterest"),  0,  0,  v10);
  id v14 = objc_alloc(&OBJC_CLASS____CLPlaceInference);
  id v15 = [a2 userType];
  id v16 = [a2 placeType];
  id v17 = [a2 referenceLocation];
  [a2 confidence];
  id v19 =  objc_msgSend( v14,  "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:",  v15,  v16,  v13,  v17,  objc_msgSend(a2, "preferredName"),  objc_msgSend(a2, "_loiIdentifier"),  v18);
  [v8 addObject:v19];
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101861128);
  }
  __int128 v20 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = objc_msgSend(objc_msgSend(v19, "placemark"), "formattedAddressLines");
    id v22 = objc_msgSend(objc_msgSend(v19, "placemark"), "mecardAddress");
    *(_DWORD *)__int128 buf = 138478339;
    id v46 = v12;
    __int16 v47 = 2113;
    id v48 = v21;
    __int16 v49 = 2113;
    id v50 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#dsa fetchformattedaddress received %{private}@, updated address in placemark  %{private}@, address in mecard %{private}@",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101861128);
    }
    uint64_t v29 = qword_101934898;
    id v30 = objc_msgSend(objc_msgSend(v19, "placemark"), "formattedAddressLines");
    id v31 = objc_msgSend(objc_msgSend(v19, "placemark"), "mecardAddress");
    int v39 = 138478339;
    int v40 = v12;
    __int16 v41 = 2113;
    id v42 = v30;
    __int16 v43 = 2113;
    id v44 = v31;
    LODWORD(v3_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  0LL,  "#dsa fetchformattedaddress received %{private}@, updated address in placemark  %{private}@, address in mecard %{private}@",  &v39,  v38);
    id v33 = (uint8_t *)v32;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)",  "%s\n",  v32);
    if (v33 != buf) {
      free(v33);
    }
  }

  *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 1;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  __int128 v23 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#dsa AWD result - kDSAResultSuccess, caching it",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    LOWORD(v39) = 0;
    LODWORD(v3_Block_object_dispose(va, 8) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#dsa AWD result - kDSAResultSuccess, caching it",  &v39,  v38);
    __int128 v35 = (uint8_t *)v34;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)",  "%s\n",  v34);
    if (v35 != buf) {
      free(v35);
    }
  }

  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 248);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a1 + 264));
  __int128 v24 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a1 + 472) = v24;
  *(_OWORD *)(a1 + 48_Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a1 + 500) = *(_OWORD *)(a1 + 364);
  __int128 v25 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 440) = v25;
  *(_DWORD *)(a1 + sub_10000AE14(v1 + 520) = 1;
  sub_10092DD90(a1);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v26 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#era CA result - kERAResultSuccess, caching it in CLAnalyticsLogger",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    LOWORD(v39) = 0;
    LODWORD(v3_Block_object_dispose(va, 8) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "#era CA result - kERAResultSuccess, caching it in CLAnalyticsLogger",  &v39,  v38);
    __int128 v37 = (uint8_t *)v36;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)",  "%s\n",  v36);
    if (v37 != buf) {
      free(v37);
    }
  }

  sub_10092A8A4(a1, v8, 0LL);
}

void sub_10092DD90(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 520);
  *(_DWORD *)__int128 buf = 173;
  v26[0] = v2;
  int v3 = *(_DWORD *)(a1 + 544);
  v26[6] = 0;
  void v26[8] = 174;
  v26[10] = v3;
  v26[16] = 0;
  int v4 = *(_DWORD *)(a1 + 548);
  v26[18] = 175;
  v26[20] = v4;
  float v5 = *(float *)(a1 + 552) * 100.0;
  v26[26] = 0;
  v26[28] = 176;
  *(float *)&v26[30] = v5;
  uint64_t v6 = *(void *)(a1 + 536);
  v26[36] = 4;
  v26[38] = 177;
  v26[40] = v6;
  v26[46] = 0;
  uint64_t v7 = *(void *)(a1 + 528);
  v26[48] = 178;
  v26[50] = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 556);
  v26[56] = 0;
  v26[58] = 179;
  v26[60] = v7;
  v26[66] = 0;
  LODWORD(v7) = *(_DWORD *)(a1 + 560);
  v26[68] = 180;
  v26[70] = v7;
  v26[76] = 0;
  int v8 = *(_DWORD *)(a1 + 564);
  v26[78] = 181;
  v26[80] = v8;
  v26[86] = 4;
  int v9 = *(_DWORD *)(a1 + 568);
  v26[88] = 182;
  v26[90] = v9;
  v26[96] = 4;
  int v10 = *(_DWORD *)(a1 + 572);
  v26[98] = 183;
  v26[100] = v10;
  v26[106] = 0;
  id v22 = 0LL;
  v23[0] = 0LL;
  id v21 = 0LL;
  v23[1] = &v21;
  char v24 = 0;
  id v21 = (char *)operator new(0x1B8uLL);
  id v22 = v21;
  v23[0] = v21 + 440;
  id v22 = (_BYTE *)sub_100783D5C((uint64_t)v23, (uint64_t)buf, (uint64_t)&v27, (uint64_t)v21);
  for (uint64_t i = 408LL; i != -32; i -= 40LL)
    sub_10043AFF4((uint64_t)&buf[i]);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  double v12 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v26[0]) = 2082;
    *(void *)((char *)v26 + 2) = "";
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#era, setMeasurements for ERA event}",  buf,  0x12u);
  }

  double v13 = *(void **)(a1 + 688);
  memset(v20, 0, sizeof(v20));
  sub_10043BC44(v20, (uint64_t)v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 3));
  [v13 setMeasurements:sub_100435878(v20)];
  *(void *)__int128 buf = v20;
  sub_10043B844((void ***)buf);
  *(_BYTE *)(a1 + 576) = 1;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  id v14 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v26[0]) = 2082;
    *(void *)((char *)v26 + 2) = "";
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#era, reset ERA metrics}",  buf,  0x12u);
  }

  *(void *)(a1 + sub_10000AE14(v1 + 520) = 0LL;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 536) = 0LL;
  *(void *)(a1 + 544) = -1LL;
  *(_DWORD *)(a1 + 552) = -1082130432;
  __asm { FMOV            V1.2S, #-1.0 }

  *(void *)(a1 + 556) = -1LL;
  *(void *)(a1 + 564) = _D1;
  *(_DWORD *)(a1 + 572) = 0;
  *(void *)__int128 buf = &v21;
  sub_10043B844((void ***)buf);
}

void sub_10092E0E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_10043B844(&a17);
  _Unwind_Resume(a1);
}

unint64_t sub_10092E14C(unint64_t result)
{
  if (result >= 5)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v1 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "#dsa Please update userSpecificPlaceTypeFromRTUserType",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      v4[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "#dsa Please update userSpecificPlaceTypeFromRTUserType",  v4,  2);
      int v3 = (uint8_t *)v2;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "_CLPlaceInferenceUserSpecificPlaceType userSpecificPlaceTypeFromRTUserType(RTPlaceInferenceUserSpecificPlaceType)",  "%s\n",  v2);
      if (v3 != buf) {
        free(v3);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10092E2DC(unint64_t a1)
{
  if (a1 < 5) {
    return qword_1013411B8[a1];
  }
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  int v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "#dsa Please update placeInferencePlaceTypeFromRTPlaceType",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "#dsa Please update placeInferencePlaceTypeFromRTPlaceType",  v5,  2);
    int v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "_CLPlaceInferencePlaceType placeInferencePlaceTypeFromRTPlaceType(RTPlaceInferencePlaceType)",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  return 2LL;
}

CLLocation *sub_10092E47C(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v28 = 0LL;
  uint64_t v27 = 0LL;
  int v29 = 0;
  uint64_t v34 = 0LL;
  uint64_t v33 = 0LL;
  char v35 = 0;
  [a1 latitude];
  uint64_t v3 = v2;
  [v1 longitude];
  uint64_t v5 = v4;
  [v1 horizontalUncertainty];
  uint64_t v7 = v6;
  objc_msgSend(objc_msgSend(v1, "date"), "timeIntervalSinceReferenceDate");
  uint64_t v9 = v8;
  LODWORD(v1) = [v1 referenceFrame];
  int v10 = objc_alloc(&OBJC_CLASS___CLLocation);
  int v17 = 0xFFFF;
  uint64_t v18 = v3;
  uint64_t v19 = v5;
  uint64_t v20 = v7;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v21 = xmmword_1012EA5D0;
  __int128 v22 = _Q0;
  __int128 v23 = _Q0;
  uint64_t v24 = v9;
  int v25 = 0;
  unint64_t v26 = 0xBFF0000000000000LL;
  unint64_t v30 = 0xBFF0000000000000LL;
  uint64_t v31 = 0x7FFFFFFFLL;
  int v32 = (int)v1;
  return -[CLLocation initWithClientLocation:](v10, "initWithClientLocation:", &v17);
}

CLPlacemark *sub_10092E564(void *a1, uint64_t a2)
{
  id v4 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(a1, "name"), @"Name");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "thoroughfare"),  @"Thoroughfare");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "subThoroughfare"),  @"SubThoroughfare");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "locality"), @"City");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "subLocality"),  @"SubLocality");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "administrativeArea"),  @"State");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "subAdministrativeArea"),  @"SubAdministrativeArea");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "postalCode"),  @"ZIP");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "countryCode"),  @"CountryCode");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "country"),  @"Country");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  objc_msgSend(objc_msgSend(a1, "address"), "inlandWater"),  @"InlandWater");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "ocean"), @"Ocean");
  return  -[CLPlacemark initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:category:meCardAddress:muid:]( [CLPlacemark alloc],  "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:category:meCardAddress:muid:",  a2,  v4,  0,  objc_msgSend(objc_msgSend(a1, "address"), "areasOfInterest"),  objc_msgSend(a1, "source"),  objc_msgSend(a1, "geoMapItemHandle"),  objc_msgSend(a1, "category"),  &stru_1018A4B00,  objc_msgSend(a1, "muid"));
}

void sub_10092E7AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100272EB8(off_101861148, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v2 + 24LL))(v2, &v6, 0LL);
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10092E838(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10092E84C(uint64_t result)
{
  uint64_t v1 = result + 184;
  if (*(void *)(result + 184) == 5LL)
  {
    uint64_t v2 = result;
    v3[0] = @"fidelityPolicy";
    v4[0] = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 5LL);
    v3[1] = @"collectedLocationCountTotal";
    v4[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 192));
    _DWORD v3[2] = @"collectedLocationCountGPS";
    _DWORD v4[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 196));
    v3[3] = @"collectedLocationCountWiFi";
    v4[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 200));
    v3[4] = @"collectedLocationCountCell";
    void v4[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 204));
    void v3[5] = @"collectedLocationCountOthers";
    void v4[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 208));
    void v3[6] = @"collectedLocationBestHorizontalAccuracy";
    void v4[6] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)fmin(*(double *)(v2 + 216), 2000.0));
    v3[7] = @"outputLocationSource";
    v4[7] = +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(v2 + 224));
    v3[8] = @"distanceBetweenOutputLocationAndCollectedLocationWithBestHorizontalAccuracy";
    _WORD v4[8] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)fmin(*(double *)(v2 + 232), 500.0));
    void v3[9] = @"signalEnvironmentType";
    void v4[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v2 + 240));
    v3[10] = @"routineEnabled";
    v4[10] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 244));
    v3[11] = @"hasResult";
    v4[11] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 245));
    id result = AnalyticsSendEvent( @"com.apple.locationd.CLPlaceInferenceSubscription",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  12LL));
    *(void *)uint64_t v1 = 0LL;
    *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)(v1 + 24) = 0;
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v2 + 216) = 0xBFF0000000000000LL;
    *(void *)(v2 + 224) = 0LL;
    *(void *)(v2 + 232) = 0xBFF0000000000000LL;
    *(_DWORD *)(v2 + 240) = 0;
    *(_WORD *)(v2 + 244) = 257;
  }

  return result;
}

void sub_10092EA74(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1003906E0(&off_101861150, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 24LL))(v2, &v6, 32LL);
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_10092EB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10092EB14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(result + 42))
  {
    uint64_t v3 = result;
    id result = sub_100DB3D54(*(_DWORD *)(result + 72));
    if (!v4)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      unint64_t v5 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        uint64_t v6 = *(int *)(v3 + 72);
        int v9 = 68289282;
        int v10 = 0;
        __int16 v11 = 2082;
        double v12 = "";
        __int16 v13 = 2050;
        uint64_t v14 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dsa Couldn't convert location notification to accuracy, notification:%{public, l ocation:CLLocationProvider_Type::Notification}lld}",  (uint8_t *)&v9,  0x1Cu);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101861108);
        }
      }

      uint64_t v7 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        uint64_t v8 = *(int *)(v3 + 72);
        int v9 = 68289282;
        int v10 = 0;
        __int16 v11 = 2082;
        double v12 = "";
        __int16 v13 = 2050;
        uint64_t v14 = v8;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dsa Couldn't convert location notification to accuracy",  "{msg%{public}.0s:#dsa Couldn't convert location notification to accuracy, notification:%{public, l ocation:CLLocationProvider_Type::Notification}lld}",  (uint8_t *)&v9,  0x1Cu);
      }

      id result = 0xBFF0000000000000LL;
    }

    *(_BYTE *)a2 = 1;
    *(void *)(a2 + _Block_object_dispose(va, 8) = result;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 23) = 0LL;
    *(_BYTE *)(a2 + 32) = 1;
  }

  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }

  return result;
}

void sub_10092ECE8(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v3 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t buf = 68289282LL;
    __int16 v27 = 2082;
    uint64_t v28 = "";
    __int16 v29 = 2114;
    uint64_t v30 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa client stopped PlaceInference Request, Client:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
  }

  if (*(_BYTE *)(a1 + 45))
  {
    if (*(_DWORD *)(a1 + 328) == 1 || *(_DWORD *)(a1 + 464) != 1)
    {
      if (*(_DWORD *)(a1 + 324) != 2) {
        goto LABEL_24;
      }
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      uint64_t v7 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289026LL;
        __int16 v27 = 2082;
        uint64_t v28 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa DSA AWD - Submitting latest metrics}",  (uint8_t *)&buf,  0x12u);
      }

      __int128 v10 = *(_OWORD *)(a1 + 248);
      uint64_t v6 = (void **)&v11;
      if (*(char *)(a1 + 287) < 0)
      {
        sub_1010DD48C(&v11, *(void **)(a1 + 264), *(void *)(a1 + 272));
      }

      else
      {
        __int128 v11 = *(_OWORD *)(a1 + 264);
        uint64_t v12 = *(void *)(a1 + 280);
      }

      __int128 v8 = *(_OWORD *)(a1 + 336);
      __int128 v15 = *(_OWORD *)(a1 + 320);
      __int128 v16 = v8;
      v17[0] = *(_OWORD *)(a1 + 352);
      __int128 v9 = *(_OWORD *)(a1 + 304);
      __int128 v13 = *(_OWORD *)(a1 + 288);
      __int128 v14 = v9;
      *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a1 + 364);
      sub_10092F0A0(a1, (uint64_t)&v10);
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        goto LABEL_24;
      }
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
      unint64_t v5 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289026LL;
        __int16 v27 = 2082;
        uint64_t v28 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa DSA AWD - Submitting cached metrics}",  (uint8_t *)&buf,  0x12u);
      }

      __int128 v18 = *(_OWORD *)(a1 + 384);
      uint64_t v6 = (void **)&v19;
      if (*(char *)(a1 + 423) < 0)
      {
        sub_1010DD48C(&v19, *(void **)(a1 + 400), *(void *)(a1 + 408));
      }

      else
      {
        __int128 v19 = *(_OWORD *)(a1 + 400);
        uint64_t v20 = *(void *)(a1 + 416);
      }

      __int128 v23 = *(_OWORD *)(a1 + 456);
      __int128 v24 = *(_OWORD *)(a1 + 472);
      v25[0] = *(_OWORD *)(a1 + 488);
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a1 + 500);
      __int128 v21 = *(_OWORD *)(a1 + 424);
      __int128 v22 = *(_OWORD *)(a1 + 440);
      sub_10092F0A0(a1, (uint64_t)&v18);
      if ((SHIBYTE(v20) & 0x80000000) == 0) {
        goto LABEL_24;
      }
    }

    operator delete(*v6);
LABEL_24:
    sub_10092F2F0(a1);
    *(_BYTE *)(a1 + 45) = 0;
  }
}

void sub_10092F04C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10092F0A0(uint64_t a1, uint64_t a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v17 = 0;
    __int16 v18 = 2082;
    __int128 v19 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa,submitting LocationEmergencyPOIStatistics metric}",  buf,  0x12u);
  }

  *(_BYTE *)a2 = 1;
  *(CFAbsoluteTime *)(a2 + _Block_object_dispose(va, 8) = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)(a2 + 16), "com.apple.locationd");
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  unint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v17 = 0;
    __int16 v18 = 2082;
    __int128 v19 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa,reset AWD metrics}",  buf,  0x12u);
  }

  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 256) = 0xBFF0000000000000LL;
  uint64_t v6 = (void **)(a1 + 264);
  *uint64_t v6 = 0LL;
  *(void *)(a1 + 272) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  __int128 v7 = xmmword_1012E0BC0;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = xmmword_1012E0BC0;
  *(_OWORD *)(a1 + 304) = _Q1;
  __int128 v13 = xmmword_101339620;
  *(_OWORD *)(a1 + 320) = xmmword_101339620;
  *(void *)(a1 + 336) = 0xFFFFFFFFLL;
  *(void *)(a1 + 344) = 0xBFF0000000000000LL;
  *(void *)(a1 + 352) = -1LL;
  *(void *)(a1 + 360) = 0xBFF0000000000000LL;
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 392) = 0xBFF0000000000000LL;
  __int128 v14 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
  {
    __int128 v15 = _Q1;
    operator delete(*v14);
    __int128 v13 = xmmword_101339620;
    __int128 v7 = xmmword_1012E0BC0;
    _Q1 = v15;
  }

  *__int128 v14 = 0LL;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  *(_OWORD *)(a1 + 424) = v7;
  *(void *)(a1 + 440) = 0xBFF0000000000000LL;
  *(void *)(a1 + 44_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 456) = v13;
  *(void *)(a1 + 472) = 0xFFFFFFFFLL;
  *(void *)(a1 + 480) = 0xBFF0000000000000LL;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = -1LL;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_DWORD *)(a1 + 512) = 0;
}

void sub_10092F2F0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 576)) {
    sub_10092DD90(a1);
  }
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101861108);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v7 = 0;
    __int16 v8 = 2082;
    __int128 v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#era, submitEvent for ERA event}",  buf,  0x12u);
  }

  uint64_t v3 = *(void **)(a1 + 688);
  if (byte_1019A16B7 < 0)
  {
    sub_1010DD48C(__p, (void *)xmmword_1019A16A0, *((unint64_t *)&xmmword_1019A16A0 + 1));
  }

  else
  {
    *(_OWORD *)__int128 __p = xmmword_1019A16A0;
    uint64_t v5 = unk_1019A16B0;
  }

  [v3 submitEvent:sub_1007793B4((__int128 *)__p)];
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 576) = 0;
}

void sub_10092F434( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_10092F458(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  [*(id *)(a1 + 8) silo];
  if (*(_BYTE *)(a1 + 41))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    uint64_t v5 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#dsa #warning Already running a place inference request, but asked to start again}",  buf,  0x12u);
    }

    goto LABEL_65;
  }

  *(_BYTE *)(a1 + 41) = 1;
  sub_1010DDBC0(buf, "com.apple.locationd.place_inference");
  if ((sub_100C6AC9C(a1) & 1) != 0)
  {
    int v6 = 0;
  }

  else
  {
    sub_1010DDBC0(v39, "com.apple.locationd.emergencyplace_inference");
    int v6 = sub_100C6AC9C(a1) ^ 1;
    if (v40 < 0) {
      operator delete(*(void **)v39);
    }
  }

  if (SBYTE3(v38) < 0)
  {
    operator delete(*(void **)buf);
    if (v6) {
      goto LABEL_12;
    }
  }

  else if (v6)
  {
LABEL_12:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101861108);
    }
    int v7 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v37 = 2114;
      uint64_t v38 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dsa Client does not have appropriate entitlement to get place inference, Client:%{ public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101861108);
      }
    }

    __int128 v9 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v37 = 2114;
      uint64_t v38 = v10;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dsa Client does not have appropriate entitlement to get place inference",  "{msg%{public}.0s:#dsa Client does not have appropriate entitlement to get place inference, Client:%{ public, location:escape_only}@}",  buf,  0x1Cu);
    }