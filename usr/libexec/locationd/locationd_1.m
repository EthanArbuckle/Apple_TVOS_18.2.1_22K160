uint64_t sub_10001C5F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  double v6;
  double v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  _BYTE v18[32];
  _BYTE v19[32];
  v5 = (_OWORD *)result;
  v6 = *(double *)(a2 + 208);
  v7 = *(double *)(a3 + 208);
  if (v6 <= *(double *)(result + 208))
  {
    if (v7 > v6)
    {
      result = sub_10001CAE4(a2, a3);
      *(_OWORD *)v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 208);
      v11 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v11;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 204) = *(_OWORD *)&v17[12];
      if (*(double *)(a2 + 208) > *((double *)v5 + 26))
      {
        result = sub_10001CAE4((uint64_t)v5, a2);
        *(_OWORD *)v18 = v5[12];
        *(_OWORD *)&v18[16] = v5[13];
        v12 = *(_OWORD *)(a2 + 204);
        v5[12] = *(_OWORD *)(a2 + 192);
        *(_OWORD *)((char *)v5 + 204) = v12;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v18;
        *(_OWORD *)(a2 + 204) = *(_OWORD *)&v18[12];
      }
    }
  }

  else
  {
    v8 = (_OWORD *)(result + 192);
    if (v7 <= v6)
    {
      result = sub_10001CAE4(result, a2);
      *(_OWORD *)v19 = *v8;
      v13 = *v8;
      *(_OWORD *)&v19[16] = v5[13];
      v14 = *(_OWORD *)(a2 + 204);
      *v8 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)((char *)v5 + 204) = v14;
      *(_OWORD *)(a2 + 192) = v13;
      *(_OWORD *)(a2 + 204) = *(_OWORD *)&v19[12];
      result = sub_10001CAE4(a2, a3);
      v9 = *(_OWORD *)(a2 + 192);
      *(_DWORD *)&v16[12] = HIDWORD(v9);
      *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 208);
      v15 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v15;
    }

    else
    {
      result = sub_10001CAE4(result, a3);
      v9 = *v8;
      *(_OWORD *)v16 = *v8;
      *(_OWORD *)&v16[16] = v5[13];
      v10 = *(_OWORD *)(a3 + 204);
      *v8 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)((char *)v5 + 204) = v10;
    }

    *(_OWORD *)(a3 + 192) = v9;
    *(_OWORD *)(a3 + 204) = *(_OWORD *)&v16[12];
  }

  return result;
}

BOOL sub_10001C78C(_OWORD *a1, char *a2)
{
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((a2 - (char *)a1) >> 5);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (*((double *)a2 - 2) > *((double *)a1 + 26))
      {
        sub_10001CAE4((uint64_t)a1, (uint64_t)(a2 - 224));
        __int128 v6 = a1[13];
        *(_OWORD *)v25 = a1[12];
        __int128 v7 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v6;
        __int128 v8 = *(_OWORD *)(a2 - 20);
        a1[12] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 204) = v8;
        *((_OWORD *)a2 - 2) = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        return 1LL;
      }

      return result;
    case 3LL:
      sub_10001C5F4((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a2 - 224));
      return 1LL;
    case 4LL:
      sub_10001CEA4(a1, a1 + 14, a1 + 28, (uint64_t)(a2 - 224));
      return 1LL;
    case 5LL:
      sub_10001CEA4(a1, a1 + 14, a1 + 28, (uint64_t)(a1 + 42));
      if (*((double *)a2 - 2) > *((double *)a1 + 110))
      {
        sub_10001CAE4((uint64_t)(a1 + 42), (uint64_t)(a2 - 224));
        __int128 v16 = a1[55];
        *(_OWORD *)v25 = a1[54];
        __int128 v17 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v16;
        __int128 v18 = *(_OWORD *)(a2 - 20);
        a1[54] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 876) = v18;
        *((_OWORD *)a2 - 2) = v17;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        if (*((double *)a1 + 110) > *((double *)a1 + 82))
        {
          sub_10001CAE4((uint64_t)(a1 + 28), (uint64_t)(a1 + 42));
          __int128 v19 = a1[41];
          *(_OWORD *)v25 = a1[40];
          __int128 v20 = *(_OWORD *)v25;
          *(_OWORD *)&v25[16] = v19;
          a1[40] = a1[54];
          *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)((char *)a1 + 876);
          a1[54] = v20;
          *(_OWORD *)((char *)a1 + 876) = *(_OWORD *)&v25[12];
          if (*((double *)a1 + 82) > *((double *)a1 + 54))
          {
            sub_10001CAE4((uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
            __int128 v21 = a1[27];
            *(_OWORD *)v25 = a1[26];
            __int128 v22 = *(_OWORD *)v25;
            *(_OWORD *)&v25[16] = v21;
            a1[26] = a1[40];
            *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)((char *)a1 + 652);
            a1[40] = v22;
            *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)&v25[12];
            if (*((double *)a1 + 54) > *((double *)a1 + 26))
            {
              sub_10001CAE4((uint64_t)a1, (uint64_t)(a1 + 14));
              __int128 v23 = a1[13];
              *(_OWORD *)v25 = a1[12];
              __int128 v24 = *(_OWORD *)v25;
              *(_OWORD *)&v25[16] = v23;
              a1[12] = a1[26];
              *(_OWORD *)((char *)a1 + 204) = *(_OWORD *)((char *)a1 + 428);
              a1[26] = v24;
              *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)&v25[12];
            }
          }
        }
      }

      return 1LL;
    default:
      v9 = (double *)(a1 + 28);
      sub_10001C5F4((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
      uint64_t v10 = (uint64_t)(a1 + 42);
      if (a1 + 42 == (_OWORD *)a2) {
        return 1LL;
      }
      uint64_t v11 = 0LL;
      int v12 = 0;
      break;
  }

  while (1)
  {
    if (*(double *)(v10 + 208) > v9[26])
    {
      sub_10001B944((uint64_t)v25, v10);
      uint64_t v13 = v11;
      while (1)
      {
        sub_10001CFD4((uint64_t)a1 + v13 + 672, (uint64_t)a1 + v13 + 448);
        if (v13 == -448) {
          break;
        }
        double v14 = *(double *)((char *)a1 + v13 + 432);
        v13 -= 224LL;
        if (v30 <= v14)
        {
          uint64_t v15 = (uint64_t)a1 + v13 + 672;
          goto LABEL_12;
        }
      }

      uint64_t v15 = (uint64_t)a1;
LABEL_12:
      sub_10001CFD4(v15, (uint64_t)v25);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }

      ++v12;
      sub_100019CEC((uint64_t)&v27);
      sub_100019CEC((uint64_t)&v26);
      sub_10001AA60((uint64_t)v25);
      if (v12 == 8) {
        return v10 + 224 == (void)a2;
      }
    }

    v9 = (double *)v10;
    v11 += 224LL;
    v10 += 224LL;
  }

uint64_t sub_10001CAE4(uint64_t a1, uint64_t a2)
{
  __int128 v9 = *(_OWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  sub_10001B9CC((uint64_t)v11, (uint64_t *)(a1 + 64));
  sub_10001B9CC((uint64_t)v12, (uint64_t *)(a1 + 104));
  __int128 v13 = *(_OWORD *)(a1 + 144);
  int v14 = *(_DWORD *)(a1 + 160);
  __int128 v15 = *(_OWORD *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 184);
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  sub_10001CCAC(a1, (uint64_t *)a2);
  __int128 v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_10001CDA0(a1 + 64, (uint64_t *)(a2 + 64));
  sub_10001CDA0(a1 + 104, (uint64_t *)(a2 + 104));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  sub_100007664(a1 + 168, (__n128 *)(a2 + 168));
  sub_10001CCAC(a2, v8);
  *(_OWORD *)(a2 + 40) = v9;
  *(void *)(a2 + 56) = v10;
  sub_10001CDA0(a2 + 64, v11);
  sub_10001CDA0(a2 + 104, v12);
  *(_OWORD *)(a2 + 144) = v13;
  *(_DWORD *)(a2 + 160) = v14;
  __int128 v6 = *(void **)(a2 + 168);
  if (v6)
  {
    *(void *)(a2 + 176) = v6;
    operator delete(v6);
  }

  *(_OWORD *)(a2 + 168) = v15;
  *(void *)(a2 + 184) = v16;
  uint64_t v16 = 0LL;
  __int128 v15 = 0uLL;
  sub_100019CEC((uint64_t)v12);
  sub_100019CEC((uint64_t)v11);
  return sub_10001AA60((uint64_t)v8);
}

void sub_10001CCAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  __int128 v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  __int128 v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0LL;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }

    else
    {
      v11 &= v12 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *__int128 v7 = 0LL;
    v7[1] = 0LL;
  }

void sub_10001CD4C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001AA98(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

void sub_10001CDA0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  __int128 v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  __int128 v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0LL;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }

    else
    {
      v11 &= v12 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *__int128 v7 = 0LL;
    v7[1] = 0LL;
  }

void *sub_10001CE40(void *result)
{
  if (result[3])
  {
    v1 = result;
    BOOL result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        BOOL result = v2;
      }

      while (v2);
    }

    v1[2] = 0LL;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0LL; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0LL;
    }

    v1[3] = 0LL;
  }

  return result;
}

uint64_t sub_10001CEA4(_OWORD *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t result = sub_10001C5F4((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (*(double *)(a4 + 208) > *((double *)a3 + 26))
  {
    uint64_t result = sub_10001CAE4((uint64_t)a3, a4);
    *(_OWORD *)unint64_t v12 = a3[12];
    *(_OWORD *)&v12[16] = a3[13];
    __int128 v9 = *(_OWORD *)(a4 + 204);
    a3[12] = *(_OWORD *)(a4 + 192);
    *(_OWORD *)((char *)a3 + 204) = v9;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v12;
    *(_OWORD *)(a4 + 204) = *(_OWORD *)&v12[12];
    if (*((double *)a3 + 26) > *((double *)a2 + 26))
    {
      uint64_t result = sub_10001CAE4((uint64_t)a2, (uint64_t)a3);
      *(_OWORD *)__int128 v13 = a2[12];
      *(_OWORD *)&v13[16] = a2[13];
      __int128 v10 = *(_OWORD *)((char *)a3 + 204);
      a2[12] = a3[12];
      *(_OWORD *)((char *)a2 + 204) = v10;
      a3[12] = *(_OWORD *)v13;
      *(_OWORD *)((char *)a3 + 204) = *(_OWORD *)&v13[12];
      if (*((double *)a2 + 26) > *((double *)a1 + 26))
      {
        uint64_t result = sub_10001CAE4((uint64_t)a1, (uint64_t)a2);
        *(_OWORD *)int v14 = a1[12];
        *(_OWORD *)&v14[16] = a1[13];
        __int128 v11 = *(_OWORD *)((char *)a2 + 204);
        a1[12] = a2[12];
        *(_OWORD *)((char *)a1 + 204) = v11;
        a2[12] = *(_OWORD *)v14;
        *(_OWORD *)((char *)a2 + 204) = *(_OWORD *)&v14[12];
      }
    }
  }

  return result;
}

uint64_t sub_10001CFD4(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_10001CDA0(a1 + 64, (uint64_t *)(a2 + 64));
  sub_10001CDA0(a1 + 104, (uint64_t *)(a2 + 104));
  __int128 v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  sub_100007664(a1 + 168, (__n128 *)(a2 + 168));
  __int128 v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 192) = v6;
  return a1;
}

uint64_t sub_10001D050(uint64_t result)
{
  if (*(_BYTE *)(result + 280))
  {
    uint64_t v1 = result;
    if (*(_BYTE *)(result + 256))
    {
    }

    uint64_t result = sub_10006F50C(v1 + 32);
    *(_BYTE *)(v1 + 280) = 0;
  }

  return result;
}

uint64_t sub_10001D098(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  double v11 = *a3;
  else {
    std::string __p = *(std::string *)a5;
  }
  char v14 = 1;
  sub_100151464(a1, v9, v10, a4, &__p, *a6, a6[1], v11);
  return a1;
}

void sub_10001D150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void *sub_10001D174(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    double v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (j = *v11; j; j = (void *)*j)
      {
        unint64_t v13 = j[1];
        if (v13 == v7)
        {
          if (j[2] == *a2 && j[3] == a2[1]) {
            return j;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }

  j = operator new(0x30uLL);
  void *j = 0LL;
  j[1] = v7;
  *((_OWORD *)j + 1) = **a4;
  j[4] = 0LL;
  j[5] = 0LL;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100019E10(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  uint64_t v21 = *(void *)a1;
  __int128 v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *j = *v22;
LABEL_44:
    *__int128 v22 = j;
    goto LABEL_45;
  }

  void *j = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = j;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*j)
  {
    unint64_t v23 = *(void *)(*j + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    __int128 v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }

void sub_10001D3B8(_Unwind_Exception *a1)
{
}

uint64_t **sub_10001D3CC(uint64_t **a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  __int128 v5 = *a1;
  unint64_t v7 = v5[2];
  uint64_t v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    uint64_t v8 = sub_10001D43C(v3, a2);
  }

  else
  {
    sub_10001D548(v6, v4, a2);
    uint64_t v8 = v4 + 240;
    v3[1] = v4 + 240;
  }

  v3[1] = v8;
  return a1;
}

void sub_10001D434(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10001D43C(uint64_t *a1, __int128 *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x111111111111111LL) {
    sub_100007008();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888LL) {
    unint64_t v6 = 0x111111111111111LL;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_10001D66C((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0LL;
  }
  uint8x8_t v10 = v7;
  double v11 = &v7[240 * v3];
  unint64_t v13 = &v7[240 * v6];
  sub_10001D548((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 240;
  sub_10001D5F8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10001D7FC(&v10);
  return v8;
}

void sub_10001D534(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

__n128 sub_10001D548(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  unint64_t v6 = (_BYTE *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_1010DD48C(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a3 + 24);
    *(void *)(a2 + 40) = *((void *)a3 + 5);
    *(_OWORD *)unint64_t v6 = v7;
  }

  __int128 v8 = a3[3];
  *(_OWORD *)(a2 + 60) = *(__int128 *)((char *)a3 + 60);
  *(_OWORD *)(a2 + 48) = v8;
  sub_1000865CC(a2 + 80);
  __n128 result = *(__n128 *)((char *)a3 + 216);
  *(_BYTE *)(a2 + 232) = *((_BYTE *)a3 + 232);
  *(__n128 *)(a2 + 216) = result;
  return result;
}

void sub_10001D5DC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10001D5F8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001D6B0((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001D66C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112LL) {
    sub_1000070D4();
  }
  return operator new(240 * a2);
}

uint64_t sub_10001D6B0( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 15;
      sub_10001D548(a1, v7 - 240, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 240LL;
      *((void *)&v16 + 1) -= 240LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_10001D778((uint64_t)v13);
  return v11;
}

void sub_10001D764( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10001D778(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10001D7AC((uint64_t *)a1);
  }
  return a1;
}

void sub_10001D7AC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10001A3D4(v3, v1);
      v1 += 240LL;
    }

    while (v1 != v2);
  }

void **sub_10001D7FC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10001D82C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 240;
    sub_10001A3D4(v4, i - 240);
  }

void sub_10001D870(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 208LL;
        sub_10001A9E0((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10001D8F4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10001D92C(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 32);
      sub_10001D978(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_10001D978(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192LL;
        sub_10001A9E0((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_10001D9FC(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (j = *v11; j; j = (void *)*j)
      {
        unint64_t v13 = j[1];
        if (v13 == v7)
        {
          if (j[2] == *a2 && j[3] == a2[1]) {
            return j;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }

  __int128 v15 = (void *)(a1 + 16);
  j = operator new(0x38uLL);
  void *j = 0LL;
  j[1] = v7;
  *((_OWORD *)j + 1) = **a4;
  j[5] = 0LL;
  j[6] = 0LL;
  j[4] = 0LL;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v7 >= v9) {
        unint64_t v4 = v7 % v9;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v7;
    }
  }

  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *j = *v23;
LABEL_44:
    *unint64_t v23 = j;
    goto LABEL_45;
  }

  void *j = *v15;
  *__int128 v15 = j;
  *(void *)(v22 + 8 * v4) = v15;
  if (*j)
  {
    unint64_t v24 = *(void *)(*j + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }

    else
    {
      v24 &= v9 - 1;
    }

    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }

void sub_10001DC68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_10001DC84(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = __p + 4;
    sub_10001D978(&v3);
  }

  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_10001DCCC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555LL) {
    sub_100007008();
  }
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556LL * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555LL;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_10001DF10((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0LL;
  }
  uint8x8_t v10 = v7;
  uint64_t v11 = &v7[192 * v3];
  unint64_t v13 = &v7[192 * v6];
  sub_10001DDD8((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 192;
  sub_10001DE9C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10001E110(&v10);
  return v8;
}

void sub_10001DDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_10001DDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  sub_10001B204(a2 + 64, a3 + 64);
  sub_10001B494(a2 + 104, a3 + 104);
  __int128 v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a2 + 168) = 0LL;
  *(_DWORD *)(a2 + 160) = v7;
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  return sub_10001B72C( (void *)(a2 + 168),  *(const void **)(a3 + 168),  *(void *)(a3 + 176),  (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
}

void sub_10001DE68(_Unwind_Exception *a1)
{
}

uint64_t sub_10001DE9C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001DF54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001DF10(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556LL) {
    sub_1000070D4();
  }
  return operator new(192 * a2);
}

uint64_t sub_10001DF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 192LL;
      sub_10001E008(a1, v7 - 192, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 192LL;
      *((void *)&v16 + 1) -= 192LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_10001E08C((uint64_t)v13);
  return v11;
}

__n128 sub_10001E008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  sub_10001B9CC(a2 + 64, (uint64_t *)(a3 + 64));
  sub_10001B9CC(a2 + 104, (uint64_t *)(a3 + 104));
  __int128 v6 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  *(void *)(a2 + 168) = 0LL;
  __n128 result = *(__n128 *)(a3 + 168);
  *(__n128 *)(a2 + 168) = result;
  *(void *)(a2 + 184) = *(void *)(a3 + 184);
  *(void *)(a3 + 168) = 0LL;
  *(void *)(a3 + 176) = 0LL;
  *(void *)(a3 + 184) = 0LL;
  return result;
}

uint64_t sub_10001E08C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10001E0C0((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_10001E0C0(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_10001A9E0(v3, v1);
      v1 += 192LL;
    }

    while (v1 != v2);
  }

  return result;
}

void **sub_10001E110(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_10001E140(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 192;
      __n128 result = sub_10001A9E0(v4, v1 - 192);
      uint64_t v1 = *(void *)(v3 + 16);
    }

    while (v1 != v2);
  }

  return result;
}

unint64_t *sub_10001E184(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0LL;
  __int128 v6 = a1 + 1;
  a1[2] = 0LL;
  a1[3] = 0LL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  *a1 = v7;
  v22[0] = 0;
  sub_10001E3E4((uint64_t)(a1 + 1), (v7 + v7 * v7) >> 1, v22);
  if (*a1)
  {
    unint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = *a2;
      sub_10001AD40((uint64_t)v22, *a2 + 192 * v8);
      uint64_t v10 = v9 + 192 * v8;
      __int128 v11 = *(_OWORD *)(v10 + 40);
      uint64_t v24 = *(void *)(v10 + 56);
      __int128 v23 = v11;
      sub_10001B204((uint64_t)v25, v10 + 64);
      sub_10001B494((uint64_t)v26, v9 + 192 * v8 + 104);
      uint64_t v12 = v9 + 192 * v8;
      __int128 v13 = *(_OWORD *)(v12 + 144);
      int v27 = *(_DWORD *)(v12 + 160);
      *(_OWORD *)&v26[40] = v13;
      v29 = 0LL;
      uint64_t v30 = 0LL;
      std::string __p = 0LL;
      sub_10001B72C( &__p,  *(const void **)(v12 + 168),  *(void *)(v12 + 176),  (uint64_t)(*(void *)(v12 + 176) - *(void *)(v12 + 168)) >> 2);
      if (v8)
      {
        uint64_t v14 = 0LL;
        for (unint64_t i = 0LL; i != v8; ++i)
        {
          uint64_t v16 = *(void *)(a3 + 24);
          if (!v16) {
            sub_100008BDC();
          }
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v16 + 48LL))(v16, v22, *a2 + v14);
          if (v8 <= i) {
            unint64_t v18 = i;
          }
          else {
            unint64_t v18 = v8;
          }
          if (v8 >= i) {
            unint64_t v19 = i;
          }
          else {
            unint64_t v19 = v8;
          }
          float v20 = v17;
          *(float *)(*v6 + 4 * (v19 + ((v18 + v18 * v18) >> 1))) = v20;
          v14 += 192LL;
        }
      }

      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }

      sub_100019CEC((uint64_t)v26);
      sub_100019CEC((uint64_t)v25);
      sub_10001AA60((uint64_t)v22);
      ++v8;
    }

    while (v8 < *a1);
  }

  return a1;
}

void sub_10001E380( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *v13;
  if (*v13)
  {
    *(void *)(v14 + 16) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(exception_object);
}

void sub_10001E3E4(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }

  else
  {
    sub_10001E414((void **)a1, a2 - v3, a3);
  }

void sub_10001E414(void **a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4LL;
      }

      while (v16);
      uint64_t v9 = v17;
    }

    a1[1] = v9;
  }

  else
  {
    uint64_t v10 = (char *)v9 - (_BYTE *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_100007008();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      __int128 v15 = (char *)sub_10000956C(v6, v14);
    }
    else {
      __int128 v15 = 0LL;
    }
    unint64_t v18 = &v15[4 * v12];
    unint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    size_t v21 = v18;
    do
    {
      *(_DWORD *)size_t v21 = *a3;
      v21 += 4;
      v20 -= 4LL;
    }

    while (v20);
    uint64_t v22 = &v15[4 * v14];
    __int128 v23 = (char *)*a1;
    for (unint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }

    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23) {
      operator delete(v23);
    }
  }

void *sub_10001E524(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10000717C(a1, a2);
    uint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_10001E588(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10001E5A4(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5LL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x4EC4EC4EC4EC4EC5LL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x9D89D89D89D89DLL) {
    unint64_t v11 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_10001E810(v9, v11);
  }
  else {
    uint64_t v12 = 0LL;
  }
  __int128 v15 = v12;
  uint64_t v16 = &v12[208 * v5];
  unint64_t v18 = &v12[208 * v11];
  sub_10001E6C8((uint64_t)v16, a2, a3);
  double v17 = v16 + 208;
  sub_10001E79C(a1, &v15);
  uint64_t v13 = a1[1];
  sub_10001EA08(&v15);
  return v13;
}

void sub_10001E6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001E6C8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = sub_10001AD40(a1, a2);
  __int128 v7 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  sub_10001B204(v6 + 64, a2 + 64);
  sub_10001B494(a1 + 104, a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  int v9 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0LL;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  sub_10001B72C( (void *)(a1 + 168),  *(const void **)(a2 + 168),  *(void *)(a2 + 176),  (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  *(_OWORD *)(a1 + 192) = *a3;
  return a1;
}

void sub_10001E768(_Unwind_Exception *a1)
{
}

uint64_t sub_10001E79C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001E858((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10001E810(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    sub_1000070D4();
  }
  return operator new(208 * a2);
}

uint64_t sub_10001E858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 208LL;
      sub_10001E8FC(v7 - 208, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 208LL;
      *((void *)&v15 + 1) -= 208LL;
    }

    while (v9 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_10001E984((uint64_t)v12);
  return v10;
}

uint64_t sub_10001E8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B9CC(a1, (uint64_t *)a2);
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10001B9CC(v4 + 64, (uint64_t *)(a2 + 64));
  sub_10001B9CC(a1 + 104, (uint64_t *)(a2 + 104));
  __int128 v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

uint64_t sub_10001E984(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10001E9B8((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_10001E9B8(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_10001A9E0(v3, v1);
      v1 += 208LL;
    }

    while (v1 != v2);
  }

  return result;
}

void **sub_10001EA08(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_10001EA38(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 208;
      uint64_t result = sub_10001A9E0(v4, v1 - 208);
      uint64_t v1 = *(void *)(v3 + 16);
    }

    while (v1 != v2);
  }

  return result;
}

uint64_t sub_10001EA7C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizing80211ScanType", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 2LL;
  }
}

void sub_10001EB3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10001EB84()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizing80211Modes", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A7D20(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 14LL;
  }
}

void sub_10001EC44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_10001EC8C@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v6 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0LL;
  a1[1].n128_u64[0] = 0LL;
  a1->n128_u64[0] = 0LL;
  *(void *)(a2 + 24) = 0LL;
  uint64_t v4 = (__n128 *)operator new(0x28uLL);
  v4->n128_u64[0] = (unint64_t)&off_101818F60;
  v4->n128_u64[1] = 0LL;
  __n128 result = v6;
  v4[1] = v6;
  v4[2].n128_u64[0] = v3;
  *(void *)(a2 + 24) = v4;
  return result;
}

void sub_10001ECEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001ED08()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizingScanLowPriority", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_10001EDC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_10001EE0C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsLocalizingWifiDutyCyclePercentage",  0x8000100u,  kCFAllocatorNull);
  sub_1002A827C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  unsigned int v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10001EED0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10001EF18()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizingWifiMaxAgeFirstScan", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 0LL;
  }
}

void sub_10001EFD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

double sub_10001F01C()
{
  return 0.0;
}

uint64_t sub_10001F024()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecording80211ScanType", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 2LL;
  }
}

void sub_10001F0E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10001F12C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecording80211Modes", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A7D20(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 14LL;
  }
}

void sub_10001F1EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_10001F234@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v6 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0LL;
  a1[1].n128_u64[0] = 0LL;
  a1->n128_u64[0] = 0LL;
  *(void *)(a2 + 24) = 0LL;
  int v4 = (char *)operator new(0x20uLL);
  *(void *)int v4 = &off_101818FF0;
  __n128 result = v6;
  *(__n128 *)(v4 + 8) = v6;
  *((void *)v4 + 3) = v3;
  *(void *)(a2 + 24) = v4;
  return result;
}

void sub_10001F294( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001F2B0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingScanLowPriority", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_10001F36C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_10001F3B4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsRecordingWifiDutyCyclePercentage",  0x8000100u,  kCFAllocatorNull);
  sub_1002A827C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  unsigned int v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10001F478( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10001F4C0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingWifiMaxAgeFirstScan", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  uint64_t v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 0LL;
  }
}

void sub_10001F57C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_10001F5C4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingInitialDelay", 0x8000100u, kCFAllocatorNull);
  sub_1002A827C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  int v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_10001F68C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

double sub_10001F6D4(uint64_t a1, double a2, double a3)
{
  double v4 = a2 + a3;
  double v5 = *(double *)(a1 + 168);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818F30);
  }
  double v6 = v4 + v5;
  unsigned int v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 168);
    uint64_t v9 = *(void *)(a1 + 208);
    *(_DWORD *)buf = 134349568;
    uint64_t v21 = v8;
    __int16 v22 = 2050;
    double v23 = v6;
    __int16 v24 = 2050;
    uint64_t v25 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan timer will end: %{public}.03fs",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818F30);
    }
    uint64_t v11 = *(void *)(a1 + 168);
    uint64_t v12 = *(void *)(a1 + 208);
    int v14 = 134349568;
    uint64_t v15 = v11;
    __int16 v16 = 2050;
    double v17 = v6;
    __int16 v18 = 2050;
    uint64_t v19 = v12;
    char v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan ti mer will end: %{public}.03fs",  &v14,  32);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "cl::chrono::CFAbsoluteTimeClock::time_point CLMicroLocationWifiScanStrategy::getExpectedNextScanEndTime(cl::chrono ::CFAbsoluteTimeClock::time_point, cl::chrono::CFAbsoluteTimeClock::duration) const",  "%s\n",  v13);
  }

  return v6;
}

double sub_10001F8CC(void *a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_DWORD *)a2 == 5)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
      uint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = a1[19];
        *(_DWORD *)buf = 134349056;
        uint64_t v24 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Got a scan busy error so returning a scan delay of %{public}0.3Lfs",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818F30);
        }
        uint64_t v17 = a1[19];
        int v21 = 134349056;
        uint64_t v22 = v17;
        __int16 v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Got a scan busy error so returning a scan delay of %{public}0.3Lfs",  &v21,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const",  "%s\n",  v18);
      }

      double v5 = a1 + 19;
    }

    else if (*(_DWORD *)a2 == 4)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
      unint64_t v3 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = a1[20];
        *(_DWORD *)buf = 134349056;
        uint64_t v24 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Got a scan error so returning a scan delay of %{public}0.3Lfs",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818F30);
        }
        uint64_t v15 = a1[20];
        int v21 = 134349056;
        uint64_t v22 = v15;
        __int16 v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Got a scan error so returning a scan delay of %{public}0.3Lfs",  &v21,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const",  "%s\n",  v16);
      }

      double v5 = a1 + 20;
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
      uint64_t v10 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = a1[18];
        *(_DWORD *)buf = 134349056;
        uint64_t v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Returning scan delay: %{public}0.3Lfs",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101818F30);
        }
        uint64_t v19 = a1[18];
        int v21 = 134349056;
        uint64_t v22 = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Returning scan delay: %{public}0.3Lfs",  &v21,  12);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const",  "%s\n",  v20);
      }

      double v5 = a1 + 18;
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818F30);
    }
    double v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = a1[22];
      *(_DWORD *)buf = 134349056;
      uint64_t v24 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "No wifi results so issue a scan with initial delay of %{public}0.3Lfs",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
      uint64_t v13 = a1[22];
      int v21 = 134349056;
      uint64_t v22 = v13;
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "No wifi results so issue a scan with initial delay of %{public}0.3Lfs",  &v21,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const",  "%s\n",  v14);
    }

    double v5 = a1 + 22;
  }

  return *(double *)v5;
}

void sub_10001FEA0(uint64_t a1@<X0>, __int128 *a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = *(void *)(a1 + 272);
  if (!v6) {
    sub_100008BDC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 48LL))(&v45);
  uint64_t v9 = *(void **)(a1 + 16);
  v43 = 0LL;
  uint64_t v44 = 0LL;
  std::string __p = 0LL;
  sub_10001B72C(&__p, v45, (uint64_t)v46, (v46 - (_BYTE *)v45) >> 2);
  sub_100B76A40(v9, (uint64_t)&__p);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }

  sub_100020550(a1);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_1002F0B04(buf);
  CFStringRef v11 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsWifiMaxAgeNextScan", 0x8000100u, kCFAllocatorNull);
  int v12 = sub_1002A77CC((uint64_t)buf[0].__r_.__value_.__l.__data_, (uint64_t)v11, &v48);
  CFRelease(v11);
  uint64_t data_low = LODWORD(v48.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_;
  if (buf[0].__r_.__value_.__l.__size_)
  {
    uint64_t v15 = (unint64_t *)(buf[0].__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  if (v12) {
    uint64_t v17 = data_low;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100B76BC4(v10, v17);
  __int128 v39 = *a2;
  uint64_t v40 = *((void *)a2 + 2);
  double v41 = sub_10001F8CC((void *)a1, (uint64_t)&v39);
  double v18 = sub_10001F6D4(a1, a4, v41);
  double v19 = *(double *)(a1 + 208);
  if (v19 < v18)
  {
    uint64_t v20 = sub_100020778(a1);
    double v19 = *(double *)(a1 + 208);
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  if (v19 < v18)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818F30);
    }
    int v21 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Not enough time for another scan",  (uint8_t *)buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
      LOWORD(v48.__r_.__value_.__l.__data_) = 0;
      v34 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Not enough time for another scan",  &v48,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl ::chrono::CFAbsoluteTimeClock::time_point, std::optional<WifiNotificationResults>)",  "%s\n",  (const char *)v34);
      if (v34 != buf) {
        free(v34);
      }
    }

    double v41 = 1.79769313e308;
    if (!v20) {
      (*(void (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
    }
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818F30);
  }
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = sub_1000E7908(*(void *)(a1 + 16));
    double v23 = (uint64_t *)v22;
    memset(&v38, 0, sizeof(v38));
    if (*(void *)v22 != *(void *)(v22 + 8))
    {
      std::to_string(buf, **(_DWORD **)v22);
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      std::string v38 = buf[0];
      uint64_t v26 = (int *)(v25 + 4);
      for (unint64_t i = (int *)(v24 - 4); v26 != i; ++v26)
      {
        std::to_string(&v48, *v26);
        v28 = std::string::insert(&v48, 0LL, ",");
        __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0LL;
        v28->__r_.__value_.__l.__cap_ = 0LL;
        v28->__r_.__value_.__r.__words[0] = 0LL;
        if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v30 = buf;
        }
        else {
          uint64_t v30 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
        if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v31 = buf[0].__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v31 = buf[0].__r_.__value_.__l.__size_;
        }
        std::string::append(&v38, (const std::string::value_type *)v30, v31);
      }
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818F30);
    }
    v32 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      v33 = &v38;
      if ((v38.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v33 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "Setting channels to scan: %{private}s",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
      v35 = &v38;
      if ((v38.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v35 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      LODWORD(v48.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
      LODWORD(v37) = 12;
      v36 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Setting channels to scan: %{private}s",  &v48,  v37);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl ::chrono::CFAbsoluteTimeClock::time_point, std::optional<WifiNotificationResults>)",  "%s\n",  (const char *)v36);
      if (v36 != buf) {
        free(v36);
      }
    }
  }

  sub_1000217B4(*(uint64_t **)(a1 + 16), a1 + 24, &v41, a3);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }

void sub_10002049C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_100020550(uint64_t a1)
{
  *(double *)(a1 + 144) = sub_100B76F94(*(void **)(a1 + 16), *(float *)(a1 + 184));
  sub_1002F0B04(&v17);
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsWifiBusyRetryDelay", 0x8000100u, kCFAllocatorNull);
  int v3 = sub_1002A77CC(v17, (uint64_t)v2, &v16);
  CFRelease(v2);
  unsigned int v4 = v16;
  double v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  double v8 = (double)v4 / 1000.0;
  if (!v3) {
    double v8 = 1.0;
  }
  *(double *)(a1 + 152) = v8;
  sub_1002F0B04(&v17);
  CFStringRef v9 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsWifiErrorRetryDelay", 0x8000100u, kCFAllocatorNull);
  int v10 = sub_1002A77CC(v17, (uint64_t)v9, &v16);
  CFRelease(v9);
  unsigned int v11 = v16;
  int v12 = v18;
  if (v18)
  {
    uint64_t v13 = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  double v15 = (double)v11 / 1000.0;
  if (!v10) {
    double v15 = 1.0;
  }
  *(double *)(a1 + 160) = v15;
  *(double *)(a1 + 168) = sub_100B7700C(*(void **)(a1 + 16));
}

void sub_100020708( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100020778(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8));
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818F30);
  }
  int v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    CFStringRef v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Scan strategy extends scan, by duration (ms):%{public}lld}",  (uint8_t *)v7,  0x1Cu);
  }

  double v4 = *(double *)(a1 + 200);
  double v5 = (double)v2 / 1000.0 + *(double *)(a1 + 192);
  *(double *)(a1 + 192) = v5;
  *(double *)(a1 + 208) = v5 + v4;
  return v2;
}

void sub_1000208A0(uint64_t a1, double a2)
{
  double v3 = a2 + *(double *)(a1 + 192);
  *(double *)(a1 + 200) = a2;
  *(double *)(a1 + 208) = v3;
  __int16 v8 = 0LL;
  uint64_t v9 = 0LL;
  std::string __p = 0LL;
  sub_100007590( &__p,  *(const void **)(a1 + 280),  *(void *)(a1 + 288),  (uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3);
  uint64_t v4 = *(void *)(a1 + 240);
  if (!v4) {
    sub_100008BDC();
  }
  (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)v4 + 48LL))(v10, v4, &__p);
  sub_100021B50((void *)(a1 + 248), (uint64_t)v10);
  double v5 = v11;
  if (v11 == v10)
  {
    uint64_t v6 = 4LL;
    double v5 = v10;
  }

  else
  {
    if (!v11) {
      goto LABEL_7;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
  if (__p)
  {
    __int16 v8 = __p;
    operator delete(__p);
  }

void sub_100020988( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000209BC(uint64_t a1)
{
  return sub_100020778(a1);
}

uint64_t sub_1000209D4(uint64_t a1)
{
  *(void *)a1 = &off_101818EE8;
  uint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }

  double v3 = *(void **)(a1 + 272);
  if (v3 == (void *)(a1 + 248))
  {
    uint64_t v4 = 4LL;
    double v3 = (void *)(a1 + 248);
  }

  else
  {
    if (!v3) {
      goto LABEL_8;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  double v5 = *(void **)(a1 + 240);
  if (v5 == (void *)(a1 + 216))
  {
    uint64_t v6 = 4LL;
    double v5 = (void *)(a1 + 216);
    goto LABEL_12;
  }

  if (v5)
  {
    uint64_t v6 = 5LL;
LABEL_12:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  unint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }

  __int16 v8 = *(void ***)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v8) {
    sub_100020BB0(a1 + 16, v8);
  }
  return a1;
}

void sub_100020AAC(char *__p)
{
  *(void *)std::string __p = &off_101818EE8;
  uint64_t v2 = (void *)*((void *)__p + 35);
  if (v2)
  {
    *((void *)__p + 36) = v2;
    operator delete(v2);
  }

  double v3 = (char *)*((void *)__p + 34);
  if (v3 == __p + 248)
  {
    uint64_t v4 = 4LL;
    double v3 = __p + 248;
  }

  else
  {
    if (!v3) {
      goto LABEL_8;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*(void *)v3 + 8 * v4))();
LABEL_8:
  double v5 = (char *)*((void *)__p + 30);
  if (v5 == __p + 216)
  {
    uint64_t v6 = 4LL;
    double v5 = __p + 216;
    goto LABEL_12;
  }

  if (v5)
  {
    uint64_t v6 = 5LL;
LABEL_12:
    (*(void (**)(void))(*(void *)v5 + 8 * v6))();
  }

  if (__p[136] && __p[79] < 0) {
    operator delete(*((void **)__p + 7));
  }
  unint64_t v7 = (void *)*((void *)__p + 3);
  if (v7)
  {
    *((void *)__p + 4) = v7;
    operator delete(v7);
  }

  __int16 v8 = (void **)*((void *)__p + 2);
  *((void *)__p + 2) = 0LL;
  if (v8) {
    sub_100020BB0((_DWORD)__p + 16, v8);
  }
  operator delete(__p);
}

void sub_100020B84(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100020BB0(int a1, void **__p)
{
  if (__p)
  {
    double v3 = __p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }

    operator delete(__p);
  }

uint64_t sub_100020BF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  return a1;
}

void *sub_100020C38(void *a1)
{
  *a1 = &off_101818F60;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100020C74(void *__p)
{
  void *__p = &off_101818F60;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *sub_100020CB0(void *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  double v3 = (const void *)a1[2];
  *uint64_t v2 = &off_101818F60;
  v2[1] = v4;
  v2[3] = 0LL;
  v2[4] = 0LL;
  v2[2] = 0LL;
  sub_100007590(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (void)v3) >> 3);
  return v2;
}

void sub_100020D04(_Unwind_Exception *a1)
{
}

void *sub_100020D18(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &off_101818F60;
  a2[1] = v2;
  a2[3] = 0LL;
  a2[4] = 0LL;
  a2[2] = 0LL;
  return sub_100007590( a2 + 2,  *(const void **)(a1 + 16),  *(void *)(a1 + 24),  (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
}

void sub_100020D48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

void sub_100020D60(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_100020D90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLocalizingTopChannels", 0x8000100u, kCFAllocatorNull);
  BOOL v5 = sub_1002AA610(v35, v4, (CFTypeRef *)&v34);
  CFRelease(v4);
  if (v5)
  {
    v6.n128_f64[0] = sub_100021134(v34, (uint64_t)&__p);
  }

  else
  {
    unint64_t v7 = operator new(0x40uLL);
    v33 = v7 + 4;
    *unint64_t v7 = xmmword_1012CCCF8;
    v7[1] = unk_1012CCD08;
    __n128 v6 = (__n128)xmmword_1012CCD18;
    _DWORD v7[2] = xmmword_1012CCD18;
    v7[3] = unk_1012CCD28;
    std::string __p = v7;
    v32 = (char *)(v7 + 4);
  }

  __int16 v8 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v6);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  unint64_t v11 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v11 + 1;
  unint64_t v12 = v11 % ((v32 - (_BYTE *)__p) >> 6);
  sub_1000210A0((void **)a2, *((void *)__p + 8 * v12));
  uint64_t v13 = (char *)__p;
  unint64_t v14 = (char *)__p + 64 * v12;
  uint64_t v17 = *v14;
  unsigned int v16 = (int *)(v14 + 1);
  uint64_t v15 = v17;
  if (!v17) {
    goto LABEL_29;
  }
  double v18 = (void *)(a2 + 16);
  double v19 = *(_DWORD **)(a2 + 8);
  uint64_t v20 = &v16[v15];
  do
  {
    int v21 = (_DWORD *)(*(void *)(a1 + 16) + 8LL * *v16);
    if ((unint64_t)v19 >= *v18)
    {
      double v23 = *(_DWORD **)a2;
      uint64_t v24 = ((uint64_t)v19 - *(void *)a2) >> 2;
      unint64_t v25 = v24 + 1;
      uint64_t v26 = *v18 - (void)v23;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        v28 = (char *)sub_10000956C(a2 + 16, v27);
        double v23 = *(_DWORD **)a2;
        double v19 = *(_DWORD **)(a2 + 8);
      }

      else
      {
        v28 = 0LL;
      }

      __int128 v29 = &v28[4 * v24];
      *(_DWORD *)__int128 v29 = *v21;
      uint64_t v22 = v29 + 4;
      while (v19 != v23)
      {
        int v30 = *--v19;
        *((_DWORD *)v29 - 1) = v30;
        v29 -= 4;
      }

      *(void *)a2 = v29;
      *(void *)(a2 + 8) = v22;
      *(void *)(a2 + 16) = &v28[4 * v27];
      if (v23) {
        operator delete(v23);
      }
    }

    else
    {
      *double v19 = *v21;
      uint64_t v22 = v19 + 1;
    }

    *(void *)(a2 + 8) = v22;
    ++v16;
    double v19 = v22;
  }

  while (v16 != v20);
  uint64_t v13 = (char *)__p;
  if (__p)
  {
LABEL_29:
    v32 = v13;
    operator delete(v13);
  }

void sub_100020FDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100021058(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100021094()
{
}

void sub_1000210A0(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    __n128 v6 = (char *)sub_10000956C(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }

      while (v11 != v10);
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

double sub_100021134@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_1000211B0, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100021194( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000211B0(const void *a1, void **a2)
{
  unint64_t v3 = (unint64_t)a2[2];
  uint64_t v4 = a2[1];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v9 = ((char *)v4 - (_BYTE *)*a2) >> 6;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v3 - (void)*a2;
    if (v11 >> 5 > v10) {
      unint64_t v10 = v11 >> 5;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      int v13 = (char *)sub_10001275C((uint64_t)(a2 + 2), v12);
    }
    else {
      int v13 = 0LL;
    }
    unint64_t v14 = &v13[64 * v9];
    uint64_t v15 = &v13[64 * v12];
    __int128 v16 = v24;
    __int128 v17 = v25;
    __int128 v18 = v27;
    *((_OWORD *)v14 + 2) = v26;
    *((_OWORD *)v14 + 3) = v18;
    *(_OWORD *)unint64_t v14 = v16;
    *((_OWORD *)v14 + 1) = v17;
    uint64_t v8 = v14 + 64;
    uint64_t v20 = (char *)*a2;
    double v19 = (char *)a2[1];
    if (v19 != *a2)
    {
      do
      {
        __int128 v21 = *((_OWORD *)v19 - 4);
        __int128 v22 = *((_OWORD *)v19 - 3);
        __int128 v23 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v14 - 1) = v23;
        *((_OWORD *)v14 - 4) = v21;
        *((_OWORD *)v14 - 3) = v22;
        v14 -= 64;
        v19 -= 64;
      }

      while (v19 != v20);
      double v19 = (char *)*a2;
    }

    *a2 = v14;
    a2[1] = v8;
    a2[2] = v15;
    if (v19) {
      operator delete(v19);
    }
  }

  else
  {
    __int128 v5 = v24;
    __int128 v6 = v25;
    __int128 v7 = v27;
    v4[2] = v26;
    v4[3] = v7;
    *uint64_t v4 = v5;
    v4[1] = v6;
    uint64_t v8 = v4 + 4;
  }

  a2[1] = v8;
}

void sub_1000212B8(const void *a1@<X0>, void *a2@<X8>)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFArrayGetTypeID()) {
    sub_10122398C();
  }
  context = 0LL;
  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  v14.length = Count & ~(Count >> 63);
  v14.location = 0LL;
  CFArrayApplyFunction((CFArrayRef)a1, v14, (CFArrayApplierFunction)sub_100021390, &context);
  __int128 v6 = context;
  __int128 v7 = v12;
  *a2 = 0LL;
  if (v6 != v7)
  {
    uint64_t v8 = 2LL;
    uint64_t v9 = v6;
    do
    {
      if (v8 == 16) {
        break;
      }
      int v10 = *v9++;
      *a2 = v8 - 1;
      *((_DWORD *)a2 + v8++) = v10;
    }

    while (v9 != v7);
  }

  if (v6)
  {
    unint64_t v12 = v6;
    operator delete(v6);
  }

void sub_100021390(const void *a1, uint64_t a2)
{
  int v3 = sub_100021470(a1);
  int v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  __int128 v6 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 2;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10000956C(a2 + 16, v12);
      uint64_t v8 = *(_DWORD **)a2;
      __int128 v6 = *(_DWORD **)(a2 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    CFRange v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)CFRange v14 = v4;
    __int128 v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *__int128 v6 = v3;
    __int128 v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

uint64_t sub_100021470(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID()) {
    sub_101223C6C();
  }
  if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr)) {
    sub_101223B00();
  }
  return valuePtr;
}

void *sub_1000214C8(void *a1)
{
  *a1 = &off_101818FF0;
  CFTypeID v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100021504(void *__p)
{
  void *__p = &off_101818FF0;
  CFTypeID v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *sub_100021540(uint64_t a1)
{
  CFTypeID v2 = operator new(0x20uLL);
  *CFTypeID v2 = &off_101818FF0;
  v2[2] = 0LL;
  v2[3] = 0LL;
  v2[1] = 0LL;
  sub_100007590( v2 + 1,  *(const void **)(a1 + 8),  *(void *)(a1 + 16),  (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  return v2;
}

void sub_100021590(_Unwind_Exception *a1)
{
}

void *sub_1000215A4(uint64_t a1, void *a2)
{
  *a2 = &off_101818FF0;
  a2[2] = 0LL;
  a2[3] = 0LL;
  a2[1] = 0LL;
  return sub_100007590( a2 + 1,  *(const void **)(a1 + 8),  *(void *)(a1 + 16),  (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

void sub_1000215D0(uint64_t a1)
{
  CFTypeID v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

void sub_1000215E8(void *__p)
{
  CFTypeID v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_100021618(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  sub_1000210A0((void **)a2, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  int v4 = *(_DWORD **)(a1 + 8);
  unint64_t v5 = *(_DWORD **)(a1 + 16);
  if (v4 != v5)
  {
    __int128 v6 = (void *)(a2 + 16);
    __int128 v7 = *(_DWORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = *(_DWORD **)a2;
        uint64_t v10 = ((uint64_t)v7 - *(void *)a2) >> 2;
        unint64_t v11 = v10 + 1;
        uint64_t v12 = *v6 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          CFRange v14 = (char *)sub_10000956C(a2 + 16, v13);
          uint64_t v9 = *(_DWORD **)a2;
          __int128 v7 = *(_DWORD **)(a2 + 8);
        }

        else
        {
          CFRange v14 = 0LL;
        }

        uint64_t v15 = &v14[4 * v10];
        *(_DWORD *)uint64_t v15 = *v4;
        uint64_t v8 = v15 + 4;
        while (v7 != v9)
        {
          int v16 = *--v7;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }

        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }

      else
      {
        *__int128 v7 = *v4;
        uint64_t v8 = v7 + 1;
      }

      *(void *)(a2 + 8) = v8;
      v4 += 2;
      __int128 v7 = v8;
    }

    while (v4 != v5);
  }

void sub_100021748(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10002176C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000217A8()
{
}

void *sub_1000217B4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, double *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x98uLL);
  double result = sub_100021824(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_100021810(_Unwind_Exception *a1)
{
}

void *sub_100021824(void *a1, uint64_t *a2, uint64_t a3, double *a4)
{
  a1[2] = 0LL;
  *a1 = off_101819070;
  a1[1] = 0LL;
  sub_1000218EC((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_100021878(_Unwind_Exception *a1)
{
}

void sub_10002188C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101819070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000218A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101819070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1000218C4(uint64_t a1)
{
}

void sub_1000218EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double *a5)
{
  __n128 __p = 0uLL;
  uint64_t v9 = 0LL;
  sub_100021A84( &__p,  *(const void **)a4,  *(void *)(a4 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  sub_100C5D3A4(a2, v10, &__p, *a5);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }

  if (v14 < 0) {
    operator delete(v13);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }

void sub_100021998( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100020BF8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000219C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_10001B72C((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
  __int128 v5 = *(_OWORD *)(a2 + 5);
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  *(_OWORD *)(a1 + 40) = v5;
  char v6 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_1010DD48C(v6, (void *)a2[8], a2[9]);
  }

  else
  {
    __int128 v7 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *(_OWORD *)char v6 = v7;
  }

  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  return a1;
}

void sub_100021A68(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void *sub_100021A84(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    double result = sub_100006E1C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100021AE0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100021AFC(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(void *)(a2 + 104) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    *(void *)(a2 + 24) = v4;
    operator delete(v4);
  }

void *sub_100021B50(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0LL;
  if (v4 == a1)
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = a1;
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      a1[3] = v6;
      *(void *)(a2 + 24) = 0LL;
    }
  }

  else
  {
    a1[3] = 0LL;
  }

  return a1;
}

uint64_t sub_100021BE0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X2>, double *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v73 = 0LL;
  v74 = &v73;
  uint64_t v75 = 0x7812000000LL;
  v76 = sub_1000223CC;
  v77 = sub_1000223D8;
  v78 = &unk_10175E27B;
  sub_1000636FC((uint64_t)v79);
  uint64_t v9 = v74;
  *((_DWORD *)v74 + 29) |= 0x20u;
  uint64_t v10 = (void *)v9[13];
  if (!v10)
  {
    uint64_t v10 = operator new(0x18uLL);
    sub_100063538((uint64_t)v10);
    v9[13] = (uint64_t)v10;
  }

  sub_100071530((uint64_t)v10, a3);
  unint64_t v11 = v74;
  unsigned int v12 = objc_msgSend(objc_msgSend(a2, "status"), "intValue");
  *((_DWORD *)v11 + 29) |= 4u;
  *((_DWORD *)v11 + 17) = v12;
  unint64_t v13 = v74;
  char v14 = (const std::string::value_type *)objc_msgSend(objc_msgSend(a2, "track"), "UTF8String");
  *((_DWORD *)v13 + 29) |= 8u;
  uint64_t v15 = (std::string *)v13[9];
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v15 = (std::string *)operator new(0x18uLL);
    v15->__r_.__value_.__r.__words[0] = 0LL;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v13[9] = (uint64_t)v15;
  }

  std::string::assign(v15, v14);
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472LL;
  v72[2] = sub_1000223E0;
  v72[3] = &unk_101819108;
  v72[4] = &v73;
  objc_msgSend(objc_msgSend(a2, "outputDeviceIDs"), "enumerateKeysAndObjectsUsingBlock:", v72);
  memset(&v71, 0, sizeof(v71));
  uint64_t v16 = *((int *)v74 + 22);
  if ((_DWORD)v16)
  {
    __int128 v17 = (uint64_t *)v74[10];
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17;
      std::to_string(&v67, *(_DWORD *)(*v17 + 8));
      uint64_t v20 = std::string::append(&v67, ",");
      __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v66, *(_DWORD *)(v19 + 12));
      if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v22 = &v66;
      }
      else {
        __int128 v22 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v66.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v66.__r_.__value_.__l.__size_;
      }
      __int128 v24 = std::string::append(&v68, (const std::string::value_type *)v22, size);
      __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0LL;
      v24->__r_.__value_.__l.__cap_ = 0LL;
      v24->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v26 = std::string::append(&v69, ",");
      __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0LL;
      v26->__r_.__value_.__l.__cap_ = 0LL;
      v26->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v28 = *(void *)(v19 + 16);
      int v29 = *(char *)(v28 + 23);
      if (v29 >= 0) {
        int v30 = *(const std::string::value_type **)(v19 + 16);
      }
      else {
        int v30 = *(const std::string::value_type **)v28;
      }
      if (v29 >= 0) {
        std::string::size_type v31 = *(unsigned __int8 *)(v28 + 23);
      }
      else {
        std::string::size_type v31 = *(void *)(v28 + 8);
      }
      v32 = std::string::append(&v70, v30, v31);
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      v34 = std::string::append(&v65, ";");
      __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = v34->__r_.__value_.__l.__cap_;
      *(_OWORD *)buf = v35;
      v34->__r_.__value_.__l.__size_ = 0LL;
      v34->__r_.__value_.__l.__cap_ = 0LL;
      v34->__r_.__value_.__r.__words[0] = 0LL;
      if (buf[23] >= 0) {
        v36 = buf;
      }
      else {
        v36 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        std::string::size_type v37 = buf[23];
      }
      else {
        std::string::size_type v37 = *(void *)&buf[8];
      }
      std::string::append(&v71, v36, v37);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      ++v17;
      v18 -= 8LL;
    }

    while (v18);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819128);
  }
  std::string v38 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    int v39 = *((_DWORD *)v74 + 17);
    uint64_t v40 = (uint64_t *)v74[9];
    double v41 = &v71;
    if ((v71.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v41 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    *(void *)buf = 68289795LL;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v39;
    __int16 v81 = 2081;
    v82 = v40;
    __int16 v83 = 2081;
    v84 = v41;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Now Playing, status:%{public}d, track:%{private, location:escape_only}s, output DeviceIDs:%{private, location:escape_only}s}",  buf,  0x2Cu);
  }

  v42 = v74;
  uint64_t v43 = v74[13];
  if (!v43) {
    uint64_t v43 = *(void *)(qword_1019A08E0 + 56);
  }
  int v44 = *(unsigned __int8 *)(v43 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    BOOL v45 = *(_DWORD *)(a1 + 20) != 1 && *((_DWORD *)v74 + 17) == 1;
    *(void *)&buf[8] = 0LL;
    *(void *)&buf[16] = 0LL;
    *(void *)buf = &buf[8];
    uint64_t v48 = *(int *)(a1 + 40);
    if ((_DWORD)v48)
    {
      uint64_t v49 = *(void *)(a1 + 32);
      uint64_t v50 = 8 * v48;
      do
      {
        sub_10002276C((uint64_t **)buf, *(const void ***)(*(void *)v49 + 16LL), *(void *)(*(void *)v49 + 16LL));
        v49 += 8LL;
        v50 -= 8LL;
      }

      while (v50);
      v42 = v74;
    }

    *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
    uint64_t v51 = *((int *)v42 + 22);
    if ((_DWORD)v51)
    {
      uint64_t v52 = v42[10];
      uint64_t v53 = 8 * v51;
      do
      {
        sub_10002276C((uint64_t **)&v65, *(const void ***)(*(void *)v52 + 16LL), *(void *)(*(void *)v52 + 16LL));
        v52 += 8LL;
        v53 -= 8LL;
      }

      while (v53);
      std::string::size_type cap = v65.__r_.__value_.__l.__cap_;
    }

    else
    {
      std::string::size_type cap = 0LL;
    }

    if (*(void *)&buf[16] == cap)
    {
      v55 = *(unsigned __int8 **)buf;
      if (*(_BYTE **)buf == &buf[8])
      {
        LOBYTE(v57) = 1;
      }

      else
      {
        std::string::size_type v56 = v65.__r_.__value_.__r.__words[0];
        do
        {
          int v57 = sub_100022A24((uint64_t)&v70, v55 + 32, (unsigned __int8 *)(v56 + 32));
          if (!v57) {
            break;
          }
          v58 = (unsigned __int8 *)*((void *)v55 + 1);
          v59 = v55;
          if (v58)
          {
            do
            {
              v55 = v58;
              v58 = *(unsigned __int8 **)v58;
            }

            while (v58);
          }

          else
          {
            do
            {
              v55 = (unsigned __int8 *)*((void *)v59 + 2);
              BOOL v46 = *(void *)v55 == (void)v59;
              v59 = v55;
            }

            while (!v46);
          }

          v60 = *(void **)(v56 + 8);
          if (v60)
          {
            do
            {
              v61 = v60;
              v60 = (void *)*v60;
            }

            while (v60);
          }

          else
          {
            do
            {
              v61 = *(void **)(v56 + 16);
              BOOL v46 = *v61 == v56;
              std::string::size_type v56 = (std::string::size_type)v61;
            }

            while (!v46);
          }

          std::string::size_type v56 = (std::string::size_type)v61;
        }

        while (v55 != &buf[8]);
      }
    }

    else
    {
      LOBYTE(v57) = 0;
    }

    sub_1000229D4((uint64_t)&v65, (char *)v65.__r_.__value_.__l.__size_);
    sub_1000229D4((uint64_t)buf, *(char **)&buf[8]);
    if (v44) {
      BOOL v62 = v45;
    }
    else {
      BOOL v62 = 0;
    }
    char v47 = v62 | v57 ^ 1;
    v42 = v74;
  }

  else
  {
    if (*(_BYTE *)(v43 + 8)) {
      BOOL v46 = *((_DWORD *)v74 + 17) == 1;
    }
    else {
      BOOL v46 = 0;
    }
    char v47 = v46;
  }

  sub_1000225A4(a1, (uint64_t)(v42 + 6));
  sub_1000225E8((uint64_t)(v74 + 6), 0, 0, 3u, (uint64_t)&v65, *a4);
  buf[0] = v47;
  sub_1000865CC(&buf[8]);
  *a5 = buf[0];
  sub_1000865CC(a5 + 8);
  sub_100086708(&buf[8]);
  sub_100086708(&v65);
  _Block_object_dispose(&v73, 8);
  return sub_100078068(v79);
}

void sub_100022288( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

uint64_t sub_1000223CC(uint64_t a1, uint64_t a2)
{
  return sub_100077F78(a1 + 48, a2 + 48);
}

uint64_t sub_1000223D8(uint64_t a1)
{
  return sub_100078068(a1 + 48);
}

id sub_1000223E0(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10002243C;
  v5[3] = &unk_1018190E0;
  uint64_t v3 = *(void *)(a1 + 32);
  v5[4] = a2;
  v5[5] = v3;
  return [a3 enumerateKeysAndObjectsUsingBlock:v5];
}

id sub_10002243C(uint64_t a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10002249C;
  v6[3] = &unk_1018190B8;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[5] = a2;
  v6[6] = v3;
  v6[4] = v4;
  return [a3 enumerateObjectsUsingBlock:v6];
}

std::string *sub_10002249C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(int **)(*(void *)(a1 + 48) + 8LL);
  int v5 = v4[23];
  uint64_t v6 = v4[22];
  if ((int)v6 >= v5)
  {
    if (v5 == v4[24])
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v4 + 20),  v5 + 1);
      int v5 = v4[23];
    }

    v4[23] = v5 + 1;
    size_t v8 = sub_100022700();
    uint64_t v9 = *((void *)v4 + 10);
    uint64_t v10 = v4[22];
    v4[22] = v10 + 1;
    *(void *)(v9 + 8 * sub_10001DC84(v11, v10) = v8;
  }

  else
  {
    uint64_t v7 = *((void *)v4 + 10);
    v4[22] = v6 + 1;
    size_t v8 = *(void **)(v7 + 8 * v6);
  }

  unsigned int v11 = [*(id *)(a1 + 32) intValue];
  *((_DWORD *)v8 + 7) |= 1u;
  *((_DWORD *)v8 + 2) = v11;
  unsigned int v12 = [*(id *)(a1 + 40) intValue];
  *((_DWORD *)v8 + 7) |= 2u;
  *((_DWORD *)v8 + 3) = v12;
  unint64_t v13 = (const std::string::value_type *)[a2 UTF8String];
  *((_DWORD *)v8 + 7) |= 4u;
  char v14 = (std::string *)v8[2];
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    v8[2] = v14;
  }

  return std::string::assign(v14, v13);
}

uint64_t sub_1000225A4(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72))
  {
    sub_100078A4C(a1, a2);
  }

  else
  {
    sub_100077F78(a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }

  return a1;
}

void sub_1000225E8( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  if (!sub_100064160(v12))
  {
    char v14 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v15 = 19803;
    uint64_t v16 = "set_eventtype";
    goto LABEL_6;
  }

  int v13 = *(_DWORD *)(a5 + 128);
  *(_DWORD *)(a5 + 72) = v12;
  *(double *)(a5 + 8) = a6;
  *(_BYTE *)(a5 + 77) = a2;
  *(_DWORD *)(a5 + 128) = v13 | 0x2803;
  *(_BYTE *)(a5 + 76) = a3;
  if ((sub_100064130(a4) & 1) == 0)
  {
    char v14 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v15 = 20312;
    uint64_t v16 = "set_confidencelevel";
LABEL_6:
    __assert_rtn(v16, "microlocation.pb.h", v15, v14);
  }

  *(_DWORD *)(a5 + 128) |= 0x4000u;
  *(_DWORD *)(a5 + 120) = a4;
  sub_100101E3C(a5, a1);
}

void sub_1000226CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000226E0(uint64_t result)
{
  if (*(_BYTE *)(result + 72))
  {
    double result = sub_100078068(result);
    *(_BYTE *)(result + 72) = 0;
  }

  return result;
}

void *sub_100022700()
{
  CFStringRef v0 = operator new(0x20uLL);
  sub_1000636D4(v0);
  return v0;
}

void sub_10002272C(_Unwind_Exception *a1)
{
}

void sub_100022740(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t *sub_10002276C(uint64_t **a1, const void **a2, uint64_t a3)
{
  int v5 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v8, a2);
  double result = *v5;
  if (!*v5)
  {
    sub_100022884((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000085FC(a1, v8, v5, v7);
    return v7;
  }

  return result;
}

void *sub_1000227E8(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        uint64_t v4 = *v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (!sub_100022920(v7, v9, a3)) {
        break;
      }
      int v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }

LABEL_10:
  *a2 = v8;
  return v5;
}

    ++v5;
  }

  while (v5 != v4);
LABEL_18:
  if (v6 != v4 && v6 == v2) {
    return 0LL;
  }
  if ((v1 & 0x80u) == 0LL) {
    unsigned int v11 = (_BYTE *)a1;
  }
  else {
    unsigned int v11 = *(_BYTE **)a1;
  }
  if ((v1 & 0x80u) != 0LL) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  unsigned int v12 = 20LL;
  if (v1 < 0x14) {
    unsigned int v12 = v1;
  }
  if (v12)
  {
    int v13 = &v11[v12];
    char v14 = v11;
    int v15 = v13;
    do
    {
      if (*v14 == 73)
      {
        uint64_t v16 = &_mh_execute_header.magic + 1;
        while (v16 != 20)
        {
          if (&v14[v16] == v13) {
            goto LABEL_40;
          }
          __int128 v17 = v14[v16];
          uint64_t v18 = aInternalclient[v16++];
          if (v17 != v18) {
            goto LABEL_32;
          }
        }

        int v15 = v14;
      }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(void *)(v5 + 24),  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(float *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 24), a2);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(float *)(v5 + 20),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(5LL, *(void *)(v5 + 32), a2);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(3LL, *(void *)(v5 + 16), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  uint64_t v18 = v14;
  uint64_t v20 = 0LL;
  __int128 v21 = 0LL;
  __n128 __p = 0LL;
  sub_10001B72C(&__p, v15, (uint64_t)v16, ((char *)v16 - (_BYTE *)v15) >> 2);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }

  if (v15)
  {
    uint64_t v16 = (unsigned int *)v15;
    operator delete(v15);
  }

  if (v23)
  {
    __int128 v24 = v23;
    operator delete(v23);
  }

    uint64_t v7 = *((void *)*(&off_101826020 + (int)(v3 ^ 0x45E0922B))
         + (int)((626
                * (((v3 + 40) ^ (((uint64_t (*)(void))*(&off_101826020
                                                                                   + (int)(v3 - 1172345209)))((*((_DWORD *)*(&off_101826020 + (int)(v3 - 1172345236)) + 6 * v6 + 2) - 510884208)) == 0)) & 1)) ^ (v3 - 1172345207))
         - 1)
       - 4LL;
    __asm { BR              X9 }
  }

  if (v4 == 1778828264)
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }

  if (v4 == 1778828267)
  {
    uint64_t v6 = 2;
    goto LABEL_10;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(double *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(double *)(v5 + 40),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  (int)a2,  a4);
  if ((v5[8] & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  (int)a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 16),  a3);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  (int)a2,  a4);
  }
  return result;
}

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A0DD8 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(v5 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A0DD8 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  }

  return result;
}

  PBDataWriterWriteInt32Field(a3, self->_rawGradeType, 5LL);
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    goto LABEL_11;
  }
}

  *((_DWORD *)a3 + 5) = self->_rawGradeType;
  *((_BYTE *)a3 + 32) |= 4u;
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    goto LABEL_11;
  }
}

  *((_DWORD *)result + 7) = LODWORD(self->_verticalSpeed);
  *((_BYTE *)result + 32) |= 0x10u;
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 8) == 0) {
      return result;
    }
    goto LABEL_6;
  }

  self->_rawGradeType = *((_DWORD *)a3 + 5);
  *(_BYTE *)&self->_has |= 4u;
  if ((*((_BYTE *)a3 + 32) & 8) != 0) {
    goto LABEL_11;
  }
}

  if (*(unsigned __int8 *)(a1 + 176) != (_DWORD)v6)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 24LL))(*(void *)(a1 + 32), v6);
    *(_BYTE *)(a1 + 176) = v6;
  }

  if ((v9 | v8) == 1) {
    sub_1002271F4(a1, v9 ^ 1);
  }
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    uint64_t v10 = 1;
    if (*(_DWORD *)(a1 + 112) != 4)
    {
      if (*(_BYTE *)(a1 + 128))
      {
        unsigned int v11 = a2 - *(double *)(a1 + 120);
        uint64_t v10 = v11 <= 30.0 && v11 >= 0.0;
      }

      else
      {
        uint64_t v10 = 0;
      }
    }

    v30[0] = 1;
    *(void *)buf = v30;
    if (*((_DWORD *)sub_100228E48((uint64_t **)(a1 + 40), v30, (uint64_t)&unk_1012CF090, (unsigned int **)buf) + 8)
      && (HIDWORD(v29) = 1,
          *(void *)buf = (char *)&v29 + 4,
          *((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 40),  (int *)&v29 + 1,  (uint64_t)&unk_1012CF090,  (unsigned int **)buf)
          + 8) != 3))
    {
      if (!v10)
      {
LABEL_43:
        sub_1002271F4(a1, 2);
        goto LABEL_44;
      }
    }

    else if (!v10)
    {
      goto LABEL_44;
    }

    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10182B748);
    }
    int v13 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#cltr,user was recently on a track,changing WorkoutState to RemoteCompatibleButUnavailable",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182B748);
      }
      LOWORD(v30[0]) = 0;
      LODWORD(v29) = 2;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934998,  0LL,  "#cltr,user was recently on a track,changing WorkoutState to RemoteCompatibleButUnavailable",  v30,  v29);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLStreamingAwareLocationProviderLocalGPSStateMachine::setWorkoutStateBasedOnMotionCompatibility(CFAbsoluteTime)",  "%s\n",  v28);
    }

    goto LABEL_43;
  }

  v30[0] = 1;
  *(void *)buf = v30;
  if (*((_DWORD *)sub_100228E48((uint64_t **)(a1 + 40), v30, (uint64_t)&unk_1012CF090, (unsigned int **)buf) + 8) == 3
    && *(_DWORD *)(a1 + 100) == 2
    && (v9 & 1) == 0)
  {
    sub_1002271F4(a1, 1);
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_tileY),  @"tileY");
  has = (char)self->_has;
  if ((has & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((has & 1) != 0) {
LABEL_6:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", self->_secKey),  @"secKey");
  return v3;
}

  PBDataWriterWriteBOOLField(a3, self->_isAllowOverCellular, 4LL);
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    goto LABEL_11;
  }
}

  *((_BYTE *)a3 + 28) = self->_isAllowOverCellular;
  *((_BYTE *)a3 + 32) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    goto LABEL_11;
  }
}

  *((_DWORD *)result + 6) = self->_tileY;
  *((_BYTE *)result + 32) |= 8u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      return result;
    }
    goto LABEL_6;
  }

  self->_isAllowOverCellular = *((_BYTE *)a3 + 28);
  *(_BYTE *)&self->_has |= 0x10u;
  if ((*((_BYTE *)a3 + 32) & 1) != 0) {
    goto LABEL_11;
  }
}

  fclose(v6);
  if (v9)
  {
    BZ2_bzWriteClose((int *)&v30 + 1, v9, 0, 0LL, 0LL);
    if (HIDWORD(v30))
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182E260);
      }
      unsigned int v12 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int128 v33 = a2;
        v34 = 1026;
        __int128 v35 = HIDWORD(v30);
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "error closing target file: %{public}s, bzerror: %{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10182E260);
        }
        *(_DWORD *)std::string::size_type v31 = 136446466;
        *(void *)&v31[4] = a2;
        *(_WORD *)&v31[12] = 1026;
        *(_DWORD *)&v31[14] = HIDWORD(v30);
        LODWORD(v30) = 18;
        int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "error closing target file: %{public}s, bzerror: %{public}d",  v31,  v30);
        sub_10029211C("Generic", 1LL, 0LL, 0LL, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v29);
      }
    }
  }

  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

    -[CLVO2MaxService markXpcActivityDone:](self, "markXpcActivityDone:", a3);
    return;
  }

  -[CLVO2MaxService updateRetrocomputeStatus:unavailableReasons:]( self,  "updateRetrocomputeStatus:unavailableReasons:",  3LL,  0LL);
  self->fUpdateRetrocomputedDataSuccess = 1;
  sub_1001B5E8C((uint64_t)self->fRetrocomputeBodyMetricsDb.__ptr_.__value_);
  -[CLVO2MaxService deleteHealthKitSamples:](self, "deleteHealthKitSamples:", 1LL);
  self->fTriggerRetrocomputeInProgress = 0;
  if (a3) {
    goto LABEL_10;
  }
}

  if (!*(void *)(a1 + 8)) {
    return;
  }
LABEL_11:
  sub_100309A60(&v14);
  uint64_t v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  uint64_t v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)a1;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  unsigned int v11 = std::string::append(&v15, v9, v10);
  std::string::size_type size = v11->__r_.__value_.__l.__size_;
  *uint64_t v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(void *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = v11->__r_.__value_.__s.__size_;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  int v13 = (char)v15.__r_.__value_.__s.__size_;
  *((_BYTE *)v3 + 23) = size;
  if (v13 < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

  if (!sub_1002954D0(*(double *)(a3 + 4), *(double *)(a3 + 12)))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    __int128 v25 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      __int128 v26 = a1 + 8;
      if (a1[31] < 0) {
        __int128 v26 = (void *)*v26;
      }
      __int128 v27 = *a2;
      uint64_t v28 = *(void *)(a3 + 4);
      int v29 = *(void *)(a3 + 12);
      *(_DWORD *)buf = 136381443;
      uint64_t v53 = v26;
      uint64_t v54 = 1024;
      v55 = v27;
      std::string::size_type v56 = 2048;
      int v57 = v28;
      v58 = 2048;
      v59 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_FAULT,  "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)",  buf,  0x26u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    int v30 = a1 + 8;
    if (a1[31] < 0) {
      int v30 = (void *)*v30;
    }
    std::string::size_type v31 = *a2;
    v32 = *(void *)(a3 + 4);
    __int128 v33 = *(void *)(a3 + 12);
    *(_DWORD *)uint64_t v51 = 136381443;
    *(void *)&v51[4] = v30;
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = v31;
    *(_WORD *)&v51[18] = 2048;
    *(void *)&v51[20] = v32;
    *(_WORD *)&v51[28] = 2048;
    *(void *)&v51[30] = v33;
    __int128 v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)",  v51,  38,  *(void *)v51,  *(_OWORD *)&v51[8],  *(_OWORD *)&v51[24]);
    goto LABEL_89;
  }

  if (*(double *)(a3 + 36) > 0.0 && !sub_100295514(*(double *)(a3 + 28)))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    v36 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v37 = a1 + 8;
      if (a1[31] < 0) {
        std::string::size_type v37 = (void *)*v37;
      }
      std::string v38 = *a2;
      int v39 = *(void *)(a3 + 28);
      uint64_t v40 = *(void *)(a3 + 36);
      *(_DWORD *)buf = 136381443;
      uint64_t v53 = v37;
      uint64_t v54 = 1024;
      v55 = v38;
      std::string::size_type v56 = 2048;
      int v57 = v39;
      v58 = 2048;
      v59 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)",  buf,  0x26u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    double v41 = a1 + 8;
    if (a1[31] < 0) {
      double v41 = (void *)*v41;
    }
    v42 = *a2;
    uint64_t v43 = *(void *)(a3 + 28);
    int v44 = *(void *)(a3 + 36);
    *(_DWORD *)uint64_t v51 = 136381443;
    *(void *)&v51[4] = v41;
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = v42;
    *(_WORD *)&v51[18] = 2048;
    *(void *)&v51[20] = v43;
    *(_WORD *)&v51[28] = 2048;
    *(void *)&v51[30] = v44;
    __int128 v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "LocationProvider,Provider %{private}s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)",  v51,  38,  *(void *)v51,  *(_OWORD *)&v51[8],  *(_OWORD *)&v51[24]);
    goto LABEL_89;
  }

  if (sub_10029286C(*(double *)(a3 + 4), *(double *)(a3 + 12)))
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    unsigned int v12 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      int v13 = a1 + 8;
      if (a1[31] < 0) {
        int v13 = (void *)*v13;
      }
      char v14 = *a2;
      *(_DWORD *)buf = 136380931;
      uint64_t v53 = v13;
      uint64_t v54 = 1024;
      v55 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "LocationProvider,Provider %{private}s is notifying clients (type=%d) of a <0,0> position",  buf,  0x12u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    int v15 = a1 + 8;
    if (a1[31] < 0) {
      int v15 = (void *)*v15;
    }
    uint64_t v16 = *a2;
    *(_DWORD *)uint64_t v51 = 136380931;
    *(void *)&v51[4] = v15;
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = v16;
    __int128 v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "LocationProvider,Provider %{private}s is notifying clients (type=%d) of a <0,0> position",  v51,  18,  *(void *)v51,  *(_OWORD *)&v51[8],  *(_OWORD *)&v51[24]);
LABEL_89:
    __int128 v24 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLoca tionProvider_Type::NotificationData &, BOOL, int, BOOL)",  "%s\n");
LABEL_90:
    if (v24 != buf) {
      free(v24);
    }
    return;
  }

  uint64_t v10 = *a2;
LABEL_63:
  if ((v10 - 1) < 2)
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    v34 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v35 = a1 + 8;
      if (a1[31] < 0) {
        __int128 v35 = (void *)*v35;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v53 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "LocationProvider,#Warning Provider %s should not be sending coarse and fine notifications directly",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10183B460);
      }
      char v47 = a1 + 8;
      if (a1[31] < 0) {
        char v47 = (void *)*v47;
      }
      *(_DWORD *)uint64_t v51 = 136315138;
      *(void *)&v51[4] = v47;
      uint64_t v48 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  0LL,  "LocationProvider,#Warning Provider %s should not be sending coarse and fine notifications directly",  v51);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLo cationProvider_Type::NotificationData &, BOOL, int, BOOL)",  "%s\n",  v48);
    }

    goto LABEL_76;
  }

  if (v10 != 9)
  {
    if (!v10)
    {
      if (*(double *)(a3 + 76) + *(double *)(a3 + 88) > CFAbsoluteTimeGetCurrent())
      {
        *(_DWORD *)buf = 9;
        (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
      }

      *(_DWORD *)buf = 3;
      sub_10047C2A0((uint64_t)a1, (int *)buf, a3, a4, -1);
      *(_DWORD *)buf = 4;
      sub_10047C2A0((uint64_t)a1, (int *)buf, a3, a4, -1);
      *(_DWORD *)buf = 39;
      sub_10047C2A0((uint64_t)a1, (int *)buf, a3, a4, -1);
      *(_DWORD *)buf = 2;
      sub_10047C2A0((uint64_t)a1, (int *)buf, a3, a4, -1);
      *(_DWORD *)buf = 1;
      sub_10047C2A0((uint64_t)a1, (int *)buf, a3, a4, -1);
      *(_DWORD *)buf = 5;
      sub_10047C2A0((uint64_t)a1, (int *)buf, a3, a4, -1);
    }

  if (vabdd_f64(Current, a5) < 10.0 && vabdd_f64(Current, self->_lastTimestampSavedRecovery) > 180.0) {
    -[CLBarometerCalibrationBiasEstimator saveBiasInfo](self, "saveBiasInfo");
  }
  if (qword_1019346A0 != -1) {
    dispatch_once(&qword_1019346A0, &stru_10183BC80);
  }
  char v14 = (os_log_s *)qword_1019346A8;
  if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
  {
    weatherEstimateInMeter = self->_weatherEstimateInMeter;
    __int128 v17 = self->_previousCumulativeDeltaIOSTime;
    *(_DWORD *)buf = 134219008;
    int v39 = weatherEstimateInMeter;
    uint64_t v40 = 2048;
    double v41 = v16;
    v42 = 2048;
    uint64_t v43 = v17;
    int v44 = 2048;
    BOOL v45 = (double)a3;
    BOOL v46 = 2048;
    char v47 = (double)a4;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "weatherEstimateWithRebase is %f weatherEstimateFromSigElevation is %f timestamp is %f cumulativeAscendingDelta is %f cumulativeDescendingDelta is %f",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10183BC80);
    }
    __int128 v21 = self->_weatherEstimateInMeter;
    __int128 v23 = self->_previousCumulativeDeltaIOSTime;
    uint64_t v28 = 134219008;
    int v29 = v21;
    int v30 = 2048;
    std::string::size_type v31 = v22;
    v32 = 2048;
    __int128 v33 = v23;
    v34 = 2048;
    __int128 v35 = (double)a3;
    v36 = 2048;
    std::string::size_type v37 = (double)a4;
    LODWORD(v25) = 52;
    __int128 v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346A8,  2LL,  "weatherEstimateWithRebase is %f weatherEstimateFromSigElevation is %f timestamp is %f cumulativeAsce ndingDelta is %f cumulativeDescendingDelta is %f",  COERCE_DOUBLE(&v28),  v25,  v26,  v27);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLBarometerCalibrationBiasEstimator updateEstimatedWeatherWithCumulativeAscendingDelta:andDescendingDelta:andIosTimestamp:]",  "%s\n",  v24);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(v4 + 24),  a3);
  int v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  if ((v5[8] & 0x10) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  a2,  a4);
  }
  return result;
}

  v80 = 0LL;
  if ((*(_WORD *)&has & 0x800) != 0)
  {
LABEL_5:
    v79 = 2654435761LL * self->_nHighCatherine;
    if ((*(_WORD *)&has & 0x8000) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    v78 = 0LL;
    if ((*(_WORD *)&has & 0x400) != 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }

  PBDataWriterWriteFloatField(a3, 8LL, self->_metsWR);
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    goto LABEL_11;
  }
}

  *((_DWORD *)a3 + 9) = LODWORD(self->_metsWR);
  *((_BYTE *)a3 + 52) |= 4u;
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    goto LABEL_11;
  }
}

  *((_DWORD *)result + 8) = LODWORD(self->_metsHR);
  *((_BYTE *)result + 52) |= 2u;
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      return result;
    }
    goto LABEL_6;
  }

  self->_metsWR = *((float *)a3 + 9);
  *(_BYTE *)&self->_has |= 4u;
  if ((*((_BYTE *)a3 + 52) & 1) != 0) {
    goto LABEL_11;
  }
}

  uint64_t v16 = 0LL;
  sub_10055A05C(a2, (uint64_t)&v16);
  if (v16)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    unsigned int v11 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = objc_msgSend(-[NSError description](v16, "description"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      uint64_t v19 = 0;
      uint64_t v20 = 2082;
      __int128 v21 = "";
      __int128 v22 = 2082;
      __int128 v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Attempting to apply archived auth decisions; early return due to failure to unarchive aut"
        "horization decisions, errorDesc:%{public, location:escape_only}s}",
        buf,
        0x1Cu);
    }

    int v13 = v16;
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    char v14 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      uint64_t v19 = 0;
      uint64_t v20 = 2082;
      __int128 v21 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Did not fail to unarchive authorization decisions! This is unexpected unless the archive came from a Sydro or earlier device. Early returning because this function must no-op.}",  buf,  0x12u);
    }

    int v13 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomainPrivate,  5LL,  0LL);
  }

  if ((__s1.__r_.__value_.__s.__size_ & 0x80) != 0) {
LABEL_22:
  }
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v13;
}

    a5[2](a5, 0LL);
    return;
  }

  if (-[CLClientManagerAuthorizationContext isNonProvisionallyAuthorizedForServiceType:]( v14,  "isNonProvisionallyAuthorizedForServiceType:",  a2))
  {
    a5[2](a5, 1LL);
    return;
  }

  if (-[CLClientManagerAuthorizationContext transientAwareRegistrationResult](v14, "transientAwareRegistrationResult") != 8) {
    goto LABEL_10;
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  uint64_t v16 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 2050;
    *(void *)&buf[30] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Handle #provisional intermediation for service, Client:%{public, location:escape_only }@, serviceType:%{public}lu}",  buf,  0x26u);
  }

  __int128 v17 = *(unsigned __int8 **)(a1 + 264);
  if (v17)
  {
    if (v9)
    {
      [v9 cppClientKey];
      uint64_t v18 = buf[23];
      uint64_t v19 = *(void *)&buf[8];
    }

    else
    {
      uint64_t v19 = 0LL;
      uint64_t v18 = 0;
      memset(buf, 0, 24);
    }

    __int128 v21 = v17[23];
    if ((v21 & 0x80u) == 0LL) {
      __int128 v22 = v17[23];
    }
    else {
      __int128 v22 = *((void *)v17 + 1);
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v19 = v18;
    }
    if (v22 == v19)
    {
      if ((v18 & 0x80u) == 0) {
        __int128 v23 = buf;
      }
      else {
        __int128 v23 = *(unsigned __int8 **)buf;
      }
      if ((v21 & 0x80) != 0)
      {
        uint64_t v20 = memcmp(*(const void **)v17, v23, *((void *)v17 + 1)) != 0;
      }

      else if (v17[23])
      {
        __int128 v24 = v21 - 1;
        do
        {
          __int128 v26 = *v17++;
          __int128 v25 = v26;
          __int128 v27 = *v23++;
          uint64_t v20 = v25 != v27;
        }

        while (v25 == v27 && v24-- != 0);
      }

      else
      {
        uint64_t v20 = 0LL;
      }
    }

    else
    {
      uint64_t v20 = 1LL;
    }

    if ((v18 & 0x80) != 0) {
      operator delete(*(void **)buf);
    }
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  int v29 = -1.0;
  if (*(double *)(a1 + 304) > 0.0)
  {
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    int v29 = v30 - *(double *)(a1 + 304);
  }

  v57[0] = objc_msgSend(v9, "userlessClientKeyPath", @"ClientKey");
  v56[1] = @"Challenger";
  v57[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v20);
  v56[2] = @"OnDeckDuration";
  v57[2] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v29);
  AnalyticsSendEvent( @"com.apple.locationd.client.intermediation",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v57,  v56,  3LL));
  [*(id *)(a1 + 296) nextFireDelay];
  std::string::size_type v31 = (unsigned __int8 **)(a1 + 264);
  if (v32 >= 1.79769313e308) {
    goto LABEL_115;
  }
  __int128 v33 = *v31;
  if (!*v31) {
    goto LABEL_115;
  }
  if (v9)
  {
    [v9 cppClientKey];
    v34 = buf[23];
    __int128 v35 = *(void *)&buf[8];
  }

  else
  {
    __int128 v35 = 0LL;
    v34 = 0;
    memset(buf, 0, 24);
  }

  v36 = v33[23];
  if ((v36 & 0x80u) == 0LL) {
    std::string::size_type v37 = v33[23];
  }
  else {
    std::string::size_type v37 = *((void *)v33 + 1);
  }
  if ((v34 & 0x80u) == 0) {
    __int128 v35 = v34;
  }
  if (v37 == v35)
  {
    if ((v34 & 0x80u) == 0) {
      std::string v38 = buf;
    }
    else {
      std::string v38 = *(unsigned __int8 **)buf;
    }
    if ((v36 & 0x80) != 0)
    {
      uint64_t v43 = memcmp(*(const void **)v33, v38, *((void *)v33 + 1)) != 0;
    }

    else if (v33[23])
    {
      int v39 = v36 - 1;
      do
      {
        double v41 = *v33++;
        uint64_t v40 = v41;
        v42 = *v38++;
        uint64_t v43 = v40 != v42;
      }

      while (v40 == v42 && v39-- != 0);
    }

    else
    {
      uint64_t v43 = 0;
    }
  }

  else
  {
    uint64_t v43 = 1;
  }

  if ((v34 & 0x80) != 0) {
    operator delete(*(void **)buf);
  }
  if (v43)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    BOOL v45 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v46 = *v31;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v9;
      *(_WORD *)&buf[28] = 2082;
      *(void *)&buf[30] = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Dropping #provisional intermediation reigning king is not yet stale, Client:%{publi c, location:escape_only}@, kingOfTheDeck:%{public, location:escape_only}s}",  buf,  0x26u);
    }

    a5[2](a5, 0LL);
  }

  else
  {
LABEL_115:
    if (*(void *)(a1 + 272))
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      char v47 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Skipping #provisional intermediation throne change because of outstanding prompt, w ouldBeKing:%{public, location:escape_only}@}",  buf,  0x1Cu);
      }
    }

    else
    {
      uint64_t v48 = *v31;
      if (!*v31) {
        goto LABEL_96;
      }
      if (v9) {
        [v9 cppClientKey];
      }
      else {
        memset(buf, 0, 24);
      }
      uint64_t v49 = sub_1004C21B4(v48, buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v49)
      {
LABEL_96:
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        uint64_t v50 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = (const char *)*v31;
          if (*v31)
          {
            if (v51[23] < 0) {
              uint64_t v51 = *(const char **)v51;
            }
          }

          else
          {
            uint64_t v51 = "nobody";
          }

          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v9;
          *(_WORD *)&buf[28] = 2082;
          *(void *)&buf[30] = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Taking #provisional intermediation kingOfTheDeck, newKing:%{public, location:es cape_only}@, oldKing:%{public, location:escape_only}s}",  buf,  0x26u);
        }

        if (v9) {
          [v9 cppClientKey];
        }
        else {
          memset(buf, 0, 24);
        }
        uint64_t v52 = (unsigned __int8 *)operator new(0x18uLL);
        *(_OWORD *)uint64_t v52 = *(_OWORD *)buf;
        *((void *)v52 + 2) = *(void *)&buf[16];
        memset(buf, 0, 24);
        uint64_t v53 = (void **)*v31;
        *std::string::size_type v31 = v52;
        if (v53)
        {
          sub_10058A4FC(a1 + 264, v53);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      uint64_t v54 = *(void *)(a1 + 288);
      if (v54)
      {
        (*(void (**)(uint64_t, void))(v54 + 16))(v54, 0LL);

        *(void *)(a1 + 288) = 0LL;
      }

      *(void *)(a1 + 288) = [a5 copy];
      [*(id *)(a1 + 296) setNextFireDelay:300.0];
      [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
      *(void *)(a1 + 304) = v55;
      *(_BYTE *)(a1 + 280) = 1;
    }
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  unsigned int v12 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int128 v35 = 2082;
    v36 = "";
    std::string::size_type v37 = 2050;
    std::string v38 = (id)v5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:ImproveAccuracyNotification object not created for notification, notification:%{public}p}",  buf,  0x1Cu);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  int v13 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int128 v35 = 2082;
    v36 = "";
    std::string::size_type v37 = 2050;
    std::string v38 = (id)v5;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "ImproveAccuracyNotification object not created for notification",  "{msg%{public}.0s:ImproveAccuracyNotification object not created for notification, notification:%{public}p}",  buf,  0x1Cu);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  if ((v5[8] & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  v4,  a4);
  if ((*(_DWORD *)(v5 + 32) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 24),  v4,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  if ((v5[8] & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 32),  a2,  a4);
    if ((*(_DWORD *)(v5 + 40) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  uint64_t v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  uint64_t v6 = v5[9];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  if ((v5[8] & 0x10) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  }
  return result;
}

  [a3 removeAllObjects];
  if (v16 < 0) {
    operator delete(__p);
  }
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 24),  (int)a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 24),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 21),  (BOOL)a2,  a4);
  }
  return result;
}

  unsigned int v12 = *((double *)a1 + 7);
  if (v10 == 0.0 || v12 == 0.0)
  {
    int v13 = v10 != 0.0;
    if (v12 != 0.0) {
      int v13 = 1;
    }
  }

  else
  {
    int v13 = vabdd_f64(1.0 / v10, 1.0 / v12) > 1.0 / v12 * 0.15;
  }

  if (a3 < 1)
  {
    uint64_t v16 = !v13;
    if (a3 == -1) {
      uint64_t v16 = 0;
    }
    if (!v16)
    {
      *((_DWORD *)a1 + 30) = 1;
      *((double *)a1 + 2) = a5 + 5.0 + 15.0;
      *((double *)a1 + 3) = a5;
    }

    *((double *)a1 + 4) = a5;
  }

  else
  {
    int v15 = v9 > 0.0 && v11 == 0 || v13;
    if ((v15 & 1) != 0)
    {
      *((_DWORD *)a1 + 30) = 1;
      *((double *)a1 + 2) = a5 + 5.0 + 15.0;
      *((double *)a1 + 3) = a5;
    }
  }

  sub_1007B7E18((uint64_t)a1, a5, v9);
  std::string v68 = -1.0;
  std::string v69 = -1.0;
  __int128 v17 = sub_1007B7EB8((uint64_t)a1);
  if (a3 >= 1 && v9 > 0.0)
  {
    uint64_t v18 = v17;
    if (v17 > 0.0)
    {
      uint64_t v19 = a5 - sub_1007B7F20(v9);
      if (v19 >= v18) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = v18;
      }
      __int128 v21 = sub_1007B7F90(a1, a5);
      if (v21 - v20 <= 15.0)
      {
        __int128 v26 = 2;
LABEL_61:
        *((_DWORD *)a1 + 30) = v26;
        std::string::size_type v37 = v26;
        goto LABEL_62;
      }

      __int128 v22 = sub_1007B8034((uint64_t)a1, *a1, v20, v21);
      std::string v69 = v22;
      if (v20 <= v21 + -20.0) {
        uint64_t v20 = v21 + -20.0;
      }
      __int128 v23 = sub_1007B8034((uint64_t)a1, *a1, v20, v21);
      std::string v67 = v20;
      std::string v68 = v23;
      __int128 v24 = *((double *)a1 + 5);
      __int128 v25 = *((double *)a1 + 1);
      else {
        *((double *)a1 + 14) = v23;
      }
      __int128 v27 = a5 - v24;
      *((_DWORD *)a1 + 30) = 3;
      uint64_t v28 = 1.0;
      int v29 = 1.0;
      if (v25 != 0.0) {
        int v29 = 1.0 - exp(-v27 / v25);
      }
      *((double *)a1 + 10) = v29;
      *((double *)a1 + 11) = v22;
      *((_DWORD *)a1 + 18) = 3;
      int v30 = fmax(v25, 15.0);
      std::string::size_type v31 = a1[14];
      if (v30 != 0.0) {
        uint64_t v28 = 1.0 - exp(-v27 / v30);
      }
      *((double *)a1 + 13) = v28;
      a1[14] = v31;
      *((_DWORD *)a1 + 24) = 3;
      sub_1005FDDDC((uint64_t)(a1 + 9), &v69);
      sub_1005FDDDC((uint64_t)(a1 + 12), &v68);
      v32 = *((double *)a1 + 11);
      __int128 v33 = *((double *)a1 + 14);
      if (v32 == 0.0 || v33 == 0.0)
      {
        if (v32 == 0.0 && v33 == 0.0) {
          goto LABEL_57;
        }
      }

      else if (vabdd_f64(1.0 / v33, 1.0 / v32) <= 1.0 / v32 * 0.15)
      {
LABEL_57:
        *((double *)a1 + 8) = v21;
        goto LABEL_58;
      }

      v34 = vabdd_f64(v32, v9);
      if (vabdd_f64(v33, v9) < v34 && vabdd_f64(v68, v9) < v34)
      {
        __int128 v35 = *((double *)a1 + 1);
        v36 = 1.0;
        if (v35 != 0.0) {
          v36 = 1.0 - exp(-v27 / v35);
        }
        *((double *)a1 + 10) = v36;
        *((double *)a1 + 11) = v33;
        *((_DWORD *)a1 + 18) = 3;
        *((_DWORD *)a1 + 30) = 4;
        *((double *)a1 + 2) = a5;
        *((double *)a1 + 3) = v67;
      }

      goto LABEL_57;
    }
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v5 = *(void *)(a1 + 112);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v9 = v8;
      }
      if (v9 >= 0x80)
      {
        uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9,  a2);
        uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
        uint64_t v8 = *(void *)(v5 + 8);
        uint64_t v3 = *(_DWORD *)(a1 + 276);
        uint64_t v7 = *(_BYTE *)(v5 + 23);
      }

      else
      {
        uint64_t v10 = 1;
      }

      if (v7 < 0) {
        uint64_t v6 = v8;
      }
      v4 += v10 + v6 + 1;
    }

    if ((v3 & 0x1000) != 0) {
      v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 168),  a2)
    }
          + 1;
  }

  __int128 v35 = *(_DWORD *)(a1 + 24);
  v36 = *(_DWORD *)(a1 + 40);
  std::string::size_type v37 = v4;
  unsigned int v11 = *(_DWORD *)(a1 + 56);
  if (v11 < 1)
  {
    int v13 = 0;
  }

  else
  {
    unsigned int v12 = 0LL;
    int v13 = 0;
    do
    {
      if ((v14 & 0x80000000) != 0)
      {
        int v15 = 10;
      }

      else if (v14 >= 0x80)
      {
        int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
        unsigned int v11 = *(_DWORD *)(a1 + 56);
      }

      else
      {
        int v15 = 1;
      }

      v13 += v15;
      ++v12;
    }

    while (v12 < v11);
  }

  __int128 v33 = *(_DWORD *)(a1 + 96);
  v34 = *(_DWORD *)(a1 + 72);
  uint64_t v16 = *(_DWORD *)(a1 + 128);
  if (v16 < 1)
  {
    uint64_t v18 = 0;
  }

  else
  {
    __int128 v17 = 0LL;
    uint64_t v18 = 0;
    do
    {
      if ((v19 & 0x80000000) != 0)
      {
        uint64_t v20 = 10;
      }

      else if (v19 >= 0x80)
      {
        uint64_t v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
        uint64_t v16 = *(_DWORD *)(a1 + 128);
      }

      else
      {
        uint64_t v20 = 1;
      }

      v18 += v20;
      ++v17;
    }

    while (v17 < v16);
  }

  __int128 v21 = *(_DWORD *)(a1 + 144);
  __int128 v22 = *(_DWORD *)(a1 + 160);
  if (v22 < 1)
  {
    __int128 v24 = 0;
  }

  else
  {
    __int128 v23 = 0LL;
    __int128 v24 = 0;
    do
    {
      if ((v25 & 0x80000000) != 0)
      {
        __int128 v26 = 10;
      }

      else if (v25 >= 0x80)
      {
        __int128 v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
        __int128 v22 = *(_DWORD *)(a1 + 160);
      }

      else
      {
        __int128 v26 = 1;
      }

      v24 += v26;
      ++v23;
    }

    while (v23 < v22);
  }

  __int128 v27 = *(_DWORD *)(a1 + 184);
  if (v27 < 1)
  {
    int v29 = 0;
  }

  else
  {
    uint64_t v28 = 0LL;
    int v29 = 0;
    do
    {
      if ((v30 & 0x80000000) != 0)
      {
        std::string::size_type v31 = 10;
      }

      else if (v30 >= 0x80)
      {
        std::string::size_type v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
        __int128 v27 = *(_DWORD *)(a1 + 184);
      }

      else
      {
        std::string::size_type v31 = 1;
      }

      v29 += v31;
      ++v28;
    }

    while (v28 < v27);
  }

  double result = (v13
                        + v37
                        + v11
                        + v18
                        + 9 * (v34 + v36)
                        + v16
                        + v24
                        + v22
                        + v29
                        + v27
                        + 5 * (v33 + v35 + v21 + *(_DWORD *)(a1 + 200))
                        + 6 * (*(_DWORD *)(a1 + 232) + *(_DWORD *)(a1 + 216))
                        + 10 * (*(_DWORD *)(a1 + 264) + *(_DWORD *)(a1 + 248)));
  *(_DWORD *)(a1 + 272) = result;
  return result;
}

  if ((a4 & 1) == 0 && !a5)
  {
    if (v14 >= 0.0) {
      __int128 v21 = 0;
    }
    else {
      __int128 v21 = -1;
    }
    if (v20 >= 0.0) {
      __int128 v22 = 0;
    }
    else {
      __int128 v22 = -1;
    }
    if (v20 > 0.0) {
      __int128 v23 = 1;
    }
    else {
      __int128 v23 = v22;
    }
    __int128 v24 = v23 == v21;
    if (v14 > 0.0) {
      __int128 v24 = v20 > 0.0;
    }
    __int128 v25 = fabs(v14);
    __int128 v26 = fabs(v20);
    if (v24 && v25 < v26)
    {
      int v15 = 0LL;
      uint64_t v16 = v20 < 0.0;
LABEL_5:
      if (v16) {
        __int128 v17 = 4294967294LL;
      }
      else {
        __int128 v17 = 2LL;
      }
      return v15 | v17;
    }

    uint64_t v28 = 180.0;
    int v29 = vabdd_f64(v9 + 180.0, v10);
    if (v29 != 180.0)
    {
      int v30 = v9 + 180.0 - v10;
      std::string v69 = COERCE__INT64(fabs(v30)) - 1;
      std::string v70 = (unint64_t)(COERCE__INT64(fabs(v30)) - 0x10000000000000LL) >> 53 > 0x3FE && v69 > 0xFFFFFFFFFFFFELL;
      if (v70 && *(void *)&v30 != 0LL) {
        goto LABEL_146;
      }
      v72 = fabs(v29 + -180.0);
      uint64_t v28 = 180.0;
      if (v29 < 180.0) {
        int v29 = 180.0;
      }
      uint64_t v73 = v29 >= 1.0 ? v29 * 2.22044605e-16 : 2.22044605e-16;
      if (v72 > v73)
      {
LABEL_146:
        uint64_t v28 = 180.0;
        if (v30 <= 180.0)
        {
          if (v30 >= -180.0) {
            goto LABEL_29;
          }
          uint64_t v28 = fmod(v30 + -180.0, 360.0) + 180.0;
        }

        else
        {
          int v30 = fmod(v30 + 180.0, 360.0) + -180.0;
          if (v30 != -180.0)
          {
            v74 = ((*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
               && (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (v74 && *(void *)&v30 != 0LL) {
              goto LABEL_29;
            }
            uint64_t v28 = 180.0;
            v76 = fabs(v30 + 180.0);
            v77 = fabs(v30);
            if (v77 < 180.0) {
              v77 = 180.0;
            }
            v78 = v77 >= 1.0 ? v77 * 2.22044605e-16 : 2.22044605e-16;
            if (v76 > v78) {
              goto LABEL_29;
            }
          }
        }
      }
    }

    int v30 = v28;
LABEL_29:
    std::string::size_type v31 = v20 > 0.0;
    if (v30 >= 0.0) {
      v32 = 0;
    }
    else {
      v32 = -1;
    }
    __int128 v33 = v23 == v32;
    if (v30 <= 0.0) {
      std::string::size_type v31 = v33;
    }
    v34 = fabs(v30);
    __int128 v35 = 2LL;
    if (v20 < 0.0) {
      __int128 v35 = 4294967294LL;
    }
    v36 = &_mh_execute_header;
    if (v34 >= v26)
    {
      __int128 v35 = 0LL;
      v36 = 0LL;
    }

    if (v31) {
      __int128 v17 = v35;
    }
    else {
      __int128 v17 = 0LL;
    }
    if (v31) {
      int v15 = (unint64_t)v36;
    }
    else {
      int v15 = 0LL;
    }
    return v15 | v17;
  }

  if (v20 >= 0.0) {
    __int128 v17 = 1LL;
  }
  else {
    __int128 v17 = 0xFFFFFFFFLL;
  }
  BOOL v46 = 180.0;
  char v47 = v9 + 180.0;
  if (a4) {
    uint64_t v48 = v10;
  }
  else {
    uint64_t v48 = v11;
  }
  uint64_t v49 = vabdd_f64(v48, v47);
  if (v49 == 180.0) {
    goto LABEL_75;
  }
  uint64_t v50 = v48 - v47;
  if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v60 = fabs(v49 + -180.0);
    BOOL v46 = 180.0;
    if (v49 < 180.0) {
      uint64_t v49 = 180.0;
    }
    v61 = v49 >= 1.0 ? v49 * 2.22044605e-16 : 2.22044605e-16;
    if (v60 <= v61) {
      goto LABEL_75;
    }
  }

  BOOL v46 = 180.0;
  if (v50 > 180.0)
  {
    uint64_t v50 = fmod(v50 + 180.0, 360.0) + -180.0;
    if (v50 != -180.0)
    {
      BOOL v62 = ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
         && (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (v62 && *(void *)&v50 != 0LL) {
        goto LABEL_76;
      }
      BOOL v46 = 180.0;
      v64 = fabs(v50 + 180.0);
      std::string v65 = fabs(v50);
      if (v65 < 180.0) {
        std::string v65 = 180.0;
      }
      std::string v66 = v65 >= 1.0 ? v65 * 2.22044605e-16 : 2.22044605e-16;
      if (v64 > v66) {
        goto LABEL_76;
      }
    }

    goto LABEL_75;
  }

  if (v50 < -180.0)
  {
    BOOL v46 = fmod(v50 + -180.0, 360.0) + 180.0;
LABEL_75:
    uint64_t v50 = v46;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1838 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(v5 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1838 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  }

  return result;
}

  objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_clearClient),  @"clearClient");
  if ((*(_BYTE *)&self->_has & 4) == 0) {
    goto LABEL_15;
  }
LABEL_11:
  notification = self->_notification;
  if (notification >= 3) {
    uint64_t v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_notification);
  }
  else {
    uint64_t v8 = (NSString *)*(&off_1018613D0 + notification);
  }
  [v4 setObject:v8 forKey:@"notification"];
LABEL_15:
  uint64_t v9 = self->_operationType - 1;
  if (v9 >= 3) {
    uint64_t v10 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_operationType);
  }
  else {
    uint64_t v10 = (NSString *)*(&off_1018613E8 + v9);
  }
  [v4 setObject:v10 forKey:@"operationType"];
  if (-[NSMutableArray count](self->_vectorClocks, "count"))
  {
    unsigned int v11 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSMutableArray count](self->_vectorClocks, "count"));
    uint64_t v28 = 0u;
    int v29 = 0u;
    int v30 = 0u;
    std::string::size_type v31 = 0u;
    vectorClocks = self->_vectorClocks;
    int v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( vectorClocks,  "countByEnumeratingWithState:objects:count:",  &v28,  v33,  16LL);
    if (v13)
    {
      char v14 = v13;
      int v15 = *(void *)v29;
      do
      {
        for (unint64_t i = 0LL; i != v14; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v15) {
            objc_enumerationMutation(vectorClocks);
          }
          -[NSMutableArray addObject:]( v11,  "addObject:",  [*(id *)(*((void *)&v28 + 1) + 8 * (void)i) dictionaryRepresentation]);
        }

        char v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( vectorClocks,  "countByEnumeratingWithState:objects:count:",  &v28,  v33,  16LL);
      }

      while (v14);
    }

    [v4 setObject:v11 forKey:@"vectorClocks"];
  }

  if (-[NSMutableArray count](self->_interestZones, "count"))
  {
    __int128 v17 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSMutableArray count](self->_interestZones, "count"));
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    interestZones = self->_interestZones;
    uint64_t v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( interestZones,  "countByEnumeratingWithState:objects:count:",  &v24,  v32,  16LL);
    if (v19)
    {
      uint64_t v20 = v19;
      __int128 v21 = *(void *)v25;
      do
      {
        for (j = 0LL; j != v20; j = (char *)j + 1)
        {
          if (*(void *)v25 != v21) {
            objc_enumerationMutation(interestZones);
          }
          -[NSMutableArray addObject:]( v17,  "addObject:",  [*(id *)(*((void *)&v24 + 1) + 8 * (void)j) dictionaryRepresentation]);
        }

        uint64_t v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( interestZones,  "countByEnumeratingWithState:objects:count:",  &v24,  v32,  16LL);
      }

      while (v20);
    }

    [v4 setObject:v17 forKey:@"interestZones"];
  }

  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
    objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_suppressShowingInSettings),  @"suppressShowingInSettings");
  }
  return v4;
}

  double result = *a1;
  int v15 = a1[1];
  *a4 = *a1;
  a4[1] = v15;
  return result;
}

  double result = *(__n128 *)a1;
  int v15 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v15;
  return result;
}

  *a2 = v8;
  return v5;
}

      uint64_t v7 = v15;
      uint64_t v8 = 1.0;
LABEL_11:
      int v5 = *v4 - (float)(v8 / v7);
    }

    *((double *)a2 + 1) = v5;
    __int128 v23 = 0LL;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    uint64_t v19 = 0u;
    uint64_t v20 = 0u;
    __int128 v17 = 0u;
    uint64_t v18 = 0u;
    memset(v16, 0, sizeof(v16));
    uint64_t v9 = a1[13];
    if (v9 <= 0.0)
    {
      uint64_t v10 = (*(uint64_t (**)(void, _OWORD *))(**(void **)a1 + 120LL))(*(void *)a1, v16);
      uint64_t v9 = -1.0;
      if (v10) {
        uint64_t v9 = *((double *)&v17 + 1);
      }
    }

    *((double *)a2 + 1) = v9;
    uint64_t v4 = (double *)__p;
  }

  if (v4)
  {
    char v14 = v4;
    operator delete(v4);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  if ((*(_DWORD *)(v5 + 20) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  if ((*(_DWORD *)(v5 + 20) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 48) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 40),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 24),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v4 + 32),  a3);
  if ((*(_DWORD *)(v4 + 52) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v4 + 40),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v4,  *(double *)(v5 + 24),  a3);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v4,  *(float *)(v5 + 32),  a3);
  }
  return result;
}

  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1AB0 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(v5 + 32);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1AB0 + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(double *)(v5 + 32),  a3);
  if ((*(_DWORD *)(v5 + 44) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 28),  a2,  a4);
  }
  return result;
}

  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1B18 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
  {
LABEL_13:
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1B18 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v8,  a2,  a4);
  }

  return result;
}

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1B30 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(v5 + 24);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1B30 + 24);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  }

  return result;
}
}
}
}
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 25),  a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 0x10) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 26),  a2,  a4);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(void *)(v5 + 24),  (unint64_t)a2,  a4);
  }
  return result;
}
}

      unsigned int v12 = v4[9];
      int v13 = *(double *)(a1 + 88);
      char v14 = *(std::__shared_weak_count **)(a1 + 48);
      int v44 = *(void *)(a1 + 40);
      BOOL v45 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          uint64_t v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }

      uint64_t v7 = sub_100236BD0(v12, a1 + 96, &v44, v13);
      __int128 v17 = v45;
      if (v45)
      {
        uint64_t v18 = (unint64_t *)&v45->__shared_owners_;
        do
          uint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }

      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_101877508);
      }
      uint64_t v20 = v4 + 2;
      __int128 v21 = (os_log_s *)qword_1019347B8;
      if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEBUG))
      {
        __int128 v22 = v4 + 2;
        *(_DWORD *)buf = 67109378;
        LODWORD(v52[0]) = v7;
        WORD2(v52[0]) = 2080;
        *(void *)((char *)v52 + 6) = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[Manager] syncFromHot returned %d for DB: %s",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347B0 != -1) {
          dispatch_once(&qword_1019347B0, &stru_101877508);
        }
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v7;
        LOWORD(v50) = 2080;
        *(void *)((char *)&v50 + 2) = v20;
        LODWORD(v43) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  2LL,  "[Manager] syncFromHot returned %d for DB: %s",  &__p,  v43);
        int v39 = (uint8_t *)v38;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMHealthColdStorageManager::sync(ShouldInterruptCheck)",  "%s\n",  v38);
        if (v39 != buf) {
          free(v39);
        }
      }

      if (((_DWORD)v7 == 112 || (_DWORD)v7 == 100) && sub_100238B18(v4[9]))
      {
        __int128 v23 = v4[9];
        uint64_t v50 = 0uLL;
        __n128 __p = 0LL;
        sub_10001B72C( &__p,  *(const void **)(v23 + 320),  *(void *)(v23 + 328),  (uint64_t)(*(void *)(v23 + 328) - *(void *)(v23 + 320)) >> 2);
        if (qword_1019347B0 != -1) {
          dispatch_once(&qword_1019347B0, &stru_101877508);
        }
        __int128 v24 = (os_log_s *)qword_1019347B8;
        if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          v52[0] = (uint64_t)(v50 - (void)__p) >> 2;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "[Manager] Number of pending samples to send to cloud: %zu",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019347B0 != -1) {
            dispatch_once(&qword_1019347B0, &stru_101877508);
          }
          char v47 = 134217984;
          uint64_t v48 = (uint64_t)(v50 - (void)__p) >> 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  2LL,  "[Manager] Number of pending samples to send to cloud: %zu",  (size_t)&v47);
          double v41 = (uint8_t *)v40;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMHealthColdStorageManager::sync(ShouldInterruptCheck)",  "%s\n",  v40);
          if (v41 != buf) {
            free(v41);
          }
        }

        __int128 v25 = __p;
        if (__p == (void *)v50)
        {
          uint64_t v6 = (unsigned __int16 *)(a1 + 146);
          if (__p) {
            goto LABEL_58;
          }
        }

        else
        {
          __int128 v26 = v5;
          __int128 v27 = +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  (uint64_t)(v50 - (void)__p) >> 2);
          int v29 = (unsigned int *)__p;
          uint64_t v28 = (unsigned int *)v50;
          while (v29 != v28)
          {
            int v30 = a1 + 96;
            -[NSMutableArray addObject:]( v27,  "addObject:",  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d-%s", *v29++, v30));
          }

          int v5 = v26;
          uint64_t v6 = (unsigned __int16 *)(a1 + 146);
          if (!*(_BYTE *)(a1 + 120)
            || (objc_msgSend( *(id *)(a1 + 80),  "addPendingRecordChanges:forZoneName:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v27),  objc_msgSend( (id)(*(uint64_t (**)(uint64_t))(*(void *)(v4[9] + 72) + 40))(v4[9] + 72),  "zoneName")) & 1) != 0)
          {
            *(void *)(v4[9] + 328) = *(void *)(v4[9] + 320);
          }

          __int128 v25 = __p;
          if (__p)
          {
LABEL_58:
            *(void *)&uint64_t v50 = v25;
            operator delete(v25);
          }
        }
      }

      else if (!sub_100238B18(v4[9]))
      {
        *(void *)(v4[9] + 328) = *(void *)(v4[9] + 320);
      }

  PBDataWriterWriteDoubleField(a3, 3LL, self->_prior);
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  *((void *)a3 + 2) = *(void *)&self->_prior;
  *((_BYTE *)a3 + 44) |= 2u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_5:
    if ((has & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  self->_prior = *((double *)a3 + 2);
  *(_BYTE *)&self->_has |= 2u;
  uint64_t v3 = *((_BYTE *)a3 + 44);
  if ((v3 & 0x10) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 36) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 24),  a3);
  }
  return result;
}

  uint64_t v16 = (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3;
  __int128 v17 = v12->n128_u64[1] - v12->n128_u64[0];
  if (v16 == v17 >> 3)
  {
    uint64_t v18 = *(double *)(v13 + 56);
    uint64_t v19 = v12[3].n128_f64[1];
    uint64_t v20 = v18 <= v19;
    if (v18 == v19) {
      uint64_t v20 = *(_DWORD *)(v13 + 72) <= (signed __int32)v12[4].n128_u32[2];
    }
    if (v20) {
      goto LABEL_36;
    }
  }

  else
  {
    if (v16 <= v17 >> 3) {
      goto LABEL_36;
    }
    uint64_t v18 = *(double *)(v13 + 56);
  }

  v34 = *(void *)v13;
  __int128 v35 = *(void *)(v13 + 8);
  std::string::size_type v37 = *(void *)(v13 + 16);
  *(void *)int v13 = 0LL;
  *(void *)(v13 + 8) = 0LL;
  *(void *)(v13 + 16) = 0LL;
  v36 = *(_DWORD *)(v13 + 24);
  __int128 v33 = *(void *)(v13 + 32);
  std::string v38 = *(__n128 *)(v13 + 40);
  *(void *)(v13 + 32) = 0LL;
  *(void *)(v13 + 40) = 0LL;
  *(void *)(v13 + 48) = 0LL;
  __int128 v21 = *(void *)(v13 + 64);
  __int128 v22 = *(_DWORD *)(v13 + 72);
  sub_100007664(v13, v12);
  *(_DWORD *)(v13 + 24) = v12[1].n128_u32[2];
  __int128 v23 = v12 + 2;
  sub_100007664(v13 + 32, v12 + 2);
  *(__n128 *)(v13 + 56) = *(__n128 *)((char *)v12 + 56);
  *(_DWORD *)(v13 + 72) = v12[4].n128_u32[2];
  __int128 v24 = v40;
  if (v12 == (__n128 *)v40)
  {
    __int128 v26 = &v12[3].n128_f64[1];
    goto LABEL_31;
  }

  __int128 v25 = (char *)v15;
  while (1)
  {
    __int128 v26 = (double *)v25;
    __int128 v27 = (__n128 *)(v25 - 136);
    uint64_t v28 = *((void *)v25 - 16) - *((void *)v25 - 17);
    if (v16 == v28 >> 3)
    {
      int v29 = *(v26 - 10);
      int v30 = v18 <= v29;
      if (v18 == v29) {
        int v30 = v22 <= *((_DWORD *)v26 - 16);
      }
      if (v30) {
        goto LABEL_31;
      }
    }

    else if (v16 <= v28 >> 3)
    {
      __int128 v23 = (__n128 *)(v26 - 3);
      unsigned int v12 = (__n128 *)(v26 - 7);
LABEL_31:
      std::string::size_type v31 = (void *)v12->n128_u64[0];
      if (v12->n128_u64[0])
      {
        v12->n128_u64[1] = (unint64_t)v31;
        operator delete(v31);
      }

      v12->n128_u64[0] = v34;
      v12->n128_u64[1] = v35;
      v12[1].n128_u64[0] = v37;
      v12[1].n128_u32[2] = v36;
      v32 = (void *)v23->n128_u64[0];
      if (v23->n128_u64[0])
      {
        v12[2].n128_u64[1] = (unint64_t)v32;
        operator delete(v32);
        v23->n128_u64[1] = 0LL;
        v23[1].n128_u64[0] = 0LL;
      }

      v23->n128_u64[0] = v33;
      *(__n128 *)((char *)v12 + 40) = v38;
      *__int128 v26 = v18;
      *((void *)v26 + 1) = v21;
      *((_DWORD *)v26 + 4) = v22;
      ++v14;
      CFTypeID v2 = v39;
      if (v14 == 8) {
        return v13 + 80 == v39;
      }
LABEL_36:
      unsigned int v12 = (__n128 *)v13;
      v15 += 80LL;
      v13 += 80LL;
      if (v13 == v2) {
        return 1LL;
      }
      goto LABEL_10;
    }

    sub_100007664((uint64_t)&v27[5], v27);
    *((_DWORD *)v26 - 8) = *((_DWORD *)v26 - 28);
    __int128 v23 = v12 - 3;
    sub_100007664((uint64_t)(v26 - 3), (__n128 *)(v26 - 13));
    __int128 v25 = (char *)(v26 - 10);
    *(_OWORD *)__int128 v26 = *((_OWORD *)v26 - 5);
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 - 16);
    v12 -= 5;
    if (v26 - 17 == (double *)v24)
    {
      unsigned int v12 = (__n128 *)v24;
      v26 -= 10;
      goto LABEL_31;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 20),  a3);
  if ((*(_DWORD *)(v5 + 32) & 8) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(float *)(v5 + 24),  a3);
  }
  return result;
}

  double result = 0LL;
  *a2 = v6;
  return result;
}

  PB::TextFormatter::format(this, "distanceTraveledOverTimeWindow", *(float *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 1) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "curveDistance", *(double *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "stepResult", *(_DWORD *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  }
  return result;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "magnitudeVar", *(float *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 1) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 5u);
  }
  return result;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "to", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 0x10) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "debugY", *(_DWORD *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "outputB", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
  return result;
}

  PB::TextFormatter::format(this, "debugY", *(_DWORD *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "outputB", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
  return result;
}

  PB::TextFormatter::format(this, "debugY", *(_DWORD *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "outputB", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
  return result;
}

  PB::TextFormatter::format(this, "pedometerArmConstrainedState", *(_DWORD *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 1) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "maxNormTimestamp", *(void *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  if ((*(_BYTE *)(v3 + 44) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xC9u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xCAu);
  }
  return result;
}

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  int v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestampTimerRef", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
  return result;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 4u);
  if ((*(_BYTE *)(v3 + 36) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "sensorTime", *(double *)(a1 + 8));
  int v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 36) & 0x10) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  }
  return result;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 4u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "speedRange", *(_DWORD *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 1) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "possibleObstructed", *(_BYTE *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 1) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 5u);
  }
  return result;
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 25), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "probabilityPedestrianMotion", *(double *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "natalies", *(double *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  }
  return result;
}

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  uint64_t v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x800) != 0)
  {
    int v15 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 124) |= 0x800u;
    *(_DWORD *)(a1 + 104) = v15;
    uint64_t v10 = *(_DWORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
  }

  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 92) = v16;
  uint64_t v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  unsigned int v11 = *(void *)(a2 + 176);
  if (v11)
  {
    unsigned int v12 = operator new(0x78uLL);
    int v13 = sub_1010E0C78((uint64_t)v12, v11);
    char v14 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = v13;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  if (a1 != a2) {
    sub_10004C5F8( v6,  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 204) & 4) != 0)
  {
    int v15 = *(_DWORD *)(a2 + 196);
    *(_BYTE *)(a1 + 204) |= 4u;
    *(_DWORD *)(a1 + 196) = v15;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  return a1;
}

  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 4u);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 4u);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }
  return result;
}

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 176),  *(char **)(a2 + 176),  *(void *)(a2 + 184),  (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3);
    sub_1000F9040( v6,  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_1000F9040( (char *)(a1 + 272),  *(char **)(a2 + 272),  *(void *)(a2 + 280),  (uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 224),  *(char **)(a2 + 224),  *(void *)(a2 + 232),  (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3);
    sub_1000F9040( v7,  *(char **)(a2 + 152),  *(void *)(a2 + 160),  (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
    sub_1000F9040( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
    sub_1000F9040( v9,  *(char **)(a2 + 248),  *(void *)(a2 + 256),  (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( v8,  *(char **)(a2 + 200),  *(void *)(a2 + 208),  (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  int v15 = *(_BYTE *)(a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    uint64_t v16 = *(_DWORD *)(a2 + 332);
    *(_BYTE *)(a1 + 340) |= 0x20u;
    *(_DWORD *)(a1 + 332) = v16;
    int v15 = *(_BYTE *)(a2 + 340);
  }

  if ((v15 & 0x10) != 0)
  {
    __int128 v17 = *(_DWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 340) |= 0x10u;
    *(_DWORD *)(a1 + 328) = v17;
  }

  return a1;
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 12), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  uint64_t v10 = *(_WORD *)(a2 + 76);
  if ((v10 & 0x40) != 0)
  {
    int v15 = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 76) |= 0x40u;
    *(_DWORD *)(a1 + 64) = v15;
    uint64_t v10 = *(_WORD *)(a2 + 76);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0) {
        goto LABEL_15;
      }
LABEL_23:
      __int128 v17 = *(_DWORD *)(a2 + 72);
      *(_WORD *)(a1 + 76) |= 0x100u;
      *(_DWORD *)(a1 + 72) = v17;
      if ((*(_WORD *)(a2 + 76) & 0x20) == 0) {
        return a1;
      }
      goto LABEL_16;
    }
  }

  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 68);
  *(_WORD *)(a1 + 76) |= 0x80u;
  *(_DWORD *)(a1 + 68) = v16;
  uint64_t v10 = *(_WORD *)(a2 + 76);
  if ((v10 & 0x100) != 0) {
    goto LABEL_23;
  }
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    unsigned int v11 = *(_DWORD *)(a2 + 60);
    *(_WORD *)(a1 + 76) |= 0x20u;
    *(_DWORD *)(a1 + 60) = v11;
  }

  return a1;
}

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  if ((*(_BYTE *)(a2 + 100) & 0x20) != 0)
  {
    uint64_t v10 = *(_DWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 100) |= 0x20u;
    *(_DWORD *)(a1 + 96) = v10;
  }

  return a1;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "swimLocation", *(_DWORD *)(a1 + 20));
  int v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 5u);
  }
  return result;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "metsHR", *(float *)(a1 + 16));
  int v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 12), 5u);
  }
  return result;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

  PB::TextFormatter::format(this, "gnssModeOfOperation", *(_DWORD *)(a1 + 12));
  int v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 0x10) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "rhythmicMode", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 24) & 0x10) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 21), 5u);
  }
  return result;
}

  PB::TextFormatter::format(this, "primaryAxisZ", *(double *)(a1 + 24));
  int v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 48) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 5u);
  }
  return result;
}

  double result = std::string::append(this, " kCFRunLoopBeforeSources");
  if ((a1 & 0x20) == 0)
  {
LABEL_5:
    if ((a1 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }

void *sub_100022884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  double result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    double result = sub_1010DD48C(result, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)double result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }

  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100022904(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_100022988(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_100022920(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_100022988(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1000229D4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000229D4(a1, *(void *)a2);
    sub_1000229D4(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

uint64_t sub_100022A24(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    int v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

uint64_t sub_100022AC8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  uint64_t result = sub_100022B74(a2, 0x2E8BA2E8BA2E8BA3LL * ((a1[1] - *a1) >> 3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  int v7 = a2;
  while (v5 != v6)
  {
    uint64_t result = sub_100022C30(v5);
    if ((_DWORD)result) {
      uint64_t result = (uint64_t)sub_1000237B0(&v7, v5);
    }
    v5 += 88LL;
  }

  return result;
}

void sub_100022B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100022B74(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3LL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_100007008();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100023598(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    sub_100023524(a1, v7);
    return sub_100023728((uint64_t)v7);
  }

  return result;
}

void sub_100022C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100022C30(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 68);
  if ((v2 & 0x9000) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819148);
    }
    int v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_1007EC360(&__p);
      uint64_t v4 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      int v5 = *(_DWORD *)(a1 + 32);
      int v6 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)buf = 68290307;
      int v12 = 0;
      __int16 v13 = 2082;
      BOOL v14 = "";
      __int16 v15 = 1026;
      int v16 = (v2 >> 12) & 1;
      __int16 v17 = 1026;
      int v18 = (v2 >> 15) & 1;
      __int16 v19 = 2081;
      uint64_t v20 = v4;
      __int16 v21 = 1026;
      int v22 = v5;
      __int16 v23 = 1026;
      int v24 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:received low confidence rssi AP, is invalid?:%{public}hhd, is off channel?:%{pu blic}hhd, mac address:%{private, location:escape_only}s, RSSI:%{public}d, channel:%{public}d}",  buf,  0x34u);
    }
  }

  BOOL v7 = sub_10099EDC8(*(_DWORD *)(a1 + 40));
  BOOL v8 = *(int *)(a1 + 32) < 0 && v7;
  return !*(_BYTE *)(a1 + 64) && v8;
}

uint64_t sub_100022DCC(double *a1, uint64_t a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v4 = 0LL;
  switch(*(_DWORD *)(a2 + 64))
  {
    case 1:
      uint64_t v5 = *(void *)(a2 + 16);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_1019A0818 + 16);
      }
      goto LABEL_8;
    case 3:
      uint64_t v5 = *(void *)(a2 + 32);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_1019A0818 + 32);
      }
      goto LABEL_8;
    case 4:
      uint64_t v5 = *(void *)(a2 + 40);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_1019A0818 + 40);
      }
LABEL_8:
      uint64_t v4 = *a3 >= *a1 - *(double *)(v5 + 8) && (int)*(float *)(v5 + 20) < 0;
      break;
    case 5:
      uint64_t v8 = *(void *)(a2 + 48);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A0818 + 48);
      }
      double v9 = *a1;
      double v10 = *a3;
      float v11 = *(float *)(v8 + 20);
      int v12 = *(__int128 **)(v8 + 40);
      if (*((char *)v12 + 23) < 0)
      {
        sub_1010DD48C(buf, *(void **)v12, *((void *)v12 + 1));
      }

      else
      {
        __int128 v13 = *v12;
        *(void *)&buf[16] = *((void *)v12 + 2);
        *(_OWORD *)buf = v13;
      }

      BOOL v17 = sub_1000232EC((uint64_t)buf, a4);
      double v18 = *(double *)(v8 + 8);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      BOOL v19 = v11 >= -100.0;
      if (v11 > -10.0) {
        BOOL v19 = 0;
      }
      unsigned int v20 = v17 && v19;
      if (v10 >= v9 - v18) {
        uint64_t v4 = v20;
      }
      else {
        uint64_t v4 = 0LL;
      }
      break;
    case 6:
      uint64_t v14 = *(void *)(a2 + 56);
      if (!v14) {
        uint64_t v14 = *(void *)(qword_1019A0818 + 56);
      }
      sub_100065C88((uint64_t)v23, v14);
      BOOL v15 = v24 > 0.0 && v25 == 2;
      uint64_t v4 = v15;
      if (!v15)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819148);
        }
        int v16 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&uint8_t buf[4] = v24;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Bad uwb range, range %{public}.2f, type %{public}d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101819148);
          }
          int v26 = 134349312;
          double v27 = v24;
          __int16 v28 = 1026;
          int v29 = v25;
          int v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Bad uwb range, range %{public}.2f, type %{public}d",  &v26,  18);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL (anonymous namespace)::isGoodUwbRange(CLMicroLocationProto::UwbRange)",  "%s\n",  v22);
          if (v22 != buf) {
            free(v22);
          }
        }
      }

      sub_100065D04((wireless_diagnostics::google::protobuf::MessageLite *)v23);
      break;
    default:
      return v4;
  }

  return v4;
}

void sub_100023140( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

uint64_t sub_10002318C(double *a1, uint64_t *a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_13;
  }
  uint64_t v10 = a2[1];
  while (sub_100022DCC(a1, v5, a3, a4))
  {
    v5 += 80LL;
    if (v5 == v6) {
      return sub_100023264((uint64_t)a2, v10, a2[1]);
    }
  }

  if (v5 != v6)
  {
    uint64_t v11 = v5 + 80;
    if (v5 + 80 != v6)
    {
      uint64_t v10 = v5;
      do
      {
        if (sub_100022DCC(a1, v11, a3, a4))
        {
          sub_100069010(v10, v11);
          v10 += 80LL;
        }

        v11 += 80LL;
      }

      while (v11 != v6);
      return sub_100023264((uint64_t)a2, v10, a2[1]);
    }

LABEL_13:
    uint64_t v10 = v5;
  }

  return sub_100023264((uint64_t)a2, v10, a2[1]);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  BOOL v7 = *(void *)(v5 + 24);
  if (!v7) {
    BOOL v7 = *(void *)(qword_1019A07F8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 29),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(7LL, *(void *)(v5 + 32), a2);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  a2,  a4);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 4LL,  *(void *)(v5 + 24),  a2);
LABEL_6:
  if (*(int *)(v5 + 40) >= 1)
  {
    BOOL v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(void *)(*(void *)(v5 + 32) + 8 * v7++),  a2,  a4);
    while (v7 < *(int *)(v5 + 40));
  }

  if ((*(_BYTE *)(v5 + 68) & 0x20) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 56);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A08E0 + 56);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v8,  a2,  a4);
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 15),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 17),  a2,  a4);
  }

  sub_100114348(v6, v7, a2);
  sub_1001140E4(a1, v6, *(void *)(a1 + 8));
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181F8F8);
  }
  uint64_t v10 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7LL * ((a2[1] - *a2) >> 3);
    int v12 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    *(_DWORD *)buf = 134349312;
    __int16 v21 = v11;
    int v22 = 2050;
    __int16 v23 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Pruned %{public}ld AP measurements, buffer size %{public}ld",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181F8F8);
    }
    __int128 v13 = 0x6DB6DB6DB6DB6DB7LL * ((a2[1] - *a2) >> 3);
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    int v16 = 134349312;
    BOOL v17 = v13;
    double v18 = 2050;
    BOOL v19 = v14;
    BOOL v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Pruned %{public}ld AP measurements, buffer size %{public}ld",  &v16,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMiLoProtobufWrapper::WiFiRssi> CLMicroLocationScanBuffer::pruneAps(cl::chrono::CFAbsoluteTimeClock:: time_point, cl::chrono::CFAbsoluteTimeClock::duration)",  "%s\n",  v15);
  }

    uint64_t result = sub_100160558(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  (*(void (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  return 100LL;
}

  (*(void (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
  return 100LL;
}

  if ((v6 & 0xFF00) == 0) {
    goto LABEL_23;
  }
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = *(double *)(a2 + 56);
    *(_DWORD *)(a1 + 160) |= 0x100u;
    *(double *)(a1 + 56) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 160);
    if ((v6 & 0x200) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_44;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  uint64_t result = *(double *)(a2 + 64);
  *(_DWORD *)(a1 + 160) |= 0x200u;
  *(double *)(a1 + 64) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  if ((v6 & 0xFF00) == 0) {
    return result;
  }
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = *(double *)(a2 + 56);
    *(_DWORD *)(a1 + 96) |= 0x100u;
    *(double *)(a1 + 56) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 96);
    if ((v6 & 0x200) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_34;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  uint64_t result = *(double *)(a2 + 64);
  *(_DWORD *)(a1 + 96) |= 0x200u;
  *(double *)(a1 + 64) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x800) == 0) {
      return result;
    }
    goto LABEL_18;
  }

  double v9 = *(void *)(v5 + 24);
  if (!v9) {
    double v9 = *(void *)(qword_1019A0AB8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  (int)a2,  *(double *)(v5 + 40),  a3);
  }

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(double *)(a2 + 72);
      *(_DWORD *)(a1 + 92) |= 0x100u;
      *(double *)(a1 + 72) = result;
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      uint64_t result = *(double *)(a2 + 80);
      *(_DWORD *)(a1 + 92) |= 0x200u;
      *(double *)(a1 + 80) = result;
    }
  }

  return result;
}

  if ((v6 & 0xFF00) == 0) {
    return result;
  }
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = *(double *)(a2 + 72);
    *(_DWORD *)(a1 + 132) |= 0x100u;
    *(double *)(a1 + 72) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 132);
    if ((v6 & 0x200) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_37;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  uint64_t result = *(double *)(a2 + 80);
  *(_DWORD *)(a1 + 132) |= 0x200u;
  *(double *)(a1 + 80) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(double *)(a2 + 72);
      *(_DWORD *)(a1 + 92) |= 0x100u;
      *(double *)(a1 + 72) = result;
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      uint64_t result = *(double *)(a2 + 80);
      *(_DWORD *)(a1 + 92) |= 0x200u;
      *(double *)(a1 + 80) = result;
    }
  }

  return result;
}

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(double *)(a2 + 72);
      *(_DWORD *)(a1 + 92) |= 0x100u;
      *(double *)(a1 + 72) = result;
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      uint64_t result = *(double *)(a2 + 80);
      *(_DWORD *)(a1 + 92) |= 0x200u;
      *(double *)(a1 + 80) = result;
    }
  }

  return result;
}

  if ((v6 & 0xFF00) == 0) {
    return result;
  }
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = *(double *)(a2 + 72);
    *(_DWORD *)(a1 + 132) |= 0x100u;
    *(double *)(a1 + 72) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 132);
    if ((v6 & 0x200) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_37;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  uint64_t result = *(double *)(a2 + 80);
  *(_DWORD *)(a1 + 132) |= 0x200u;
  *(double *)(a1 + 80) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 132);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(double *)(a2 + 72);
      *(_DWORD *)(a1 + 92) |= 0x100u;
      *(double *)(a1 + 72) = result;
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      uint64_t result = *(double *)(a2 + 80);
      *(_DWORD *)(a1 + 92) |= 0x200u;
      *(double *)(a1 + 80) = result;
    }
  }

  return result;
}

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(double *)(a2 + 72);
      *(_DWORD *)(a1 + 92) |= 0x100u;
      *(double *)(a1 + 72) = result;
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      uint64_t result = *(double *)(a2 + 80);
      *(_DWORD *)(a1 + 92) |= 0x200u;
      *(double *)(a1 + 80) = result;
    }
  }

  return result;
}

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      uint64_t result = *(double *)(a2 + 72);
      *(_DWORD *)(a1 + 92) |= 0x100u;
      *(double *)(a1 + 72) = result;
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      uint64_t result = *(double *)(a2 + 80);
      *(_DWORD *)(a1 + 92) |= 0x200u;
      *(double *)(a1 + 80) = result;
    }
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 48),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  a2,  *(float *)(v5 + 20),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_17;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    int v16 = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 96) |= 0x100u;
    *(void *)(a1 + 72) = v16;
    uint64_t v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_36;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  BOOL v17 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 96) |= 0x200u;
  *(void *)(a1 + 80) = v17;
  uint64_t v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  if ((v6 & 0xFF00) == 0) {
    return result;
  }
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 124) |= 0x100u;
    *(double *)(a1 + 64) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 124);
    if ((v6 & 0x200) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_38;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  uint64_t result = *(double *)(a2 + 80);
  *(_DWORD *)(a1 + 124) |= 0x200u;
  *(double *)(a1 + 80) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(double *)(a1 + 24) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    double v18 = *(_BYTE *)(a2 + 43);
    *(_DWORD *)(a1 + 60) |= 0x100u;
    *(_BYTE *)(a1 + 43) = v18;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_44;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  BOOL v19 = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 60) |= 0x200u;
  *(_BYTE *)(a1 + 48) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 11),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_57;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v17 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 148) |= 0x100u;
    *(void *)(a1 + 56) = v17;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_45;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  double v18 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 148) |= 0x200u;
  *(void *)(a1 + 64) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(float *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 32),  (BOOL)a2,  a4);
  }

  if ((v6 & 0x100) != 0)
  {
    LODWORD(v5) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x100u;
    *(_DWORD *)(a1 + 48) = LODWORD(v5);
  }

  return *(float *)&v5;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  (int)a2,  *(double *)(v5 + 32),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      BOOL v7 = *(_DWORD *)(a2 + 44);
      if (v7 >= 4) {
        sub_1012301D4();
      }
      *(_DWORD *)(a1 + 56) |= 0x100u;
      *(_DWORD *)(a1 + 44) = v7;
      uint64_t v5 = *(_DWORD *)(a2 + 56);
    }

    if ((v5 & 0x200) != 0)
    {
      uint64_t v8 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) |= 0x200u;
      *(_DWORD *)(a1 + 48) = v8;
    }
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    double v18 = *(_BYTE *)(a2 + 46);
    *(_DWORD *)(a1 + 56) |= 0x100u;
    *(_BYTE *)(a1 + 46) = v18;
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        return;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  BOOL v19 = *(_BYTE *)(a2 + 47);
  *(_DWORD *)(a1 + 56) |= 0x200u;
  *(_BYTE *)(a1 + 47) = v19;
  if ((*(_DWORD *)(a2 + 56) & 0x400) != 0)
  {
LABEL_17:
    BOOL v7 = *(_BYTE *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x400u;
    *(_BYTE *)(a1 + 48) = v7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 28),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_24;
  }
  if ((v5 & 0x100) != 0)
  {
    double v18 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 84) |= 0x100u;
    *(_DWORD *)(a1 + 48) = v18;
    uint64_t v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_41;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  BOOL v19 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 84) |= 0x200u;
  *(_DWORD *)(a1 + 52) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  if (v8 == *(void *)(v4 + 8 * v10) + 24 * v12) {
    return 0LL;
  }
  if (v8 == *v7) {
    uint64_t v8 = *(v7 - 1) + 4080;
  }
  BOOL v17 = *(_OWORD *)(v8 - 24);
  *(void *)(a2 + 16) = *(void *)(v8 - 8);
  *(_OWORD *)a2 = v17;
  return 1LL;
}

  uint64_t v8 = *(void *)(a1 + 8);
  sub_1010DDBC0(__p, "com.apple.locationd.pedestrianfencemanager");
  double v9 = CLConnection::isEntitled(v8, __p);
  uint64_t v10 = v9;
  if (v62 < 0)
  {
    operator delete(*(void **)__p);
    if ((v10 & 1) != 0) {
      goto LABEL_29;
    }
  }

  else if ((v9 & 1) != 0)
  {
LABEL_29:
    int v16 = (void *)CLConnectionMessage::name(*a2);
    BOOL v17 = *((char *)v16 + 23);
    if (v17 < 0)
    {
      if (v16[1] != 51LL) {
        goto LABEL_35;
      }
      int v16 = (void *)*v16;
    }

    else if (v17 != 51)
    {
      goto LABEL_35;
    }

    if (!memcmp(v16, "PedestrianFence/kCLConnectionMessagePedestrianFence", 0x33uLL))
    {
      double v27 = *a2;
      __int16 v28 = a2[1];
      v58[0] = v27;
      v58[1] = v28;
      if (v28)
      {
        int v29 = (unint64_t *)((char *)v28 + 8);
        do
          int v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }

      sub_100214798(a1, v58);
      if (!v28) {
        return;
      }
      std::string::size_type v31 = (unint64_t *)((char *)v28 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_111;
    }

  rawGradeType = self->_rawGradeType;
  if (rawGradeType >= 4) {
    double v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_rawGradeType);
  }
  else {
    double v9 = off_10182B670[rawGradeType];
  }
  [v3 setObject:v9 forKey:@"rawGradeType"];
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
LABEL_17:
    source = self->_source;
    if (source)
    {
      if (source == 1) {
        uint64_t v11 = @"Watch";
      }
      else {
        uint64_t v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_source);
      }
    }

    else
    {
      uint64_t v11 = @"Phone";
    }

    [v3 setObject:v11 forKey:@"source"];
  }

  return v3;
}

  BOOL v7 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    double v9 = 68289282;
    uint64_t v10 = 0;
    uint64_t v11 = 2082;
    int v12 = "";
    __int128 v13 = 1026;
    uint64_t v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Setting motion alarm state, enabled:%{public}d}",  (uint8_t *)&v9,  0x18u);
  }

  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16LL))(*(void *)(a1 + 32), a2);
}

  PBDataWriterWriteBOOLField(a3, self->_isMoving, 7LL);
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_7:
    if ((has & 1) == 0) {
      return;
    }
LABEL_15:
    PBDataWriterWriteUint64Field(a3, self->_startTime, 9LL);
    return;
  }

  *((_BYTE *)a3 + 40) = self->_isMoving;
  *((_BYTE *)a3 + 44) |= 0x20u;
  has = (char)self->_has;
  if ((has & 2) == 0)
  {
LABEL_7:
    if ((has & 1) == 0) {
      return;
    }
LABEL_15:
    *((void *)a3 + 1) = self->_startTime;
    *((_BYTE *)a3 + 44) |= 1u;
    return;
  }

  *((_BYTE *)result + 41) = self->_isVehicular;
  *((_BYTE *)result + 44) |= 0x40u;
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  self->_isMoving = *((_BYTE *)a3 + 40);
  *(_BYTE *)&self->_has |= 0x20u;
  int v3 = *((_BYTE *)a3 + 44);
  if ((v3 & 2) == 0)
  {
LABEL_7:
    if ((v3 & 1) == 0) {
      return;
    }
LABEL_15:
    self->_startTime = *((void *)a3 + 1);
    *(_BYTE *)&self->_has |= 1u;
    return;
  }

      if (v7 != *(void *)(v3 + 8 * v9) + 40 * v11)
      {
        uint64_t result = (uint64_t *)sub_10025AB40(result, *((double *)result + 32), v1 + 3600.0);
        if (v7 == *v6)
        {
          BOOL v17 = *(v6 - 1);
          double v18 = *(double *)(v17 + 4040) == v1 && (_DWORD)result == 0;
          if (v18 && !*(_BYTE *)(v17 + 4072))
          {
            *(_BYTE *)(v17 + 4072) = 1;
            BOOL v7 = v17 + 4080;
            goto LABEL_29;
          }
        }

        else
        {
          int v16 = *(double *)(v7 - 40) == v1 && (_DWORD)result == 0;
          if (v16 && !*(_BYTE *)(v7 - 8))
          {
            *(_BYTE *)(v7 - 8) = 1;
LABEL_29:
            BOOL v19 = *(_OWORD *)(v7 - 24);
            v20[0] = *(_OWORD *)(v7 - 40);
            v20[1] = v19;
            return sub_10025AC4C(v2, (uint64_t *)v20);
          }
        }
      }
    }
  }

  return result;
}

    LOBYTE(fFetchChangesForInputZone) = 0;
    return fFetchChangesForInputZone;
  }

  if (objc_msgSend(objc_msgSend(a4, "zoneName"), "isEqualToString:", @"VO2MaxOutputZone"))
  {
    fFetchChangesForInputZone = 1;
  }

  else if (objc_msgSend(objc_msgSend(a4, "zoneName"), "isEqualToString:", @"VO2MaxInputZone"))
  {
    fFetchChangesForInputZone = self->fFetchChangesForInputZone;
  }

  else
  {
    fFetchChangesForInputZone = 0;
  }

  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10182DF18);
  }
  int v12 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v13 = [a4 zoneName];
    *(_DWORD *)buf = 67240450;
    LODWORD(v25[0]) = fFetchChangesForInputZone;
    WORD2(v25[0]) = 2114;
    *(void *)((char *)v25 + 6) = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Answering sync engine shouldFetchChangesForZone = %{public}d for zone: %{public}@",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10182DF18);
    }
    uint64_t v14 = qword_1019346E8;
    BOOL v15 = [a4 zoneName];
    int v22 = 67240450;
    LODWORD(v23[0]) = fFetchChangesForInputZone;
    WORD2(v23[0]) = 2114;
    *(void *)((char *)v23 + 6) = v15;
    LODWORD(v21) = 18;
    int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v14,  0LL,  "Answering sync engine shouldFetchChangesForZone = %{public}d for zone: %{public}@",  &v22,  v21);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLVO2MaxCloudKitManager syncEngine:shouldFetchChangesForZoneID:]",  "%s\n",  v16);
  }

  return fFetchChangesForInputZone;
}

  *((_DWORD *)v5 + 15) = self->_tileY;
  *((_BYTE *)v5 + 68) |= 0x20u;
  has = (char)self->_has;
  if ((has & 4) == 0)
  {
LABEL_5:
    if ((has & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  self->_tileY = *((_DWORD *)a3 + 15);
  *(_BYTE *)&self->_has |= 0x20u;
  uint64_t v5 = *((_BYTE *)a3 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  __int16 v28 = sub_1006E27E8();
  sub_100413284(v28, &v99);
  int v29 = sub_1002A81F8(v99, "NatalimetryUserInfoWeightKG", (float *)&v97);
  int v30 = v29;
  std::string::size_type v31 = v100;
  if (v100)
  {
    v32 = (unint64_t *)&v100->__shared_owners_;
    do
      __int128 v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (!v30) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }

  if (v29)
  {
LABEL_18:
    v34 = v97;
    *(_BYTE *)(a1 + 1410) = 1;
    *(_DWORD *)(a1 + 1364) = v34;
  }

  if ((v3 & 4) != 0)
  {
    double v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v9 >= 0x80)
    {
      uint64_t v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      uint64_t v10 = 2;
    }

    uint64_t v4 = (v10 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_15:
      if ((v3 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_15;
  }

  uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }

  else
  {
    int v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_16:
    if ((v3 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }

          double v18 = (double *)sub_1003F72B0(v9, a2);
          if ((v19 & 1) == 0) {
            goto LABEL_16;
          }
          unsigned int v20 = sub_1003F73F4((uint64_t)v9, v18);
          double v9 = v18 + 2;
          if (!sub_1003F73F4((uint64_t)(v18 + 2), a2))
          {
            uint64_t v10 = v11 + 1;
            if (v20) {
              continue;
            }
LABEL_16:
            sub_1003F6B30(a1, v18, a3, -v11, a5 & 1);
            double v9 = v18 + 2;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }

          a4 = -v11;
          a2 = v18;
          if (v20) {
            return;
          }
          goto LABEL_1;
        }

        if (v9 != a2) {
          sub_1003F7848((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        }
        return;
    }
  }

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      BOOL v7 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 96) |= 0x100u;
      *(_DWORD *)(a1 + 72) = v7;
      uint64_t v5 = *(_DWORD *)(a2 + 96);
    }

    if ((v5 & 0x200) != 0)
    {
      uint64_t v8 = *(_DWORD *)(a2 + 76);
      if (!sub_100501194(v8)) {
        sub_10123C2E8();
      }
      *(_DWORD *)(a1 + 96) |= 0x200u;
      *(_DWORD *)(a1 + 76) = v8;
      uint64_t v5 = *(_DWORD *)(a2 + 96);
    }

    if ((v5 & 0x400) != 0)
    {
      double v9 = *(void *)(a2 + 80);
      *(_DWORD *)(a1 + 96) |= 0x400u;
      *(void *)(a1 + 80) = v9;
      uint64_t v5 = *(_DWORD *)(a2 + 96);
    }

    if ((v5 & 0x800) != 0)
    {
      uint64_t v10 = *(_DWORD *)(a2 + 88);
      if (v10 >= 6) {
        sub_10123C2C0();
      }
      *(_DWORD *)(a1 + 96) |= 0x800u;
      *(_DWORD *)(a1 + 88) = v10;
    }
  }

  if ((v5 & 0x100) != 0)
  {
    BOOL v7 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(void *)(a1 + 56) = v7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  double v9 = *(void *)(v5 + 24);
  if (!v9) {
    double v9 = *(void *)(qword_1019A1100 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  (int)a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 40),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(v5 + 32),  (unint64_t)a2,  a4);
  }

    double v9 = *(_DWORD *)(a2 + 16);
    a1[8] |= 4u;
    a1[4] = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

    double v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(void *)(a1 + 32) = v9;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0) {
      return;
    }
    goto LABEL_14;
  }

  v77 = 0LL;
LABEL_14:
  if ((*(_WORD *)&has & 0x1000) != 0) {
    v76 = 2654435761LL * self->_nInterpolatedCatherine;
  }
  else {
    v76 = 0LL;
  }
  if ((*(_WORD *)&has & 0x4000) != 0) {
    uint64_t v75 = 2654435761LL * self->_nSampleAndHoldCatherine;
  }
  else {
    uint64_t v75 = 0LL;
  }
  activityType = self->_activityType;
  if ((*(_BYTE *)&has & 0x80) != 0)
  {
    minGoodCatherine = self->_minGoodCatherine;
    uint64_t v6 = -minGoodCatherine;
    if (minGoodCatherine >= 0.0) {
      uint64_t v6 = self->_minGoodCatherine;
    }
    BOOL v7 = floorf(v6 + 0.5);
    uint64_t v8 = (float)(v6 - v7) * 1.8447e19;
    uint64_t v4 = 2654435761u * (unint64_t)fmodf(v7, 1.8447e19);
    if (v8 >= 0.0)
    {
      if (v8 > 0.0) {
        v4 += (unint64_t)v8;
      }
    }

    else
    {
      v4 -= (unint64_t)fabsf(v8);
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  if ((*(_BYTE *)&has & 0x10) != 0)
  {
    maxGoodCatherine = self->_maxGoodCatherine;
    uint64_t v11 = -maxGoodCatherine;
    if (maxGoodCatherine >= 0.0) {
      uint64_t v11 = self->_maxGoodCatherine;
    }
    int v12 = floorf(v11 + 0.5);
    __int128 v13 = (float)(v11 - v12) * 1.8447e19;
    double v9 = 2654435761u * (unint64_t)fmodf(v12, 1.8447e19);
    if (v13 >= 0.0)
    {
      if (v13 > 0.0) {
        v9 += (unint64_t)v13;
      }
    }

    else
    {
      v9 -= (unint64_t)fabsf(v13);
    }
  }

  else
  {
    double v9 = 0LL;
  }

  if ((*(_BYTE *)&has & 0x20) != 0)
  {
    meanCatherine = self->_meanCatherine;
    int v16 = -meanCatherine;
    if (meanCatherine >= 0.0) {
      int v16 = self->_meanCatherine;
    }
    BOOL v17 = floorf(v16 + 0.5);
    double v18 = (float)(v16 - v17) * 1.8447e19;
    uint64_t v14 = 2654435761u * (unint64_t)fmodf(v17, 1.8447e19);
    if (v18 >= 0.0)
    {
      if (v18 > 0.0) {
        v14 += (unint64_t)v18;
      }
    }

    else
    {
      v14 -= (unint64_t)fabsf(v18);
    }
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  if ((*(_BYTE *)&has & 0x40) != 0)
  {
    meanGoodCatherine = self->_meanGoodCatherine;
    __int16 v21 = -meanGoodCatherine;
    if (meanGoodCatherine >= 0.0) {
      __int16 v21 = self->_meanGoodCatherine;
    }
    int v22 = floorf(v21 + 0.5);
    __int16 v23 = (float)(v21 - v22) * 1.8447e19;
    BOOL v19 = 2654435761u * (unint64_t)fmodf(v22, 1.8447e19);
    if (v23 >= 0.0)
    {
      if (v23 > 0.0) {
        v19 += (unint64_t)v23;
      }
    }

    else
    {
      v19 -= (unint64_t)fabsf(v23);
    }
  }

  else
  {
    BOOL v19 = 0LL;
  }

  if ((*(_BYTE *)&has & 2) != 0)
  {
    firstCatherine = self->_firstCatherine;
    int v26 = -firstCatherine;
    if (firstCatherine >= 0.0) {
      int v26 = self->_firstCatherine;
    }
    double v27 = floorf(v26 + 0.5);
    __int16 v28 = (float)(v26 - v27) * 1.8447e19;
    float v24 = 2654435761u * (unint64_t)fmodf(v27, 1.8447e19);
    if (v28 >= 0.0)
    {
      if (v28 > 0.0) {
        v24 += (unint64_t)v28;
      }
    }

    else
    {
      v24 -= (unint64_t)fabsf(v28);
    }
  }

  else
  {
    float v24 = 0LL;
  }

  if ((*(_BYTE *)&has & 4) != 0)
  {
    firstCatherineStartTime = self->_firstCatherineStartTime;
    std::string::size_type v31 = -firstCatherineStartTime;
    if (firstCatherineStartTime >= 0.0) {
      std::string::size_type v31 = self->_firstCatherineStartTime;
    }
    v32 = floorf(v31 + 0.5);
    __int128 v33 = (float)(v31 - v32) * 1.8447e19;
    int v29 = 2654435761u * (unint64_t)fmodf(v32, 1.8447e19);
    if (v33 >= 0.0)
    {
      if (v33 > 0.0) {
        v29 += (unint64_t)v33;
      }
    }

    else
    {
      v29 -= (unint64_t)fabsf(v33);
    }
  }

  else
  {
    int v29 = 0LL;
  }

  uint64_t v73 = v9;
  if ((*(_BYTE *)&has & 8) != 0)
  {
    longestDropout = self->_longestDropout;
    v36 = -longestDropout;
    if (longestDropout >= 0.0) {
      v36 = self->_longestDropout;
    }
    std::string::size_type v37 = floorf(v36 + 0.5);
    std::string v38 = (float)(v36 - v37) * 1.8447e19;
    v34 = 2654435761u * (unint64_t)fmodf(v37, 1.8447e19);
    if (v38 >= 0.0)
    {
      if (v38 > 0.0) {
        v34 += (unint64_t)v38;
      }
    }

    else
    {
      v34 -= (unint64_t)fabsf(v38);
    }
  }

  else
  {
    v34 = 0LL;
  }

  if ((*(_DWORD *)&has & 0x100000) != 0)
  {
    totalDropoutTime = self->_totalDropoutTime;
    double v41 = -totalDropoutTime;
    if (totalDropoutTime >= 0.0) {
      double v41 = self->_totalDropoutTime;
    }
    v42 = floorf(v41 + 0.5);
    uint64_t v43 = (float)(v41 - v42) * 1.8447e19;
    int v39 = 2654435761u * (unint64_t)fmodf(v42, 1.8447e19);
    if (v43 >= 0.0)
    {
      if (v43 > 0.0) {
        v39 += (unint64_t)v43;
      }
    }

    else
    {
      v39 -= (unint64_t)fabsf(v43);
    }
  }

  else
  {
    int v39 = 0LL;
  }

  if ((*(_WORD *)&has & 0x200) != 0) {
    std::string v69 = 2654435761LL * self->_nDropout;
  }
  else {
    std::string v69 = 0LL;
  }
  std::string v71 = v34;
  v72 = v24;
  if ((*(_BYTE *)&has & 1) != 0)
  {
    startTime = self->_startTime;
    BOOL v46 = -startTime;
    if (startTime >= 0.0) {
      BOOL v46 = self->_startTime;
    }
    char v47 = floor(v46 + 0.5);
    uint64_t v48 = (v46 - v47) * 1.84467441e19;
    int v44 = 2654435761u * (unint64_t)fmod(v47, 1.84467441e19);
    if (v48 >= 0.0)
    {
      if (v48 > 0.0) {
        v44 += (unint64_t)v48;
      }
    }

    else
    {
      v44 -= (unint64_t)fabs(v48);
    }
  }

  else
  {
    int v44 = 0LL;
  }

  std::string v70 = v29;
  if ((*(_DWORD *)&has & 0x40000) != 0) {
    uint64_t v49 = 2654435761LL * self->_onsetReason;
  }
  else {
    uint64_t v49 = 0LL;
  }
  uint64_t v50 = v39;
  if ((*(_DWORD *)&has & 0x20000) != 0)
  {
    onsetCatherine = self->_onsetCatherine;
    uint64_t v54 = -onsetCatherine;
    if (onsetCatherine >= 0.0) {
      uint64_t v54 = self->_onsetCatherine;
    }
    v55 = floorf(v54 + 0.5);
    std::string::size_type v56 = (float)(v54 - v55) * 1.8447e19;
    uint64_t v52 = 2654435761u * (unint64_t)fmodf(v55, 1.8447e19);
    uint64_t v51 = v19;
    if (v56 >= 0.0)
    {
      if (v56 > 0.0) {
        v52 += (unint64_t)v56;
      }
    }

    else
    {
      v52 -= (unint64_t)fabsf(v56);
    }
  }

  else
  {
    uint64_t v51 = v19;
    uint64_t v52 = 0LL;
  }

  int v57 = v4;
  if ((*(_DWORD *)&has & 0x200000) != 0)
  {
    userMaxCatherine = self->_userMaxCatherine;
    v60 = -userMaxCatherine;
    if (userMaxCatherine >= 0.0) {
      v60 = self->_userMaxCatherine;
    }
    v61 = floorf(v60 + 0.5);
    BOOL v62 = (float)(v60 - v61) * 1.8447e19;
    v58 = 2654435761u * (unint64_t)fmodf(v61, 1.8447e19);
    if (v62 >= 0.0)
    {
      if (v62 > 0.0) {
        v58 += (unint64_t)v62;
      }
    }

    else
    {
      v58 -= (unint64_t)fabsf(v62);
    }
  }

  else
  {
    v58 = 0LL;
  }

  if ((*(_DWORD *)&has & 0x80000) != 0)
  {
    persistedMinHR = self->_persistedMinHR;
    std::string v65 = -persistedMinHR;
    if (persistedMinHR >= 0.0) {
      std::string v65 = self->_persistedMinHR;
    }
    std::string v66 = floorf(v65 + 0.5);
    std::string v67 = (float)(v65 - v66) * 1.8447e19;
    v63 = 2654435761u * (unint64_t)fmodf(v66, 1.8447e19);
    if (v67 >= 0.0)
    {
      if (v67 > 0.0) {
        v63 += (unint64_t)v67;
      }
    }

    else
    {
      v63 -= (unint64_t)fabsf(v67);
    }
  }

  else
  {
    v63 = 0LL;
  }

  return v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v57 ^ v73 ^ v14 ^ v51 ^ v72 ^ v70 ^ v71 ^ v50 ^ (2654435761LL * activityType) ^ v69 ^ v44 ^ v49 ^ v52 ^ v58 ^ v63;
}

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      BOOL v7 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 52) |= 0x100u;
      *(_DWORD *)(a1 + 40) = v7;
      uint64_t v5 = *(_DWORD *)(a2 + 52);
    }

    if ((v5 & 0x200) != 0)
    {
      uint64_t v8 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 52) |= 0x200u;
      *(_DWORD *)(a1 + 44) = v8;
    }
  }

    double v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 16) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  uint64_t v6 = v5[11];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

    double v9 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 16) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 36),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    int v16 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 60) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v16;
    uint64_t v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        return;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  BOOL v17 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v17;
  if ((*(_DWORD *)(a2 + 60) & 0x400) == 0) {
    return;
  }
LABEL_17:
  BOOL v7 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v7;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[5],  a2,  a4);
  uint64_t v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[6],  a2,  a4);
  uint64_t v6 = v5[10];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v5[8],  a2,  a4);
  }

  if ((v5 & 0x100) != 0)
  {
    BOOL v7 = a2[10];
    a1[12] |= 0x100u;
    a1[10] = v7;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  uint64_t v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 20),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  if ((v5 & 0x100) != 0)
  {
    BOOL v7 = a2[10];
    a1[12] |= 0x100u;
    a1[10] = v7;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v5[4],  a2,  a4);
  uint64_t v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 16),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  uint64_t v6 = v5[10];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v5[8],  a2,  a4);
  }

    double v9 = *(_DWORD *)(a2 + 16);
    a1[8] |= 4u;
    a1[4] = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v15 = a2[10];
    a1[17] |= 0x100u;
    a1[10] = v15;
    uint64_t v5 = a2[17];
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_32;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  int v16 = a2[11];
  a1[17] |= 0x200u;
  a1[11] = v16;
  uint64_t v5 = a2[17];
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_23;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v19 = *(_DWORD *)(a2 + 40);
    a1[37] |= 0x100u;
    a1[10] = v19;
    uint64_t v5 = *(_DWORD *)(a2 + 148);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_58;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  unsigned int v20 = *(_DWORD *)(a2 + 44);
  a1[37] |= 0x200u;
  a1[11] = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    uint64_t v14 = a2[10];
    a1[16] |= 0x100u;
    a1[10] = v14;
    uint64_t v5 = a2[16];
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  BOOL v15 = a2[11];
  a1[16] |= 0x200u;
  a1[11] = v15;
  uint64_t v5 = a2[16];
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
LABEL_31:
    BOOL v17 = a2[13];
    a1[16] |= 0x800u;
    a1[13] = v17;
    if ((a2[16] & 0x1000) == 0) {
      return;
    }
    goto LABEL_32;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 52),  a2,  a4);
  }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"AutomaticTimeZoneUpdateFailed", 0LL, 0LL, 1u);
    ++*(_DWORD *)(a1 + 820);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    BOOL v7 = (os_log_s *)qword_1019349E8;
    if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(_DWORD *)(a1 + 820);
      *(_DWORD *)buf = 67109376;
      LODWORD(v27[0]) = a2;
      WORD2(v27[0]) = 1024;
      *(_DWORD *)((char *)v27 + 6) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "#Warning Location failed for time zone (exiting continuous mode %d; failure count now %d)",
        buf,
        0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      int v16 = *(_DWORD *)(a1 + 820);
      *(_DWORD *)int v25 = 67109376;
      *(_DWORD *)&v25[4] = a2;
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  0LL,  "#Warning Location failed for time zone (exiting continuous mode %d; failure count now %d)",
        v25,
        14);
      double v18 = (uint8_t *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::locationFailed(BOOL)", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    if (!*(_BYTE *)(a1 + 825)) {
      sub_100652E98(a1);
    }
    if (*(_DWORD *)(a1 + 820) >= *(_DWORD *)(a1 + 912))
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      int v12 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        __int128 v13 = *(void *)(a1 + 928);
        *(_DWORD *)buf = 134217984;
        v27[0] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Exceeded maximum failures; not retrying for %.2f seconds",
          buf,
          0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        int v22 = *(void *)(a1 + 928);
        *(_DWORD *)int v25 = 134217984;
        *(void *)&v25[4] = v22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Exceeded maximum failures; not retrying for %.2f seconds",
          COERCE_DOUBLE(v25));
        float v24 = (uint8_t *)v23;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::locationFailed(BOOL)", "%s\n", v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      uint64_t v11 = (double *)(a1 + 928);
    }

    else
    {
      if (qword_1019349E0 != -1) {
        dispatch_once(&qword_1019349E0, &stru_101847AA0);
      }
      double v9 = (os_log_s *)qword_1019349E8;
      if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 920);
        *(_DWORD *)buf = 134217984;
        v27[0] = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Maximum failure count not exceeded; retrying in %.2f seconds",
          buf,
          0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349E0 != -1) {
          dispatch_once(&qword_1019349E0, &stru_101847AA0);
        }
        BOOL v19 = *(void *)(a1 + 920);
        *(_DWORD *)int v25 = 134217984;
        *(void *)&v25[4] = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  1LL,  "Maximum failure count not exceeded; retrying in %.2f seconds",
          COERCE_DOUBLE(v25));
        __int16 v21 = (uint8_t *)v20;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTimeZoneManager::locationFailed(BOOL)", "%s\n", v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      uint64_t v11 = (double *)(a1 + 920);
    }

    sub_10064F00C(a1, v11);
    return;
  }

  if (qword_1019349E0 != -1) {
    dispatch_once(&qword_1019349E0, &stru_101847AA0);
  }
  uint64_t v14 = (os_log_s *)qword_1019349E8;
  if (os_log_type_enabled((os_log_t)qword_1019349E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Not registered for location or fine location; ignoring location failure",
      buf,
      2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349E0 != -1) {
      dispatch_once(&qword_1019349E0, &stru_101847AA0);
    }
    *(_WORD *)int v25 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349E8,  2LL,  "Not registered for location or fine location; ignoring location failure",
      v25,
      2,
      *(void *)v25);
    goto LABEL_43;
  }

          double v18 = (double *)sub_1003F72B0(v9, a2);
          if ((v19 & 1) == 0) {
            goto LABEL_16;
          }
          unsigned int v20 = sub_1006A9040((uint64_t)v9, v18);
          double v9 = v18 + 2;
          if (!sub_1006A9040((uint64_t)(v18 + 2), a2))
          {
            uint64_t v10 = v11 + 1;
            if (v20) {
              continue;
            }
LABEL_16:
            sub_1006A8CCC(a1, v18, a3, -v11, a5 & 1);
            double v9 = v18 + 2;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }

          a4 = -v11;
          a2 = v18;
          if (v20) {
            return;
          }
          goto LABEL_1;
        }

        if (v9 != a2) {
          sub_1006A9240((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        }
        return;
    }
  }

  if ((v5 & 0x100) != 0)
  {
    BOOL v7 = *(_BYTE *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 0x100u;
    *(_BYTE *)(a1 + 16) = v7;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 10),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  double v9 = *(void *)(a1 + 296);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *(double *)(a2 + 112);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(unsigned __int8 *)(v5 + 20),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v15 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  int v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      return;
    }
    goto LABEL_18;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v15 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  int v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      return;
    }
    goto LABEL_18;
  }

    uint64_t v5 = *(double **)a2;
    uint64_t v6 = *(double **)(a2 + 8);
  }

  if (v6 != v5)
  {
    BOOL v17 = *a3;
    double v9 = v5 + 2;
    if (v5 + 2 == v6)
    {
      sub_1008449C8((uint64_t)&v17, a1, v5, v5);
      int v12 = v5;
    }

    else
    {
      uint64_t v10 = sub_1008449C8((uint64_t)&v17, a1, v5, v5 + 2);
      if (v5 + 4 == v6)
      {
LABEL_22:
        int v12 = v5 + 2;
      }

      else
      {
        uint64_t v11 = v10;
        while (1)
        {
          int v12 = v9 + 2;
          __int128 v13 = sub_1008449C8((uint64_t)&v17, a1, v9, v9 + 2);
          if (v13 == 0.0) {
            break;
          }
          if (v13 < v11)
          {
            uint64_t v11 = v13;
            uint64_t v5 = v9;
          }

          uint64_t v14 = v9 + 4;
          v9 += 2;
          if (v14 == v6) {
            goto LABEL_22;
          }
        }

        uint64_t v5 = v9;
      }
    }

    BOOL v17 = *a3;
    BOOL v15 = sub_1008449C8((uint64_t)&v17, a1, v5, v12);
    asin(sqrt(v15));
  }

  double v27 = fabs(v26);
  __int16 v28 = 2.22044605e-16;
  if (v27 >= 1.0) {
    __int16 v28 = v27 * 2.22044605e-16;
  }
  int v29 = (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v27 <= v28;
  int v30 = v26 == 0.0 || v29;
  std::string::size_type v31 = v12 + dbl_10132BFF0[v12 <= 0.0];
  if ((v23 & 1) != 0) {
    goto LABEL_22;
  }
  __int128 v33 = vabdd_f64(v31, v14);
  v34 = 180.0;
  if (v33 == 180.0) {
    goto LABEL_24;
  }
  __int128 v35 = v31 - v14;
  uint64_t v73 = fabs(v31 - v14);
  v74 = (unint64_t)(*(void *)&v73 - 0x10000000000000LL) >> 53;
  uint64_t v75 = *(void *)&v73 - 1LL;
  v76 = v74 > 0x3FE && v75 > 0xFFFFFFFFFFFFELL;
  if (!v76 || COERCE__INT64(v31 - v14) == 0)
  {
    v78 = fabs(v33 + -180.0);
    v34 = 180.0;
    if (v33 < 180.0) {
      __int128 v33 = 180.0;
    }
    v79 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
    if (v78 <= v79) {
      goto LABEL_24;
    }
  }

  v34 = 180.0;
  if (v35 > 180.0)
  {
    __int128 v35 = fmod(v35 + 180.0, 360.0) + -180.0;
    if (v35 != -180.0)
    {
      v80 = ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
         && (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (v80 && *(void *)&v35 != 0LL) {
        goto LABEL_25;
      }
      v34 = 180.0;
      v82 = fabs(v35 + 180.0);
      __int16 v83 = fabs(v35);
      if (v83 < 180.0) {
        __int16 v83 = 180.0;
      }
      v84 = v83 >= 1.0 ? v83 * 2.22044605e-16 : 2.22044605e-16;
      if (v82 > v84) {
        goto LABEL_25;
      }
    }

    goto LABEL_24;
  }

  if (v35 < -180.0)
  {
    v34 = fmod(v35 + -180.0, 360.0) + 180.0;
LABEL_24:
    __int128 v35 = v34;
  }

  __int16 v21 = (uint64_t *)__p;
  if (a4 <= ((char *)v16 - (_BYTE *)__p) >> 3 && a3 <= 0x63 && ((char *)v45 - (_BYTE *)v44) >> 3 >= a4)
  {
    if (sub_10084E2F8( (double *)v37,  (uint64_t **)&__p,  (uint64_t **)&v44,  a3 + 1,  a4,  a5,  a6,  a7,  a6,  a7,  a8))
    {
      int v16 = v39;
      goto LABEL_25;
    }

  __int16 v23 = (uint64_t *)__p;
  if (a4 <= ((char *)v18 - (_BYTE *)__p) >> 3 && a3 <= 0x63 && ((char *)v47 - (_BYTE *)v46) >> 3 >= a4)
  {
    if (sub_10084DB1C( (double *)v39,  (uint64_t **)&__p,  (uint64_t **)&v46,  a3 + 1,  a4,  a5,  a6,  a7,  a6,  a7,  a8))
    {
      double v18 = v41;
      goto LABEL_25;
    }

  return v12;
}

  CFRelease(v3);
  return sub_10099562C(a1, (int)v5);
}

  if (qword_1019349A0 != -1) {
    dispatch_once(&qword_1019349A0, &stru_101865440);
  }
  int v25 = (os_log_s *)qword_1019349A8;
  if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v34 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_FAULT,  "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349A0 != -1) {
      dispatch_once(&qword_1019349A0, &stru_101865440);
    }
    v32[0] = 67240192;
    v32[1] = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349A8,  17LL,  "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d",  v32,  8);
    double v27 = (uint8_t *)v26;
    sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLRoutineMonitor onLocationNotification:data:]", "%s\n", v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

    double v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    uint64_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

    double v9 = a2[10];
    *(_DWORD *)(a1 + 20) |= 4u;
    *(_BYTE *)(a1 + 10) = v9;
    uint64_t v5 = *((_DWORD *)a2 + 5);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      BOOL v7 = *(_BYTE *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 0x100u;
      *(_BYTE *)(a1 + 16) = v7;
      uint64_t v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 0x200) != 0)
    {
      uint64_t v8 = *(_BYTE *)(a2 + 17);
      *(_DWORD *)(a1 + 24) |= 0x200u;
      *(_BYTE *)(a1 + 17) = v8;
    }
  }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(double *)(a1 + 24) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 48);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }

    uint64_t result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 16) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }

    uint64_t result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(double *)(a1 + 24) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 52);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }

    LODWORD(result) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = LODWORD(result);
    uint64_t v6 = *(_DWORD *)(a2 + 40);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  double v9 = *(void *)(v5 + 24);
  if (!v9) {
    double v9 = *(void *)(qword_1019A1B40 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    goto LABEL_19;
  }

  if ((v6 & 0x100) != 0)
  {
    uint64_t result = *(float *)(a2 + 44);
    *(_DWORD *)(a1 + 52) |= 0x100u;
    *(float *)(a1 + 44) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v4,  *(float *)(v5 + 20),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 40),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(unsigned __int8 *)(v5 + 48),  a2,  a4);
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_confidence),  @"confidence");
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_reach),  @"reach");
    if ((*(_BYTE *)&self->_has & 4) == 0) {
      return v3;
    }
    goto LABEL_8;
  }

  PBDataWriterWriteUint32Field(a3, self->_score, 11LL);
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      return;
    }
LABEL_15:
    PBDataWriterWriteUint32Field(a3, self->_infoMask, 13LL);
    return;
  }

  *((_DWORD *)a3 + 12) = self->_score;
  *((_BYTE *)a3 + 56) |= 0x20u;
  has = (char)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_7:
    if ((has & 4) == 0) {
      return;
    }
LABEL_15:
    *((_DWORD *)a3 + 9) = self->_infoMask;
    *((_BYTE *)a3 + 56) |= 4u;
    return;
  }

  *((_DWORD *)result + 8) = self->_confidence;
  *((_BYTE *)result + 56) |= 2u;
  has = (char)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_6:
    if ((has & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  self->_score = *((_DWORD *)a3 + 12);
  *(_BYTE *)&self->_has |= 0x20u;
  int v3 = *((_BYTE *)a3 + 56);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 4) == 0) {
      return;
    }
LABEL_15:
    self->_infoMask = *((_DWORD *)a3 + 9);
    *(_BYTE *)&self->_has |= 4u;
    return;
  }

  *((_DWORD *)v7 + 2) = self->_cellID;
  *((_BYTE *)v7 + 44) |= 1u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    *((_DWORD *)v7 + 9) = self->_tacID;
    *((_BYTE *)v7 + 44) |= 0x10u;
  }

  *((_DWORD *)v7 + 18) = self->_wifiGranularity;
  *((_BYTE *)v7 + 80) |= 0x10u;
  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
LABEL_6:
    *((_DWORD *)v7 + 15) = self->_radius;
    *((_BYTE *)v7 + 80) |= 2u;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v15 = *(_BYTE *)(a2 + 65);
    *(_DWORD *)(a1 + 76) |= 0x100u;
    *(_BYTE *)(a1 + 65) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 76);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  int v16 = *(_BYTE *)(a2 + 66);
  *(_DWORD *)(a1 + 76) |= 0x200u;
  *(_BYTE *)(a1 + 66) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }

    double v9 = *(_BYTE *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 24) = v9;
    uint64_t v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }

  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v15 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 0x100u;
    *(_DWORD *)(a1 + 40) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        return;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  int v16 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 56) |= 0x200u;
  *(_DWORD *)(a1 + 44) = v16;
  if ((*(_DWORD *)(a2 + 56) & 0x400) == 0) {
    return;
  }
LABEL_17:
  BOOL v7 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) |= 0x400u;
  *(_DWORD *)(a1 + 48) = v7;
}

  sub_100BD5908(a1);
  [*v14 updateCallbackHandler:v23];
  sub_100BD5B3C(a1);
  objc_msgSend( *v14,  "validateClientMonitoringRecordsByIdenitifier:",  objc_msgSend(a5, "objectForKeyedSubscript:", @"kCLConnectionMessageMonitorLedger"));
  _Block_object_dispose(&v38, 8);
  os_activity_scope_leave(&state);
  return a1;
}

  *((_BYTE *)result + 40) = self->_betaBlockerUse;
  *((_BYTE *)result + 44) |= 0x20u;
  if ((*(_BYTE *)&self->_has & 8) == 0) {
    return result;
  }
LABEL_7:
  *((_DWORD *)result + 8) = self->_algorithmVersion;
  *((_BYTE *)result + 44) |= 8u;
  return result;
}

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_1018819B8);
  }
  double v9 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 1136);
    uint64_t v11 = *(void *)(a1 + 1016);
    int v12 = *(_DWORD *)(v11 + 20);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 16);
    *(_DWORD *)buf = 134350080;
    v64 = v10;
    std::string v65 = 1026;
    *(_DWORD *)std::string v66 = v12;
    *(_WORD *)&v66[4] = 1026;
    *(_DWORD *)&v66[6] = v11;
    *(_WORD *)std::string v67 = 2050;
    *(double *)&v67[2] = v8;
    LOWORD(v68[0]) = 2050;
    *(double *)((char *)v68 + 2) = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf",  buf,  0x2Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_1018819B8);
    }
    BOOL v46 = *(void *)(a1 + 1136);
    char v47 = *(void *)(a1 + 1016);
    uint64_t v48 = *(_DWORD *)(v47 + 20);
    LODWORD(v47) = *(unsigned __int8 *)(v47 + 16);
    int v57 = 134350080;
    v58 = v46;
    v59 = 1026;
    *(_DWORD *)v60 = v48;
    *(_WORD *)&v60[4] = 1026;
    *(_DWORD *)&v60[6] = v47;
    *(_WORD *)v61 = 2050;
    *(double *)&v61[2] = v8;
    *(_WORD *)BOOL v62 = 2050;
    *(double *)&v62[2] = v56;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf",  &v57,  44);
    uint64_t v50 = (uint8_t *)v49;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v49);
    if (v50 != buf) {
      free(v50);
    }
  }

  if (v8 >= 0.000001)
  {
    *(double *)(a1 + 1552) = v8;
    __int128 v13 = *(void *)(a1 + 1280);
    uint64_t v53 = *(void *)(a1 + 1288);
    uint64_t v54 = v13;
    uint64_t v14 = *(double *)(a1 + 768);
    if (v14 <= 0.0 || vabdd_f64(*(double *)(a1 + 1136), v14) > 120.0)
    {
      *(_DWORD *)(a1 + 760) = sub_100E288AC(*(double *)(a1 + 1184), *(double *)(a1 + 1192));
      *(void *)(a1 + 768) = *(void *)(a1 + 1136);
    }

    BOOL v15 = v8 * 0.5;
    if (*(_BYTE *)(*(void *)(a1 + 1016) + 16LL)) {
      goto LABEL_23;
    }
    std::string::size_type v31 = *(_DWORD *)(a1 + 760);
    v32 = 0.0;
    switch(v31)
    {
      case 2:
        if (v56 <= 0.0)
        {
          if (v56 < 0.0) {
            v32 = fabs(v56) + 1.85000002;
          }
          goto LABEL_61;
        }

        uint64_t v40 = fabs(v56);
        if (v40 < v15) {
          goto LABEL_24;
        }
        double v41 = v15 + -1.85000002;
        if (v15 <= 1.85000002) {
          double v41 = v15 * 0.85;
        }
        v42 = v40 - v41;
        break;
      case 1:
        if (v56 < 0.0)
        {
          uint64_t v43 = fabs(v56);
          if (v43 < v15) {
            goto LABEL_24;
          }
          int v44 = v15 + -1.85000002;
          if (v15 <= 1.85000002) {
            int v44 = v15 * 0.85;
          }
          v32 = v43 - v44;
          goto LABEL_61;
        }

        if (v56 <= 0.0)
        {
LABEL_61:
          sub_100D2E0A8( (double *)(a1 + 608),  (double *)&v54,  (double *)&v53,  *(double *)(a1 + 1184),  *(double *)(a1 + 1192),  *(double *)(a1 + 1200),  *(double *)(a1 + 1432),  v32);
          *(double *)(a1 + 1568) = v32;
          *(_DWORD *)(a1 + 1408) = 2;
          v36 = v53;
          __int128 v35 = v54;
          *(void *)(a1 + 1280) = v54;
          *(void *)(a1 + 1288) = v36;
          *(void *)(a1 + 1440) = v35;
          *(void *)(a1 + 1448) = v36;
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          std::string::size_type v37 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            std::string v38 = *(void *)(a1 + 1136);
            *(_DWORD *)buf = 134349824;
            v64 = v38;
            std::string v65 = 2050;
            *(double *)std::string v66 = v56;
            *(_WORD *)&v66[8] = 2050;
            *(double *)std::string v67 = v32;
            *(_WORD *)&v67[8] = 2050;
            v68[0] = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf",  buf,  0x2Au);
          }

          if (!sub_1002921D0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          uint64_t v51 = *(void *)(a1 + 1136);
          int v57 = 134349824;
          v58 = v51;
          v59 = 2050;
          *(double *)v60 = v56;
          *(_WORD *)&v60[8] = 2050;
          *(double *)v61 = v32;
          *(_WORD *)&v61[8] = 2050;
          *(double *)BOOL v62 = v15;
          LODWORD(v52) = 42;
          __int16 v21 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf",  &v57,  v52);
          goto LABEL_41;
        }

        v42 = fabs(v56) + 1.85000002;
        break;
      case 0:
LABEL_23:
        int v16 = fabs(v56);
        if (v16 < v15)
        {
LABEL_24:
          *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
          return;
        }

        __int128 v33 = v15 + -1.85000002;
        if (v15 <= 1.85000002) {
          __int128 v33 = v15 * 0.85;
        }
        v34 = v16 - v33;
        if (v56 >= 0.0) {
          v32 = -v34;
        }
        else {
          v32 = v34;
        }
        goto LABEL_61;
      default:
        goto LABEL_61;
    }

    v32 = -v42;
    goto LABEL_61;
  }

  sub_100DF66A0((uint64_t)&v20, v2, v21);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101884578);
  }
  uint64_t v6 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:lock on-disk wifi #tiles, numberOfOnDiskTiles:%{public}ld}",  buf,  0x1Cu);
  }

  BOOL v7 = v20;
  for (j = v21; v7 != j; BOOL v7 = (__int128 *)((char *)v7 + 24))
  {
    else {
      double v9 = *(void *)(a1 + 432);
    }
    sub_1000392EC((uint64_t)&v19, v9 + 1);
    if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v10 = &v19;
    }
    else {
      uint64_t v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      else {
        uint64_t v11 = *(const void **)(a1 + 424);
      }
      memmove(v10, v11, v9);
    }

    *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 47;
    int v12 = *((char *)v7 + 23);
    if (v12 >= 0) {
      __int128 v13 = (const std::string::value_type *)v7;
    }
    else {
      __int128 v13 = *(const std::string::value_type **)v7;
    }
    if (v12 >= 0) {
      uint64_t v14 = *((unsigned __int8 *)v7 + 23);
    }
    else {
      uint64_t v14 = *((void *)v7 + 1);
    }
    BOOL v15 = std::string::append(&v19, v13, v14);
    int v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)&buf[16] = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)buf = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    if (buf[23] >= 0) {
      BOOL v17 = buf;
    }
    else {
      BOOL v17 = *(const char **)buf;
    }
    sub_100C148A0(v17);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }

  *(void *)buf = &v20;
  sub_1000129D4((void ***)buf);
  return sub_1011F6BE4(v22);
}

  if ((v5 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      BOOL v7 = *(_BYTE *)(a2 + 23);
      *(_DWORD *)(a1 + 32) |= 0x100u;
      *(_BYTE *)(a1 + 23) = v7;
      uint64_t v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 0x200) != 0)
    {
      uint64_t v8 = *(_BYTE *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 0x200u;
      *(_BYTE *)(a1 + 24) = v8;
    }
  }

    uint64_t v5 = feof(*(FILE **)(a1 + 136));
    uint64_t result = 0LL;
    if (!v5 && v3++ < 0x1FF) {
      continue;
    }
    return result;
  }

  if (fread((void *)(a1 + 5), 1uLL, 0x63uLL, *(FILE **)(a1 + 136)) == 99)
  {
    if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
    {
      *(_BYTE *)(a1 + 104) = v24[0];
      if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
      {
        *(_BYTE *)(a1 + 105) = v24[0];
        if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
        {
          *(_BYTE *)(a1 + 106) = v24[0];
          if (fread(v24, 1uLL, 1uLL, *(FILE **)(a1 + 136)) == 1)
          {
            *(_BYTE *)(a1 + 107) = v24[0];
            if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
            {
              BOOL v7 = COERCE_FLOAT(bswap32(v24[0]));
              *(float *)(a1 + 108) = v7;
              if (fabs(v7 + -0.05) <= 0.0001)
              {
                if (fread(v24, 1uLL, 8uLL, *(FILE **)(a1 + 136)) == 8)
                {
                  *(void *)(a1 + 112) = bswap64(v24[0]);
                  if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                  {
                    *(_DWORD *)(a1 + 120) = bswap32(v24[0]);
                    if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                    {
                      *(_DWORD *)(a1 + 124) = bswap32(v24[0]);
                      if (fread(v24, 1uLL, 4uLL, *(FILE **)(a1 + 136)) == 4)
                      {
                        *(_DWORD *)(a1 + 128) = bswap32(v24[0]);
                        return 1LL;
                      }

                      if (qword_101934880 != -1) {
                        dispatch_once(&qword_101934880, &stru_10188D3D8);
                      }
                      int v22 = (os_log_s *)qword_101934888;
                      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                      {
                        LOWORD(v32) = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - crc",  (uint8_t *)&v32,  2u);
                      }

                      uint64_t result = sub_1002921D0(115, 2);
                      if (result)
                      {
                        bzero(&v32, 0x65CuLL);
                        if (qword_101934880 != -1) {
                          dispatch_once(&qword_101934880, &stru_10188D3D8);
                        }
                        LOWORD(v26) = 0;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - crc",  &v26,  2);
                        goto LABEL_125;
                      }
                    }

                    else
                    {
                      if (qword_101934880 != -1) {
                        dispatch_once(&qword_101934880, &stru_10188D3D8);
                      }
                      __int16 v21 = (os_log_s *)qword_101934888;
                      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                      {
                        LOWORD(v32) = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - data size",  (uint8_t *)&v32,  2u);
                      }

                      uint64_t result = sub_1002921D0(115, 2);
                      if (result)
                      {
                        bzero(&v32, 0x65CuLL);
                        if (qword_101934880 != -1) {
                          dispatch_once(&qword_101934880, &stru_10188D3D8);
                        }
                        LOWORD(v26) = 0;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - data size",  &v26,  2);
                        goto LABEL_125;
                      }
                    }
                  }

                  else
                  {
                    if (qword_101934880 != -1) {
                      dispatch_once(&qword_101934880, &stru_10188D3D8);
                    }
                    unsigned int v20 = (os_log_s *)qword_101934888;
                    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                    {
                      LOWORD(v32) = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - expiration age",  (uint8_t *)&v32,  2u);
                    }

                    uint64_t result = sub_1002921D0(115, 2);
                    if (result)
                    {
                      bzero(&v32, 0x65CuLL);
                      if (qword_101934880 != -1) {
                        dispatch_once(&qword_101934880, &stru_10188D3D8);
                      }
                      LOWORD(v26) = 0;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - expiration age",  &v26,  2);
                      goto LABEL_125;
                    }
                  }
                }

                else
                {
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10188D3D8);
                  }
                  BOOL v19 = (os_log_s *)qword_101934888;
                  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                  {
                    LOWORD(v32) = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - timestamp",  (uint8_t *)&v32,  2u);
                  }

                  uint64_t result = sub_1002921D0(115, 2);
                  if (result)
                  {
                    bzero(&v32, 0x65CuLL);
                    if (qword_101934880 != -1) {
                      dispatch_once(&qword_101934880, &stru_10188D3D8);
                    }
                    LOWORD(v26) = 0;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - timestamp",  &v26,  2);
                    goto LABEL_125;
                  }
                }
              }

              else
              {
                if (qword_101934880 != -1) {
                  dispatch_once(&qword_101934880, &stru_10188D3D8);
                }
                uint64_t v8 = (os_log_s *)qword_101934888;
                if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
                {
                  double v9 = *(float *)(a1 + 108);
                  v32 = 134349568;
                  __int128 v33 = 0x3FA999999999999ALL;
                  v34 = 2050;
                  __int128 v35 = 0x3FA999999999999ALL;
                  v36 = 2050;
                  std::string::size_type v37 = v9;
                  _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,coarse signal environment file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed",  (uint8_t *)&v32,  0x20u);
                }

                uint64_t result = sub_1002921D0(115, 2);
                if (result)
                {
                  bzero(&v32, 0x65CuLL);
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_10188D3D8);
                  }
                  uint64_t v10 = *(float *)(a1 + 108);
                  int v26 = 134349568;
                  double v27 = 0x3FA999999999999ALL;
                  __int16 v28 = 2050;
                  int v29 = 0x3FA999999999999ALL;
                  int v30 = 2050;
                  std::string::size_type v31 = v10;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,coarse signal environment file is not %{public}f deg by %{public}f deg,spacing unexpected,%{public}f,re-download needed",  &v26,  32);
                  goto LABEL_125;
                }
              }
            }

            else
            {
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_10188D3D8);
              }
              double v18 = (os_log_s *)qword_101934888;
              if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
              {
                LOWORD(v32) = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - binsize",  (uint8_t *)&v32,  2u);
              }

              uint64_t result = sub_1002921D0(115, 2);
              if (result)
              {
                bzero(&v32, 0x65CuLL);
                if (qword_101934880 != -1) {
                  dispatch_once(&qword_101934880, &stru_10188D3D8);
                }
                LOWORD(v26) = 0;
                _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - binsize",  &v26,  2);
                goto LABEL_125;
              }
            }
          }

          else
          {
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10188D3D8);
            }
            BOOL v17 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
            {
              LOWORD(v32) = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - maxLat",  (uint8_t *)&v32,  2u);
            }

            uint64_t result = sub_1002921D0(115, 2);
            if (result)
            {
              bzero(&v32, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_10188D3D8);
              }
              LOWORD(v26) = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - maxLat",  &v26,  2);
              goto LABEL_125;
            }
          }
        }

        else
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10188D3D8);
          }
          int v16 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
          {
            LOWORD(v32) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - minLat",  (uint8_t *)&v32,  2u);
          }

          uint64_t result = sub_1002921D0(115, 2);
          if (result)
          {
            bzero(&v32, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_10188D3D8);
            }
            LOWORD(v26) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - minLat",  &v26,  2);
            goto LABEL_125;
          }
        }
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10188D3D8);
        }
        BOOL v15 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
        {
          LOWORD(v32) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - headerLength",  (uint8_t *)&v32,  2u);
        }

        uint64_t result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(&v32, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_10188D3D8);
          }
          LOWORD(v26) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - headerLength",  &v26,  2);
          goto LABEL_125;
        }
      }
    }

    else
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D3D8);
      }
      uint64_t v14 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        LOWORD(v32) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - version",  (uint8_t *)&v32,  2u);
      }

      uint64_t result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(&v32, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10188D3D8);
        }
        LOWORD(v26) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - version",  &v26,  2);
        goto LABEL_125;
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D3D8);
    }
    __int128 v13 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      LOWORD(v32) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - header string",  (uint8_t *)&v32,  2u);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(&v32, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_10188D3D8);
      }
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v32,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "#Warning,CLSE,readSignalEnvHelper,invalid CLSE file - header string",  &v26,  2);
      goto LABEL_125;
    }
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 40),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(double *)(v5 + 32),  a3);
  }

  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }

  uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v10 >= 0x80)
  {
    uint64_t v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }

  else
  {
    uint64_t v11 = 2;
  }

  v4 += v11;
  if ((v3 & 8) != 0)
  {
LABEL_20:
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v12 >= 0x80)
    {
      __int128 v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      __int128 v13 = 2;
    }

    v4 += v13;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    BOOL v15 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(_DWORD *)(a1 + 44) = v15;
    uint64_t v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_32;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }

  int v16 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) |= 0x200u;
  *(_DWORD *)(a1 + 48) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  uint64_t v8 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  double v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] != 52LL) {
      goto LABEL_19;
    }
    uint64_t v8 = (void *)*v8;
    goto LABEL_18;
  }

  if (v9 == 52)
  {
LABEL_18:
    if (memcmp(v8, "SpringTracking/kCLConnectionMessageSpringTrackerStop", 0x34uLL)) {
      goto LABEL_19;
    }
    int v30 = *(CLConnectionMessage **)a2;
    __int16 v21 = *(std::__shared_weak_count **)(a2 + 8);
    v39[0] = (uint64_t)v30;
    v39[1] = (uint64_t)v21;
    if (v21)
    {
      std::string::size_type v31 = (unint64_t *)&v21->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }

    sub_100F6836C(a1, v39);
    if (!v21) {
      return;
    }
    __int128 v33 = (unint64_t *)&v21->__shared_owners_;
    do
      int v25 = __ldaxr(v33);
    while (__stlxr(v25 - 1, v33));
LABEL_67:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }

    return;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", self->_cellID),  @"cellID");
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
LABEL_5:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_tacID),  @"tacID");
LABEL_6:
  location = self->_location;
  if (location) {
    objc_msgSend( v3,  "setObject:forKey:",  -[ALSLocation dictionaryRepresentation](location, "dictionaryRepresentation"),  @"location");
  }
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_nrarfcn),  @"nrarfcn");
  }
  return v3;
}

  *((void *)a3 + 1) = self->_cellID;
  *((_BYTE *)a3 + 40) |= 1u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_5:
    *((_DWORD *)a3 + 9) = self->_tacID;
    *((_BYTE *)a3 + 40) |= 0x10u;
  }

  *(float *)&uint64_t v4 = self->_gpsAltitude;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"gpsAltitude");
  has = (char)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  PBDataWriterWriteFloatField(a3, 3LL, self->_gpsAltitude);
  has = (char)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  *((_DWORD *)a3 + 6) = LODWORD(self->_gpsAltitude);
  *((_BYTE *)a3 + 48) |= 8u;
  has = (char)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  self->_gpsAltitude = *((float *)a3 + 6);
  *(_BYTE *)&self->_has |= 8u;
  int v3 = *((_BYTE *)a3 + 48);
  if ((v3 & 0x80) == 0)
  {
LABEL_5:
    if ((v3 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  PB::TextFormatter::format(this, "fallAlertSentFromReferee", *(_BYTE *)(a1 + 44));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  uint64_t v6 = *(_BYTE *)(v3 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 24), 7u);
  }

  uint64_t v6 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 40) = v6;
  if ((*(_BYTE *)(a2 + 48) & 8) != 0) {
    goto LABEL_14;
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "doingBiasEstimation", *(_DWORD *)(a1 + 20));
  uint64_t v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "varianceY", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 7u);
  }

  uint64_t v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 16) = v8;
  if ((*(_BYTE *)(a2 + 36) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x67u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "ch3", *(_DWORD *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 36), 7u);
  }

  uint64_t v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v8;
  if ((*(_BYTE *)(a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "prescalar", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v8;
  if ((*(_BYTE *)(a2 + 32) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

  uint64_t v8 = *(_BYTE *)(a2 + 26);
  v3 |= 0x20u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 26) = v8;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0) {
    goto LABEL_14;
  }
  return result;
}

  double v9 = *(uint64_t **)(a2 + 8);
  uint64_t v10 = *(uint64_t **)(a2 + 16);
  while (v9 != v10)
    sub_101102330(v3, *v9++);
  return a1;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "lastRealTriggerTimestamp", *(void *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "receivedAtTimestamp", *(void *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 52) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x65u);
  }

  PB::TextFormatter::format(this, "motionPlanarity", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "numDaysWithDataLast7Days", *(_DWORD *)(a1 + 36));
  uint64_t v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "tapCounter", *(_DWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 7u);
  }

  PB::TextFormatter::format(this, "laneCount", *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "odometerHasBeenCorrected", *(_BYTE *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 0x20) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 36), 7u);
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 40) = result;
  if ((*(_BYTE *)(a2 + 56) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t v8 = *(_BYTE *)(a2 + 13);
  v3 |= 4u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 13) = v8;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "meanRotRate", *(float *)(a1 + 56));
LABEL_6:
  uint64_t v6 = *(float **)(a1 + 8);
  BOOL v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }

  if ((*(_BYTE *)(a1 + 60) & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

  uint64_t v8 = *(_BYTE *)(a2 + 40);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_BYTE *)(a1 + 40) = v8;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "isOnCharger", *(_BYTE *)(a1 + 37));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 20) = v8;
  if ((*(_BYTE *)(a2 + 36) & 2) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "timeSinceLastRemag", *(void *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 42), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 41), 7u);
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 11), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 16), 7u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "verticalUserAcceleration", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 28), 7u);
  }

  PB::TextFormatter::format(this, "dotRelativeChangeOverBuffer", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "headingRelativeChangeOverBuffer", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 7u);
  }

  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 52));
  uint64_t v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 7u);
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 48) = result;
  if ((*(_BYTE *)(a2 + 56) & 1) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "medianBufferNumSamples", *(_DWORD *)(a1 + 56));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v8;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0) {
    goto LABEL_14;
  }
  return result;
}

  PB::TextFormatter::format(this, "range", *(double *)(a1 + 8));
  uint64_t v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "rangeShift", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  uint64_t v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 37), 7u);
  }

  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 28));
  uint64_t v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  uint64_t v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  uint64_t result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(a1 + 32) = v3;
  *(float *)(a1 + 12) = result;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0) {
    goto LABEL_14;
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  uint64_t v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "swingAccelXStandardized", *(double *)(a1 + 32));
  uint64_t v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    PB::TextFormatter::format(this, "swingAccelZ", *(double *)(a1 + 48));
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  uint64_t v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 32), 8u);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(_DWORD *)(v5 + 56),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(double *)(v5 + 48),  a3);
  }

uint64_t sub_100023264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_1000239F0(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    BOOL v7 = *(void (****)(void))(a1 + 8);
    if (v7 != v5)
    {
      uint64_t v8 = v7 - 10;
      double v9 = v7 - 10;
      do
      {
        uint64_t v10 = *v9;
        v9 -= 10;
        (*v10)(v8);
        BOOL v11 = v8 == v6;
        uint64_t v8 = v9;
      }

      while (!v11);
    }

    *(void *)(a1 + 8) = v6;
  }

  return a2;
}

BOOL sub_1000232EC(uint64_t a1, std::locale::__imp **a2)
{
  unsigned int v2 = *a2;
  int v3 = a2[1];
  if (*a2 == v3) {
    return 0LL;
  }
  do
  {
    std::locale::locale(&v9);
    uint64_t v5 = sub_100023388(a1, v2, &v9);
    uint64_t v7 = v6;
    std::locale::~locale(&v9);
    BOOL result = v5 != v7;
    if (v5 != v7) {
      break;
    }
    unsigned int v2 = (std::locale::__imp *)((char *)v2 + 24);
  }

  while (v2 != v3);
  return result;
}

void sub_100023374( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_100023388(uint64_t a1, std::locale::__imp *a2, std::locale *a3)
{
  LODWORD(v5) = *((char *)a2 + 23);
  BOOL v6 = (int)v5 < 0;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v5 = v5;
  if (v6) {
    uint64_t v5 = v7;
  }
  uint64_t v8 = (std::locale::__imp *)((char *)a2 + v5);
  std::locale::locale(&v18, &v15);
  v16[0].__locale_ = a2;
  v16[1].__locale_ = v8;
  std::locale::locale(&v17, &v18);
  std::locale::~locale(&v18);
  int v9 = *(char *)(a1 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  if (v10) {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  uint64_t v13 = sub_100023A4C(v16, v11, v11 + v12);
  std::locale::~locale(&v17);
  std::locale::~locale(&v15);
  return v13;
}

void sub_100023450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_10002346C(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100023498(void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    sub_1000234D8((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_1000234D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88LL)
  {
  }

  a1[1] = v2;
}

uint64_t sub_100023524(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000235E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100023598(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_1000070D4();
  }
  return operator new(88 * a2);
}

uint64_t sub_1000235E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&__int128 v19 = a6;
  *((void *)&v19 + 1) = a7;
  __int128 v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  std::locale v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }

  else
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 88) = *(void *)(a3 + v7 - 88);
      __int128 v10 = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(v9 - 72) = 0LL;
      *(void *)(v9 - 64) = 0LL;
      *(void *)(v9 - 80) = 0LL;
      __int128 v11 = *(_OWORD *)(a3 + v7 - 56);
      __int128 v12 = *(_OWORD *)(a3 + v7 - 40);
      __int128 v13 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v13;
      *(_OWORD *)(v8 - 40) = v12;
      *(_OWORD *)(v8 - 56) = v11;
      v7 -= 88LL;
    }

    while (a3 + v7 != a5);
    *((void *)&v19 + 1) = a7 + v7;
    uint64_t v14 = v19;
  }

  char v17 = 1;
  sub_1000236B0((uint64_t)v16);
  return v14;
}

uint64_t sub_1000236B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000236E4(a1);
  }
  return a1;
}

void sub_1000236E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 88LL;
  }

uint64_t sub_100023728(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10002375C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 88;
      *(void *)(a1 + 16) = v2 - 88;
      if (*(char *)(v2 - 57) < 0)
      {
        operator delete(*(void **)(v2 - 80));
        uint64_t v5 = *(void *)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

uint64_t **sub_1000237B0(uint64_t **a1, uint64_t a2)
{
  int v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = sub_100023888(v6, a2);
  }

  else
  {
    sub_100023800((uint64_t)v6, a2);
    uint64_t v7 = v5 + 88;
  }

  v3[1] = v7;
  return a1;
}

__n128 sub_100023800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  unint64_t v5 = (_BYTE *)(v4 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C(v5, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)unint64_t v5 = v6;
  }

  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v8 = *(_OWORD *)(a2 + 48);
  __int128 v9 = *(_OWORD *)(a2 + 64);
  *(void *)(v4 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 64) = v9;
  *(__n128 *)(v4 + 32) = result;
  *(void *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_100023880(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100023888(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3LL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3LL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v23 = a1 + 2;
  if (v9) {
    __int128 v10 = (char *)sub_100023598(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  __int128 v11 = &v10[88 * v4];
  v20[0] = v10;
  v20[1] = v11;
  __int16 v21 = v11;
  int v22 = &v10[88 * v9];
  *(void *)__int128 v11 = *(void *)a2;
  __int128 v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C(v12, *(void **)(a2 + 8), *(void *)(a2 + 16));
    __int128 v11 = v21;
  }

  else
  {
    __int128 v13 = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)__int128 v12 = v13;
  }

  uint64_t v14 = &v10[88 * v4];
  __int128 v16 = *(_OWORD *)(a2 + 48);
  __int128 v15 = *(_OWORD *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 80);
  *((_OWORD *)v14 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v14 + 3) = v16;
  *((void *)v14 + 10) = v17;
  *((_OWORD *)v14 + 4) = v15;
  __int16 v21 = v11 + 88;
  sub_100023524(a1, v20);
  uint64_t v18 = a1[1];
  sub_100023728((uint64_t)v20);
  return v18;
}

void sub_1000239DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000239F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100069010(a3, v4);
      v4 += 80LL;
      a3 += 80LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

uint64_t sub_100023A4C(const std::locale *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    __int128 v6 = a1 + 2;
    locale = a1[1].__locale_;
    do
    {
      unint64_t v8 = a1->__locale_;
      if (a1->__locale_ == locale) {
        break;
      }
      uint64_t v9 = 0LL;
      __int128 v10 = a1->__locale_;
      uint64_t v11 = v3;
      while ((char *)v8 + v9 != (char *)a1[1].__locale_)
      {
        ++v11;
        __int128 v10 = (std::locale::__imp *)((char *)v10 + 1);
        ++v9;
        if (v3 + v9 == a3)
        {
          __int128 v10 = (std::locale::__imp *)((char *)v8 + v9);
          goto LABEL_10;
        }
      }

      __int128 v10 = (std::locale::__imp *)((char *)v8 + v9);
LABEL_10:
      locale = a1[1].__locale_;
      if (v10 == locale) {
        return v3;
      }
      ++v3;
    }

    while (v3 != a3);
    return a3;
  }

  return v3;
}

BOOL sub_100023B2C(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5 = *a2;
  __int128 v6 = std::locale::use_facet(a1, &std::ctype<char>::id);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[1].~facet)(v6, v5);
  uint64_t v7 = *a3;
  unint64_t v8 = std::locale::use_facet(a1, &std::ctype<char>::id);
  return (_DWORD)v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v8->__vftable[1].~facet)( v8,  v7);
}

void sub_100023BA4(char **a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  uint64_t v2 = (char *)operator new(0x120uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 288;
  a1[1] = sub_100036E0C((uint64_t)(a1 + 2), &v4, &v16, v2);
  uint64_t v3 = 36LL;
  do
  {
    v3 -= 3LL;
  }

  while (v3 * 8);
}

void sub_100023D64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  sub_1000129D4(&a10);
  uint64_t v15 = 288LL;
  while (1)
  {
    if (*(&a12 + v15 - 1) < 0) {
      operator delete(*(void **)(&a12 + v15 - 24));
    }
    v15 -= 24LL;
    if (!v15) {
      _Unwind_Resume(a1);
    }
  }

uint64_t sub_100023DD8(uint64_t a1, __int128 *a2, int a3)
{
  __int128 v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 1;
  uint64_t v7 = a1 + 24;
  *(_WORD *)(a1 + 32) = 256;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 40), *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)a1;
    *(void *)(a1 + 56) = *(void *)(a1 + 16);
  }

  *(void *)(a1 + 64) = 0LL;
  sub_1003B35F4(a1 + 72, v7);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  else {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  if (a3 != 2 && !v8)
  {
    sub_101223DD8();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.mm",  156,  "CLMicroLocationDatabase");
    __break(1u);
LABEL_16:
    dispatch_once(&qword_1019348D0, &stru_101819198);
    goto LABEL_11;
  }

  sub_100024174((void *)a1);
  if (sub_1003C1048(a1 + 72)) {
    return a1;
  }
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_1019348D0 != -1) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed to connect to database", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v13[0] = 0;
    LODWORD(v12) = 2;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Failed to connect to database",  v13,  v12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationDatabase::CLMicroLocationDatabase(std::string, CLSqliteDatabase::SqlitePropertyProtection)",  "%s\n",  v11);
  }

  return a1;
}

void sub_100024060( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  __int128 v16 = *(void **)(v12 + 296);
  *(void *)(v12 + 296) = 0LL;
  if (v16) {
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(v12 + 288);
  *(void *)(v12 + 288) = 0LL;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v12 + 280);
  *(void *)(v12 + 280) = 0LL;
  if (v18) {
    operator delete(v18);
  }
  __int128 v19 = *(void **)(v12 + 272);
  *(void *)(v12 + 272) = 0LL;
  if (v19) {
    operator delete(v19);
  }
  unsigned int v20 = *(void **)(v12 + 264);
  *(void *)(v12 + 264) = 0LL;
  if (v20) {
    operator delete(v20);
  }
  __int16 v21 = *(void **)(v12 + 256);
  *(void *)(v12 + 256) = 0LL;
  if (v21) {
    operator delete(v21);
  }
  int v22 = *(void **)(v12 + 248);
  *(void *)(v12 + 248) = 0LL;
  if (v22) {
    operator delete(v22);
  }
  __int16 v23 = *(void **)(v12 + 240);
  *(void *)(v12 + 240) = 0LL;
  if (v23) {
    operator delete(v23);
  }
  float v24 = *(void **)(v12 + 232);
  *(void *)(v12 + 232) = 0LL;
  if (v24) {
    operator delete(v24);
  }
  int v25 = *(void **)(v12 + 224);
  *(void *)(v12 + 224) = 0LL;
  if (v25) {
    operator delete(v25);
  }
  int v26 = *(void **)(v12 + 216);
  *(void *)(v12 + 216) = 0LL;
  if (v26) {
    operator delete(v26);
  }
  double v27 = *v15;
  *uint64_t v15 = 0LL;
  if (v27) {
    operator delete(v27);
  }
  sub_1003B3930(v14);
  _Unwind_Resume(a1);
}

void sub_100024174(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 9);
  if (sub_1003C1048((uint64_t)(a1 + 9)))
  {
    uint64_t v3 = operator new(0x10uLL);
    sub_10004D434((uint64_t)v3, v2);
    __int128 v4 = (void *)a1[26];
    a1[26] = v3;
    if (v4) {
      operator delete(v4);
    }
    uint64_t v5 = operator new(0x10uLL);
    sub_1000C8AE8((uint64_t)v5, v2);
    __int128 v6 = (void *)a1[27];
    a1[27] = v5;
    if (v6) {
      operator delete(v6);
    }
    uint64_t v7 = operator new(0x10uLL);
    sub_1001519B8((uint64_t)v7, v2);
    uint64_t v8 = (void *)a1[28];
    a1[28] = v7;
    if (v8) {
      operator delete(v8);
    }
    uint64_t v9 = operator new(0x10uLL);
    sub_1001424C8((uint64_t)v9, v2);
    __int128 v10 = (void *)a1[29];
    a1[29] = v9;
    if (v10) {
      operator delete(v10);
    }
    uint64_t v11 = operator new(0x10uLL);
    sub_10003BD8C((uint64_t)v11, v2);
    uint64_t v12 = (void *)a1[32];
    a1[32] = v11;
    if (v12) {
      operator delete(v12);
    }
    uint64_t v13 = operator new(0x10uLL);
    sub_10000D870((uint64_t)v13, v2);
    uint64_t v14 = (void *)a1[30];
    a1[30] = v13;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v15 = operator new(0x10uLL);
    sub_1001347E4((uint64_t)v15, v2);
    __int128 v16 = (void *)a1[31];
    a1[31] = v15;
    if (v16) {
      operator delete(v16);
    }
    uint64_t v17 = operator new(0x10uLL);
    sub_1000F9800((uint64_t)v17, v2);
    uint64_t v18 = (void *)a1[33];
    a1[33] = v17;
    if (v18) {
      operator delete(v18);
    }
    __int128 v19 = operator new(0x10uLL);
    sub_10013EB1C((uint64_t)v19, v2);
    unsigned int v20 = (void *)a1[34];
    a1[34] = v19;
    if (v20) {
      operator delete(v20);
    }
    __int16 v21 = operator new(0x10uLL);
    sub_100051544((uint64_t)v21, v2);
    int v22 = (void *)a1[35];
    a1[35] = v21;
    if (v22) {
      operator delete(v22);
    }
    __int16 v23 = operator new(0x10uLL);
    sub_100130738((uint64_t)v23, v2);
    float v24 = (void *)a1[36];
    a1[36] = v23;
    if (v24) {
      operator delete(v24);
    }
    int v25 = operator new(0x10uLL);
    sub_10004431C((uint64_t)v25, v2);
    int v26 = (void *)a1[37];
    a1[37] = v25;
    if (v26) {
      operator delete(v26);
    }
  }

void sub_100024364(_Unwind_Exception *a1)
{
}

uint64_t sub_1000243A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = 0LL;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = 0LL;
  if (v3) {
    operator delete(v3);
  }
  __int128 v4 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = 0LL;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 272);
  *(void *)(a1 + 272) = 0LL;
  if (v5) {
    operator delete(v5);
  }
  __int128 v6 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = 0LL;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0LL;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0LL;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0LL;
  if (v9) {
    operator delete(v9);
  }
  __int128 v10 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0LL;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = 0LL;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = 0LL;
  if (v13) {
    operator delete(v13);
  }
  sub_1003B3930(a1 + 72);
  return a1;
}

uint64_t sub_1000244B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 72;
  if (!sub_1003C1048(a1 + 72))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"openTransaction";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to call %s without a backing database",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v8 = 136315138;
      uint64_t v9 = "openTransaction";
      uint64_t v7 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to call %s without a backing database",  (const char *)&v8);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSqliteTransaction CLMicroLocationDatabase::openTransaction()",  "%s\n",  (const char *)v7);
      if (v7 != buf) {
        free(v7);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(buf, "No valid connection to microlocation database.");
    std::runtime_error::runtime_error(exception, buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1018191C8;
  }

  return sub_1003C0F7C(v3, a2);
}

void sub_1000246D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }

  else if (!v19)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_100024718(void *a1)
{
  uint64_t v2 = a1 + 9;
  if (sub_1003C1048((uint64_t)(a1 + 9)))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:dropping MiLo database tables}",  buf,  0x12u);
    }

    sub_1003C0200(v2, "MicroLocationMeasurements");
    sub_1003C0200(v2, "MicroLocationRecordingEvents");
    sub_1003C0200(v2, "MicroLocationModels");
    sub_1003C0200(v2, "MicroLocationConfiguration");
    sub_1003C0200(v2, "MicroLocationRapport");
    sub_1003C0200(v2, "MicroLocationLabels");
    sub_1003C0200(v2, "MicroLocationLoggedEvents");
    sub_1010DDBC0(buf, "milo-internal-legacy-client-name-unsupervised");
    sub_1010DDBC0(v15, "focus-mode");
    int v8 = 0LL;
    uint64_t v9 = 0LL;
    v10[0] = 0LL;
    uint64_t v10[2] = &v8;
    char v11 = 0;
    int v8 = (char *)operator new(0x30uLL);
    uint64_t v9 = v8;
    v10[0] = v8 + 48;
    uint64_t v4 = 0LL;
    uint64_t v9 = sub_100036E0C((uint64_t)v10, (__int128 *)buf, v16, v8);
    do
    {
      if (SHIBYTE(v15[v4 + 2]) < 0) {
        operator delete((void *)v15[v4]);
      }
      v4 -= 3LL;
    }

    while (v4 != -6);
    sub_10002E4B0((uint64_t)a1, (uint64_t (*)(char *, uint64_t))sub_1000FBE48, 0LL, (uint64_t)&v8);
    sub_1003C0200(v2, "MicroLocationAssociatedState");
    sub_1003C0200(v2, "MicroLocationBluetoothIdentityTable");
    sub_100024174(a1);
    *(void *)buf = &v8;
    sub_1000129D4((void ***)buf);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to drop tables without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to drop tables without a backing database",  &v8,  2);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationDatabase::dropTables()", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

void sub_100024A8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  uint64_t v29 = 0LL;
  while (1)
  {
    if (*(&a28 + v29) < 0) {
      operator delete(*(void **)((char *)&a23 + v29));
    }
    v29 -= 24LL;
    if (v29 == -48) {
      _Unwind_Resume(a1);
    }
  }

uint64_t sub_100024B0C(uint64_t a1, const std::string::value_type *a2)
{
  v18.__r_.__value_.__s.__size_ = 21;
  strcpy((char *)&v18, "SELECT COUNT(*) FROM ");
  uint64_t v4 = std::string::append(&v18, a2);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = a1 + 72;
  if ((sub_1003B747C(v6, a2) & 1) != 0)
  {
    if (cap >= 0) {
      uint64_t v7 = (char *)__p;
    }
    else {
      uint64_t v7 = (char *)__p[0];
    }
    sub_1003C0D54(v6, v7, &v18);
    std::string::size_type v8 = v18.__r_.__value_.__r.__words[0];
    uint64_t v9 = (sqlite3_stmt *)sub_100019240((uint64_t)v18.__r_.__value_.__l.__data_);
    if (j__sqlite3_step(v9) != 100)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      __int128 v10 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v18.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to SELECT COUNT(*) rows",  (uint8_t *)&v18,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v18, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819198);
        }
        v15[0] = 0;
        uint64_t v14 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v18,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to SELECT COUNT(*) rows",  v15,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CLMicroLocationDatabase::numEntries(const char *const)",  "%s\n",  (const char *)v14);
        if (v14 != &v18) {
          free(v14);
        }
      }

      sqlite3_reset(v9);
    }

    int v11 = sqlite3_column_int(v9, 0);
    sqlite3_reset(v9);
    uint64_t v12 = v11 & ~(v11 >> 31);
    if (v8) {
      (*(void (**)(std::string::size_type))(*(void *)v8 + 8LL))(v8);
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_100024D98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100024DEC(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v3 = a1 + 72;
  if (!sub_1003C1048(a1 + 72))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    __int16 v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to call numEntriesFromTriggerTable without a backing database",  v40,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v40, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      *(_WORD *)int v39 = 0;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v40,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to call numEntriesFromTriggerTable without a backing database",  v39,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable(const char *const)",  "%s\n",  v29);
      if (v29 != v40) {
        free(v29);
      }
    }

    return 0LL;
  }

  v33.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v33, "SELECT ");
  uint64_t v4 = std::string::append(&v33, "Count");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v6 = std::string::append(&v34, " FROM ");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v8 = std::string::append(&v35, a2);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v10 = std::string::append(&v36, "Counts");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(void *)&v39[16] = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)int v39 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v12 = std::string::append((std::string *)v39, " WHERE rowid=");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v40[16] = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v40 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v32, 1);
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v14 = &v32;
  }
  else {
    uint64_t v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v32.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  __int128 v16 = std::string::append((std::string *)v40, (const std::string::value_type *)v14, size);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t cap = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  if ((v40[23] & 0x80000000) != 0) {
    operator delete(*(void **)v40);
  }
  if ((v39[23] & 0x80000000) != 0) {
    operator delete(*(void **)v39);
  }
  if (cap >= 0) {
    std::string v18 = (char *)__p;
  }
  else {
    std::string v18 = (char *)__p[0];
  }
  sub_1003C0D54(v3, v18, v40);
  uint64_t v19 = *(void *)v40;
  unsigned int v20 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)v40);
  if (sqlite3_step(v20) == 100)
  {
    __int16 v21 = (sqlite3_stmt *)sub_100019240(v19);
    int v22 = sqlite3_column_int(v21, 0);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v26 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Unable to get column count from trigger table",  v40,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v40, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      *(_WORD *)int v39 = 0;
      int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v40,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Unable to get column count from trigger table",  v39,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable(const char *const)",  "%s\n",  v30);
      if (v30 != v40) {
        free(v30);
      }
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018191E0);
    }
    double v27 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v40 = 136315650;
      *(void *)&v40[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLo"
                           "cationDatabase.mm";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 247;
      *(_WORD *)&v40[18] = 2080;
      *(void *)&v40[20] = "false";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", v40, 0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(v40, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018191E0);
      }
      *(_DWORD *)int v39 = 136315650;
      *(void *)&v39[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLo"
                           "cationDatabase.mm";
      *(_WORD *)&v39[12] = 1024;
      *(_DWORD *)&v39[14] = 247;
      *(_WORD *)&v39[18] = 2080;
      *(void *)&v39[20] = "false";
      std::string::size_type v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v40,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assert Failed, %s, %d, %s",  v39,  28,  v32.__r_.__value_.__l.__data_);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable(const char *const)",  "%s\n",  v31);
      if (v31 != v40) {
        free(v31);
      }
    }

    sub_1002920DC();
    int v22 = 0;
  }

  __int16 v28 = (sqlite3_stmt *)sub_100019240(v19);
  sqlite3_reset(v28);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v24 = v22 & ~(v22 >> 31);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return v24;
}

void sub_1000254B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *__p, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
  }
  if (a49 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000255A4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = (uint64_t)(a1 + 9);
  if (sub_1003C1048((uint64_t)(a1 + 9)))
  {
    v36[0] = a2;
    v36[1] = (uint64_t)a1;
    sub_1000244B4((uint64_t)a1, (uint64_t)buf);
    if (a1[27])
    {
      BOOL v9 = sub_100025CF0(v36, (char *)&xmmword_101993860);
      BOOL v10 = v9;
      if (!a1[29] || (BOOL v9 = 0, !v10))
      {
LABEL_15:
        uint64_t v13 = a1[28];
        if (v13) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v9;
        }
        if (v13 && v9) {
          BOOL v14 = sub_100025CF0(v36, (char *)&xmmword_101993890);
        }
        uint64_t v15 = a1[26];
        if (v15) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v14;
        }
        if (v15 && v14) {
          BOOL v16 = sub_100025CF0(v36, (char *)&xmmword_1019938A8);
        }
        uint64_t v17 = a1[32];
        if (v17) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v16;
        }
        if (v17 && v16) {
          BOOL v18 = sub_100025CF0(v36, (char *)&xmmword_1019938C0);
        }
        uint64_t v19 = a1[30];
        if (v19) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18;
        }
        if (v19)
        {
          if (v18)
          {
            BOOL v20 = sub_100025CF0(v36, (char *)&xmmword_1019938D8);
            BOOL v21 = v20;
            if (a4)
            {
              BOOL v20 = 0;
              if (v21) {
                BOOL v20 = sub_100026250((uint64_t)a1, a3);
              }
            }
          }
        }

        uint64_t v22 = a1[31];
        if (v22) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20;
        }
        if (v22 && v20) {
          BOOL v23 = sub_100025CF0(v36, (char *)&xmmword_1019938F0);
        }
        uint64_t v24 = a1[33];
        if (v24) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v23;
        }
        if (v24 && v23) {
          BOOL v25 = sub_100025CF0(v36, (char *)&xmmword_101993908);
        }
        uint64_t v26 = a1[34];
        if (v26) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v25;
        }
        if (v26 && v25) {
          BOOL v27 = sub_100025CF0(v36, (char *)&xmmword_101993920);
        }
        uint64_t v28 = a1[35];
        if (v28) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v27;
        }
        if (v28 && v27) {
          BOOL v29 = sub_100025CF0(v36, (char *)&xmmword_101993938);
        }
        uint64_t v30 = a1[36];
        if (v30) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v29;
        }
        if (v30 && v29) {
          BOOL v31 = sub_100025CF0(v36, (char *)&xmmword_101993950);
        }
        uint64_t v32 = a1[37];
        if (v32) {
          uint64_t v12 = 0LL;
        }
        else {
          uint64_t v12 = v31;
        }
        if (v32 && v31) {
          uint64_t v12 = sub_100025CF0(v36, (char *)&xmmword_101993968);
        }
        else {
          uint64_t v33 = a1[20];
        }
        sub_1003C1EC0(v8, v33);
        sub_100A112B4(buf);
        return v12;
      }
    }

    else if (!a1[29])
    {
      BOOL v9 = 1;
      goto LABEL_15;
    }

    BOOL v9 = sub_100025CF0(v36, (char *)&xmmword_101993878);
    goto LABEL_15;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  __int128 v11 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to deleteDataOlderThan without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    LOWORD(v36[0]) = 0;
    std::string v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to deleteDataOlderThan without a backing database",  v36,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)",  "%s\n",  v35);
  }

  return 0LL;
}

#error "100025C6C: call analysis failed (funcsize=179)"
BOOL sub_100025CF0(uint64_t *a1, char *a2)
{
  uint64_t v4;
  double Current_1;
  uint64_t v6;
  double v7;
  os_log_s *v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  os_log_s *v15;
  char *v16;
  BOOL v17;
  os_log_s *v19;
  double v20;
  char *v21;
  double v22;
  char *v23;
  char *v24;
  int v25;
  double v26;
  _BYTE buf[1632];
  uint64_t v4 = a1[1];
  Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  uint64_t v6 = *a1;
  __int128 v7 = j__CFAbsoluteTimeGetCurrent_1();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = (double)*a1 / 1440.0;
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Deleting microlocation data older than %.3Lf days",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v20 = (double)*a1 / 1440.0;
    BOOL v25 = 134217984;
    uint64_t v26 = v20;
    BOOL v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Deleting microlocation data older than %.3Lf days",  COERCE_LONG_DOUBLE(&v25));
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)::(ano nymous class)::operator()(const std::string &) const",  "%s\n",  v21);
    if (v21 != buf) {
      free(v21);
    }
  }

  BOOL v10 = v4 + 72;
  if (a2[23] >= 0) {
    __int128 v11 = a2;
  }
  else {
    __int128 v11 = *(char **)a2;
  }
  sub_1003C0D54(v4 + 72, v11, buf);
  uint64_t v12 = *(void *)buf;
  uint64_t v13 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  BOOL v14 = v13;
  if (v13)
  {
    if (!sub_1003B7480(v13, 1, Current_1 + (double)v6 * -60.0) || !sub_1003B7480(v14, 2, v7 + 30.0))
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      uint64_t v15 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (a2[23] >= 0) {
          BOOL v16 = a2;
        }
        else {
          BOOL v16 = *(char **)a2;
        }
        *(_DWORD *)buf = 136380675;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Error binding to statement for sql %{private}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819198);
        }
        if (a2[23] >= 0) {
          uint64_t v22 = *(double *)&a2;
        }
        else {
          uint64_t v22 = *(double *)a2;
        }
        BOOL v25 = 136380675;
        uint64_t v26 = v22;
        BOOL v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error binding to statement for sql %{private}s",  &v25,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>):: (anonymous class)::operator()(const std::string &) const",  "%s\n",  v23);
        if (v23 != buf) {
          free(v23);
        }
      }
    }

    uint64_t v17 = sub_1003BB2BC(v10, v14);
    if (v12) {
LABEL_21:
    }
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v19 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Error getting a prepared statement", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v25) = 0;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v25,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)::(a nonymous class)::operator()(const std::string &) const",  "%s\n",  v24);
      if (v24 != buf) {
        free(v24);
      }
    }

    uint64_t v17 = 0LL;
    if (v12) {
      goto LABEL_21;
    }
  }

  return v17;
}

void sub_100026220(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100026250(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    double v5 = (double)a2;
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v5 / 1440.0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Deleting similarity list labels older than %.3Lf days",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v22 = 134217984;
      double v23 = v5 / 1440.0;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Deleting similarity list labels older than %.3Lf days",  COERCE_LONG_DOUBLE(&v22));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)",  "%s\n",  v17);
      if (v17 != buf) {
        free(v17);
      }
    }

    if (byte_1019939DF >= 0) {
      __int128 v7 = (char *)&xmmword_1019939C8;
    }
    else {
      __int128 v7 = (char *)xmmword_1019939C8;
    }
    sub_1003C0D54(v3, v7, buf);
    uint64_t v8 = *(void *)buf;
    BOOL v9 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
    BOOL v10 = v9;
    if (v9)
    {
      if (!sub_1003B7480(v9, 1, Current_1 + v5 * -60.0) || !sub_1003B7480(v10, 2, Current_1 + 30.0))
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819198);
        }
        __int128 v11 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          if (byte_1019939DF >= 0) {
            uint64_t v12 = &xmmword_1019939C8;
          }
          else {
            uint64_t v12 = (__int128 *)xmmword_1019939C8;
          }
          *(_DWORD *)buf = 136380675;
          *(void *)&uint8_t buf[4] = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Error binding to statement for sql %{private}s",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101819198);
          }
          if (byte_1019939DF >= 0) {
            uint64_t v19 = &xmmword_1019939C8;
          }
          else {
            uint64_t v19 = (__int128 *)xmmword_1019939C8;
          }
          int v22 = 136380675;
          double v23 = *(double *)&v19;
          BOOL v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error binding to statement for sql %{private}s",  &v22,  12);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)",  "%s\n",  v20);
          if (v20 != buf) {
            free(v20);
          }
        }
      }

      BOOL v13 = sub_1003BB2BC(v3, v10);
      if (!v8) {
        return v13;
      }
LABEL_35:
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
      return v13;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v15 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Error getting a prepared statement", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v22) = 0;
      BOOL v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v22,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)",  "%s\n",  v21);
      if (v21 != buf) {
        free(v21);
      }
    }

    BOOL v13 = 0LL;
    if (v8) {
      goto LABEL_35;
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to purgeSimilarityListLabels without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v22) = 0;
      BOOL v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to purgeSimilarityListLabels without a backing database",  &v22,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)",  "%s\n",  v18);
      if (v18 != buf) {
        free(v18);
      }
    }

    return 0LL;
  }

  return v13;
}

void sub_100026898(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000268C8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    __int128 v7 = *(void **)(a1 + 224);
    if (!v7)
    {
      __int128 v7 = operator new(0x10uLL);
      sub_1001519B8((uint64_t)v7, v6);
      uint64_t v8 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v7;
      if (v8)
      {
        operator delete(v8);
        __int128 v7 = *(void **)(a1 + 224);
      }
    }

    BOOL v9 = sub_100154A5C((uint64_t)v7, a2, a3);
    else {
      uint64_t v10 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(v6, v10);
    return v9;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to deleteUnneededModels without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      v14[0] = 0;
      BOOL v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to deleteUnneededModels without a backing database",  v14,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::deleteUnneededModels(uint32_t, uint32_t)",  "%s\n",  v13);
    }

    return 0LL;
  }

void sub_100026AF0(_Unwind_Exception *a1)
{
}

void sub_100026B0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_100026B80();
  sub_100026C58( a1,  (void (*)(char *, uint64_t, uint64_t, uint64_t, void))sub_1000C9B1C,  0LL,  a2,  a3,  a4,  &v10,  a5);
}

uint64_t sub_100026B80()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsDatabaseSelectionLimit", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 5000LL;
  }
}

void sub_100026C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100026C58( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    BOOL v16 = *(char **)(a1 + 216);
    if (!v16)
    {
      BOOL v16 = (char *)operator new(0x10uLL);
      sub_1000C8AE8((uint64_t)v16, v15);
      uint64_t v17 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v16;
      if (v17)
      {
        operator delete(v17);
        BOOL v16 = *(char **)(a1 + 216);
      }
    }

    BOOL v18 = &v16[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v18 + a2);
    }
    else {
      uint64_t v19 = a2;
    }
    v19(v18, a4, a5, a6, *a7);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uu"
            "ids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, co"
            "nst std::string &, const std::string &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v23 = 136446210;
      uint64_t v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uu"
            "ids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, co"
            "nst std::string &, const std::string &, unsigned int &>]";
      BOOL v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v23,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uuids::uui d &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, const std::str ing &, const std::string &, unsigned int &>]",  "%s\n",  v21);
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_100026EE8(_Unwind_Exception *a1)
{
}

void sub_100026F04( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  v11[0] = a3;
  v11[1] = a4;
  double v10 = a6;
  unsigned int v9 = sub_100026B80();
  sub_10002702C( a1,  (void (*)(char *, uint64_t, void, void, void, double))sub_100010160,  0LL,  a2,  v11,  &v9,  &v10,  a5);
}

void sub_100026FB8( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, void *a6@<X8>, double a7@<D0>)
{
  v9[0] = a3;
  v9[1] = a4;
  double v8 = a7;
  unsigned int v7 = a5;
  sub_10002702C( a1,  (void (*)(char *, uint64_t, void, void, void, double))sub_100010160,  0LL,  a2,  v9,  &v7,  &v8,  a6);
}

void sub_10002702C( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void, void, void, double)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, unsigned int *a6@<X5>, double *a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    BOOL v16 = *(char **)(a1 + 240);
    if (!v16)
    {
      BOOL v16 = (char *)operator new(0x10uLL);
      sub_10000D870((uint64_t)v16, v15);
      uint64_t v17 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v16;
      if (v17)
      {
        operator delete(v17);
        BOOL v16 = *(char **)(a1 + 240);
      }
    }

    BOOL v18 = &v16[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v19 = *(void (**)(char *, uint64_t, void, void, void, double))(*(void *)v18 + a2);
    }
    else {
      uint64_t v19 = a2;
    }
    v19(v18, a4, *a5, a5[1], *a6, *a7);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,"
            " std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, st"
            "d::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v23 = 136446210;
      uint64_t v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,"
            " std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, st"
            "d::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]";
      BOOL v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v23,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberF n = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(const std:: string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono ::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, std::chrono::time_ point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]",  "%s\n",  v21);
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_1000272BC(_Unwind_Exception *a1)
{
}

void sub_1000272D8( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 240);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_10000D870((uint64_t)v12, v11);
      BOOL v13 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 240);
      }
    }

    BOOL v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, unsigned int), Args = <const std::string &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v20 = 136446210;
      BOOL v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, unsigned int), Args = <const std::string &, unsigned int &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v20,  12);
      BOOL v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberF n = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(const std:: string &, unsigned int), Args = <const std::string &, unsigned int &>]",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_10002754C(_Unwind_Exception *a1)
{
}

uint64_t sub_100027568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    *(_DWORD *)buf = sub_100026B80();
    sub_1000272D8(a1, (void (*)(char *, uint64_t, void))sub_10000FD10, 0LL, a2, (unsigned int *)buf, v21);
    BOOL v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    std::string __p = 0LL;
    BOOL v16 = 0LL;
    uint64_t v17 = 0LL;
    unint64_t v5 = (_OWORD *)v21[0];
    uint64_t v6 = (_OWORD *)v21[1];
    v14[0] = &v18;
    while (v5 != v6)
    {
      *(_OWORD *)buf = *v5;
      sub_100036F40(v14, buf);
      v5 += 4;
    }

    *(_DWORD *)buf = sub_100026B80();
    sub_10002A1F0( a1,  (void (*)(char *, uint64_t, void))sub_100143788,  0LL,  (uint64_t)&v18,  (unsigned int *)buf,  v14);
    double v10 = v14[0];
    uint64_t v11 = v14[1];
    *(void *)&__int128 __dst = &__p;
    while (v10 != v11)
    {
      *(_OWORD *)buf = *(_OWORD *)v10;
      sub_100036F40((void ***)&__dst, buf);
      v10 += 30;
    }

    sub_1000244B4(a1, (uint64_t)buf);
    if (sub_100027DEC(a1, (uint64_t (*)(char *, uint64_t))sub_1000CB544, 0LL, (uint64_t)&__p)
      && sub_100028038(a1, (uint64_t (*)(char *, uint64_t))sub_100144B98, 0LL, (uint64_t)&__p))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1010DD48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
      }

      else
      {
        __int128 __dst = *(_OWORD *)a2;
        uint64_t v28 = *(void *)(a2 + 16);
      }

      *((void *)&v29 + 1) = 0LL;
      uint64_t v30 = 0LL;
      uint64_t v31 = 0LL;
      int v22 = (void **)&v29 + 1;
      char v23 = 0;
      *((void *)&v29 + 1) = operator new(0x18uLL);
      uint64_t v30 = (char *)*((void *)&v29 + 1);
      uint64_t v31 = *((void *)&v29 + 1) + 24LL;
      uint64_t v30 = sub_100036E0C((uint64_t)&v31, &__dst, &v29, *((char **)&v29 + 1));
      uint64_t v8 = sub_100028284(a1, (uint64_t (*)(char *, uint64_t))sub_100011308, 0LL, (uint64_t)&v29 + 8);
      int v22 = (void **)&v29 + 1;
      sub_1000129D4(&v22);
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)__dst);
      }
      if ((_DWORD)v8)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1010DD48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
        }

        else
        {
          __int128 __dst = *(_OWORD *)a2;
          uint64_t v28 = *(void *)(a2 + 16);
        }

        *((void *)&v29 + 1) = 0LL;
        uint64_t v30 = 0LL;
        uint64_t v31 = 0LL;
        int v22 = (void **)&v29 + 1;
        char v23 = 0;
        *((void *)&v29 + 1) = operator new(0x18uLL);
        uint64_t v30 = (char *)*((void *)&v29 + 1);
        uint64_t v31 = *((void *)&v29 + 1) + 24LL;
        uint64_t v30 = sub_100036E0C((uint64_t)&v31, &__dst, &v29, *((char **)&v29 + 1));
        uint64_t v8 = sub_1000284D0(a1, (uint64_t (*)(char *, uint64_t))sub_1001574C4, 0LL, (uint64_t)&v29 + 8);
        int v22 = (void **)&v29 + 1;
        sub_1000129D4(&v22);
        if (SHIBYTE(v28) < 0) {
          operator delete((void *)__dst);
        }
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    else {
      uint64_t v12 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(v4, v12);
    sub_100A112B4(buf);
    *(void *)buf = v14;
    sub_10001A350((void ***)buf);
    if (__p)
    {
      BOOL v16 = __p;
      operator delete(__p);
    }

    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }

    *(void *)buf = v21;
    sub_100012948((void ***)buf);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unsigned int v7 = (os_log_s *)qword_1019348D8;
    uint64_t v8 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      else {
        unsigned int v9 = *(void **)a2;
      }
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v25 = 2081;
      uint64_t v26 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Attempt to purge data for client without a backing database, clientId:%{pr ivate, location:escape_only}s}",  buf,  0x1Cu);
      return 0LL;
    }
  }

  return v8;
}

#error "100027CBC: call analysis failed (funcsize=200)"
void sub_100027D90(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6;
  uint64_t v6 = sub_100026B80();
  sub_10002A1F0(a1, (void (*)(char *, uint64_t, void))sub_100143788, 0LL, a2, &v6, a3);
}

uint64_t sub_100027DEC(uint64_t a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v8 = *(char **)(a1 + 216);
    if (!v8)
    {
      uint64_t v8 = (char *)operator new(0x10uLL);
      sub_1000C8AE8((uint64_t)v8, v7);
      unsigned int v9 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v8;
      if (v9)
      {
        operator delete(v9);
        uint64_t v8 = *(char **)(a1 + 216);
      }
    }

    double v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(*(void *)v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to delete entries without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to delete entries without a backing database",  v17,  2);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, Memb erFn = BOOL (CLMicroLocationMeasurementTable::*)(const std::vector<boost::uuids::uuid> &), Args = <std::vector<b oost::uuids::uuid> &>]",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 0LL;
  }

void sub_10002801C(_Unwind_Exception *a1)
{
}

uint64_t sub_100028038(uint64_t a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v8 = *(char **)(a1 + 232);
    if (!v8)
    {
      uint64_t v8 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v8, v7);
      unsigned int v9 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v8;
      if (v9)
      {
        operator delete(v9);
        uint64_t v8 = *(char **)(a1 + 232);
      }
    }

    double v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(*(void *)v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to delete entries without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to delete entries without a backing database",  v17,  2);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = BOOL (CLMicroLocationRecordingEventsTable::*)(const std::vector<boost::uuids::uuid> &), Args = <std:: vector<boost::uuids::uuid> &>]",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 0LL;
  }

void sub_100028268(_Unwind_Exception *a1)
{
}

uint64_t sub_100028284(uint64_t a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v8 = *(char **)(a1 + 240);
    if (!v8)
    {
      uint64_t v8 = (char *)operator new(0x10uLL);
      sub_10000D870((uint64_t)v8, v7);
      unsigned int v9 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v8;
      if (v9)
      {
        operator delete(v9);
        uint64_t v8 = *(char **)(a1 + 240);
      }
    }

    double v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(*(void *)v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to delete entries without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to delete entries without a backing database",  v17,  2);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = BOOL (CLMicroLocationRecordingLabelsTable::*)(const std::vector<std::string> &), Args = <std::vector<std::string>>]",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 0LL;
  }

void sub_1000284B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000284D0(uint64_t a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v8 = *(char **)(a1 + 224);
    if (!v8)
    {
      uint64_t v8 = (char *)operator new(0x10uLL);
      sub_1001519B8((uint64_t)v8, v7);
      unsigned int v9 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v8;
      if (v9)
      {
        operator delete(v9);
        uint64_t v8 = *(char **)(a1 + 224);
      }
    }

    double v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(*(void *)v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to delete entries without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      v17[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to delete entries without a backing database",  v17,  2);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = BOOL (CLMicroLocationModelTable::*)(const std::vector<std::string> &), Args = <std::vector<std::string>>]",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 0LL;
  }

void sub_100028700(_Unwind_Exception *a1)
{
}

void sub_10002871C(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = sub_100026B80();
  sub_100028768(a1, (void (*)(char *, void))sub_10000F51C, 0LL, &v4, a2);
}

void sub_100028768( uint64_t a1@<X0>, void (*a2)(char *, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    double v10 = *(char **)(a1 + 240);
    if (!v10)
    {
      double v10 = (char *)operator new(0x10uLL);
      sub_10000D870((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v10;
      if (v11)
      {
        operator delete(v11);
        double v10 = *(char **)(a1 + 240);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      BOOL v13 = *(void (**)(char *, void))(*(void *)v12 + a2);
    }
    else {
      BOOL v13 = a2;
    }
    v13(v12, *a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      BOOL v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberF n = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]",  "%s\n",  v15);
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_1000289D4(_Unwind_Exception *a1)
{
}

void sub_1000289F0(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  v6[0] = a3;
  v6[1] = a4;
  unsigned int v5 = a2;
  sub_100028A54(a1, (void (*)(char *, void, void, void))sub_10015335C, 0LL, &v5, v6, a5);
}

void sub_100028A54( uint64_t a1@<X0>, void (*a2)(char *, void, void, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 224);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_1001519B8((uint64_t)v12, v11);
      BOOL v13 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 224);
      }
    }

    BOOL v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, void, void, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, *a4, *a5, a5[1]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::o ptional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_ModelType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]",  "%s\n",  v17);
    }

    *a6 = 0;
    a6[280] = 0;
  }

void sub_100028CC8(_Unwind_Exception *a1)
{
}

void sub_100028CE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  v5[0] = a3;
  v5[1] = a4;
  sub_100028D48(a1, (void (*)(char *, uint64_t, void, void))sub_100153510, 0LL, a2, v5, a5);
}

void sub_100028D48( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 224);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_1001519B8((uint64_t)v12, v11);
      BOOL v13 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 224);
      }
    }

    BOOL v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5, a5[1]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uui"
            "ds::uuid), Args = <const std::string &, boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uui"
            "ds::uuid), Args = <const std::string &, boost::uuids::uuid &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::o ptional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uuids::uuid), Args = <const std::string &, boost::uuids::uuid &>]",  "%s\n",  v17);
    }

    *a6 = 0;
    a6[280] = 0;
  }

void sub_100028FBC(_Unwind_Exception *a1)
{
}

void sub_100028FD8( uint64_t a1@<X0>, unsigned int a2@<W1>, __int128 *a3@<X2>, __int128 *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned int v5 = a2;
  sub_100029010(a1, (void (*)(char *, uint64_t, void **, __int128 *))sub_100152C50, 0LL, &v5, a3, a4, a5);
}

void sub_100029010( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void **, __int128 *)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v14 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v15 = *(char **)(a1 + 224);
    if (!v15)
    {
      uint64_t v15 = (char *)operator new(0x10uLL);
      sub_1001519B8((uint64_t)v15, v14);
      BOOL v16 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v15;
      if (v16)
      {
        operator delete(v16);
        uint64_t v15 = *(char **)(a1 + 224);
      }
    }

    if ((a3 & 1) != 0) {
      a2 = *(void (**)(char *, uint64_t, void **, __int128 *))(*(void *)&v15[a3 >> 1] + a2);
    }
    uint64_t v17 = *a4;
    sub_100036D0C((uint64_t)__p, a5);
    __int128 v23 = *a6;
    char v24 = *((_BYTE *)a6 + 16);
    a2(&v15[a3 >> 1], v17, __p, &v23);
    if (v22)
    {
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    BOOL v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v28 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::"
            "Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v25 = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::"
            "Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]";
      int v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v25,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::o ptional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_ModelType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::Model_ModelT ype &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]",  "%s\n",  v19);
    }

    *a7 = 0;
    a7[280] = 0;
  }

void sub_100029298( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_1000292D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  v5[0] = a3;
  v5[1] = a4;
  sub_100028D48(a1, (void (*)(char *, uint64_t, void, void))sub_10015365C, 0LL, a2, v5, a5);
}

void sub_100029334(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4 = sub_100026B80();
  unsigned int v11 = v4;
  if (v4)
  {
    unsigned int v5 = v4;
    sub_100029628(a1, (void (*)(char *))sub_10014844C, 0LL, buf);
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    if (v16)
    {
      unsigned int v10 = v5 - 1;
      sub_10002989C(a1, (void (*)(char *, void))sub_100054D00, 0LL, &v10, &v8);
      sub_1000370F8(a2);
      *(_OWORD *)a2 = v8;
      a2[2] = v9;
      uint64_t v9 = 0LL;
      __int128 v8 = 0uLL;
      uint64_t v12 = (void **)&v8;
      sub_10003706C(&v12);
      if (!v16) {
        sub_100036CD8();
      }
      sub_100029B24(a2, *a2, (unint64_t)buf);
    }

    else
    {
      sub_100029C7C(a1, (void (*)(char *, void))sub_100054D00, 0LL, &v11, &v8);
      sub_1000370F8(a2);
      *(_OWORD *)a2 = v8;
      a2[2] = v9;
      uint64_t v9 = 0LL;
      __int128 v8 = 0uLL;
      uint64_t v12 = (void **)&v8;
      sub_10003706C(&v12);
    }

    if (v16)
    {
      if (v15 < 0) {
        operator delete(__p);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Database selection limit is not positive. Not selecting LOI Groups",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v8) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Database selection limit is not positive. Not selecting LOI Groups",  &v8,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "std::vector<CLMiLoLoiTable::Entry> CLMicroLocationDatabase::selectAllLoiGroups()",  "%s\n",  v7);
    }

    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

void sub_1000295E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, char a28)
{
  if (a28)
  {
    if (a27 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(a1);
}

void sub_100029628(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    __int128 v8 = *(char **)(a1 + 232);
    if (!v8)
    {
      __int128 v8 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v8, v7);
      uint64_t v9 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v8;
      if (v9)
      {
        operator delete(v9);
        __int128 v8 = *(char **)(a1 + 232);
      }
    }

    unsigned int v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      (*(void (**)(char *))(*(void *)v10 + a2))(v10);
    }
    else {
      a2(v10);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unsigned int v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v14 = 136446210;
      char v15 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v14,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]",  "%s\n",  v12);
    }

    *a4 = 0;
    a4[64] = 0;
  }

void sub_100029880(_Unwind_Exception *a1)
{
}

void sub_10002989C( uint64_t a1@<X0>, void (*a2)(char *, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 280);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v10, v9);
      unsigned int v11 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 280);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      BOOL v13 = *(void (**)(char *, void))(*(void *)v12 + a2);
    }
    else {
      BOOL v13 = a2;
    }
    v13(v12, *a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      BOOL v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]";
      char v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiL oLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]",  "%s\n",  v15);
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_100029B08(_Unwind_Exception *a1)
{
}

unint64_t sub_100029B24(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (a2 - *a1) >> 6;
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v14 = ((uint64_t)(v6 - v7) >> 6) + 1;
    if (v14 >> 58) {
      sub_100007008();
    }
    uint64_t v15 = v10 - v7;
    if (v15 >> 5 > v14) {
      unint64_t v14 = v15 >> 5;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v23 = v9;
    if (v16) {
      int v17 = (char *)sub_10001275C(v9, v16);
    }
    else {
      int v17 = 0LL;
    }
    int v19 = v17;
    uint64_t v20 = &v17[64 * v8];
    char v21 = v20;
    char v22 = &v17[64 * v16];
    sub_100037224(&v19, (__int128 *)a3);
    unint64_t v4 = sub_100037394((uint64_t)a1, &v19, (__int128 *)v4);
    sub_1000377A0((uint64_t)&v19);
  }

  else if (a2 == v6)
  {
    sub_100037130((uint64_t)a1, (__int128 *)a3);
  }

  else
  {
    sub_1000371A0((uint64_t)a1, a2, v6, a2 + 64);
    if (v4 <= a3) {
      a3 += (unint64_t)(a1[1] > a3) << 6;
    }
    __int128 v12 = *(_OWORD *)a3;
    __int128 v13 = *(_OWORD *)(a3 + 16);
    *(void *)(v4 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)unint64_t v4 = v12;
    *(_OWORD *)(v4 + 16) = v13;
    std::string::operator=((std::string *)(v7 + (v8 << 6) + 40), (const std::string *)(a3 + 40));
  }

  return v4;
}

void sub_100029C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100029C7C( uint64_t a1@<X0>, void (*a2)(char *, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unint64_t v10 = *(char **)(a1 + 280);
    if (!v10)
    {
      unint64_t v10 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v10, v9);
      unint64_t v11 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v10;
      if (v11)
      {
        operator delete(v11);
        unint64_t v10 = *(char **)(a1 + 280);
      }
    }

    __int128 v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      __int128 v13 = *(void (**)(char *, void))(*(void *)v12 + a2);
    }
    else {
      __int128 v13 = a2;
    }
    v13(v12, *a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unint64_t v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      BOOL v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiL oLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]",  "%s\n",  v15);
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_100029EE8(_Unwind_Exception *a1)
{
}

void sub_100029F04(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_100026B80();
  sub_100029F60(a1, (void (*)(char *, uint64_t, void))sub_1000CA600, 0LL, a2, &v6, a3);
}

void sub_100029F60( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    __int128 v12 = *(char **)(a1 + 216);
    if (!v12)
    {
      __int128 v12 = (char *)operator new(0x10uLL);
      sub_1000C8AE8((uint64_t)v12, v11);
      __int128 v13 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v12;
      if (v13)
      {
        operator delete(v13);
        __int128 v12 = *(char **)(a1 + 216);
      }
    }

    unint64_t v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vect"
            "or<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vect"
            "or<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vector<boost ::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]",  "%s\n",  v17);
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_10002A1D4(_Unwind_Exception *a1)
{
}

void sub_10002A1F0( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    __int128 v12 = *(char **)(a1 + 232);
    if (!v12)
    {
      __int128 v12 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v12, v11);
      __int128 v13 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v12;
      if (v13)
      {
        operator delete(v13);
        __int128 v12 = *(char **)(a1 + 232);
      }
    }

    unint64_t v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std:: vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]",  "%s\n",  v17);
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_10002A464(_Unwind_Exception *a1)
{
}

void sub_10002A480(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_100026B80();
  sub_10002A1F0(a1, (void (*)(char *, uint64_t, void))sub_100144190, 0LL, a2, &v6, a3);
}

void sub_10002A4DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  CFStringRef v10 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLearningRecordingLimit", 0x8000100u, kCFAllocatorNull);
  int v11 = sub_1002A77CC(v18, (uint64_t)v10, &v17);
  CFRelease(v10);
  int v12 = v17;
  __int128 v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (v11) {
    int v16 = v12;
  }
  else {
    int v16 = 500;
  }
  __int128 v20 = *(_OWORD *)a4;
  char v21 = *(_BYTE *)(a4 + 16);
  LODWORD(v18) = v16;
  sub_10002A678( a1,  (void (*)(char *, uint64_t, uint64_t, uint64_t, __int128 *))sub_1001456BC,  0LL,  a2,  (unsigned int *)&v18,  a3,  &v20,  a5);
}

void sub_10002A628( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_10002A678( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, uint64_t, __int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, void *a8@<X8>)
{
  uint64_t v16 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    int v17 = *(char **)(a1 + 232);
    if (!v17)
    {
      int v17 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v17, v16);
      uint64_t v18 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v17;
      if (v18)
      {
        operator delete(v18);
        int v17 = *(char **)(a1 + 232);
      }
    }

    int v19 = &v17[a3 >> 1];
    if ((a3 & 1) != 0) {
      a2 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __int128 *))(*(void *)v19 + a2);
    }
    uint64_t v20 = *a5;
    __int128 v23 = *a7;
    char v24 = *((_BYTE *)a7 + 16);
    a2(v19, a4, v20, a6, &v23);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    char v21 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v28 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::u"
            "uids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::strin"
            "g &, std::optional<boost::uuids::uuid> &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v25 = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::u"
            "uids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::strin"
            "g &, std::optional<boost::uuids::uuid> &>]";
      char v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v25,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std:: vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::uuids::uuid>) , Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::string &, std::option al<boost::uuids::uuid> &>]",  "%s\n",  v22);
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_10002A8DC(_Unwind_Exception *a1)
{
}

void sub_10002A8F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_100026B80();
  sub_10002A96C( a1,  (void (*)(char *, uint64_t, uint64_t, uint64_t, void))sub_100147AAC,  0LL,  a2,  a3,  a4,  &v10,  a5);
}

void sub_10002A96C( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v16 = *(char **)(a1 + 232);
    if (!v16)
    {
      uint64_t v16 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v16, v15);
      int v17 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v16;
      if (v17)
      {
        operator delete(v17);
        uint64_t v16 = *(char **)(a1 + 232);
      }
    }

    uint64_t v18 = &v16[a3 >> 1];
    if ((a3 & 1) != 0) {
      int v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v18 + a2);
    }
    else {
      int v19 = a2;
    }
    v19(v18, a4, a5, a6, *a7);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string "
            "&, const std::string &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v23 = 136446210;
      char v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string "
            "&, const std::string &, const boost::uuids::uuid &, unsigned int &>]";
      char v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v23,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std:: string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string &, const std ::string &, const boost::uuids::uuid &, unsigned int &>]",  "%s\n",  v21);
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_10002ABFC(_Unwind_Exception *a1)
{
}

void sub_10002AC18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void sub_10002AC34( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unint64_t v14 = *(char **)(a1 + 232);
    if (!v14)
    {
      unint64_t v14 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v14, v13);
      uint64_t v15 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v14;
      if (v15)
      {
        operator delete(v15);
        unint64_t v14 = *(char **)(a1 + 232);
      }
    }

    uint64_t v16 = &v14[a3 >> 1];
    if ((a3 & 1) != 0) {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)v16 + a2))(v16, a4, a5, a6);
    }
    else {
      a2(v16, a4, a5, a6);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v17 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const "
            "std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v20 = 136446210;
      char v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const "
            "std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]";
      uint64_t v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v20,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std:: vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const std::vector< CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]",  "%s\n",  v18);
    }

    *a7 = 0LL;
    a7[1] = 0LL;
    a7[2] = 0LL;
  }

void sub_10002AEBC(_Unwind_Exception *a1)
{
}

double sub_10002AED8(uint64_t a1)
{
  return sub_10002AEE8(a1, (double (*)(char *))sub_1001480C8, 0LL);
}

double sub_10002AEE8(uint64_t a1, double (*a2)(char *), uint64_t a3)
{
  uint64_t v6 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v7 = *(char **)(a1 + 232);
    if (!v7)
    {
      uint64_t v7 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v7, v6);
      uint64_t v8 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v7;
      if (v8)
      {
        operator delete(v8);
        uint64_t v7 = *(char **)(a1 + 232);
      }
    }

    uint64_t v9 = &v7[a3 >> 1];
    if ((a3 & 1) != 0) {
      a2 = *(double (**)(char *))(*(void *)v9 + a2);
    }
    return a2(v9);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicr"
            "oLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    double v10 = 0.0;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v14 = 136446210;
      uint64_t v15 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicr"
            "oLocationRecordingEventsTable::*)(), Args = <>]";
      uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v14,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicroLocatio nRecordingEventsTable::*)(), Args = <>]",  "%s\n",  v13);
    }
  }

  return v10;
}

void sub_10002B110(_Unwind_Exception *a1)
{
}

void sub_10002B12C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_100026B80();
  sub_10002B1A0( a1,  (void (*)(char *, uint64_t, uint64_t, uint64_t, void))sub_100136220,  0LL,  a2,  a3,  a4,  &v10,  a5);
}

void sub_10002B1A0( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v16 = *(char **)(a1 + 248);
    if (!v16)
    {
      uint64_t v16 = (char *)operator new(0x10uLL);
      sub_1001347E4((uint64_t)v16, v15);
      int v17 = *(void **)(a1 + 248);
      *(void *)(a1 + 248) = v16;
      if (v17)
      {
        operator delete(v17);
        uint64_t v16 = *(char **)(a1 + 248);
      }
    }

    uint64_t v18 = &v16[a3 >> 1];
    if ((a3 & 1) != 0) {
      int v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v18 + a2);
    }
    else {
      int v19 = a2;
    }
    v19(v18, a4, a5, a6, *a7);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::s"
            "tring &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <c"
            "onst std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v23 = 136446210;
      char v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::s"
            "tring &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <c"
            "onst std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]";
      char v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v23,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, MemberFn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <const std::st ring &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]",  "%s\n",  v21);
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_10002B430(_Unwind_Exception *a1)
{
}

void sub_10002B44C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
}

void sub_10002B464( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    int v12 = *(char **)(a1 + 248);
    if (!v12)
    {
      int v12 = (char *)operator new(0x10uLL);
      sub_1001347E4((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 248);
      *(void *)(a1 + 248) = v12;
      if (v13)
      {
        operator delete(v13);
        int v12 = *(char **)(a1 + 248);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v14 + a2))(v14, a4, a5);
    }
    else {
      a2(v14, a4, a5);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v15 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std:"
            ":string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::ve"
            "ctor<CLMicroLocationProto::EventType> &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v18 = 136446210;
      int v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std:"
            ":string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::ve"
            "ctor<CLMicroLocationProto::EventType> &>]";
      uint64_t v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v18,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, MemberFn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::vector<CLMicro LocationProto::EventType> &>]",  "%s\n",  v16);
    }

    *a6 = 0;
    a6[336] = 0;
  }

void sub_10002B6D8(_Unwind_Exception *a1)
{
}

void sub_10002B6F4(uint64_t a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  int v3 = 1;
  sub_10002B734(a1, (void (*)(char *, uint64_t, _BYTE *, __int128 *))sub_10004ED7C, 0LL, (uint64_t)&v3, a2, a3);
}

void sub_10002B734( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, _BYTE *, __int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X5>, _BYTE *a6@<X8>)
{
  uint64_t v12 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v13 = *(char **)(a1 + 208);
    if (!v13)
    {
      uint64_t v13 = (char *)operator new(0x10uLL);
      sub_10004D434((uint64_t)v13, v12);
      int v14 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v13;
      if (v14)
      {
        operator delete(v14);
        uint64_t v13 = *(char **)(a1 + 208);
      }
    }

    uint64_t v15 = &v13[a3 >> 1];
    if ((a3 & 1) != 0) {
      a2 = *(void (**)(char *, uint64_t, _BYTE *, __int128 *))(*(void *)v15 + a2);
    }
    __p[0] = 0;
    char v22 = 0;
    __int128 v18 = *a5;
    char v19 = 1;
    a2(v15, a4, __p, &v18);
    if (v22)
    {
      if (v21 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<c"
                           "onst std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocatio"
                           "nProto::ConfigurationType, const std::nullopt_t &, const boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LODWORD(v18) = 136446210;
      *(void *)((char *)&v18 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::E"
                                      "ntry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::Configura"
                                      "tionType &, const std::optional<const std::string> &, const std::optional<const bo"
                                      "ost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::"
                                      "nullopt_t &, const boost::uuids::uuid &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v18,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const CLMicroLo cationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uui ds::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::nullopt_t &, const boost::uuids::uuid &>]",  "%s\n",  v17);
      if (v17 != __p) {
        free(v17);
      }
    }

    *a6 = 0;
    a6[112] = 0;
  }

void sub_10002B9AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

void sub_10002B9E4(uint64_t a1@<X0>, __int128 *a2@<X1>, _BYTE *a3@<X8>)
{
  int v3 = 0;
  sub_10002B734(a1, (void (*)(char *, uint64_t, _BYTE *, __int128 *))sub_10004ED7C, 0LL, (uint64_t)&v3, a2, a3);
}

void sub_10002BA20( uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
}

void sub_10002BA44( uint64_t a1@<X0>, void (*a2)(char *, _BYTE *, __int128 *, void, uint64_t)@<X1>, uint64_t a3@<X2>, __int128 *a4@<X4>, unsigned int *a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  uint64_t v14 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v15 = *(char **)(a1 + 208);
    if (!v15)
    {
      uint64_t v15 = (char *)operator new(0x10uLL);
      sub_10004D434((uint64_t)v15, v14);
      uint64_t v16 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v15;
      if (v16)
      {
        operator delete(v16);
        uint64_t v15 = *(char **)(a1 + 208);
      }
    }

    int v17 = &v15[a3 >> 1];
    if ((a3 & 1) != 0) {
      a2 = *(void (**)(char *, _BYTE *, __int128 *, void, uint64_t))(*(void *)v17 + a2);
    }
    __p[0] = 0;
    char v24 = 0;
    __int128 v20 = *a4;
    char v21 = 1;
    a2(v17, __p, &v20, *a5, a6);
    if (v24)
    {
      if (v23 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    __int128 v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const std::optional<const std::string> &, const std::optional<const bo"
                           "ost::uuids::uuid> &, CLMicroLocationProto::ConfigurationType, const std::string &), Args = <c"
                           "onst std::nullopt_t &, const boost::uuids::uuid &, const CLMicroLocationProto::ConfigurationT"
                           "ype &, const std::string &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::E"
                                      "ntry> (CLMicroLocationConfigurationTable::*)(const std::optional<const std::string"
                                      "> &, const std::optional<const boost::uuids::uuid> &, CLMicroLocationProto::Config"
                                      "urationType, const std::string &), Args = <const std::nullopt_t &, const boost::uu"
                                      "ids::uuid &, const CLMicroLocationProto::ConfigurationType &, const std::string &>]";
      char v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v20,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const std::opti onal<const std::string> &, const std::optional<const boost::uuids::uuid> &, CLMicroLocationProto::ConfigurationT ype, const std::string &), Args = <const std::nullopt_t &, const boost::uuids::uuid &, const CLMicroLocationProt o::ConfigurationType &, const std::string &>]",  "%s\n",  v19);
      if (v19 != __p) {
        free(v19);
      }
    }

    *a7 = 0;
    a7[112] = 0;
  }

void sub_10002BCC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

void sub_10002BCFC(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  int v3 = 2;
  sub_10002BD3C(a1, (void (*)(char *, uint64_t, uint8_t *, int *))sub_10004ED7C, 0LL, (uint64_t)&v3, a2, a3);
}

void sub_10002BD3C( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint8_t *, int *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v12 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v13 = *(char **)(a1 + 208);
    if (!v13)
    {
      uint64_t v13 = (char *)operator new(0x10uLL);
      sub_10004D434((uint64_t)v13, v12);
      uint64_t v14 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v13;
      if (v14)
      {
        operator delete(v14);
        uint64_t v13 = *(char **)(a1 + 208);
      }
    }

    if ((a3 & 1) != 0) {
      a2 = *(void (**)(char *, uint64_t, uint8_t *, int *))(*(void *)&v13[a3 >> 1] + a2);
    }
    if (*(char *)(a5 + 23) < 0)
    {
      sub_1010DD48C(buf, *(void **)a5, *(void *)(a5 + 8));
    }

    else
    {
      *(_OWORD *)buf = *(_OWORD *)a5;
      uint64_t v22 = *(void *)(a5 + 16);
    }

    char v23 = 1;
    LOBYTE(v18) = 0;
    char v20 = 0;
    a2(&v13[a3 >> 1], a4, buf, &v18);
    if (v23)
    {
      if (SHIBYTE(v22) < 0) {
        operator delete(*(void **)buf);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v15 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<c"
                           "onst std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocatio"
                           "nProto::ConfigurationType, const std::string &, const std::nullopt_t &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v18 = 136446210;
      char v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const C"
            "LMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<cons"
            "t boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::string &, const std::nullopt_t &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v18,  12);
      int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const CLMicroLo cationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uui ds::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::string &, const std::nullopt_t &>]",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    *a6 = 0;
    a6[112] = 0;
  }

void sub_10002BFD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

void sub_10002C010(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
}

void sub_10002C024( uint64_t a1@<X0>, void (*a2)(char *, void, void)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 208);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_10004D434((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 208);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(void (**)(char *, void, void))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    v13(v12, *a4, a4[1]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::"
            "uuids::uuid), Args = <const boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      int v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::"
            "uuids::uuid), Args = <const boost::uuids::uuid &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::uuids::u uid), Args = <const boost::uuids::uuid &>]",  "%s\n",  v15);
    }

    *a5 = 0;
    a5[112] = 0;
  }

void sub_10002C290(_Unwind_Exception *a1)
{
}

void sub_10002C2AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_100026B80();
  sub_10002C328( a1,  (void (*)(char *, uint64_t, uint64_t, _BYTE *, __int128 *, void))sub_10003CEE0,  0LL,  a2,  a3,  a4,  &v10,  a5);
}

void sub_10002C328( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, _BYTE *, __int128 *, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X6>, unsigned int *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    int v17 = *(char **)(a1 + 256);
    if (!v17)
    {
      int v17 = (char *)operator new(0x10uLL);
      sub_10003BD8C((uint64_t)v17, v16);
      int v18 = *(void **)(a1 + 256);
      *(void *)(a1 + 256) = v17;
      if (v18)
      {
        operator delete(v18);
        int v17 = *(char **)(a1 + 256);
      }
    }

    char v19 = &v17[a3 >> 1];
    if ((a3 & 1) != 0) {
      a2 = *(void (**)(char *, uint64_t, uint64_t, _BYTE *, __int128 *, void))(*(void *)v19
    }
                                                                                        + a2);
    __p[0] = 0;
    char v27 = 0;
    __int128 v23 = *a6;
    char v24 = 1;
    a2(v19, a4, a5, __p, &v23, *a7);
    if (v27)
    {
      if (v26 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    char v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRapportTab"
                           "le, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicroLocationRapportTable::"
                           "*)(const std::string &, const std::string &, const std::optional<const std::string> &, const "
                           "std::optional<const boost::uuids::uuid> &, unsigned int), Args = <const std::string &, const "
                           "std::string &, const std::nullopt_t &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  __p,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LODWORD(v23) = 136446210;
      *(void *)((char *)&v23 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nRapportTable, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicro"
                                      "LocationRapportTable::*)(const std::string &, const std::string &, const std::opti"
                                      "onal<const std::string> &, const std::optional<const boost::uuids::uuid> &, unsign"
                                      "ed int), Args = <const std::string &, const std::string &, const std::nullopt_t &,"
                                      " const boost::uuids::uuid &, unsigned int &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v23,  12);
      uint64_t v22 = (char *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRapportTable, MemberFn = std: :vector<CLMicroLocationRapportTable::Entry> (CLMicroLocationRapportTable::*)(const std::string &, const std::str ing &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, unsigned int), Args = <const std::string &, const std::string &, const std::nullopt_t &, const boost::uuids::uuid &, unsigned int &>]",  "%s\n",  v21);
      if (v22 != __p) {
        free(v22);
      }
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_10002C5B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
}

uint64_t sub_10002C5E8(uint64_t a1)
{
  return sub_10002C5F8(a1, (uint64_t (*)(char *))sub_100054844, 0LL);
}

uint64_t sub_10002C5F8(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3)
{
  uint64_t v5 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v6 = *(char **)(a1 + 280);
    if (!v6)
    {
      uint64_t v6 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v6, v5);
      uint64_t v7 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v6;
      if (v7)
      {
        operator delete(v7);
        uint64_t v6 = *(char **)(a1 + 280);
      }
    }

    uint64_t v8 = &v6[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v9 = *(uint64_t (**)(char *))(*(void *)v8 + a2);
    }
    else {
      uint64_t v9 = a2;
    }
    return v9(v8);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unsigned int v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int "
            "(CLMiLoLoiTable::*)(), Args = <>]";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v14 = 136446210;
      uint64_t v15 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int "
            "(CLMiLoLoiTable::*)(), Args = <>]";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v14,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int (CLM iLoLoiTable::*)(), Args = <>]",  "%s\n",  v12);
    }

    return 0LL;
  }

void sub_10002C844(_Unwind_Exception *a1)
{
}

void sub_10002C860(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_100026B80();
  sub_10002C8BC(a1, (void (*)(char *, uint64_t, void))sub_10005455C, 0LL, a2, &v6, a3);
}

void sub_10002C8BC( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 280);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 280);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uu"
            "ids::uuid &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uu"
            "ids::uuid &, unsigned int &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiL oLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uuids::uui d &, unsigned int &>]",  "%s\n",  v17);
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_10002CB30(_Unwind_Exception *a1)
{
}

void sub_10002CB4C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
}

void sub_10002CB60( uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 232);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_1001424C8((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 232);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      (*(void (**)(char *, uint64_t))(*(void *)v12 + a2))(v12, a4);
    }
    else {
      a2(v12, a4);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(c"
            "onst boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v16 = 136446210;
      int v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(c"
            "onst boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v16,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberF n = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const boo st::uuids::uuid &), Args = <const boost::uuids::uuid &>]",  "%s\n",  v14);
    }

    *a5 = 0;
    a5[240] = 0;
  }

void sub_10002CDCC(_Unwind_Exception *a1)
{
}

void sub_10002CDE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unsigned int v8 = sub_100026B80();
  sub_10002CE4C(a1, (void (*)(char *, uint64_t, uint64_t, void))sub_1000453A4, 0LL, a2, a3, &v8, a4);
}

void sub_10002CE4C( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    int v14 = *(char **)(a1 + 296);
    if (!v14)
    {
      int v14 = (char *)operator new(0x10uLL);
      sub_10004431C((uint64_t)v14, v13);
      uint64_t v15 = *(void **)(a1 + 296);
      *(void *)(a1 + 296) = v14;
      if (v15)
      {
        operator delete(v15);
        int v14 = *(char **)(a1 + 296);
      }
    }

    int v16 = &v14[a3 >> 1];
    if ((a3 & 1) != 0) {
      int v17 = *(void (**)(char *, uint64_t, uint64_t, void))(*(void *)v16 + a2);
    }
    else {
      int v17 = a2;
    }
    v17(v16, a4, a5, *a6);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, M"
            "emberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::"
            "*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &"
            ", unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v21 = 136446210;
      uint64_t v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, M"
            "emberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::"
            "*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &"
            ", unsigned int &>]";
      int v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v21,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, Membe rFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &, unsigned int &>]",  "%s\n",  v19);
    }

    *a7 = 0LL;
    a7[1] = 0LL;
    a7[2] = 0LL;
  }

void sub_10002D0D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002D108(a1, (uint64_t (*)(char *, uint64_t, uint64_t))sub_100130E00, 0LL, a2, a3);
}

uint64_t sub_10002D108( uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 288);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_100130738((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 288);
      *(void *)(a1 + 288) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 288);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    return v13(v12, a4, a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (C"
            "LMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const"
            " boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v18 = 136446210;
      int v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (C"
            "LMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const"
            " boost::uuids::uuid &>]";
      int v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v18,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (CLMiL oCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const boost::uuids::uuid &>]",  "%s\n",  v16);
    }

    return 0LL;
  }

void sub_10002D370(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002D108(a1, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1001310C4, 0LL, a2, a3);
}

void sub_10002D3A4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_10002D3B8( uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 288);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_100130738((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 288);
      *(void *)(a1 + 288) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 288);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      (*(void (**)(char *, uint64_t))(*(void *)v12 + a2))(v12, a4);
    }
    else {
      a2(v12, a4);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v16 = 136446210;
      int v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v16,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector <std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]",  "%s\n",  v14);
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_10002D624(_Unwind_Exception *a1)
{
}

void sub_10002D640(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = sub_100026B80();
  sub_10002D68C(a1, (void (*)(char *, void))sub_100132260, 0LL, &v4, a2);
}

void sub_10002D68C( uint64_t a1@<X0>, void (*a2)(char *, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 288);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_100130738((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 288);
      *(void *)(a1 + 288) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 288);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(void (**)(char *, void))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    v13(v12, *a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      int v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector <boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]",  "%s\n",  v15);
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_10002D8F8(_Unwind_Exception *a1)
{
}

void sub_10002D914(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unsigned int v8 = sub_100026B80();
  sub_10002D978(a1, (void (*)(char *, uint64_t, uint64_t, void))sub_1000FA864, 0LL, a2, a3, &v8, a4);
}

void sub_10002D978( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    int v14 = *(char **)(a1 + 264);
    if (!v14)
    {
      int v14 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v14, v13);
      uint64_t v15 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v14;
      if (v15)
      {
        operator delete(v15);
        int v14 = *(char **)(a1 + 264);
      }
    }

    int v16 = &v14[a3 >> 1];
    if ((a3 & 1) != 0) {
      int v17 = *(void (**)(char *, uint64_t, uint64_t, void))(*(void *)v16 + a2);
    }
    else {
      int v17 = a2;
    }
    v17(v16, a4, a5, *a6);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int"
            "), Args = <const std::string &, const std::string &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v22 = 136446210;
      __int128 v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int"
            "), Args = <const std::string &, const std::string &, unsigned int &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v22,  12);
      char v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vector<C LMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &, unsigned int &>]",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    *a7 = 0LL;
    a7[1] = 0LL;
    a7[2] = 0LL;
  }

void sub_10002DC00(_Unwind_Exception *a1)
{
}

void sub_10002DC1C(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unsigned int v6 = a2;
  unsigned int v5 = sub_100026B80();
  sub_10002DC70(a1, (void (*)(char *, void, void))sub_1000FAEB4, 0LL, &v6, &v5, a3);
}

void sub_10002DC70( uint64_t a1@<X0>, void (*a2)(char *, void, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 264);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 264);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, void, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, *a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vector<C LMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]",  "%s\n",  v17);
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_10002DEE4(_Unwind_Exception *a1)
{
}

void sub_10002DF00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  v4[0] = a2;
  v4[1] = a3;
  sub_10002DF5C(a1, (void (*)(char *, void, void))sub_1000FB2B8, 0LL, v4, a4);
}

void sub_10002DF5C( uint64_t a1@<X0>, void (*a2)(char *, void, void)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 264);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 264);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(void (**)(char *, void, void))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    v13(v12, *a4, a4[1]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::opti"
            "onal<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v18 = 136446210;
      int v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::opti"
            "onal<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v18,  12);
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::optional <CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    *a5 = 0;
    a5[88] = 0;
  }

void sub_10002E1C8(_Unwind_Exception *a1)
{
}

uint64_t sub_10002E1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_10002E240(a1, (uint64_t (*)(char *, void, void))sub_1000FB730, 0LL, v4);
}

uint64_t sub_10002E240(uint64_t a1, uint64_t (*a2)(char *, void, void), uint64_t a3, void *a4)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v8 = *(char **)(a1 + 264);
    if (!v8)
    {
      unsigned int v8 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v8, v7);
      uint64_t v9 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v8;
      if (v9)
      {
        operator delete(v9);
        unsigned int v8 = *(char **)(a1 + 264);
      }
    }

    unsigned int v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v11 = *(uint64_t (**)(char *, void, void))(*(void *)v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, *a4, a4[1]);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      int v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoS erviceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 0LL;
  }

void sub_10002E494(_Unwind_Exception *a1)
{
}

uint64_t sub_10002E4B0(uint64_t a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v8 = *(char **)(a1 + 264);
    if (!v8)
    {
      unsigned int v8 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v8, v7);
      uint64_t v9 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v8;
      if (v9)
      {
        operator delete(v9);
        unsigned int v8 = *(char **)(a1 + 264);
      }
    }

    unsigned int v10 = &v8[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(*(void *)v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      int v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      uint64_t v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoS erviceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 0LL;
  }

void sub_10002E704(_Unwind_Exception *a1)
{
}

uint64_t sub_10002E720(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3)
{
  uint64_t v5 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v6 = *(char **)(a1 + 264);
    if (!v6)
    {
      unsigned int v6 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v6, v5);
      uint64_t v7 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v6;
      if (v7)
      {
        operator delete(v7);
        unsigned int v6 = *(char **)(a1 + 264);
      }
    }

    unsigned int v8 = &v6[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v9 = *(uint64_t (**)(char *))(*(void *)v8 + a2);
    }
    else {
      uint64_t v9 = a2;
    }
    return v9(v8);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unsigned int v10 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(), Args = <>]";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v14 = 136446210;
      uint64_t v15 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(), Args = <>]";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v14,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoS erviceTable::*)(), Args = <>]",  "%s\n",  v12);
    }

    return 0LL;
  }

void sub_10002E96C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002E988(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  v6[0] = a2;
  v6[1] = a3;
  double v5 = a4;
  return sub_10002E9EC(a1, (uint64_t (*)(char *, void, void, double))sub_1000FF09C, 0LL, v6, &v5);
}

uint64_t sub_10002E9EC( uint64_t a1, uint64_t (*a2)(char *, void, void, double), uint64_t a3, void *a4, double *a5)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 264);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 264);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(uint64_t (**)(char *, void, void, double))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    return v13(v12, *a4, a4[1], *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono"
            "::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeC"
            "lock, std::chrono::duration<long double>> &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono"
            "::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeC"
            "lock, std::chrono::duration<long double>> &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoS erviceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::durati on<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::c hrono::duration<long double>> &>]",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    return 0LL;
  }

void sub_10002EC54(_Unwind_Exception *a1)
{
}

uint64_t sub_10002EC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v5 = a4;
  return sub_10002ECD4(a1, (uint64_t (*)(char *, void, void, void))sub_1000FF8AC, 0LL, v6, &v5);
}

uint64_t sub_10002ECD4( uint64_t a1, uint64_t (*a2)(char *, void, void, void), uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 264);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_1000F9800((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 264);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(uint64_t (**)(char *, void, void, void))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    return v13(v12, *a4, a4[1], *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoS erviceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    return 0LL;
  }

void sub_10002EF3C(_Unwind_Exception *a1)
{
}

void sub_10002EF58(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = sub_100026B80();
  sub_10002EFA4(a1, (void (*)(char *, void))sub_1001401B8, 0LL, &v4, a2);
}

void sub_10002EFA4( uint64_t a1@<X0>, void (*a2)(char *, void)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unsigned int v10 = *(char **)(a1 + 272);
    if (!v10)
    {
      unsigned int v10 = (char *)operator new(0x10uLL);
      sub_10013EB1C((uint64_t)v10, v9);
      uint64_t v11 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = v10;
      if (v11)
      {
        operator delete(v11);
        unsigned int v10 = *(char **)(a1 + 272);
      }
    }

    uint64_t v12 = &v10[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(void (**)(char *, void))(*(void *)v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    v13(v12, *a4);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v17 = 136446210;
      int v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v17,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, MemberF n = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]",  "%s\n",  v15);
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

void sub_10002F210(_Unwind_Exception *a1)
{
}

void sub_10002F22C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v11[0] = a4;
  v11[1] = a5;
  unsigned int v10 = sub_100026B80();
  sub_10002F2C4( a1,  (void (*)(char *, uint64_t, uint64_t, void, void, void))sub_10013F520,  0LL,  a2,  a3,  v11,  &v10,  a6);
}

void sub_10002F2C4( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, uint64_t, void, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  uint64_t v15 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    int v16 = *(char **)(a1 + 272);
    if (!v16)
    {
      int v16 = (char *)operator new(0x10uLL);
      sub_10013EB1C((uint64_t)v16, v15);
      int v17 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = v16;
      if (v17)
      {
        operator delete(v17);
        int v16 = *(char **)(a1 + 272);
      }
    }

    int v18 = &v16[a3 >> 1];
    if ((a3 & 1) != 0) {
      int v19 = *(void (**)(char *, uint64_t, uint64_t, void, void, void))(*(void *)v18 + a2);
    }
    else {
      int v19 = a2;
    }
    v19(v18, a4, a5, *a6, a6[1], *a7);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    char v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      char v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(con"
            "st std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const"
            " std::string &, boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v23 = 136446210;
      char v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(con"
            "st std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const"
            " std::string &, boost::uuids::uuid &, unsigned int &>]";
      int v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v23,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, MemberF n = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(const std:: string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const std::string &, boost::uuids::uuid &, unsigned int &>]",  "%s\n",  v21);
    }

    *a8 = 0LL;
    a8[1] = 0LL;
    a8[2] = 0LL;
  }

void sub_10002F554(_Unwind_Exception *a1)
{
}

void sub_10002F570(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int v6 = sub_100026B80();
  sub_10002F5CC(a1, (void (*)(char *, uint64_t, void))sub_100052610, 0LL, a2, &v6, a3);
}

void sub_10002F5CC( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 280);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 280);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional"
            "<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uui"
            "ds::uuid &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional"
            "<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uui"
            "ds::uuid &, unsigned int &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional<boo st::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uuids::uuid &, unsigned int &>]",  "%s\n",  v17);
    }

    *a6 = 0;
    a6[16] = 0;
  }

void sub_10002F840(_Unwind_Exception *a1)
{
}

void sub_10002F85C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_100026B80();
  sub_10002F8B8(a1, (void (*)(char *, uint64_t, void))sub_100052A9C, 0LL, a2, &v6, a3);
}

void sub_10002F8B8( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 280);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 280);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<b"
            "oost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const"
            " std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v19 = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<b"
            "oost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const"
            " std::vector<boost::uuids::uuid> &, unsigned int &>]";
      int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v19,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<boost ::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::ve ctor<boost::uuids::uuid> &, unsigned int &>]",  "%s\n",  v17);
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_10002FB2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10002FB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FB64(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))sub_100053688, 0LL, a2, a3, a4);
}

uint64_t sub_10002FB64( uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 280);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_100051544((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 280);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    return v15(v14, a4, a5, a6);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoL"
            "oiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args "
            "= <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v20 = 136446210;
      int v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoL"
            "oiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args "
            "= <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]";
      int v18 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v20,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoLoiTa ble::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args = <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]",  "%s\n",  v18);
    }

    return 0LL;
  }

void sub_10002FDD4(_Unwind_Exception *a1)
{
}

void sub_10002FDF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v8 = sub_100026B80();
  sub_10002FED0(a1, (void (*)(char *, uint64_t, void))sub_100157DBC, 0LL, a2, &v8, (void *)a3);
  sub_100030160(a1, (void (*)(char *, uint64_t, void))sub_100132AA0, 0LL, a2, &v8, &v6);
  sub_100037828( (uint64_t *)a3,  *(std::string **)(a3 + 8),  v6,  v7,  0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  uint64_t v9 = &v6;
  sub_1000129D4((void ***)&v9);
}

void sub_10002FEA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***a14)
{
  a14 = &a10;
  sub_1000129D4((void ***)&a14);
  sub_1000129D4(&a10);
  _Unwind_Resume(a1);
}

void sub_10002FED0( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 224);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_1001519B8((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 224);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std:"
            ":string &, unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v20 = 136446210;
      int v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std:"
            ":string &, unsigned int &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v20,  12);
      int v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::v ector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_100030144(_Unwind_Exception *a1)
{
}

void sub_100030160( uint64_t a1@<X0>, void (*a2)(char *, uint64_t, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    uint64_t v12 = *(char **)(a1 + 288);
    if (!v12)
    {
      uint64_t v12 = (char *)operator new(0x10uLL);
      sub_100130738((uint64_t)v12, v11);
      uint64_t v13 = *(void **)(a1 + 288);
      *(void *)(a1 + 288) = v12;
      if (v13)
      {
        operator delete(v13);
        uint64_t v12 = *(char **)(a1 + 288);
      }
    }

    int v14 = &v12[a3 >> 1];
    if ((a3 & 1) != 0) {
      uint64_t v15 = *(void (**)(char *, uint64_t, void))(*(void *)v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, *a5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &,"
            " unsigned int &>]";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to query %{public}s without a backing database",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      int v20 = 136446210;
      int v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &,"
            " unsigned int &>]";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to query %{public}s without a backing database",  &v20,  12);
      int v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector <std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    *a6 = 0LL;
    a6[1] = 0LL;
    a6[2] = 0LL;
  }

void sub_1000303D4(_Unwind_Exception *a1)
{
}

void sub_1000303F0(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 9);
  if (!sub_1003C1048((uint64_t)(a1 + 9)))
  {
    sub_1003B29E4(v2);
    sub_100024174(a1);
  }

  if (!sub_1003C1048(v2))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Failed to connect to database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      v5[0] = 0;
      unsigned int v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Failed to connect to database",  v5,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationDatabase::connectIfNecessary()", "%s\n", v4);
    }
  }

uint64_t sub_1000305A4(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    if (!sub_10003095C(a1) || !sub_100030AF0(a1)) {
      goto LABEL_34;
    }
    sub_1002F0B04(buf);
    CFStringRef v3 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsNumModelsToKeepForNonLSL", 0x8000100u, kCFAllocatorNull);
    int v4 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v3, v22);
    CFRelease(v3);
    unsigned int v5 = v22[0];
    unsigned int v6 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    if (v4) {
      unsigned int v9 = v5;
    }
    else {
      unsigned int v9 = 12;
    }
    sub_1002F0B04(buf);
    CFStringRef v10 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsNumLSLModelsToKeep", 0x8000100u, kCFAllocatorNull);
    int v11 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v10, v22);
    CFRelease(v10);
    int v12 = v22[0];
    uint64_t v13 = v24;
    if (v24)
    {
      int v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    unsigned int v16 = v11 ? v12 : 50;
    if (sub_1000268C8(a1, v9, v16)
      && sub_100030C84(a1)
      && sub_100030E18(a1)
      && sub_100030FAC(a1)
      && sub_100031140(a1)
      && sub_1000312D4(a1)
      && sub_100031468(a1))
    {
      uint64_t v17 = sub_10002E720(a1, (uint64_t (*)(char *))sub_1000FC570, 0LL);
    }

    else
    {
LABEL_34:
      uint64_t v17 = 0LL;
    }

    sub_1000315FC(a1);
    else {
      uint64_t v19 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(v2, v19);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v18 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to freeDatabaseSpace() without a backing database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
      LOWORD(v22[0]) = 0;
      int v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to freeDatabaseSpace() without a backing database",  v22,  2);
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLMicroLocationDatabase::freeDatabaseSpace()", "%s\n", v21);
    }

    return 0LL;
  }

  return v17;
}

void sub_100030934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_10003095C(uint64_t a1)
{
  unsigned int v2 = sub_100037DF0(a1);
  unsigned int v4 = sub_100037DF0(a1);
  unint64_t v5 = v4 - (unint64_t)sub_100036640();
  unint64_t v6 = v5 + sub_100037DAC();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationMeasurements";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 216);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_1000C8AE8((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 216);
    }
  }

  return sub_1000CAD3C((uint64_t)v8, v6);
}

void sub_100030AD4(_Unwind_Exception *a1)
{
}

BOOL sub_100030AF0(uint64_t a1)
{
  unsigned int v2 = sub_1000380E0(a1);
  unsigned int v4 = sub_1000380E0(a1);
  unint64_t v5 = v4 - (unint64_t)sub_100036354();
  unint64_t v6 = v5 + sub_10003809C();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationRecordingEvents";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 232);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_1001424C8((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 232);
    *(void *)(a1 + 232) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 232);
    }
  }

  return sub_1001472A4((uint64_t)v8, v6);
}

void sub_100030C68(_Unwind_Exception *a1)
{
}

BOOL sub_100030C84(uint64_t a1)
{
  unsigned int v2 = sub_1000382F4(a1);
  unsigned int v4 = sub_1000382F4(a1);
  unint64_t v5 = v4 - (unint64_t)sub_100036B54();
  unint64_t v6 = v5 + sub_1000382B0();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationModels";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 224);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_1001519B8((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 224);
    }
  }

  return sub_100156CBC((uint64_t)v8, v6);
}

void sub_100030DFC(_Unwind_Exception *a1)
{
}

BOOL sub_100030E18(uint64_t a1)
{
  unsigned int v2 = sub_100038508(a1);
  unsigned int v4 = sub_100038508(a1);
  unint64_t v5 = v4 - (unint64_t)sub_1000386D8();
  unint64_t v6 = v5 + sub_1000384C4();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationConfiguration";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 208);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_10004D434((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 208);
    }
  }

  return sub_10004F9EC((uint64_t)v8, v6);
}

void sub_100030F90(_Unwind_Exception *a1)
{
}

BOOL sub_100030FAC(uint64_t a1)
{
  unsigned int v2 = sub_1000387F4(a1);
  unsigned int v4 = sub_1000387F4(a1);
  unint64_t v5 = v4 - (unint64_t)sub_1000368CC();
  unint64_t v6 = v5 + sub_1000387B0();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationRapport";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 256);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_10003BD8C((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 256);
    *(void *)(a1 + 256) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 256);
    }
  }

  return sub_10003D67C((uint64_t)v8, v6);
}

void sub_100031124(_Unwind_Exception *a1)
{
}

BOOL sub_100031140(uint64_t a1)
{
  unsigned int v2 = sub_100038A08(a1);
  unsigned int v4 = sub_100038A08(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10003671C();
  unint64_t v6 = v5 + sub_1000389C4();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationLabels";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 240);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_10000D870((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 240);
    }
  }

  return sub_100010B00((uint64_t)v8, v6);
}

void sub_1000312B8(_Unwind_Exception *a1)
{
}

BOOL sub_1000312D4(uint64_t a1)
{
  unsigned int v2 = sub_100038C1C(a1);
  unsigned int v4 = sub_100038C1C(a1);
  unint64_t v5 = v4 - (unint64_t)sub_100038DEC();
  unint64_t v6 = v5 + sub_100038BD8();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationLoggedEvents";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 248);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_1001347E4((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 248);
    *(void *)(a1 + 248) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 248);
    }
  }

  return sub_1001364BC((uint64_t)v8, v6);
}

void sub_10003144C(_Unwind_Exception *a1)
{
}

BOOL sub_100031468(uint64_t a1)
{
  unsigned int v2 = sub_100038F08(a1);
  unsigned int v4 = sub_100038F08(a1);
  unint64_t v5 = v4 - (unint64_t)sub_1000369A4();
  unint64_t v6 = v5 + sub_100038EC4();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationAssociatedState";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 272);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_10013EB1C((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 272);
    }
  }

  return sub_1001409F4((uint64_t)v8, v6);
}

void sub_1000315E0(_Unwind_Exception *a1)
{
}

BOOL sub_1000315FC(uint64_t a1)
{
  unsigned int v2 = sub_10003911C(a1);
  unsigned int v4 = sub_10003911C(a1);
  unint64_t v5 = v4 - (unint64_t)sub_100036A7C();
  unint64_t v6 = v5 + sub_1000390D8();
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    __int16 v15 = 2082;
    unsigned int v16 = "MicroLocationBluetoothIdentityTable";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Free up database space, Rows to delete:%{public}llu, Table name:%{public, locatio n:escape_only}s}",  (uint8_t *)v10,  0x26u);
  }

  unint64_t v8 = *(void **)(a1 + 296);
  if (!v8)
  {
    unint64_t v8 = operator new(0x10uLL);
    sub_10004431C((uint64_t)v8, a1 + 72);
    unsigned int v9 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v8;
    if (v9)
    {
      operator delete(v9);
      unint64_t v8 = *(void **)(a1 + 296);
    }
  }

  return sub_100045810((uint64_t)v8, v6);
}

void sub_100031774(_Unwind_Exception *a1)
{
}

BOOL sub_100031790(uint64_t a1)
{
  return sub_1003C1048(a1 + 72);
}

BOOL sub_100031798(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_1003B64B8(a1 + 72, a2 + 72, (uint64_t *)v7, v6, 0LL, 0.0);
  unint64_t v8 = v6;
  sub_1000129D4((void ***)&v8);
  v6[0] = (void **)v7;
  sub_1000129D4(v6);
  return v4;
}

void sub_10003181C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  *(void *)(v3 - 40) = v2;
  sub_1000129D4((void ***)(v3 - 40));
  sub_1000129D4((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_100031840(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    if (a2[23] >= 0) {
      BOOL v4 = a2;
    }
    else {
      BOOL v4 = *(char **)a2;
    }
    sub_1003C0D54(v3, v4, &v17);
    uint64_t v5 = v17;
    unint64_t v6 = (sqlite3_stmt *)sub_100019240(v17);
    if (v6)
    {
      BOOL v7 = sub_1003BB2BC(v3, v6);
      if (!v5) {
        return v7;
      }
      goto LABEL_36;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    int v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = a2[23] >= 0 ? a2 : *(char **)a2;
      uint64_t v17 = 68289282LL;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      int v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:executeStatement, Failed to create SQL statement, sqlStatement:%{public, location:escape_only}s}",  (uint8_t *)&v17,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
    }

    unint64_t v14 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      if (a2[23] >= 0) {
        __int16 v15 = a2;
      }
      else {
        __int16 v15 = *(char **)a2;
      }
      uint64_t v17 = 68289282LL;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      int v21 = v15;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "executeStatement, Failed to create SQL statement",  "{msg%{public}.0s:executeStatement, Failed to create SQL statement, sqlStatement:%{public, location:escape_only}s}",  (uint8_t *)&v17,  0x1Cu);
    }

    BOOL v7 = 0LL;
    if (v5) {
LABEL_36:
    }
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    unint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = a2[23] >= 0 ? a2 : *(char **)a2;
      uint64_t v17 = 68289282LL;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      int v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:executeStatement Failed. database object is invalid, sqlStatement:%{public, locatio n:escape_only}s}",  (uint8_t *)&v17,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
    }

    CFStringRef v10 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      if (a2[23] >= 0) {
        __int16 v11 = a2;
      }
      else {
        __int16 v11 = *(char **)a2;
      }
      uint64_t v17 = 68289282LL;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      int v21 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "executeStatement Failed. database object is invalid",  "{msg%{public}.0s:executeStatement Failed. database object is invalid, sqlStatement:%{public, locatio n:escape_only}s}",  (uint8_t *)&v17,  0x1Cu);
    }

    return 0LL;
  }

  return v7;
}

void sub_100031B9C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100031BC4(uint64_t a1, char *a2, sqlite3_int64 *a3)
{
  *a3 = -1LL;
  uint64_t v4 = a1 + 72;
  if (a2[23] < 0) {
    a2 = *(char **)a2;
  }
  sub_1003C0D54(v4, a2, v9);
  uint64_t v5 = v9[0];
  unint64_t v6 = (sqlite3_stmt *)sub_100019240(v9[0]);
  if (j__sqlite3_step(v6) == 100)
  {
    *a3 = sqlite3_column_int64(v6, 0);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  sqlite3_reset(v6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v7;
}

void sub_100031DB0(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100031DC4(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x100031DF4LL);
}

void sub_100031DD4()
{
}

uint64_t sub_100031DFC(uint64_t a1, char *a2, double *a3)
{
  *a3 = 0.0;
  uint64_t v4 = a1 + 72;
  if (a2[23] < 0) {
    a2 = *(char **)a2;
  }
  sub_1003C0D54(v4, a2, v9);
  uint64_t v5 = v9[0];
  unint64_t v6 = (sqlite3_stmt *)sub_100019240(v9[0]);
  if (j__sqlite3_step(v6) == 100)
  {
    *a3 = sqlite3_column_double(v6, 0);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  sqlite3_reset(v6);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  return v7;
}

void sub_100031FE4(_Unwind_Exception *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100031FF8(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x100032028LL);
}

void sub_100032008()
{
}

uint64_t sub_100032030( uint64_t a1, uint64_t a2, std::string::size_type a3, const std::string::value_type *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unsigned int v16 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    else {
      std::string::size_type v17 = *(void *)a3;
    }
    buf[0].__r_.__value_.__r.__words[0] = 68289283LL;
    LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2081;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Exporting table using paging, table:%{private, location:escape_only}s}",  (uint8_t *)buf,  0x1Cu);
  }

  if (a5)
  {
    int v18 = a4[23];
    if (v18 < 0)
    {
      if (*((void *)a4 + 1) != 5LL) {
        goto LABEL_18;
      }
      uint64_t v19 = *(int **)a4;
    }

    else
    {
      uint64_t v19 = (int *)a4;
      if (v18 != 5) {
        goto LABEL_18;
      }
    }

    int v20 = *v19;
    int v21 = *((unsigned __int8 *)v19 + 4);
    if (v20 == 1232564050 && v21 == 100) {
      sub_101224018();
    }
  }

LABEL_186:
  uint64_t v55 = 0LL;
LABEL_187:
  sub_100036DAC((uint64_t)&v125);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return v55;
}

      *(void *)buf = &v117;
      sub_100012948((void ***)buf);
      return;
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
    BOOL v54 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(void *)buf = 68289026LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:applyRecentLabelsToLSL, model has no location similarity list}",  buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    __int128 v51 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(void *)buf = 68289026LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      uint64_t v52 = "applyRecentLabelsToLSL, model has no location similarity list";
      uint64_t v53 = "{msg%{public}.0s:applyRecentLabelsToLSL, model has no location similarity list}";
      goto LABEL_96;
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
    uint64_t v50 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(void *)buf = 68289026LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:applyRecentLabelsToLSL, no current model}",  buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    __int128 v51 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(void *)buf = 68289026LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      uint64_t v52 = "applyRecentLabelsToLSL, no current model";
      uint64_t v53 = "{msg%{public}.0s:applyRecentLabelsToLSL, no current model}";
LABEL_96:
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v51,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v52,  v53,  buf,  0x12u);
    }
  }

  std::string::size_type v49 = *(void *)(v5 + 336);
  if (!v49) {
    std::string::size_type v49 = *(void *)(qword_1019A11B8 + 336);
  }
  __n128 result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F6,  v49,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x400) == 0)
  {
LABEL_141:
    if ((v39 & 0x800) == 0) {
      goto LABEL_142;
    }
    goto LABEL_192;
  }

  *(_DWORD *)(a1 + 396) |= 0x40000000u;
  std::string v65 = *(_WORD **)(a1 + 240);
  if (!v65)
  {
    std::string v65 = operator new(0x18uLL);
    *(void *)std::string v65 = off_101875E88;
    v65[4] = 0;
    *((_DWORD *)v65 + 3) = 0;
    *((_DWORD *)v65 + 4) = 0;
    *(void *)(a1 + 240) = v65;
  }

  __int128 v66 = *(_BYTE **)(a2 + 240);
  if (!v66) {
    __int128 v66 = *(_BYTE **)(qword_1019A1D38 + 240);
  }
  sub_100BBA1D0((uint64_t)v65, v66);
  if ((*(_DWORD *)(a2 + 396) & 0x80000000) != 0)
  {
LABEL_191:
    *(_DWORD *)(a1 + 396) |= 0x80000000;
    int v67 = *(void **)(a1 + 248);
    if (!v67)
    {
      int v67 = operator new(0x30uLL);
      sub_100614710((uint64_t)v67);
      *(void *)(a1 + 248) = v67;
    }

    std::string v68 = *(void *)(a2 + 248);
    if (!v68) {
      std::string v68 = *(void *)(qword_1019A1D38 + 248);
    }
    sub_100641FDC((uint64_t)v67, v68);
  }

  __int128 v71 = *(_DWORD *)(a2 + 232);
  v5 |= 0x1000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 232) = v71;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_81:
    if ((v4 & 0x400) == 0) {
      goto LABEL_82;
    }
    goto LABEL_188;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfStaticCondition", *(_BYTE *)(a1 + 348));
  uint64_t v7 = *v5;
  unint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x4000000000LL) == 0)
  {
LABEL_85:
    if ((v6 & 0x8000000000LL) == 0) {
      goto LABEL_86;
    }
    goto LABEL_188;
  }

  __n128 result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 232), 0x2BEu);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if ((*v4 & 0x100000) == 0)
  {
LABEL_81:
    if ((v5 & 0x400) == 0) {
      goto LABEL_82;
    }
    goto LABEL_188;
  }

void sub_100032E08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100033088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    else {
      uint64_t v5 = *(const std::string::value_type **)a2;
    }
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:exporting db filterred for user, UserID::%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  sub_10002FDF0(a3, a2, (uint64_t)v388);
  v387 = (uint64_t *)v388;
  sub_1010DDBC0(buf, "MicroLocationRecordingEvents");
  sub_1010DDBC0(&buf[24], "RowId");
  char v398 = 0;
  uint64_t v399 = sub_100036354();
  sub_1002F0B04(&__dst);
  CFStringRef v6 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsRecordingEventTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v7 = sub_1002A77CC((uint64_t)__dst.__r_.__value_.__l.__data_, (uint64_t)v6, &v382);
  CFRelease(v6);
  uint64_t data_low = LODWORD(v382.__r_.__value_.__l.__data_);
  std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    CFStringRef v10 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  uint64_t v12 = 1000LL;
  if (v7) {
    uint64_t v12 = data_low;
  }
  uint64_t v400 = v12;
  v381.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v381, "SELECT * FROM OTHER.");
  __int16 v13 = std::string::append(&v381, "MicroLocationRecordingEvents");
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v382.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v382.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  __int16 v15 = std::string::append(&v382, " WHERE RtLoiGroupId IN ");
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, v379);
  if ((v380 & 0x80u) == 0) {
    std::string::size_type v17 = v379;
  }
  else {
    std::string::size_type v17 = (void **)v379[0];
  }
  if ((v380 & 0x80u) == 0) {
    std::string::size_type v18 = v380;
  }
  else {
    std::string::size_type v18 = (std::string::size_type)v379[1];
  }
  uint64_t v19 = std::string::append(&__dst, (const std::string::value_type *)v17, v18);
  __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type cap = v19->__r_.__value_.__l.__cap_;
  __int128 v401 = v20;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v403, "MicroLocationMeasurements");
  sub_1010DDBC0(v404, "RowId");
  char v405 = 0;
  uint64_t v406 = sub_100036640();
  sub_1002F0B04(&v378);
  CFStringRef v21 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v22 = sub_1002A77CC((uint64_t)v378.__r_.__value_.__l.__data_, (uint64_t)v21, &v377);
  CFRelease(v21);
  uint64_t v23 = LODWORD(v377.__r_.__value_.__l.__data_);
  uint64_t v24 = (std::__shared_weak_count *)v378.__r_.__value_.__l.__size_;
  if (v378.__r_.__value_.__l.__size_)
  {
    int v25 = (unint64_t *)(v378.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

  uint64_t v27 = 1000LL;
  if (v22) {
    uint64_t v27 = v23;
  }
  uint64_t v407 = v27;
  v369.__r_.__value_.__s.__size_ = 14;
  strcpy((char *)&v369, "   FROM OTHER.");
  uint64_t v28 = std::string::insert(&v369, 0LL, "SELECT * ");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v370.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v30 = std::string::append(&v370, "MicroLocationMeasurements");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v371.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v32 = std::string::append(&v371, "   WHERE ");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v372.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v372.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  int v34 = std::string::append(&v372, "RecordingUUID");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v373.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v373.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v36 = std::string::append(&v373, " IN ");
  __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v374.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v374.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v38 = (char *)operator new(0x28uLL);
  strcpy(v38, " \t\t(SELECT RecordingUUID FROM OTHER.");
  v286 = v38;
  int v39 = std::string::append(&v374, v38, 0x24uLL);
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v375.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v375.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  double v41 = std::string::append(&v375, "MicroLocationRecordingEvents");
  __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v376.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v376.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0LL;
  v41->__r_.__value_.__l.__cap_ = 0LL;
  v41->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v43 = std::string::append(&v376, " WHERE RtLoiGroupId IN ");
  __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v377.__r_.__value_.__l.__cap_ = v43->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v377.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0LL;
  v43->__r_.__value_.__l.__cap_ = 0LL;
  v43->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, v367);
  if ((v368 & 0x80u) == 0) {
    BOOL v45 = v367;
  }
  else {
    BOOL v45 = (void **)v367[0];
  }
  if ((v368 & 0x80u) == 0) {
    std::string::size_type v46 = v368;
  }
  else {
    std::string::size_type v46 = (std::string::size_type)v367[1];
  }
  int v47 = std::string::append(&v377, (const std::string::value_type *)v45, v46);
  __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v378.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0LL;
  v47->__r_.__value_.__l.__cap_ = 0LL;
  v47->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v49 = std::string::append(&v378, ")");
  __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  std::string::size_type v409 = v49->__r_.__value_.__l.__cap_;
  __int128 v408 = v50;
  v49->__r_.__value_.__l.__size_ = 0LL;
  v49->__r_.__value_.__l.__cap_ = 0LL;
  v49->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v410, "MicroLocationLabels");
  sub_1010DDBC0(v411, "RowId");
  char v412 = 0;
  uint64_t v413 = sub_10003671C();
  sub_1002F0B04(&v366);
  CFStringRef v51 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLabelTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v52 = sub_1002A77CC((uint64_t)v366.__r_.__value_.__l.__data_, (uint64_t)v51, &v365);
  CFRelease(v51);
  uint64_t v53 = LODWORD(v365.__r_.__value_.__l.__data_);
  BOOL v54 = (std::__shared_weak_count *)v366.__r_.__value_.__l.__size_;
  if (v366.__r_.__value_.__l.__size_)
  {
    uint64_t v55 = (unint64_t *)(v366.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  uint64_t v57 = 1000LL;
  if (v52) {
    uint64_t v57 = v53;
  }
  uint64_t v414 = v57;
  v338.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v338, "SELECT ");
  char v337 = 6;
  strcpy(__s, "OTHER.");
  uint64_t v58 = std::string::append(&v338, __s, 6uLL);
  __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v339.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0LL;
  v58->__r_.__value_.__l.__cap_ = 0LL;
  v58->__r_.__value_.__r.__words[0] = 0LL;
  int v60 = std::string::append(&v339, "MicroLocationLabels");
  __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v340.__r_.__value_.__l.__cap_ = v60->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0LL;
  v60->__r_.__value_.__l.__cap_ = 0LL;
  v60->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v62 = std::string::append(&v340, ".TriggerUUID, ");
  __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v341.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0LL;
  v62->__r_.__value_.__l.__cap_ = 0LL;
  v62->__r_.__value_.__r.__words[0] = 0LL;
  char v335 = 6;
  strcpy(v334, "OTHER.");
  __int128 v64 = std::string::append(&v341, v334, 6uLL);
  __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v342.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v342.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0LL;
  v64->__r_.__value_.__l.__cap_ = 0LL;
  v64->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v66 = std::string::append(&v342, "MicroLocationLabels");
  __int128 v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v343.__r_.__value_.__l.__cap_ = v66->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v343.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0LL;
  v66->__r_.__value_.__l.__cap_ = 0LL;
  v66->__r_.__value_.__r.__words[0] = 0LL;
  std::string v68 = std::string::append(&v343, ".ClientID, ");
  __int128 v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v344.__r_.__value_.__l.__cap_ = v68->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v344.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0LL;
  v68->__r_.__value_.__l.__cap_ = 0LL;
  v68->__r_.__value_.__r.__words[0] = 0LL;
  char v333 = 6;
  strcpy(v332, "OTHER.");
  std::string v70 = std::string::append(&v344, v332, 6uLL);
  __int128 v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v345.__r_.__value_.__l.__cap_ = v70->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v345.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0LL;
  v70->__r_.__value_.__l.__cap_ = 0LL;
  v70->__r_.__value_.__r.__words[0] = 0LL;
  v72 = std::string::append(&v345, "MicroLocationLabels");
  __int128 v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v346.__r_.__value_.__l.__cap_ = v72->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0LL;
  v72->__r_.__value_.__l.__cap_ = 0LL;
  v72->__r_.__value_.__r.__words[0] = 0LL;
  int v74 = std::string::append(&v346, ".LabelUUID, ");
  __int128 v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v347.__r_.__value_.__l.__cap_ = v74->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v347.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0LL;
  v74->__r_.__value_.__l.__cap_ = 0LL;
  v74->__r_.__value_.__r.__words[0] = 0LL;
  char v331 = 6;
  strcpy(v330, "OTHER.");
  std::string::size_type v76 = std::string::append(&v347, v330, 6uLL);
  __int128 v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v348.__r_.__value_.__l.__cap_ = v76->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v348.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0LL;
  v76->__r_.__value_.__l.__cap_ = 0LL;
  v76->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v78 = std::string::append(&v348, "MicroLocationLabels");
  __int128 v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v349.__r_.__value_.__l.__cap_ = v78->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v349.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0LL;
  v78->__r_.__value_.__l.__cap_ = 0LL;
  v78->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v80 = std::string::append(&v349, ".ReceivedTimestamp, ");
  __int128 v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v350.__r_.__value_.__l.__cap_ = v80->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v350.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0LL;
  v80->__r_.__value_.__l.__cap_ = 0LL;
  v80->__r_.__value_.__r.__words[0] = 0LL;
  char v329 = 6;
  strcpy(v328, "OTHER.");
  std::string::size_type v82 = std::string::append(&v350, v328, 6uLL);
  __int128 v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v351.__r_.__value_.__l.__cap_ = v82->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v351.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0LL;
  v82->__r_.__value_.__l.__cap_ = 0LL;
  v82->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v84 = std::string::append(&v351, "MicroLocationLabels");
  __int128 v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v352.__r_.__value_.__l.__cap_ = v84->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v352.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0LL;
  v84->__r_.__value_.__l.__cap_ = 0LL;
  v84->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v86 = std::string::append(&v352, ".RowId ");
  __int128 v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v353.__r_.__value_.__l.__cap_ = v86->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v353.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0LL;
  v86->__r_.__value_.__l.__cap_ = 0LL;
  v86->__r_.__value_.__r.__words[0] = 0LL;
  char v327 = 11;
  strcpy((char *)v326, "FROM OTHER.");
  v88 = std::string::append(&v353, (const std::string::value_type *)v326, 0xBuLL);
  __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v354.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v354.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0LL;
  v88->__r_.__value_.__l.__cap_ = 0LL;
  v88->__r_.__value_.__r.__words[0] = 0LL;
  v90 = std::string::append(&v354, "MicroLocationLabels");
  __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v355.__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v355.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0LL;
  v90->__r_.__value_.__l.__cap_ = 0LL;
  v90->__r_.__value_.__r.__words[0] = 0LL;
  v92 = std::string::append(&v355, " INNER JOIN OTHER.");
  __int128 v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v356.__r_.__value_.__l.__cap_ = v92->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v356.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0LL;
  v92->__r_.__value_.__l.__cap_ = 0LL;
  v92->__r_.__value_.__r.__words[0] = 0LL;
  v94 = std::string::append(&v356, "MiLoServices");
  __int128 v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v357.__r_.__value_.__l.__cap_ = v94->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v357.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0LL;
  v94->__r_.__value_.__l.__cap_ = 0LL;
  v94->__r_.__value_.__r.__words[0] = 0LL;
  v96 = std::string::append(&v357, "    ON ");
  __int128 v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v358.__r_.__value_.__l.__cap_ = v96->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0LL;
  v96->__r_.__value_.__l.__cap_ = 0LL;
  v96->__r_.__value_.__r.__words[0] = 0LL;
  int v98 = std::string::append(&v358, "MicroLocationLabels");
  __int128 v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v359.__r_.__value_.__l.__cap_ = v98->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v359.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0LL;
  v98->__r_.__value_.__l.__cap_ = 0LL;
  v98->__r_.__value_.__r.__words[0] = 0LL;
  v100 = std::string::append(&v359, ".");
  __int128 v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v360.__r_.__value_.__l.__cap_ = v100->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0LL;
  v100->__r_.__value_.__l.__cap_ = 0LL;
  v100->__r_.__value_.__r.__words[0] = 0LL;
  v102 = std::string::append(&v360, "ClientID");
  __int128 v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v361.__r_.__value_.__l.__cap_ = v102->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v361.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0LL;
  v102->__r_.__value_.__l.__cap_ = 0LL;
  v102->__r_.__value_.__r.__words[0] = 0LL;
  v104 = std::string::append(&v361, " LIKE '%' || ");
  __int128 v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v362.__r_.__value_.__l.__cap_ = v104->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v362.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0LL;
  v104->__r_.__value_.__l.__cap_ = 0LL;
  v104->__r_.__value_.__r.__words[0] = 0LL;
  if (byte_1019939AF >= 0) {
    v106 = (const std::string::value_type *)&xmmword_101993998;
  }
  else {
    v106 = (const std::string::value_type *)xmmword_101993998;
  }
  if (byte_1019939AF >= 0) {
    std::string::size_type v107 = byte_1019939AF;
  }
  else {
    std::string::size_type v107 = *((void *)&xmmword_101993998 + 1);
  }
  v108 = std::string::append(&v362, v106, v107);
  __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v363.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v363.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0LL;
  v108->__r_.__value_.__l.__cap_ = 0LL;
  v108->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v110 = std::string::append(&v363, " || '%' ");
  __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v364.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v364.__r_.__value_.__l.__data_ = v111;
  v110->__r_.__value_.__l.__size_ = 0LL;
  v110->__r_.__value_.__l.__cap_ = 0LL;
  v110->__r_.__value_.__r.__words[0] = 0LL;
  v112 = std::string::append(&v364, "WHERE UserId==");
  __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v365.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v365.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0LL;
  v112->__r_.__value_.__l.__cap_ = 0LL;
  v112->__r_.__value_.__r.__words[0] = 0LL;
  int v114 = *(char *)(a2 + 23);
  if (v114 >= 0) {
    std::string v115 = (const std::string::value_type *)a2;
  }
  else {
    std::string v115 = *(const std::string::value_type **)a2;
  }
  if (v114 >= 0) {
    std::string::size_type v116 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v116 = *(void *)(a2 + 8);
  }
  std::string v117 = std::string::append(&v365, v115, v116);
  __int128 v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v366.__r_.__value_.__l.__cap_ = v117->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v366.__r_.__value_.__l.__data_ = v118;
  v117->__r_.__value_.__l.__size_ = 0LL;
  v117->__r_.__value_.__l.__cap_ = 0LL;
  v117->__r_.__value_.__r.__words[0] = 0LL;
  std::string v119 = std::string::append(&v366, "");
  __int128 v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  std::string::size_type v416 = v119->__r_.__value_.__l.__cap_;
  __int128 v415 = v120;
  v119->__r_.__value_.__l.__size_ = 0LL;
  v119->__r_.__value_.__l.__cap_ = 0LL;
  v119->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v417, "MiLoServices");
  sub_1010DDBC0(v418, "LastActiveTimestamp");
  char v419 = 1;
  sub_1002F0B04(&v325);
  CFStringRef v121 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsServicesTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v122 = sub_1002A77CC((uint64_t)v325.__r_.__value_.__l.__data_, (uint64_t)v121, &v324);
  CFRelease(v121);
  uint64_t v123 = LODWORD(v324.__r_.__value_.__l.__data_);
  std::string v124 = (std::__shared_weak_count *)v325.__r_.__value_.__l.__size_;
  if (v325.__r_.__value_.__l.__size_)
  {
    std::string v125 = (unint64_t *)(v325.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }

  uint64_t v127 = 256LL;
  if (v122) {
    uint64_t v127 = v123;
  }
  uint64_t v420 = v127;
  sub_1002F0B04(&v325);
  CFStringRef v128 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsServiceTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v129 = sub_1002A77CC((uint64_t)v325.__r_.__value_.__l.__data_, (uint64_t)v128, &v324);
  CFRelease(v128);
  uint64_t v130 = LODWORD(v324.__r_.__value_.__l.__data_);
  uint64_t v131 = (std::__shared_weak_count *)v325.__r_.__value_.__l.__size_;
  if (v325.__r_.__value_.__l.__size_)
  {
    v132 = (unint64_t *)(v325.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }

  uint64_t v134 = 1000LL;
  if (v129) {
    uint64_t v134 = v130;
  }
  uint64_t v421 = v134;
  v322.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v322, "SELECT * FROM OTHER.");
  v135 = std::string::append(&v322, "MiLoServices");
  __int128 v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  v323.__r_.__value_.__l.__cap_ = v135->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v136;
  v135->__r_.__value_.__l.__size_ = 0LL;
  v135->__r_.__value_.__l.__cap_ = 0LL;
  v135->__r_.__value_.__r.__words[0] = 0LL;
  v137 = std::string::append(&v323, " WHERE UserId==");
  __int128 v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  v324.__r_.__value_.__l.__cap_ = v137->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v138;
  v137->__r_.__value_.__l.__size_ = 0LL;
  v137->__r_.__value_.__l.__cap_ = 0LL;
  v137->__r_.__value_.__r.__words[0] = 0LL;
  int v139 = *(char *)(a2 + 23);
  if (v139 >= 0) {
    v140 = (const std::string::value_type *)a2;
  }
  else {
    v140 = *(const std::string::value_type **)a2;
  }
  if (v139 >= 0) {
    std::string::size_type v141 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v141 = *(void *)(a2 + 8);
  }
  v142 = std::string::append(&v324, v140, v141);
  __int128 v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v325.__r_.__value_.__l.__cap_ = v142->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v325.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0LL;
  v142->__r_.__value_.__l.__cap_ = 0LL;
  v142->__r_.__value_.__r.__words[0] = 0LL;
  v144 = std::string::append(&v325, "");
  __int128 v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  std::string::size_type v423 = v144->__r_.__value_.__l.__cap_;
  __int128 v422 = v145;
  v144->__r_.__value_.__l.__size_ = 0LL;
  v144->__r_.__value_.__l.__cap_ = 0LL;
  v144->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v424, "MiLoLoiTable");
  sub_1010DDBC0(v425, "LastSeenTimeStamp");
  char v426 = 1;
  uint64_t v427 = sub_1000367F4();
  sub_1002F0B04(&v321);
  CFStringRef v146 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLoiTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v147 = sub_1002A77CC((uint64_t)v321.__r_.__value_.__l.__data_, (uint64_t)v146, &v320);
  CFRelease(v146);
  uint64_t v148 = LODWORD(v320.__r_.__value_.__l.__data_);
  v149 = (std::__shared_weak_count *)v321.__r_.__value_.__l.__size_;
  if (v321.__r_.__value_.__l.__size_)
  {
    v150 = (unint64_t *)(v321.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }

  uint64_t v152 = 1000LL;
  if (v147) {
    uint64_t v152 = v148;
  }
  uint64_t v428 = v152;
  v319.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v319, "SELECT * FROM OTHER.");
  v153 = std::string::append(&v319, "MiLoLoiTable");
  __int128 v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v320.__r_.__value_.__l.__cap_ = v153->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0LL;
  v153->__r_.__value_.__l.__cap_ = 0LL;
  v153->__r_.__value_.__r.__words[0] = 0LL;
  v155 = std::string::append(&v320, " WHERE LoiId IN ");
  __int128 v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  v321.__r_.__value_.__l.__cap_ = v155->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v156;
  v155->__r_.__value_.__l.__size_ = 0LL;
  v155->__r_.__value_.__l.__cap_ = 0LL;
  v155->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, v317);
  if ((v318 & 0x80u) == 0) {
    v157 = v317;
  }
  else {
    v157 = (void **)v317[0];
  }
  if ((v318 & 0x80u) == 0) {
    std::string::size_type v158 = v318;
  }
  else {
    std::string::size_type v158 = (std::string::size_type)v317[1];
  }
  v159 = std::string::append(&v321, (const std::string::value_type *)v157, v158);
  __int128 v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  std::string::size_type v430 = v159->__r_.__value_.__l.__cap_;
  __int128 v429 = v160;
  v159->__r_.__value_.__l.__size_ = 0LL;
  v159->__r_.__value_.__l.__cap_ = 0LL;
  v159->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v431, "MicroLocationRapport");
  sub_1010DDBC0(v432, "RowId");
  char v433 = 0;
  uint64_t v434 = sub_1000368CC();
  sub_1002F0B04(&v316);
  CFStringRef v161 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsRapportTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v162 = sub_1002A77CC((uint64_t)v316.__r_.__value_.__l.__data_, (uint64_t)v161, &v315);
  CFRelease(v161);
  uint64_t v163 = LODWORD(v315.__r_.__value_.__l.__data_);
  v164 = (std::__shared_weak_count *)v316.__r_.__value_.__l.__size_;
  if (v316.__r_.__value_.__l.__size_)
  {
    v165 = (unint64_t *)(v316.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }

  uint64_t v167 = 1000LL;
  if (v162) {
    uint64_t v167 = v163;
  }
  uint64_t v435 = v167;
  v314.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v314, "SELECT * FROM OTHER.");
  v168 = std::string::append(&v314, "MicroLocationRapport");
  __int128 v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__l.__cap_ = v168->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v169;
  v168->__r_.__value_.__l.__size_ = 0LL;
  v168->__r_.__value_.__l.__cap_ = 0LL;
  v168->__r_.__value_.__r.__words[0] = 0LL;
  v170 = std::string::append(&v315, " WHERE RtLoiGroupId IN ");
  __int128 v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
  v316.__r_.__value_.__l.__cap_ = v170->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v171;
  v170->__r_.__value_.__l.__size_ = 0LL;
  v170->__r_.__value_.__l.__cap_ = 0LL;
  v170->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, v312);
  if ((v313 & 0x80u) == 0) {
    v172 = v312;
  }
  else {
    v172 = (void **)v312[0];
  }
  if ((v313 & 0x80u) == 0) {
    std::string::size_type v173 = v313;
  }
  else {
    std::string::size_type v173 = (std::string::size_type)v312[1];
  }
  v174 = std::string::append(&v316, (const std::string::value_type *)v172, v173);
  __int128 v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
  std::string::size_type v437 = v174->__r_.__value_.__l.__cap_;
  __int128 v436 = v175;
  v174->__r_.__value_.__l.__size_ = 0LL;
  v174->__r_.__value_.__l.__cap_ = 0LL;
  v174->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v438, "MicroLocationAssociatedState");
  sub_1010DDBC0(v439, "RowId");
  char v440 = 0;
  uint64_t v441 = sub_1000369A4();
  sub_1002F0B04(&v311);
  CFStringRef v176 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsAssociatedStateTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v177 = sub_1002A77CC((uint64_t)v311.__r_.__value_.__l.__data_, (uint64_t)v176, &v310);
  CFRelease(v176);
  uint64_t v178 = LODWORD(v310.__r_.__value_.__l.__data_);
  v179 = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
  if (v311.__r_.__value_.__l.__size_)
  {
    v180 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }

  uint64_t v182 = 1000LL;
  if (v177) {
    uint64_t v182 = v178;
  }
  uint64_t v442 = v182;
  v309.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v309, "SELECT * FROM OTHER.");
  v183 = std::string::append(&v309, "MicroLocationAssociatedState");
  __int128 v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v310.__r_.__value_.__l.__cap_ = v183->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0LL;
  v183->__r_.__value_.__l.__cap_ = 0LL;
  v183->__r_.__value_.__r.__words[0] = 0LL;
  v185 = std::string::append(&v310, " WHERE LoiGroupId IN ");
  __int128 v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  v311.__r_.__value_.__l.__cap_ = v185->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v186;
  v185->__r_.__value_.__l.__size_ = 0LL;
  v185->__r_.__value_.__l.__cap_ = 0LL;
  v185->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, v307);
  if ((v308 & 0x80u) == 0) {
    v187 = v307;
  }
  else {
    v187 = (void **)v307[0];
  }
  if ((v308 & 0x80u) == 0) {
    std::string::size_type v188 = v308;
  }
  else {
    std::string::size_type v188 = (std::string::size_type)v307[1];
  }
  v189 = std::string::append(&v311, (const std::string::value_type *)v187, v188);
  __int128 v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  std::string::size_type v444 = v189->__r_.__value_.__l.__cap_;
  __int128 v443 = v190;
  v189->__r_.__value_.__l.__size_ = 0LL;
  v189->__r_.__value_.__l.__cap_ = 0LL;
  v189->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v445, "MicroLocationBluetoothIdentityTable");
  sub_1010DDBC0(v446, "LastSeenTimeStamp");
  char v447 = 1;
  uint64_t v448 = sub_100036A7C();
  sub_1002F0B04(&v306);
  CFStringRef v191 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsBluetoothIdentityTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v192 = sub_1002A77CC((uint64_t)v306.__r_.__value_.__l.__data_, (uint64_t)v191, &v305);
  CFRelease(v191);
  uint64_t v193 = LODWORD(v305.__r_.__value_.__l.__data_);
  v194 = (std::__shared_weak_count *)v306.__r_.__value_.__l.__size_;
  if (v306.__r_.__value_.__l.__size_)
  {
    v195 = (unint64_t *)(v306.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }

  uint64_t v197 = 1000LL;
  if (v192) {
    uint64_t v197 = v193;
  }
  uint64_t v449 = v197;
  v306.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v306, "SELECT * FROM OTHER.");
  v198 = std::string::append(&v306, "MicroLocationBluetoothIdentityTable");
  std::string::size_type v199 = v198->__r_.__value_.__l.__cap_;
  __int128 v450 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
  std::string::size_type v451 = v199;
  v198->__r_.__value_.__l.__size_ = 0LL;
  v198->__r_.__value_.__l.__cap_ = 0LL;
  v198->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v452, "MicroLocationConfiguration");
  sub_1010DDBC0(v453, "GenerationTimestamp");
  char v454 = 1;
  sub_1002F0B04(&v305);
  CFStringRef v200 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsConfigurationTableMigrationLimit",  0x8000100u,  kCFAllocatorNull);
  int v201 = sub_1002A77CC((uint64_t)v305.__r_.__value_.__l.__data_, (uint64_t)v200, &v304);
  CFRelease(v200);
  uint64_t v202 = LODWORD(v304.__r_.__value_.__l.__data_);
  v203 = (std::__shared_weak_count *)v305.__r_.__value_.__l.__size_;
  if (v305.__r_.__value_.__l.__size_)
  {
    v204 = (unint64_t *)(v305.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }

  uint64_t v206 = 100LL;
  if (v201) {
    uint64_t v206 = v202;
  }
  uint64_t v455 = v206;
  sub_1002F0B04(&v305);
  CFStringRef v207 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsConfigurationTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v208 = sub_1002A77CC((uint64_t)v305.__r_.__value_.__l.__data_, (uint64_t)v207, &v304);
  CFRelease(v207);
  uint64_t v209 = LODWORD(v304.__r_.__value_.__l.__data_);
  v210 = (std::__shared_weak_count *)v305.__r_.__value_.__l.__size_;
  if (v305.__r_.__value_.__l.__size_)
  {
    v211 = (unint64_t *)(v305.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }

  uint64_t v213 = 1000LL;
  if (v208) {
    uint64_t v213 = v209;
  }
  uint64_t v456 = v213;
  v303.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v303, "SELECT * FROM OTHER.");
  v214 = std::string::append(&v303, "MicroLocationConfiguration");
  __int128 v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
  v304.__r_.__value_.__l.__cap_ = v214->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v215;
  v214->__r_.__value_.__l.__size_ = 0LL;
  v214->__r_.__value_.__l.__cap_ = 0LL;
  v214->__r_.__value_.__r.__words[0] = 0LL;
  v216 = std::string::append(&v304, " WHERE RtLoiGroupId IN ");
  __int128 v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
  v305.__r_.__value_.__l.__cap_ = v216->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v217;
  v216->__r_.__value_.__l.__size_ = 0LL;
  v216->__r_.__value_.__l.__cap_ = 0LL;
  v216->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, v301);
  if ((v302 & 0x80u) == 0) {
    v218 = v301;
  }
  else {
    v218 = (void **)v301[0];
  }
  if ((v302 & 0x80u) == 0) {
    std::string::size_type v219 = v302;
  }
  else {
    std::string::size_type v219 = (std::string::size_type)v301[1];
  }
  v220 = std::string::append(&v305, (const std::string::value_type *)v218, v219);
  __int128 v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
  std::string::size_type v458 = v220->__r_.__value_.__l.__cap_;
  __int128 v457 = v221;
  v220->__r_.__value_.__l.__size_ = 0LL;
  v220->__r_.__value_.__l.__cap_ = 0LL;
  v220->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v459, "MicroLocationModels");
  sub_1010DDBC0(v460, "RowId");
  char v461 = 0;
  uint64_t v462 = sub_100036B54();
  sub_1002F0B04(&v300);
  CFStringRef v222 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsModelTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v223 = sub_1002A77CC((uint64_t)v300.__r_.__value_.__l.__data_, (uint64_t)v222, &v299);
  CFRelease(v222);
  uint64_t v224 = LODWORD(v299.__r_.__value_.__l.__data_);
  v225 = (std::__shared_weak_count *)v300.__r_.__value_.__l.__size_;
  if (v300.__r_.__value_.__l.__size_)
  {
    v226 = (unint64_t *)(v300.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }

  uint64_t v228 = 2LL;
  if (v223) {
    uint64_t v228 = v224;
  }
  uint64_t v463 = v228;
  v298.__r_.__value_.__s.__size_ = 20;
  strcpy((char *)&v298, "SELECT * FROM OTHER.");
  v229 = std::string::append(&v298, "MicroLocationModels");
  __int128 v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
  v299.__r_.__value_.__l.__cap_ = v229->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v230;
  v229->__r_.__value_.__l.__size_ = 0LL;
  v229->__r_.__value_.__l.__cap_ = 0LL;
  v229->__r_.__value_.__r.__words[0] = 0LL;
  v231 = std::string::append(&v299, " WHERE LoiGroupId IN ");
  __int128 v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
  v300.__r_.__value_.__l.__cap_ = v231->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v232;
  v231->__r_.__value_.__l.__size_ = 0LL;
  v231->__r_.__value_.__l.__cap_ = 0LL;
  v231->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003642C(&v387, __p);
  if ((v297 & 0x80u) == 0) {
    v233 = __p;
  }
  else {
    v233 = (void **)__p[0];
  }
  if ((v297 & 0x80u) == 0) {
    std::string::size_type v234 = v297;
  }
  else {
    std::string::size_type v234 = (std::string::size_type)__p[1];
  }
  v235 = std::string::append(&v300, (const std::string::value_type *)v233, v234);
  __int128 v236 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
  std::string::size_type v465 = v235->__r_.__value_.__l.__cap_;
  __int128 v464 = v236;
  v235->__r_.__value_.__l.__size_ = 0LL;
  v235->__r_.__value_.__l.__cap_ = 0LL;
  v235->__r_.__value_.__r.__words[0] = 0LL;
  sub_1010DDBC0(v466, "MiLoCustomLoiTable");
  sub_1010DDBC0(v467, "LastSeenTimeStamp");
  char v468 = 1;
  uint64_t v469 = sub_1000367F4();
  sub_1002F0B04(&v295);
  CFStringRef v237 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsCustomLoiTableMigrationPageSize",  0x8000100u,  kCFAllocatorNull);
  int v238 = sub_1002A77CC((uint64_t)v295.__r_.__value_.__l.__data_, (uint64_t)v237, &v294);
  CFRelease(v237);
  uint64_t v239 = LODWORD(v294.__r_.__value_.__l.__data_);
  v240 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v241 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }

  uint64_t v243 = 1000LL;
  if (v238) {
    uint64_t v243 = v239;
  }
  uint64_t v470 = v243;
  v289.__r_.__value_.__s.__size_ = 14;
  strcpy((char *)&v289, "   FROM OTHER.");
  v244 = std::string::insert(&v289, 0LL, "SELECT * ");
  __int128 v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
  v290.__r_.__value_.__l.__cap_ = v244->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v245;
  v244->__r_.__value_.__l.__size_ = 0LL;
  v244->__r_.__value_.__l.__cap_ = 0LL;
  v244->__r_.__value_.__r.__words[0] = 0LL;
  v246 = std::string::append(&v290, "MiLoCustomLoiTable");
  __int128 v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
  v291.__r_.__value_.__l.__cap_ = v246->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v247;
  v246->__r_.__value_.__l.__size_ = 0LL;
  v246->__r_.__value_.__l.__cap_ = 0LL;
  v246->__r_.__value_.__r.__words[0] = 0LL;
  v248 = (char *)operator new(0x50uLL);
  strcpy(v248, "   WHERE OTHER.MiLoCustomLoiTable.ServiceId IN (SELECT ServiceUUID FROM OTHER.");
  v249 = std::string::append(&v291, v248, 0x4EuLL);
  __int128 v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
  v292.__r_.__value_.__l.__cap_ = v249->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v250;
  v249->__r_.__value_.__l.__size_ = 0LL;
  v249->__r_.__value_.__l.__cap_ = 0LL;
  v249->__r_.__value_.__r.__words[0] = 0LL;
  v251 = std::string::append(&v292, "MiLoServices");
  __int128 v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
  v293.__r_.__value_.__l.__cap_ = v251->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v252;
  v251->__r_.__value_.__l.__size_ = 0LL;
  v251->__r_.__value_.__l.__cap_ = 0LL;
  v251->__r_.__value_.__r.__words[0] = 0LL;
  v253 = std::string::append(&v293, " WHERE UserId==");
  __int128 v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
  v294.__r_.__value_.__l.__cap_ = v253->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v254;
  v253->__r_.__value_.__l.__size_ = 0LL;
  v253->__r_.__value_.__l.__cap_ = 0LL;
  v253->__r_.__value_.__r.__words[0] = 0LL;
  int v255 = *(char *)(a2 + 23);
  if (v255 >= 0) {
    v256 = (const std::string::value_type *)a2;
  }
  else {
    v256 = *(const std::string::value_type **)a2;
  }
  if (v255 >= 0) {
    std::string::size_type v257 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v257 = *(void *)(a2 + 8);
  }
  v258 = std::string::append(&v294, v256, v257);
  __int128 v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
  v295.__r_.__value_.__l.__cap_ = v258->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v259;
  v258->__r_.__value_.__l.__size_ = 0LL;
  v258->__r_.__value_.__l.__cap_ = 0LL;
  v258->__r_.__value_.__r.__words[0] = 0LL;
  v260 = std::string::append(&v295, ")");
  __int128 v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
  std::string::size_type v472 = v260->__r_.__value_.__l.__cap_;
  __int128 v471 = v261;
  v260->__r_.__value_.__l.__size_ = 0LL;
  v260->__r_.__value_.__l.__cap_ = 0LL;
  v260->__r_.__value_.__r.__words[0] = 0LL;
  v385 = 0LL;
  v384 = 0LL;
  v386 = 0LL;
  v389 = &v384;
  char v390 = 0;
  v384 = (char *)operator new(0x420uLL);
  v385 = v384;
  v386 = v384 + 1056;
  v385 = sub_100039370((uint64_t)&v386, (__int128 *)buf, &v473, v384);
  uint64_t v262 = 1056LL;
  do
  {
    v263 = (void **)&buf[v262];
    v262 -= 96LL;
  }

  while (v262);
  operator delete(v248);
  if (v327 < 0) {
    operator delete(v326[0]);
  }
  if (v329 < 0) {
    operator delete(*(void **)v328);
  }
  if (v331 < 0) {
    operator delete(*(void **)v330);
  }
  if (v333 < 0) {
    operator delete(*(void **)v332);
  }
  if (v335 < 0) {
    operator delete(*(void **)v334);
  }
  if (v337 < 0) {
    operator delete(*(void **)__s);
  }
  operator delete(v286);
  v264 = v384;
  if (v384 == v385)
  {
    uint64_t v278 = 1LL;
    goto LABEL_384;
  }

  while (1)
  {
    v265 = v264[23] >= 0 ? v264 : *(char **)v264;
    int v266 = sub_1003B747C(a1 + 72, v265);
    v267 = v264[23] >= 0 ? v264 : *(char **)v264;
    int v268 = sub_1003B747C(a3 + 72, v267);
    if ((v266 & v268) != 1) {
      break;
    }
    int v269 = v264[48];
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(void *)(a2 + 8))
      {
LABEL_347:
        if (v264[95] < 0)
        {
          sub_1010DD48C(&__dst, *((void **)v264 + 9), *((void *)v264 + 10));
        }

        else
        {
          __int128 v270 = *(_OWORD *)(v264 + 72);
          __dst.__r_.__value_.__l.__cap_ = *((void *)v264 + 11);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v270;
        }

        goto LABEL_359;
      }
    }

    else if (*(_BYTE *)(a2 + 23))
    {
      goto LABEL_347;
    }

    buf[23] = 20;
    strcpy(buf, "SELECT * FROM OTHER.");
    int v271 = v264[23];
    if (v271 >= 0) {
      v272 = v264;
    }
    else {
      v272 = *(const std::string::value_type **)v264;
    }
    if (v271 >= 0) {
      std::string::size_type v273 = v264[23];
    }
    else {
      std::string::size_type v273 = *((void *)v264 + 1);
    }
    v274 = std::string::append((std::string *)buf, v272, v273);
    __int128 v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__l.__cap_ = v274->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v275;
    v274->__r_.__value_.__l.__size_ = 0LL;
    v274->__r_.__value_.__l.__cap_ = 0LL;
    v274->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
LABEL_359:
    uint64_t v276 = *((void *)v264 + 7);
    uint64_t v277 = *((void *)v264 + 8);
    v391[0] = &off_101819230;
    v392 = v391;
    uint64_t v278 = sub_100032030( a1,  a3,  (std::string::size_type)v264,  v264 + 24,  v269 != 0,  (uint64_t)&__dst,  v276,  v277,  (uint64_t)v391);
    v279 = v392;
    if (v392 == v391)
    {
      v279 = v391;
      uint64_t v280 = 4LL;
      goto LABEL_363;
    }

    if (v392)
    {
      uint64_t v280 = 5LL;
LABEL_363:
      (*(void (**)(void))(*v279 + 8 * v280))();
    }

    v264 += 96;
    if (v264 == v385) {
      char v281 = 0;
    }
    else {
      char v281 = v278;
    }
    if ((v281 & 1) == 0) {
      goto LABEL_384;
    }
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101819200);
  }
  v282 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_ERROR))
  {
    v283 = v264;
    if (v264[23] < 0) {
      v283 = *(char **)v264;
    }
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = v283;
    __int16 v394 = 1026;
    int v395 = v266;
    __int16 v396 = 1026;
    int v397 = v268;
    _os_log_impl( (void *)&_mh_execute_header,  v282,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:export using paging, table is missing, TableName:%{public, location:escape_only}s,  ExistsInTargetDB:%{public}hhd, ExistsInSourceDB:%{public}hhd}",  buf,  0x28u);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101819200);
    }
  }

  v284 = (os_log_s *)off_101934A28;
  if (os_signpost_enabled((os_log_t)off_101934A28))
  {
    if (v264[23] < 0) {
      v264 = *(char **)v264;
    }
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2082;
    *(void *)&buf[20] = v264;
    __int16 v394 = 1026;
    int v395 = v266;
    __int16 v396 = 1026;
    int v397 = v268;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v284,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "export using paging, table is missing",  "{msg%{public}.0s:export using paging, table is missing, TableName:%{public, location:escape_only}s,  ExistsInTargetDB:%{public}hhd, ExistsInSourceDB:%{public}hhd}",  buf,  0x28u);
  }

  uint64_t v278 = 0LL;
LABEL_384:
  *(void *)buf = &v384;
  sub_1000395E0((void ***)buf);
  *(void *)buf = v388;
  sub_1000129D4((void ***)buf);
  return v278;
}

void sub_100035424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, void *a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, uint64_t a42, void *a43, uint64_t a44, int a45, __int16 a46, char a47, char a48, uint64_t a49, void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  STACK[0x9C0] = v86;
  sub_1000395E0((void ***)&STACK[0x9F0]);
  for (uint64_t i = 960LL; i != -96; i -= 96LL)
    sub_100036C2C((uint64_t)&STACK[0xA20] + i);
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  operator delete(v85);
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  if (SLOBYTE(STACK[0x7B7]) < 0) {
    operator delete((void *)STACK[0x7A0]);
  }
  if (SLOBYTE(STACK[0x797]) < 0) {
    operator delete((void *)STACK[0x780]);
  }
  if (SLOBYTE(STACK[0x777]) < 0) {
    operator delete((void *)STACK[0x760]);
  }
  if (SLOBYTE(STACK[0x757]) < 0) {
    operator delete((void *)STACK[0x740]);
  }
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  if (SLOBYTE(STACK[0x717]) < 0) {
    operator delete((void *)STACK[0x700]);
  }
  if (SLOBYTE(STACK[0x6F7]) < 0) {
    operator delete((void *)STACK[0x6E0]);
  }
  if (SLOBYTE(STACK[0x6D7]) < 0) {
    operator delete((void *)STACK[0x6C0]);
  }
  if (SLOBYTE(STACK[0x6B7]) < 0) {
    operator delete((void *)STACK[0x6A0]);
  }
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  if (SLOBYTE(STACK[0x677]) < 0) {
    operator delete((void *)STACK[0x660]);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  if (SLOBYTE(STACK[0x657]) < 0) {
    operator delete((void *)STACK[0x640]);
  }
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete((void *)STACK[0x5A0]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x947]) < 0) {
    operator delete((void *)STACK[0x930]);
  }
  if (SLOBYTE(STACK[0x817]) < 0) {
    operator delete((void *)STACK[0x800]);
  }
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (SLOBYTE(STACK[0x907]) < 0) {
    operator delete((void *)STACK[0x8F0]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  operator delete(a11);
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  if (SLOBYTE(STACK[0x8A7]) < 0) {
    operator delete((void *)STACK[0x890]);
  }
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  if (SLOBYTE(STACK[0x867]) < 0) {
    operator delete((void *)STACK[0x850]);
  }
  if (SLOBYTE(STACK[0x847]) < 0) {
    operator delete((void *)STACK[0x830]);
  }
  if (SLOBYTE(STACK[0x82F]) < 0) {
    operator delete((void *)STACK[0x818]);
  }
  if (SLOBYTE(STACK[0x95F]) < 0) {
    operator delete((void *)STACK[0x948]);
  }
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  if (SLOBYTE(STACK[0x997]) < 0) {
    operator delete((void *)STACK[0x980]);
  }
  if (SLOBYTE(STACK[0x977]) < 0) {
    operator delete((void *)STACK[0x960]);
  }
  STACK[0xA20] = (unint64_t)&STACK[0x9D8];
  sub_1000129D4((void ***)&STACK[0xA20]);
  _Unwind_Resume(a1);
}

uint64_t sub_100036354()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 15150LL;
  }
}

void sub_100036414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10003642C(uint64_t **a1@<X0>, void **a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  for (uint64_t i = v4[1]; v5 != i; v5 += 24LL)
  {
    std::operator+<char>(&v15, "", v5);
    unsigned int v7 = std::string::append(&v15, "");
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t cap = v7->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      unsigned int v9 = __p;
    }
    else {
      unsigned int v9 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v10 = HIBYTE(cap);
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string::append(&v14, (const std::string::value_type *)v9, v10);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if (v5 == v4[1] - 24)
    {
      std::string::size_type v11 = 0LL;
      LOBYTE(__p[0]) = 0;
    }

    else
    {
      strcpy((char *)__p, ", ");
      std::string::size_type v11 = 2LL;
    }

    HIBYTE(cap) = v11;
    std::string::append(&v14, (const std::string::value_type *)__p, v11);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size_t size = v14.__r_.__value_.__s.__size_;
  }
  else {
    size_t size = v14.__r_.__value_.__l.__size_;
  }
  sub_1000392EC((uint64_t)a2, size + 2);
  if (size)
  {
    if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v13 = &v14;
    }
    else {
      __int16 v13 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    memmove(a2, v13, size);
  }

  strcpy((char *)a2 + size, "))");
}

void sub_1000365DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100036640()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMeasurementTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 321100LL;
  }
}

void sub_100036704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10003671C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingLabelsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 2500LL;
  }
}

void sub_1000367DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1000367F4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMiLoLoiTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1000LL;
  }
}

void sub_1000368B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1000368CC()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRapportTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1000LL;
  }
}

void sub_10003698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1000369A4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAssociatedStateTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 1000LL;
  }
}

void sub_100036A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100036A7C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsBluetoothIdentityTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 96LL;
  }
}

void sub_100036B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100036B54()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsModelTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 100LL;
  }
}

void sub_100036C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100036C2C(uint64_t a1)
{
  return a1;
}

void sub_100036C80(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100036CAC(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100036CD8()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_100036D0C(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100036D54((_OWORD *)a1, a2);
  return a1;
}

void sub_100036D38(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_1012241B4(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_100036D54(_OWORD *__dst, __int128 *a2)
{
  if (*((_BYTE *)a2 + 24))
  {
    unsigned int v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      std::string __dst = sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
    }

    else
    {
      __int128 v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *std::string __dst = v3;
    }

    v2[24] = 1;
  }

  return __dst;
}

uint64_t sub_100036DAC(uint64_t a1)
{
  if (*(_BYTE *)a1) {
    sub_1003B61CC(*(void *)(a1 + 8));
  }
  return a1;
}

void sub_100036DE0(id a1)
{
  off_101934A28 = os_log_create("com.apple.locationd.Utility", "Database");
}

char *sub_100036E0C(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  std::string::size_type v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    CFStringRef v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1010DD48C(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      CFStringRef v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_100036EC8((uint64_t)v9);
  return v4;
}

void sub_100036EB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100036EC8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100036EFC(a1);
  }
  return a1;
}

void sub_100036EFC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24LL;
  }

void ***sub_100036F40(void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  CFStringRef v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    unint64_t v12 = v11 + 1;
    uint64_t v13 = v8 - (void)*v4;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      std::string v15 = (char *)sub_100037038(v7, v14);
    }
    else {
      std::string v15 = 0LL;
    }
    __int128 v16 = &v15[16 * v11];
    std::string::size_type v17 = &v15[16 * v14];
    *(_OWORD *)__int128 v16 = *a2;
    char v10 = v16 + 16;
    uint64_t v19 = (char *)*v4;
    std::string::size_type v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }

      while (v18 != v19);
      std::string::size_type v18 = (char *)*v4;
    }

    *uint64_t v4 = v16;
    v4[1] = v10;
    void v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }

  else
  {
    *unint64_t v5 = *a2;
    char v10 = v5 + 1;
  }

  v4[1] = v10;
  return a1;
}

void *sub_100037038(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1000070D4();
  }
  return operator new(16 * a2);
}

void sub_10003706C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1000370AC((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_1000370AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64LL)
  {
  }

  a1[1] = v2;
}

void sub_1000370F8(uint64_t *a1)
{
  if (*a1)
  {
    sub_1000370AC(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

_BYTE *sub_100037130(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  __int128 v4 = *a2;
  __int128 v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  __n128 result = (_BYTE *)(v3 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    __n128 result = sub_1010DD48C(result, *((void **)a2 + 5), *((void *)a2 + 6));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 40);
    *(void *)(v3 + 56) = *((void *)a2 + 7);
    *(_OWORD *)__n128 result = v7;
  }

  *(void *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_100037198(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000371A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)v9;
      __int128 v11 = *(_OWORD *)(v9 + 16);
      *(void *)(v8 + 32) = *(void *)(v9 + 32);
      *(_OWORD *)uint64_t v8 = v10;
      *(_OWORD *)(v8 + 16) = v11;
      __int128 v12 = *(_OWORD *)(v9 + 40);
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      *(_OWORD *)(v8 + 40) = v12;
      *(void *)(v9 + 48) = 0LL;
      *(void *)(v9 + 56) = 0LL;
      *(void *)(v9 + 40) = 0LL;
      v8 += 64LL;
      v9 += 64LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + 8) = v8;
  return sub_100037444((uint64_t)&v14, a2, v7, v6);
}

_BYTE *sub_100037224(void *a1, __int128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    __int128 v5 = (__int128 *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v13 = 1LL;
      }
      else {
        unint64_t v13 = (v4 - *a1) >> 5;
      }
      uint64_t v14 = a1[4];
      uint64_t v34 = a1[4];
      std::string v15 = (char *)sub_10001275C(v14, v13);
      std::string::size_type v17 = &v15[64 * (v13 >> 2)];
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2] - v18;
      if (v19)
      {
        __int128 v20 = &v17[v19];
        CFStringRef v21 = &v15[64 * (v13 >> 2)];
        do
        {
          __int128 v22 = *(_OWORD *)v18;
          __int128 v23 = *(_OWORD *)(v18 + 16);
          *((void *)v21 + 4) = *(void *)(v18 + 32);
          *(_OWORD *)CFStringRef v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          __int128 v24 = *(_OWORD *)(v18 + 40);
          *((void *)v21 + 7) = *(void *)(v18 + 56);
          *(_OWORD *)(v21 + 40) = v24;
          *(void *)(v18 + 48) = 0LL;
          *(void *)(v18 + 56) = 0LL;
          *(void *)(v18 + 40) = 0LL;
          v21 += 64;
          v18 += 64LL;
        }

        while (v21 != v20);
        int64x2_t v25 = *(int64x2_t *)(a1 + 1);
      }

      else
      {
        int64x2_t v25 = vdupq_n_s64(v18);
        __int128 v20 = &v15[64 * (v13 >> 2)];
      }

      uint64_t v31 = *a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v32 = v25;
      uint64_t v26 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[64 * v16];
      uint64_t v33 = v26;
      sub_1000377A0((uint64_t)&v31);
      uint64_t v4 = a1[2];
    }

    else
    {
      uint64_t v7 = v6 >> 6;
      BOOL v8 = v6 >> 6 < -1;
      uint64_t v9 = (v6 >> 6) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_1000374E4((uint64_t)&v31, v5, (__int128 *)v4, (uint64_t)&v5[-4 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= v11 << 6;
      a1[2] = v12;
    }
  }

  __int128 v27 = *a2;
  __int128 v28 = a2[1];
  *(void *)(v4 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v27;
  *(_OWORD *)(v4 + 16) = v28;
  __n128 result = (_BYTE *)(v4 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    __n128 result = sub_1010DD48C(result, *((void **)a2 + 5), *((void *)a2 + 6));
  }

  else
  {
    __int128 v30 = *(__int128 *)((char *)a2 + 40);
    *(void *)(v4 + 56) = *((void *)a2 + 7);
    *(_OWORD *)__n128 result = v30;
  }

  a1[2] += 64LL;
  return result;
}

uint64_t sub_100037394(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_100037570(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10003761C(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100037444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      __int128 v10 = *(_OWORD *)(a3 + v7 - 64);
      __int128 v11 = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      uint64_t v12 = (void **)(a4 + v7 - 24);
      __int128 v13 = *(_OWORD *)(v8 - 24);
      *(void *)(a4 + v7 - 8) = *(void *)(v8 - 8);
      *(_OWORD *)uint64_t v12 = v13;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
      v7 -= 64LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

__int128 *sub_1000374E4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      __int128 v8 = v5[1];
      *(void *)(a4 + 32) = *((void *)v5 + 4);
      *(_OWORD *)a4 = v7;
      *(_OWORD *)(a4 + 16) = v8;
      uint64_t v9 = (void **)(a4 + 40);
      __int128 v10 = *(__int128 *)((char *)v5 + 40);
      *(void *)(a4 + 56) = *((void *)v5 + 7);
      *(_OWORD *)uint64_t v9 = v10;
      *((_BYTE *)v5 + 63) = 0;
      *((_BYTE *)v5 + 40) = 0;
      a4 += 64LL;
      v5 += 4;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

uint64_t sub_100037570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v17 = a6;
  *((void *)&v17 + 1) = a7;
  __int128 v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 64);
      __int128 v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      __int128 v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 64LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 64LL;
      a3 -= 64LL;
    }

    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }

  char v15 = 1;
  sub_1000376B0((uint64_t)v14);
  return a6;
}

uint64_t sub_10003761C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      __int128 v5 = *a2;
      __int128 v6 = a2[1];
      *(void *)(v4 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v4 = v5;
      *(_OWORD *)(v4 + 16) = v6;
      __int128 v7 = *(__int128 *)((char *)a2 + 40);
      *(void *)(v4 + 56) = *((void *)a2 + 7);
      *(_OWORD *)(v4 + 40) = v7;
      *((void *)a2 + 6) = 0LL;
      *((void *)a2 + 7) = 0LL;
      *((void *)a2 + 5) = 0LL;
      v4 += 64LL;
      a2 += 4;
    }

    while (a2 != a3);
    uint64_t v12 = v4;
  }

  char v10 = 1;
  sub_100037728((uint64_t)v9);
  return v4;
}

uint64_t sub_1000376B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000376E4(a1);
  }
  return a1;
}

void sub_1000376E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 64LL;
  }

uint64_t sub_100037728(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10003775C(a1);
  }
  return a1;
}

void sub_10003775C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 64LL;
  }

uint64_t sub_1000377A0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1000377D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

std::string *sub_100037828(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        CFStringRef v21 = (__int128 *)&a3[a5];
      }

      else
      {
        CFStringRef v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_100037B94(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }

      sub_1000379E8((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_100037CD4(a3, (std::string *)v21, v5);
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555LL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555LL) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_10000701C(v9, v18);
      }
      else {
        unint64_t v19 = 0LL;
      }
      __int128 v23 = v19;
      __int128 v24 = &v19[24 * v15];
      int64x2_t v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      sub_100037A54(&v23, (__int128 *)a3, a5);
      uint64_t v5 = (std::string *)sub_100037AE4((uint64_t)a1, &v23, (__int128 *)v5);
      sub_100014098((uint64_t)&v23);
    }
  }

  return v5;
}

void sub_1000379C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000379E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24LL;
      *(void *)(v9 + 8) = 0LL;
      *(void *)(v9 + 16) = 0LL;
      *(void *)unint64_t v9 = 0LL;
      v9 += 24LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + 8) = v8;
  return sub_100037C50((uint64_t)&v12, a2, v7, v6);
}

void *sub_100037A54(void *result, __int128 *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        __n128 result = sub_1010DD48C((_BYTE *)v4, *(void **)a2, *((void *)a2 + 1));
      }

      else
      {
        __int128 v8 = *a2;
        *(void *)(v4 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }

      v4 += 24LL;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24LL;
    }

    while (v7);
    uint64_t v4 = v6;
  }

  v3[2] = v4;
  return result;
}

void sub_100037ADC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100037AE4(uint64_t a1, void *a2, __int128 *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_100013F84(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100037D30(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

char *sub_100037B94(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  char v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1010DD48C(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      uint64_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      char v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_100036EC8((uint64_t)v9);
  return v4;
}

void sub_100037C3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100037C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      __int128 v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24LL;
    }

    while (v6 != a2);
  }

  return a3;
}

std::string *sub_100037CD4(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }

  return (std::string *)v4;
}

uint64_t sub_100037D30(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      __int128 v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24LL;
      *((void *)a2 + 1) = 0LL;
      *((void *)a2 + 2) = 0LL;
      *(void *)a2 = 0LL;
      a2 = (__int128 *)((char *)a2 + 24);
    }

    while (a2 != a3);
    uint64_t v10 = v4;
  }

  char v8 = 1;
  sub_100036EC8((uint64_t)v7);
  return v4;
}

uint64_t sub_100037DAC()
{
  unsigned int v0 = sub_100036640();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_100037DF0(v4);
}

uint64_t sub_100037DF0(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationMeasurements");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationMeasurementTable]",  "%s\n",  v4);
  }

  return 0LL;
}

void sub_100037FC0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsDatabaseFreeSpacePercentage", 0x8000100u, kCFAllocatorNull);
  sub_1002A827C(v5, (uint64_t)v0, (float *)&v4);
  CFRelease(v0);
  float v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

void sub_100038084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10003809C()
{
  unsigned int v0 = sub_100036354();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_1000380E0(v4);
}

uint64_t sub_1000380E0(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationRecordingEvents");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRecordingEventsTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_1000382B0()
{
  unsigned int v0 = sub_100036B54();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_1000382F4(v4);
}

uint64_t sub_1000382F4(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationModels");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationModelTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_1000384C4()
{
  unsigned int v0 = sub_1000386D8();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_100038508(v4);
}

uint64_t sub_100038508(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationConfiguration");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationConfigurationTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_1000386D8()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsConfigurationTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 6666LL;
  }
}

void sub_100038798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1000387B0()
{
  unsigned int v0 = sub_1000368CC();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_1000387F4(v4);
}

uint64_t sub_1000387F4(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationRapport");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRapportTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_1000389C4()
{
  unsigned int v0 = sub_10003671C();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_100038A08(v4);
}

uint64_t sub_100038A08(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationLabels");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRecordingLabelsTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_100038BD8()
{
  unsigned int v0 = sub_100038DEC();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_100038C1C(v4);
}

uint64_t sub_100038C1C(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationLoggedEvents");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationLoggedEventsTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_100038DEC()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLoggedEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  unint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 25000LL;
  }
}

void sub_100038EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100038EC4()
{
  unsigned int v0 = sub_1000369A4();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_100038F08(v4);
}

uint64_t sub_100038F08(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationAssociatedState");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationAssociatedStateTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_1000390D8()
{
  unsigned int v0 = sub_100036A7C();
  sub_100037FC0();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_1012241C8();
  return sub_10003911C(v4);
}

uint64_t sub_10003911C(uint64_t a1)
{
  if (sub_1003C1048(a1 + 72)) {
    return sub_100024DEC(a1, "MicroLocationBluetoothIdentityTable");
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  unint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#Warning Attempt to get numEntries without a backing database",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
    v5[0] = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Attempt to get numEntries without a backing database",  v5,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationBluetoothIdentityTable]",  "%s\n",  v4);
  }

  return 0LL;
}

uint64_t sub_1000392EC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000C818();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000LL;
    *(void *)a1 = v6;
  }

  else
  {
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 23) = a2;
  }

  return a1;
}

char *sub_100039370(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  char v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_100039418(v7, v4, v6);
      v6 += 6;
      uint64_t v4 = v12 + 96;
      v12 += 96;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_100039508((uint64_t)v9);
  return v4;
}

void sub_100039404( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_BYTE *sub_100039418(int a1, char *__dst, __int128 *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
  }

  if (*((char *)a3 + 47) < 0)
  {
    sub_1010DD48C(__dst + 24, *((void **)a3 + 3), *((void *)a3 + 4));
  }

  else
  {
    __int128 v6 = *(__int128 *)((char *)a3 + 24);
    *((void *)__dst + 5) = *((void *)a3 + 5);
    *(_OWORD *)(__dst + 24) = v6;
  }

  __int128 v7 = a3[3];
  *((void *)__dst + 8) = *((void *)a3 + 8);
  *((_OWORD *)__dst + 3) = v7;
  __n128 result = __dst + 72;
  __int128 v9 = *(__int128 *)((char *)a3 + 72);
  *((void *)__dst + 11) = *((void *)a3 + 11);
  *(_OWORD *)__n128 result = v9;
  return result;
}

void sub_1000394D4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100039508(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10003953C((uint64_t *)a1);
  }
  return a1;
}

void sub_10003953C(uint64_t *a1)
{
  unsigned int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 96LL;
      sub_10003958C(v5, v3);
    }

    while (v3 != v4);
  }

void sub_10003958C(uint64_t a1, uint64_t a2)
{
}

void sub_1000395E0(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96LL;
        sub_10003958C((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_10003966C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_101819230;
  return result;
}

void sub_100039690(uint64_t a1, void *a2)
{
  *a2 = &off_101819230;
}

uint64_t sub_1000396A8()
{
  return 0LL;
}

uint64_t sub_1000396B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000396EC()
{
}

  ;
}

void sub_100039730( void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_100039750( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_100039764( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

BOOL sub_100039778()
{
  return os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_10003978C()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2264), OS_LOG_TYPE_INFO);
}

  ;
}

BOOL sub_1000397B8()
{
  return os_log_type_enabled(v0, OS_LOG_TYPE_FAULT);
}

BOOL sub_1000397C4()
{
  return os_log_type_enabled(v0, OS_LOG_TYPE_INFO);
}

BOOL sub_1000397D0()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2264));
}

  ;
}

void sub_1000397F0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100039804(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_10003980C()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 16LL))(v0);
}

BOOL sub_10003981C()
{
  return os_log_type_enabled(v0, OS_LOG_TYPE_ERROR);
}

  ;
}

uint64_t sub_100039834()
{
  v237.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v237, " WHERE ");
  uint64_t v0 = std::string::append(&v237, "RecordingTimestamp");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v2 = std::string::append(&v238, " < ? OR ");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v4 = std::string::append(&v239, "RecordingTimestamp");
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v6 = std::string::append(&v240, " > ?");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_101993858 = v6->__r_.__value_.__l.__cap_;
  xmmword_101993848 = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993848, (void *)&_mh_execute_header);
  v236.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v236, "DELETE FROM ");
  uint64_t v8 = std::string::append(&v236, "MicroLocationMeasurements");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  char v10 = std::string::append(&v237, " WHERE RecordingUUID in(SELECT RecordingUUID FROM ");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  char v12 = std::string::append(&v238, "MicroLocationRecordingEvents");
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_101993858 >= 0) {
    unint64_t v14 = (const std::string::value_type *)&xmmword_101993848;
  }
  else {
    unint64_t v14 = (const std::string::value_type *)xmmword_101993848;
  }
  if (qword_101993858 >= 0) {
    std::string::size_type v15 = HIBYTE(qword_101993858);
  }
  else {
    std::string::size_type v15 = *((void *)&xmmword_101993848 + 1);
  }
  unint64_t v16 = std::string::append(&v239, v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v18 = std::string::append(&v240, ")");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_101993870 = v18->__r_.__value_.__l.__cap_;
  xmmword_101993860 = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993860, (void *)&_mh_execute_header);
  v239.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v239, "DELETE FROM ");
  uint64_t v20 = std::string::append(&v239, "MicroLocationRecordingEvents");
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_101993858 >= 0) {
    __int128 v22 = (const std::string::value_type *)&xmmword_101993848;
  }
  else {
    __int128 v22 = (const std::string::value_type *)xmmword_101993848;
  }
  if (qword_101993858 >= 0) {
    std::string::size_type v23 = HIBYTE(qword_101993858);
  }
  else {
    std::string::size_type v23 = *((void *)&xmmword_101993848 + 1);
  }
  __int128 v24 = std::string::append(&v240, v22, v23);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  qword_101993888 = v24->__r_.__value_.__l.__cap_;
  xmmword_101993878 = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993878, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v26 = std::string::append(&v235, "MicroLocationModels");
  __int128 v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v26->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v28 = std::string::append(&v236, " WHERE ");
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v30 = std::string::append(&v237, "GenerationTimestamp");
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  int64x2_t v32 = std::string::append(&v238, " < ? OR ");
  __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0LL;
  v32->__r_.__value_.__l.__cap_ = 0LL;
  v32->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v34 = std::string::append(&v239, "GenerationTimestamp");
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v36 = std::string::append(&v240, " > ?");
  __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  qword_1019938A0 = v36->__r_.__value_.__l.__cap_;
  xmmword_101993890 = v37;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993890, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  __int128 v38 = std::string::append(&v235, "MicroLocationConfiguration");
  __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0LL;
  v38->__r_.__value_.__l.__cap_ = 0LL;
  v38->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v40 = std::string::append(&v236, " WHERE ");
  __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0LL;
  v40->__r_.__value_.__l.__cap_ = 0LL;
  v40->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v42 = std::string::append(&v237, "GenerationTimestamp");
  __int128 v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0LL;
  v42->__r_.__value_.__l.__cap_ = 0LL;
  v42->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v44 = std::string::append(&v238, " < ? OR ");
  __int128 v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v44->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0LL;
  v44->__r_.__value_.__l.__cap_ = 0LL;
  v44->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v46 = std::string::append(&v239, "GenerationTimestamp");
  __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0LL;
  v46->__r_.__value_.__l.__cap_ = 0LL;
  v46->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v48 = std::string::append(&v240, " > ?");
  __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_1019938B8 = v48->__r_.__value_.__l.__cap_;
  xmmword_1019938A8 = v49;
  v48->__r_.__value_.__l.__size_ = 0LL;
  v48->__r_.__value_.__l.__cap_ = 0LL;
  v48->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1019938A8, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  __int128 v50 = std::string::append(&v235, "MicroLocationRapport");
  __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0LL;
  v50->__r_.__value_.__l.__cap_ = 0LL;
  v50->__r_.__value_.__r.__words[0] = 0LL;
  int v52 = std::string::append(&v236, " WHERE ");
  __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0LL;
  v52->__r_.__value_.__l.__cap_ = 0LL;
  v52->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v54 = std::string::append(&v237, "GenerationTimestamp");
  __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v56 = std::string::append(&v238, " < ? OR ");
  __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0LL;
  v56->__r_.__value_.__l.__cap_ = 0LL;
  v56->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v58 = std::string::append(&v239, "GenerationTimestamp");
  __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0LL;
  v58->__r_.__value_.__l.__cap_ = 0LL;
  v58->__r_.__value_.__r.__words[0] = 0LL;
  int v60 = std::string::append(&v240, " > ?");
  __int128 v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  qword_1019938D0 = v60->__r_.__value_.__l.__cap_;
  xmmword_1019938C0 = v61;
  v60->__r_.__value_.__l.__size_ = 0LL;
  v60->__r_.__value_.__l.__cap_ = 0LL;
  v60->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1019938C0, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  std::string::size_type v62 = std::string::append(&v235, "MicroLocationLabels");
  __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0LL;
  v62->__r_.__value_.__l.__cap_ = 0LL;
  v62->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v64 = std::string::append(&v236, " WHERE ");
  __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0LL;
  v64->__r_.__value_.__l.__cap_ = 0LL;
  v64->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v66 = std::string::append(&v237, "ReceivedTimestamp");
  __int128 v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v66->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0LL;
  v66->__r_.__value_.__l.__cap_ = 0LL;
  v66->__r_.__value_.__r.__words[0] = 0LL;
  std::string v68 = std::string::append(&v238, " < ? OR ");
  __int128 v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v68->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0LL;
  v68->__r_.__value_.__l.__cap_ = 0LL;
  v68->__r_.__value_.__r.__words[0] = 0LL;
  std::string v70 = std::string::append(&v239, "ReceivedTimestamp");
  __int128 v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v70->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0LL;
  v70->__r_.__value_.__l.__cap_ = 0LL;
  v70->__r_.__value_.__r.__words[0] = 0LL;
  v72 = std::string::append(&v240, " > ?");
  __int128 v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  qword_1019938E8 = v72->__r_.__value_.__l.__cap_;
  xmmword_1019938D8 = v73;
  v72->__r_.__value_.__l.__size_ = 0LL;
  v72->__r_.__value_.__l.__cap_ = 0LL;
  v72->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1019938D8, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  int v74 = std::string::append(&v235, "MicroLocationLoggedEvents");
  __int128 v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v74->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0LL;
  v74->__r_.__value_.__l.__cap_ = 0LL;
  v74->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v76 = std::string::append(&v236, " WHERE ");
  __int128 v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v76->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0LL;
  v76->__r_.__value_.__l.__cap_ = 0LL;
  v76->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v78 = std::string::append(&v237, "ReceivedTimestamp");
  __int128 v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v78->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0LL;
  v78->__r_.__value_.__l.__cap_ = 0LL;
  v78->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v80 = std::string::append(&v238, " < ? OR ");
  __int128 v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v80->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0LL;
  v80->__r_.__value_.__l.__cap_ = 0LL;
  v80->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v82 = std::string::append(&v239, "ReceivedTimestamp");
  __int128 v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v82->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0LL;
  v82->__r_.__value_.__l.__cap_ = 0LL;
  v82->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v84 = std::string::append(&v240, " > ?");
  __int128 v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  qword_101993900 = v84->__r_.__value_.__l.__cap_;
  xmmword_1019938F0 = v85;
  v84->__r_.__value_.__l.__size_ = 0LL;
  v84->__r_.__value_.__l.__cap_ = 0LL;
  v84->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1019938F0, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  unint64_t v86 = std::string::append(&v235, "MiLoServices");
  __int128 v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v86->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0LL;
  v86->__r_.__value_.__l.__cap_ = 0LL;
  v86->__r_.__value_.__r.__words[0] = 0LL;
  v88 = std::string::append(&v236, " WHERE ");
  __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0LL;
  v88->__r_.__value_.__l.__cap_ = 0LL;
  v88->__r_.__value_.__r.__words[0] = 0LL;
  v90 = std::string::append(&v237, "LastActiveTimestamp");
  __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0LL;
  v90->__r_.__value_.__l.__cap_ = 0LL;
  v90->__r_.__value_.__r.__words[0] = 0LL;
  v92 = std::string::append(&v238, " < ? OR ");
  __int128 v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v92->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0LL;
  v92->__r_.__value_.__l.__cap_ = 0LL;
  v92->__r_.__value_.__r.__words[0] = 0LL;
  v94 = std::string::append(&v239, "LastActiveTimestamp");
  __int128 v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v94->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0LL;
  v94->__r_.__value_.__l.__cap_ = 0LL;
  v94->__r_.__value_.__r.__words[0] = 0LL;
  v96 = std::string::append(&v240, " > ?");
  __int128 v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  qword_101993918 = v96->__r_.__value_.__l.__cap_;
  xmmword_101993908 = v97;
  v96->__r_.__value_.__l.__size_ = 0LL;
  v96->__r_.__value_.__l.__cap_ = 0LL;
  v96->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993908, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  int v98 = std::string::append(&v235, "MicroLocationAssociatedState");
  __int128 v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v98->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0LL;
  v98->__r_.__value_.__l.__cap_ = 0LL;
  v98->__r_.__value_.__r.__words[0] = 0LL;
  v100 = std::string::append(&v236, " WHERE ");
  __int128 v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v100->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0LL;
  v100->__r_.__value_.__l.__cap_ = 0LL;
  v100->__r_.__value_.__r.__words[0] = 0LL;
  v102 = std::string::append(&v237, "Timestamp");
  __int128 v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v102->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0LL;
  v102->__r_.__value_.__l.__cap_ = 0LL;
  v102->__r_.__value_.__r.__words[0] = 0LL;
  v104 = std::string::append(&v238, " < ? OR ");
  __int128 v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v104->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0LL;
  v104->__r_.__value_.__l.__cap_ = 0LL;
  v104->__r_.__value_.__r.__words[0] = 0LL;
  v106 = std::string::append(&v239, "Timestamp");
  __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0LL;
  v106->__r_.__value_.__l.__cap_ = 0LL;
  v106->__r_.__value_.__r.__words[0] = 0LL;
  v108 = std::string::append(&v240, " > ?");
  __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  qword_101993930 = v108->__r_.__value_.__l.__cap_;
  xmmword_101993920 = v109;
  v108->__r_.__value_.__l.__size_ = 0LL;
  v108->__r_.__value_.__l.__cap_ = 0LL;
  v108->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993920, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v110 = std::string::append(&v235, "MiLoLoiTable");
  __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v111;
  v110->__r_.__value_.__l.__size_ = 0LL;
  v110->__r_.__value_.__l.__cap_ = 0LL;
  v110->__r_.__value_.__r.__words[0] = 0LL;
  v112 = std::string::append(&v236, " WHERE ");
  __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0LL;
  v112->__r_.__value_.__l.__cap_ = 0LL;
  v112->__r_.__value_.__r.__words[0] = 0LL;
  int v114 = std::string::append(&v237, "LastSeenTimeStamp");
  __int128 v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v114->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0LL;
  v114->__r_.__value_.__l.__cap_ = 0LL;
  v114->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v116 = std::string::append(&v238, " < ? OR ");
  __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v117;
  v116->__r_.__value_.__l.__size_ = 0LL;
  v116->__r_.__value_.__l.__cap_ = 0LL;
  v116->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v118 = std::string::append(&v239, "LastSeenTimeStamp");
  __int128 v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v118->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v119;
  v118->__r_.__value_.__l.__size_ = 0LL;
  v118->__r_.__value_.__l.__cap_ = 0LL;
  v118->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v120 = std::string::append(&v240, " > ?");
  __int128 v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  qword_101993948 = v120->__r_.__value_.__l.__cap_;
  xmmword_101993938 = v121;
  v120->__r_.__value_.__l.__size_ = 0LL;
  v120->__r_.__value_.__l.__cap_ = 0LL;
  v120->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993938, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  int v122 = std::string::append(&v235, "MiLoCustomLoiTable");
  __int128 v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v122->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0LL;
  v122->__r_.__value_.__l.__cap_ = 0LL;
  v122->__r_.__value_.__r.__words[0] = 0LL;
  std::string v124 = std::string::append(&v236, " WHERE ");
  __int128 v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v124->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v125;
  v124->__r_.__value_.__l.__size_ = 0LL;
  v124->__r_.__value_.__l.__cap_ = 0LL;
  v124->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v126 = std::string::append(&v237, "LastSeenTimeStamp");
  __int128 v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v126->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0LL;
  v126->__r_.__value_.__l.__cap_ = 0LL;
  v126->__r_.__value_.__r.__words[0] = 0LL;
  CFStringRef v128 = std::string::append(&v238, " < ? OR ");
  __int128 v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v128->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0LL;
  v128->__r_.__value_.__l.__cap_ = 0LL;
  v128->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v130 = std::string::append(&v239, "LastSeenTimeStamp");
  __int128 v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v130->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0LL;
  v130->__r_.__value_.__l.__cap_ = 0LL;
  v130->__r_.__value_.__r.__words[0] = 0LL;
  v132 = std::string::append(&v240, " > ?");
  __int128 v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  qword_101993960 = v132->__r_.__value_.__l.__cap_;
  xmmword_101993950 = v133;
  v132->__r_.__value_.__l.__size_ = 0LL;
  v132->__r_.__value_.__l.__cap_ = 0LL;
  v132->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993950, (void *)&_mh_execute_header);
  v235.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v134 = std::string::append(&v235, "MicroLocationBluetoothIdentityTable");
  __int128 v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v134->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v135;
  v134->__r_.__value_.__l.__size_ = 0LL;
  v134->__r_.__value_.__l.__cap_ = 0LL;
  v134->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v136 = std::string::append(&v236, " WHERE ");
  __int128 v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v136->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0LL;
  v136->__r_.__value_.__l.__cap_ = 0LL;
  v136->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v138 = std::string::append(&v237, "LastSeenTimeStamp");
  __int128 v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v138->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0LL;
  v138->__r_.__value_.__l.__cap_ = 0LL;
  v138->__r_.__value_.__r.__words[0] = 0LL;
  v140 = std::string::append(&v238, " < ? OR ");
  __int128 v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v140->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v141;
  v140->__r_.__value_.__l.__size_ = 0LL;
  v140->__r_.__value_.__l.__cap_ = 0LL;
  v140->__r_.__value_.__r.__words[0] = 0LL;
  v142 = std::string::append(&v239, "LastSeenTimeStamp");
  __int128 v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v142->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0LL;
  v142->__r_.__value_.__l.__cap_ = 0LL;
  v142->__r_.__value_.__r.__words[0] = 0LL;
  v144 = std::string::append(&v240, " > ?");
  __int128 v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  qword_101993978 = v144->__r_.__value_.__l.__cap_;
  xmmword_101993968 = v145;
  v144->__r_.__value_.__l.__size_ = 0LL;
  v144->__r_.__value_.__l.__cap_ = 0LL;
  v144->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993968, (void *)&_mh_execute_header);
  CFStringRef v146 = (std::string *)sub_1010DDBC0(&v239, "MicroLocationLabels");
  int v147 = std::string::append(v146, ".");
  __int128 v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v147->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v148;
  v147->__r_.__value_.__l.__size_ = 0LL;
  v147->__r_.__value_.__l.__cap_ = 0LL;
  v147->__r_.__value_.__r.__words[0] = 0LL;
  v149 = std::string::append(&v240, "ClientID");
  __int128 v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
  qword_101993990 = v149->__r_.__value_.__l.__cap_;
  xmmword_101993980 = v150;
  v149->__r_.__value_.__l.__size_ = 0LL;
  v149->__r_.__value_.__l.__cap_ = 0LL;
  v149->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993980, (void *)&_mh_execute_header);
  unint64_t v151 = (std::string *)sub_1010DDBC0(&v239, "MiLoServices");
  uint64_t v152 = std::string::append(v151, ".");
  __int128 v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v152->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0LL;
  v152->__r_.__value_.__l.__cap_ = 0LL;
  v152->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v154 = std::string::append(&v240, "ServiceUUID");
  __int128 v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  unk_1019939A8 = v154->__r_.__value_.__l.__cap_;
  xmmword_101993998 = v155;
  v154->__r_.__value_.__l.__size_ = 0LL;
  v154->__r_.__value_.__l.__cap_ = 0LL;
  v154->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101993998, (void *)&_mh_execute_header);
  __int128 v156 = (std::string *)sub_1010DDBC0(&v239, "MiLoServices");
  v157 = std::string::append(v156, ".");
  __int128 v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v157->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0LL;
  v157->__r_.__value_.__l.__cap_ = 0LL;
  v157->__r_.__value_.__r.__words[0] = 0LL;
  v159 = std::string::append(&v240, "ServiceType");
  __int128 v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  qword_1019939C0 = v159->__r_.__value_.__l.__cap_;
  xmmword_1019939B0 = v160;
  v159->__r_.__value_.__l.__size_ = 0LL;
  v159->__r_.__value_.__l.__cap_ = 0LL;
  v159->__r_.__value_.__r.__words[0] = 0LL;
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1019939B0, (void *)&_mh_execute_header);
  v219.__r_.__value_.__s.__size_ = 12;
  strcpy((char *)&v219, "DELETE FROM ");
  CFStringRef v161 = std::string::append(&v219, "MicroLocationLabels");
  __int128 v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__l.__cap_ = v161->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v162;
  v161->__r_.__value_.__l.__size_ = 0LL;
  v161->__r_.__value_.__l.__cap_ = 0LL;
  v161->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v163 = std::string::append(&v220, " WHERE (");
  __int128 v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__l.__cap_ = v163->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v164;
  v163->__r_.__value_.__l.__size_ = 0LL;
  v163->__r_.__value_.__l.__cap_ = 0LL;
  v163->__r_.__value_.__r.__words[0] = 0LL;
  v165 = std::string::append(&v221, "ReceivedTimestamp");
  __int128 v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__l.__cap_ = v165->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v166;
  v165->__r_.__value_.__l.__size_ = 0LL;
  v165->__r_.__value_.__l.__cap_ = 0LL;
  v165->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v167 = std::string::append(&v222, " < ? OR ");
  __int128 v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__l.__cap_ = v167->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v168;
  v167->__r_.__value_.__l.__size_ = 0LL;
  v167->__r_.__value_.__l.__cap_ = 0LL;
  v167->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v169 = std::string::append(&v223, "ReceivedTimestamp");
  __int128 v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__l.__cap_ = v169->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v170;
  v169->__r_.__value_.__l.__size_ = 0LL;
  v169->__r_.__value_.__l.__cap_ = 0LL;
  v169->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v171 = std::string::append(&v224, " > ?) AND ");
  __int128 v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__l.__cap_ = v171->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v172;
  v171->__r_.__value_.__l.__size_ = 0LL;
  v171->__r_.__value_.__l.__cap_ = 0LL;
  v171->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_101993990 >= 0) {
    std::string::size_type v173 = (const std::string::value_type *)&xmmword_101993980;
  }
  else {
    std::string::size_type v173 = (const std::string::value_type *)xmmword_101993980;
  }
  if (qword_101993990 >= 0) {
    std::string::size_type v174 = HIBYTE(qword_101993990);
  }
  else {
    std::string::size_type v174 = *((void *)&xmmword_101993980 + 1);
  }
  __int128 v175 = std::string::append(&v225, v173, v174);
  __int128 v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__l.__cap_ = v175->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0LL;
  v175->__r_.__value_.__l.__cap_ = 0LL;
  v175->__r_.__value_.__r.__words[0] = 0LL;
  int v177 = std::string::append(&v226, " IN (SELECT ");
  __int128 v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__l.__cap_ = v177->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0LL;
  v177->__r_.__value_.__l.__cap_ = 0LL;
  v177->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_101993990 >= 0) {
    v179 = (const std::string::value_type *)&xmmword_101993980;
  }
  else {
    v179 = (const std::string::value_type *)xmmword_101993980;
  }
  if (qword_101993990 >= 0) {
    std::string::size_type v180 = HIBYTE(qword_101993990);
  }
  else {
    std::string::size_type v180 = *((void *)&xmmword_101993980 + 1);
  }
  unint64_t v181 = std::string::append(&v227, v179, v180);
  __int128 v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__l.__cap_ = v181->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v182;
  v181->__r_.__value_.__l.__size_ = 0LL;
  v181->__r_.__value_.__l.__cap_ = 0LL;
  v181->__r_.__value_.__r.__words[0] = 0LL;
  v183 = std::string::append(&v228, " FROM ");
  __int128 v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__l.__cap_ = v183->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0LL;
  v183->__r_.__value_.__l.__cap_ = 0LL;
  v183->__r_.__value_.__r.__words[0] = 0LL;
  v185 = std::string::append(&v229, "MicroLocationLabels");
  __int128 v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  v230.__r_.__value_.__l.__cap_ = v185->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v186;
  v185->__r_.__value_.__l.__size_ = 0LL;
  v185->__r_.__value_.__l.__cap_ = 0LL;
  v185->__r_.__value_.__r.__words[0] = 0LL;
  v187 = std::string::append(&v230, " INNER JOIN ");
  __int128 v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__l.__cap_ = v187->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v188;
  v187->__r_.__value_.__l.__size_ = 0LL;
  v187->__r_.__value_.__l.__cap_ = 0LL;
  v187->__r_.__value_.__r.__words[0] = 0LL;
  v189 = std::string::append(&v231, "MiLoServices");
  __int128 v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__l.__cap_ = v189->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v190;
  v189->__r_.__value_.__l.__size_ = 0LL;
  v189->__r_.__value_.__l.__cap_ = 0LL;
  v189->__r_.__value_.__r.__words[0] = 0LL;
  CFStringRef v191 = std::string::append(&v232, " ON ");
  __int128 v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__l.__cap_ = v191->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v192;
  v191->__r_.__value_.__l.__size_ = 0LL;
  v191->__r_.__value_.__l.__cap_ = 0LL;
  v191->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_101993990 >= 0) {
    uint64_t v193 = (const std::string::value_type *)&xmmword_101993980;
  }
  else {
    uint64_t v193 = (const std::string::value_type *)xmmword_101993980;
  }
  if (qword_101993990 >= 0) {
    std::string::size_type v194 = HIBYTE(qword_101993990);
  }
  else {
    std::string::size_type v194 = *((void *)&xmmword_101993980 + 1);
  }
  v195 = std::string::append(&v233, v193, v194);
  __int128 v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__l.__cap_ = v195->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v196;
  v195->__r_.__value_.__l.__size_ = 0LL;
  v195->__r_.__value_.__l.__cap_ = 0LL;
  v195->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v197 = std::string::append(&v234, " LIKE '%--' || ");
  __int128 v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__l.__cap_ = v197->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v198;
  v197->__r_.__value_.__l.__size_ = 0LL;
  v197->__r_.__value_.__l.__cap_ = 0LL;
  v197->__r_.__value_.__r.__words[0] = 0LL;
  if (byte_1019939AF >= 0) {
    std::string::size_type v199 = (const std::string::value_type *)&xmmword_101993998;
  }
  else {
    std::string::size_type v199 = (const std::string::value_type *)xmmword_101993998;
  }
  if (byte_1019939AF >= 0) {
    std::string::size_type v200 = byte_1019939AF;
  }
  else {
    std::string::size_type v200 = *((void *)&xmmword_101993998 + 1);
  }
  int v201 = std::string::append(&v235, v199, v200);
  __int128 v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__l.__cap_ = v201->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v202;
  v201->__r_.__value_.__l.__size_ = 0LL;
  v201->__r_.__value_.__l.__cap_ = 0LL;
  v201->__r_.__value_.__r.__words[0] = 0LL;
  v203 = std::string::append(&v236, " WHERE ");
  __int128 v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__l.__cap_ = v203->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v204;
  v203->__r_.__value_.__l.__size_ = 0LL;
  v203->__r_.__value_.__l.__cap_ = 0LL;
  v203->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_1019939C0 >= 0) {
    unint64_t v205 = (const std::string::value_type *)&xmmword_1019939B0;
  }
  else {
    unint64_t v205 = (const std::string::value_type *)xmmword_1019939B0;
  }
  if (qword_1019939C0 >= 0) {
    std::string::size_type v206 = HIBYTE(qword_1019939C0);
  }
  else {
    std::string::size_type v206 = *((void *)&xmmword_1019939B0 + 1);
  }
  CFStringRef v207 = std::string::append(&v237, v205, v206);
  __int128 v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__l.__cap_ = v207->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v208;
  v207->__r_.__value_.__l.__size_ = 0LL;
  v207->__r_.__value_.__l.__cap_ = 0LL;
  v207->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v209 = std::string::append(&v238, " = ");
  __int128 v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__l.__cap_ = v209->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v210;
  v209->__r_.__value_.__l.__size_ = 0LL;
  v209->__r_.__value_.__l.__cap_ = 0LL;
  v209->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&__p, 4uLL);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v213 = std::string::append(&v239, (const std::string::value_type *)p_p, size);
  __int128 v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__l.__cap_ = v213->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v214;
  v213->__r_.__value_.__l.__size_ = 0LL;
  v213->__r_.__value_.__l.__cap_ = 0LL;
  v213->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v215 = std::string::append(&v240, ")");
  __int128 v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
  unk_1019939D8 = v215->__r_.__value_.__l.__cap_;
  xmmword_1019939C8 = v216;
  v215->__r_.__value_.__l.__size_ = 0LL;
  v215->__r_.__value_.__l.__cap_ = 0LL;
  v215->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1019939C8,  (void *)&_mh_execute_header);
}

void sub_10003B2E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_10003B6B4()
{
}

void sub_10003B728()
{
}

void sub_10003B784(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934B10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934B10))
  {
    sub_10003E560((std::string *)&xmmword_101934AF8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934AF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934B10);
  }

  if (byte_101934B0F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934AF8, *((unint64_t *)&xmmword_101934AF8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934AF8;
    *(void *)(a1 + 16) = unk_101934B08;
  }

void sub_10003B834(_Unwind_Exception *a1)
{
}

void sub_10003B84C(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934B30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934B30))
  {
    sub_100012F3C((std::string *)&xmmword_101934B18);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934B18, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934B30);
  }

  if (byte_101934B2F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934B18, *((unint64_t *)&xmmword_101934B18 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934B18;
    *(void *)(a1 + 16) = unk_101934B28;
  }

void sub_10003B8FC(_Unwind_Exception *a1)
{
}

uint64_t sub_10003B914(uint64_t a1, __int128 *a2, uint64_t a3, _OWORD *a4, void *a5)
{
  *(void *)a1 = *a5;
  __int128 v7 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  sub_10008CAF8(a1 + 32, a3);
  *(_OWORD *)(a1 + 64) = *a4;
  return a1;
}

void sub_10003B978(_Unwind_Exception *exception_object)
{
}

void sub_10003B998(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_10003BDB8(a1);
    sub_1003B59A0(*a1, "MicroLocationRapport", (const char **)&off_1018192D0, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationRapport");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      uint64_t v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        char v12 = "MicroLocationRapport";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_1018192B0);
        }
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %s",  &v9);
LABEL_19:
        __int128 v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationRapportTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      uint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        char v12 = "MicroLocationRapport";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_1018192B0);
        }
        int v9 = 136446210;
        char v10 = "MicroLocationRapport";
        __int128 v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationRapportTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018192B0);
    }
    __int128 v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Database is not connected so we can't intialize our CLMicroLocationRapportTable",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Database is not connected so we can't intialize our CLMicroLocationRapportTable");
      goto LABEL_19;
    }
  }

uint64_t sub_10003BD8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10003B998((uint64_t *)a1);
  return a1;
}

uint64_t sub_10003BDB8(uint64_t *a1)
{
  uint64_t result = sub_1003B747C(*a1, "MicroLocationRapport");
  if ((_DWORD)result) {
    return sub_10000C98C(*a1, (uint64_t)&off_1018192D0, 5LL, "MicroLocationRapport");
  }
  return result;
}

uint64_t sub_10003BE0C(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_1019939F7 >= 0) {
      uint64_t v5 = (char *)&xmmword_1019939E0;
    }
    else {
      uint64_t v5 = (char *)xmmword_1019939E0;
    }
    sub_1003C0D54(v4, v5, &v36);
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      while (1)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v36);
        double v9 = *(double *)v7;
        __int128 v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v7 + 32, &v33);
        char v10 = v35 >= 0 ? &v33 : (void **)v33;
        uint64_t v11 = v35 >= 0 ? HIBYTE(v35) : v34;
        char v12 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v10, v11);
        if (*(_BYTE *)(v7 + 64))
        {
LABEL_13:
          memset(&__p, 0, sizeof(__p));
          if ((sub_100013090(v7 + 64, &__p) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&buf);
            *(void *)&__int128 buf = &off_101818CB0;
            sub_1000139B0((uint64_t)&buf);
          }
        }

        else
        {
          uint64_t v13 = 65LL;
          while (v13 != 80)
          {
            if (*(unsigned __int8 *)(v7 + v13++))
            {
              break;
            }
          }

          sub_1010DDBC0(&__p, "");
        }

        if (!sub_1003B7480(v8, 1, v9)) {
          break;
        }
        std::string::size_type v15 = (char *)(v7 + 8);
        if (!sub_1003BC1F0(v8, 2, v15) || !sub_1003C2F58(v8, 3, v12)) {
          break;
        }
        unint64_t v16 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_1018192B0);
          }
          __int128 v21 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_1019939F7 >= 0) {
              __int128 v22 = &xmmword_1019939E0;
            }
            else {
              __int128 v22 = (__int128 *)xmmword_1019939E0;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_1018192B0);
            }
            if (byte_1019939F7 >= 0) {
              std::string::size_type v23 = &xmmword_1019939E0;
            }
            else {
              std::string::size_type v23 = (__int128 *)xmmword_1019939E0;
            }
            int v37 = 136446210;
            __int128 v38 = v23;
            LODWORD(v31) = 12;
            __int128 v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v37,  v31);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRapportTable::insertOrReplace(const std::vector<CLMicroLocationRapportTable::Entry> &)",  "%s\n",  v24);
          }

LABEL_40:
          uint64_t v17 = 0LL;
          goto LABEL_41;
        }

        uint64_t v17 = 1LL;
LABEL_41:
        if (SHIBYTE(v35) < 0) {
          operator delete(v33);
        }
        v7 += 80LL;
        if (v7 == v6) {
          char v20 = 0;
        }
        else {
          char v20 = v17;
        }
        if ((v20 & 1) == 0) {
          goto LABEL_79;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      unint64_t v18 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_1019939F7 >= 0) {
          __int128 v19 = &xmmword_1019939E0;
        }
        else {
          __int128 v19 = (__int128 *)xmmword_1019939E0;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_1018192B0);
        }
        if (byte_1019939F7 >= 0) {
          __int128 v25 = &xmmword_1019939E0;
        }
        else {
          __int128 v25 = (__int128 *)xmmword_1019939E0;
        }
        int v37 = 136380675;
        __int128 v38 = v25;
        LODWORD(v31) = 12;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v37,  v31);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRapportTable::insertOrReplace(const std::vector<CLMicroLocationRapportTable::Entry> &)",  "%s\n",  v26);
      }

      sqlite3_reset(v8);
      goto LABEL_40;
    }

    uint64_t v17 = 1LL;
LABEL_79:
    uint64_t v28 = v36;
    uint64_t v36 = 0LL;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018192B0);
    }
    __int128 v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      LOWORD(v33) = 0;
      __int128 v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v33,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRapportTable::insertOrReplace(const std::vector<CLMicroLocationRapportTable::Entry> &)",  "%s\n",  v30);
    }

    return 0LL;
  }

  return v17;
}

  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

  double v9 = *(void *)(v5 + 24);
  if (!v9) {
    double v9 = *(void *)(qword_1019A0978 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 48),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  (int)a2,  *(double *)(v5 + 120),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  uint64_t result = *(double *)(a2 + 112);
  *(_DWORD *)(a1 + 132) |= 0x2000u;
  *(double *)(a1 + 112) = result;
  if ((*(_DWORD *)(a2 + 132) & 0x4000) == 0) {
    return result;
  }
LABEL_21:
  uint64_t result = *(double *)(a2 + 120);
  *(_DWORD *)(a1 + 132) |= 0x4000u;
  *(double *)(a1 + 120) = result;
  return result;
}

  uint64_t result = *(double *)(a2 + 112);
  *(_DWORD *)(a1 + 132) |= 0x2000u;
  *(double *)(a1 + 112) = result;
  if ((*(_DWORD *)(a2 + 132) & 0x4000) == 0) {
    return result;
  }
LABEL_21:
  uint64_t result = *(double *)(a2 + 120);
  *(_DWORD *)(a1 + 132) |= 0x4000u;
  *(double *)(a1 + 120) = result;
  return result;
}

  *(void *)(v127 + 8) = v120;
  CFStringRef v128 = qword_1019A0C68;
  if (!qword_1019A0C68)
  {
    __int128 v113 = sub_1001D0A48(v113);
    __int128 v120 = qword_1019A0B40;
    CFStringRef v128 = qword_1019A0C68;
  }

  *(void *)(v127 + 16) = v128;
  __int128 v129 = qword_1019A0C78;
  if (v120)
  {
    *(void *)(qword_1019A0C78 + 8) = v120;
    uint64_t v130 = qword_1019A0C80;
  }

  else
  {
    __int128 v113 = sub_1001D0A48(v113);
    __int128 v120 = qword_1019A0B40;
    *(void *)(v129 + 8) = qword_1019A0B40;
    uint64_t v130 = qword_1019A0C80;
    if (!v120)
    {
      __int128 v113 = sub_1001D0A48(v113);
      __int128 v120 = qword_1019A0B40;
    }
  }

  *(void *)(v130 + 8) = v120;
  __int128 v131 = qword_1019A0C78;
  if (!qword_1019A0C78)
  {
    __int128 v113 = sub_1001D0A48(v113);
    __int128 v120 = qword_1019A0B40;
    __int128 v131 = qword_1019A0C78;
  }

  *(void *)(v130 + 16) = v131;
  v132 = qword_1019A0C90;
  if (v120)
  {
    *(void *)(qword_1019A0C90 + 8) = v120;
    __int128 v133 = &dword_1019A0000;
    uint64_t v134 = &dword_1019A0000;
    __int128 v135 = &dword_1019A0000;
LABEL_51:
    *(void *)(v132 + 16) = v120;
    __int128 v136 = qword_1019A0C98;
    *(void *)(qword_1019A0C98 + 8) = v120;
    goto LABEL_52;
  }

  __int128 v113 = sub_1001D0A48(v113);
  __int128 v120 = qword_1019A0B40;
  *(void *)(v132 + 8) = qword_1019A0B40;
  __int128 v133 = &dword_1019A0000;
  uint64_t v134 = &dword_1019A0000;
  __int128 v135 = &dword_1019A0000;
  if (v120) {
    goto LABEL_51;
  }
  __int128 v113 = sub_1001D0A48(v113);
  __int128 v120 = qword_1019A0B40;
  *(void *)(v132 + 16) = qword_1019A0B40;
  __int128 v136 = qword_1019A0C98;
  if (v120)
  {
    *(void *)(qword_1019A0C98 + 8) = v120;
    *(void *)(v136 + 16) = v120;
    __int128 v137 = &dword_1019A0000;
    goto LABEL_53;
  }

  __int128 v113 = sub_1001D0A48(v113);
  __int128 v120 = qword_1019A0B40;
  *(void *)(v136 + 8) = qword_1019A0B40;
  if (v120)
  {
LABEL_52:
    __int128 v137 = &dword_1019A0000;
    *(void *)(v136 + 16) = v120;
LABEL_53:
    __int128 v138 = (void *)*((void *)v137 + 406);
    goto LABEL_54;
  }

  __int128 v113 = sub_1001D0A48(v113);
  __int128 v120 = qword_1019A0B40;
  *(void *)(v136 + 16) = qword_1019A0B40;
  __int128 v138 = (void *)qword_1019A0CB0;
  if (!v120)
  {
    __int128 v113 = sub_1001D0A48(v113);
    __int128 v120 = qword_1019A0B40;
  }

  uint64_t result = *(double *)(a2 + 96);
  *(_DWORD *)(a1 + 124) |= 0x1000u;
  *(double *)(a1 + 96) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 124);
  if ((v6 & 0x2000) == 0)
  {
LABEL_20:
    if ((v6 & 0x4000) == 0) {
      return result;
    }
    goto LABEL_21;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  uint64_t v17 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    uint64_t v17 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t v5 = v17 + 9;
  }
  else {
    uint64_t v5 = v17;
  }
  if ((v3 & 0x40) != 0)
  {
    unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v18 >= 0x80)
    {
      __int128 v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
      char v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      __int128 v19 = 1;
    }

    uint64_t v5 = (v5 + v19 + 1);
  }

  if ((v3 & 0x80) != 0)
  {
    char v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if (v20 >= 0x80)
    {
      __int128 v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
      char v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      __int128 v21 = 1;
    }

    uint64_t v5 = (v5 + v21 + 1);
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

    *(_DWORD *)(v89 + 296) = v5;
    uint64_t v85 = v5;
    char v10 = v5;
LABEL_44:
    if (v9 != -1) {
      break;
    }
LABEL_45:
    ++v5;
  }

  while (v5 != v8);
  uint64_t v1 = v89;
  if (v85 != -1 && v84 != -1)
  {
    if (byte_101993D07 >= 0) {
      __int128 v21 = &qword_101993CF0;
    }
    else {
      __int128 v21 = (uint64_t *)qword_101993CF0;
    }
    __int128 v22 = v92;
    if ((unint64_t)v92 >= v93)
    {
      uint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v92 - (_BYTE *)v91) >> 4);
      int v37 = v36 + 1;
      if (v36 + 1 > 0x555555555555555LL) {
        sub_100007008();
      }
      else {
        __int128 v38 = v37;
      }
      if (v38) {
        __int128 v39 = (char *)sub_1000BB1F4((uint64_t)&v93, v38);
      }
      else {
        __int128 v39 = 0LL;
      }
      __int128 v40 = &v39[48 * v36];
      __int128 v41 = &v39[48 * v38];
      *(void *)__int128 v40 = v21;
      *((_DWORD *)v40 + 2) = 3;
      *((_WORD *)v40 + 6) = 0;
      v40[16] = 0;
      v40[40] = 0;
      std::string::size_type v23 = v40 + 48;
      __int128 v43 = (char *)v91;
      __int128 v42 = v92;
      if (v92 != v91)
      {
        do
        {
          __int128 v44 = *((_OWORD *)v42 - 3);
          __int128 v45 = *((_OWORD *)v42 - 1);
          *((_OWORD *)v40 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v40 - 1) = v45;
          *((_OWORD *)v40 - 3) = v44;
          v40 -= 48;
          v42 -= 48;
        }

        while (v42 != v43);
        __int128 v42 = v43;
      }

      __int128 v91 = v40;
      v92 = v23;
      __int128 v93 = (unint64_t)v41;
      if (v42) {
        operator delete(v42);
      }
    }

    else
    {
      *(void *)v92 = v21;
      *((_DWORD *)v22 + 2) = 3;
      *((_WORD *)v22 + 6) = 0;
      v22[16] = 0;
      std::string::size_type v23 = v22 + 48;
      v22[40] = 0;
    }

    v92 = v23;
    if (byte_101993CEF >= 0) {
      std::string::size_type v46 = &qword_101993CD8;
    }
    else {
      std::string::size_type v46 = (uint64_t *)qword_101993CD8;
    }
    if ((unint64_t)v23 >= v93)
    {
      __int128 v49 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (_BYTE *)v91) >> 4);
      if (v49 + 1 > 0x555555555555555LL) {
        sub_100007008();
      }
      __int128 v50 = 0x5555555555555556LL * ((uint64_t)(v93 - (void)v91) >> 4);
      if (v50 <= v49 + 1) {
        __int128 v50 = v49 + 1;
      }
      else {
        __int128 v51 = v50;
      }
      if (v51) {
        int v52 = (char *)sub_1000BB1F4((uint64_t)&v93, v51);
      }
      else {
        int v52 = 0LL;
      }
      __int128 v53 = &v52[48 * v49];
      BOOL v54 = &v52[48 * v51];
      *(void *)__int128 v53 = v46;
      *((_DWORD *)v53 + 2) = 4;
      *((_WORD *)v53 + 6) = 0;
      v53[16] = 0;
      v53[40] = 0;
      __int128 v48 = v53 + 48;
      unint64_t v56 = (char *)v91;
      __int128 v55 = v92;
      if (v92 != v91)
      {
        do
        {
          __int128 v57 = *((_OWORD *)v55 - 3);
          uint64_t v58 = *((_OWORD *)v55 - 1);
          *((_OWORD *)v53 - 2) = *((_OWORD *)v55 - 2);
          *((_OWORD *)v53 - 1) = v58;
          *((_OWORD *)v53 - 3) = v57;
          v53 -= 48;
          v55 -= 48;
        }

        while (v55 != v56);
        __int128 v55 = v56;
      }

      __int128 v91 = v53;
      v92 = v48;
      __int128 v93 = (unint64_t)v54;
      if (v55) {
        operator delete(v55);
      }
    }

    else
    {
      *(void *)std::string::size_type v23 = v46;
      *((_DWORD *)v23 + 2) = 4;
      *((_WORD *)v23 + 6) = 0;
      v23[16] = 0;
      __int128 v47 = *(void *)&buf[15];
      *(_OWORD *)(v23 + 17) = *(_OWORD *)buf;
      *((void *)v23 + 4) = v47;
      v23[40] = 0;
      __int128 v48 = v23 + 48;
    }

    v92 = v48;
    if ((unint64_t)v48 >= v93)
    {
      __int128 v61 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)v91) >> 4);
      if (v61 + 1 > 0x555555555555555LL) {
        sub_100007008();
      }
      std::string::size_type v62 = 0x5555555555555556LL * ((uint64_t)(v93 - (void)v91) >> 4);
      if (v62 <= v61 + 1) {
        std::string::size_type v62 = v61 + 1;
      }
      else {
        __int128 v63 = v62;
      }
      if (v63) {
        __int128 v64 = (char *)sub_1000BB1F4((uint64_t)&v93, v63);
      }
      else {
        __int128 v64 = 0LL;
      }
      __int128 v65 = &v64[48 * v61];
      __int128 v66 = &v64[48 * v63];
      *(void *)__int128 v65 = 0LL;
      *((_DWORD *)v65 + 2) = 5;
      *((_WORD *)v65 + 6) = 0;
      v65[16] = 0;
      v65[40] = 0;
      int v60 = v65 + 48;
      std::string v68 = (char *)v91;
      __int128 v67 = v92;
      if (v92 != v91)
      {
        do
        {
          __int128 v69 = *((_OWORD *)v67 - 3);
          std::string v70 = *((_OWORD *)v67 - 1);
          *((_OWORD *)v65 - 2) = *((_OWORD *)v67 - 2);
          *((_OWORD *)v65 - 1) = v70;
          *((_OWORD *)v65 - 3) = v69;
          v65 -= 48;
          v67 -= 48;
        }

        while (v67 != v68);
        __int128 v67 = v68;
      }

      __int128 v91 = v65;
      v92 = v60;
      __int128 v93 = (unint64_t)v66;
      if (v67) {
        operator delete(v67);
      }
    }

    else
    {
      *(void *)__int128 v48 = 0LL;
      *((_DWORD *)v48 + 2) = 5;
      *((_WORD *)v48 + 6) = 0;
      v48[16] = 0;
      __int128 v59 = *(void *)&buf[15];
      *(_OWORD *)(v48 + 17) = *(_OWORD *)buf;
      *((void *)v48 + 4) = v59;
      v48[40] = 0;
      int v60 = v48 + 48;
    }

    v92 = v60;
    __int128 v71 = -1431655765 * ((unint64_t)(v60 - (_BYTE *)v91) >> 4);
    *(_DWORD *)(v89 + 304) = v71 - 3;
    *(_DWORD *)(v89 + 300) = v71 - 2;
    memset(buf, 0, sizeof(buf));
    sub_100D8B418(*(void *)(v89 + 184), v83, (uint64_t *)buf);
    v90 = 0LL;
    sub_10023BC84(v96, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3) + 1, &v90);
    v72 = *(void *)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      __int128 v73 = 0LL;
      int v74 = 0LL;
      do
      {
        __int128 v75 = (uint64_t **)(v72 + v73);
        *(void *)(*(void *)v96 + 8 * v74++) = v75;
        v72 = *(void *)buf;
        v73 += 24LL;
      }

      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3) > v74);
    }

    if (!strcmp(v83, "SmoothedGaitMetricsHistory")) {
      sub_100236548(v89, v83);
    }
    sub_1003B59A0(*(void *)(v89 + 80), v83, (const char **)v91, *(const std::string::value_type ***)v96, 0);
    if (*(void *)v96)
    {
      *(void *)&v96[8] = *(void *)v96;
      operator delete(*(void **)v96);
    }

    *(void *)v96 = buf;
    sub_1000129D4((void ***)v96);
    __int128 v33 = 1;
    goto LABEL_142;
  }

    if (qword_101934990 != -1) {
      dispatch_once(&qword_101934990, &stru_10182C2F8);
    }
    uint64_t v26 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 68289282;
      __int128 v53 = 0;
      BOOL v54 = 2082;
      __int128 v55 = "";
      unint64_t v56 = 2050;
      __int128 v57 = 0x4014000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Multiclient failed to find any usable device, retrying, nextFireInterval:%{public}f}",  buf,  0x1Cu);
    }

    [*(id *)(v2 + 192) setNextFireDelay:5.0];
    return;
  }

  uint64_t v17 = v16;
  unint64_t v18 = *(void *)v43;
LABEL_26:
  __int128 v19 = 0LL;
  while (1)
  {
    if (*(void *)v43 != v18) {
      objc_enumerationMutation(obj);
    }
    char v20 = *(void **)(*((void *)&v42 + 1) + 8 * v19);
    if (v17 == (id)++v19)
    {
      uint64_t v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v42,  v51,  16LL);
      if (v17) {
        goto LABEL_26;
      }
      goto LABEL_32;
    }
  }

  if (qword_101934990 != -1) {
    dispatch_once(&qword_101934990, &stru_10182C2F8);
  }
  __int128 v27 = (os_log_s *)qword_101934998;
  if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
  {
    __int128 v30 = [v20 UTF8String];
    *(_DWORD *)__int128 buf = 68289282;
    __int128 v53 = 0;
    BOOL v54 = 2082;
    __int128 v55 = "";
    unint64_t v56 = 2082;
    __int128 v57 = (uint64_t)v30;
    __int128 v29 = "{msg%{public}.0s:#Multiclient selected an iPad, deviceID:%{public, location:escape_only}s}";
    goto LABEL_57;
  }

    __assert_rtn( "set_filter_type",  "CLPLocationController.pb.h",  6359,  "::CLP::LogEntry::PrivateData::SystemNotification_FilterType_IsValid(value)");
  }

  double v9 = operator new(0x50uLL);
  sub_100B1FC90((uint64_t)v9);
  *((void *)v7 + 2) = v9;
  if (!a2) {
    goto LABEL_14;
  }
LABEL_11:
  if (!sub_1000641E0(1u)) {
    goto LABEL_40;
  }
  char v10 = 1;
LABEL_16:
  v9[18] |= 0x10u;
  v9[16] = v10;
  sub_1010DDBC0(&v20, "prod");
  sub_1002F0B04(&v28);
  uint64_t v11 = v28;
  else {
    std::string __p = v20;
  }
  sub_100373554(v11, "LCPlaybackSystemVersionInfo", &__p, (uint64_t)&__str);
  v9[18] |= 0x20u;
  char v12 = (std::string *)*((void *)v9 + 6);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__r.__words[0] = 0LL;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    *((void *)v9 + 6) = v12;
  }

  std::string::operator=(v12, &__str);
  uint64_t v13 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      std::string::size_type v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  unint64_t v16 = sub_100371ED0(v3, (uint64_t)v24);
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101834AA8);
  }
  uint64_t v17 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v16;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "#locctl,#rec,recordLocationControllerFilterVersion,success,%{public}d,locationControllerFilterUsageIsLegacy,%{public}d",  (uint8_t *)&__str,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__str, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101834AA8);
    }
    LODWORD(v28) = 67240448;
    HIDWORD(v28) = v16;
    LOWORD(v29) = 1026;
    *(_DWORD *)((char *)&v29 + 2) = a2;
    unint64_t v18 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__str,  1628LL,  &_mh_execute_header,  qword_101934838,  1LL,  "#locctl,#rec,recordLocationControllerFilterVersion,success,%{public}d,locationControllerFilte rUsageIsLegacy,%{public}d",  &v28,  14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerRecorder::recordLocationControllerFilterVersion(BOOL)",  "%s\n",  (const char *)v18);
    if (v18 != &__str) {
      free(v18);
    }
  }

  return sub_100EDE8A8(v24);
}

  sub_1002DDAD8((uint64_t)v45);
  return 1LL;
}

  PBDataWriterWriteUint32Field(a3, self->_nDropout, 18LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_19:
    if ((*(_DWORD *)&has & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  *((_DWORD *)a3 + 13) = self->_nDropout;
  *((_DWORD *)a3 + 26) |= 0x200u;
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_19:
    if ((*(_DWORD *)&has & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  *((_DWORD *)result + 24) = LODWORD(self->_totalDropoutTime);
  *((_DWORD *)result + 26) |= 0x100000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  self->_nDropout = *((_DWORD *)a3 + 13);
  *(_DWORD *)&self->_has |= 0x200u;
  char v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 1) == 0)
  {
LABEL_19:
    if ((v3 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

        ++v19[17];
        goto LABEL_41;
      }

  double v9 = *(void *)(v5 + 24);
  if (!v9) {
    double v9 = *(void *)(qword_1019A11B8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }

  char v20 = a2[6];
  a1[20] |= 0x10u;
  a1[6] = v20;
  uint64_t v5 = a2[20];
  if ((v5 & 0x20) != 0) {
    goto LABEL_41;
  }
LABEL_13:
  if ((v5 & 0x40) == 0) {
    goto LABEL_14;
  }
LABEL_42:
  __int128 v22 = a2[8];
  a1[20] |= 0x40u;
  a1[8] = v22;
  uint64_t v5 = a2[20];
  if ((v5 & 0x80) != 0)
  {
LABEL_15:
    uint64_t v8 = a2[9];
    a1[20] |= 0x80u;
    a1[9] = v8;
    uint64_t v5 = a2[20];
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

        __int128 v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
        if (v19 >= 0x80)
        {
          char v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
          char v3 = *(_DWORD *)(a1 + 76);
        }

        else
        {
          char v20 = 2;
        }

        v4 += v20;
        if ((v3 & 0x100) == 0) {
          goto LABEL_50;
        }
        goto LABEL_44;
      }
    }

    else
    {
      uint64_t v4 = 0;
      if ((v3 & 2) == 0) {
        goto LABEL_15;
      }
    }

    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v7 >= 0x80)
    {
      uint64_t v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      char v3 = *(_DWORD *)(a1 + 76);
    }

    else
    {
      uint64_t v8 = 1;
    }

    v4 += v8 + 1;
    goto LABEL_15;
  }

  uint64_t v4 = 0;
  if ((v3 & 0x100) == 0) {
    goto LABEL_50;
  }
LABEL_44:
  __int128 v21 = *(void *)(a1 + 64);
  if (!v21) {
    __int128 v21 = *(void *)(qword_1019A1398 + 64);
  }
  __int128 v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006236C0(v21, a2);
  std::string::size_type v23 = (int)v22;
  else {
    __int128 v24 = 1;
  }
  v4 += v23 + v24 + 1;
LABEL_50:
  __int128 v25 = *(_DWORD *)(a1 + 32);
  uint64_t v26 = (v25 + v4);
  if (v25 >= 1)
  {
    __int128 v27 = 0LL;
    do
    {
      uint64_t v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100632810( *(unsigned int **)(*(void *)(a1 + 24)
                                                                                                + 8 * v27),
                                                                               a2);
      __int128 v29 = (int)v28;
      else {
        __int128 v30 = 1;
      }
      uint64_t v26 = (v29 + v26 + v30);
      ++v27;
    }

    while (v27 < *(int *)(a1 + 32));
  }

  *(_DWORD *)(a1 + 72) = v26;
  return v26;
}

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v17 & 0x80000000) != 0)
  {
    unint64_t v18 = 11;
  }

  else if (v17 >= 0x80)
  {
    unint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    char v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    unint64_t v18 = 2;
  }

  v4 += v18;
  if ((v3 & 0x100) != 0)
  {
LABEL_46:
    __int128 v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    else {
      char v20 = 2;
    }
    v4 += v20;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v5[5],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }

  __int128 v41 = sub_1006E27E8();
  sub_100413284(v41, buf);
  __int128 v42 = (uint64_t *)(a1 + 352);
  __int128 v43 = sub_1002A82BC(*(uint64_t *)&buf[0], "HRR_MinDiffPeakHRSteadyStateHR", (void *)(a1 + 352));
  __int128 v44 = v43;
  __int128 v45 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_44;
  }
  std::string::size_type v46 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    __int128 v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!v44) {
      goto LABEL_50;
    }
  }

  else
  {
LABEL_44:
    if (!v43) {
      goto LABEL_50;
    }
  }

  if (qword_101934770 != -1) {
    dispatch_once(&qword_101934770, &stru_101848228);
  }
  __int128 v48 = (os_log_s *)qword_101934778;
  if (os_log_type_enabled((os_log_t)qword_101934778, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v49 = *v42;
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Estimator,fMinDiffPeakHRSteadyStateHR overridden (%{public}f)",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934770 != -1) {
      dispatch_once(&qword_101934770, &stru_101848228);
    }
    __int128 v87 = *v42;
    v100 = 134349056;
    __int128 v101 = v87;
    LODWORD(v99) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934778,  0LL,  "Estimator,fMinDiffPeakHRSteadyStateHR overridden (%{public}f)",  &v100,  v99);
    __int128 v89 = (char *)v88;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLHRRecoveryEstimator::CLHRRecoveryEstimator(std::shared_ptr<CLHRRecoveryInputHRRecorderDb>, std::shared_ptr<CLHRR ecoveryInputWRRecorderDb>, std::shared_ptr<CLHRRecoverySessionRecorderDb>)",  "%s\n",  v88);
  }

  __int128 v19 = 2LL;
LABEL_42:
  uint64_t v35 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v37
  __int128 v38 = v32;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v40);
  return v19;
}

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v38 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v40
  __int128 v41 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v43);
  return v19;
}

  memset(&v75, 0, sizeof(v75));
  sub_1002F0B04(buf);
  uint64_t v26 = sub_1002A8560(*(uint64_t *)buf, "EEDADRURL", &v75);
  __int128 v27 = v26;
  uint64_t v28 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_44;
  }
  __int128 v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    __int128 v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v27) {
      goto LABEL_52;
    }
  }

  else
  {
LABEL_44:
    if (!v26) {
      goto LABEL_52;
    }
  }

  uint64_t v31 = (void *)(a1 + 88);
  std::string::operator=((std::string *)(a1 + 88), &v75);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  int64x2_t v32 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v33 = *(_DWORD *)a1;
    uint64_t v34 = (void *)(a1 + 88);
    *(_DWORD *)__int128 buf = 67240451;
    *(_DWORD *)&uint8_t buf[4] = v33;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2Cfg,inst,%{public}d,overriding ADR URL to %{private}s",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    uint64_t v58 = *(_DWORD *)a1;
    LODWORD(v74.__r_.__value_.__l.__data_) = 67240451;
    HIDWORD(v74.__r_.__value_.__r.__words[0]) = v58;
    LOWORD(v74.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v74.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v31;
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2Cfg,inst,%{public}d,overriding ADR URL to %{private}s",  &v74,  v67);
    int v60 = (uint8_t *)v59;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v59);
    if (v60 != buf) {
      free(v60);
    }
  }

      if (v4 != v14)
      {
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        __int128 v25 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "#EED2,#BAA,updated next cert request time",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_10184E040);
          }
          v32[0] = 0;
          LODWORD(v31) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,#BAA,updated next cert request time",  v32,  v31);
          uint64_t v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        sub_100770F64((void *)a1);
      }

      return v4 != v14;
    default:
LABEL_20:
      unint64_t v14 = *(double *)(a1 + 1704);
      if ((v7 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_25;
  }

    __int128 v29 = 0LL;
    goto LABEL_41;
  }

  if (__p != v16)
  {
    __int128 v22 = v45;
    if (v44 != v45)
    {
      while (1)
      {
        std::string::size_type v23 = (uint64_t *)v44;
        if (v44 != v22) {
          break;
        }
LABEL_24:
        if (++v21 == v16) {
          goto LABEL_25;
        }
      }

      while ((sub_10084CBD8(a5, *v21, *v23) & 1) != 0)
      {
        if (++v23 == v45)
        {
          unint64_t v16 = v39;
          __int128 v22 = v23;
          goto LABEL_24;
        }
      }

      goto LABEL_40;
    }
  }

    uint64_t v31 = 0LL;
    goto LABEL_41;
  }

  if (__p != v18)
  {
    __int128 v24 = v47;
    if (v46 != v47)
    {
      while (1)
      {
        __int128 v25 = (uint64_t *)v46;
        if (v46 != v24) {
          break;
        }
LABEL_24:
        if (++v23 == v18) {
          goto LABEL_25;
        }
      }

      while ((sub_10084CBD8(a5, *v23, *v25) & 1) != 0)
      {
        if (++v25 == v47)
        {
          unint64_t v18 = v41;
          __int128 v24 = v25;
          goto LABEL_24;
        }
      }

      goto LABEL_40;
    }
  }

      __int128 v39 = 0LL;
      v87[0] = i;
      v87[1] = v29;
      v87[2] = v31;
      v87[3] = v33;
      v87[4] = v37;
      v87[5] = v70;
      v87[6] = v69;
      v88 = 0;
      __int128 v89 = 0;
      __int128 v75 = 0;
      std::string::size_type v76 = 0;
      __int128 v77 = -1LL;
      __int128 v78 = 0;
      do
      {
        __int128 v40 = (char *)&v74 + v39;
        *((_DWORD *)v40 + 10) = 0;
        *((_OWORD *)v40 + 3) = v38;
        *((_OWORD *)v40 + 4) = v38;
        *((void *)v40 + 10) = -1LL;
        *(_OWORD *)(v40 + 88) = xmmword_1013394A0;
        v39 += 80LL;
        *((void *)v40 + 13) = 0LL;
        *((void *)v40 + 14) = 0LL;
      }

      while (v39 != 160);
      __int128 v79 = a1;
      __int128 v80 = *((_OWORD *)v68 + 1);
      __int128 v81 = v19;
      std::string::size_type v82 = -1LL;
      __int128 v83 = a4;
      __int128 v84 = *((_OWORD *)i + 1);
      uint64_t v85 = v29;
      unint64_t v86 = -1LL;
      __int128 v41 = 0x8F5C28F5C28F5C29LL * ((uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3);
      __int128 v42 = sub_10085B388((uint64_t)v90, (uint64_t)v87, (uint64_t)&v74, a9, a10, (void **)a11);
      __int128 v45 = *(void *)(a11 + 8);
      if (0x8F5C28F5C28F5C29LL * ((v45 - *(void *)a11) >> 3) < v41) {
        sub_10124CD48((uint64_t)v42, v43, v44);
      }
      std::string::size_type v46 = *(void *)a11 + 200 * v41;
      for (uint64_t i = (void *)a6; v46 != v45; v46 += 200LL)
      {
      }

      if ((*a12)[9]) {
        return 0LL;
      }
LABEL_52:
      ++v31;
      ++v29;
      if (v37 + 1 == v69) {
        int v37 = &v70[v37 != v70];
      }
      else {
        ++v37;
      }
      ++v32;
      if (v33++ == v63) {
        goto LABEL_57;
      }
    }
  }

  return result;
}

  uint64_t v13 = mach_absolute_time();
  unint64_t v14 = sub_101171C7C(v13);
  v62[0] = @"eventTime";
  v63[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v14);
  v62[1] = @"eventTimeNS";
  -[NSDate timeIntervalSince1970](+[NSDate date](&OBJC_CLASS___NSDate, "date"), "timeIntervalSince1970");
  v63[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
  v62[2] = @"clientType";
  std::string::size_type v15 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  if (*(_BYTE *)(a1 + 52)) {
    unint64_t v16 = @"enabled";
  }
  else {
    unint64_t v16 = @"disabled";
  }
  v63[2] = v15;
  v63[3] = v16;
  v62[3] = @"clientEvent";
  v62[4] = @"clientNumbers";
  v63[4] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(v2 + 76));
  sub_100E575BC( (uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v63,  v62,  5LL),  (uint64_t)"SuppressionManagerClientStateChange");
  uint64_t v17 = *(_DWORD *)(v2 + 76);
  unint64_t v18 = v17 != 0;
  __int128 v19 = *(unsigned __int8 *)(v2 + 74);
  char v20 = v19 != v18;
  __int128 v21 = *(_DWORD *)(v2 + 84);
  if (*(_BYTE *)(v2 + 72) || v21)
  {
    if (v21) {
      std::string::size_type v23 = v21 == v17;
    }
    else {
      std::string::size_type v23 = 0;
    }
    __int128 v22 = v23 || *(_BYTE *)(v2 + 72) != 0;
    char v20 = v19 != v18 || *(unsigned __int8 *)(v2 + 80) != v22;
  }

  else
  {
    __int128 v22 = 0;
  }

  if (qword_1019344A0 != -1) {
    dispatch_once(&qword_1019344A0, &stru_101868000);
  }
  uint64_t v26 = (os_log_s *)qword_1019344A8;
  if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v27 = *(_DWORD *)(v2 + 76);
    uint64_t v28 = *(_DWORD *)(a1 + 48);
    __int128 v29 = *(unsigned __int8 *)(v2 + 74);
    *(_DWORD *)__int128 buf = 67241216;
    __int128 v65 = v27;
    __int128 v66 = 1026;
    __int128 v67 = v28;
    std::string v68 = 1026;
    __int128 v69 = v29;
    std::string v70 = 1026;
    __int128 v71 = v20;
    v72 = 1026;
    __int128 v73 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[CLSPUEclipseControl] Number of clients,%{public}u, clientType,%{public}u, enabled,%{public}d, shouldConfigure,%{p ublic}d, enableAlwaysOnViewObstructed,%{public}u",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101868000);
    }
    __int128 v43 = *(_DWORD *)(v2 + 76);
    __int128 v44 = *(_DWORD *)(a1 + 48);
    __int128 v45 = *(unsigned __int8 *)(v2 + 74);
    LODWORD(v53) = 67241216;
    HIDWORD(v53) = v43;
    BOOL v54 = 1026;
    __int128 v55 = v44;
    unint64_t v56 = 1026;
    __int128 v57 = v45;
    uint64_t v58 = 1026;
    __int128 v59 = v20;
    int v60 = 1026;
    __int128 v61 = v22;
    LODWORD(v52) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  0LL,  "[CLSPUEclipseControl] Number of clients,%{public}u, clientType,%{public}u, enabled,%{public}d, shouldConfigure,%{p ublic}d, enableAlwaysOnViewObstructed,%{public}u",  &v53,  v52);
    __int128 v47 = (uint8_t *)v46;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke",  "%s\n",  v46);
    if (v47 != buf) {
      free(v47);
    }
  }

  if (v20)
  {
    *(_BYTE *)(v2 + 74) = v18;
    *(_BYTE *)(v2 + 80) = v22;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
    {
      __int128 v30 = 1 << *(_DWORD *)(a1 + 48);
      if (*(_BYTE *)(a1 + 52))
      {
        uint64_t v31 = (unsigned int *)(v2 + 92);
        do
          int64x2_t v32 = __ldaxr(v31);
        while (__stlxr(v32 | v30, v31));
      }

      else
      {
        __int128 v40 = ~v30;
        __int128 v41 = (unsigned int *)(v2 + 92);
        do
          __int128 v42 = __ldaxr(v41);
        while (__stlxr(v42 & v40, v41));
      }
    }
  }

  else
  {
    if (qword_1019344A0 != -1) {
      dispatch_once(&qword_1019344A0, &stru_101868000);
    }
    __int128 v33 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "[CLSPUEclipseControl] No configure needed.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_101868000);
      }
      LOWORD(v53) = 0;
      LODWORD(v52) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344A8,  2LL,  "[CLSPUEclipseControl] No configure needed.",  &v53,  v52);
      __int128 v49 = (uint8_t *)v48;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLSPUEclipseControl::setSuppressionEnabled(BOOL, int, BOOL)_block_invoke",  "%s\n",  v48);
      if (v49 != buf) {
        free(v49);
      }
    }

    uint64_t v34 = 1 << *(_DWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 52))
    {
      uint64_t v35 = (unsigned int *)(v2 + 92);
      do
        uint64_t v36 = __ldaxr(v35);
      while (__stlxr(v36 | v34, v35));
    }

    else
    {
      int v37 = ~v34;
      __int128 v38 = (unsigned int *)(v2 + 92);
      do
        __int128 v39 = __ldaxr(v38);
      while (__stlxr(v39 & v37, v38));
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(float *)(v5 + 68),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(float *)(v5 + 80),  a3);
  uint64_t v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x200) == 0)
  {
LABEL_14:
    if ((v8 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

  __int128 v22 = *(_DWORD *)(a1 + 32);
  std::string::size_type v23 = v22 + v5;
  if (v22 >= 1)
  {
    __int128 v24 = 0LL;
    do
    {
      __int128 v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A51FB4( *(void *)(*(void *)(a1 + 24) + 8 * v24),  a2);
      uint64_t v26 = (int)v25;
      else {
        __int128 v27 = 1;
      }
      v23 += v26 + v27;
      ++v24;
    }

    while (v24 < *(int *)(a1 + 32));
  }

  uint64_t v28 = *(_DWORD *)(a1 + 56);
  __int128 v29 = v28 + v23;
  if (v28 >= 1)
  {
    __int128 v30 = 0LL;
    do
    {
      uint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A528F0( *(void *)(*(void *)(a1 + 48) + 8 * v30),  a2);
      int64x2_t v32 = (int)v31;
      else {
        __int128 v33 = 1;
      }
      v29 += v32 + v33;
      ++v30;
    }

    while (v30 < *(int *)(a1 + 56));
  }

  uint64_t v34 = *(_DWORD *)(a1 + 112);
  uint64_t v35 = (v34 + v29);
  if (v34 >= 1)
  {
    uint64_t v36 = 0LL;
    do
    {
      int v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A5917C( *(void *)(*(void *)(a1 + 104)
                                                                                         + 8 * v36),
                                                                               a2);
      __int128 v38 = (int)v37;
      else {
        __int128 v39 = 1;
      }
      uint64_t v35 = (v38 + v35 + v39);
      ++v36;
    }

    while (v36 < *(int *)(a1 + 112));
  }

  *(_DWORD *)(a1 + 128) = v35;
  return v35;
}

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v44 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v45
  std::string::size_type v46 = v38;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v48);
  return v19;
}

  char v12 = *(void *)(v5 + 48);
  if (!v12) {
    char v12 = *(void *)(qword_1019A1CE8 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v12,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }

              *(void *)__int128 v63 = v61;
              __int128 v64 = v63 + 1;
              goto LABEL_82;
            }
          }
        }
      }

      uint64_t v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( locationBuffer,  "countByEnumeratingWithState:objects:count:",  &v94,  v99,  16LL);
      if (!v17)
      {
LABEL_85:
        -[NSMutableArray removeAllObjects](self->_locationBuffer, "removeAllObjects");
        -[NSMutableArray addObjectsFromArray:](self->_locationBuffer, "addObjectsFromArray:", v14);

        return;
      }
    }
  }

  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_101872C80);
  }
  __int128 v87 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "warning: cannot interpolate pressure values in location filter",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_101872C80);
    }
    v98[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "warning: cannot interpolate pressure values in location filter",  v98,  2);
    __int128 v89 = (uint8_t *)v88;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLElevationLocationFilter _interpolatePressureValuesWithElevationArray:]",  "%s\n",  v88);
    if (v89 != buf) {
      free(v89);
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_vo2Variance),  @"vo2Variance");
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  PBDataWriterWriteDoubleField(a3, 18LL, self->_speedVariance);
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  *((void *)a3 + 15) = *(void *)&self->_speedVariance;
  *((_DWORD *)a3 + 41) |= 0x4000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  *((void *)result + 18) = *(void *)&self->_vo2Variance;
  *((_DWORD *)result + 41) |= 0x20000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  self->_speedVariance = *((double *)a3 + 15);
  *(_DWORD *)&self->_has |= 0x4000u;
  char v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 8) == 0)
  {
LABEL_20:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  uint64_t v8 = *(void *)(v5 + 32);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1D38 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v8,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }

  sub_1002A5590(v35);
}

      if (v21 <= a3)
      {
        if (v25 <= a4 || v21 != a3)
        {
          __int128 v39 = v25 + 1;
          if ((__int128 *)((char *)v39 - *(void *)v21) == (__int128 *)4096)
          {
            __int128 v47 = (__int128 *)*((void *)v21 + 1);
            v21 += 8;
            __int128 v39 = v47;
          }

          goto LABEL_85;
        }

        uint64_t v8 = v25;
        a5 = a3;
      }

      else
      {
        uint64_t v8 = v25;
        a5 = v21;
      }

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v61 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v62
  __int128 v63 = v50;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v65);
  return v19;
}

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v44 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v45
  std::string::size_type v46 = v38;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v48);
  return v19;
}

  if (SBYTE3(v33) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_42:
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10188BAB8);
  }
  unint64_t v18 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v19 = objc_msgSend(-[NSMutableDictionary valueForKey:](v6, "valueForKey:", @"tel"), "UTF8String");
    char v20 = objc_msgSend(-[NSMutableDictionary valueForKey:](v6, "valueForKey:", @"tel_alt"), "UTF8String");
    __int128 v21 = objc_msgSend(-[NSMutableDictionary valueForKey:](v6, "valueForKey:", @"medium"), "UTF8String");
    __int128 v22 = objc_msgSend(-[NSMutableDictionary valueForKey:](v6, "valueForKey:", @"trigger_type"), "UTF8String");
    std::string::size_type v23 = objc_msgSend(-[NSMutableDictionary valueForKey:](v6, "valueForKey:", @"device_language"), "UTF8String");
    *(_DWORD *)__int128 buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int128 v30 = 2082;
    uint64_t v31 = "";
    int64x2_t v32 = 2081;
    __int128 v33 = v19;
    uint64_t v34 = 2081;
    uint64_t v35 = v20;
    uint64_t v36 = 2082;
    int v37 = v21;
    __int128 v38 = 2082;
    __int128 v39 = v22;
    __int128 v40 = 2082;
    __int128 v41 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#ADR,createCallInfoDict, tel:%{private, location:escape_only}s, tel_alt:%{private , location:escape_only}s, medium:%{public, location:escape_only}s, trigger_type:%{public, location:escape_ only}s, device_language:%{public, location:escape_only}s}",  buf,  0x44u);
  }

  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
  return v6;
}

  std::string::size_type v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
  if (v15 >= 0x80)
  {
    unint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    char v3 = a1[18];
  }

  else
  {
    unint64_t v16 = 2;
  }

  uint64_t v7 = (v16 + v7);
  if ((v3 & 0x800) != 0) {
    goto LABEL_44;
  }
LABEL_29:
  if ((v3 & 0x1000) == 0) {
    goto LABEL_30;
  }
LABEL_48:
  __int128 v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[15];
  if (v19 >= 0x80)
  {
    char v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    char v3 = a1[18];
  }

  else
  {
    char v20 = 2;
  }

  uint64_t v7 = (v20 + v7);
  if ((v3 & 0x2000) != 0)
  {
LABEL_52:
    __int128 v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[16];
    else {
      __int128 v22 = 2;
    }
    uint64_t v7 = (v22 + v7);
  }

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v40 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v41
  __int128 v42 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v44);
  return v19;
}

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v40 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v41
  __int128 v42 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v44);
  return v19;
}

  __int128 v19 = 2LL;
LABEL_42:
  __int128 v40 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v41
  __int128 v42 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v44);
  return v19;
}

    __int128 v49 = 1;
    goto LABEL_43;
  }

  __int128 v19 = 2LL;
LABEL_42:
  std::string v70 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v71
  v72 = v56;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v74);
  return v19;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }

  uint64_t result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 16) = result;
  BOOL v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "totalDistance", *(double *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "instantaneousHeartRate", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  uint64_t v8 = *(_BYTE *)(a2 + 98);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 98) = v8;
  BOOL v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "loftEndTime", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  __int128 v19 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 76) = v19;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "loftStartDetected", *(_BYTE *)(a1 + 114));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "quaternionPredictedW", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

        if (PB::Reader::placeMark(this, v45, v32, v33)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v31 + 16LL))(v31, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v45);
LABEL_66:
          BOOL v2 = *((void *)this + 1);
          char v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 6u:
        *(_BYTE *)(a1 + 56) |= 2u;
        int v37 = *((void *)this + 1);
        if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v37);
        goto LABEL_60;
      case 7u:
        *(_BYTE *)(a1 + 56) |= 0x10u;
        __int128 v38 = *((void *)this + 1);
        if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v38);
        goto LABEL_60;
      case 8u:
        *(_BYTE *)(a1 + 56) |= 4u;
        __int128 v39 = *((void *)this + 1);
        if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v39);
LABEL_60:
          __int128 v21 = *((void *)this + 1) + 4LL;
LABEL_61:
          *((void *)this + 1) = v21;
        }

        else
        {
LABEL_51:
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_66;
      default:
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_66;
    }
  }

        if (PB::Reader::placeMark(this, v41, v31, v32)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v30 + 16LL))(v30, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v41);
LABEL_55:
          BOOL v2 = *((void *)this + 1);
          char v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_55;
    }
  }

  __int128 v21 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 80) = v21;
  BOOL v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      return result;
    }
LABEL_42:
    std::string::size_type v23 = *(_BYTE *)(a2 + 96);
    *(_DWORD *)(result + 100) = v3 | 0x80000;
    *(_BYTE *)(result + 96) = v23;
    return result;
  }

  PB::TextFormatter::format(this, "timestampUs", *(void *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) != 0) {
    goto LABEL_41;
  }
LABEL_20:
  if ((v5 & 0x40000) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "wristAngleToHorizontalDegrees", *(float *)(a1 + 92));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x13u);
  if ((*(_DWORD *)(v3 + 100) & 0x80000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0x14u);
  }
  return result;
}

  __int128 v24 = *(void *)(a2 + 56);
  v6 |= 1u;
  *(_DWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 56) = v24;
  if ((*(_DWORD *)(a2 + 144) & 2) != 0)
  {
LABEL_22:
    double v9 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 144) = v6 | 2;
    *(void *)(a1 + 64) = v9;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  uint64_t result = *(float *)(a2 + 88);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 88) = result;
  BOOL v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "configRawRmsMaxFpThreshold", *(float *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }

  double v9 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 152) = v3;
  *(void *)(a1 + 40) = v9;
  BOOL v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "configWidthThreshold", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  char v12 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 56) = v12;
  BOOL v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "isGPSDetectedDebug", *(_BYTE *)(a1 + 125));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "spinCumulativeRotation", *(float *)(a1 + 188));
  __int128 v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x800) == 0)
  {
LABEL_25:
    if ((v21 & 0x1000) == 0) {
      goto LABEL_26;
    }
LABEL_42:
    PB::TextFormatter::format(this, "spinGravityAngleThresholdDegrees", *(float *)(a1 + 196));
    if ((*(_WORD *)(a1 + 204) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 152), 0x6Au);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x20000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 148) = v8;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "configIz", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 6u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }

  char v20 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v20;
  BOOL v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "latchedIsDescalationRequired", *(_DWORD *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 0x194u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "timePeriodicityLowerPercentile", *(float *)(a1 + 140));
  uint64_t v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x8000) != 0) {
    goto LABEL_41;
  }
LABEL_23:
  if ((v11 & 0x40) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152), 0x11u);
  if ((*(_WORD *)(v3 + 192) & 0x400) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 160), 0x12u);
  }
  return result;
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x11u);
  uint64_t v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) == 0)
  {
LABEL_24:
    if ((v11 & 0x2000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x13u);
  }

  uint64_t result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 76) = result;
  BOOL v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0) {
      return result;
    }
LABEL_42:
    uint64_t result = *(float *)(a2 + 84);
    *(_DWORD *)(a1 + 92) = v3 | 0x40000;
    *(float *)(a1 + 84) = result;
    return result;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) != 0) {
    goto LABEL_41;
  }
LABEL_20:
  if ((v5 & 0x80000) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x13u);
  if ((*(_DWORD *)(v3 + 92) & 0x40000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x14u);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "habcDenominator", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "correctedSignalRatePerSPAD", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148), 5u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "gaze_y", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  uint64_t result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 128) = result;
  BOOL v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "swingAccelAmplitudeY", *(double *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  uint64_t result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 128) = result;
  BOOL v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "shortBoutsStepLengthCv", *(double *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  uint64_t result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 64) = result;
  BOOL v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMedian", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  uint64_t result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 40) = result;
  BOOL v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 104));
  uint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }

  uint64_t result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 80) = result;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "fFTBin4", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  unint64_t v14 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 16) = v14;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "rawType", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  __int128 v19 = *(void *)(a2 + 88);
  v5 |= 0x400u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 88) = v19;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "gnssModesOfOperation", *(_DWORD *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }

  double v9 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 64) = v9;
  BOOL v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  BOOL v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYHigh", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  double v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 76) = v9;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "auxHistoricalOmegaStdMax", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "emptyField2", *(_DWORD *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }

  __int128 v19 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 8) = v19;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "powerWattage", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 125), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

  uint64_t v13 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 32) = v13;
  BOOL v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "gestureType", *(_DWORD *)(a1 + 172));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }

  std::string::size_type v15 = *(void *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 80) = v15;
  BOOL v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }

  PB::TextFormatter::format(this, "integratedVelocityZBackwards", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }

  sub_1011BD5D8(a1, (int *)a2 + 4);
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  __int128 v71 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    *(_DWORD *)__int128 buf = 134349056;
    *(void *)__int128 v107 = v72;
    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientConfigurationList,size,%{public}zu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    __int128 v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    v92 = 134349056;
    *(void *)__int128 v93 = v81;
    LODWORD(v89) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientConfigurationList,size,%{public}zu",  &v92,  v89);
    __int128 v83 = (uint8_t *)v82;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::Rhythmic GnssConfiguration)",  "%s\n",  v82);
    if (v83 != buf) {
      free(v83);
    }
  }

void sub_10003C498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003C51C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  v52.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v52, "SELECT * FROM (");
  char v51 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v8 = std::string::append(&v52, __s, 7uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003B784((uint64_t)__p);
  if ((v49 & 0x80u) == 0) {
    char v10 = __p;
  }
  else {
    char v10 = (void **)__p[0];
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v11 = v49;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  char v12 = std::string::append(&v53, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v14 = std::string::append(&v54, " FROM ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v16 = std::string::append(&v55, "MicroLocationRapport");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v18 = std::string::append(&v56, " ");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    __int128 v21 = (const std::string::value_type *)a2;
  }
  else {
    __int128 v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  std::string::size_type v23 = std::string::append(&v57, v21, v22);
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v25 = std::string::append(&v58, " ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v27 = std::string::append(&v64, " ORDER BY ");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v29 = std::string::append(&v65, "GenerationTimestamp");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v31 = std::string::append(&v59, " DESC LIMIT ");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v47, a3);
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v33 = &v47;
  }
  else {
    __int128 v33 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v47.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = std::string::append(&v66, (const std::string::value_type *)v33, size);
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  int v37 = std::string::append(&v60, ") ORDER BY ");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v39 = std::string::append(&v63, "GenerationTimestamp");
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t cap = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 v61 = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if (v51 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    __int128 v41 = (char *)v61;
  }
  else {
    __int128 v41 = (char *)v61[0];
  }
  sub_1003C0D54(a1, v41, &v63);
  std::string::size_type v42 = v63.__r_.__value_.__r.__words[0];
  __int128 v43 = (sqlite3_stmt *)sub_100019240((uint64_t)v63.__r_.__value_.__l.__data_);
  memset(&v60, 0, sizeof(v60));
  while (j__sqlite3_step(v43) == 100)
  {
    sub_100011CB8(v43, 1, &v66);
    sub_10003DEB0(v43, 2, &v63);
    v58.__r_.__value_.__r.__words[0] = sqlite3_column_double(v43, 0);
    sub_100011CB8(v43, 4, &v59);
    std::string::size_type v44 = v59.__r_.__value_.__s.__size_;
    if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v44 = v59.__r_.__value_.__l.__size_;
    }
    if (v44 && (sub_10010147C((uint64_t)&v59, (uint64_t)&v65), v65.__r_.__value_.__s.__data_[16]))
    {
      sub_10010147C((uint64_t)&v59, (uint64_t)&v65);
      if (!v65.__r_.__value_.__s.__data_[16]) {
        sub_100036CD8();
      }
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
    }

    else
    {
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
    }

    std::string::size_type v45 = v60.__r_.__value_.__l.__size_;
    if (v60.__r_.__value_.__l.__size_ >= v60.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v46 = sub_10003DFC0((uint64_t *)&v60, (uint64_t)&v66, (uint64_t)&v63, &v64, &v58);
    }

    else
    {
      sub_10003E0F4( (uint64_t)&v60.__r_.__value_.__l.__cap_,  v60.__r_.__value_.__l.__size_,  (uint64_t)&v66,  (uint64_t)&v63,  &v64,  &v58);
      std::string::size_type v46 = v45 + 80;
    }

    v60.__r_.__value_.__l.__size_ = v46;
    sub_10008CAFC((wireless_diagnostics::google::protobuf::MessageLite *)&v63);
  }

  sqlite3_reset(v43);
  *a4 = v60;
  memset(&v60, 0, sizeof(v60));
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  sub_10003E4DC((void ***)&v63);
  if (v42) {
    (*(void (**)(std::string::size_type))(*(void *)v42 + 8LL))(v42);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v61[0]);
  }
}

void sub_10003CAE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  __int128 buf = &a51;
  sub_10003E4DC(&buf);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10003CEE0( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, unsigned int a6@<W5>, std::string *a7@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v56.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v56, "WHERE ");
    unint64_t v14 = std::string::append(&v56, "GenerationTimestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v16 = std::string::append(&v57, " > ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    int v18 = *(char *)(a2 + 23);
    if (v18 >= 0) {
      __int128 v19 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v19 = *(const std::string::value_type **)a2;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a2 + 8);
    }
    __int128 v21 = std::string::append(&v58, v19, v20);
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v23 = std::string::append(&v59, " AND ");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v25 = std::string::append(&v60, "GenerationTimestamp");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v27 = std::string::append(&v61, "<= ");
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    int v29 = *(char *)(a3 + 23);
    if (v29 >= 0) {
      __int128 v30 = (const std::string::value_type *)a3;
    }
    else {
      __int128 v30 = *(const std::string::value_type **)a3;
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v31 = *(void *)(a3 + 8);
    }
    __int128 v32 = std::string::append(&v62, v30, v31);
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    if (*(_BYTE *)(a4 + 24))
    {
      v58.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v58, " AND ");
      uint64_t v34 = std::string::append(&v58, "RTLOIType");
      __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0LL;
      v34->__r_.__value_.__l.__cap_ = 0LL;
      v34->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v36 = std::string::append(&v59, "=");
      __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0LL;
      v36->__r_.__value_.__l.__cap_ = 0LL;
      v36->__r_.__value_.__r.__words[0] = 0LL;
      if (!*(_BYTE *)(a4 + 24)) {
        sub_100036CD8();
      }
      int v38 = *(char *)(a4 + 23);
      if (v38 >= 0) {
        __int128 v39 = (const std::string::value_type *)a4;
      }
      else {
        __int128 v39 = *(const std::string::value_type **)a4;
      }
      if (v38 >= 0) {
        std::string::size_type v40 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v40 = *(void *)(a4 + 8);
      }
      __int128 v41 = std::string::append(&v60, v39, v40);
      __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0LL;
      v41->__r_.__value_.__l.__cap_ = 0LL;
      v41->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v43 = std::string::append(&v61, "");
      __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v43->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0LL;
      v43->__r_.__value_.__l.__cap_ = 0LL;
      v43->__r_.__value_.__r.__words[0] = 0LL;
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v45 = &v62;
      }
      else {
        std::string::size_type v45 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v62.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v62.__r_.__value_.__l.__size_;
      }
      std::string::append(&v63, (const std::string::value_type *)v45, size);
    }

    if (a5[16])
    {
      v61.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v61, " AND ");
      sub_1010DDBC0(&v59, "RtLoiGroupId");
      if (!a5[16]) {
        sub_100036CD8();
      }
      sub_100053C78((const void **)&v59.__r_.__value_.__l.__data_, a5, (uint64_t)&v60);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v47 = &v60;
      }
      else {
        std::string v47 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v48 = v60.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v48 = v60.__r_.__value_.__l.__size_;
      }
      unsigned __int8 v49 = std::string::append(&v61, (const std::string::value_type *)v47, v48);
      __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0LL;
      v49->__r_.__value_.__l.__cap_ = 0LL;
      v49->__r_.__value_.__r.__words[0] = 0LL;
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v51 = &v62;
      }
      else {
        char v51 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v52 = v62.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v52 = v62.__r_.__value_.__l.__size_;
      }
      std::string::append(&v63, (const std::string::value_type *)v51, v52);
    }

    sub_10003C51C(*(void *)a1, (uint64_t)&v63, a6, a7);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018192B0);
    }
    std::string v53 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v63.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select entries between times at loi",  (uint8_t *)&v63,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v63, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      LOWORD(v62.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v63,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select entries between times at loi",  &v62,  2);
      std::string v55 = (std::string *)v54;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationRapportTable::Entry> CLMicroLocationRapportTable::selectBetweenTimesAtLoi(const std:: string &, const std::string &, const std::optional<const std::string> &, const std::optional<const boost::uuids: :uuid> &, uint32_t)",  "%s\n",  v54);
      if (v55 != &v63) {
        free(v55);
      }
    }

    a7->__r_.__value_.__r.__words[0] = 0LL;
    a7->__r_.__value_.__l.__size_ = 0LL;
    a7->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_10003D4E0(_Unwind_Exception *a1)
{
}

BOOL sub_10003D67C(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationRapport");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v8 = std::string::append(&v44, "GenerationTimestamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    char v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    char v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v14 = std::string::append(&v47, "GenerationTimestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    int v18 = std::string::append(&v49, "MicroLocationRapport");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v51, "GenerationTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v41;
    }
    else {
      __int128 v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      __int128 v32 = (char *)__p;
    }
    else {
      __int128 v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    uint64_t v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
      int v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_1018192B0);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationRapportTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018192B0);
  }
  __int128 v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018192B0);
    }
    LOWORD(__p[0]) = 0;
    __int128 v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationRapportTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_10003DCF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10003DE84(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10003DEB0@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = sqlite3_column_blob(a1, a2);
  int v7 = sqlite3_column_bytes(a1, a2);
  if (!v6) {
    sub_101224330();
  }
  int v8 = v7;
  __int128 v9 = (wireless_diagnostics::google::protobuf::MessageLite *)sub_100063BE8(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_101819400;
  }

  return result;
}

void sub_10003DF78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_10008CAFC(v15);
      _Unwind_Resume(a1);
    }
  }

  else if (!v17)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_10003DFC0(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333LL) {
    sub_100007008();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999LL) {
    unint64_t v12 = 0x333333333333333LL;
  }
  else {
    unint64_t v12 = v7;
  }
  std::string::size_type v20 = a1 + 2;
  if (v12) {
    __int128 v13 = (char *)sub_10003E20C((uint64_t)(a1 + 2), v12);
  }
  else {
    __int128 v13 = 0LL;
  }
  unint64_t v16 = v13;
  int v17 = &v13[80 * v6];
  __int128 v19 = &v13[80 * v12];
  sub_10003E0F4((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  int v18 = v17 + 80;
  sub_10003E198(a1, &v16);
  uint64_t v14 = a1[1];
  sub_10003E468(&v16);
  return v14;
}

void sub_10003E0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10003E0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, void *a6)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 16);
  }

  sub_10003B914(a2, (__int128 *)__p, a4, a5, a6);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10003E17C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E198(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10003E250((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10003E20C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334LL) {
    sub_1000070D4();
  }
  return operator new(80 * a2);
}

uint64_t sub_10003E250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80LL;
      sub_10003E318(a1, (__n128 *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80LL;
      *((void *)&v16 + 1) -= 80LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_10003E3A8((uint64_t)v13);
  return v11;
}

void sub_10003E304( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_10003E318(uint64_t a1, __n128 *a2, uint64_t a3)
{
  a2->n128_u64[0] = *(void *)a3;
  uint64_t v5 = &a2->n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1010DD48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a3 + 8);
    a2[1].n128_u64[1] = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }

  sub_10008CAF8(&a2[2], a3 + 32);
  __n128 result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void sub_10003E38C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10003E3A8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10003E3DC((uint64_t *)a1);
  }
  return a1;
}

void sub_10003E3DC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10003E42C(v3, v1);
      v1 += 80LL;
    }

    while (v1 != v2);
  }

void sub_10003E42C(uint64_t a1, uint64_t a2)
{
}

void **sub_10003E468(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10003E498(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_10003E42C(v4, i - 80);
  }

void sub_10003E4DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80LL;
        sub_10003E42C((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

double sub_10003E560@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10003E5A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E5C0(std::string *a1)
{
  return sub_10003E884(a1);
}

uint64_t sub_10003E5FC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "GenerationTimestamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10003E698( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E6CC(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RTLOIType");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10003E774( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E7A8(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "Device");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10003E850( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E884(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RtLoiGroupId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10003E92C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003E960()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  uint64_t v0 = std::string::append(&v19, "MicroLocationRapport");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003B784((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  __int128 v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10003B84C((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    char v10 = __p;
  }
  else {
    char v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  unint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_1019939F0 = v12->__r_.__value_.__l.__cap_;
  xmmword_1019939E0 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1019939E0,  (void *)&_mh_execute_header);
}

void sub_10003EB4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003EBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_101819428;
  *(void *)(a1 + 8) = 0LL;
  __int128 v6 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
    sub_100008BDC();
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 48LL))(v7);
  sub_10001A504(a1 + 88, a2);
  *(_BYTE *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a5;
  *(_BYTE *)(a1 + 320) = 0;
  std::string::size_type v11 = *(_OWORD **)a4;
  unint64_t v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    do
    {
      uint64_t v13 = *(void *)(a1 + 120);
      v31[0] = *v11;
      char v14 = operator new(0x10uLL);
      uint64_t v34 = v14 + 1;
      BOOL v35 = v14 + 1;
      *char v14 = v31[0];
      std::string __p = v14;
      sub_100029F04(v13, (uint64_t)&__p, v28);
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }

      sub_1000865CC(v31);
      char v32 = 1;
      __int128 v29 = *v11;
      char v30 = 1;
      sub_10013A418(v28, (uint64_t)v31, (uint64_t)&v29, (unint64_t *)(a1 + 32), &__p);
      if (v32) {
        sub_100086708(v31);
      }
      if (v36)
      {
        unsigned __int8 v16 = *(_OWORD **)(a1 + 16);
        unint64_t v15 = *(void *)(a1 + 24);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - *v6) >> 4;
          unint64_t v19 = v18 + 1;
          uint64_t v20 = v15 - (void)*v6;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            std::string v22 = (char *)sub_100037038(a1 + 24, v21);
          }
          else {
            std::string v22 = 0LL;
          }
          std::string v23 = &v22[16 * v18];
          *(_OWORD *)std::string v23 = *v11;
          __int128 v25 = *(char **)(a1 + 8);
          __int128 v24 = *(char **)(a1 + 16);
          __int128 v26 = v23;
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }

            while (v24 != v25);
            __int128 v24 = *v6;
          }

          int v17 = v23 + 16;
          *(void *)(a1 + 8) = v26;
          *(void *)(a1 + 16) = v23 + 16;
          *(void *)(a1 + 24) = &v22[16 * v21];
          if (v24) {
            operator delete(v24);
          }
        }

        else
        {
          *unsigned __int8 v16 = *v11;
          int v17 = v16 + 1;
        }

        *(void *)(a1 + 16) = v17;
      }

      sub_10003F6D4((uint64_t)&__p);
      std::string __p = v28;
      sub_10003F8A8((void ***)&__p);
      v11 += 15;
    }

    while (v11 != v12);
  }

  return a1;
}

void sub_10003EE74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, void *__p, uint64_t a39)
{
  std::string v42 = *v40;
  if (*v40)
  {
    *(void *)(v39 + 16) = v42;
    operator delete(v42);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10003EF44(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
}

uint64_t sub_10003EF54(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (!v3) {
    sub_100008BDC();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48LL))(v3))
  {
    unint64_t v11 = a2;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_1012C8BD0;
    strcpy(__p[0].__r_.__value_.__l.__data_, "Data Source Cancelled at index ");
    std::to_string(&v19, v11);
    if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v13 = &v19;
    }
    else {
      uint64_t v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v19.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
    }
    unint64_t v15 = std::string::append(__p, (const std::string::value_type *)v13, size);
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    sub_1000E2824(exception, &v23);
  }

  __int128 v27 = *(_OWORD *)(*(void *)(a1 + 8) + 16 * a2);
  uint64_t v5 = *(void *)(a1 + 120);
  __int128 v6 = operator new(0x10uLL);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
  __p[0].__r_.__value_.__l.__cap_ = (std::string::size_type)(v6 + 1);
  *__int128 v6 = v27;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  sub_100029F04(v5, (uint64_t)__p, v22);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }

  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = operator new(0x10uLL);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v8 + 1);
  __p[0].__r_.__value_.__l.__cap_ = (std::string::size_type)(v8 + 1);
  *uint64_t v8 = v27;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  sub_10002A480(v7, (uint64_t)__p, v21);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }

  __int128 v9 = (__int128 *)v21[0];
  sub_10003F34C(v22, v21[0]);
  sub_1000865CC(&v19);
  char v20 = 1;
  __int128 v24 = *v9;
  char v25 = 1;
  sub_10013A418(v22, (uint64_t)&v19, (uint64_t)&v24, (unint64_t *)(a1 + 32), __p);
  sub_10003F724(a1 + 128, (uint64_t)__p);
  sub_10003F6D4((uint64_t)__p);
  if (v20) {
    sub_100086708(&v19);
  }
  if (!*(_BYTE *)(a1 + 320))
  {
    int v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(&v18, "fFingerprintCache optional is empty, database likely changed since data source construction");
    sub_1000E2824(v17, &v18);
  }

  usleep(0x12Cu);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  sub_10001A350((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  sub_10003F8A8((void ***)__p);
  return a1 + 128;
}

void sub_10003F210( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v62 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }

  else if (!v62)
  {
    goto LABEL_10;
  }

  __cxa_free_exception(v61);
  goto LABEL_10;
}

void sub_10003F34C(uint64_t *a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMaximumAgeForValidity", 0x8000100u, kCFAllocatorNull);
  int v5 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v4, &v18);
  CFRelease(v4);
  double v6 = v18;
  uint64_t v7 = *(std::__shared_weak_count **)v20;
  if (*(void *)v20)
  {
    uint64_t v8 = (unint64_t *)(*(void *)v20 + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  double v10 = 1.0;
  if (v5) {
    double v10 = v6;
  }
  uint64_t v11 = a1[1];
  uint64_t v12 = *a1;
  uint64_t v13 = sub_10003F990(*a1, v11, *(double *)(a2 + 16) - v10);
  sub_10003F91C((uint64_t)a1, v13, a1[1]);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819488);
  }
  char v14 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *a1;
    uint64_t v15 = a1[1];
    int v17 = (char *)operator new(0x28uLL);
    *(void *)(v17 + 29) = 0LL;
    *(_OWORD *)int v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    sub_10000AE6C(a2, v17);
    *(_DWORD *)__int128 buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&void v20[2] = "";
    *(_WORD *)char v20 = 2082;
    __int16 v21 = 2050;
    unint64_t v22 = 0xEEEEEEEEEEEEEEEFLL * ((v11 - v12) >> 3);
    __int16 v23 = 2050;
    unint64_t v24 = 0xEEEEEEEEEEEEEEEFLL * ((v15 - v16) >> 3);
    __int16 v25 = 2082;
    __int128 v26 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:filterStaleWiFiMeasurementsForFingerprint, num measurements before:%{public}lu, num measurements after filter:%{public}lu, Recording UUID:%{public, location:escape_only}s}",  buf,  0x30u);
    operator delete(v17);
  }

void sub_10003F584( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void *sub_10003F5E4(void *a1)
{
  *a1 = off_101819428;
  sub_10003F6D4((uint64_t)(a1 + 16));
  uint64_t v2 = (void *)a1[14];
  if (v2 == a1 + 11)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 11;
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_100019CEC((uint64_t)(a1 + 6));
  CFStringRef v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  return a1;
}

void sub_10003F65C(void *a1)
{
  *a1 = off_101819428;
  sub_10003F6D4((uint64_t)(a1 + 16));
  uint64_t v2 = (void *)a1[14];
  if (v2 == a1 + 11)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1 + 11;
  }

  else
  {
    if (!v2) {
      goto LABEL_6;
    }
    uint64_t v3 = 5LL;
  }

  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  sub_100019CEC((uint64_t)(a1 + 6));
  CFStringRef v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }

  operator delete(a1);
}

uint64_t sub_10003F6D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 192))
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }

    sub_100019CEC(a1 + 104);
    sub_100019CEC(a1 + 64);
    sub_10001AA60(a1);
  }

  return a1;
}

void sub_10003F724(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 192) == *(unsigned __int8 *)(a2 + 192))
  {
    if (*(_BYTE *)(a1 + 192))
    {
      sub_10001CCAC(a1, (uint64_t *)a2);
      __int128 v4 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      sub_10001CDA0(a1 + 64, (uint64_t *)(a2 + 64));
      sub_10001CDA0(a1 + 104, (uint64_t *)(a2 + 104));
      __int128 v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      sub_100007664(a1 + 168, (__n128 *)(a2 + 168));
    }
  }

  else if (*(_BYTE *)(a1 + 192))
  {
    sub_10003F7D8(a1);
  }

  else
  {
    sub_10003F828(a1, a2);
    *(_BYTE *)(a1 + 192) = 1;
  }

uint64_t sub_10003F7D8(uint64_t result)
{
  if (*(_BYTE *)(result + 192))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 168);
    if (v2)
    {
      *(void *)(v1 + 176) = v2;
      operator delete(v2);
    }

    sub_100019CEC(v1 + 104);
    sub_100019CEC(v1 + 64);
    double result = sub_10001AA60(v1);
    *(_BYTE *)(v1 + 192) = 0;
  }

  return result;
}

uint64_t sub_10003F828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001B9CC(a1, (uint64_t *)a2);
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_10001B9CC(v4 + 64, (uint64_t *)(a2 + 64));
  sub_10001B9CC(a1 + 104, (uint64_t *)(a2 + 104));
  __int128 v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  return a1;
}

void sub_10003F8A8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        __int128 v6 = v4 - 120;
        sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 88));
        uint64_t v4 = v6;
      }

      while (v6 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10003F91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10003FA50(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 120;
        sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v7 - 88));
        uint64_t v7 = v8;
      }

      while (v8 != v6);
    }

    *(void *)(a1 + 8) = v6;
  }

  return a2;
}

uint64_t sub_10003F990(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    return a2;
  }
  for (uint64_t i = a1 + 120; *(_DWORD *)(i - 24) != 1 || *(double *)(i - 80) >= a3; i += 120LL)
  {
    if (i == a2) {
      return a2;
    }
  }

  uint64_t v7 = i - 120;
  if (i - 120 != a2)
  {
    while (i != a2)
    {
      if (*(_DWORD *)(i + 96) != 1 || *(double *)(i + 40) >= a3)
      {
        __int128 v9 = *(_OWORD *)(i + 16);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)i;
        *(_OWORD *)(v7 + 16) = v9;
        sub_100069010(v7 + 32, i + 32);
        *(_DWORD *)(v7 + 112) = *(_DWORD *)(i + 112);
        v7 += 120LL;
      }

      i += 120LL;
    }
  }

  return v7;
}

uint64_t sub_10003FA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    __int128 v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    *(_OWORD *)(a3 + 16) = v6;
    sub_100069010(a3 + 32, v4 + 32);
    *(_DWORD *)(a3 + 112) = *(_DWORD *)(v4 + 112);
    a3 += 120LL;
    v4 += 120LL;
  }

  while (v4 != v5);
  return v5;
}

void sub_10003FAC0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10003FAEC@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1[23] >= 0) {
    __int128 v6 = a1;
  }
  else {
    __int128 v6 = *(const char **)a1;
  }
  if (!sub_1002A8F8C(a2, v6, v14))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
    uint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      __int128 v9 = a1[23] >= 0 ? (uint64_t *)a1 : *(uint64_t **)a1;
      *(_DWORD *)__int128 buf = 68289795;
      int v16 = 0;
      __int16 v17 = 2082;
      double v18 = "";
      __int16 v19 = 2082;
      char v20 = v9;
      __int16 v21 = 2082;
      unint64_t v22 = "assert";
      __int16 v23 = 2081;
      unint64_t v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't find key: , key:%{public, location:escape_only}s, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018194A8);
      }
    }

    double v10 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      uint64_t v11 = a1[23] >= 0 ? (uint64_t *)a1 : *(uint64_t **)a1;
      *(_DWORD *)__int128 buf = 68289795;
      int v16 = 0;
      __int16 v17 = 2082;
      double v18 = "";
      __int16 v19 = 2082;
      char v20 = v11;
      __int16 v21 = 2082;
      unint64_t v22 = "assert";
      __int16 v23 = 2081;
      unint64_t v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't find key: ",  "{msg%{public}.0s:Couldn't find key: , key:%{public, location:escape_only}s, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018194A8);
      }
    }

    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      if (a1[23] >= 0) {
        uint64_t v13 = a1;
      }
      else {
        uint64_t v13 = *(const char **)a1;
      }
      *(_DWORD *)__int128 buf = 68289795;
      int v16 = 0;
      __int16 v17 = 2082;
      double v18 = "";
      __int16 v19 = 2082;
      char v20 = (uint64_t *)v13;
      __int16 v21 = 2082;
      unint64_t v22 = "assert";
      __int16 v23 = 2081;
      unint64_t v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Couldn't find key: , key:%{public, location:escape_only}s, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationAlgorithms.mm",  47,  "createPerSourceWeights");
    __break(1u);
  }

  sub_10003FDF8((uint64_t)v14, a3);
  return sub_1002A5590(v14);
}

void sub_10003FDDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_10003FDF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((sub_1002A82BC(a1, "wifi", &v12) & 1) == 0)
  {
    uint64_t v4 = sub_101224764();
    goto LABEL_6;
  }

  uint64_t v4 = sub_1002A82BC(a1, "ble", &v11);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    uint64_t result = sub_101224604(v4);
    goto LABEL_7;
  }

  uint64_t result = sub_1002A82BC(a1, "uwb", &v10);
  if ((result & 1) != 0)
  {
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    uint64_t v8 = v10;
    *a2 = &off_1018194D8;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
    return result;
  }

LABEL_7:
  uint64_t v9 = sub_1012244A4(result);
  return sub_10003FE9C(v9);
}

  uint64_t v9 = sub_1012244A4(result);
  return sub_10004000C(v9);
}

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820920);
  }
  uint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf fingerprint does not have a valid recording uuid",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
    v18[0] = 0;
    __int16 v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf fingerprint does not have a valid recording uuid",  v18,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationFingerprint::CLMicroLocationFingerprint(const CLMicroLocationProto::Fingerprint &)",  "%s\n",  v17);
  }

  v1[4] = v3;
  return result;
}

  *((void *)a3 + 3) = *(void *)&self->_timestamp;
  uint64_t v4 = (__int16)self->_has;
  if ((v4 & 8) != 0)
  {
    *((_DWORD *)a3 + 9) = self->_exitState;
    *((_WORD *)a3 + 30) |= 8u;
    uint64_t v4 = (__int16)self->_has;
    if ((v4 & 1) == 0)
    {
LABEL_9:
      if ((v4 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_9;
  }

  *((void *)a3 + 1) = *(void *)&self->_estExitTime;
  *((_WORD *)a3 + 30) |= 1u;
  uint64_t v4 = (__int16)self->_has;
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      return;
    }
LABEL_20:
    *((_BYTE *)a3 + 57) = self->_isVehicleConnected;
    *((_WORD *)a3 + 30) |= 0x100u;
    return;
  }

  *((void *)result + 3) = *(void *)&self->_timestamp;
  uint64_t v6 = (__int16)self->_has;
  if ((v6 & 8) != 0)
  {
    *((_DWORD *)result + 9) = self->_exitState;
    *((_WORD *)result + 30) |= 8u;
    uint64_t v6 = (__int16)self->_has;
    if ((v6 & 1) == 0)
    {
LABEL_9:
      if ((v6 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }

  else if ((v6 & 1) == 0)
  {
    goto LABEL_9;
  }

  *((void *)result + 1) = *(void *)&self->_estExitTime;
  *((_WORD *)result + 30) |= 1u;
  uint64_t v6 = (__int16)self->_has;
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    goto LABEL_11;
  }

  self->_timestamp = *((double *)a3 + 3);
  uint64_t v4 = *((_WORD *)a3 + 30);
  if ((v4 & 8) != 0)
  {
    self->_exitState = *((_DWORD *)a3 + 9);
    *(_WORD *)&self->_has |= 8u;
    uint64_t v4 = *((_WORD *)a3 + 30);
    if ((v4 & 1) == 0)
    {
LABEL_9:
      if ((v4 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_9;
  }

  self->_estExitTime = *((double *)a3 + 1);
  *(_WORD *)&self->_has |= 1u;
  uint64_t v4 = *((_WORD *)a3 + 30);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      return;
    }
LABEL_20:
    self->_isVehicleConnected = *((_BYTE *)a3 + 57);
    *(_WORD *)&self->_has |= 0x100u;
    return;
  }

  __int16 v21 = sub_1006E27E8();
  sub_100413284(v21, &v99);
  unint64_t v22 = sub_1002A81F8(v99, "NatalimetryUserInfoHeightM", (float *)&v98);
  __int16 v23 = v22;
  unint64_t v24 = v100;
  if (v100)
  {
    __int16 v25 = (unint64_t *)&v100->__shared_owners_;
    do
      __int128 v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (!v23) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  if (v22)
  {
LABEL_12:
    __int128 v27 = v98;
    *(_BYTE *)(a1 + 1409) = 1;
    *(_DWORD *)(a1 + 1360) = v27;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101836EC0);
  }
  uint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = CLConnectionMessage::name(*a2);
    uint64_t v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
    char v14 = 68289794;
    uint64_t v15 = 0;
    int v16 = 2082;
    __int16 v17 = "";
    double v18 = 2114;
    __int16 v19 = v7;
    char v20 = 2050;
    __int16 v21 = a1;
    unint64_t v22 = 2082;
    __int16 v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #luLive received unhandled message, ClientKeyPath:%{public, location:escape_ only}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v14,  0x30u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101836EC0);
    }
  }

  uint64_t v10 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v13 = (uint64_t *)*v12;
    }
    char v14 = 68289794;
    uint64_t v15 = 0;
    int v16 = 2082;
    __int16 v17 = "";
    double v18 = 2114;
    __int16 v19 = v11;
    char v20 = 2050;
    __int16 v21 = a1;
    unint64_t v22 = 2082;
    __int16 v23 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Warning #luLive received unhandled message",  "{msg%{public}.0s:#Warning #luLive received unhandled message, ClientKeyPath:%{public, location:escape_ only}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v14,  0x30u);
  }

  char v20 = &v19;
  uint64_t result = (uint64_t)sub_10044BD34(v8, &v19, (uint64_t)&unk_1012CF090, &v20);
LABEL_38:
  *(double *)(result + 40) = v9;
  return result;
}

  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
    if ((*((_BYTE *)a3 + 52) & 0x10) == 0 || self->_userMetsSource != *((_DWORD *)a3 + 11)) {
      goto LABEL_33;
    }
  }

  else if ((*((_BYTE *)a3 + 52) & 0x10) != 0)
  {
    goto LABEL_33;
  }

  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    if ((*((_BYTE *)a3 + 52) & 8) == 0 || self->_truthMetsSource != *((_DWORD *)a3 + 10)) {
      goto LABEL_33;
    }
  }

  else if ((*((_BYTE *)a3 + 52) & 8) != 0)
  {
    goto LABEL_33;
  }

  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
  }

  else if ((*((_BYTE *)a3 + 52) & 2) != 0)
  {
    goto LABEL_33;
  }

  if ((*(_BYTE *)&self->_has & 4) != 0)
  {
  }

  else if ((*((_BYTE *)a3 + 52) & 4) != 0)
  {
    goto LABEL_33;
  }

  LOBYTE(v5) = (*((_BYTE *)a3 + 52) & 1) == 0;
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    LOBYTE(v5) = 1;
  }

  return v5;
}

  if (-[TRANSITPbTransitMacTile macsCount](self, "macsCount"))
  {
    [a3 clearMacs];
    uint64_t v6 = -[TRANSITPbTransitMacTile macsCount](self, "macsCount");
    if (v6)
    {
      uint64_t v7 = v6;
      for (uint64_t i = 0LL; i != v7; ++i)
        objc_msgSend(a3, "addMacs:", -[TRANSITPbTransitMacTile macsAtIndex:](self, "macsAtIndex:", i));
    }
  }

  __int16 v17 = 0u;
  double v18 = 0u;
  uint64_t v15 = 0u;
  int v16 = 0u;
  macs = self->_macs;
  uint64_t v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( macs,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(macs);
        }
        uint64_t v13 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)i) copyWithZone:a3];
        [v6 addMacs:v13];
      }

      uint64_t v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( macs,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
    }

    while (v10);
  }

  return v6;
}

  uint64_t v12 = 0u;
  uint64_t v13 = 0u;
  uint64_t v10 = 0u;
  uint64_t v11 = 0u;
  uint64_t v5 = (void *)*((void *)a3 + 3);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        -[TRANSITPbTransitMacTile addMacs:](self, "addMacs:", *(void *)(*((void *)&v10 + 1) + 8LL * (void)i));
      }

      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }

      LOBYTE(v5) = 0;
    }
  }

  return v5;
}

  uint64_t v9 = *(_OWORD *)a2;
  uint64_t v10 = a2[1];
  if (v10)
  {
    uint64_t v11 = (unint64_t *)(v10 + 16);
    do
      uint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  uint64_t result = (void **)(a1 + 3);
  char v14 = a1[3];
  uint64_t v15 = (void *)a1[2];
  if ((unint64_t)v15 >= v14)
  {
    __int128 v29 = v9;
    __int16 v17 = a1[1];
    double v18 = ((uint64_t)v15 - v17) >> 4;
    __int16 v19 = v18 + 1;
    char v20 = v14 - v17;
    if (v20 >> 3 > v19) {
      __int16 v19 = v20 >> 3;
    }
    else {
      __int16 v21 = v19;
    }
    __int128 v37 = a1 + 3;
    unint64_t v22 = (char *)sub_100037038((uint64_t)result, v21);
    __int16 v23 = &v22[16 * v18];
    *(void *)__int128 buf = v22;
    uint64_t v34 = v23;
    char v36 = &v22[16 * v24];
    *(_OWORD *)__int16 v23 = v29;
    BOOL v35 = v23 + 16;
    sub_10071B4FC(a1 + 1, buf);
    int v16 = (void *)a1[2];
    uint64_t result = sub_10071B674((void **)buf);
  }

  else
  {
    *uint64_t v15 = v9;
    v15[1] = v10;
    int v16 = v15 + 2;
    a1[2] = (uint64_t)(v15 + 2);
  }

  a1[2] = (uint64_t)v16;
  return result;
}

  uint64_t v7 = *(double *)((char *)&a3->coordinate.longitude + 4);
  *(float *)&uint64_t v7 = v7;
  -[CLPLocation setHorizontalAccuracy:](v5, "setHorizontalAccuracy:", v7);
  -[CLPLocation setTimestamp:](v5, "setTimestamp:", *(double *)((char *)&a3->courseAccuracy + 4));
  -[CLPLocation setProvider:](v5, "setProvider:", LODWORD(a3->lifespan));
  if (*(double *)((char *)&a3->speedAccuracy + 4) >= 0.0)
  {
    uint64_t v8 = *(double *)((char *)&a3->verticalAccuracy + 4);
    *(float *)&uint64_t v8 = v8;
    -[CLPLocation setSpeed:](v5, "setSpeed:", v8);
    uint64_t v9 = *(double *)((char *)&a3->speed + 4);
    *(float *)&uint64_t v9 = v9;
    -[CLPLocation setSpeedAccuracy:](v5, "setSpeedAccuracy:", v9);
    uint64_t v10 = *(double *)((char *)&a3->speedAccuracy + 4);
    *(float *)&uint64_t v10 = v10;
    -[CLPLocation setCourse:](v5, "setCourse:", v10);
    uint64_t v11 = *(double *)((char *)&a3->course + 4);
    *(float *)&uint64_t v11 = v11;
    -[CLPLocation setCourseAccuracy:](v5, "setCourseAccuracy:", v11);
  }

  if (*(double *)((char *)&a3->altitude + 4) > 0.0)
  {
    uint64_t v12 = *(double *)((char *)&a3->horizontalAccuracy + 4);
    *(float *)&uint64_t v12 = v12;
    -[CLPLocation setAltitude:](v5, "setAltitude:", v12);
    uint64_t v13 = *(double *)((char *)&a3->altitude + 4);
    *(float *)&uint64_t v13 = v13;
    -[CLPLocation setVerticalAccuracy:](v5, "setVerticalAccuracy:", v13);
  }

  return v5;
}

  if (!result)
  {
    sub_10124D2CC();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124D744();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124DCD4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124DFA4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124E274();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124E544();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124E814();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124EAE4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124EDB4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124F084();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124F354();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124F624();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124F8F4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124FBC4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_10124FE94();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101250164();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101250434();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101250704();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_1012509D4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101250CA4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101250F74();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101251244();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101251514();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_1012517E4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101251AB4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101251D84();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101252054();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_101252324();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_1012525F4();
    goto LABEL_11;
  }

  return result;
}

  if (!result)
  {
    sub_1012528C4();
    goto LABEL_11;
  }

  return result;
}

  uint64_t v6 = 0LL;
LABEL_8:
  operationType = self->_operationType;
  uint64_t v8 = (unint64_t)-[NSMutableArray hash](self->_vectorClocks, "hash");
  uint64_t v9 = (unint64_t)-[NSMutableArray hash](self->_interestZones, "hash");
  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
    uint64_t v10 = 2654435761LL * self->_correctiveCompensationMask;
    if ((*(_BYTE *)&self->_has & 0x10) != 0) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v11 = 0LL;
    return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v9 ^ (2654435761LL * operationType) ^ v10 ^ v11;
  }

  uint64_t v10 = 0LL;
  if ((*(_BYTE *)&self->_has & 0x10) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v11 = 2654435761LL * self->_suppressShowingInSettings;
  return v4 ^ v3 ^ v5 ^ v6 ^ v8 ^ v9 ^ (2654435761LL * operationType) ^ v10 ^ v11;
}

  self->_operationType = *((_DWORD *)a3 + 10);
  __int16 v21 = 0u;
  unint64_t v22 = 0u;
  __int16 v23 = 0u;
  unint64_t v24 = 0u;
  uint64_t v6 = (void *)*((void *)a3 + 6);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v22;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v9) {
          objc_enumerationMutation(v6);
        }
        -[CLCompanionSyncAuthObject addVectorClocks:]( self,  "addVectorClocks:",  *(void *)(*((void *)&v21 + 1) + 8LL * (void)i));
      }

      uint64_t v8 = [v6 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }

    while (v8);
  }

  __int16 v19 = 0u;
  char v20 = 0u;
  __int16 v17 = 0u;
  double v18 = 0u;
  uint64_t v11 = (void *)*((void *)a3 + 2);
  uint64_t v12 = [v11 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    char v14 = *(void *)v18;
    do
    {
      for (j = 0LL; j != v13; j = (char *)j + 1)
      {
        if (*(void *)v18 != v14) {
          objc_enumerationMutation(v11);
        }
        -[CLCompanionSyncAuthObject addInterestZones:]( self,  "addInterestZones:",  *(void *)(*((void *)&v17 + 1) + 8LL * (void)j));
      }

      uint64_t v13 = [v11 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }

    while (v13);
  }

  int v16 = *((_BYTE *)a3 + 60);
  if ((v16 & 2) != 0)
  {
    self->_correctiveCompensationMask = *((_DWORD *)a3 + 8);
    *(_BYTE *)&self->_has |= 2u;
    int v16 = *((_BYTE *)a3 + 60);
  }

  if ((v16 & 0x10) != 0)
  {
    self->_suppressShowingInSettings = *((_BYTE *)a3 + 57);
    *(_BYTE *)&self->_has |= 0x10u;
  }

  uint64_t v4 = 1LL;
LABEL_8:
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  uint64_t v5 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    else {
      uint64_t v6 = (uint64_t *)*a2;
    }
    v8[0] = 68289538;
    v8[1] = 0;
    uint64_t v9 = 2082;
    uint64_t v10 = "";
    uint64_t v11 = 2082;
    uint64_t v12 = v6;
    uint64_t v13 = 1026;
    char v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Fence: isOnBehalfBundleAuthorized, key:%{public, location:escape_only}s, authorized :%{public}hhd}",  (uint8_t *)v8,  0x22u);
  }

  return v4;
}

  v1[5] = v3;
  return result;
}

  if (self->_location) {
    objc_msgSend(a3, "setLocation:");
  }
}

  location = self->_location;
  uint64_t v7 = *((void *)a3 + 2);
  if (location)
  {
    if (v7) {
      -[ALSLocation mergeFrom:](location, "mergeFrom:");
    }
  }

  else if (v7)
  {
    -[ALSCdmaEvdoTower setLocation:](self, "setLocation:");
  }

  uint64_t v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v6 = sub_100B7FE30((uint64_t)v5, *(void **)(a1 + 40));
  if (!v6)
  {
LABEL_41:
    __int16 v19 = *(void *)(*(void *)(a1 + 64) + 8LL);
    char v20 = 107;
LABEL_42:
    *(_DWORD *)(v19 + 24) = v20;
    return;
  }

  uint64_t v7 = v6;
  char v36 = 0u;
  __int128 v37 = 0u;
  uint64_t v34 = 0u;
  BOOL v35 = 0u;
  uint64_t v8 = [v6 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v35;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)i);
        uint64_t v12 = [v7 objectForKeyedSubscript:v11];
      }

      uint64_t v8 = [v7 countByEnumeratingWithState:&v34 objects:v46 count:16];
    }

    while (v8);
  }

  if (![v5 count])
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    __int16 v21 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[Dynamic Config] Parameter dictionary is empty, returning.",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "[Dynamic Config] Parameter dictionary is empty, returning.",  &v40,  2);
      __int128 v27 = (__n128 *)v26;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke",  "%s\n",  v26);
      if (v27 != &buf) {
        free(v27);
      }
    }

    goto LABEL_41;
  }

  uint64_t v40 = 0uLL;
  std::string v41 = 0;
  sub_1010DDBC0(&v42, "");
  sub_1010DDBC0(&v43, "");
  sub_1010DDBC0(&v44, "");
  sub_1010DDBC0(&__p, "");
  *((void *)&v40 + 1) = CFAbsoluteTimeGetCurrent();
  std::string v41 = *(_DWORD *)(a1 + 80);
  std::string::assign(&v42, (const std::string::value_type *)[*(id *)(a1 + 32) UTF8String]);
  std::string::assign(&v43, (const std::string::value_type *)[*(id *)(a1 + 48) UTF8String]);
  std::string::assign(&v44, (const std::string::value_type *)[*(id *)(a1 + 56) UTF8String]);
  std::string::size_type v33 = 0LL;
  uint64_t v13 = +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v5,  0LL,  &v33);
  if (!v13 || v33)
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    unint64_t v22 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[Dynamic Config] Error serializing parameter dictionary, error: %@",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      int v38 = 138412290;
      uint64_t v39 = v33;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "[Dynamic Config] Error serializing parameter dictionary, error: %@",  &v38,  12);
      __int128 v29 = (__n128 *)v28;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke",  "%s\n",  v28);
      if (v29 != &buf) {
        free(v29);
      }
    }

    int v16 = 107;
  }

  else
  {
    std::string::assign( &__p,  -[NSString UTF8String]( -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v13, 4LL),  "UTF8String"));
    sub_10024D4E8(*(void *)v2, (uint64_t)&v40);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_101874040);
    }
    char v14 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      buf.n128_u32[0] = 138543362;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[Dynamic Config] Inserted config with ID %{public}@",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_101874040);
      }
      char v30 = *(void *)(a1 + 32);
      int v38 = 138543362;
      uint64_t v39 = v30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934738,  0LL,  "[Dynamic Config] Inserted config with ID %{public}@",  &v38,  12);
      char v32 = (__n128 *)v31;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke",  "%s\n",  v31);
      if (v32 != &buf) {
        free(v32);
      }
    }

    if (*(void *)(v2 + 56) >= 3uLL) {
      sub_100B816AC((void *)(v2 + 16));
    }
    sub_1010DDBC0(&buf, (char *)[*(id *)(a1 + 32) UTF8String]);
    sub_100B81720((void *)(v2 + 16), &buf);
    if (v48 < 0) {
      operator delete((void *)buf.n128_u64[0]);
    }
    *(_DWORD *)(v2 + 64) = 2;
    int v16 = 100;
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v16;
}

  if (-[ALSNearbyRequest wifiBandsCount](self, "wifiBandsCount"))
  {
    [a3 clearWifiBands];
    uint64_t v6 = -[ALSNearbyRequest wifiBandsCount](self, "wifiBandsCount");
    if (v6)
    {
      uint64_t v7 = v6;
      for (uint64_t i = 0LL; i != v7; ++i)
        objc_msgSend(a3, "addWifiBands:", -[ALSNearbyRequest wifiBandsAtIndex:](self, "wifiBandsAtIndex:", i));
    }
  }

  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    *((_DWORD *)a3 + 17) = self->_wifiAltitudeScale;
    *((_BYTE *)a3 + 80) |= 8u;
  }

  if (self->_meta) {
    objc_msgSend(a3, "setMeta:");
  }
}

  PBRepeatedInt32Copy(v7 + 1, &self->_wifiBands);
  if ((*(_BYTE *)&self->_has & 8) != 0)
  {
    *((_DWORD *)v8 + 17) = self->_wifiAltitudeScale;
    *((_BYTE *)v8 + 80) |= 8u;
  }

  *((void *)v8 + 6) = -[ALSMeta copyWithZone:](self->_meta, "copyWithZone:", a3);
  return v8;
}

  uint64_t v5 = 0LL;
LABEL_8:
  if ((*(_BYTE *)&self->_has & 0x10) != 0) {
    uint64_t v6 = 2654435761LL * self->_wifiGranularity;
  }
  else {
    uint64_t v6 = 0LL;
  }
  if ((*(_BYTE *)&self->_has & 2) != 0) {
    uint64_t v7 = 2654435761LL * self->_radius;
  }
  else {
    uint64_t v7 = 0LL;
  }
  latitude = self->_latitude;
  longitude = self->_longitude;
  uint64_t v10 = PBRepeatedInt32Hash(&self->_wifiBands);
  if ((*(_BYTE *)&self->_has & 8) != 0) {
    uint64_t v11 = 2654435761LL * self->_wifiAltitudeScale;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return (2654435761LL * longitude) ^ (2654435761LL * latitude) ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v10 ^ v11 ^ -[ALSMeta hash](self->_meta, "hash");
}

  uint64_t v6 = (char *)[a3 wifiBandsCount];
  if (v6)
  {
    uint64_t v7 = v6;
    for (uint64_t i = 0LL; i != v7; ++i)
      -[ALSNearbyRequest addWifiBands:](self, "addWifiBands:", [a3 wifiBandsAtIndex:i]);
  }

  if ((*((_BYTE *)a3 + 80) & 8) != 0)
  {
    self->_wifiAltitudeScale = *((_DWORD *)a3 + 17);
    *(_BYTE *)&self->_has |= 8u;
  }

  meta = self->_meta;
  uint64_t v10 = *((void *)a3 + 6);
  if (meta)
  {
    if (v10) {
      -[ALSMeta mergeFrom:](meta, "mergeFrom:");
    }
  }

  else if (v10)
  {
    -[ALSNearbyRequest setMeta:](self, "setMeta:");
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101876CF0);
  }
  uint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = CLConnectionMessage::name(*a2);
    uint64_t v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
    char v14 = 68289794;
    uint64_t v15 = 0;
    int v16 = 2082;
    __int16 v17 = "";
    double v18 = 2114;
    __int16 v19 = v7;
    char v20 = 2050;
    __int16 v21 = a1;
    unint64_t v22 = 2082;
    __int16 v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #clfas received unhandled message, ClientKeyPath:%{public, location:escape_o nly}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v14,  0x30u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101876CF0);
    }
  }

  uint64_t v10 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v13 = (uint64_t *)*v12;
    }
    char v14 = 68289794;
    uint64_t v15 = 0;
    int v16 = 2082;
    __int16 v17 = "";
    double v18 = 2114;
    __int16 v19 = v11;
    char v20 = 2050;
    __int16 v21 = a1;
    unint64_t v22 = 2082;
    __int16 v23 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Warning #clfas received unhandled message",  "{msg%{public}.0s:#Warning #clfas received unhandled message, ClientKeyPath:%{public, location:escape_o nly}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v14,  0x30u);
  }

  uint64_t v11 = sub_1002F8DDC();
  sub_1002A832C(v11, (uint64_t)@"kColdStorageSyncStartTime", v5);
  if (qword_1019347B0 != -1) {
    dispatch_once(&qword_1019347B0, &stru_101877508);
  }
  uint64_t v12 = (os_log_s *)qword_1019347B8;
  if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *v5;
    *(_DWORD *)__int128 buf = 134217984;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[Manager] CMHealthColdStorageManager fStartSyncTime: %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_101877508);
    }
    __int16 v19 = *v5;
    LODWORD(v22) = 134217984;
    *(void *)((char *)&v22 + 4) = v19;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  2LL,  "[Manager] CMHealthColdStorageManager fStartSyncTime: %f",  COERCE_DOUBLE(&v22));
    __int16 v21 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CMHealthColdStorageManager::CMHealthColdStorageManager(BOOL)", "%s\n", v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  std::string::assign(v6, "");
  char v14 = sub_1002F8DDC();
  sub_1002A85D0(v14, (uint64_t)@"kColdStorageInstanceUUID", v6);
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(void *)(a1 + 104)) {
      goto LABEL_19;
    }
  }

  else if (*(_BYTE *)(a1 + 119))
  {
    goto LABEL_19;
  }

  uuid_generate(out);
  uuid_unparse(out, (char *)buf);
  sub_1010DDBC0(&v22, (char *)buf);
  *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v22;
  v6->__r_.__value_.__l.__cap_ = v23;
  uint64_t v15 = sub_1002F8DDC();
  sub_1002ACDCC(v15, @"kColdStorageInstanceUUID", (char *)v6);
  int v16 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v16 + 944LL))(v16);
LABEL_19:
  __int16 v17 = sub_1002F8DDC();
  sub_1002A6FD4(v17, (uint64_t)@"HealthColdStorageVO2MaxDeletionComplete", (BOOL *)(a1 + 148));
  return a1;
}

  sub_100D1EF7C(&a10);
  _Unwind_Resume(a1);
}

  if (!a31) {
    goto LABEL_13;
  }
  std::string v53 = a30;
  if (a30 == &a27)
  {
    std::string v54 = 4LL;
    std::string v53 = &a27;
  }

  else
  {
    if (!a30) {
      goto LABEL_13;
    }
    std::string v54 = 5LL;
  }

  (*(void (**)(void))(*(void *)v53 + 8 * v54))();
LABEL_13:
  sub_1000ECEDC(&a20);
  _Unwind_Resume(a1);
}

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101880DE0);
  }
  uint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v9 = (uint64_t *)*v8;
    }
    v10[0] = 68289794;
    v10[1] = 0;
    uint64_t v11 = 2082;
    uint64_t v12 = "";
    uint64_t v13 = 2114;
    char v14 = v7;
    uint64_t v15 = 2050;
    int v16 = a1;
    __int16 v17 = 2082;
    double v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #luHistorical received unhandled message, ClientKeyPath:%{public, location:e scape_only}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)v10,  0x30u);
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018814F0);
  }
  uint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = CLConnectionMessage::name(*a2);
    uint64_t v9 = *(char *)(v8 + 23) >= 0 ? (uint64_t *)v8 : *(uint64_t **)v8;
    char v14 = 68289794;
    uint64_t v15 = 0;
    int v16 = 2082;
    __int16 v17 = "";
    double v18 = 2114;
    __int16 v19 = v7;
    char v20 = 2050;
    __int16 v21 = a1;
    unint64_t v22 = 2082;
    __int16 v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #clss received unhandled message, ClientKeyPath:%{public, location:escape_on ly}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v14,  0x30u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018814F0);
    }
  }

  uint64_t v10 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = (uint64_t *)CLConnectionMessage::name(*a2);
    else {
      uint64_t v13 = (uint64_t *)*v12;
    }
    char v14 = 68289794;
    uint64_t v15 = 0;
    int v16 = 2082;
    __int16 v17 = "";
    double v18 = 2114;
    __int16 v19 = v11;
    char v20 = 2050;
    __int16 v21 = a1;
    unint64_t v22 = 2082;
    __int16 v23 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#Warning #clss received unhandled message",  "{msg%{public}.0s:#Warning #clss received unhandled message, ClientKeyPath:%{public, location:escape_on ly}@, this:%{public}p, message:%{public, location:escape_only}s}",  (uint8_t *)&v14,  0x30u);
  }

      LOBYTE(v7) = 0;
    }
  }

  return v7;
}

  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_10188C1A8);
  }
  uint64_t v3 = (os_log_s *)qword_101934848;
  if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "Empty bundle identifier should not be passed in here",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  17LL,  "Empty bundle identifier should not be passed in here",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLBeaconFenceAuthorizationManager::unlockedIsOnBehalfBundleAuthorized(std::string)",  "%s\n",  v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return 1LL;
}

  uint64_t v6 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  uint64_t v7 = *((char *)v6 + 23);
  if (v7 < 0)
  {
    if (v6[1] != 53LL) {
      goto LABEL_13;
    }
    uint64_t v6 = (void *)*v6;
  }

  else if (v7 != 53)
  {
    goto LABEL_13;
  }

  if (!memcmp(v6, "SpringTracking/kCLConnectionMessageSpringTrackerStart", 0x35uLL))
  {
    __int128 v26 = *(CLConnectionMessage **)a2;
    __int16 v21 = *(std::__shared_weak_count **)(a2 + 8);
    v40[0] = (uint64_t)v26;
    v40[1] = (uint64_t)v21;
    if (v21)
    {
      __int128 v27 = (unint64_t *)&v21->__shared_owners_;
      do
        __int128 v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }

    sub_100F67FE0(a1, v40);
    if (!v21) {
      return;
    }
    __int128 v29 = (unint64_t *)&v21->__shared_owners_;
    do
      __int16 v25 = __ldaxr(v29);
    while (__stlxr(v25 - 1, v29));
    goto LABEL_67;
  }

  *(float *)&uint64_t v4 = self->_odometer;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4),  @"odometer");
  uint64_t v7 = (char)self->_has;
  if ((v7 & 0x10) == 0)
  {
    if ((*(_BYTE *)&self->_has & 1) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_timestampGps),  @"timestampGps");
    if ((*(_BYTE *)&self->_has & 0x20) == 0) {
      return v3;
    }
    goto LABEL_18;
  }

  *(float *)&uint64_t v6 = self->_gpsSpeedAccuracy;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"gpsSpeedAccuracy");
  uint64_t v7 = (char)self->_has;
  if ((v7 & 1) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v7 & 0x20) == 0) {
    return v3;
  }
LABEL_18:
  quality = self->_quality;
  if (quality >= 4) {
    uint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_quality);
  }
  else {
    uint64_t v9 = (NSString *)*(&off_101894730 + quality);
  }
  [v3 setObject:v9 forKey:@"quality"];
  return v3;
}

  *((_DWORD *)a3 + 8) = LODWORD(self->_odometer);
  uint64_t v4 = (char)self->_has;
  if ((v4 & 0x10) != 0)
  {
    *((_DWORD *)a3 + 7) = LODWORD(self->_gpsSpeedAccuracy);
    *((_BYTE *)a3 + 48) |= 0x10u;
    uint64_t v4 = (char)self->_has;
    if ((v4 & 1) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        return;
      }
LABEL_18:
      *((_DWORD *)a3 + 9) = self->_quality;
      *((_BYTE *)a3 + 48) |= 0x20u;
      return;
    }
  }

  else if ((*(_BYTE *)&self->_has & 1) == 0)
  {
    goto LABEL_9;
  }

  *((void *)a3 + 1) = *(void *)&self->_timestampGps;
  *((_BYTE *)a3 + 48) |= 1u;
  if ((*(_BYTE *)&self->_has & 0x20) != 0) {
    goto LABEL_18;
  }
}

  *((_DWORD *)result + 8) = LODWORD(self->_odometer);
  uint64_t v9 = (char)self->_has;
  if ((v9 & 0x10) != 0)
  {
    *((_DWORD *)result + 7) = LODWORD(self->_gpsSpeedAccuracy);
    *((_BYTE *)result + 48) |= 0x10u;
    uint64_t v9 = (char)self->_has;
    if ((v9 & 1) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0) {
        return result;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)&self->_has & 1) == 0)
  {
    goto LABEL_9;
  }

  *((void *)result + 1) = *(void *)&self->_timestampGps;
  *((_BYTE *)result + 48) |= 1u;
  if ((*(_BYTE *)&self->_has & 0x20) == 0) {
    return result;
  }
LABEL_10:
  *((_DWORD *)result + 9) = self->_quality;
  *((_BYTE *)result + 48) |= 0x20u;
  return result;
}

  self->_odometer = *((float *)a3 + 8);
  uint64_t v4 = *((_BYTE *)a3 + 48);
  if ((v4 & 0x10) != 0)
  {
    self->_gpsSpeedAccuracy = *((float *)a3 + 7);
    *(_BYTE *)&self->_has |= 0x10u;
    uint64_t v4 = *((_BYTE *)a3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        return;
      }
LABEL_18:
      self->_quality = *((_DWORD *)a3 + 9);
      *(_BYTE *)&self->_has |= 0x20u;
      return;
    }
  }

  else if ((*((_BYTE *)a3 + 48) & 1) == 0)
  {
    goto LABEL_9;
  }

  self->_timestampGps = *((double *)a3 + 1);
  *(_BYTE *)&self->_has |= 1u;
  if ((*((_BYTE *)a3 + 48) & 0x20) != 0) {
    goto LABEL_18;
  }
}

#error "10003FF1C: call analysis failed (funcsize=40)"
void sub_10003FF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;
  va_start(va, a5);
  sub_1002A5590(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((sub_1002A6F64(a1, "wifi", &v12) & 1) == 0)
  {
    uint64_t v4 = sub_101224764();
    goto LABEL_6;
  }

  uint64_t v4 = sub_1002A6F64(a1, "ble", &v11);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    uint64_t result = sub_101224604(v4);
    goto LABEL_7;
  }

  uint64_t result = sub_1002A6F64(a1, "uwb", &v10);
  if ((result & 1) != 0)
  {
    BOOL v6 = v12;
    BOOL v7 = v11;
    BOOL v8 = v10;
    *(void *)a2 = &off_101819528;
    *(_BYTE *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 9) = v7;
    *(_BYTE *)(a2 + 10) = v8;
    return result;
  }

uint64_t sub_10004000C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if ((sub_1002A82BC(a1, "jaccard_scale_factor", &v74) & 1) == 0)
  {
    sub_101224D0C( (uint64_t)v53,  v8,  v9,  v10,  v11,  v12,  v13,  v14,  v33,  v34,  v35,  v36,  (uint64_t)v37,  v38,  (uint64_t)v39,  v40,  (uint64_t)__p,  v42,  v43,  (uint64_t)v44,  v45,  (uint64_t)v46,  v47,  v48);
LABEL_18:
    uint64_t result = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationAlgorithms.mm",  LODWORD(v53[0]),  "createWeightedEuclideanJaccardDistanceFunction");
    __break(1u);
    return result;
  }

  if ((sub_1002A82BC(a1, "e2j_kernel_thr", &v73) & 1) == 0)
  {
    sub_101224B9C( (uint64_t)v53,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v33,  v34,  v35,  v36,  (uint64_t)v37,  v38,  (uint64_t)v39,  v40,  (uint64_t)__p,  v42,  v43,  (uint64_t)v44,  v45,  (uint64_t)v46,  v47,  v48);
    goto LABEL_18;
  }

  if (!sub_1002A8F8C(a1, "per_source_params", v72))
  {
    sub_101224A2C( (uint64_t)v53,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v33,  v34,  v35,  v36,  (uint64_t)v37,  v38,  (uint64_t)v39,  v40,  (uint64_t)__p,  v42,  v43,  (uint64_t)v44,  v45,  (uint64_t)v46,  v47,  v48);
    goto LABEL_18;
  }

  *(void *)&__int128 v55 = v74;
  *((void *)&v55 + 1) = v73;
  sub_1010DDBC0(v53, "value_scale_factor");
  sub_1002A55A8(v52, (uint64_t)v72);
  v52[0] = &off_1018201E0;
  sub_10003FAEC((const char *)v53, (uint64_t)v52, &v56);
  sub_1010DDBC0(v50, "euclidean_weight");
  sub_1002A55A8(v49, (uint64_t)v72);
  v49[0] = &off_1018201E0;
  sub_10003FAEC((const char *)v50, (uint64_t)v49, &v59);
  sub_1010DDBC0(&v46, "jaccard_pos_weight");
  sub_1002A55A8(&v44, (uint64_t)v72);
  std::string v44 = &off_1018201E0;
  sub_10003FAEC((const char *)&v46, (uint64_t)&v44, &v62);
  sub_1010DDBC0(&__p, "jaccard_neg_weight");
  sub_1002A55A8(&v39, (uint64_t)v72);
  uint64_t v39 = &off_1018201E0;
  sub_10003FAEC((const char *)&__p, (uint64_t)&v39, &v65);
  sub_1002A55A8(&v37, (uint64_t)v72);
  __int128 v37 = &off_1018201E0;
  sub_10003FE9C(&v37);
  *(void *)&__int128 v70 = *(void *)a2;
  BYTE8(v70) = *(_BYTE *)(a2 + 8);
  sub_100041A18((uint64_t)v71, a3);
  *(void *)(a4 + 24) = 0LL;
  __int128 v29 = (char *)operator new(0xF8uLL);
  *(void *)__int128 v29 = &off_101819578;
  *(_OWORD *)(v29 + 8) = v55;
  *((void *)v29 + 3) = &off_1018194D8;
  *((_OWORD *)v29 + 2) = v57;
  uint64_t v30 = v61;
  *((void *)v29 + 6) = v58;
  *((void *)v29 + 7) = &off_1018194D8;
  *((_OWORD *)v29 + 4) = v60;
  *((void *)v29 + 10) = v30;
  *((void *)v29 + 11) = &off_1018194D8;
  *((_OWORD *)v29 + 6) = v63;
  uint64_t v31 = v67;
  *((void *)v29 + 14) = v64;
  *((void *)v29 + 15) = &off_1018194D8;
  *((_OWORD *)v29 + 8) = v66;
  *((void *)v29 + 18) = v31;
  *((void *)v29 + 19) = &off_101819528;
  v29[162] = v69;
  *((_WORD *)v29 + 80) = v68;
  *(_OWORD *)(v29 + 168) = v70;
  sub_100041A18((uint64_t)(v29 + 184), (uint64_t)v71);
  *(void *)(a4 + 24) = v29;
  if (v71[56]) {
    sub_100019CEC((uint64_t)v71);
  }
  sub_1002A5554(&v37);
  sub_1002A5554(&v39);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  sub_1002A5554(&v44);
  if (SHIBYTE(v48) < 0) {
    operator delete(v46);
  }
  sub_1002A5554(v49);
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  sub_1002A5554(v52);
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  return sub_1002A5590(v72);
}

void sub_100040368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    sub_100019CEC(v73);
  }
  sub_1002A5554(&a13);
  sub_1002A5554(&a15);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1002A5554(&a23);
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_1002A5554(&a31);
  if (a38 < 0) {
    operator delete(a33);
  }
  sub_1002A5554(&a39);
  if (a46 < 0) {
    operator delete(a41);
  }
  sub_1002A5590(v74 - 96);
  _Unwind_Resume(a1);
}

void sub_10004046C(int a1)
{
  __asm { BR              X10 }

uint64_t sub_1000404B4()
{
  return sub_10004000C(v3, v2, v1, v0);
}

void sub_1000406D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  if (a33) {
    sub_100019CEC(v34);
  }
  _Unwind_Resume(a1);
}

void sub_1000406F0()
{
  if (*(_BYTE *)(v1 - 64)) {
    JUMPOUT(0x10004070CLL);
  }
  JUMPOUT(0x100040714LL);
}

void sub_10004071C(int a1)
{
  else {
    int v2 = 0;
  }
  int v3 = sub_100040978();
  int v4 = sub_100040A50();
  sub_100093AE4(v3, v4, v2);
  sub_1002F0B04(&v10);
  CFStringRef v5 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAdaptiveSensorsEnable", 0x8000100u, kCFAllocatorNull);
  sub_1002A6FD4(v10, (uint64_t)v5, &v9);
  CFRelease(v5);
  BOOL v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_10004046C(a1);
}

void sub_100040858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1000408A0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingUwbRangeEnable",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100040960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100040978()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingWifiRssiEnable",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100040A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100040A50()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMeasurementProcessingBleLeechEnable",  0x8000100u,  kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100040B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100040B28(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = a1;
  if (a1 >= 2)
  {
    int v6 = sub_10122545C(a1);
    sub_100040B88(v6, v7);
  }

  else
  {
    int v4 = operator new(8uLL);
    unint64_t v5 = &off_10181A220;
    if (v2 == 1) {
      unint64_t v5 = &off_10181A3C8;
    }
    *int v4 = v5;
    *a2 = v4;
  }

void sub_100040B88(int a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 == 2)
  {
    sub_100040DEC((void *)a2);
    sub_1002F0B04(&v25);
    CFStringRef v3 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSimilarityListSmallClusterSize",  0x8000100u,  kCFAllocatorNull);
    int v4 = sub_1002A77CC(v25, (uint64_t)v3, &v24);
    CFRelease(v3);
    uint64_t v5 = LODWORD(v24);
    int v6 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    uint64_t v9 = 20LL;
    if (v4) {
      uint64_t v9 = v5;
    }
    *(void *)(a2 + 24) = v9;
    sub_1002F0B04(&v25);
    CFStringRef v10 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSimilarityListSmallClusterRelativeSize",  0x8000100u,  kCFAllocatorNull);
    int v11 = sub_1002A832C(v25, (uint64_t)v10, &v24);
    CFRelease(v10);
    double v12 = v24;
    uint64_t v13 = v26;
    if (v26)
    {
      uint64_t v14 = (unint64_t *)&v26->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    double v16 = 0.2;
    if (v11) {
      double v16 = v12;
    }
    *(double *)(a2 + 32) = v16;
    sub_1002F0B04(&v25);
    CFStringRef v17 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSimilarityListSmallClusterDistanceThreshold",  0x8000100u,  kCFAllocatorNull);
    int v18 = sub_1002A832C(v25, (uint64_t)v17, &v24);
    CFRelease(v17);
    double v19 = v24;
    uint64_t v20 = v26;
    if (v26)
    {
      uint64_t v21 = (unint64_t *)&v26->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }

    double v23 = 0.375;
    if (v18) {
      double v23 = v19;
    }
    *(double *)(a2 + 40) = v23;
  }

  else
  {
    sub_100040EF4((void *)a2);
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
  }

void sub_100040DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void sub_100040DEC(void *a1@<X8>)
{
  int v2 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsSimilarityListClusterDistanceThresholdVector",  0x8000100u,  kCFAllocatorNull);
  BOOL v3 = sub_1002AA610(v10, v2, (CFTypeRef *)&v9);
  CFRelease(v2);
  if (v3)
  {
    v4.n128_f64[0] = sub_100041A80(v9, (uint64_t)a1);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    uint64_t v5 = operator new(8uLL);
    *a1 = v5;
    *v5++ = 0x3FD199999999999ALL;
    a1[1] = v5;
    a1[2] = v5;
  }

  int v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v4);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_100040ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100040EF4(void *a1@<X8>)
{
  int v2 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMagicalMomentsClusterDistanceThresholdVector",  0x8000100u,  kCFAllocatorNull);
  BOOL v3 = sub_1002AA610(v10, v2, (CFTypeRef *)&v9);
  CFRelease(v2);
  if (v3)
  {
    v4.n128_f64[0] = sub_100041C34(v9, (uint64_t)a1);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    uint64_t v5 = operator new(0x18uLL);
    a1[2] = v5 + 3;
    __n128 v4 = (__n128)xmmword_1012CCD38;
    *(_OWORD *)uint64_t v5 = xmmword_1012CCD38;
    void v5[2] = 0x3FD8000000000000LL;
    *a1 = v5;
    a1[1] = v5 + 3;
  }

  int v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v4);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

void sub_100040FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100041008@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t result = operator new(8uLL);
      goto LABEL_7;
    case 1:
      uint64_t result = operator new(8uLL);
      goto LABEL_7;
    case 2:
      uint64_t result = operator new(8uLL);
      goto LABEL_7;
    case 3:
      uint64_t result = operator new(8uLL);
      goto LABEL_7;
    case 4:
      uint64_t result = operator new(8uLL);
LABEL_7:
      *uint64_t result = v4 + 2;
      *a2 = result;
      break;
    default:
      uint64_t v5 = sub_1012255D4();
      uint64_t result = (void *)sub_1000410B8(v5);
      break;
  }

  return result;
}

void sub_1000410B8(uint64_t a1@<X0>, double **a2@<X8>)
{
  if ((sub_1002A775C(a1, "type", &v14) & 1) == 0)
  {
    sub_101225FD8();
LABEL_16:
    uint64_t v8 = sub_10122574C(&v14);
LABEL_17:
    uint64_t v10 = sub_101225D08(v8);
LABEL_18:
    uint64_t v4 = sub_101225E70(v10);
LABEL_19:
    uint64_t v11 = sub_1012258D0(v4);
LABEL_20:
    uint64_t v9 = sub_101225A38(v11);
LABEL_21:
    sub_101225BA0(v9);
LABEL_22:
    __assert_rtn("CLUniformKernelFunction", "CLKernelFunction.h", 97, "sigma > 0.0");
  }

  switch(v14)
  {
    case 0:
      uint64_t v4 = sub_1002A82BC(a1, "sigma", &v13);
      if ((v4 & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v5 = (double *)operator new(0x10uLL);
      double v6 = v13;
      *(void *)uint64_t v5 = &off_101819808;
      v5[1] = 1.0;
      if (v6 <= 0.0) {
        __assert_rtn("CLLaplacianKernelFunction", "CLKernelFunction.h", 60, "sigma > 0.0");
      }
      double v7 = 1.0 / v6;
      goto LABEL_11;
    case 1:
      uint64_t v11 = sub_1002A82BC(a1, "sigma", &v13);
      if ((v11 & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v5 = (double *)operator new(0x10uLL);
      sub_100042A0C(v5, v13);
      goto LABEL_14;
    case 2:
      uint64_t v8 = sub_1002A82BC(a1, "sigma", &v13);
      if ((v8 & 1) == 0) {
        goto LABEL_17;
      }
      uint64_t v9 = sub_1002A82BC(a1, "power", &v12);
      if ((v9 & 1) == 0) {
        goto LABEL_21;
      }
      uint64_t v5 = (double *)operator new(0x18uLL);
      sub_100042AA0((uint64_t)v5, v13, v12);
      goto LABEL_14;
    case 3:
      uint64_t v10 = sub_1002A82BC(a1, "sigma", &v13);
      if ((v10 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v5 = (double *)operator new(0x10uLL);
      double v7 = v13;
      *(void *)uint64_t v5 = &off_101819930;
      v5[1] = 1.0;
      if (v7 <= 0.0) {
        goto LABEL_22;
      }
LABEL_11:
      v5[1] = v7;
LABEL_14:
      *a2 = v5;
      return;
    default:
      goto LABEL_16;
  }

void sub_1000412AC(_Unwind_Exception *a1)
{
}

void sub_1000412CC(int a1)
{
}

void sub_1000412D8(int a1)
{
}

void sub_1000412E4(int a1)
{
}

uint64_t sub_1000412F0()
{
  else {
    uint64_t v0 = 0LL;
  }
  return v0;
}

void sub_100041344(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 3)
  {
    BOOL v3 = (uint64_t *)sub_101226140();
    sub_100041380(v3, v4);
  }

  else
  {
    uint64_t v2 = (uint64_t)*(&off_101819A18 + (int)a1);
    *a2 = &off_101819978;
    a2[1] = v2;
    a2[3] = a2;
  }

void sub_100041380(uint64_t *a1, unsigned int a2)
{
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (a2 == 2) {
    return;
  }
  if (a2 == 3)
  {
LABEL_4:
    sub_1002F0B04(buf);
    CFStringRef v4 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumMicroLocationProbabilityForLocalization",  0x8000100u,  kCFAllocatorNull);
    int v5 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v4, v31);
    CFRelease(v4);
    double v6 = *(double *)v31;
    double v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }

    if (!v5) {
      double v6 = 0.005;
    }
    uint64_t v10 = (__int128 *)*a1;
    uint64_t v11 = (__int128 *)a1[1];
    if ((__int128 *)*a1 == v11)
    {
      double v12 = 0.0;
    }

    else
    {
      double v12 = 0.0;
      do
      {
        if (*((double *)v10 + 2) < 0.0)
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_1018194A8);
          }
          double v13 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = *((void *)v10 + 2);
            *(_DWORD *)__int128 buf = 134349056;
            *(void *)&uint8_t buf[4] = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning microlocation probability should be non-negative %{public}f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_1018194A8);
            }
            uint64_t v15 = *((void *)v10 + 2);
            *(_DWORD *)uint64_t v31 = 134349056;
            *(void *)&v31[4] = v15;
            LODWORD(v30) = 12;
            double v16 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning microlocation probability should be non-negative %{public}f",  v31,  v30);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "auto CLMicroLocationAlgorithms::removeImprobableLocations(std::vector<CLMicroLocationResultInternal> &, Lo calizerType)::(anonymous class)::operator()(auto, const auto &) const [currentSum:auto = double, result:au to = CLMicroLocationResultInternal]",  "%s\n",  v16);
            if (v16 != buf) {
              free(v16);
            }
          }
        }

        double v12 = v12 + *((double *)v10 + 2);
        v10 += 2;
      }

      while (v10 != v11);
    }

    if (fabs(v12 + -1.0) > nextafter(1.0, INFINITY) + -1.0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018194A8);
      }
      CFStringRef v17 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134349056;
        *(double *)&uint8_t buf[4] = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#Warning microlocation probability vector should sum to 1.0 %{public}f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_1018194A8);
        }
        *(_DWORD *)uint64_t v31 = 134349056;
        *(double *)&v31[4] = v12;
        LODWORD(v30) = 12;
        __int128 v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning microlocation probability vector should sum to 1.0 %{public}f",  v31,  v30);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationAlgorithms::removeImprobableLocations(std::vector<CLMicroLocationResultInternal> &, LocalizerType)",  "%s\n",  v29);
        if (v29 != buf) {
          free(v29);
        }
      }
    }

    uint64_t v19 = *a1;
    int v18 = (__int128 *)a1[1];
    if ((__int128 *)*a1 == v18)
    {
      double v22 = 0.0;
      uint64_t v20 = (__int128 *)*a1;
    }

    else
    {
      uint64_t v20 = (__int128 *)*a1;
      while (1)
      {
        double v21 = *((double *)v20 + 2);
        if (v21 < v6) {
          break;
        }
        v20 += 2;
        if (v20 == v18)
        {
          double v22 = 0.0;
          goto LABEL_55;
        }
      }

      double v22 = v21 + 0.0;
    }

    if (v20 != v18)
    {
      uint64_t v25 = v20 + 2;
      if (v20 + 2 != v18)
      {
        do
        {
          double v26 = *((double *)v25 + 2);
          if (v26 >= v6)
          {
            __int128 v27 = *v25;
            *(__int128 *)((char *)v20 + 12) = *(__int128 *)((char *)v25 + 12);
            *uint64_t v20 = v27;
            v20 += 2;
          }

          else
          {
            double v22 = v26 + v22;
          }

          v25 += 2;
        }

        while (v25 != v18);
        uint64_t v19 = *a1;
        int v18 = (__int128 *)a1[1];
      }
    }

    if (v20 != v18)
    {
      int v18 = v20;
      a1[1] = (uint64_t)v20;
    }

LABEL_55:
    if ((__int128 *)v19 != v18)
    {
      double v28 = v22 / (double)(unint64_t)(((uint64_t)v18 - v19) >> 5);
      do
      {
        *(double *)(v19 + 16) = v28 + *(double *)(v19 + 16);
        v19 += 32LL;
      }

      while ((__int128 *)v19 != v18);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
    double v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v33 = 2050;
      uint64_t v34 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:invalid, localizer type:%{public}lu}",  buf,  0x1Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018194A8);
      }
    }

    double v24 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v33 = 2050;
      uint64_t v34 = a2;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "invalid",  "{msg%{public}.0s:invalid, localizer type:%{public}lu}",  buf,  0x1Cu);
    }
  }

  *(_DWORD *)(a1 + 60) = v5;
  return v5;
}

  __int128 v27 = *(const std::string **)(a2 + 88);
  *(_DWORD *)(a1 + 116) |= 0x1000u;
  double v28 = *(std::string **)(a1 + 88);
  if (v28 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    double v28 = (std::string *)operator new(0x18uLL);
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 88) = v28;
  }

  std::string::operator=(v28, v27);
  int v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0) {
      return;
    }
    goto LABEL_61;
  }

  uint64_t v31 = *(void *)(a1 + 40);
  char v32 = *(unsigned __int8 *)(v31 + 23);
  __int16 v33 = v32;
  uint64_t v34 = *(void *)(v31 + 8);
  if ((v32 & 0x80u) == 0) {
    uint64_t v35 = *(unsigned __int8 *)(v31 + 23);
  }
  else {
    uint64_t v35 = v34;
  }
  if (v35 >= 0x80)
  {
    uint64_t v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v35,  a2);
    char v32 = *(unsigned __int8 *)(v31 + 23);
    uint64_t v34 = *(void *)(v31 + 8);
    BOOL v3 = *(_DWORD *)(a1 + 116);
    __int16 v33 = *(_BYTE *)(v31 + 23);
  }

  else
  {
    uint64_t v36 = 1;
  }

  if (v33 < 0) {
    char v32 = v34;
  }
  CFStringRef v4 = (v4 + v36 + v32 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_82;
    }
    goto LABEL_73;
  }

  uint64_t v31 = *(void *)(a1 + 40);
  char v32 = *(unsigned __int8 *)(v31 + 23);
  __int16 v33 = v32;
  uint64_t v34 = *(void *)(v31 + 8);
  if ((v32 & 0x80u) == 0) {
    uint64_t v35 = *(unsigned __int8 *)(v31 + 23);
  }
  else {
    uint64_t v35 = v34;
  }
  if (v35 >= 0x80)
  {
    uint64_t v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v35,  a2);
    char v32 = *(unsigned __int8 *)(v31 + 23);
    uint64_t v34 = *(void *)(v31 + 8);
    BOOL v3 = *(_DWORD *)(a1 + 84);
    __int16 v33 = *(_BYTE *)(v31 + 23);
  }

  else
  {
    uint64_t v36 = 1;
  }

  if (v33 < 0) {
    char v32 = v34;
  }
  CFStringRef v4 = (v4 + v36 + v32 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_82;
    }
    goto LABEL_73;
  }

  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1019A0978 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v14,  a2,  a4);
  double v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34,  (int)a2,  *(double *)(v5 + 160),  a3);
  double v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

  *(_DWORD *)(a1 + 100) |= 0x400u;
  double v22 = *(void **)(a1 + 80);
  if (!v22)
  {
    double v22 = operator new(0x20uLL);
    *double v22 = off_101828378;
    v22[1] = 0LL;
    v22[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    uint64_t v22[3] = 0LL;
    *(void *)(a1 + 80) = v22;
  }

  double v23 = *(void *)(a2 + 80);
  if (!v23) {
    double v23 = *(void *)(qword_1019A0BD8 + 80);
  }
  sub_1001DDA2C((uint64_t)v22, v23);
  double v6 = *(_DWORD *)(a2 + 100);
  if ((v6 & 0x800) == 0)
  {
LABEL_43:
    if ((v6 & 0x1000) == 0) {
      return result;
    }
    goto LABEL_62;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_97;
  }
  if ((v3 & 0x100) != 0)
  {
    double v26 = *(void *)(a1 + 56);
    if (!v26) {
      double v26 = *(void *)(qword_1019A0BD8 + 56);
    }
    __int128 v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DD5E8(v26);
    double v28 = (int)v27;
    else {
      __int128 v29 = 1;
    }
    int v5 = (v5 + v28 + v29 + 1);
    BOOL v3 = *(_DWORD *)(a1 + 100);
    if ((v3 & 0x200) == 0)
    {
LABEL_58:
      if ((v3 & 0x400) == 0) {
        goto LABEL_59;
      }
      goto LABEL_76;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_58;
  }

  uint64_t v30 = *(void *)(a1 + 64);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_1019A0BD8 + 64);
  }
  uint64_t v31 = *(unsigned __int8 *)(v30 + 28);
  char v32 = (v31 << 31 >> 31) & 9;
  if ((v31 & 2) != 0) {
    v32 += 9;
  }
  if (*(_BYTE *)(v30 + 28)) {
    __int16 v33 = v32;
  }
  else {
    __int16 v33 = 0;
  }
  *(_DWORD *)(v30 + 24) = v33;
  int v5 = (v5 + v33 + 2);
  BOOL v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 0x400) == 0)
  {
LABEL_59:
    if ((v3 & 0x800) == 0) {
      goto LABEL_60;
    }
LABEL_82:
    uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if ((v38 & 0x80000000) != 0)
    {
      uint64_t v39 = 11;
    }

    else if (v38 >= 0x80)
    {
      uint64_t v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2) + 1;
      BOOL v3 = *(_DWORD *)(a1 + 100);
    }

    else
    {
      uint64_t v39 = 2;
    }

    int v5 = (v39 + v5);
    if ((v3 & 0x1000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_88;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(_DWORD *)(v5 + 128),  a2,  a4);
  double v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x400000) != 0) {
    goto LABEL_56;
  }
LABEL_24:
  if ((v6 & 0x800000) == 0) {
    return result;
  }
LABEL_57:
  uint64_t v11 = *(void *)(v5 + 136);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A0CF0 + 136);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  v11,  a2,  a4);
}

  if ((v3 & 0xFF00) != 0)
  {
    double v22 = v5 + 9;
    if ((v3 & 0x100) == 0) {
      double v22 = v5;
    }
    if ((v3 & 0x200) != 0) {
      v22 += 9;
    }
    if ((v3 & 0x400) != 0) {
      double v23 = v22 + 9;
    }
    else {
      double v23 = v22;
    }
    if ((v3 & 0x800) != 0)
    {
      double v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
      if ((v24 & 0x80000000) != 0)
      {
        uint64_t v25 = 10;
      }

      else if (v24 >= 0x80)
      {
        uint64_t v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
        BOOL v3 = *(_DWORD *)(a1 + 148);
      }

      else
      {
        uint64_t v25 = 1;
      }

      v23 += v25 + 1;
    }

    if ((v3 & 0x1000) != 0)
    {
      double v26 = *(void *)(a1 + 88);
      __int128 v27 = *(unsigned __int8 *)(v26 + 23);
      double v28 = v27;
      __int128 v29 = *(void *)(v26 + 8);
      if ((v27 & 0x80u) == 0) {
        uint64_t v30 = *(unsigned __int8 *)(v26 + 23);
      }
      else {
        uint64_t v30 = v29;
      }
      if (v30 >= 0x80)
      {
        uint64_t v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v30,  a2);
        __int128 v27 = *(unsigned __int8 *)(v26 + 23);
        __int128 v29 = *(void *)(v26 + 8);
        BOOL v3 = *(_DWORD *)(a1 + 148);
        double v28 = *(_BYTE *)(v26 + 23);
      }

      else
      {
        uint64_t v31 = 1;
      }

      if (v28 < 0) {
        __int128 v27 = v29;
      }
      v23 += v31 + v27 + 1;
    }

    char v32 = v23 + 2;
    if ((v3 & 0x2000) == 0) {
      char v32 = v23;
    }
    if ((v3 & 0x4000) != 0) {
      int v5 = v32 + 2;
    }
    else {
      int v5 = v32;
    }
    if ((v3 & 0x8000) != 0)
    {
      __int16 v33 = *(void *)(a1 + 104);
      if (!v33) {
        __int16 v33 = *(void *)(qword_1019A0CF0 + 104);
      }
      uint64_t v34 = *(unsigned __int8 *)(v33 + 36);
      uint64_t v35 = (v34 << 31 >> 31) & 9;
      if ((v34 & 2) != 0) {
        v35 += 9;
      }
      if ((v34 & 4) != 0) {
        v35 += 9;
      }
      if (*(_BYTE *)(v33 + 36)) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      *(_DWORD *)(v33 + 32) = v36;
      int v5 = (v5 + v36 + 3);
      BOOL v3 = *(_DWORD *)(a1 + 148);
    }
  }

  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      __int128 v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 100);
      if (v37 >= 0x80)
      {
        uint64_t v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2);
        BOOL v3 = *(_DWORD *)(a1 + 148);
      }

      else
      {
        uint64_t v38 = 1;
      }

      int v5 = (v5 + v38 + 2);
      if ((v3 & 0x20000) == 0)
      {
LABEL_99:
        if ((v3 & 0x40000) == 0) {
          goto LABEL_100;
        }
        goto LABEL_114;
      }
    }

    else if ((v3 & 0x20000) == 0)
    {
      goto LABEL_99;
    }

    uint64_t v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 112);
    if (v39 >= 0x80)
    {
      uint64_t v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39, a2) + 2;
      BOOL v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      uint64_t v40 = 3;
    }

    int v5 = (v40 + v5);
    if ((v3 & 0x40000) == 0)
    {
LABEL_100:
      if ((v3 & 0x80000) == 0) {
        goto LABEL_101;
      }
      goto LABEL_118;
    }

            sub_1003329CC(a1);
            sub_1003340E0(a1);
            uint64_t v31 = [*(id *)(a1 + 40) newTimer];
            *(void *)(a1 + 640) = v31;
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 3221225472LL;
            v42[2] = sub_100334C28;
            v42[3] = &unk_10181D3D0;
            v42[4] = a1;
            [v31 setHandler:v42];
            [*(id *)(a1 + 640) setNextFireDelay:90.0];
            p_vtable = (uint64_t)&OBJC_METACLASS___CLPrivacyManager.vtable;
            if (qword_101934860 == -1) {
              goto LABEL_56;
            }
            goto LABEL_70;
          }
        }

        else
        {
LABEL_40:
          if ((v24 & 1) != 0) {
            goto LABEL_41;
          }
        }

        *double v23 = 0;
        goto LABEL_55;
      }
    }

    *(void *)(a1 + 384) = 0x4014000000000000LL;
    goto LABEL_36;
  }

  sub_1012354DC();
  abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService.mm",  367,  "CLWifiService");
  __break(1u);
LABEL_70:
  dispatch_once(&qword_101934860, &stru_101833578);
LABEL_56:
  char v32 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = 0x4056800000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "WsbClients, timer, %{public}0.f",  (uint8_t *)&buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (*(void *)(p_vtable + 2144) != -1LL) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    std::string v44 = 134349056;
    uint64_t v45 = 0x4056800000000000LL;
    LODWORD(v41) = 12;
    __int128 v37 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbClients, timer, %{public}0.f",  &v44,  v41);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)",  "%s\n",  v37);
  }

  __int16 v33 = -[CLMetricEventBins initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:]( objc_alloc(&OBJC_CLASS___CLMetricEventBins),  "initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:",  @"scanW",  5LL,  3600LL,  1LL,  CFAbsoluteTimeGetCurrent());
  *(void *)(a1 + 656) = v33;
  sub_1004F2598();
  -[CLMetricEventBins setDimensionInt:](v33, "setDimensionInt:", sub_1004F260C());
  uint64_t v34 = -[CLMetricEventBins initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:]( objc_alloc(&OBJC_CLASS___CLMetricEventBins),  "initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:",  @"scanA",  5LL,  3600LL,  1LL,  CFAbsoluteTimeGetCurrent());
  *(void *)(a1 + 664) = v34;
  sub_1004F2598();
  -[CLMetricEventBins setDimensionInt:](v34, "setDimensionInt:", sub_1004F260C());
  if (sub_100CD92E0())
  {
    sub_100335124(a1);
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v35 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "AONSense, not registering for aonsensed scans as it is not enabled",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      LOWORD(v44) = 0;
      LODWORD(v41) = 2;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "AONSense, not registering for aonsensed scans as it is not enabled",  &v44,  v41);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)",  "%s\n",  v39);
    }
  }

  return a1;
}

    uint64_t v35 = (uint64_t *)v21[1];
    if (v35)
    {
      do
      {
        int v18 = v35;
        uint64_t v35 = (uint64_t *)*v35;
      }

      while (v35);
    }

    else
    {
      do
      {
        int v18 = (uint64_t *)v21[2];
        uint64_t v19 = *v18 == (void)v21;
        double v21 = v18;
      }

      while (!v19);
    }
  }

  uint64_t v59 = &off_10182CE18;
  if (SBYTE7(v61) < 0) {
    operator delete((void *)__src);
  }
  return sub_1002722AC((uint64_t)&v50);
}

  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1019A11B8 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v14,  a2,  a4);
  double v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }

  a1[11] = v4;
  return v4;
}

  a1[11] = v4;
  return v4;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  v5[20],  a2,  a4);
  double v6 = v5[37];
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }

    if (a3) {
      (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, a2, 100LL);
    }
    return 1LL;
  }

  return result;
}

  *(_BYTE *)(a1 + 538) |= 8u;
  if ((v26 & 0x10) == 0)
  {
LABEL_50:
    if ((v21 & 1) != 0) {
      return;
    }
    goto LABEL_57;
  }

    if (!*(void *)(a1 + 280)) {
      *(_BYTE *)(a1 + 731) = 0;
    }
    *(_WORD *)(v11 + 284) = 0;
    if (!a3) {
      goto LABEL_64;
    }
    double v28 = *(void *)(a1 + 1824);
    if (v28)
    {
      sub_1003D4FAC(v28, a2);
LABEL_64:
      sub_10083F9DC(v11 + 280);
      sub_1000087E8((uint64_t **)(a1 + 240), (uint64_t *)v11);
      sub_100A0ADDC(v11 + 32);
      operator delete((void *)v11);
      return;
    }

    if (qword_101934870 == -1)
    {
LABEL_61:
      __int128 v29 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Fence: state stopMonitoringAFenceNow, before first unlock",  (uint8_t *)buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v36) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  16LL,  "Fence: state stopMonitoringAFenceNow, before first unlock",  &__p,  v36);
        uint64_t v35 = (std::string *)v34;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceMonitor::stopMonitoringAFenceNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, BOOL)",  "%s\n",  v34);
        if (v35 != buf) {
          free(v35);
        }
      }

      goto LABEL_64;
    }

  double v22 = *(_DWORD *)(a2 + 84);
  if (v22 >= 5) {
    sub_10125A188();
  }
  *(_DWORD *)(a1 + 112) |= 0x400u;
  *(_DWORD *)(a1 + 84) = v22;
  int v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_46:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_47;
    }
LABEL_62:
    uint64_t v25 = *(_BYTE *)(a2 + 104);
    *(_DWORD *)(a1 + 112) |= 0x1000u;
    *(_BYTE *)(a1 + 104) = v25;
    if ((*(_DWORD *)(a2 + 112) & 0x2000) == 0) {
      return;
    }
    goto LABEL_63;
  }

          int v18 = (char *)*((void *)this + 1);
          uint64_t v10 = (char *)*((void *)this + 2);
        }

        while (v18 < v10 && *v18 == 24);
        if (v18 == v10 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v8 != 3)
    {
      unint64_t v9 = TagFallback & 7;
      goto LABEL_20;
    }

    unint64_t v9 = TagFallback & 7;
    if (v9 == 2) {
      break;
    }
    if ((TagFallback & 7) == 0)
    {
      uint64_t v11 = (char *)*((void *)this + 1);
      uint64_t v10 = (char *)*((void *)this + 2);
      goto LABEL_36;
    }

  CFStringRef v17 = *(void *)(v5 + 88);
  if (!v17) {
    CFStringRef v17 = *(void *)(qword_1019A1CE8 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v17,  a2,  a4);
  double v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }

  double v13 = *(void *)(v5 + 72);
  if (!v13) {
    double v13 = *(void *)(qword_1019A1D38 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v13,  a2,  a4);
  double v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }

  *(_BYTE *)a2 = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  CFStringRef v17 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *(void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v192 = "impactCanceledBecauseOfNaiveBayes";
    uint64_t v193 = 2048;
    std::string::size_type v194 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v90 = *(void *)(a1 + 8);
    v187 = 136315394;
    __int128 v188 = "impactCanceledBecauseOfNaiveBayes";
    v189 = 2048;
    __int128 v190 = v90;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v92 = (uint8_t *)v91;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v91);
    if (v92 != buf) {
      free(v92);
    }
  }

  a3[3] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x400) == 0)
  {
LABEL_6:
    if ((v10 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }

    uint64_t v19 = v13 > ++v12;
    if (v12 == v18) {
      goto LABEL_56;
    }
  }

  if (v22 != v16) {
    goto LABEL_55;
  }
LABEL_54:
LABEL_57:
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_101887EC0);
  }
  double v28 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    __int128 v29 = v42 + 24 * v12;
    LODWORD(v47.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "#AML cbMCCOrPLMNArray Matched MCC or PLMN %{private}s",  (uint8_t *)&v47,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v47, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101887EC0);
    }
    uint64_t v34 = (void **)(v42 + 24 * v12);
    uint64_t v45 = 136380675;
    std::string v46 = v34;
    LODWORD(v37) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v47,  1628LL,  &_mh_execute_header,  qword_101934898,  2LL,  "#AML cbMCCOrPLMNArray Matched MCC or PLMN %{private}s",  &v45,  v37);
    uint64_t v36 = (std::string *)v35;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLEmergencyAML::isCampedMCCorPLMNMatchWithBundleKey()", "%s\n", v35);
    if (v36 != &v47) {
      free(v36);
    }
  }

    memset(v192, 0, 24);
    if (sub_100EE6774(a1, (uint64_t)v192, (uint64_t)v205, a6))
    {
      uint64_t v56 = (uint64_t *)v192[0];
      __int128 v55 = v192[1];
      if (v192[1] != v192[0]) {
        goto LABEL_57;
      }
      __int128 v66 = fmin(a6 * 4.0, 250.0);
      if (v66 <= a6)
      {
LABEL_73:
        *(void *)__int128 buf = v192;
        sub_10004CC28((void ***)buf);
        goto LABEL_74;
      }

      if (sub_100EE6774(a1, (uint64_t)v192, (uint64_t)v205, v66))
      {
        uint64_t v56 = (uint64_t *)v192[0];
        __int128 v55 = v192[1];
LABEL_57:
        while (v56 != (uint64_t *)v55)
        {
          memset(buf, 0, 20);
          *(_WORD *)&buf[20] = 1;
          *(_DWORD *)&_BYTE buf[24] = 0;
          memset(v229, 0, 24);
          sub_1000F2F30(buf, v56);
          __int128 v57 = operator new(0x48uLL);
          uint64_t v58 = *(void *)&buf[8];
          v57[2] = *(void *)buf;
          v57[3] = v58;
          if (v58)
          {
            uint64_t v59 = (unint64_t *)(v58 + 8);
            do
              __int128 v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
            uint64_t v61 = *(std::__shared_weak_count **)&buf[8];
          }

          else
          {
            uint64_t v61 = 0LL;
          }

          uint64_t v62 = *(_OWORD *)v229;
          *((_OWORD *)v57 + 2) = *(_OWORD *)&buf[16];
          *((_OWORD *)v57 + 3) = v62;
          v57[8] = *(void *)&v229[16];
          __int128 v63 = (uint64_t)v187;
          *__int128 v57 = v187;
          v57[1] = &v187;
          *(void *)(v63 + 8) = v57;
          v187 = v57;
          ++v189;
          if (v61)
          {
            uint64_t v64 = (unint64_t *)&v61->__shared_owners_;
            do
              uint64_t v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }

          v56 += 2;
        }

        goto LABEL_73;
      }

      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
      __int128 v160 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_DEBUG,  "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        v185[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search",  v185,  2);
        __int128 v178 = (char *)v177;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vec tor<CLMapRoadWithDirection> &, BOOL) const",  "%s\n",  v177);
        if (v178 != buf) {
          free(v178);
        }
      }
    }

    *(void *)__int128 buf = v192;
    sub_10004CC28((void ***)buf);
    double v13 = 0LL;
    goto LABEL_225;
  }

  uint64_t v34 = (_OWORD *)((char *)v32 + 8);
  uint64_t v35 = 8LL;
  if (a3)
  {
    uint64_t v35 = 32LL;
    uint64_t v34 = v32 + 2;
  }

  uint64_t v36 = *(uint64_t **)((char *)v32 + v35);
  for (uint64_t i = (uint64_t *)*((void *)v34 + 1); v36 != i; v36 += 2)
  {
    uint64_t v39 = *v36;
    uint64_t v38 = v36[1];
    v192[0] = *v36;
    v192[1] = v38;
    if (v38)
    {
      uint64_t v40 = (unint64_t *)(v38 + 8);
      do
        std::string v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }

    if (v39)
    {
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      *(_DWORD *)&_BYTE buf[24] = 0;
      memset(v229, 0, 24);
      sub_1000F2F30(buf, v192);
      uint64_t v42 = operator new(0x48uLL);
      uint64_t v43 = *(void *)&buf[8];
      v42[2] = *(void *)buf;
      v42[3] = v43;
      if (v43)
      {
        std::string v44 = (unint64_t *)(v43 + 8);
        do
          uint64_t v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        std::string v46 = *(std::__shared_weak_count **)&buf[8];
      }

      else
      {
        std::string v46 = 0LL;
      }

      uint64_t v47 = *(_OWORD *)v229;
      *((_OWORD *)v42 + 2) = *(_OWORD *)&buf[16];
      *((_OWORD *)v42 + 3) = v47;
      v42[8] = *(void *)&v229[16];
      uint64_t v48 = (uint64_t)v187;
      void *v42 = v187;
      v42[1] = &v187;
      *(void *)(v48 + 8) = v42;
      v187 = v42;
      ++v189;
      if (v46)
      {
        std::string v49 = (unint64_t *)&v46->__shared_owners_;
        do
          std::string v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }

    else
    {
      sub_100890314((uint64_t *)&v187);
    }

    char v51 = (std::__shared_weak_count *)v192[1];
    if (v192[1])
    {
      std::string v52 = (unint64_t *)(v192[1] + 8);
      do
        std::string v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

    if (!v39) {
      break;
    }
  }

  if (!v189) {
    goto LABEL_55;
  }
  *((void *)v33 + 7) = *(void *)(a1 + 8);
  char v54 = 1;
LABEL_75:
  uint64_t v67 = a2;
  if (a5)
  {
    __int16 v68 = *a2;
    char v69 = (std::__shared_weak_count *)a2[1];
    __int128 v184 = v69;
    if (v69)
    {
      __int128 v70 = (unint64_t *)&v69->__shared_owners_;
      do
        __int128 v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      *(void *)__int128 buf = v68;
      *(void *)&uint8_t buf[8] = v69;
      do
        v72 = __ldxr(v70);
      while (__stxr(v72 + 1, v70));
    }

    else
    {
      *(void *)__int128 buf = *a2;
      *(void *)&uint8_t buf[8] = 0LL;
    }

    uint64_t v73 = v180 ^ 1;
    uint8_t buf[16] = v180 ^ 1;
    uint64_t v74 = a4[1];
    if (v74 >= a4[2])
    {
      __int128 v78 = sub_100EECCFC(a4, (uint64_t)buf);
    }

    else
    {
      *(void *)uint64_t v74 = v68;
      __int128 v75 = *(void *)&buf[8];
      *(void *)(v74 + 8) = *(void *)&buf[8];
      if (v75)
      {
        std::string::size_type v76 = (unint64_t *)(v75 + 8);
        do
          __int128 v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
        uint64_t v73 = buf[16];
      }

      *(_BYTE *)(v74 + 16) = v73;
      __int128 v78 = v74 + 24;
    }

    a4[1] = v78;
    __int128 v79 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v80 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        __int128 v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }

    if (v184)
    {
      std::string::size_type v82 = (unint64_t *)&v184->__shared_owners_;
      do
        __int128 v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
  }

  for (j = v188; j != (uint64_t *)&v187; j = (uint64_t *)j[1])
  {
    uint64_t v85 = (void *)j[2];
    if (*v85 != **v67)
    {
      __int128 v87 = v85 + 17;
      unint64_t v86 = (double *)v85[17];
      if ((double *)v87[1] == v86)
      {
        v88 = 0.0;
        __int128 v89 = 0.0;
      }

      else
      {
        v88 = *v86;
        __int128 v89 = v86[1];
      }

      v90 = v209;
      if (sub_100292850(*(double *)&v209, *((double *)&v209 + 1), v88, v89, 0.0000001))
      {
        __int128 v91 = j[2];
        v92 = (std::__shared_weak_count *)j[3];
        if (v92)
        {
          __int128 v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          v192[0] = v91;
          v192[1] = (uint64_t)v92;
          do
            __int128 v95 = __ldxr(v93);
          while (__stxr(v95 + 1, v93));
        }

        else
        {
          v192[0] = j[2];
          v192[1] = 0LL;
        }

        LOBYTE(v192[2]) = 1;
        __int128 v99 = a4[1];
        v100 = a4[2];
        if (v99 >= v100)
        {
          v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *a4) >> 3);
          __int128 v105 = v104 + 1;
          if (v104 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *a4) >> 3);
          if (2 * v106 > v105) {
            __int128 v105 = 2 * v106;
          }
          if (v106 >= 0x555555555555555LL) {
            __int128 v107 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            __int128 v107 = v105;
          }
          *(void *)std::string v229 = a4 + 2;
          if (v107) {
            v108 = sub_10000701C((uint64_t)(a4 + 2), v107);
          }
          else {
            v108 = 0LL;
          }
          __int128 v113 = (uint64_t *)&v108[24 * v104];
          *(void *)__int128 buf = v108;
          *(void *)&uint8_t buf[8] = v113;
          *(void *)&_BYTE buf[24] = &v108[24 * v107];
          *__int128 v113 = v91;
          v113[1] = (uint64_t)v92;
          if (v92)
          {
            int v114 = (unint64_t *)&v92->__shared_owners_;
            do
              __int128 v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }

          v108[24 * v104 + 16] = 1;
          *(void *)&uint8_t buf[16] = v113 + 3;
          sub_100EECE28(a4, buf);
          __int128 v103 = a4[1];
          sub_100EECEC4((uint64_t)buf);
          uint64_t v67 = a2;
        }

        else
        {
          *(void *)__int128 v99 = v91;
          *(void *)(v99 + 8) = v92;
          if (v92)
          {
            __int128 v101 = (unint64_t *)&v92->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }

          *(_BYTE *)(v99 + 16) = 1;
          __int128 v103 = v99 + 24;
        }

        a4[1] = v103;
        if (v92)
        {
          std::string::size_type v116 = (unint64_t *)&v92->__shared_owners_;
          do
            __int128 v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }

        if (!v92) {
          continue;
        }
        __int128 v118 = (unint64_t *)&v92->__shared_owners_;
        do
          __int128 v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
      }

      else
      {
        v96 = *(void *)(j[2] + 144);
        if (v96 == *(void *)(j[2] + 136))
        {
          __int128 v97 = 0.0;
          int v98 = 0.0;
        }

        else
        {
          __int128 v97 = *(double *)(v96 - 16);
          int v98 = *(double *)(v96 - 8);
        }

        __int128 v109 = j[2];
        v92 = (std::__shared_weak_count *)j[3];
        if (v92)
        {
          uint64_t v110 = (unint64_t *)&v92->__shared_owners_;
          do
            __int128 v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
          v192[0] = v109;
          v192[1] = (uint64_t)v92;
          do
            v112 = __ldxr(v110);
          while (__stxr(v112 + 1, v110));
        }

        else
        {
          v192[0] = j[2];
          v192[1] = 0LL;
        }

        LOBYTE(v192[2]) = 0;
        __int128 v120 = a4[1];
        __int128 v121 = a4[2];
        if (v120 >= v121)
        {
          __int128 v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - *a4) >> 3);
          unint64_t v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100007008();
          }
          __int128 v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - *a4) >> 3);
          if (2 * v127 > v126) {
            unint64_t v126 = 2 * v127;
          }
          if (v127 >= 0x555555555555555LL) {
            CFStringRef v128 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            CFStringRef v128 = v126;
          }
          *(void *)std::string v229 = a4 + 2;
          if (v128) {
            __int128 v129 = sub_10000701C((uint64_t)(a4 + 2), v128);
          }
          else {
            __int128 v129 = 0LL;
          }
          uint64_t v130 = (uint64_t *)&v129[24 * v125];
          *(void *)__int128 buf = v129;
          *(void *)&uint8_t buf[8] = v130;
          *(void *)&_BYTE buf[24] = &v129[24 * v128];
          *uint64_t v130 = v109;
          v130[1] = (uint64_t)v92;
          if (v92)
          {
            __int128 v131 = (unint64_t *)&v92->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
          }

          v129[24 * v125 + 16] = 0;
          *(void *)&uint8_t buf[16] = v130 + 3;
          sub_100EECE28(a4, buf);
          std::string v124 = a4[1];
          sub_100EECEC4((uint64_t)buf);
          uint64_t v67 = a2;
        }

        else
        {
          *(void *)__int128 v120 = v109;
          *(void *)(v120 + 8) = v92;
          if (v92)
          {
            int v122 = (unint64_t *)&v92->__shared_owners_;
            do
              __int128 v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }

          *(_BYTE *)(v120 + 16) = 0;
          std::string v124 = v120 + 24;
        }

        a4[1] = v124;
        if (v92)
        {
          __int128 v133 = (unint64_t *)&v92->__shared_owners_;
          do
            uint64_t v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }

        if (!v92) {
          continue;
        }
        __int128 v135 = (unint64_t *)&v92->__shared_owners_;
        do
          __int128 v119 = __ldaxr(v135);
        while (__stlxr(v119 - 1, v135));
      }

      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }

  if ((v54 & 1) == 0 && a4[1] != *a4)
  {
    __int128 v136 = sub_10097496C(v179, &v186, 1);
    __int128 v137 = v136;
    if (v136)
    {
      sub_100974AB0(v136, v180 ^ 1);
      *((void *)v137 + 7) = *(void *)(v181 + 8);
      __int128 v138 = *a4;
      __int128 v139 = a4[1];
      if (*a4 != v139)
      {
        do
        {
          v140 = *(void **)v138;
          __int128 v141 = *(void *)(v138 + 8);
          *(void *)__int128 buf = *(void *)v138;
          *(void *)&uint8_t buf[8] = v141;
          if (v141)
          {
            v142 = (unint64_t *)(v141 + 8);
            do
              __int128 v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }

          uint8_t buf[16] = *(_BYTE *)(v138 + 16);
          if (v140)
          {
            if (*v140 == **a2)
            {
              v144 = 27;
            }

            else
            {
              if ((v180 & 1) != 0)
              {
                std::string *v137 = 1;
                __int128 v145 = (char **)(v137 + 32);
              }

              else
              {
                v137[1] = 1;
                __int128 v145 = (char **)(v137 + 8);
              }

              sub_1000E8F38(v145, (__int128 *)buf);
              v144 = 0;
            }
          }

          else
          {
            sub_100974AB0(v137, v180 ^ 1);
            *((void *)v137 + 7) = 0xBFF0000000000000LL;
            v144 = 26;
          }

          CFStringRef v146 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            int v147 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              __int128 v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }

          if (v144 != 27 && v144) {
            break;
          }
          v138 += 24LL;
        }

        while (v138 != v139);
      }
    }

    else
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
      v149 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
      {
        __int128 v150 = *(void *)(v181 + 8);
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = v150;
        _os_log_impl( (void *)&_mh_execute_header,  v149,  OS_LOG_TYPE_ERROR,  "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188BA18);
        }
        std::string::size_type v174 = *(void *)(v181 + 8);
        LODWORD(v192[0]) = 134217984;
        *(uint64_t *)((char *)v192 + 4) = v174;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created",  COERCE_DOUBLE(v192));
        __int128 v176 = (char *)v175;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vec tor<CLMapRoadWithDirection> &, BOOL) const",  "%s\n",  v175);
        if (v176 != buf) {
          free(v176);
        }
      }
    }
  }

  if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == a5)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188BA18);
    }
    unint64_t v151 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v152 = *(void *)(v181 + 8);
      __int128 v153 = **a2;
      __int128 v154 = (uint64_t *)(*a2)[17];
      __int128 v155 = (uint64_t *)(*a2)[18];
      if (v155 == v154)
      {
        __int128 v158 = 0LL;
        __int128 v156 = 0LL;
        v157 = 0LL;
        v159 = 0LL;
      }

      else
      {
        __int128 v156 = *v154;
        v157 = v154[1];
        __int128 v158 = *(v155 - 2);
        v159 = *(v155 - 1);
      }

      *(_DWORD *)__int128 buf = 134351105;
      *(void *)&uint8_t buf[4] = v152;
      *(_WORD *)&buf[12] = 2049;
      *(void *)&buf[14] = v153;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&_BYTE buf[24] = v189;
      *(_WORD *)std::string v229 = 2049;
      *(void *)&v229[2] = v156;
      *(_WORD *)&v229[10] = 2049;
      *(void *)&v229[12] = v157;
      *(_WORD *)&v229[20] = 2049;
      *(void *)&v229[22] = v158;
      std::string v230 = 2049;
      std::string v231 = v159;
      std::string v232 = 2049;
      std::string v233 = v209;
      std::string v234 = 2049;
      std::string v235 = *((void *)&v209 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalRes ults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordin ate,%{private}.7lf,%{private}.7lf",  buf,  0x5Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
      __int128 v164 = *(void *)(v181 + 8);
      v165 = **a2;
      __int128 v166 = (uint64_t *)(*a2)[17];
      uint64_t v167 = (uint64_t *)(*a2)[18];
      if (v167 == v166)
      {
        __int128 v170 = 0LL;
        __int128 v168 = 0LL;
        __int128 v169 = 0LL;
        __int128 v171 = 0LL;
      }

      else
      {
        __int128 v168 = *v166;
        __int128 v169 = v166[1];
        __int128 v170 = *(v167 - 2);
        __int128 v171 = *(v167 - 1);
      }

      LODWORD(v192[0]) = 134351105;
      *(uint64_t *)((char *)v192 + 4) = v164;
      WORD2(v192[1]) = 2049;
      *(uint64_t *)((char *)&v192[1] + 6) = v165;
      HIWORD(v192[2]) = 2050;
      v192[3] = v189;
      uint64_t v193 = 2049;
      std::string::size_type v194 = v168;
      v195 = 2049;
      __int128 v196 = v169;
      uint64_t v197 = 2049;
      __int128 v198 = v170;
      std::string::size_type v199 = 2049;
      std::string::size_type v200 = v171;
      int v201 = 2049;
      __int128 v202 = v209;
      v203 = 2049;
      __int128 v204 = *((void *)&v209 + 1);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalRes ults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordin ate,%{private}.7lf,%{private}.7lf",  v192,  92);
      std::string::size_type v173 = (char *)v172;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vecto r<CLMapRoadWithDirection> &, BOOL) const",  "%s\n",  v172);
      if (v173 != buf) {
        free(v173);
      }
    }
  }

  double v13 = 1LL;
LABEL_225:
  sub_100890314((uint64_t *)&v187);
  if (SHIBYTE(v214) < 0) {
    operator delete(*((void **)&v213 + 1));
  }
  return v13;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 80));
  int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x11u);
  CFStringRef v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }

  double v13 = *(void *)(a2 + 328);
  v5 |= 0x10000000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 328) = v13;
  CFStringRef v4 = *v3;
  if ((*v3 & 0x20000000000LL) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfLockedNoMotionPre", *(void *)(a1 + 64));
  double v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 336), 0x30u);
  int v5 = *v4;
  if ((*v4 & 0x80000000000LL) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }

  double v13 = *(_BYTE *)(a2 + 153);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 153) = v13;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 80));
  int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x12u);
  CFStringRef v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }

  uint64_t v30 = *(void *)(a2 + 336);
  v10 |= 0x4000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 336) = v30;
  unint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 44));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 5u);
  CFStringRef v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000000LL) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }

  __int128 v27 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 212) |= 0x20u;
  *(_DWORD *)(a1 + 116) = v27;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "martyTriggerPathBitmap", *(_DWORD *)(a1 + 140));
  unint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x1000) == 0)
  {
LABEL_18:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0xFu);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000) == 0)
  {
LABEL_24:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

  uint64_t result = *(float *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 8) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "sampleCount", *(_DWORD *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
LABEL_57:
    PB::TextFormatter::format(this, "tTimesRmsClipSum", *(float *)(a1 + 92));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0x1Au);
  CFStringRef v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x200) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 44), 0x1Cu);
  }

  uint64_t v14 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 152) = v3;
  *(void *)(a1 + sub_100019CEC(v39 + 48) = v14;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "postEventPressureMedian", *(float *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0x18u);
  CFStringRef v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }

  __int128 v27 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 76) = v27;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "transitionDuration", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x12Du);
  CFStringRef v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_57;
  }

  double v23 = *(_DWORD *)(a2 + 60);
  v3 |= 0x80uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 60) = v23;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_25:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "metaCountOfZgSegment", *(_DWORD *)(a1 + 120));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x15u);
  CFStringRef v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_23:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }

  uint64_t result = *(float *)(a2 + 132);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 132) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x80000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "energyAtMaxChaos", *(float *)(a1 + 48));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 8u);
  CFStringRef v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_57;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "isMotionOverrideSet", *(_BYTE *)(a1 + 160));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000000000LL) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0x10u);
  CFStringRef v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 20) = v8;
  if ((*(_DWORD *)(a2 + 120) & 0x40000) == 0) {
    return *(float *)&v4;
  }
LABEL_56:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = v3 | 0x40000;
  *(_DWORD *)(a1 + 84) = v4;
  return *(float *)&v4;
}

  double v22 = *(_DWORD *)(a2 + 116);
  v3 |= 0x400000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 116) = v22;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "rawRange", *(float *)(a1 + 104));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x14u);
  CFStringRef v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "right_eye_y", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x17u);
  CFStringRef v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  double v16 = *(_DWORD *)(a2 + 132);
  v3 |= 0x80000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 132) = v16;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "planarEnergyAtMaxSaturation", *(float *)(a1 + 132));
  int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 0xEu);
  CFStringRef v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }

  uint64_t result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 2sub_100019CEC(v39 + 48) = v3;
  *(double *)(a1 + 184) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMedian", *(double *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192), 0x18u);
  CFStringRef v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }

  std::string v41 = *(void *)(a2 + 136);
  if (v41)
  {
    uint64_t v42 = operator new(0x38uLL);
    *(void *)(a1 + 136) = sub_1011498C8((uint64_t)v42, v41);
  }

  uint64_t v43 = *(void *)(a2 + 128);
  if (v43)
  {
    std::string v44 = operator new(0x100uLL);
    sub_1011485D0((uint64_t)v44, v43);
    *(void *)(a1 + 128) = v45;
  }

  return a1;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x80000000000LL) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "cycleTimePoincareSD2", *(float *)(a1 + 56));
  int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 9u);
  CFStringRef v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }

  __int128 v29 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 96) = v29;
  if ((*(_DWORD *)(a2 + 116) & 0x2000) != 0) {
    goto LABEL_56;
  }
  return result;
}

  uint64_t v34 = *(void *)(a2 + 40);
  v5 |= 0x10u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 40) = v34;
  CFStringRef v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 0x17u);
  CFStringRef v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  double v24 = *(_DWORD *)(a2 + 192);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 192) = v24;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "rawUndulationModel", *(_DWORD *)(a1 + 196));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 200), 0x16u);
  CFStringRef v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

  double v23 = *(void *)(a2 + 40);
  v5 |= 8uLL;
  *(void *)(a1 + 192) = v5;
  *(void *)(a1 + 40) = v23;
  CFStringRef v4 = *(void *)(a2 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "mounted", *(_DWORD *)(a1 + 104));
  int v5 = *(void *)(a1 + 192);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xDu);
  CFStringRef v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }

              uint64_t v2 = *((void *)this + 1);
              BOOL v3 = *((void *)this + 2);
              CFStringRef v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              goto LABEL_55;
          }
        }

        CFStringRef v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  PB::TextFormatter::format(this, "auxOmegaInertial_X", *(float *)(a1 + 24));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 4u);
  CFStringRef v4 = *(void *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_57;
  }

  double v24 = *(_BYTE *)(a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 126) = v24;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "srcAccumulatedYaw4s", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x16u);
  CFStringRef v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }

  double v26 = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 164) |= 0x1000000u;
  *(_BYTE *)(a1 + 154) = v26;
  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "qHat_Z", *(float *)(a1 + 104));
  unint64_t v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }

  uint64_t result = *(double *)(a2 + 104);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 104) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "strideLengthGrade", *(double *)(a1 + 80));
  int v5 = *(void *)(a1 + 224);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 200), 0x13u);
  CFStringRef v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }

  double v28 = *(void *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 112) = v28;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }

  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
LABEL_57:
    PB::TextFormatter::format(this, "runningSpeed", *(double *)(a1 + 152));
    if ((*(_DWORD *)(a1 + 188) & 0x80000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_29;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0x1Au);
  CFStringRef v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x1Cu);
  }

void sub_1000419CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000419EC(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100041A18(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    sub_100019D9C(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = 1;
  }

  return a1;
}

void sub_100041A64(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 56)) {
    sub_100019CEC(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_100041A80@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100041AFC, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100041AE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041AFC(const void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v13 = (char *)sub_1000071BC(a2 + 16, v12);
      uint64_t v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }

    else
    {
      double v13 = 0LL;
    }

    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *uint64_t v6 = v3;
    CFRange v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

uint64_t sub_100041BDC(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID())
  {
    uint64_t result = sub_101226418();
    goto LABEL_5;
  }

  uint64_t result = CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
  if (!(_DWORD)result)
  {
LABEL_5:
    uint64_t v4 = sub_1012262B8(result);
    return sub_100041C34(v4);
  }

  return result;
}

double sub_100041C34@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v5 = 0uLL;
  uint64_t v6 = 0LL;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0LL;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100041CB0, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100041C94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041CB0(const void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v13 = (char *)sub_1000071BC(a2 + 16, v12);
      uint64_t v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }

    else
    {
      double v13 = 0LL;
    }

    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }

    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *uint64_t v6 = v3;
    CFRange v7 = v6 + 1;
  }

  *(void *)(a2 + 8) = v7;
}

double sub_100041D90(double *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      return a1[3];
    case 5:
      return a1[2];
    case 1:
      return a1[1];
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018194A8);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Datatype not supported", buf, 2u);
  }

  BOOL v5 = sub_1002921D0(115, 0);
  double result = 0.0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
    v7[0] = 0;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Datatype not supported",  v7,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual T CLMicroLocationUtils::PerSourceWeights<double>::operator[](const CLMicroLocationFingerprint::Measurement &) const [T = double]",  "%s\n",  v6);
    return 0.0;
  }

  return result;
}

BOOL sub_100041F50(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      int v3 = a1[10];
      return v3 != 0;
    case 5:
      int v3 = a1[9];
      return v3 != 0;
    case 1:
      int v3 = a1[8];
      return v3 != 0;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018194A8);
  }
  BOOL v5 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Datatype not supported", buf, 2u);
  }

  BOOL v6 = sub_1002921D0(115, 0);
  BOOL result = 0LL;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
    v8[0] = 0;
    CFRange v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Datatype not supported",  v8,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual T CLMicroLocationUtils::PerSourceWeights<BOOL>::operator[](const CLMicroLocationFingerprint::Measurement &) const [T = BOOL]",  "%s\n",  v7);
    return 0LL;
  }

  return result;
}

uint64_t sub_10004211C(uint64_t a1)
{
  *(void *)a1 = &off_101819578;
  if (*(_BYTE *)(a1 + 240)) {
    sub_100019CEC(a1 + 184);
  }
  return a1;
}

void sub_100042158(_BYTE *__p)
{
  *(void *)std::string __p = &off_101819578;
  if (__p[240]) {
    sub_100019CEC((uint64_t)(__p + 184));
  }
  operator delete(__p);
}

char *sub_100042194(uint64_t a1)
{
  int v2 = (char *)operator new(0xF8uLL);
  *(void *)int v2 = &off_101819578;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = &off_1018194D8;
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = &off_1018194D8;
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((void *)v2 + 10) = *(void *)(a1 + 80);
  *((void *)v2 + 11) = &off_1018194D8;
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  *((void *)v2 + 14) = *(void *)(a1 + 112);
  *((void *)v2 + 15) = &off_1018194D8;
  uint64_t v3 = *(void *)(a1 + 144);
  *((_OWORD *)v2 + 8) = *(_OWORD *)(a1 + 128);
  *((void *)v2 + 18) = v3;
  *((void *)v2 + 19) = &off_101819528;
  v2[162] = *(_BYTE *)(a1 + 162);
  *((_WORD *)v2 + 80) = *(_WORD *)(a1 + 160);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 168);
  sub_100041A18((uint64_t)(v2 + 184), a1 + 184);
  return v2;
}

void sub_100042254(_Unwind_Exception *a1)
{
}

uint64_t sub_100042268(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101819578;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = &off_1018194D8;
  uint64_t v2 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + sub_100019CEC(v39 + 48) = v2;
  *(void *)(a2 + 56) = &off_1018194D8;
  uint64_t v3 = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = v3;
  *(void *)(a2 + 88) = &off_1018194D8;
  uint64_t v4 = *(void *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(void *)(a2 + 112) = v4;
  *(void *)(a2 + 120) = &off_1018194D8;
  uint64_t v5 = *(void *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(void *)(a2 + 144) = v5;
  *(void *)(a2 + 152) = &off_101819528;
  LOWORD(v5) = *(_WORD *)(a1 + 160);
  *(_BYTE *)(a2 + 162) = *(_BYTE *)(a1 + 162);
  *(_WORD *)(a2 + 160) = v5;
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  return sub_100041A18(a2 + 184, a1 + 184);
}

uint64_t sub_100042300(uint64_t result)
{
  if (*(_BYTE *)(result + 240)) {
    return sub_100019CEC(result + 184);
  }
  return result;
}

void sub_100042314(_BYTE *__p)
{
  if (__p[240]) {
    sub_100019CEC((uint64_t)(__p + 184));
  }
  operator delete(__p);
}

double sub_100042344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF2A8( a2,  a3,  a1 + 24,  a1 + 56,  a1 + 88,  a1 + 120,  a1 + 152,  (uint64_t *)(a1 + 168),  *(double *)(a1 + 8),  *(double *)(a1 + 16),  a1 + 184);
}

uint64_t sub_100042390(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000423CC()
{
}

uint64_t sub_1000423D8(uint64_t a1)
{
  *(void *)a1 = &off_101819608;
  if (*(_BYTE *)(a1 + 80)) {
    sub_100019CEC(a1 + 24);
  }
  return a1;
}

void sub_100042414(_BYTE *__p)
{
  *(void *)std::string __p = &off_101819608;
  if (__p[80]) {
    sub_100019CEC((uint64_t)(__p + 24));
  }
  operator delete(__p);
}

char *sub_100042450(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &off_101819608;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100041A18((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_10004249C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000424B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101819608;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100041A18(a2 + 24, a1 + 24);
}

uint64_t sub_1000424D4(uint64_t result)
{
  if (*(_BYTE *)(result + 80)) {
    return sub_100019CEC(result + 24);
  }
  return result;
}

void sub_1000424E8(_BYTE *__p)
{
  if (__p[80]) {
    sub_100019CEC((uint64_t)(__p + 24));
  }
  operator delete(__p);
}

double sub_100042518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF0EC(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t sub_100042530(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10004256C()
{
}

uint64_t sub_100042578(uint64_t a1)
{
  *(void *)a1 = &off_101819688;
  if (*(_BYTE *)(a1 + 80)) {
    sub_100019CEC(a1 + 24);
  }
  return a1;
}

void sub_1000425B4(_BYTE *__p)
{
  *(void *)std::string __p = &off_101819688;
  if (__p[80]) {
    sub_100019CEC((uint64_t)(__p + 24));
  }
  operator delete(__p);
}

char *sub_1000425F0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &off_101819688;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100041A18((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_10004263C(_Unwind_Exception *a1)
{
}

uint64_t sub_100042650(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101819688;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100041A18(a2 + 24, a1 + 24);
}

uint64_t sub_100042674(uint64_t result)
{
  if (*(_BYTE *)(result + 80)) {
    return sub_100019CEC(result + 24);
  }
  return result;
}

void sub_100042688(_BYTE *__p)
{
  if (__p[80]) {
    sub_100019CEC((uint64_t)(__p + 24));
  }
  operator delete(__p);
}

double sub_1000426B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF144(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t sub_1000426D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10004270C()
{
}

uint64_t sub_100042718(uint64_t a1)
{
  *(void *)a1 = &off_101819708;
  if (*(_BYTE *)(a1 + 96)) {
    sub_100019CEC(a1 + 40);
  }
  return a1;
}

void sub_100042754(_BYTE *__p)
{
  *(void *)std::string __p = &off_101819708;
  if (__p[96]) {
    sub_100019CEC((uint64_t)(__p + 40));
  }
  operator delete(__p);
}

char *sub_100042790(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *(void *)uint64_t v2 = &off_101819708;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  sub_100041A18((uint64_t)(v2 + 40), a1 + 40);
  return v2;
}

void sub_1000427E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000427F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_101819708;
  __int128 v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return sub_100041A18(a2 + 40, a1 + 40);
}

uint64_t sub_100042824(uint64_t result)
{
  if (*(_BYTE *)(result + 96)) {
    return sub_100019CEC(result + 40);
  }
  return result;
}

void sub_100042838(_BYTE *__p)
{
  if (__p[96]) {
    sub_100019CEC((uint64_t)(__p + 40));
  }
  operator delete(__p);
}

uint64_t sub_100042868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF1BC(a2, a3, (uint64_t *)(a1 + 8), a1 + 40);
}

uint64_t sub_100042884(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000428C0()
{
}

void *sub_1000428D4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &off_101819788;
  result[1] = v3;
  return result;
}

uint64_t sub_100042908(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101819788;
  a2[1] = v2;
  return result;
}

void sub_100042924(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_100042934(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100042970()
{
}

uint64_t sub_10004297C(uint64_t a1, uint64_t *a2, void *a3)
{
  BOOL v6 = &off_1018187B0;
  double v4 = sub_10000947C((uint64_t)&v6, a2, a3);
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 24LL))(a1, sqrt(v4));
}

double sub_1000429CC(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2));
}

double sub_1000429D8(uint64_t a1, uint64_t *a2, void *a3)
{
  double v4 = &off_1018187B0;
  return sqrt(sub_10000947C((uint64_t)&v4, a2, a3));
}

double sub_100042A0C(double *a1, double a2)
{
  *(void *)a1 = &off_1018198A0;
  a1[1] = 0.5;
  if (a2 <= 0.0) {
    sub_101226578();
  }
  double result = 1.0 / ((a2 + a2) * a2);
  a1[1] = result;
  return result;
}

double sub_100042A50(uint64_t a1, uint64_t *a2, void *a3)
{
  double v3 = *(double *)(a1 + 8);
  BOOL v6 = &off_1018187B0;
  double v4 = -(v3 * sub_10000947C((uint64_t)&v6, a2, a3));
  return exp(v4);
}

double sub_100042A90(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2) * a2);
}

uint64_t sub_100042AA0(uint64_t a1, double a2, double a3)
{
  *(void *)a1 = &off_1018198E8;
  __asm { FMOV            V2.2D, #1.0 }

  *(_OWORD *)(a1 + 8) = _Q2;
  if (a3 <= 0.0) {
    sub_1012265A0();
  }
  if (a2 <= 0.0) {
    sub_1012265C8();
  }
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = 1.0 / pow(a2, a3);
  return a1;
}

double sub_100042B04(uint64_t a1, double a2)
{
  double v2 = *(double *)(a1 + 16);
  double v3 = -(v2 * pow(a2, *(double *)(a1 + 8)));
  return exp(v3);
}

double sub_100042B28(uint64_t a1, double a2)
{
  BOOL v2 = *(double *)(a1 + 8) <= a2;
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

void *sub_100042B40(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &off_101819978;
  result[1] = v3;
  return result;
}

uint64_t sub_100042B78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101819978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100042B98(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(a1 + 8))( a2,  *a3,  a3[1],  *a4,  a4[1],  *a5,  a5[1]);
}

uint64_t sub_100042BBC(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_100042BF8()
{
  return &off_1018199F8;
}

void sub_100042C04( void *a1, os_log_s *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_100042CD0( void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

BOOL sub_100042CF0()
{
  return os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100042D04(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

  ;
}

void sub_100042D48( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_100042D5C( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

  ;
}

  ;
}

BOOL sub_100042D9C()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2264));
}

  ;
}

  ;
}

  ;
}

void *sub_100042DEC(void *result, uint64_t a2)
{
  *double result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = a2;
  return result;
}

void sub_100042DF8(uint64_t *a1, __int128 *a2)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsEnableEventLogging", 0x8000100u, kCFAllocatorNull);
  char v5 = sub_1002A6FD4(v16, (uint64_t)v4, &v15);
  CFRelease(v4);
  BOOL v6 = v15;
  CFRange v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v6) {
    char v10 = 0;
  }
  else {
    char v10 = v5;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = (__int128 *)a1[1];
    if ((unint64_t)v11 >= a1[2])
    {
      uint64_t v13 = sub_1000437C8(a1, a2);
    }

    else
    {
      __int128 v12 = *a2;
      *(__int128 *)((char *)v11 + 12) = *(__int128 *)((char *)a2 + 12);
      *uint64_t v11 = v12;
      sub_10008146C(v11 + 2, a2 + 2);
      uint64_t v13 = (uint64_t)(v11 + 21);
      a1[1] = (uint64_t)(v11 + 21);
    }

    a1[1] = v13;
    unint64_t v14 = 0xCF3CF3CF3CF3CF3DLL * ((v13 - *a1) >> 4);
  }

void sub_100042F40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100042F94()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsEventLoggerMaxBufferSize", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 32LL;
  }
}

void sub_100043054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10004306C(uint64_t *a1)
{
  if (*a1 == a1[1]) {
    return 1LL;
  }
  if (sub_1000433C8(a1[3], a1))
  {
    sub_1000435F4(a1);
    return 1LL;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819A30);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "EventLogger, failed to flush to disk", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A30);
    }
    v9[0] = 0;
    BOOL v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "EventLogger, failed to flush to disk",  v9,  2);
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMicroLocationEventLogger::flushToDisk()", "%s\n", v6);
  }

  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  if (v4 >= sub_100042F94())
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A30);
    }
    unint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "EventLogger, Max buffer reached after failing to flush to disk. Clearing event logger buffer",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A30);
      }
      v9[0] = 0;
      LODWORD(v8) = 2;
      unsigned int v7 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "EventLogger, Max buffer reached after failing to flush to disk. Clearing event logger buffer",  v9,  v8);
      sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLMicroLocationEventLogger::flushToDisk()", "%s\n", v7);
    }

    sub_1000435F4(a1);
  }

  return 0LL;
}

uint64_t *sub_100043388(uint64_t *a1)
{
  uint64_t v3 = (void **)a1;
  sub_100043754(&v3);
  return a1;
}

uint64_t sub_1000433C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_1003C1048(a1 + 72))
  {
    unint64_t v5 = *(void **)(a1 + 248);
    if (!v5)
    {
      unint64_t v5 = operator new(0x10uLL);
      sub_1001347E4((uint64_t)v5, v4);
      BOOL v6 = *(void **)(a1 + 248);
      *(void *)(a1 + 2sub_100019CEC(v39 + 48) = v5;
      if (v6)
      {
        operator delete(v6);
        unint64_t v5 = *(void **)(a1 + 248);
      }
    }

    uint64_t v7 = sub_100134864((uint64_t)v5, a2);
    sub_100043AAC(a1);
    return v7;
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A30);
    }
    unint64_t v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#Warning Can't insert because the database is invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A30);
      }
      v11[0] = 0;
      char v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Can't insert because the database is invalid",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationLogg edEventsTable::Entry]",  "%s\n",  v10);
    }

    return 0LL;
  }

void sub_1000435D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000435F4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      uint64_t v4 = v2 - 336;
      sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)(v2 - 304));
      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
  return sub_100043644((uint64_t)a1);
}

uint64_t sub_100043644(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 4uLL);
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    BOOL v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
    }

    else
    {
      uint64_t v8 = (char *)sub_100043968(v7, v4);
    }

    char v10 = v8;
    uint64_t v11 = &v8[336 * v5];
    uint64_t v12 = v11;
    uint64_t v13 = &v8[336 * v9];
    sub_1000438F4(v6, &v10);
    return sub_100043A5C((uint64_t)&v10);
  }

  return result;
}

void sub_100043700(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_100043728(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100043754(void ***a1)
{
  unint64_t v1 = *a1;
  int64x2_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 336;
        sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 304));
        unint64_t v4 = v6;
      }

      while (v6 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_1000437C8(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x61861861861861LL) {
    unint64_t v9 = 0xC30C30C30C30C3LL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v18 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_100043968(v7, v9);
  }
  else {
    char v10 = 0LL;
  }
  uint64_t v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  CFStringRef v17 = &v10[336 * v9];
  __int128 v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)uint64_t v11 = v12;
  sub_10008146C(v11 + 32, a2 + 2);
  v16 += 336;
  sub_1000438F4(a1, v15);
  uint64_t v13 = a1[1];
  sub_100043A5C((uint64_t)v15);
  return v13;
}

void sub_1000438E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000438F4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000439B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100043968(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4LL) {
    sub_1000070D4();
  }
  return operator new(336 * a2);
}

uint64_t sub_1000439B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 368LL; ; i -= 336LL)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 368 == a5) {
      break;
    }
    uint64_t v13 = (_OWORD *)(a7 + i - 704);
    __int128 v14 = *(_OWORD *)(v12 - 704);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(v12 - 692);
    *uint64_t v13 = v14;
    uint64_t v15 = a7 + i - 672;
    sub_10008146C(v15, v12 - 672);
  }

  return a6;
}

uint64_t sub_100043A5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 336;
    sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)(i - 304));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_100043AAC(uint64_t a1)
{
  unsigned int v2 = sub_100038C1C(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819A30);
  }
  uint64_t v3 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136446210;
    char v10 = "MicroLocationLoggedEvents";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicate s a serious problem",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A30);
    }
    int v7 = 136446210;
    uint64_t v8 = "MicroLocationLoggedEvents";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem",  &v7,  12);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationLoggedEventsTable]",  "%s\n",  v6);
  }

  BOOL result = sub_1000312D4(a1);
  if (result)
  {
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_1003C1EC0(a1 + 72, v5);
    return 1LL;
  }

  return result;
}

uint64_t sub_100043CA0()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsLoggedEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A77CC(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  unsigned int v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v1) {
    return v2;
  }
  else {
    return 25000LL;
  }
}

void sub_100043D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100043D78(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934B50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934B50))
  {
    sub_1000465D4((std::string *)&xmmword_101934B38);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934B38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934B50);
  }

  if (byte_101934B4F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934B38, *((unint64_t *)&xmmword_101934B38 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934B38;
    *(void *)(a1 + 16) = unk_101934B48;
  }

void sub_100043E28(_Unwind_Exception *a1)
{
}

void sub_100043E40(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934B70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934B70))
  {
    sub_100012F3C((std::string *)&xmmword_101934B58);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934B58, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934B70);
  }

  if (byte_101934B6F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934B58, *((unint64_t *)&xmmword_101934B58 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934B58;
    *(void *)(a1 + 16) = unk_101934B68;
  }

void sub_100043EF0(_Unwind_Exception *a1)
{
}

void sub_100043F08(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_1003B59A0(*a1, "MicroLocationBluetoothIdentityTable", (const char **)&off_101819A70, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationBluetoothIdentityTable");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      unint64_t v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v11 = "MicroLocationBluetoothIdentityTable";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819A50);
        }
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %s",  &v9);
LABEL_19:
        unsigned int v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationBluetoothIdentityTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      uint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v11 = "MicroLocationBluetoothIdentityTable";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819A50);
        }
        LODWORD(v9) = 136446210;
        *(void *)((char *)&v9 + 4) = "MicroLocationBluetoothIdentityTable";
        unsigned int v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationBluetoothIdentityTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A50);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136446210;
      uint64_t v11 = "MicroLocationBluetoothIdentityTable";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Database is not connected so we can't intialize our %{public}s table",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      LODWORD(v9) = 136446210;
      *(void *)((char *)&v9 + 4) = "MicroLocationBluetoothIdentityTable";
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Database is not connected so we can't intialize our %{public}s table",  &v9,  12,  v9);
      goto LABEL_19;
    }
  }

uint64_t sub_10004431C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_100043F08((uint64_t *)a1);
  return a1;
}

uint64_t sub_100044348(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 16), *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v9 = *a4;
    *(void *)(a1 + 32) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }

  char v10 = (_BYTE *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C(v10, *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v11 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)char v10 = v11;
  }

  *(double *)(a1 + 64) = a6;
  return a1;
}

void sub_1000443DC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1000443FC(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993A0F >= 0) {
      uint64_t v5 = (char *)&xmmword_1019939F8;
    }
    else {
      uint64_t v5 = (char *)xmmword_1019939F8;
    }
    sub_1003C0D54(v4, v5, &v29);
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      uint64_t v7 = *a2 + 72LL;
      while (1)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v29);
        double v9 = *(double *)(v7 - 8);
        memset(&__p, 0, sizeof(__p));
        if ((sub_100013090(v7 - 72, &__p) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        if (!sub_1003B7480(v8, 2, v9)) {
          break;
        }
        char v10 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        __int128 v11 = (char *)(v7 - 56);
        if (!sub_1003BC1F0(v8, 4, v11)) {
          break;
        }
        uint64_t v12 = (char *)(v7 - 32);
        if (!sub_1003BC1F0(v8, 5, v12)) {
          break;
        }
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101819A50);
          }
          CFStringRef v17 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993A0F >= 0) {
              int v18 = &xmmword_1019939F8;
            }
            else {
              int v18 = (__int128 *)xmmword_1019939F8;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101819A50);
            }
            if (byte_101993A0F >= 0) {
              uint64_t v19 = &xmmword_1019939F8;
            }
            else {
              uint64_t v19 = (__int128 *)xmmword_1019939F8;
            }
            int v30 = 136446210;
            uint64_t v31 = v19;
            LODWORD(v27) = 12;
            uint64_t v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v30,  v27);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationBluetoothIdentityTable::insertOrReplace(const std::vector<CLMicroLocationBluetoothIden tityTable::Entry> &)",  "%s\n",  v20);
          }

void sub_100044A00( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, std::bad_cast a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8LL))(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_100044A64(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  v49.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v49, "SELECT * FROM (");
  char v48 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v8 = std::string::append(&v49, __s, 7uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_100043D78((uint64_t)__p);
  if ((v46 & 0x80u) == 0) {
    char v10 = __p;
  }
  else {
    char v10 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v11 = v46;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v50, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v14 = std::string::append(&v51, " FROM ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  char v16 = std::string::append(&v52, "MicroLocationBluetoothIdentityTable");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  int v18 = std::string::append(&v53, " ");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    double v21 = (const std::string::value_type *)a2;
  }
  else {
    double v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  double v23 = std::string::append(&v54, v21, v22);
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v25 = std::string::append(&v55, " ORDER BY ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = std::string::append(&v61, "LastSeenTimeStamp");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append(&v56, " DESC LIMIT ");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v44, a3);
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v31 = &v44;
  }
  else {
    uint64_t v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  __int16 v33 = std::string::append(&v62, (const std::string::value_type *)v31, size);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v35 = std::string::append(&v57, ") ORDER BY ");
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v37 = std::string::append(&v60, "LastSeenTimeStamp");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t cap = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v58 = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  if (v48 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    uint64_t v39 = (char *)v58;
  }
  else {
    uint64_t v39 = (char *)v58[0];
  }
  sub_1003C0D54(a1, v39, &v60);
  std::string::size_type v40 = v60.__r_.__value_.__r.__words[0];
  std::string v41 = (sqlite3_stmt *)sub_100019240((uint64_t)v60.__r_.__value_.__l.__data_);
  memset(&v57, 0, sizeof(v57));
  while (j__sqlite3_step(v41) == 100)
  {
    v55.__r_.__value_.__r.__words[0] = sqlite3_column_double(v41, 1);
    sub_100011CB8(v41, 2, &v60);
    sub_100011CB8(v41, 3, &v62);
    sub_100011CB8(v41, 4, &v56);
    sub_10010147C((uint64_t)&v60, (uint64_t)&v61);
    if (!v61.__r_.__value_.__s.__data_[16]) {
      sub_100036CD8();
    }
    std::string::size_type v42 = v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_ >= v57.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v43 = sub_100046044((uint64_t *)&v57, (uint64_t *)&v61, (uint64_t)&v62, (uint64_t)&v56, (double *)&v55);
    }

    else
    {
      sub_100046190( (uint64_t)&v57.__r_.__value_.__l.__cap_,  v57.__r_.__value_.__l.__size_,  (uint64_t *)&v61,  (uint64_t)&v62,  (uint64_t)&v56,  (double *)&v55);
      std::string::size_type v43 = v42 + 72;
    }

    v57.__r_.__value_.__l.__size_ = v43;
  }

  sqlite3_reset(v41);
  *a4 = v57;
  memset(&v57, 0, sizeof(v57));
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
  sub_100046550((void ***)&v60);
  if (v40) {
    (*(void (**)(std::string::size_type))(*(void *)v40 + 8LL))(v40);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v58[0]);
  }
}

void sub_100044FBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  __int128 buf = &a51;
  sub_100046550(&buf);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100045380()
{
}

void sub_100045394(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x1000451A4LL);
}

void sub_1000453A4( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, std::string *a5@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v32.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v32, "WHERE ");
    char v10 = std::string::append(&v32, "LastSeenTimeStamp");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = std::string::append(&v33, " > ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      __int128 v15 = (const std::string::value_type *)a2;
    }
    else {
      __int128 v15 = *(const std::string::value_type **)a2;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(a2 + 8);
    }
    __int128 v17 = std::string::append(&v34, v15, v16);
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v19 = std::string::append(&v35, " AND ");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    double v21 = std::string::append(&v36, "LastSeenTimeStamp");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    double v23 = std::string::append(&v37, "<= ");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    int v25 = *(char *)(a3 + 23);
    if (v25 >= 0) {
      __int128 v26 = (const std::string::value_type *)a3;
    }
    else {
      __int128 v26 = *(const std::string::value_type **)a3;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(a3 + 8);
    }
    __int128 v28 = std::string::append(&v38, v26, v27);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    std::string::size_type cap = v28->__r_.__value_.__l.__cap_;
    __int128 __p = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    sub_100044A64(*(void *)a1, (uint64_t)&__p, a4, a5);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)__p);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A50);
    }
    __int128 v30 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      LOWORD(v38.__r_.__value_.__l.__data_) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all",  &v38,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMicroLocationBluetoothIdentityTable::Entry> CLMicroLocationBluetoothIdentityTable::selectBetweenTi mes(const std::string &, const std::string &, uint32_t)",  "%s\n",  v31);
    }

    a5->__r_.__value_.__r.__words[0] = 0LL;
    a5->__r_.__value_.__l.__size_ = 0LL;
    a5->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_100045748(_Unwind_Exception *a1)
{
}

BOOL sub_100045810(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationBluetoothIdentityTable");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v8 = std::string::append(&v44, "LastSeenTimeStamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    char v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    int v14 = std::string::append(&v47, "LastSeenTimeStamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v18 = std::string::append(&v49, "MicroLocationBluetoothIdentityTable");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v22 = std::string::append(&v51, "LastSeenTimeStamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v41;
    }
    else {
      __int128 v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string v32 = (char *)__p;
    }
    else {
      std::string v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    std::string v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819A50);
      }
      std::string v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819A50);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationBluetoothIdentityTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819A50);
  }
  std::string v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819A50);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationBluetoothIdentityTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_100045E88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100046018(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100046044(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v6 = 0x8E38E38E38E38E39LL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL) {
    sub_100007008();
  }
  if (0x1C71C71C71C71C72LL * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x1C71C71C71C71C72LL * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39LL * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7LL) {
    unint64_t v12 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v12 = v7;
  }
  __int128 v20 = a1 + 2;
  if (v12) {
    __int128 v13 = (char *)sub_100046304((uint64_t)(a1 + 2), v12);
  }
  else {
    __int128 v13 = 0LL;
  }
  std::string::size_type v16 = v13;
  __int128 v17 = &v13[72 * v6];
  __int128 v19 = &v13[72 * v12];
  sub_100046190((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  __int128 v18 = v17 + 72;
  sub_100046290(a1, &v16);
  uint64_t v14 = a1[1];
  sub_1000464DC(&v16);
  return v14;
}

void sub_10004617C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100046190(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 16);
  }

  if (*(char *)(a5 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a5, *(void *)(a5 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a5;
    uint64_t v12 = *(void *)(a5 + 16);
  }

  sub_100044348(a2, v9, v10, (__int128 *)__dst, (__int128 *)__p, *a6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10004625C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046290(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10004634C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100046304(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1000070D4();
  }
  return operator new(72 * a2);
}

uint64_t sub_10004634C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }

  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      __int128 v8 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(a3 - sub_100019CEC(v39 + 48) = 0LL;
      *(void *)(a3 - 40) = 0LL;
      *(void *)(a3 - 56) = 0LL;
      __int128 v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v9;
      *(void *)(a3 - 24) = 0LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - 32) = 0LL;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v15 + 1) - 72LL;
      *((void *)&v15 + 1) -= 72LL;
      a3 -= 72LL;
    }

    while (a3 != a5);
    uint64_t v10 = v15;
  }

  char v13 = 1;
  sub_100046414((uint64_t)v12);
  return v10;
}

uint64_t sub_100046414(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100046448((uint64_t *)a1);
  }
  return a1;
}

void sub_100046448(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100046498(v3, v1);
      v1 += 72LL;
    }

    while (v1 != v2);
  }

void sub_100046498(uint64_t a1, uint64_t a2)
{
}

void **sub_1000464DC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10004650C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_100046498(v4, i - 72);
  }

void sub_100046550(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72LL;
        sub_100046498((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

double sub_1000465D4@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100046618( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046634(std::string *a1)
{
  return sub_1000469D4(a1);
}

uint64_t sub_100046670(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "RowId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_10004670C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046740(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "LastSeenTimeStamp");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1000467E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004681C(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "BluetoothId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1000468C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000468F8(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "DeviceName");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1000469A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000469D4(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "StableIdentifier");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)__int128 __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100046A7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046AB0()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationBluetoothIdentityTable");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_100043D78((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_100043E40((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993A08 = v12->__r_.__value_.__l.__cap_;
  xmmword_1019939F8 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_1019939F8,  (void *)&_mh_execute_header);
}

void sub_100046C9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100046D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000865CC(a1);
  *(_OWORD *)(v7 + 152) = 0u;
  *(void *)(v7 + 136) = a3;
  *(void *)(v7 + 144) = a4;
  __int128 v8 = (void ***)(v7 + 160);
  *(_OWORD *)(v7 + 168) = 0u;
  *(void *)(v7 + 184) = 0LL;
  *(CFAbsoluteTime *)(v7 + 152) = j__CFAbsoluteTimeGetCurrent_1();
  __int128 v9 = (void **)operator new(0x20uLL);
  sub_1010DDBC0(__p, "LocalizationRequest");
  sub_10004A874((uint64_t)v9, (__int128 *)__p);
  sub_100046E48(v8, v9);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_100046DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::string v19 = *(void **)(v15 + 168);
  if (v19)
  {
    *(void *)(v15 + 176) = v19;
    operator delete(v19);
  }

  sub_100046E48(v16, 0LL);
  sub_100086708(v15);
  _Unwind_Resume(a1);
}

void sub_100046E48(void ***a1, void **a2)
{
  __int128 v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = sub_10004B9B4(v3);
    operator delete(v4);
  }

uint64_t sub_100046E74(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }

  sub_100046E48((void ***)(a1 + 160), 0LL);
  return sub_100086708(a1);
}

void sub_100046EB4(void *a1, uint64_t *a2, void *a3)
{
  if (a2[1] - *a2 == a3[1] - *a3)
  {
    sub_10000CE18((uint64_t)buf);
    uint64_t v38 = *a2;
    uint64_t v39 = a2[1];
    if (v39 != *a2)
    {
      unint64_t v6 = 0LL;
      uint64_t v7 = (char **)(a1 + 21);
      char v8 = 1;
      do
      {
        if ((v8 & 1) == 0) {
          sub_10000CF44(&v49[6], (uint64_t)",", 1LL);
        }
        __int128 v9 = sub_10000CF44(&v49[6], (uint64_t)"ConfidenceLevel:", 16LL);
        uint64_t v10 = (void *)std::ostream::operator<<(v9, *(unsigned int *)(*a2 + 4 * v6));
        std::string::size_type v11 = sub_10000CF44(v10, (uint64_t)"ConfidenceReason:", 17LL);
        sub_10009471C(*(_DWORD *)(*a3 + 4 * v6), &__p);
        if (SBYTE3(v44) >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (SBYTE3(v44) >= 0) {
          uint64_t v13 = BYTE3(v44);
        }
        else {
          uint64_t v13 = *(void *)v42;
        }
        sub_10000CF44(v11, (uint64_t)p_p, v13);
        if (SBYTE3(v44) < 0) {
          operator delete(__p);
        }
        uint64_t v14 = *(unsigned int *)(*a2 + 4 * v6);
        uint64_t v15 = *(unsigned int *)(*a3 + 4 * v6);
        __int128 v17 = (uint64_t *)a1[22];
        unint64_t v16 = a1[23];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = ((char *)v17 - *v7) >> 3;
          uint64_t v20 = v16 - (void)*v7;
          uint64_t v21 = v20 >> 2;
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            std::string v23 = (char *)sub_1000071BC((uint64_t)(a1 + 23), v22);
          }
          else {
            std::string v23 = 0LL;
          }
          __int128 v24 = &v23[8 * v19];
          *(void *)__int128 v24 = v14 | (v15 << 32);
          unsigned __int8 v18 = v24 + 8;
          __int128 v26 = (char *)a1[21];
          __int128 v25 = (char *)a1[22];
          if (v25 != v26)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v24 - 1) = v27;
              v24 -= 8;
            }

            while (v25 != v26);
            __int128 v25 = *v7;
          }

          a1[21] = v24;
          a1[22] = v18;
          a1[23] = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }

        else
        {
          *__int128 v17 = v14 | (v15 << 32);
          unsigned __int8 v18 = v17 + 1;
        }

        char v8 = 0;
        a1[22] = v18;
        ++v6;
      }

      while (v6 < (a2[1] - *a2) >> 2);
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    __int128 v28 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v29 = (char *)operator new(0x28uLL);
      *(void *)(v29 + 29) = 0LL;
      *(_OWORD *)__int128 v29 = 0u;
      *((_OWORD *)v29 + 1) = 0u;
      sub_10000AE6C((uint64_t)(a1 + 17), v29);
      if (v39 == v38)
      {
        __int128 __p = (void *)68289538;
        *(_WORD *)std::string v42 = 2082;
        *(void *)&v42[2] = "";
        __int16 v43 = 2082;
        std::string v44 = v29;
        __int16 v45 = 2082;
        std::string v46 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocalizationRequest::setConfidenceAndReasons, RequestID:%{public, location:escape _only}s, Confidence Levels and Reasons:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x26u);
      }

      else
      {
        std::stringbuf::str(&v40, (const std::stringbuf *)&v49[14]);
        if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int128 v30 = &v40;
        }
        else {
          __int128 v30 = (std::stringbuf::string_type *)v40.__r_.__value_.__r.__words[0];
        }
        __int128 __p = (void *)68289538;
        *(_WORD *)std::string v42 = 2082;
        *(void *)&v42[2] = "";
        __int16 v43 = 2082;
        std::string v44 = v29;
        __int16 v45 = 2082;
        std::string v46 = (const char *)v30;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocalizationRequest::setConfidenceAndReasons, RequestID:%{public, location:escape _only}s, Confidence Levels and Reasons:%{public, location:escape_only}s}",  (uint8_t *)&__p,  0x26u);
      }

      operator delete(v29);
    }

    *(void *)&v49[6] = v37;
    if (v51 < 0) {
      operator delete(v50);
    }
    std::streambuf::~streambuf(&v49[14]);
    std::ios::~ios(&v52);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    __int128 v31 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = (a2[1] - *a2) >> 2;
      uint64_t v33 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v48 = 2082;
      *(void *)std::string v49 = "";
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v32;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:LocalizationRequest::setConfidenceAndReasons, invalid arguments, confidenceLevelsSize :%{public}lu, confidenceReasonsSize:%{public}lu}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
    }

    std::string v34 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      uint64_t v35 = (a2[1] - *a2) >> 2;
      uint64_t v36 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v48 = 2082;
      *(void *)std::string v49 = "";
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v35;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v36;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v34,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "LocalizationRequest::setConfidenceAndReasons, invalid arguments",  "{msg%{public}.0s:LocalizationRequest::setConfidenceAndReasons, invalid arguments, confidenceLevelsSize :%{public}lu, confidenceReasonsSize:%{public}lu}",  buf,  0x26u);
    }
  }

void sub_100047420( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
}

uint64_t sub_100047474(uint64_t result, int a2)
{
  __int128 v3 = *(void **)(result + 168);
  uint64_t v2 = *(void **)(result + 176);
  if (v3 != v2)
  {
    for (uint64_t i = v3 + 1; *((_DWORD *)i - 1) != a2; ++i)
    {
      if (i == v2) {
        return result;
      }
    }

    unint64_t v6 = i - 1;
    if (i - 1 != v2 && i != v2)
    {
      do
      {
        if (*((_DWORD *)i + 1) != a2) {
          *v6++ = *i;
        }
        ++i;
      }

      while (i != v2);
      uint64_t v2 = *(void **)(result + 176);
    }

    if (v6 != v2) {
      *(void *)(result + 176) = v6;
    }
  }

  return result;
}

void sub_10004752C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 168);
  __int128 v3 = *(unsigned int **)(a1 + 176);
  if (v2 == v3)
  {
    unsigned int v9 = 3;
  }

  else
  {
    uint64_t v4 = v2 + 2;
    if (v2 + 2 != v3)
    {
      signed int v5 = *v2;
      unint64_t v6 = v2 + 2;
      do
      {
        signed int v8 = *v6;
        v6 += 2;
        signed int v7 = v8;
        if (v8 > v5)
        {
          signed int v5 = v7;
          uint64_t v2 = v4;
        }

        uint64_t v4 = v6;
      }

      while (v6 != v3);
    }

    unsigned int v9 = *v2;
  }

  if ((sub_100064130(v9) & 1) == 0) {
    sub_1012265F0();
  }
  *(_DWORD *)(a1 + 128) |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v9;
  sub_100047688(a1, &v15);
  *(_DWORD *)(a1 + 112) = 0;
  uint64_t v10 = v15;
  std::string::size_type v11 = v16;
  if (v15 != v16)
  {
    do
    {
      unsigned int v12 = *v10;
      if (!sub_100064148(*v10)) {
        __assert_rtn( "add_confidencereasons",  "microlocation.pb.h",  20332,  "::CLMicroLocationProto::ConfidenceReason_IsValid(value)");
      }
      int v13 = *(_DWORD *)(a1 + 112);
      if (v13 == *(_DWORD *)(a1 + 116))
      {
        sub_10004AAFC(a1 + 104, v13 + 1);
        int v13 = *(_DWORD *)(a1 + 112);
      }

      uint64_t v14 = *(void *)(a1 + 104);
      *(_DWORD *)(a1 + 112) = v13 + 1;
      *(_DWORD *)(v14 + 4LL * v13) = v12;
      ++v10;
    }

    while (v10 != v11);
    uint64_t v10 = v15;
  }

  if (v10)
  {
    unint64_t v16 = v10;
    operator delete(v10);
  }

void sub_100047668( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100047688(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  unint64_t v6 = (uint64_t *)v7;
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 176);
  signed int v5 = (uint64_t *)v7;
  if (v3 != v4)
  {
    do
    {
      sub_10004A8FC(&v6, (int *)(v3 + 4), (_DWORD *)(v3 + 4));
      v3 += 8LL;
    }

    while (v3 != v4);
    signed int v5 = v6;
  }

  sub_10004A9B4(a2, v5, v7);
  sub_100008390((uint64_t)&v6, v7[0]);
}

void sub_10004770C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100047728(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[0] = a3;
  v21[1] = a4;
  sub_100046D48((uint64_t)v20, a2, a3, a4);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819BB8);
  }
  unint64_t v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    signed int v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 29) = 0LL;
    *(_OWORD *)signed int v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    sub_10000AE6C((uint64_t)v21, v7);
    uint64_t v8 = *(unsigned int *)(a2 + 72);
    v13[0] = 68289538;
    v13[1] = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2082;
    __int128 v17 = v7;
    __int16 v18 = 2050;
    uint64_t v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocalizationController, start localization request, Request ID:%{public, location:esc ape_only}s, Event Type:%{public}lu}",  (uint8_t *)v13,  0x26u);
    operator delete(v7);
  }

  unsigned int v9 = a1 + 4;
  unint64_t v10 = a1[5];
  if (v10 >= a1[6])
  {
    uint64_t v11 = sub_10004BB64(v9, (uint64_t)v20);
  }

  else
  {
    sub_10004BAE8((uint64_t)v9, (uint64_t)v20);
    uint64_t v11 = v10 + 192;
  }

  a1[5] = v11;
  return sub_100046E74((uint64_t)v20);
}

void sub_100047898( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t *sub_1000478C8(uint64_t *result, uint64_t *a2)
{
  if (result[4] != result[5]) {
    return (uint64_t *)sub_10004BE3C(result + 1, result[2], *a2, a2[1], 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

uint64_t sub_10004790C(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819BB8);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a2 + 77);
    int v6 = *(unsigned __int8 *)(a2 + 76);
    *(_DWORD *)__int128 buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v16 = 2082;
    __int128 v17 = "";
    __int16 v18 = 1026;
    int v19 = v5;
    __int16 v20 = 1026;
    int v21 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:LocalizationController: ignored sensors, isBleIgnore:%{public}d, isNiIgnore:%{public}d}",  buf,  0x1Eu);
  }

  char v7 = sub_1000412F0();
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  sub_10004C48C( &v12,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  while (1)
  {
    if (v8 == v9)
    {
      uint64_t v10 = 0LL;
      goto LABEL_20;
    }

    sub_100068220(buf, v8);
    if (v22 != 6) {
      break;
    }
    sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    if ((v7 & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_16:
    v8 += 88LL;
  }

  if (v22 == 5)
  {
    if ((v7 & 0x20) != 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }

  if (v22 != 1 || (v7 & 2) == 0)
  {
LABEL_15:
    sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    goto LABEL_16;
  }

void sub_100047ACC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_100047AF0(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9 = a2;
  v110[0] = a5;
  v110[1] = a6;
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 16);
  uint64_t v10 = (char *)(a4 + 32);
  if (a4 + 32 != a2 + 24) {
    sub_10004C5F8( v10,  *(char **)(a2 + 24),  *(void *)(a2 + 32),  (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  }
  uint64_t v11 = *a3;
  uint64_t v73 = a3[1];
  if (*a3 != v73)
  {
    uint64_t v72 = v9 + 48;
    __int128 v70 = (void *)(v9 + 152);
    __int128 v75 = (void *)(a4 + 48);
    uint64_t v69 = v9 + 248;
    uint64_t v74 = v9;
    do
    {
      if (*(_DWORD *)(*v11 + 4) == 1 && !*(_BYTE *)(*v11 + 392)) {
        sub_101226618();
      }
      sub_1010DDBC0(&v109, "");
      uint64_t v12 = *v11;
      if (*(_DWORD *)(*v11 + 4) == 2 && *(_BYTE *)(v12 + 192))
      {
        std::to_string((std::string *)v111, (uint64_t)(*(void *)(v12 + 104) - *(void *)(v12 + 96)) >> 4);
        uint64_t v13 = v111[23] >= 0 ? v111 : *(const std::string::value_type **)v111;
        std::string::size_type v14 = v111[23] >= 0 ? v111[23] : *(void *)&v111[8];
        std::string::append(&v109, v13, v14);
        if ((v111[23] & 0x80000000) != 0) {
          operator delete(*(void **)v111);
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
      uint64_t v15 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *v11;
        __int128 v17 = operator new(0x28uLL);
        v101[0] = v17;
        *(_OWORD *)&v101[1] = xmmword_1012C8460;
        *__int128 v17 = 0u;
        v17[1] = 0u;
        *(void *)((char *)v17 + 29) = 0LL;
        sub_10000AE6C(v16 + 352, v17);
        if (SHIBYTE(v101[2]) >= 0) {
          __int16 v18 = v101;
        }
        else {
          __int16 v18 = (void **)v101[0];
        }
        uint64_t v19 = *v11;
        uint64_t v20 = *(unsigned int *)(*v11 + 4);
        if ((v109.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v21 = &v109;
        }
        else {
          int v21 = (std::string *)v109.__r_.__value_.__r.__words[0];
        }
        char v124 = 0;
        LOBYTE(v122[0]) = 0;
        sub_100048820((char *)(v19 + 368), (uint64_t)v122, (uint64_t)v98);
        if (v99 >= 0) {
          int v22 = v98;
        }
        else {
          int v22 = (void **)v98[0];
        }
        uint64_t v23 = *v11;
        __int128 v24 = operator new(0x28uLL);
        __int128 __p = v24;
        __int128 v108 = xmmword_1012C8460;
        *__int128 v24 = 0u;
        v24[1] = 0u;
        *(void *)((char *)v24 + 29) = 0LL;
        sub_10000AE6C(v23 + 400, v24);
        p_p = &__p;
        if (v108 < 0) {
          p_p = __p;
        }
        int v26 = *(unsigned __int8 *)(*v11 + 536);
        *(void *)__int128 v111 = 68290563LL;
        *(_WORD *)&v111[8] = 2082;
        *(void *)&v111[10] = "";
        *(_WORD *)&v111[18] = 2082;
        *(void *)&v111[20] = v18;
        __int16 v112 = 2050;
        *(void *)__int128 v113 = v20;
        *(_WORD *)&v113[8] = 2081;
        *(void *)&v113[10] = v21;
        *(_WORD *)int v114 = 2081;
        *(void *)&v114[2] = v22;
        *(_WORD *)&v114[10] = 2082;
        *(void *)&v114[12] = p_p;
        *(_WORD *)&v114[20] = 1026;
        *(_DWORD *)&v114[22] = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:localizationRequestResultsPerModel, ModelUUID:%{public, location:escape_only}s,  ModelType:%{public}lu, SimilarityListLengthIfApplicable:%{private, location:escape_only}s, ClientID: %{private, location:escape_only}s, LoiGroupId:%{public, location:escape_only}s, hasAnchorStatistics:%{public}hhd}",  v111,  0x4Au);
        if (SHIBYTE(v108) < 0) {
          operator delete(__p);
        }
        uint64_t v9 = v74;
        if (v99 < 0) {
          operator delete(v98[0]);
        }
        if (v124 < 0) {
          operator delete(v122[0]);
        }
        if (SHIBYTE(v101[2]) < 0) {
          operator delete(v101[0]);
        }
      }

      memset(v101, 0, sizeof(v101));
      int v102 = 3;
      char v106 = 0;
      v103[1] = 0LL;
      uint64_t v104 = 0LL;
      v103[0] = 0LL;
      LOBYTE(v105[0]) = 0;
      if (*(_BYTE *)(v9 + 240))
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819BB8);
        }
        uint64_t v27 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v28 = *(uint64_t **)(v9 + 64);
          if (v28)
          {
            uint64_t v29 = 0LL;
            __int128 v30 = *(uint64_t **)(v9 + 64);
            do
            {
              if (*((_DWORD *)v30 + 6) == 1) {
                ++v29;
              }
              __int128 v30 = (uint64_t *)*v30;
            }

            while (v30);
            uint64_t v31 = 0LL;
            uint64_t v32 = *(uint64_t **)(v9 + 64);
            do
            {
              if (*((_DWORD *)v32 + 6) == 5) {
                ++v31;
              }
              uint64_t v32 = (uint64_t *)*v32;
            }

            while (v32);
            uint64_t v33 = 0LL;
            do
            {
              if (*((_DWORD *)v28 + 6) == 6) {
                ++v33;
              }
              __int128 v28 = (uint64_t *)*v28;
            }

            while (v28);
          }

          else
          {
            uint64_t v31 = 0LL;
            uint64_t v29 = 0LL;
            uint64_t v33 = 0LL;
          }

          uint64_t v38 = *(unsigned int *)(*v11 + 4);
          uint64_t v39 = *(void *)(v9 + 72);
          LODWORD(v98[0]) = 1;
          std::stringbuf::string_type v40 = sub_10001A29C(v70, (unsigned int *)v98);
          if (v40) {
            double v41 = *((double *)v40 + 4) - *((double *)v40 + 3);
          }
          else {
            double v41 = 0.0;
          }
          double v42 = *(double *)(v74 + 200);
          int v43 = (int)*(double *)(v74 + 192);
          *(void *)__int128 v111 = 68291075LL;
          *(_WORD *)&v111[8] = 2082;
          *(void *)&v111[10] = "";
          *(_WORD *)&v111[18] = 2049;
          *(void *)&v111[20] = v38;
          __int16 v112 = 2049;
          *(void *)__int128 v113 = v39;
          uint64_t v9 = v74;
          *(_WORD *)&v113[8] = 2049;
          *(void *)&v113[10] = v29;
          *(_WORD *)int v114 = 2049;
          *(void *)&v114[2] = v31;
          *(_WORD *)&v114[10] = 2049;
          *(void *)&v114[12] = v33;
          *(_WORD *)&v114[20] = 2049;
          *(double *)&v114[22] = v41;
          __int16 v115 = 1025;
          int v116 = v43;
          __int16 v117 = 1025;
          v118[0] = (int)v42;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:testFingerprint, ModelType:%{private}lu, size:%{private}lu, NumWiFiMeasur ements:%{private}lu, NumBLEMeasurements:%{private}lu, NumUWBMeasurements:%{private}lu, WiFi RSSI duration_s:%{private}.09f, start:%{private}d, end:%{private}d}",  v111,  0x5Au);
        }

        LOBYTE(v122[0]) = 0;
        char v123 = 0;
        if (*(_BYTE *)(*v11 + 536)) {
          std::string v44 = v122;
        }
        else {
          std::string v44 = 0LL;
        }
        sub_1000CCB00(*v11, v72, *v11 + 416, (uint64_t)v44, 1, (uint64_t)v111);
        if (v101[0])
        {
          v101[1] = v101[0];
          operator delete(v101[0]);
        }

        *(_OWORD *)__int128 v101 = *(_OWORD *)v111;
        v101[2] = *(void **)&v111[16];
        memset(v111, 0, 24);
        int v102 = *(_DWORD *)&v111[24];
        if (v103[0])
        {
          v103[1] = v103[0];
          operator delete(v103[0]);
        }

        *(_OWORD *)__int128 v103 = *(_OWORD *)&v113[2];
        uint64_t v104 = *(void *)v114;
        *(void *)&v113[10] = 0LL;
        *(void *)int v114 = 0LL;
        *(void *)&v113[2] = 0LL;
        sub_10004ABE4((uint64_t)v105, (__n128 *)&v114[8]);
        if ((_BYTE)v116 && *(void *)&v114[8])
        {
          *(void *)&v114[16] = *(void *)&v114[8];
          operator delete(*(void **)&v114[8]);
        }

        if (*(void *)&v113[2])
        {
          *(void *)&v113[10] = *(void *)&v113[2];
          operator delete(*(void **)&v113[2]);
        }

        if (*(void *)v111)
        {
          *(void *)&v111[8] = *(void *)v111;
          operator delete(*(void **)v111);
        }

        LOBYTE(v98[0]) = 0;
        char v100 = 0;
        if (*(_BYTE *)(*v11 + 536))
        {
          if (v123)
          {
            sub_10004886C((void *)(*v11 + 496), v122, v111);
            sub_10004B698((uint64_t)v98, (uint64_t)v111);
            if (v113[10]) {
              sub_10004AD90((uint64_t)v111);
            }
          }
        }

        __int16 v45 = *(uint64_t **)(v9 + 64);
        if (v45)
        {
          uint64_t v46 = 0LL;
          std::string v47 = *(uint64_t **)(v9 + 64);
          do
          {
            if (*((_DWORD *)v47 + 6) == 1) {
              ++v46;
            }
            std::string v47 = (uint64_t *)*v47;
          }

          while (v47);
          uint64_t v48 = 0LL;
          std::string v49 = *(uint64_t **)(v9 + 64);
          do
          {
            if (*((_DWORD *)v49 + 6) == 5) {
              ++v48;
            }
            std::string v49 = (uint64_t *)*v49;
          }

          while (v49);
          uint64_t v50 = 0LL;
          do
          {
            if (*((_DWORD *)v45 + 6) == 6) {
              ++v50;
            }
            __int16 v45 = (uint64_t *)*v45;
          }

          while (v45);
        }

        else
        {
          uint64_t v48 = 0LL;
          uint64_t v46 = 0LL;
          uint64_t v50 = 0LL;
        }

        int v51 = v102;
        if (v102 >= *(_DWORD *)(a4 + 24)) {
          int v51 = *(_DWORD *)(a4 + 24);
        }
        *(_DWORD *)(a4 + 24) = v51;
        std::string v53 = (int *)v103[0];
        uint64_t v52 = (int *)v103[1];
        if (v103[0] != v103[1])
        {
          std::string v54 = *(_DWORD **)(a4 + 40);
          do
          {
            int v55 = *v53;
            std::string v56 = *(_DWORD **)v10;
            std::string v57 = v54;
            if (*(_DWORD **)v10 != v54)
            {
              std::string v57 = *(_DWORD **)v10;
              while (*v57 != v55)
              {
                if (++v57 == v54)
                {
                  std::string v57 = v54;
                  break;
                }
              }
            }

            if (v57 == v54)
            {
              if ((unint64_t)v54 >= *v75)
              {
                uint64_t v59 = v54 - v56;
                unint64_t v60 = v59 + 1;
                uint64_t v61 = *v75 - (void)v56;
                if (v61 >> 1 > v60) {
                  unint64_t v60 = v61 >> 1;
                }
                else {
                  unint64_t v62 = v60;
                }
                if (v62)
                {
                  __int128 v63 = (char *)sub_10000956C((uint64_t)v75, v62);
                  std::string v56 = *(_DWORD **)(a4 + 32);
                  std::string v54 = *(_DWORD **)(a4 + 40);
                }

                else
                {
                  __int128 v63 = 0LL;
                }

                uint64_t v64 = &v63[4 * v59];
                *(_DWORD *)uint64_t v64 = v55;
                uint64_t v58 = v64 + 4;
                while (v54 != v56)
                {
                  int v65 = *--v54;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }

                *(void *)(a4 + 32) = v64;
                *(void *)(a4 + 40) = v58;
                *(void *)(a4 + sub_100019CEC(v39 + 48) = &v63[4 * v62];
                if (v56) {
                  operator delete(v56);
                }
              }

              else
              {
                *std::string v54 = v55;
                uint64_t v58 = v54 + 1;
              }

              *(void *)(a4 + 40) = v58;
              std::string v54 = v58;
            }

            ++v53;
          }

          while (v53 != v52);
        }

        v96 = 0LL;
        uint64_t v97 = 0LL;
        __int128 v95 = 0LL;
        sub_10004B8FC(&v95, v101[0], (uint64_t)v101[1], ((char *)v101[1] - (char *)v101[0]) >> 5);
        *(void *)&__int128 v93 = v46;
        *((void *)&v93 + 1) = v48;
        uint64_t v94 = v50;
        char v66 = sub_1000954BC(*v11);
        sub_10004B7D4((uint64_t)v90, (__int128 *)(*v11 + 368));
        int v67 = *(_DWORD *)(a4 + 24);
        v88 = 0LL;
        uint64_t v89 = 0LL;
        __int128 v87 = 0LL;
        sub_10001B72C( &v87,  *(const void **)(a4 + 32),  *(void *)(a4 + 40),  (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
        uint64_t v9 = v74;
        sub_10004B81C((uint64_t)v111, (uint64_t)&v95, &v93, v66, (__int128 *)v90, (uint64_t)v98, v67, (uint64_t)&v87);
        sub_1000488C0((uint64_t *)a4, (uint64_t)v111, (__int128 *)(*v11 + 352), (uint64_t)v105);
        if (v120)
        {
          __int128 v121 = v120;
          operator delete(v120);
        }

        if (v119) {
          sub_10004AD90((uint64_t)v118 + 2);
        }
        if ((_BYTE)v116 && SHIBYTE(v115) < 0) {
          operator delete(*(void **)&v114[8]);
        }
        if (*(void *)v111)
        {
          *(void *)&v111[8] = *(void *)v111;
          operator delete(*(void **)v111);
        }

        if (v87)
        {
          v88 = v87;
          operator delete(v87);
        }

        if (v92 && v91 < 0) {
          operator delete(v90[0]);
        }
        __int16 v68 = v95;
        if (v95)
        {
          v96 = v95;
          operator delete(v95);
        }

        if (a7) {
          sub_100048A84((uint64_t)v68, (_DWORD *)*v11, (const void **)v101, (uint64_t)v105, v72, v69, (uint64_t)v110);
        }
        if (v100) {
          sub_10004AD90((uint64_t)v98);
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819BB8);
        }
        std::string v34 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = *(unsigned int *)(*v11 + 4);
          *(void *)__int128 v111 = 68289282LL;
          *(_WORD *)&v111[8] = 2082;
          *(void *)&v111[10] = "";
          *(_WORD *)&v111[18] = 2050;
          *(void *)&v111[20] = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocalizationController test fingerprint was not created, ModelType:%{public}lu}",  v111,  0x1Cu);
        }

        uint64_t v85 = 0LL;
        uint64_t v86 = 0LL;
        __int128 v84 = 0LL;
        sub_10004B8FC(&v84, v101[0], (uint64_t)v101[1], ((char *)v101[1] - (char *)v101[0]) >> 5);
        __int128 v82 = 0uLL;
        uint64_t v83 = 0LL;
        char v36 = sub_1000954BC(*v11);
        sub_10004B7D4((uint64_t)v79, (__int128 *)(*v11 + 368));
        LOBYTE(v98[0]) = 0;
        char v100 = 0;
        int v37 = *(_DWORD *)(a4 + 24);
        __int128 v77 = 0LL;
        uint64_t v78 = 0LL;
        std::string::size_type v76 = 0LL;
        sub_10001B72C( &v76,  *(const void **)(a4 + 32),  *(void *)(a4 + 40),  (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
        sub_10004B81C((uint64_t)v111, (uint64_t)&v84, &v82, v36, (__int128 *)v79, (uint64_t)v98, v37, (uint64_t)&v76);
        sub_1000488C0((uint64_t *)a4, (uint64_t)v111, (__int128 *)(*v11 + 352), (uint64_t)v105);
        if (v120)
        {
          __int128 v121 = v120;
          operator delete(v120);
        }

        if (v119) {
          sub_10004AD90((uint64_t)v118 + 2);
        }
        if ((_BYTE)v116 && SHIBYTE(v115) < 0) {
          operator delete(*(void **)&v114[8]);
        }
        if (*(void *)v111)
        {
          *(void *)&v111[8] = *(void *)v111;
          operator delete(*(void **)v111);
        }

        if (v76)
        {
          __int128 v77 = v76;
          operator delete(v76);
        }

        if (v100) {
          sub_10004AD90((uint64_t)v98);
        }
        if (v81 && v80 < 0) {
          operator delete(v79[0]);
        }
        if (v84)
        {
          uint64_t v85 = v84;
          operator delete(v84);
        }
      }

      if (v106 && v105[0])
      {
        v105[1] = v105[0];
        operator delete(v105[0]);
      }

      if (v103[0])
      {
        v103[1] = v103[0];
        operator delete(v103[0]);
      }

      if (v101[0])
      {
        v101[1] = v101[0];
        operator delete(v101[0]);
      }

      v11 += 2;
    }

    while (v11 != v73);
  }

void sub_100048674(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  _Unwind_Resume(a1);
}

char *sub_100048820@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result[24])
  {
    if (result[23] < 0)
    {
      return (char *)sub_1010DD48C((_BYTE *)a3, *(void **)result, *((void *)result + 1));
    }

    else
    {
      *(_OWORD *)a3 = *(_OWORD *)result;
      *(void *)(a3 + 16) = *((void *)result + 2);
    }
  }

  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    *(void *)a2 = 0LL;
  }

  return result;
}

void *sub_10004886C@<X0>(void *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = 0;
  a3[40] = 0;
  double result = sub_10004ACA4(a1, a2);
  if (result) {
    return (void *)sub_10004AC68((uint64_t)a3, (uint64_t)(result + 4));
  }
  return result;
}

void sub_1000488A4(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 40)) {
    sub_10004AD90(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000488C0(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= v10)
  {
    unint64_t v13 = 0x84BDA12F684BDA13LL * ((uint64_t)(v11 - *a1) >> 3);
    if (v13 + 1 > 0x12F684BDA12F684LL) {
      sub_100007008();
    }
    unint64_t v14 = 0x84BDA12F684BDA13LL * ((uint64_t)(v9 - *a1) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13 + 1) {
      uint64_t v15 = v13 + 1;
    }
    if (v14 >= 0x97B425ED097B42LL) {
      unint64_t v16 = 0x12F684BDA12F684LL;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v8;
    if (v16) {
      __int128 v17 = (char *)sub_10004C89C(v8, v16);
    }
    else {
      __int128 v17 = 0LL;
    }
    uint64_t v19 = v17;
    uint64_t v20 = &v17[216 * v13];
    int v22 = &v17[216 * v16];
    sub_10004C700((uint64_t)v20, a2, a3, a4);
    int v21 = v20 + 216;
    sub_10004C828(a1, &v19);
    uint64_t v12 = a1[1];
    sub_10004CBB4(&v19);
  }

  else
  {
    sub_10004C700(*(void *)(v8 - 8), a2, a3, a4);
    uint64_t v12 = v11 + 216;
    a1[1] = v11 + 216;
  }

  a1[1] = v12;
  return v12 - 216;
}

void sub_100048A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100048A1C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }

  if (*(_BYTE *)(a1 + 128)) {
    sub_10004AD90(a1 + 88);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_100048A84(uint64_t a1, _DWORD *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFStringRef v13 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  char v14 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v13, (BOOL *)v35);
  CFRelease(v13);
  int v15 = v35[0];
  unint64_t v16 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    __int128 v17 = (unint64_t *)(v38 + 8);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  if (v15) {
    char v19 = 0;
  }
  else {
    char v19 = v14;
  }
  if ((v19 & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    uint64_t v20 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationLocalizationController, sendLocalizationCoreAnalyticsEvent, not sending event because sending to CoreAnalytics is disabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
      *(_WORD *)uint64_t v35 = 0;
      int v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationLocalizationController, sendLocalizationCoreAnalyticsEvent, not sending event becau se sending to CoreAnalytics is disabled",  v35,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLocalizationController::sendLocalizationCoreAnalyticsEvent(const CLMiLoService::ModelAndConf &, const std::vector<CLMicroLocationResultInternal> &, const std::optional<std::vector<CLMicroLocationResultInt ernal>> &, const CLMicroLocationFingerprint &, const CLMicroLocationProto::RecordingEvent &, const std::optional <cl::chrono::CFAbsoluteTimeClock::time_point> &) const",  "%s\n",  v21);
    }

    return;
  }

  int v22 = sub_100103D24(a6);
  uint64_t v23 = *(uint64_t **)(a5 + 16);
  if (v23)
  {
    uint64_t v24 = 0LL;
    __int128 v25 = v23;
    do
    {
      if (*((_DWORD *)v25 + 6) == 1) {
        ++v24;
      }
      __int128 v25 = (uint64_t *)*v25;
    }

    while (v25);
    uint64_t v26 = 0LL;
    uint64_t v27 = v23;
    do
    {
      if (*((_DWORD *)v27 + 6) == 5) {
        ++v26;
      }
      uint64_t v27 = (uint64_t *)*v27;
    }

    while (v27);
    uint64_t v28 = 0LL;
    do
    {
      if (*((_DWORD *)v23 + 6) == 6) {
        ++v28;
      }
      uint64_t v23 = (uint64_t *)*v23;
    }

    while (v23);
  }

  else
  {
    uint64_t v26 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v28 = 0LL;
  }

  sub_10004A568(a4, a3, buf);
  uint64_t v29 = *(void *)buf;
  if (*(void *)buf != v38)
  {
    double v30 = 0.0;
    uint64_t v31 = 0LL;
    while (1)
    {
      double v32 = *(double *)(v29 + 16);
      if (*(_OWORD *)v29 == 0LL)
      {
        uint64_t v31 = *(void *)(v29 + 16);
      }

      else if (v32 > v30)
      {
        goto LABEL_41;
      }

      double v32 = v30;
LABEL_41:
      v29 += 32LL;
      double v30 = v32;
      if (v29 == v38) {
        goto LABEL_44;
      }
    }
  }

  uint64_t v31 = 0LL;
  double v32 = 0.0;
LABEL_44:
  CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  if (*a2 == 4) {
    std::string v34 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v32);
  }
  else {
    std::string v34 = 0LL;
  }
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_10004A5A4;
  v36[3] = &unk_101819B98;
  v36[6] = v26;
  v36[7] = v28;
  *(double *)&v36[8] = v32;
  v36[9] = a2 + 116;
  v36[10] = v31;
  v36[11] = v24;
  v36[12] = a7;
  *(CFAbsoluteTime *)&v36[13] = Current_1;
  uint64_t v36[4] = v22;
  v36[5] = v34;
  v36[14] = a2 + 92;
  v36[15] = a6;
  AnalyticsSendEventLazy(@"com.apple.MicroLocation.Localization", v36);
  if (*(void *)buf)
  {
    uint64_t v38 = *(void *)buf;
    operator delete(*(void **)buf);
  }

void sub_100048E58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100048E94(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 440);
  if (*(_BYTE *)(a1 + 440))
  {
    uint64_t v7 = a1 + 56;
    int v8 = *(unsigned __int8 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 56);
    if (!v8) {
      *(_BYTE *)(a3 + 16) = 1;
    }
    uint64_t v10 = *a2;
    uint64_t v9 = a2[1];
    v22[0] = *a2;
    v22[1] = v9;
    if (v9)
    {
      unint64_t v11 = (unint64_t *)(v9 + 8);
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }

    __int128 v17 = 0LL;
    unint64_t v18 = 0LL;
    char v19 = 0LL;
    uint64_t v20 = (void **)&v17;
    char v21 = 0;
    CFStringRef v13 = (uint64_t *)operator new(0x10uLL);
    __int128 v17 = v13;
    char v19 = v13 + 2;
    *CFStringRef v13 = v10;
    v13[1] = v9;
    if (v9)
    {
      char v14 = (unint64_t *)(v9 + 8);
      do
        unint64_t v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }

    unint64_t v18 = v13 + 2;
    sub_10000AE14((uint64_t)v22);
    if (!*(_BYTE *)(a1 + 440)) {
      sub_100036CD8();
    }
    sub_100047AF0(a1, v7, &v17, a4, 0LL, 0LL, 0);
    uint64_t v20 = (void **)&v17;
    sub_10004CC28(&v20);
  }

  return v4 != 0;
}

void sub_100048FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  int v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_10004CC28((void ***)va);
  sub_10000AE14((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100049004(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  int v8 = sub_10004790C(a1, a2);
  if ((v8 & 1) == 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    uint64_t v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "LocalizationController doesn't have any valid measurements to use, reporting empty results.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
      v32[0] = 0;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "LocalizationController doesn't have any valid measurements to use, reporting empty results.",  v32,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationLocalizationController::localizationRequestResultsPerModel(const CLMicroLocationLocalization Controller::LocalizationRequest &, const std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>> &, CLMiLoServ iceManager::LocalizationResults &)",  "%s\n",  v26);
    }
  }

  sub_100138214(v29);
  sub_100047688(a2, __p);
  sub_1000865CC(buf);
  BYTE8(v41) = 1;
  v31[0] = 0;
  v31[16] = 0;
  sub_10013A504((uint64_t *)(a1 + 8), (uint64_t)buf, (uint64_t)v31, (unint64_t *)v29, v32);
  if (BYTE8(v41)) {
    sub_100086708(buf);
  }
  if (v36) {
    int v10 = v8;
  }
  else {
    int v10 = 0;
  }
  if (v10 == 1)
  {
    int v11 = v33;
    sub_10004C5F8((char *)__p, v34, v35, (v35 - (uint64_t)v34) >> 2);
  }

  else
  {
    unint64_t v12 = (char *)__p[1];
    if (__p[1] >= v28)
    {
      char v14 = (char *)__p[0];
      int64_t v15 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v16 = v15 + 1;
      uint64_t v17 = v28 - (char *)__p[0];
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        char v19 = (char *)sub_10000956C((uint64_t)&v28, v18);
        char v14 = (char *)__p[0];
        unint64_t v12 = (char *)__p[1];
      }

      else
      {
        char v19 = 0LL;
      }

      uint64_t v20 = &v19[4 * v15];
      char v21 = &v19[4 * v18];
      *(_DWORD *)uint64_t v20 = 3;
      CFStringRef v13 = v20 + 4;
      while (v12 != v14)
      {
        int v22 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v22;
        v20 -= 4;
      }

      __p[0] = v20;
      __p[1] = v13;
      uint64_t v28 = v21;
      if (v14) {
        operator delete(v14);
      }
    }

    else
    {
      *(_DWORD *)__p[1] = 3;
      CFStringRef v13 = v12 + 4;
    }

    int v11 = 0;
    __p[1] = v13;
  }

  sub_100049500(a1 + 56);
  __int128 v47 = 0u;
  memset(v48, 0, 144);
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  memset(v40, 0, sizeof(v40));
  *(_OWORD *)__int128 buf = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  sub_100063A68((uint64_t)v48 + 8);
  sub_100049548(a1 + 56, (uint64_t)buf);
  sub_100086708((char *)v48 + 8);
  sub_10003F6D4((uint64_t)v40);
  if (v38[1])
  {
    *(void **)&__int128 v39 = v38[1];
    operator delete(v38[1]);
  }

  uint64_t v24 = (void *)(a1 + 80);
  uint64_t v23 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 72) = v11;
  if (v23)
  {
    *(void *)(a1 + 88) = v23;
    operator delete(v23);
    *uint64_t v24 = 0LL;
    *(void *)(a1 + 88) = 0LL;
    *(void *)(a1 + 96) = 0LL;
  }

  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(void *)(a1 + 96) = v28;
  __p[1] = 0LL;
  uint64_t v28 = 0LL;
  __p[0] = 0LL;
  sub_10003F724(a1 + 104, (uint64_t)v32);
  sub_100087EC8(a1 + 304, a2);
  if (!*(_BYTE *)(a1 + 440)) {
    sub_100036CD8();
  }
  sub_100047AF0(a1, a1 + 56, a3, a4, *(void *)(a2 + 152), 1LL, 1);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a4 + 24);
  if (v24 != (void *)(a4 + 32)) {
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a4 + 32),  *(void *)(a4 + 40),  (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
  }
  sub_10003F6D4((uint64_t)v32);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return sub_100019CEC((uint64_t)&v30);
}

void sub_100049458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_10003F6D4((uint64_t)va1);
  if (__p) {
    operator delete(__p);
  }
  sub_100019CEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100049500(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 384))
  {
    sub_100086708(a1 + 248);
    sub_10003F6D4(a1 + 48);
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }

    *(_BYTE *)(a1 + 384) = 0;
  }

uint64_t sub_100049548(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 384))
  {
    __int128 v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = v4;
    sub_100007664(a1 + 24, (__n128 *)(a2 + 24));
    sub_10003F724(a1 + 48, a2 + 48);
    sub_100087EC8(a1 + 248, a2 + 248);
  }

  else
  {
    sub_10004CC98(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 384) = 1;
  }

  return a1;
}

uint64_t sub_1000495C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_100049604(void *a1, void *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  if (v9 != v8)
  {
    while (1)
    {
      *(_OWORD *)char v21 = *(_OWORD *)(v9 + 136);
      if (*(void *)v21 == *a2 && *(void *)&v21[8] == a2[1]) {
        break;
      }
      v9 += 192LL;
      if (v9 == v8) {
        goto LABEL_16;
      }
    }
  }

  if (v9 == v8)
  {
LABEL_16:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    uint64_t v15 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *(void *)(v16 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v16);
      *(void *)char v21 = 68289282LL;
      *(_WORD *)&v21[8] = 2082;
      *(void *)&v21[10] = "";
      __int16 v22 = 2082;
      uint64_t v23 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocalizationController, Requested stop for non-existent localization request, Request ID:%{public, location:escape_only}s}",  v21,  0x1Cu);
      operator delete(v16);
    }
  }

  else
  {
    sub_100046E48((void ***)(v9 + 160), 0LL);
    sub_10004752C(v9);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    int v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *(void *)(v12 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v12);
      *(void *)char v21 = 68289282LL;
      *(_WORD *)&v21[8] = 2082;
      *(void *)&v21[10] = "";
      __int16 v22 = 2082;
      uint64_t v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:LocalizationController, Requested stop for localization request, Request ID:%{publi c, location:escape_only}s}",  v21,  0x1Cu);
      operator delete(v12);
    }

    sub_100049004((uint64_t)a1, v9, a3, a4);
    uint64_t v14 = a1[1];
    for (uint64_t i = a1[2]; i != v14; sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(i - 88)))
      ;
    uint64_t v17 = a1[5];
    a1[2] = v14;
    sub_10004CD50(v9 + 192, v17, v9);
    uint64_t v19 = v18;
    for (uint64_t j = a1[5]; j != v19; uint64_t j = sub_100046E74(j - 192))
      ;
    a1[5] = v19;
  }

void sub_1000498AC(_Unwind_Exception *a1)
{
}

void sub_1000498CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v3 + 136);
      if (*(void *)v8 == *a2 && *(void *)&v8[8] == a2[1]) {
        break;
      }
      v3 += 192LL;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }

  if (v3 == v4)
  {
LABEL_10:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    int v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(void *)(v7 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v7);
      *(void *)uint64_t v8 = 68289282LL;
      *(_WORD *)&_WORD v8[8] = 2082;
      *(void *)&v8[10] = "";
      __int16 v9 = 2082;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Requested set Ignore Ble Rssi Measurements for non-existent localization request, Req uest ID:%{public, location:escape_only}s}",  v8,  0x1Cu);
      operator delete(v7);
    }
  }

  else
  {
    *(_DWORD *)(v3 + 128) |= 0x2000u;
    *(_BYTE *)(v3 + 77) = 1;
  }

void sub_100049A38(_Unwind_Exception *a1)
{
}

void sub_100049A4C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v3 + 136);
      if (*(void *)v8 == *a2 && *(void *)&v8[8] == a2[1]) {
        break;
      }
      v3 += 192LL;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }

  if (v3 == v4)
  {
LABEL_10:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    int v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(void *)(v7 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v7);
      *(void *)uint64_t v8 = 68289282LL;
      *(_WORD *)&_WORD v8[8] = 2082;
      *(void *)&v8[10] = "";
      __int16 v9 = 2082;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Requested set Ignore Uwb Range Measurements for non-existent localization request, Re quest ID:%{public, location:escape_only}s}",  v8,  0x1Cu);
      operator delete(v7);
    }
  }

  else
  {
    *(_DWORD *)(v3 + 128) |= 0x800u;
    *(_BYTE *)(v3 + 76) = 1;
  }

void sub_100049BB8(_Unwind_Exception *a1)
{
}

void sub_100049BCC(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v6 + 136);
      if (*(void *)v14 == *a2 && *(void *)&v14[8] == a2[1]) {
        break;
      }
      v6 += 192LL;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
  }

  if (v6 == v7)
  {
LABEL_13:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    int v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *(void *)(v12 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v12);
      *(void *)uint64_t v14 = 68289282LL;
      *(_WORD *)&_WORD v14[8] = 2082;
      *(void *)&v14[10] = "";
      __int16 v15 = 2082;
      uint64_t v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:try to set confidence for non-existent localization request, Request ID:%{public, l ocation:escape_only}s}",  v14,  0x1Cu);
      operator delete(v12);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
    }

    uint64_t v13 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)(v10 + 29) = 0LL;
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      sub_10000AE6C((uint64_t)a2, v10);
      *(void *)uint64_t v14 = 68289282LL;
      *(_WORD *)&_WORD v14[8] = 2082;
      *(void *)&v14[10] = "";
      __int16 v15 = 2082;
      uint64_t v16 = v10;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "try to set confidence for non-existent localization request",  "{msg%{public}.0s:try to set confidence for non-existent localization request, Request ID:%{public, l ocation:escape_only}s}",  v14,  0x1Cu);
      goto LABEL_20;
    }
  }

  else
  {
    sub_100046EB4((void *)v6, a3, a4);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    __int16 v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *(void *)(v10 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v10);
      *(void *)uint64_t v14 = 68289282LL;
      *(_WORD *)&_WORD v14[8] = 2082;
      *(void *)&v14[10] = "";
      __int16 v15 = 2082;
      uint64_t v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:setting confidence in current Localization, Request ID:%{public, location:escape_only}s}",  v14,  0x1Cu);
LABEL_20:
      operator delete(v10);
    }
  }

void sub_100049EB8(_Unwind_Exception *a1)
{
}

void sub_100049EDC(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_100049500(a1 + 56);
  sub_100049500(v1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819BB8);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    int v5 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationLocalizationController, invalidateCache}",  (uint8_t *)v3,  0x12u);
  }

void sub_100049FC4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(v3 + 136);
      if (*(void *)v10 == *a2 && *(void *)&v10[8] == a2[1]) {
        break;
      }
      v3 += 192LL;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }

  if (v3 == v4)
  {
LABEL_10:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(void *)(v7 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v7);
      *(void *)uint64_t v10 = 68289282LL;
      *(_WORD *)&v10[8] = 2082;
      *(void *)&v10[10] = "";
      __int16 v11 = 2082;
      uint64_t v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Requested to remove confidence reason for motion for non-existent localization request, Request ID:%{public, location:escape_only}s}",  v10,  0x1Cu);
      operator delete(v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
    }

    uint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      __int16 v9 = (char *)operator new(0x28uLL);
      *(void *)(v9 + 29) = 0LL;
      *(_OWORD *)__int16 v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      sub_10000AE6C((uint64_t)a2, v9);
      *(void *)uint64_t v10 = 68289282LL;
      *(_WORD *)&v10[8] = 2082;
      *(void *)&v10[10] = "";
      __int16 v11 = 2082;
      uint64_t v12 = v9;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Requested to remove confidence reason for motion for non-existent localization request",  "{msg%{public}.0s:Requested to remove confidence reason for motion for non-existent localization request, Request ID:%{public, location:escape_only}s}",  v10,  0x1Cu);
      operator delete(v9);
    }
  }

  else
  {
    sub_10004A23C(a1, a2, 1u);
  }

void sub_10004A21C(_Unwind_Exception *a1)
{
}

void sub_10004A23C(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)(v6 + 136);
      if (*(void *)v16 == *a2 && *(void *)&v16[8] == a2[1]) {
        break;
      }
      v6 += 192LL;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
  }

  if (v6 == v7)
  {
LABEL_13:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      *(void *)(v13 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v13);
      *(void *)uint64_t v16 = 68289282LL;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = "";
      __int16 v17 = 2082;
      uint64_t v18 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Requested remove confidence reason for non-existent localization request, Request ID :%{public, location:escape_only}s}",  v16,  0x1Cu);
      operator delete(v13);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
    }

    uint64_t v14 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      __int16 v15 = (char *)operator new(0x28uLL);
      *(void *)(v15 + 29) = 0LL;
      *(_OWORD *)__int16 v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      sub_10000AE6C((uint64_t)a2, v15);
      *(void *)uint64_t v16 = 68289282LL;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = "";
      __int16 v17 = 2082;
      uint64_t v18 = v15;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Requested remove confidence reason for non-existent localization request",  "{msg%{public}.0s:Requested remove confidence reason for non-existent localization request, Request ID :%{public, location:escape_only}s}",  v16,  0x1Cu);
      __int16 v11 = v15;
      goto LABEL_20;
    }
  }

  else
  {
    sub_100047474(v6, a3);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819BB8);
    }
    __int16 v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *(void *)(v10 + 29) = 0LL;
      sub_10000AE6C((uint64_t)a2, v10);
      *(void *)uint64_t v16 = 68289538LL;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = "";
      __int16 v17 = 2082;
      uint64_t v18 = v10;
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:removing confidence reason, Request ID:%{public, location:escape_only}s, confiden ce reason:%{public}lu}",  v16,  0x26u);
      __int16 v11 = v10;
LABEL_20:
      operator delete(v11);
    }
  }

void sub_10004A53C(_Unwind_Exception *a1)
{
}

void *sub_10004A568@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  if (v5)
  {
    uint64_t v6 = *(const void **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = (v7 - *(void *)a1) >> 5;
  }

  else
  {
    uint64_t v7 = (uint64_t)a2[1];
    unint64_t v8 = (v7 - (uint64_t)*a2) >> 5;
    uint64_t v6 = *a2;
  }

  return sub_10004B8FC(a3, v6, v7, v8);
}

id sub_10004A5A4(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 48)),  @"bleFingerprintSize");
  if (*(void *)(a1 + 48) >= 0x19uLL) {
    uint64_t v3 = 25LL;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v3),  @"bleFingerprintSizeBounded");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 56)),  @"uwbFingerprintSize");
  if (*(void *)(a1 + 56) >= 0x19uLL) {
    uint64_t v4 = 25LL;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 56);
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v4),  @"uwbFingerprintSizeBounded");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64)),  @"maxClusterProbability");
  int v5 = *(uint64_t **)(a1 + 72);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5),  @"modelType");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 80)),  @"nullspaceClusterProbability");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 88)),  @"wifiFingerprintSize");
  if (*(void *)(a1 + 88) >= 0x64uLL) {
    uint64_t v6 = 100LL;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 88);
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v6),  @"wifiFingerprintSizeBounded");
  [v2 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"localizationTriggerEvent"];
  [v2 setObject:&off_1018D2FF0 forKeyedSubscript:@"localizationTriggerEventCount"];
  uint64_t v7 = *(void *)(a1 + 96);
  if (*(_BYTE *)(v7 + 8)) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 104) - *(double *)v7),  @"localizationRunTime");
  }
  unint64_t v8 = *(const std::string **)(a1 + 112);
  if (v8[1].__r_.__value_.__s.__data_[0])
  {
    sub_100060770(v8, &__p);
    __int16 v9 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9),  @"clientId");
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    [v2 setObject:v10 forKeyedSubscript:@"roiProbability"];
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 120) + 77)),  @"bleRssiSamplesIgnore");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 120) + 76)),  @"uwbRangeSamplesIgnore");
  return v2;
}

void sub_10004A858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004A874(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(double *)(a1 + 24) = sub_101171D4C();
  return a1;
}

void sub_10004A8B4(_Unwind_Exception *exception_object)
{
}

void sub_10004A8D0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t **sub_10004A8FC(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

void *sub_10004A9B4(void *a1, void *a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2 == a3)
  {
    unint64_t v4 = 0LL;
  }

  else
  {
    unint64_t v4 = 0LL;
    int v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }

        while (!v8);
      }

      ++v4;
      int v5 = v7;
    }

    while (v7 != a3);
  }

  sub_10004AA38(a1, a2, a3, v4);
  return a1;
}

void *sub_10004AA38(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_10001B7A4(result, a4);
    return (void *)sub_10004AAA4(v6, a2, a3);
  }

  return result;
}

void sub_10004AA88(_Unwind_Exception *exception_object)
{
  __int128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10004AAA4(uint64_t result, void *a2, void *a3)
{
  __int128 v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      *__int128 v3 = *((_DWORD *)a2 + 7);
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          int v5 = v4;
          unint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          int v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }

        while (!v6);
      }

      ++v3;
      a2 = v5;
    }

    while (v5 != a3);
  }

  *(void *)(result + 8) = v3;
  return result;
}

void sub_10004AAFC(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 < a2)
  {
    unint64_t v4 = *(void **)a1;
    int v5 = 2 * v2;
    if (v5 <= a2) {
      int v5 = a2;
    }
    if (v5 <= 4) {
      int v5 = 4;
    }
    *(_DWORD *)(a1 + 12) = v5;
    BOOL v6 = operator new[](4LL * v5);
    *(void *)a1 = v6;
    if (v4)
    {
      memcpy(v6, v4, 4LL * *(int *)(a1 + 8));
      operator delete[](v4);
    }
  }

void sub_10004AB74(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 88));
      while (v4 != v2);
      int v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

__n128 sub_10004ABE4(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24)) {
      result.n128_u64[0] = sub_100007664(a1, a2).n128_u64[0];
    }
  }

  else if (*(_BYTE *)(a1 + 24))
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }

    *(_BYTE *)(a1 + 24) = 0;
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0LL;
    a2->n128_u64[1] = 0LL;
    a2[1].n128_u64[0] = 0LL;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

uint64_t sub_10004AC68(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    a1 = sub_10004AD90(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }

  uint64_t result = sub_10004AE0C(a1, a2);
  *(_BYTE *)(result + 40) = 1;
  return result;
}

void *sub_10004ACA4(void *a1, void *a2)
{
  unint64_t v2 = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    v2 ^= (v2 << 6) + (v2 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0LL;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v2;
    if (v2 >= *(void *)&v4) {
      unint64_t v6 = v2 % *(void *)&v4;
    }
  }

  else
  {
    unint64_t v6 = (*(void *)&v4 - 1LL) & v2;
  }

  int v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0LL;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v2 == v9)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }

      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }

        else
        {
          v9 &= *(void *)&v4 - 1LL;
        }

        if (v9 != v6) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t sub_10004AD90(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10004ADC8(int a1, void **__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      __int128 v3 = (void **)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_10004AE0C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100019E10(a1, *(void *)(a2 + 8));
  return a1;
}

void sub_10004AE68(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_10004AE80(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100022A24(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10004B0FC(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100019E10(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_10004B0D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10004B64C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10004B0FC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(v9, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }

  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10004B188(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_10004B64C(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_10004B1A4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }

  return sub_10004B1E0((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_10004B1E0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      __int16 v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return sub_10004B58C(a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return sub_10004B4E0(a2, a3);
  }

  else
  {
    return sub_10004B3E8(a2, a3);
  }

unint64_t sub_10004B3E8(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t sub_10004B4E0(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_10004B58C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_10004B64C(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10004B698(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40)) {
      sub_10004B6E0(a1, (uint64_t *)a2);
    }
  }

  else if (*(_BYTE *)(a1 + 40))
  {
    *(_BYTE *)(sub_10004AD90(a1) + 40) = 0;
  }

  else
  {
    *(_BYTE *)(sub_10001B9CC(a1, (uint64_t *)a2) + 40) = 1;
  }

void sub_10004B6E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0LL;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }

    else
    {
      v11 &= v12 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
  }

void sub_10004B780(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10004ADC8(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

uint64_t sub_10004B7D4(uint64_t a1, __int128 *a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  sub_100036D54((_OWORD *)a1, a2);
  return a1;
}

void sub_10004B800(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24)) {
    sub_1012241B4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004B81C( uint64_t a1, uint64_t a2, __int128 *a3, char a4, __int128 *a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  __int128 v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  *(_BYTE *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + sub_100019CEC(v39 + 48) = a4;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a5 + 24))
  {
    __int128 v13 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v13;
    *((void *)a5 + 1) = 0LL;
    *((void *)a5 + 2) = 0LL;
    *(void *)a5 = 0LL;
    *(_BYTE *)(a1 + 80) = 1;
  }

  *(_BYTE *)(a1 + 88) = 0;
  uint64_t v14 = a1 + 88;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a6 + 40))
  {
    sub_10001B9CC(v14, (uint64_t *)a6);
    *(_BYTE *)(a1 + 128) = 1;
  }

  *(_DWORD *)(a1 + 136) = a7;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a8;
  *(void *)(a1 + 160) = *(void *)(a8 + 16);
  *(void *)a8 = 0LL;
  *(void *)(a8 + 8) = 0LL;
  *(void *)(a8 + 16) = 0LL;
  return a1;
}

void *sub_10004B8FC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    unint64_t result = sub_10004B974(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10004B958(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10004B974(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_100007008();
  }
  unint64_t result = (char *)sub_10000835C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void **sub_10004B9B4(void **a1)
{
  double v2 = sub_101171D4C();
  double v3 = *((double *)a1 + 3);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819BB8);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1;
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    __int128 v11 = v5;
    __int16 v12 = 2050;
    double v13 = v2 - v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:TimeProfile, action:%{public, location:escape_only}s, durationSecs:%{public}f}",  (uint8_t *)v7,  0x26u);
  }

  return a1;
}

void sub_10004BADC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

__n128 sub_10004BAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_1000865CC(v4);
  __int128 v5 = *(_OWORD *)(a2 + 136);
  *(void *)(v4 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(v4 + 136) = v5;
  uint64_t v6 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0LL;
  *(void *)(v4 + 160) = v6;
  *(void *)(v4 + 168) = 0LL;
  *(void *)(v4 + 176) = 0LL;
  *(void *)(v4 + 184) = 0LL;
  __n128 result = *(__n128 *)(a2 + 168);
  *(__n128 *)(v4 + 168) = result;
  *(void *)(v4 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  *(void *)(a1 + 8) = v4 + 192;
  return result;
}

void sub_10004BB5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10004BB64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555LL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555LL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v20 = a1 + 2;
  if (v9) {
    __int16 v10 = (char *)sub_10001DF10(v7, v9);
  }
  else {
    __int16 v10 = 0LL;
  }
  unint64_t v16 = v10;
  uint64_t v17 = &v10[192 * v4];
  uint64_t v18 = v17;
  uint64_t v19 = &v10[192 * v9];
  sub_1000865CC(v17);
  __int128 v11 = v17;
  __int128 v12 = *(_OWORD *)(a2 + 136);
  *((void *)v17 + 19) = *(void *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0LL;
  *((void *)v11 + 20) = v13;
  *((void *)v11 + 21) = 0LL;
  *((void *)v11 + 22) = 0LL;
  *((void *)v11 + 23) = 0LL;
  *(_OWORD *)(v11 + 168) = *(_OWORD *)(a2 + 168);
  *((void *)v11 + 23) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  v18 += 192;
  sub_10004BCA8(a1, &v16);
  uint64_t v14 = a1[1];
  sub_10004BDF0((uint64_t)&v16);
  return v14;
}

void sub_10004BC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10004BCA8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10004BD1C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10004BD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      sub_1000865CC(a7 + v11 - 192);
      __int128 v14 = *(_OWORD *)(a3 + v11 - 56);
      *(void *)(v12 - 40) = *(void *)(a3 + v11 - 40);
      *(_OWORD *)(v12 - 56) = v14;
      uint64_t v15 = *(void *)(a3 + v11 - 32);
      *(void *)(v13 - 32) = 0LL;
      *(void *)(v12 - 32) = v15;
      *(void *)(v12 - 24) = 0LL;
      *(void *)(v12 - 16) = 0LL;
      *(void *)(v12 - 8) = 0LL;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v12 - 8) = *(void *)(a3 + v11 - 8);
      *(void *)(v13 - 24) = 0LL;
      *(void *)(v13 - 16) = 0LL;
      *(void *)(v13 - 8) = 0LL;
      v11 -= 192LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_10004BDD0(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 192LL)
    sub_100046E74(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004BDF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    sub_100046E74(i - 192);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10004BE3C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 88 * a5;
      }

      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_10004C190(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }

      sub_10004C048((uint64_t)a1, v5, v12, v5 + 88 * a5);
      sub_10004C2A0(v7, v21, v5);
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL) {
        sub_100007008();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3LL * ((a2 - v13) >> 3);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3LL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_100023598(v9, v18);
      }
      else {
        uint64_t v19 = 0LL;
      }
      __int16 v22 = &v19[88 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[88 * v18];
      uint64_t v23 = 88 * a5;
      unint64_t v24 = &v22[88 * a5];
      do
      {
        sub_100068220(v22, v7);
        *((_DWORD *)v22 + 20) = *(_DWORD *)(v7 + 80);
        v22 += 88;
        v7 += 88LL;
        v23 -= 88LL;
      }

      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = sub_10004C0E0(a1, v26, v5);
      sub_10004C440((uint64_t)v26);
    }
  }

  return v5;
}

void sub_10004C01C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C048(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_100068220(v8, v10);
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v10 + 80);
      v10 += 88LL;
      v8 += 88LL;
    }

    while (v10 < a3);
  }

  *(void *)(a1 + 8) = v8;
  return sub_10004C224(a2, v7, v6);
}

void sub_10004C0D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10004C0E0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_10004C308((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10004C3AC(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10004C190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(_DWORD *)(sub_100068220(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_10004C200(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      sub_100069010(a3 - 88, v6 - 88);
      *(_DWORD *)(a3 - 8) = *(_DWORD *)(v6 - 8);
      a3 -= 88LL;
      v6 -= 88LL;
    }

    while (v6 != a1);
  }

  return a2;
}

uint64_t sub_10004C2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    sub_100069010(a3, v4);
    *(_DWORD *)(a3 + 80) = *(_DWORD *)(v4 + 80);
    a3 += 88LL;
    v4 += 88LL;
  }

  while (v4 != v5);
  return v5;
}

uint64_t sub_10004C308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      sub_100068220(a7 + v11 - 88, a3 + v11 - 88);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 88LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_10004C38C(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 88LL)
    sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(_DWORD *)(sub_100068220(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_10004C41C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10004C440(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(i - 88));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_10004C48C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10004C510(result, a4);
    uint64_t result = (void *)sub_10004C564((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_10004C4F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10004AB74(&a9);
  _Unwind_Resume(a1);
}

char *sub_10004C510(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_100007008();
  }
  uint64_t result = (char *)sub_100023598((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t sub_10004C564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      *(_DWORD *)(sub_100068220(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_10004C5D4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1000682D0((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10004C5F8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      _DWORD v7[2] = 0LL;
    }

    if (a4 >> 62) {
      sub_100007008();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10001B7A4(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }

uint64_t sub_10004C700(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  __int128 v8 = *(_OWORD *)(a2 + 24);
  __int128 v9 = *(_OWORD *)(a2 + 33);
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 33) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    __int128 v10 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v10;
    *(void *)(a2 + 64) = 0LL;
    *(void *)(a2 + 72) = 0LL;
    *(void *)(a2 + 56) = 0LL;
    *(_BYTE *)(a1 + 80) = 1;
  }

  *(_BYTE *)(a1 + 88) = 0;
  uint64_t v11 = a1 + 88;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    sub_10001B9CC(v11, (uint64_t *)(a2 + 88));
    *(_BYTE *)(a1 + 128) = 1;
  }

  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0LL;
  *(void *)(a2 + 152) = 0LL;
  *(void *)(a2 + 160) = 0LL;
  __int128 v12 = *a3;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    *(void *)(a1 + 184) = 0LL;
    *(void *)(a1 + 192) = 0LL;
    *(void *)(a1 + 200) = 0LL;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)a4;
    *(void *)(a1 + 200) = *(void *)(a4 + 16);
    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
    *(_BYTE *)(a1 + 208) = 1;
  }

  return a1;
}

uint64_t sub_10004C828(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10004C8E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10004C89C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685LL) {
    sub_1000070D4();
  }
  return operator new(216 * a2);
}

uint64_t sub_10004C8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 216LL;
      sub_10004C998(a1, v7 - 216, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 216LL;
      *((void *)&v16 + 1) -= 216LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_10004CAAC((uint64_t)v13);
  return v11;
}

__n128 sub_10004C998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  __int128 v5 = *(_OWORD *)(a3 + 24);
  __int128 v6 = *(_OWORD *)(a3 + 33);
  *(_BYTE *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 33) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 80) = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    __int128 v7 = *(_OWORD *)(a3 + 56);
    *(void *)(a2 + 72) = *(void *)(a3 + 72);
    *(_OWORD *)(a2 + 56) = v7;
    *(void *)(a3 + 64) = 0LL;
    *(void *)(a3 + 72) = 0LL;
    *(void *)(a3 + 56) = 0LL;
    *(_BYTE *)(a2 + 80) = 1;
  }

  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  if (*(_BYTE *)(a3 + 128))
  {
    sub_10001B9CC(a2 + 88, (uint64_t *)(a3 + 88));
    *(_BYTE *)(a2 + 128) = 1;
  }

  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
  *(void *)(a2 + 152) = 0LL;
  *(void *)(a2 + 160) = 0LL;
  *(void *)(a2 + 144) = 0LL;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  *(void *)(a3 + 152) = 0LL;
  *(void *)(a3 + 160) = 0LL;
  *(void *)(a3 + 144) = 0LL;
  __n128 result = *(__n128 *)(a3 + 168);
  *(_BYTE *)(a2 + 184) = 0;
  *(__n128 *)(a2 + 168) = result;
  *(_BYTE *)(a2 + 208) = 0;
  if (*(_BYTE *)(a3 + 208))
  {
    *(void *)(a2 + 184) = 0LL;
    *(void *)(a2 + 192) = 0LL;
    *(void *)(a2 + 200) = 0LL;
    __n128 result = *(__n128 *)(a3 + 184);
    *(__n128 *)(a2 + 184) = result;
    *(void *)(a2 + 200) = *(void *)(a3 + 200);
    *(void *)(a3 + 184) = 0LL;
    *(void *)(a3 + 192) = 0LL;
    *(void *)(a3 + 200) = 0LL;
    *(_BYTE *)(a2 + 208) = 1;
  }

  return result;
}

uint64_t sub_10004CAAC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10004CAE0((uint64_t *)a1);
  }
  return a1;
}

void sub_10004CAE0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10004CB30(v3, v1);
      v1 += 216LL;
    }

    while (v1 != v2);
  }

void sub_10004CB30(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 208))
  {
    uint64_t v3 = *(void **)(a2 + 184);
    if (v3)
    {
      *(void *)(a2 + 192) = v3;
      operator delete(v3);
    }
  }

  uint64_t v4 = *(void **)(a2 + 144);
  if (v4)
  {
    *(void *)(a2 + 152) = v4;
    operator delete(v4);
  }

  if (*(_BYTE *)(a2 + 128)) {
    sub_10004AD90(a2 + 88);
  }
  __int128 v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }

void **sub_10004CBB4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10004CBE4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 216;
    sub_10004CB30(v4, i - 216);
  }

void sub_10004CC28(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10000AE14(v4 - 16);
      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10004CC98(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0LL;
  *((void *)a2 + 5) = 0LL;
  *(_BYTE *)(a1 + sub_100019CEC(v39 + 48) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (*((_BYTE *)a2 + 240))
  {
    sub_10003F828(a1 + 48, (uint64_t)(a2 + 3));
    *(_BYTE *)(a1 + 240) = 1;
  }

  sub_1000865CC(a1 + 248);
  return a1;
}

void sub_10004CD2C(_Unwind_Exception *a1)
{
  __int128 v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10004CD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10004CDAC(a3, v4);
      v4 += 192LL;
      a3 += 192LL;
    }

    while (v4 != a2);
    return a2;
  }

  return v4;
}

uint64_t sub_10004CDAC(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  __int128 v5 = *(void ***)(a2 + 160);
  *(void *)(a2 + 160) = 0LL;
  sub_100046E48((void ***)(a1 + 160), v5);
  sub_100007664(a1 + 168, (__n128 *)(a2 + 168));
  return a1;
}

void *sub_10004CE00(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = &off_101819BE8;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void sub_10004CE2C(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934B90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934B90))
  {
    sub_1000508FC((std::string *)&xmmword_101934B78);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934B78, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934B90);
  }

  if (byte_101934B8F < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934B78, *((unint64_t *)&xmmword_101934B78 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934B78;
    *(void *)(a1 + 16) = unk_101934B88;
  }

void sub_10004CEDC(_Unwind_Exception *a1)
{
}

void sub_10004CEF4(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934BB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934BB0))
  {
    sub_100050B58((std::string *)&xmmword_101934B98);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934B98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934BB0);
  }

  if (byte_101934BAF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934B98, *((unint64_t *)&xmmword_101934B98 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934B98;
    *(void *)(a1 + 16) = unk_101934BA8;
  }

void sub_10004CFA4(_Unwind_Exception *a1)
{
}

uint64_t sub_10004CFBC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = *(void *)(a3 + 8);
  __int128 v6 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((void *)a2 + 1) = 0LL;
  *((void *)a2 + 2) = 0LL;
  *(void *)a2 = 0LL;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = *(_DWORD *)(a3 + 40);
  sub_10008C06C(a1 + 56, a3);
  return a1;
}

void sub_10004D020(_Unwind_Exception *exception_object)
{
}

void sub_10004D040(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_10004D460(a1);
    sub_1003B59A0(*a1, "MicroLocationConfiguration", (const char **)&off_101819C60, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MicroLocationConfiguration");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      __int128 v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int128 v12 = "MicroLocationConfiguration";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819C40);
        }
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %s",  &v9);
LABEL_19:
        __int128 v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationConfigurationTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      uint64_t v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        __int128 v12 = "MicroLocationConfiguration";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819C40);
        }
        int v9 = 136446210;
        __int128 v10 = "MicroLocationConfiguration";
        __int128 v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMicroLocationConfigurationTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819C40);
    }
    __int128 v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Database is not connected so we can't intialize our table");
      goto LABEL_19;
    }
  }

uint64_t sub_10004D434(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10004D040((uint64_t *)a1);
  return a1;
}

uint64_t sub_10004D460(uint64_t *a1)
{
  uint64_t result = sub_1003B747C(*a1, "MicroLocationConfiguration");
  if ((_DWORD)result) {
    return sub_10000C98C(*a1, (uint64_t)&off_101819C60, 6LL, "MicroLocationConfiguration");
  }
  return result;
}

uint64_t sub_10004D4B4(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993A27 >= 0) {
      uint64_t v5 = (char *)&xmmword_101993A10;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993A10;
    }
    sub_1003C0D54(v4, v5, &v36);
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      while (1)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v36);
        double v9 = *(double *)v7;
        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v7 + 56, &v33);
        if (*(_BYTE *)(v7 + 32))
        {
LABEL_7:
          memset(&__p, 0, sizeof(__p));
          if ((sub_100013090(v7 + 32, &__p) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&buf);
            *(void *)&__int128 buf = &off_101818CB0;
            sub_1000139B0((uint64_t)&buf);
          }
        }

        else
        {
          uint64_t v10 = 33LL;
          while (v10 != 48)
          {
            if (*(unsigned __int8 *)(v7 + v10++))
            {
              break;
            }
          }

          sub_1010DDBC0(&__p, "");
        }

        __int128 v12 = v35 >= 0 ? &v33 : (void **)v33;
        uint64_t v13 = v35 >= 0 ? HIBYTE(v35) : v34;
        char v14 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v12, v13);
        if (!sub_1003B7480(v8, 1, v9)) {
          break;
        }
        __int128 v15 = (char *)(v7 + 8);
        if (!sub_1003BC1F0(v8, 2, v15) || !sub_1003C28BC(v8, 3, *(_DWORD *)(v7 + 48)) || !sub_1003C2F58(v8, 4, v14)) {
          break;
        }
        __int128 v16 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101819C40);
          }
          uint64_t v21 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993A27 >= 0) {
              __int16 v22 = &xmmword_101993A10;
            }
            else {
              __int16 v22 = (__int128 *)xmmword_101993A10;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101819C40);
            }
            if (byte_101993A27 >= 0) {
              uint64_t v23 = &xmmword_101993A10;
            }
            else {
              uint64_t v23 = (__int128 *)xmmword_101993A10;
            }
            int v37 = 136446210;
            unint64_t v38 = v23;
            LODWORD(v31) = 12;
            unint64_t v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v37,  v31);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)",  "%s\n",  v24);
          }

LABEL_41:
          uint64_t v17 = 0LL;
          goto LABEL_42;
        }

        uint64_t v17 = 1LL;
LABEL_42:
        if (SHIBYTE(v35) < 0) {
          operator delete(v33);
        }
        v7 += 112LL;
        if (v7 == v6) {
          char v20 = 0;
        }
        else {
          char v20 = v17;
        }
        if ((v20 & 1) == 0) {
          goto LABEL_80;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      unint64_t v18 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993A27 >= 0) {
          uint64_t v19 = &xmmword_101993A10;
        }
        else {
          uint64_t v19 = (__int128 *)xmmword_101993A10;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819C40);
        }
        if (byte_101993A27 >= 0) {
          uint64_t v25 = &xmmword_101993A10;
        }
        else {
          uint64_t v25 = (__int128 *)xmmword_101993A10;
        }
        int v37 = 136380675;
        unint64_t v38 = v25;
        LODWORD(v31) = 12;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v37,  v31);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)",  "%s\n",  v26);
      }

      sqlite3_reset(v8);
      goto LABEL_41;
    }

    uint64_t v17 = 1LL;
LABEL_80:
    uint64_t v28 = v36;
    uint64_t v36 = 0LL;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819C40);
    }
    uint64_t v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      LOWORD(v33) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v33,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)",  "%s\n",  v30);
    }

    return 0LL;
  }

  return v17;
}

          uint64_t v11 = (_BYTE *)*((void *)this + 1);
          uint64_t v23 = (_BYTE *)*((void *)this + 2);
        }

        while (v11 < v23 && *v11 == 17);
        if (v11 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    uint64_t v8 = TagFallback & 7;
LABEL_21:
    if (v8 == 4) {
      return 1LL;
    }
  }

  uint64_t v8 = TagFallback & 7;
  if (v8 == 1) {
    goto LABEL_25;
  }
  if (v8 != 2) {
    goto LABEL_21;
  }
  uint64_t result = sub_10006E130(this, v5);
  if ((_DWORD)result) {
    goto LABEL_41;
  }
  return result;
}

  char v14 = *(void *)(v5 + 64);
  if (!v14) {
    char v14 = *(void *)(qword_1019A0980 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v14,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }

      char v66 = v7;
      ++v4;
    }

    while (v4 != v5);
  }

  uint64_t v72 = 0uLL;
  uint64_t v73 = 0LL;
  unint64_t v24 = *(_DWORD *)(a1 + 40);
  uint64_t v25 = *(_DWORD *)(a1 + 64);
  LODWORD(v26) = v24;
  if (v24 != v25)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
    uint64_t v27 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      __int128 buf = 68289026LL;
      __int128 v75 = 2082;
      std::string::size_type v76 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - size of confidences doesn't equal event number, setting all event's confidence to invalid}",  (uint8_t *)&buf,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
    }

    uint64_t v28 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      __int128 buf = 68289026LL;
      __int128 v75 = 2082;
      std::string::size_type v76 = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLMicroLocationSimilarityListData fromProtobuf - size of confidences doesn't equal event number, setting all eve nt's confidence to invalid",  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - size of confidences doesn't equal event number, setting all event's confidence to invalid}",  (uint8_t *)&buf,  0x12u);
    }

    LODWORD(v26) = *(_DWORD *)(a1 + 40);
  }

  if ((int)v26 >= 1)
  {
    uint64_t v29 = 0LL;
    do
    {
      if (v29 >= (int)v26)
      {
        uint64_t v30 = wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( &buf,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents/D eveloper/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/google /protobuf/repeated_field.h",  825LL);
        uint64_t v31 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v30,  "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&__p, v31);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&buf);
      }

      sub_1001014F0(*(uint64_t ***)(*(void *)(*(void *)(a1 + 32) + 8 * v29) + 8LL), &v68);
      if (v69)
      {
        __int128 v70 = v68;
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CB88);
        }
        uint64_t v32 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          __int128 buf = 68289026LL;
          __int128 v75 = 2082;
          std::string::size_type v76 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - invalid LabelUuid conversion!}",  (uint8_t *)&buf,  0x12u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CB88);
          }
        }

        uint64_t v33 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          __int128 buf = 68289026LL;
          __int128 v75 = 2082;
          std::string::size_type v76 = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLMicroLocationSimilarityListData fromProtobuf - invalid LabelUuid conversion!",  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - invalid LabelUuid conversion!}",  (uint8_t *)&buf,  0x12u);
        }

        __int128 v70 = 0uLL;
      }

      if (v24 == v25)
      {
        if (v29 >= *(int *)(a1 + 64))
        {
          uint64_t v34 = wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( &buf,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents /Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/go ogle/protobuf/repeated_field.h",  614LL);
          uint64_t v35 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v34,  "CHECK failed: (index) < (size()): ");
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&__p, v35);
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&buf);
        }

        uint64_t v36 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * v29);
      }

      else
      {
        uint64_t v36 = 0;
      }

      __int128 v71 = v36;
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
      int v37 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v38 = operator new(0x28uLL);
        std::string __p = v38;
        uint64_t v64 = xmmword_1012C8460;
        *unint64_t v38 = 0u;
        v38[1] = 0u;
        *(void *)((char *)v38 + 29) = 0LL;
        sub_10000AE6C((uint64_t)&v70, v38);
        p_p = &__p;
        if (v64 < 0) {
          p_p = __p;
        }
        __int128 buf = 68289794LL;
        __int128 v75 = 2082;
        std::string::size_type v76 = "";
        __int128 v77 = 1026;
        uint64_t v78 = v29;
        __int128 v79 = 2082;
        char v80 = p_p;
        char v81 = 1026;
        __int128 v82 = v71;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf, listElementInx:%{public}d, even t label:%{public, location:escape_only}s, confidence level:%{public}d}",  (uint8_t *)&buf,  0x28u);
        if (SHIBYTE(v64) < 0) {
          operator delete(__p);
        }
      }

      unint64_t v40 = (_OWORD *)*((void *)&v72 + 1);
      if (*((void *)&v72 + 1) >= (unint64_t)v73)
      {
        __int128 v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v72 + 1) - v72) >> 2);
        __int128 v44 = v43 + 1;
        if (v43 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          sub_100007008();
        }
        else {
          __int128 v45 = v44;
        }
        if (v45) {
          __int128 v46 = (char *)sub_10009D074((uint64_t)&v73, v45);
        }
        else {
          __int128 v46 = 0LL;
        }
        __int128 v47 = &v46[20 * v43];
        uint64_t v48 = v70;
        *((_DWORD *)v47 + 4) = v71;
        *(_OWORD *)__int128 v47 = v48;
        std::string v49 = (char *)*((void *)&v72 + 1);
        uint64_t v50 = (char *)v72;
        int v51 = v47;
        if (*((void *)&v72 + 1) != (void)v72)
        {
          do
          {
            uint64_t v52 = *(_OWORD *)(v49 - 20);
            *((_DWORD *)v51 - 1) = *((_DWORD *)v49 - 1);
            *(_OWORD *)(v51 - 20) = v52;
            v51 -= 20;
            v49 -= 20;
          }

          while (v49 != v50);
          std::string v49 = (char *)v72;
        }

        __int128 v42 = v47 + 20;
        *(void *)&uint64_t v72 = v51;
        *((void *)&v72 + 1) = v47 + 20;
        uint64_t v73 = &v46[20 * v45];
        if (v49) {
          operator delete(v49);
        }
      }

      else
      {
        unint64_t v41 = v70;
        *(_DWORD *)(*((void *)&v72 + 1) + 16LL) = v71;
        *unint64_t v40 = v41;
        __int128 v42 = (char *)v40 + 20;
      }

      *((void *)&v72 + 1) = v42;
      ++v29;
      uint64_t v26 = *(int *)(a1 + 40);
    }

    while (v29 < v26);
  }

  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + sub_100019CEC(v39 + 48) = 0;
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 80) = 0LL;
  *(_BYTE *)(a2 + 104) = 0;
  sub_1000977A8(a2, (unint64_t **)&v65, (uint64_t *)&v72);
  LODWORD(v53) = *(_DWORD *)(a1 + 40);
  if ((int)v53 >= 1)
  {
    std::string v54 = 0LL;
    do
    {
      if (v54 >= (int)v53)
      {
        int v55 = wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( &buf,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents/D eveloper/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/google /protobuf/repeated_field.h",  825LL);
        std::string v56 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v55,  "CHECK failed: (index) < (size()): ");
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&__p, v56);
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&buf);
      }

      std::string v57 = *(void *)(*(void *)(a1 + 32) + 8 * v54);
      uint64_t v58 = *(int *)(v57 + 24);
      if (v58 != (v66 - (_BYTE *)v65) >> 4)
      {
        sub_10122840C();
        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationModel.mm",  890,  "fromProtobuf");
        __break(1u);
      }

      if ((int)v58 >= 1)
      {
        for (uint64_t i = 0LL; i < v58; ++i)
        {
          if (i >= (int)v58)
          {
            unint64_t v60 = wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( &buf,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Conten ts/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/includ e/google/protobuf/repeated_field.h",  614LL);
            uint64_t v61 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v60,  "CHECK failed: (index) < (size()): ");
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&__p, v61);
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&buf);
          }

          sub_100093B0C(a2 + 48, v54, i, *(double *)(*(void *)(v57 + 16) + 8 * i));
          uint64_t v58 = *(int *)(v57 + 24);
        }
      }

      ++v54;
      std::string v53 = *(int *)(a1 + 40);
    }

    while (v54 < v53);
  }

  if ((void)v72)
  {
    *((void *)&v72 + 1) = v72;
    operator delete((void *)v72);
  }

  if (v65)
  {
    char v66 = (char *)v65;
    operator delete(v65);
  }

  uint64_t v19 = 2LL;
LABEL_43:
  __int128 v43 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v44
  __int128 v45 = v38;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v47);
  return v19;
}

  if ((v5 & 0xFF0000) == 0) {
    goto LABEL_51;
  }
  if ((v5 & 0x10000) != 0)
  {
    unint64_t v18 = *(void *)(a2 + 112);
    *(_DWORD *)(a1 + 228) |= 0x10000u;
    *(void *)(a1 + 112) = v18;
    uint64_t v5 = *(_DWORD *)(a2 + 228);
    if ((v5 & 0x20000) == 0)
    {
LABEL_44:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_61;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_44;
  }

  uint64_t v19 = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 228) |= 0x20000u;
  *(void *)(a1 + 120) = v19;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x40000) == 0)
  {
LABEL_45:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_62;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  (int)a2,  *(double *)(v5 + 128),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  (int)a2,  *(double *)(v5 + 144),  a3);
  }

  uint64_t result = *(double *)(a2 + 104);
  *(_DWORD *)(a1 + 124) |= 0x2000u;
  *(double *)(a1 + 104) = result;
  if ((*(_DWORD *)(a2 + 124) & 0x4000) != 0)
  {
LABEL_21:
    uint64_t result = *(double *)(a2 + 112);
    *(_DWORD *)(a1 + 124) |= 0x4000u;
    *(double *)(a1 + 112) = result;
  }

  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  char v20 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 84) |= 0x400u;
  *(_DWORD *)(a1 + 56) = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  uint64_t v19 = 2LL;
LABEL_43:
  unint64_t v40 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v41
  __int128 v42 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v44);
  return v19;
}

  self->_container = -[CKContainer initWithContainerID:]( [CKContainer alloc],  "initWithContainerID:",   [[CKContainerID alloc] initWithContainerIdentifier:@"com.apple.vo2max" environment:1]);
  -[NSNotificationCenter addObserver:selector:name:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "addObserver:selector:name:object:",  self,  "cloudKitAccountDidChange:",  CKAccountChangedNotification,  0LL);
  sub_100ACD980((uint64_t)sub_100283508, (uint64_t)self, self, buf);
  uint64_t v33 = *(Client **)buf;
  *(void *)__int128 buf = 0LL;
  uint64_t v34 = self->fDataProtectionClient.__ptr_.__value_;
  self->fDataProtectionClient.__ptr_.__value_ = v33;
  if (v34)
  {
    (*(void (**)(Client *))(*(void *)v34 + 8LL))(v34);
    uint64_t v35 = *(void *)buf;
    *(void *)__int128 buf = 0LL;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
    }
  }

  sub_10060B0A4((uint64_t)sub_100283518, (uint64_t)self, -[CLVO2MaxCloudKitManager universe](self, "universe"), buf);
  uint64_t v36 = *(Client **)buf;
  *(void *)__int128 buf = 0LL;
  int v37 = self->fFitnessTrackingClient.__ptr_.__value_;
  self->fFitnessTrackingClient.__ptr_.__value_ = v36;
  if (v37)
  {
    (*(void (**)(Client *))(*(void *)v37 + 8LL))(v37);
    unint64_t v38 = *(void *)buf;
    *(void *)__int128 buf = 0LL;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
    }
  }

  self->fCloudKitDeletionState = 0;
  -[CLVO2MaxCloudKitManager validateAccount](self, "validateAccount");
  -[CLVO2MaxCloudKitManager resetDailyStats](self, "resetDailyStats");
  self->fDailyStatsTimerInterval = 86400.0;
}

  __int128 v103 = v32;
  if (a7 > 0.0)
  {
    if ((unint64_t)v32 >= v20)
    {
      __int128 v42 = __p;
      __int128 v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)__p) >> 3) + 1;
      if (v43 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      __int128 v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)__p) >> 3);
      if (2 * v44 > v43) {
        __int128 v43 = 2 * v44;
      }
      if (v44 >= 0x555555555555555LL) {
        __int128 v45 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        __int128 v45 = v43;
      }
      if (v45)
      {
        __int128 v46 = (char *)sub_10000701C((uint64_t)&v105, v45);
        __int128 v42 = __p;
      }

      else
      {
        __int128 v46 = 0LL;
      }

      __int128 v47 = (__n128 *)&v46[8 * (((char *)v32 - (char *)__p) >> 3)];
      char v20 = (unint64_t)&v46[24 * v45];
      v47->n128_f64[0] = v9;
      v47->n128_u64[1] = a2;
      v47[1].n128_u64[0] = 0x200000000LL;
      unint64_t v41 = &v47[1].n128_f64[1];
      if (v32 != (double *)v42)
      {
        do
        {
          uint64_t v48 = *(__n128 *)(v32 - 3);
          v47[-1].n128_f64[1] = *(v32 - 1);
          *(__n128 *)((char *)v47 - 24) = v48;
          __int128 v47 = (__n128 *)((char *)v47 - 24);
          v32 -= 3;
        }

        while (v32 != (double *)v42);
        __int128 v42 = __p;
      }

      std::string __p = v47;
      __int128 v105 = (char *)v20;
      if (v42)
      {
        operator delete(v42);
        char v20 = (unint64_t)v105;
      }
    }

    else
    {
      uint64_t *v32 = v9;
      *((void *)v32 + 1) = a2;
      *((void *)v32 + 2) = 0x200000000LL;
      unint64_t v41 = v32 + 3;
    }

    __int128 v103 = v41;
    uint64_t v32 = v41;
  }

  if ((unint64_t)v32 >= v20)
  {
    uint64_t v50 = __p;
    int v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)__p) >> 3);
    uint64_t v52 = v51 + 1;
    if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    std::string v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)__p) >> 3);
    if (2 * v53 > v52) {
      uint64_t v52 = 2 * v53;
    }
    if (v53 >= 0x555555555555555LL) {
      std::string v54 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      std::string v54 = v52;
    }
    if (v54)
    {
      int v55 = (char *)sub_10000701C((uint64_t)&v105, v54);
      uint64_t v50 = __p;
      uint64_t v32 = v103;
    }

    else
    {
      int v55 = 0LL;
    }

    std::string v56 = (__n128 *)&v55[24 * v51];
    char v20 = (unint64_t)&v55[24 * v54];
    v56->n128_f64[0] = v99;
    v56->n128_u64[1] = a2;
    v56[1].n128_u64[0] = 2LL;
    std::string v49 = &v56[1].n128_f64[1];
    if (v32 != (double *)v50)
    {
      do
      {
        std::string v57 = *(__n128 *)(v32 - 3);
        v56[-1].n128_f64[1] = *(v32 - 1);
        *(__n128 *)((char *)v56 - 24) = v57;
        std::string v56 = (__n128 *)((char *)v56 - 24);
        v32 -= 3;
      }

      while (v32 != (double *)v50);
      uint64_t v50 = __p;
    }

    std::string __p = v56;
    __int128 v105 = (char *)v20;
    if (v50)
    {
      operator delete(v50);
      char v20 = (unint64_t)v105;
    }
  }

  else
  {
    uint64_t *v32 = v99;
    *((void *)v32 + 1) = a2;
    *((void *)v32 + 2) = 2LL;
    std::string v49 = v32 + 3;
  }

  if ((unint64_t)v49 >= v20)
  {
    uint64_t v59 = __p;
    unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)__p) >> 3) + 1;
    if (v60 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    uint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)__p) >> 3);
    if (2 * v61 > v60) {
      unint64_t v60 = 2 * v61;
    }
    if (v61 >= 0x555555555555555LL) {
      unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v62 = v60;
    }
    if (v62)
    {
      __int128 v63 = (char *)sub_10000701C((uint64_t)&v105, v62);
      uint64_t v59 = __p;
    }

    else
    {
      __int128 v63 = 0LL;
    }

    uint64_t v64 = (__n128 *)&v63[8 * (((char *)v49 - (char *)__p) >> 3)];
    int v65 = &v63[24 * v62];
    v64->n128_f64[0] = v98;
    v64->n128_u64[1] = a2;
    v64[1].n128_u64[0] = 1LL;
    uint64_t v58 = (unint64_t)&v64[1].n128_u64[1];
    if (v49 != (double *)v59)
    {
      do
      {
        char v66 = *(__n128 *)(v49 - 3);
        v64[-1].n128_f64[1] = *(v49 - 1);
        *(__n128 *)((char *)v64 - 24) = v66;
        uint64_t v64 = (__n128 *)((char *)v64 - 24);
        v49 -= 3;
      }

      while (v49 != (double *)v59);
      uint64_t v59 = __p;
    }

    std::string __p = v64;
    __int128 v105 = v65;
    if (v59) {
      operator delete(v59);
    }
  }

  else
  {
    *std::string v49 = v98;
    *((void *)v49 + 1) = a2;
    *((void *)v49 + 2) = 1LL;
    uint64_t v58 = (unint64_t)(v49 + 3);
  }

  v96 = a1;
  uint64_t v104 = (__n128 *)v58;
  __int16 v68 = *a4;
  for (uint64_t i = a4[1]; v68 != i; v68 += 2)
  {
    uint64_t v69 = *v68;
    __int128 v70 = v17;
    __int128 v71 = 2.56;
    switch(*((_DWORD *)v68 + 2))
    {
      case 0:
        goto LABEL_102;
      case 1:
        __int128 v70 = v100;
        goto LABEL_99;
      case 2:
        __int128 v70 = v100;
        goto LABEL_101;
      case 3:
        __int128 v70 = v99;
        goto LABEL_99;
      case 4:
        __int128 v70 = v99;
        goto LABEL_101;
      case 5:
        __int128 v70 = v98;
        goto LABEL_99;
      case 6:
        __int128 v70 = v98;
LABEL_101:
        __int128 v71 = 2.56;
        goto LABEL_102;
      case 7:
        __int128 v70 = v97;
LABEL_99:
        __int128 v71 = -2.56;
LABEL_102:
        uint64_t v8 = v70 + v71;
        break;
      default:
        break;
    }

    uint64_t v72 = v17;
    uint64_t v73 = 2.56;
    switch(*((_DWORD *)v68 + 3))
    {
      case 0:
        goto LABEL_113;
      case 1:
        uint64_t v72 = v100;
        goto LABEL_110;
      case 2:
        uint64_t v72 = v100;
        goto LABEL_112;
      case 3:
        uint64_t v72 = v99;
        goto LABEL_110;
      case 4:
        uint64_t v72 = v99;
        goto LABEL_112;
      case 5:
        uint64_t v72 = v98;
        goto LABEL_110;
      case 6:
        uint64_t v72 = v98;
LABEL_112:
        uint64_t v73 = 2.56;
        goto LABEL_113;
      case 7:
        uint64_t v72 = v97;
LABEL_110:
        uint64_t v73 = -2.56;
LABEL_113:
        uint64_t v7 = v72 + v73;
        break;
      default:
        break;
    }

    if (v7 - v8 > 3.84)
    {
      uint64_t v74 = (double *)v105;
      if (v58 >= (unint64_t)v105)
      {
        std::string::size_type v76 = __p;
        __int128 v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)__p) >> 3);
        uint64_t v78 = v77 + 1;
        if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        else {
          __int128 v79 = v78;
        }
        if (v79)
        {
          char v80 = (char *)sub_10000701C((uint64_t)&v105, v79);
          std::string::size_type v76 = __p;
          uint64_t v58 = (unint64_t)v104;
        }

        else
        {
          char v80 = 0LL;
        }

        char v81 = &v80[24 * v77];
        *(double *)char v81 = v8;
        *((void *)v81 + 1) = v69;
        *((void *)v81 + 2) = 0x200000000LL;
        __int128 v82 = (__n128 *)v81;
        if ((__n128 *)v58 != v76)
        {
          do
          {
            uint64_t v83 = *(__n128 *)(v58 - 24);
            v82[-1].n128_u64[1] = *(void *)(v58 - 8);
            *(__n128 *)((char *)v82 - 24) = v83;
            __int128 v82 = (__n128 *)((char *)v82 - 24);
            v58 -= 24LL;
          }

          while ((__n128 *)v58 != v76);
          std::string::size_type v76 = __p;
        }

        uint64_t v74 = (double *)&v80[24 * v79];
        __int128 v75 = (double *)(v81 + 24);
        std::string __p = v82;
        __int128 v105 = (char *)v74;
        if (v76)
        {
          operator delete(v76);
          uint64_t v74 = (double *)v105;
        }
      }

      else
      {
        *(double *)uint64_t v58 = v8;
        *(void *)(v58 + 8) = v69;
        __int128 v75 = (double *)(v58 + 24);
        *(void *)(v58 + 16) = 0x200000000LL;
      }

      if (v75 >= v74)
      {
        __int128 v84 = __p;
        uint64_t v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (char *)__p) >> 3) + 1;
        if (v85 > 0xAAAAAAAAAAAAAAALL) {
          sub_100007008();
        }
        uint64_t v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)__p) >> 3);
        if (2 * v86 > v85) {
          uint64_t v85 = 2 * v86;
        }
        if (v86 >= 0x555555555555555LL) {
          __int128 v87 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          __int128 v87 = v85;
        }
        if (v87)
        {
          v88 = (char *)sub_10000701C((uint64_t)&v105, v87);
          __int128 v84 = __p;
        }

        else
        {
          v88 = 0LL;
        }

        uint64_t v89 = &v88[8 * (((char *)v75 - (char *)__p) >> 3)];
        *(double *)uint64_t v89 = v7;
        *((void *)v89 + 1) = v69;
        *((void *)v89 + 2) = &_mh_execute_header;
        v90 = (__n128 *)v89;
        if (v75 != (double *)v84)
        {
          do
          {
            char v91 = *(__n128 *)(v75 - 3);
            v90[-1].n128_f64[1] = *(v75 - 1);
            *(__n128 *)((char *)v90 - 24) = v91;
            v90 = (__n128 *)((char *)v90 - 24);
            v75 -= 3;
          }

          while (v75 != (double *)v84);
          __int128 v84 = __p;
        }

        uint64_t v58 = (unint64_t)(v89 + 24);
        std::string __p = v90;
        __int128 v105 = &v88[24 * v87];
        if (v84) {
          operator delete(v84);
        }
      }

      else
      {
        *__int128 v75 = v7;
        *((void *)v75 + 1) = v69;
        uint64_t v58 = (unint64_t)(v75 + 3);
        *((void *)v75 + 2) = &_mh_execute_header;
      }

      uint64_t v104 = (__n128 *)v58;
    }
  }

  char v92 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)__p) >> 3));
  if ((__n128 *)v58 == __p) {
    __int128 v93 = 0LL;
  }
  else {
    __int128 v93 = v92;
  }
  sub_1002C5FAC((uint64_t)__p, v58, v93, 1);
  uint64_t v94 = __p;
  if (__p != v104)
  {
    do
    {
      sub_1002C5B64((void *)(v96 + 504), v94);
      uint64_t v94 = (__n128 *)((char *)v94 + 24);
    }

    while (v94 != v104);
    uint64_t v94 = __p;
  }

  if (v94) {
    operator delete(v94);
  }
  return v97 + 2.56;
}

  *(_DWORD *)(a1 + 92) = v5;
  return v5;
}

  PBDataWriterWriteDoubleField(a3, 19LL, self->_startTime);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x40000) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  *((void *)a3 + 1) = *(void *)&self->_startTime;
  *((_DWORD *)a3 + 26) |= 1u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x40000) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  *((_DWORD *)result + 13) = self->_nDropout;
  *((_DWORD *)result + 26) |= 0x200u;
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_19:
    if ((*(_DWORD *)&has & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  self->_startTime = *((double *)a3 + 1);
  *(_DWORD *)&self->_has |= 1u;
  char v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x40000) == 0)
  {
LABEL_20:
    if ((v3 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

        unint64_t v18 = 0;
        __int128 v82 = 2;
        goto LABEL_42;
      }

      if (v13)
      {
        if ((a2 & 3) == 0)
        {
LABEL_35:
          __int128 v82 = 0;
          uint64_t v10 = 1;
LABEL_40:
          unint64_t v18 = 1;
LABEL_42:
          uint64_t v19 = 1;
LABEL_43:
          if (*(_DWORD *)(a1 + 312) == 3)
          {
            *(_BYTE *)(a1 + 233) = 1;
            *(void *)__int128 buf = 0LL;
            *(void *)char v91 = buf;
            *(void *)&v91[8] = 0x2020000000LL;
            *(void *)&v91[16] = 0LL;
            char v20 = *(void **)(a1 + 136);
            v83[0] = _NSConcreteStackBlock;
            v83[1] = 3221225472LL;
            v83[2] = sub_10057E720;
            v83[3] = &unk_101840078;
            v83[4] = buf;
            [v20 iterateIdentitiesRelatedToKeyPath:v5 withBlock:v83];
            uint64_t v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  @"cl-user-zone",  -[NSNumber stringValue]( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)v91 + 24LL) + 1LL),  "stringValue"));
            _Block_object_dispose(buf, 8);
            if (!v18)
            {
LABEL_45:
              else {
                __int16 v22 = v19;
              }
              if ((v22 & 1) != 0)
              {
                uint64_t v23 = 0LL;
              }

              else
              {
                uint64_t v26 = sub_1005486B8(a1, (uint64_t)v5);
                sub_10057D7A4(a1, (uint64_t)v26, 0, 0);
                uint64_t v23 = 2LL;
              }

              goto LABEL_70;
            }
          }

          else
          {
            uint64_t v21 = 0LL;
            if (!v18) {
              goto LABEL_45;
            }
          }

          if (v10)
          {
            sub_1005527D4(*(void **)(a1 + 136), (uint64_t)v5, 4, 1);
            [*(id *)(a1 + 136) setBool:1 forKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v5];
            if (v12) {
              uint64_t v23 = 14LL;
            }
            else {
              uint64_t v23 = 13LL;
            }
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
            unint64_t v24 = (os_log_s *)qword_101934988;
            if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_70;
            }
            *(_DWORD *)__int128 buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)char v91 = 2082;
            *(void *)&v91[2] = "";
            *(_WORD *)&v91[10] = 2114;
            *(void *)&v91[12] = v5;
            uint64_t v25 = "{msg%{public}.0s:#TemporaryAuth Client has been granted temporary negative status, Client:"
                  "%{public, location:escape_only}@}";
          }

          else
          {
            if (v21) {
              uint64_t v5 = [v5 clientKeyPathWithReplacementSubIdentityId:v21 subIdentityType:122];
            }
            sub_1005527D4(*(void **)(a1 + 136), (uint64_t)v5, 1, 1);
            [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v5];
            if (v12) {
              uint64_t v23 = 12LL;
            }
            else {
              uint64_t v23 = 1LL;
            }
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
            unint64_t v24 = (os_log_s *)qword_101934988;
            if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_70;
            }
            *(_DWORD *)__int128 buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)char v91 = 2082;
            *(void *)&v91[2] = "";
            *(_WORD *)&v91[10] = 2114;
            *(void *)&v91[12] = v5;
            uint64_t v25 = "{msg%{public}.0s:#TemporaryAuth Client has been granted temporary positive status, ClientKey"
                  ":%{public, location:escape_only}@}";
          }

          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x1Cu);
LABEL_70:
          uint64_t v27 = *(_DWORD *)(a1 + 312) - 1;
          else {
            uint64_t v28 = dword_1012F1020[v27];
          }
          if ((v8 & 0xFFFFFFFD) == 1) {
            uint64_t v29 = 2LL;
          }
          else {
            uint64_t v29 = v28;
          }
          uint64_t v30 = (void *)HIBYTE(v85);
          if (v85 < 0) {
            uint64_t v30 = __p[1];
          }
          if (v30)
          {
            sub_10057D528(a1, (uint64_t)v5, (uint64_t *)__p);
          }

          else
          {
            uint64_t v31 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:v5];
          }

          goto LABEL_167;
        }

        if (v10 != 1)
        {
LABEL_39:
          uint64_t v10 = 0;
          __int128 v82 = 0;
          goto LABEL_40;
        }
      }

      else
      {
        if ((a2 & 3) == 0) {
          goto LABEL_41;
        }
        if (v10 == 1) {
          goto LABEL_39;
        }
      }

      uint64_t v10 = 0;
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      __int128 v82 = 4;
      goto LABEL_43;
    case 7:
    case 8:
      if (v10 == 1)
      {
        uint64_t v17 = 0LL;
        __int128 v82 = 4;
      }

      else
      {
        if (v10 != 2)
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          __int128 v79 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)__int128 buf = 68290051;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)char v91 = 2082;
            *(void *)&v91[2] = "";
            *(_WORD *)&v91[10] = 2114;
            *(void *)&v91[12] = v5;
            *(_WORD *)&v91[20] = 1026;
            *(_DWORD *)&v91[22] = a2 & 3;
            *(_WORD *)&v91[26] = 2082;
            *(void *)&v91[28] = "assert";
            char v92 = 2081;
            __int128 v93 = "false";
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Impossible response to WhenInUse Upgrade to Always prompt, client:%{public, l ocation:escape_only}@, flags:%{public}d, event:%{public, location:escape_only}s, condition:%{p rivate, location:escape_only}s}",  buf,  0x36u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          char v80 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            *(_DWORD *)__int128 buf = 68290051;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)char v91 = 2082;
            *(void *)&v91[2] = "";
            *(_WORD *)&v91[10] = 2114;
            *(void *)&v91[12] = v5;
            *(_WORD *)&v91[20] = 1026;
            *(_DWORD *)&v91[22] = a2 & 3;
            *(_WORD *)&v91[26] = 2082;
            *(void *)&v91[28] = "assert";
            char v92 = 2081;
            __int128 v93 = "false";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v80,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Impossible response to WhenInUse Upgrade to Always prompt",  "{msg%{public}.0s:Impossible response to WhenInUse Upgrade to Always prompt, client:%{public, l ocation:escape_only}@, flags:%{public}d, event:%{public, location:escape_only}s, condition:%{p rivate, location:escape_only}s}",  buf,  0x36u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          p_vtable = (void **)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 68290051;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)char v91 = 2082;
            *(void *)&v91[2] = "";
            *(_WORD *)&v91[10] = 2114;
            *(void *)&v91[12] = v5;
            *(_WORD *)&v91[20] = 1026;
            *(_DWORD *)&v91[22] = a2 & 3;
            *(_WORD *)&v91[26] = 2082;
            *(void *)&v91[28] = "assert";
            char v92 = 2081;
            __int128 v93 = "false";
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)p_vtable,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Impossible response to WhenInUse Upgrade to Always prompt, client:%{public, l ocation:escape_only}@, flags:%{public}d, event:%{public, location:escape_only}s, condition:%{p rivate, location:escape_only}s}",  buf,  0x36u);
          }

          uint64_t v78 = 4880;
          goto LABEL_210;
        }

        __int128 v82 = 3;
        uint64_t v17 = 1LL;
      }

      if (*(void *)(a1 + 264))
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        std::string v54 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          int v55 = *(void *)(a1 + 288) != 0LL;
          *(_DWORD *)__int128 buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)char v91 = 2082;
          *(void *)&v91[2] = "";
          *(_WORD *)&v91[10] = 2114;
          *(void *)&v91[12] = v5;
          *(_WORD *)&v91[20] = 2050;
          *(void *)&v91[22] = v82;
          *(_WORD *)&v91[30] = 1026;
          *(_DWORD *)&v91[32] = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#provisional prompt response, Client:%{public, location:escape_only}@, Grante dStatus:%{public, location:CLClientAuthorizationStatus}lld, FollowupPending:%{public}hhd}",  buf,  0x2Cu);
        }

        [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
        std::string v57 = v56;
        uint64_t v58 = *(double *)(a1 + 304);
        *(void *)(a1 + 304) = 0LL;
        __int128 v42 = -1.0;
        [*(id *)(a1 + 136) doubleForKey:@"ProvisionalMonitoringBegin" atKeyPath:v5 defaultValue:-1.0];
        unint64_t v60 = v59;
        if (v59 != -1.0)
        {
          Current = CFAbsoluteTimeGetCurrent();
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          __int128 v42 = Current - v60;
          unint64_t v62 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)char v91 = 2082;
            *(void *)&v91[2] = "";
            *(_WORD *)&v91[10] = 2114;
            *(void *)&v91[12] = v5;
            *(_WORD *)&v91[20] = 2050;
            *(double *)&v91[22] = v42;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#provisional total duration, ClientKey:%{public, location:escape_only}@, du ration:%{public}f}",  buf,  0x26u);
          }
        }

        __int128 v63 = *(void *)(a1 + 288);
        if (v63)
        {
          (*(void (**)(uint64_t, uint64_t))(v63 + 16))(v63, v17);

          *(void *)(a1 + 288) = 0LL;
          uint64_t v23 = 3LL;
        }

        else
        {
          uint64_t v23 = 0LL;
        }

        uint64_t v73 = sub_1005486B8(a1, (uint64_t)v5);
        sub_10057D7A4(a1, (uint64_t)v73, 1, 0);
        uint64_t v29 = 0LL;
        __int128 v71 = v57 - v58;
        goto LABEL_170;
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      int v65 = (os_log_s *)qword_101934988;
      __int128 v42 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        char v66 = *(void *)(a1 + 288) != 0LL;
        *(_DWORD *)__int128 buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)char v91 = 2082;
        *(void *)&v91[2] = "";
        *(_WORD *)&v91[10] = 2114;
        *(void *)&v91[12] = v5;
        *(_WORD *)&v91[20] = 2050;
        *(void *)&v91[22] = v82;
        *(_WORD *)&v91[30] = 1026;
        *(_DWORD *)&v91[32] = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Non-#provisional WIU to Always #AuthPrompt prompt response, ClientKey:%{public, l ocation:escape_only}@, GrantedStatus:%{public, location:CLClientAuthorizationStatus}lld, BypassingSomeon eElseOnDeck:%{public}hhd}",  buf,  0x2Cu);
      }

      uint64_t v29 = 0LL;
      uint64_t v23 = 0LL;
      goto LABEL_169;
    case 9:
      __int128 v44 = a2 & 3;
      if (v44 == 1) {
        uint64_t v23 = 4LL;
      }
      else {
        uint64_t v23 = 5LL;
      }
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      __int128 v45 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v46 = "NO";
        *(_DWORD *)__int128 buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(void *)&v91[2] = "";
        *(_WORD *)char v91 = 2082;
        if (v44 == 1) {
          __int128 v46 = "YES";
        }
        *(_WORD *)&v91[10] = 2114;
        *(void *)&v91[12] = v5;
        *(_WORD *)&v91[20] = 2082;
        *(void *)&v91[22] = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Temporary relief from #compensation response, ClientKey:%{public, location:escape _only}@, TempPrecise:%{public, location:escape_only}s}",  buf,  0x26u);
      }

      if (v44 == 1) {
        __int128 v47 = 2;
      }
      else {
        __int128 v47 = 8;
      }
      sub_1005527D4(*(void **)(a1 + 136), (uint64_t)v5, v47, 1);
      uint64_t v48 = sub_100AE00C4(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary"));
      std::string v49 = v48;
      uint64_t v50 = &CMOnBodyStatusManagerManufacturer_ptr;
      if (v48)
      {
        if (v48 == 2)
        {
          int v51 = 4;
          goto LABEL_177;
        }

        if (v48 == 4)
        {
          int v51 = 3;
LABEL_177:
          __int128 v82 = v51;
          goto LABEL_187;
        }

        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        uint64_t v74 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__int128 buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)char v91 = 2082;
          *(void *)&v91[2] = "";
          *(_WORD *)&v91[10] = 2114;
          *(void *)&v91[12] = v5;
          *(_WORD *)&v91[20] = 2050;
          *(void *)&v91[22] = v49;
          _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected authorization status for #TemporaryAuth precise promptee, ClientKey: %{public, location:escape_only}@, AuthMask:%{public}lu}",  buf,  0x26u);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
        }

        __int128 v75 = (os_log_s *)qword_101934988;
        if (os_signpost_enabled((os_log_t)qword_101934988))
        {
          *(_DWORD *)__int128 buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)char v91 = 2082;
          *(void *)&v91[2] = "";
          *(_WORD *)&v91[10] = 2114;
          *(void *)&v91[12] = v5;
          *(_WORD *)&v91[20] = 2050;
          *(void *)&v91[22] = v49;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v75,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected authorization status for #TemporaryAuth precise promptee",  "{msg%{public}.0s:Unexpected authorization status for #TemporaryAuth precise promptee, ClientKey: %{public, location:escape_only}@, AuthMask:%{public}lu}",  buf,  0x26u);
        }

        __int128 v82 = 2;
        uint64_t v50 = &CMOnBodyStatusManagerManufacturer_ptr;
      }

      else
      {
        __int128 v82 = 0;
      }

  __int128 v75 = *((void *)a1 + 2);
  if (v75)
  {
    std::string::size_type v76 = *(id *)a1;
    __int128 v77 = *((void *)a1 + 18);
    if (*(_WORD *)(v77 + 18)) {
      uint64_t v78 = *(unsigned int *)sub_10032DE70((unsigned __int16 *)(v77 + 16), *(unsigned __int16 *)(v77 + 18) - 1LL);
    }
    else {
      uint64_t v78 = 0LL;
    }
    (*(void (**)(uint64_t, id, uint64_t))(*(void *)v75 + 8LL))(v75, v76, v78);
  }

  uint64_t v19 = 2LL;
LABEL_43:
  __int128 v42 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v43
  __int128 v44 = v38;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v46);
  return v19;
}

  a1[10] = v4;
  return v4;
}

  uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[8];
  if ((v17 & 0x80000000) != 0)
  {
    unint64_t v18 = 11;
  }

  else if (v17 >= 0x80)
  {
    unint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    char v3 = a1[12];
  }

  else
  {
    unint64_t v18 = 2;
  }

  uint64_t v4 = (v18 + v4);
  if ((v3 & 0x80) == 0)
  {
LABEL_23:
    if ((v3 & 0x100) == 0) {
      goto LABEL_55;
    }
    goto LABEL_51;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v5[6],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  uint64_t v19 = 2LL;
LABEL_43:
  __int128 v42 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v43
  __int128 v44 = v38;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v46);
  return v19;
}

  uint64_t v19 = 2LL;
LABEL_43:
  __int128 v44 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v45
  __int128 v46 = v38;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v48);
  return v19;
}

  uint64_t v19 = 2LL;
LABEL_43:
  unint64_t v39 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v40
  unint64_t v41 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v43);
  return v19;
}

  if (__p)
  {
    unint64_t v39 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v41)
  {
    __int128 v42 = (uint64_t *)v41;
    operator delete(v41);
  }

  if (v44)
  {
    __int128 v45 = (uint64_t *)v44;
    operator delete(v44);
  }

  return v29;
}

  if (__p)
  {
    unint64_t v41 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v43)
  {
    __int128 v44 = (uint64_t *)v43;
    operator delete(v43);
  }

  if (v46)
  {
    __int128 v47 = (uint64_t *)v46;
    operator delete(v46);
  }

  return v31;
}

            if (v40 == v22 || !v23 && *(void *)(a3 + 88) - 2LL <= v38) {
              goto LABEL_70;
            }
            goto LABEL_44;
          }

          if (a8) {
            goto LABEL_41;
          }
        }

  if (i < j)
  {
    for (uint64_t j = v11; ; j -= 200LL)
    {
      uint64_t v34 = *(void *)(j + 48);
      if ((void)v105 == v34)
      {
        uint64_t v35 = *(void *)(j + 56);
        int v37 = __OFSUB__(*((void *)&v105 + 1), v35);
        uint64_t v36 = *((void *)&v105 + 1) - v35 < 0;
        if (*((void *)&v105 + 1) == v35)
        {
          unint64_t v38 = *(void *)(j + 64);
          int v37 = __OFSUB__((void)v106, v38);
          uint64_t v36 = (uint64_t)v106 - v38 < 0;
          if ((void)v106 == v38)
          {
            unint64_t v39 = *(void *)(j + 80);
            int v37 = __OFSUB__((void)v107, v39);
            uint64_t v36 = (uint64_t)v107 - v39 < 0;
            if ((void)v107 == v39)
            {
              unint64_t v40 = *(void *)(j + 72);
              int v37 = __OFSUB__(*((void *)&v106 + 1), v40);
              uint64_t v36 = *((void *)&v106 + 1) - v40 < 0;
            }
          }
        }

        if (v36 == v37
          && (v106 != *(_OWORD *)(j + 64)
           || *((void *)&v105 + 1) != v35
           || (void)v107 != *(void *)(j + 80)
           || (sub_10085DFAC((uint64_t)&v102, j, a3) & 1) == 0))
        {
          break;
        }
      }

      else if ((uint64_t)v105 >= v34)
      {
        break;
      }
    }
  }

  if (i < j)
  {
    for (uint64_t j = v11; ; j -= 200LL)
    {
      uint64_t v34 = *(void *)(j + 128);
      if ((void)v110 == v34)
      {
        uint64_t v35 = *(void *)(j + 136);
        int v37 = __OFSUB__(*((void *)&v110 + 1), v35);
        uint64_t v36 = *((void *)&v110 + 1) - v35 < 0;
        if (*((void *)&v110 + 1) == v35)
        {
          unint64_t v38 = *(void *)(j + 144);
          int v37 = __OFSUB__((void)v111, v38);
          uint64_t v36 = (uint64_t)v111 - v38 < 0;
          if ((void)v111 == v38)
          {
            unint64_t v39 = *(void *)(j + 160);
            int v37 = __OFSUB__((void)v112, v39);
            uint64_t v36 = (uint64_t)v112 - v39 < 0;
            if ((void)v112 == v39)
            {
              unint64_t v40 = *(void *)(j + 152);
              int v37 = __OFSUB__(*((void *)&v111 + 1), v40);
              uint64_t v36 = *((void *)&v111 + 1) - v40 < 0;
            }
          }
        }

        if (v36 == v37
          && (v111 != *(_OWORD *)(j + 144)
           || *((void *)&v110 + 1) != v35
           || (void)v112 != *(void *)(j + 160)
           || (sub_100862154((uint64_t)&v102, j, a3) & 1) == 0))
        {
          break;
        }
      }

      else if ((uint64_t)v110 >= v34)
      {
        break;
      }
    }
  }

  uint64_t v19 = 2LL;
LABEL_43:
  unint64_t v40 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v41
  __int128 v42 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v44);
  return v19;
}

  sub_1002F0B04(buf);
  __int128 v46 = (unsigned __int8 *)(a1 + 619);
  __int128 v47 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceUseVisitEventsForSignificantMonitoring", (BOOL *)(a1 + 619));
  uint64_t v48 = v47;
  std::string v49 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_45;
  }
  uint64_t v50 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    int v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    if (!v48) {
      goto LABEL_51;
    }
  }

  else
  {
LABEL_45:
    if (!v47) {
      goto LABEL_51;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  uint64_t v52 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    std::string v53 = *v46;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding Visit event usage to %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    uint64_t v130 = *v46;
    CFStringRef v161 = 67174657;
    LODWORD(v162) = v130;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding Visit event usage to %{private}d",  &v161,  v157);
    v132 = (char *)v131;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v131);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  (int)a2,  *(float *)(v5 + 72),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if ((v5 & 0xFF00) == 0) {
    return;
  }
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 0x100u;
    uint64_t v19 = *(char **)(a1 + 72);
    if (!v19)
    {
      uint64_t v19 = (char *)operator new(0x78uLL);
      *(void *)uint64_t v19 = off_101869320;
      *((void *)v19 + 11) = 0LL;
      *((void *)v19 + 12) = 0LL;
      *((_DWORD *)v19 + 26) = 0;
      *(_OWORD *)(v19 + 8) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((void *)v19 + 9) = 0LL;
      *((void *)v19 + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v19 + 14) = 0LL;
      *(void *)(a1 + 72) = v19;
    }

    char v20 = *(void *)(a2 + 72);
    if (!v20) {
      char v20 = *(void *)(qword_1019A1A90 + 72);
    }
    sub_100A49990((uint64_t)v19, v20);
    uint64_t v5 = *(_DWORD *)(a2 + 112);
    if ((v5 & 0x200) == 0)
    {
LABEL_44:
      if ((v5 & 0x400) == 0) {
        goto LABEL_45;
      }
      goto LABEL_55;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_44;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 112) |= 0x200u;
  *(_DWORD *)(a1 + 80) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_45:
    if ((v5 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_57;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(v5 + 84),  (int)a2,  a4);
  uint64_t v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x400) == 0)
  {
LABEL_15:
    if ((v8 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  uint64_t v19 = 2LL;
LABEL_43:
  uint64_t v50 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v51
  uint64_t v52 = v44;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v54);
  return v19;
}

  uint64_t v19 = 2LL;
LABEL_43:
  unint64_t v39 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v40
  unint64_t v41 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v43);
  return v19;
}

  uint64_t v19 = 2LL;
LABEL_43:
  unint64_t v38 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v40
  unint64_t v41 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v43);
  return v19;
}

  unint64_t v24 = 2LL;
LABEL_43:
  uint64_t v52 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v53
  std::string v54 = v46;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v56);
  return v24;
}

  if ((v3 & 0x100) != 0) {
    uint64_t result = v5 + 2;
  }
  else {
    uint64_t result = v5;
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

  char v14 = *(void *)(v5 + 80);
  if (!v14) {
    char v14 = *(void *)(qword_1019A1C80 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v14,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      return result;
    }
    goto LABEL_47;
  }

        *(_DWORD *)(v3 + 364) = *(_BYTE *)(a1 + 56) == 0;
      }

      *(_BYTE *)(v3 + 8) = 1;
      unint64_t v18 = *(void **)(a1 + 40);
      *(void *)(v3 + 232) = v18[14];
      *(_DWORD *)(v3 + 240) = v18[7];
      *(void *)(v3 + 16) = v18[3];
      sub_100B36018((dispatch_queue_t *)v3);
      uint64_t v19 = *(void *)(a1 + 40);
      char v20 = *(unsigned __int8 *)(v19 + 144);
      *(_BYTE *)(v3 + 360) = v20;
      if (v20) {
        *(void *)(v3 + 416) = *(void *)(v19 + 216);
      }
      uuid_unparse((const unsigned __int8 *)(v19 + 80), (char *)(v3 + 377));
      if (v8) {
        uint64_t v21 = 2;
      }
      else {
        uint64_t v21 = 1;
      }
      if (v9) {
        uint64_t v21 = 3;
      }
      *(_DWORD *)(v3 + 260) = v21;
      sub_100B36080((dispatch_queue_t *)v3);
      __int16 v22 = *(void *)(a1 + 40);
      *(void *)(v3 + 16) = *(void *)(v22 + 24);
      *(void *)(v3 + 24) = 0xBFF0000000000000LL;
      uint64_t v23 = *(void *)(v22 + 112);
      *(void *)(v3 + 64) = v23;
      unint64_t v24 = *(_DWORD *)(v22 + 56);
      *(_DWORD *)(v3 + 72) = v24;
      uint64_t v25 = *(void *)(a1 + 48);
      uint64_t v26 = (void *)(v25 + 16);
      uint64_t v27 = *(unsigned __int8 *)(v25 + 39);
      if ((v27 & 0x80) != 0)
      {
        uint64_t v28 = *(void *)(v25 + 24);
        if (v28 != 17)
        {
          if (v28 != 27)
          {
LABEL_65:
            uint64_t v36 = 0;
            goto LABEL_76;
          }

          uint64_t v26 = (void *)*v26;
          goto LABEL_56;
        }

        uint64_t v26 = (void *)*v26;
      }

      else if (v27 != 17)
      {
        if (v27 != 27) {
          goto LABEL_65;
        }
LABEL_56:
        uint64_t v29 = (void *)*v26;
        uint64_t v30 = v26[1];
        uint64_t v31 = v26[2];
        uint64_t v32 = *(void *)((char *)v26 + 19);
        uint64_t v35 = v29 == (void *)0x6C7070612E6D6F63LL
           && v30 == 0x6F69737365532E65LL
           && v31 == 0x72656B636172546ELL
           && v32 == 0x70704172656B6361LL;
        goto LABEL_73;
      }

      int v37 = (void *)*v26;
      unint64_t v38 = v26[1];
      unint64_t v39 = *((unsigned __int8 *)v26 + 16);
      uint64_t v35 = v37 == (void *)0x6C7070612E6D6F63LL && v38 == 0x73656E7469462E65LL && v39 == 115;
LABEL_73:
      uint64_t v36 = v35;
LABEL_76:
      *(_BYTE *)(v3 + 576) = v36 ^ 1;
      *(void *)(v3 + 584) = v23;
      *(_DWORD *)(v3 + 592) = v24;
      return;
    case 0xELL:
      if (*(void *)(v1 + 112) == 33LL)
      {
        *(_DWORD *)(v3 + 136) = (int)*(double *)(v1 + 24);
        if (*(_DWORD *)(v3 + 364) == 1) {
          *(_DWORD *)(v3 + 364) = 2;
        }
      }

      char v14 = uuid_compare((const unsigned __int8 *)(v3 + 140), (const unsigned __int8 *)(v1 + 64));
      __int128 v15 = *(void *)(a1 + 40);
      if (!v14 && *(void *)(v15 + 112) != 33LL)
      {
        ++*(_DWORD *)(v3 + 424);
        uuid_copy((unsigned __int8 *)(v3 + 140), (const unsigned __int8 *)(v15 + 64));
        __int128 v15 = *(void *)(a1 + 40);
      }

      *(void *)(v3 + 64) = *(void *)(v15 + 112);
      *(_DWORD *)(v3 + 72) = *(void *)(v15 + 56);
      return;
    case 0xFLL:
      if (*(_BYTE *)(v3 + 8))
      {
        __int128 v16 = *(double *)(v1 + 24);
        *(double *)(v3 + 24) = v16;
        *(_DWORD *)(v3 + 224) += (int)(v16 - *(double *)(v3 + 16));
        *(_BYTE *)(v3 + 8) = 0;
        if (sub_100B35768())
        {
          sub_1004F2598();
        }

        if (sub_100B35768())
        {
          sub_1004F2598();
        }
      }

      return;
    case 0x10LL:
      ++*(_DWORD *)(v3 + 428);
      *(void *)(v3 + 168) = *(void *)(v1 + 24);
      return;
    case 0x11LL:
      *(double *)(v3 + 176) = *(double *)(v3 + 176) + *(double *)(v1 + 24) - *(double *)(v3 + 168);
      return;
    default:
      return;
  }
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_speedVariance),  @"speedVariance");
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_21;
    }
LABEL_43:
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_vo2MaxModelSource),  @"vo2MaxModelSource");
    if ((*(_DWORD *)&self->_has & 0x40000) == 0) {
      return v3;
    }
    goto LABEL_22;
  }

  PBDataWriterWriteDoubleField(a3, 19LL, self->_gradeVariance);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x40000) == 0) {
      return;
    }
LABEL_43:
    PBDataWriterWriteInt32Field(a3, self->_sessionType, 21LL);
    return;
  }

  *((void *)a3 + 4) = *(void *)&self->_gradeVariance;
  *((_DWORD *)a3 + 41) |= 8u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x40000) == 0) {
      return;
    }
LABEL_43:
    *((_DWORD *)a3 + 38) = self->_sessionType;
    *((_DWORD *)a3 + 41) |= 0x40000u;
    return;
  }

  *((void *)result + 15) = *(void *)&self->_speedVariance;
  *((_DWORD *)result + 41) |= 0x4000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_20:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  self->_gradeVariance = *((double *)a3 + 4);
  *(_DWORD *)&self->_has |= 8u;
  char v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x80000) == 0)
  {
LABEL_21:
    if ((v3 & 0x40000) == 0) {
      return;
    }
LABEL_43:
    self->_sessionType = *((_DWORD *)a3 + 38);
    *(_DWORD *)&self->_has |= 0x40000u;
    return;
  }

    uint64_t v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_technology);
    goto LABEL_46;
  }

  uint64_t v13 = @"kRadioAccessTechnologyGSM";
  switch(technology)
  {
    case 1:
      break;
    case 2:
      uint64_t v13 = @"kRadioAccessTechnologyGSMCompact";
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_41;
    case 4:
      uint64_t v13 = @"kRadioAccessTechnologyUTRAN";
      break;
    case 8:
      uint64_t v13 = @"kRadioAccessTechnologyCDMA1x";
      break;
    default:
      if (technology != 16) {
        goto LABEL_41;
      }
      uint64_t v13 = @"kRadioAccessTechnologyCDMAEVDO";
      break;
  }

  double v9 = *(void *)(v5 + 40);
  if (!v9) {
    double v9 = *(void *)(qword_1019A1D48 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }

    uint64_t v21 = 1;
    uint64_t v4 = v14;
    goto LABEL_42;
  }

  memset(&v25, 0, sizeof(v25));
  uint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    unint64_t v18 = sub_100BFDE68(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    uint64_t v4 = v18;
    goto LABEL_56;
  }

  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11) {
        unint64_t v18 = sub_100BFE070(a1, v14 + 2, a3, &v25);
      }
      else {
        unint64_t v18 = (char *)sub_100BFDF4C(a1, (unsigned __int8 *)v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }

  else
  {
    LOBYTE(v17) = *v17;
  }

  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  unint64_t v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_100BFE248(v6, (char *)&v24, (char *)&__p);
  uint64_t v21 = 1;
LABEL_42:
  if ((v21 & 1) != 0) {
    return v4;
  }
  return (char *)v6;
}

  *(double *)(a5 + 32) = v57;
  *(double *)(a5 + 96) = v57;
  *(_DWORD *)(a5 + 112) = v54;
  *(_WORD *)(a5 + 108) = *(_WORD *)(a2 + 26);
  *(double *)(a5 + 136) = v52;
  uint64_t v58 = v57;
  *(float *)(a1 + 1396) = v58;
  uint64_t v59 = *((double *)&v141 + 1);
  unint64_t v60 = *(double *)&v141;
  *(float *)(a1 + 1404) = v60;
  uint64_t v61 = v52;
  *(float *)(a1 + 1408) = v61;
  unint64_t v62 = *(double *)v148;
  __int128 v63 = v142;
  *(float *)(a1 + 1416) = v63;
  uint64_t v64 = v59;
  *(float *)(a1 + 1356) = v64;
  *(_DWORD *)(a1 + 1572) = 954437177 * ((unint64_t)(v137 - (_BYTE *)__p) >> 3);
  int v65 = v62;
  *(float *)(a1 + 1420) = v65;
  *(float32x2_t *)(a1 + 1432) = vcvt_f32_f64(*(float64x2_t *)&v148[8]);
  char v66 = *(_DWORD *)(a1 + 1608);
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10187AE98);
  }
  int v67 = (os_log_s *)p_vtable[155];
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v68 = *(void *)a1;
    uint64_t v69 = *(unsigned __int8 *)(a1 + 1320);
    __int128 v70 = *(void *)(a1 + 1600);
    __int128 v71 = *(int *)(a1 + 1608);
    uint64_t v72 = *(void *)(a1 + 1616);
    uint64_t v73 = *(unsigned __int8 *)(a2 + 26);
    uint64_t v74 = *(unsigned __int8 *)(a2 + 27);
    *(_DWORD *)__int128 buf = 134224128;
    *(void *)uint64_t v193 = v68;
    *(_WORD *)&v193[8] = 2048;
    *(double *)&v193[10] = *(float *)&v149;
    *(_WORD *)&v193[18] = 2048;
    *(double *)&v193[20] = *((float *)&v149 + 1);
    *(_WORD *)&v193[28] = 2048;
    *(void *)&v193[30] = 0x8E38E38E38E38E39LL * ((v137 - (_BYTE *)__p) >> 3);
    *(_WORD *)&v193[38] = 1024;
    *(_DWORD *)&v193[40] = HIDWORD(v143);
    std::string::size_type v194 = 1024;
    v195 = LODWORD(v143);
    __int128 v196 = 2048;
    uint64_t v197 = v142;
    __int128 v198 = 2048;
    std::string::size_type v199 = v141;
    std::string::size_type v200 = 2048;
    int v201 = *(void *)&v193[30];
    __int128 v202 = 1024;
    v203 = HIDWORD(v143);
    __int128 v204 = 1024;
    unint64_t v205 = LODWORD(v143);
    std::string::size_type v206 = 2048;
    CFStringRef v207 = v142;
    __int128 v208 = 2048;
    uint64_t v209 = v141;
    __int128 v210 = 2048;
    v211 = *((void *)&v141 + 1);
    unint64_t v212 = 1024;
    uint64_t v213 = v69;
    __int128 v214 = 2048;
    __int128 v215 = v57;
    __int128 v216 = 2048;
    __int128 v217 = v52;
    v218 = 1024;
    std::string v219 = v66 == 3;
    std::string v220 = 2048;
    std::string v221 = v70;
    std::string v222 = 2048;
    std::string v223 = v71;
    std::string v224 = 2048;
    std::string v225 = v72;
    std::string v226 = 1024;
    std::string v227 = v55;
    std::string v228 = 1024;
    std::string v229 = v73;
    std::string v230 = 1024;
    std::string v231 = v74;
    std::string v232 = 1024;
    std::string v233 = v54;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "VO2Max,currentWorkoutType,%ld,hrmin,%f,hrmax,%f,outdoorPedestrianNumPairs,%lu,outdoorPedestrianStatus,%d,outdoorPe destrianSessionStatus,%d,outdoorPedestrianSessionVO2Max,%.5f,outdoorPedestrianEst,%.6f,adaptiveModelNumPairs,%lu,a daptiveModelStatus,%d, adaptiveModelSessionStatus,%d,adaptiveModelSessionVO2Max,%.5f,adaptiveModelEst,%f,adaptiveM odelPrior,%f,betaBlockerUse,%d,longitudinalVO2Max,%f,sessionVO2Max,%f,isEscalation,%d,sessionDuration,%.5f,session Type,%ld,escalationRatio,%f,finalStatus,%d,eligibleForHealthKit,%d,eligibleForCalorimetry,%d,numWorkoutsContrToEstimate,%u",  buf,  0xD4u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10187AE98);
    }
    int v122 = p_vtable[155];
    char v123 = *(void *)a1;
    char v124 = *(unsigned __int8 *)(a1 + 1320);
    __int128 v125 = *(void *)(a1 + 1600);
    unint64_t v126 = *(int *)(a1 + 1608);
    __int128 v127 = *(void *)(a1 + 1616);
    CFStringRef v128 = *(unsigned __int8 *)(a2 + 26);
    __int128 v129 = *(unsigned __int8 *)(a2 + 27);
    __int128 v150 = 134224128;
    *(void *)unint64_t v151 = v123;
    *(_WORD *)&v151[8] = 2048;
    *(double *)&v151[10] = *(float *)&v149;
    *(_WORD *)&v151[18] = 2048;
    *(double *)&v151[20] = *((float *)&v149 + 1);
    *(_WORD *)&v151[28] = 2048;
    *(void *)&v151[30] = 0x8E38E38E38E38E39LL * ((v137 - (_BYTE *)__p) >> 3);
    *(_WORD *)&v151[38] = 1024;
    *(_DWORD *)&v151[40] = HIDWORD(v143);
    uint64_t v152 = 1024;
    __int128 v153 = LODWORD(v143);
    __int128 v154 = 2048;
    __int128 v155 = v142;
    __int128 v156 = 2048;
    v157 = v141;
    __int128 v158 = 2048;
    v159 = *(void *)&v151[30];
    __int128 v160 = 1024;
    CFStringRef v161 = HIDWORD(v143);
    __int128 v162 = 1024;
    uint64_t v163 = LODWORD(v143);
    __int128 v164 = 2048;
    v165 = v142;
    __int128 v166 = 2048;
    uint64_t v167 = v141;
    __int128 v168 = 2048;
    __int128 v169 = *((void *)&v141 + 1);
    __int128 v170 = 1024;
    __int128 v171 = v124;
    __int128 v172 = 2048;
    std::string::size_type v173 = v57;
    std::string::size_type v174 = 2048;
    __int128 v175 = v52;
    __int128 v176 = 1024;
    int v177 = v66 == 3;
    __int128 v178 = 2048;
    v179 = v125;
    std::string::size_type v180 = 2048;
    unint64_t v181 = v126;
    __int128 v182 = 2048;
    v183 = v127;
    __int128 v184 = 1024;
    v185 = v55;
    __int128 v186 = 1024;
    v187 = v128;
    __int128 v188 = 1024;
    v189 = v129;
    __int128 v190 = 1024;
    CFStringRef v191 = v54;
    LODWORD(v132) = 212;
    uint64_t v130 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v122,  0LL,  "VO2Max,currentWorkoutType,%ld,hrmin,%f,hrmax,%f,outdoorPedestrianNumPairs,%lu,outdoorPedestrianStat us,%d,outdoorPedestrianSessionStatus,%d,outdoorPedestrianSessionVO2Max,%.5f,outdoorPedestrianEst,%. 6f,adaptiveModelNumPairs,%lu,adaptiveModelStatus,%d, adaptiveModelSessionStatus,%d,adaptiveModelSes sionVO2Max,%.5f,adaptiveModelEst,%f,adaptiveModelPrior,%f,betaBlockerUse,%d,longitudinalVO2Max,%f,s essionVO2Max,%f,isEscalation,%d,sessionDuration,%.5f,sessionType,%ld,escalationRatio,%f,finalStatus ,%d,eligibleForHealthKit,%d,eligibleForCalorimetry,%d,numWorkoutsContrToEstimate,%u",  &v150,  v132,  v133,  v134,  (_DWORD)v135,  (_DWORD)__p,  *(double *)&v137,  v138,  v139,  v140,  (_DWORD)v141,  *((double *)&v141 + 1),  v142,  v143,  v144,  *(double *)&v145,  *(double *)&v146,  v147,  *(double *)v148,  *(void *)&v148[8],  *(double *)&v148[16],  v149);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "VO2MaxEstimationStatus CLVO2MaxEstimator::evaluateVO2MaxModel(VO2MaxResult &, std::vector<VO2MaxSummary> &, double &, VO2MaxOutput &, const std::vector<VO2MaxSummary> &, CFAbsoluteTime, double)",  "%s\n",  v130);
  }

  *a4 = *((void *)&v141 + 1);
  if (__p)
  {
    __int128 v137 = __p;
    operator delete(__p);
  }

  if (v145)
  {
    CFStringRef v146 = v145;
    operator delete(v145);
  }

  return v55;
}

  uint64_t v19 = 2LL;
LABEL_43:
  uint64_t v48 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v49
  uint64_t v50 = v41;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v52);
  return v19;
}

  operator delete(buf.__r_.__value_.__l.__data_);
  if (v22)
  {
LABEL_33:
    sub_100386874(a2, (uint64_t)__p);
    if ((__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    unint64_t v24 = +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v23));
    uint64_t v25 = v24;
    if ((char)__p[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v25) {
        return;
      }
    }

    else if (!v24)
    {
      return;
    }

    unint64_t v40 = -[NSDictionary objectForKey:](v25, "objectForKey:", @"version");
    if (v40)
    {
      unint64_t v41 = [v40 intValue];
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10187FF38);
      }
      __int128 v42 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        __int128 v43 = *(_DWORD *)(a1 + 224);
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v43;
        LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "Handsfree whitelist current version,%d,new version,%d",  (uint8_t *)__p,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10187FF38);
        }
        uint64_t v83 = *(_DWORD *)(a1 + 224);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v83;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v41;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Handsfree whitelist current version,%d,new version,%d",  &buf,  14);
        uint64_t v85 = (std::string *)v84;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v84);
        if (v85 != __p) {
          free(v85);
        }
      }

      if (v41 > *(_DWORD *)(a1 + 224))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10187FF38);
        }
        __int128 v44 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "Scheduling downloading handsfree whitelist",  (uint8_t *)__p,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10187FF38);
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          LODWORD(v91) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Scheduling downloading handsfree whitelist",  &buf,  v91);
          __int128 v87 = (std::string *)v86;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v86);
          if (v87 != __p) {
            free(v87);
          }
        }

        if ((sub_100385EC0(a1 + 536, (double *)(a1 + 784), (double *)(a1 + 784)) & 1) == 0)
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_10187FF38);
          }
          __int128 v45 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
          {
            __int128 v46 = (void *)(a1 + 512);
            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_FAULT,  "could not start handsfree whitelist file download from %{public}s",  (uint8_t *)__p,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_10187FF38);
            }
            __int128 v47 = qword_101934A78;
            uint64_t v48 = (void *)(a1 + 512);
            goto LABEL_220;
          }
        }
      }
    }

    return;
  }

  uint64_t v19 = 2LL;
LABEL_43:
  uint64_t v61 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v62
  __int128 v63 = v50;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v65);
  return v19;
}

  int v51 = 1;
  switch(a1[41].i32[1])
  {
    case 0:
    case 4:
      goto LABEL_45;
    case 1:
      uint64_t v52 = a1[2].u64[1];
      if (v52 < 3) {
        goto LABEL_47;
      }
      a1[41].i64[0] = 0x200000000LL;
      goto LABEL_53;
    case 3:
      int v51 = 2;
LABEL_45:
      a1[41].i32[1] = v51;
      goto LABEL_46;
    default:
LABEL_46:
      uint64_t v52 = a1[2].u64[1];
LABEL_47:
      a1[41].i32[0] = 0;
      if (v52 == 1)
      {
        std::string v53 = *(std::__shared_weak_count **)(a2 + 24);
        char v66 = *(void *)(a2 + 16);
        int v67 = v53;
        if (v53)
        {
          p_shared_weak_owners = (unint64_t *)&v53->__shared_weak_owners_;
          do
            int v55 = __ldxr(p_shared_weak_owners);
          while (__stxr(v55 + 1, p_shared_weak_owners));
        }

        int v65 = a1[24].i32[2];
        sub_1004CE930((uint64_t)a1[3].i64, (double *)(a2 + 8), &v66, &v65);
        std::string v56 = v67;
        if (!v67) {
          break;
        }
LABEL_58:
        std::__shared_weak_count::__release_weak(v56);
        break;
      }

    __int128 v45 = 0LL;
    if (!v33) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  __int128 v45 = 1LL;
  if (v33) {
LABEL_42:
  }
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
LABEL_43:
  sub_1001BA1BC((id *)&v85);
  *(void *)((char *)v80
  char v81 = v46;
  std::streambuf::~streambuf(&v82);
  std::ios::~ios(&v83);
  return v45;
}

    __int128 v43 = 0LL;
    if (!v31) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  __int128 v43 = 1LL;
  if (v31) {
LABEL_42:
  }
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
LABEL_43:
  sub_1001BA1BC(v74);
  *(void *)((char *)v75
  std::string::size_type v76 = v44;
  std::streambuf::~streambuf(&v77);
  std::ios::~ios(&v78);
  return v43;
}

  uint64_t v19 = 2LL;
LABEL_43:
  unint64_t v40 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v41
  __int128 v42 = v35;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v44);
  return v19;
}

  uint64_t v19 = 2LL;
LABEL_43:
  uint64_t v73 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v74
  __int128 v75 = v62;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v77);
  return v19;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "didCancelSOS", *(_BYTE *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 4u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }

  uint64_t result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 24) = result;
  BOOL v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "totalElevationAscended", *(double *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "instantaneousPace", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  uint64_t result = *(float *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 68) = result;
  BOOL v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "loftMagnitude", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 97), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  char v20 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 80) = v20;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "prevLoftStartTime", *(void *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  uint64_t v4 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 128) = v3;
  *(void *)(a1 + 32) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "quaternionPredictedX", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

            PB::Reader::recallMark(this, v118);
          }

          else
          {
            int v98 = *(char **)(a1 + 40);
            uint64_t v97 = *(void *)(a1 + 48);
            if ((unint64_t)v98 >= v97)
            {
              __int128 v105 = (char *)*v10;
              char v106 = (v98 - (_BYTE *)*v10) >> 2;
              __int128 v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62) {
LABEL_186:
              }
                sub_100007008();
              __int128 v108 = v97 - (void)v105;
              if (v108 >> 1 > v107) {
                __int128 v107 = v108 >> 1;
              }
              else {
                std::string v109 = v107;
              }
              if (v109)
              {
                uint64_t v110 = (char *)sub_10000956C(v11, v109);
                __int128 v105 = *(char **)(a1 + 32);
                int v98 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v110 = 0LL;
              }

              __int128 v113 = &v110[4 * v106];
              *(_DWORD *)__int128 v113 = 0;
              char v92 = v113 + 4;
              while (v98 != v105)
              {
                int v114 = *((_DWORD *)v98 - 1);
                v98 -= 4;
                *((_DWORD *)v113 - 1) = v114;
                v113 -= 4;
              }

              *(void *)(a1 + 32) = v113;
              *(void *)(a1 + 40) = v92;
              *(void *)(a1 + sub_100019CEC(v39 + 48) = &v110[4 * v109];
              if (v105) {
                operator delete(v105);
              }
            }

            else
            {
              *(_DWORD *)int v98 = 0;
              char v92 = v98 + 4;
            }

            *(void *)(a1 + 40) = v92;
LABEL_170:
            __int16 v115 = *((void *)this + 1);
            if (v115 <= 0xFFFFFFFFFFFFFFFBLL && v115 + 4 <= *((void *)this + 2))
            {
              *(v92 - 1) = *(_DWORD *)(*(void *)this + v115);
LABEL_174:
              uint64_t v28 = *((void *)this + 1) + 4LL;
LABEL_175:
              *((void *)this + 1) = v28;
            }

            else
            {
LABEL_172:
              *((_BYTE *)this + 24) = 1;
            }
          }

  __int16 v22 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 76) = v22;
  if ((*(_DWORD *)(a2 + 100) & 0x80000) != 0) {
    goto LABEL_42;
  }
  return result;
}

  PB::TextFormatter::format(this, "sagittalApproachY", *(float *)(a1 + 132));
  uint64_t v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0) {
      goto LABEL_24;
    }
LABEL_43:
    PB::TextFormatter::format(this, "sagittalCount", *(_DWORD *)(a1 + 140));
    if ((*(_DWORD *)(a1 + 144) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_25;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_43:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0x11u);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  uint64_t result = *(float *)(a2 + 64);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 64) = result;
  BOOL v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "configRawRmsMeanFpThreshold", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }

  uint64_t result = *(float *)(a2 + 140);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 140) = result;
  BOOL v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "diffPeakTimeTrigger", *(_DWORD *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 52) = v13;
  BOOL v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "isSuddenTransitionDetected", *(_BYTE *)(a1 + 126));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "spinCumulativeRotationThresholdDegrees", *(float *)(a1 + 192));
  uint64_t v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x1000) != 0) {
    goto LABEL_42;
  }
LABEL_26:
  if ((v21 & 0x10) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180), 0x6Bu);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  double v9 = *(_DWORD *)(a2 + 136);
  v3 |= 0x4000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 136) = v9;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "configLx", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 7u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v21;
  BOOL v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "latchedIsFreeFall", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
LABEL_43:
    PB::TextFormatter::format(this, "latchedIsPulse", *(_DWORD *)(a1 + 52));
    if ((*(_DWORD *)(a1 + 68) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_22;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x195u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x197u);
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x12u);
  if ((*(_DWORD *)(v3 + 124) & 0x2000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x13u);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 80) = result;
  if ((*(_DWORD *)(a2 + 92) & 0x40000) != 0) {
    goto LABEL_42;
  }
  return result;
}

  uint64_t v5 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 56) = v5;
  BOOL v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 76) = v5;
  BOOL v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "habcNumFramesCaptured", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x40000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 1sub_100019CEC(v39 + 48) = v8;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "estimatedAmbientBias", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 6u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000000LL) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "gaze_z", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  uint64_t result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 24) = result;
  BOOL v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "swingAccelAmplitudeZ", *(double *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }

  uint64_t result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 152) = result;
  BOOL v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "shortBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 144));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
LABEL_43:
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedian", *(double *)(a1 + 160));
    if ((*(_DWORD *)(a1 + 176) & 0x100000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_22;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 104), 0x15u);
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 2sub_100019CEC(v39 + 48) = v3;
  *(double *)(a1 + 72) = result;
  BOOL v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ5", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  uint64_t result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 32) = result;
  BOOL v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *(double *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "elevationDescended", *(_DWORD *)(a1 + 108));
  uint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }

  uint64_t result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 20) = result;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "fFTBin5", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  __int128 v15 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 76) = v15;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  char v20 = *(void *)(a2 + 48);
  v5 |= 0x20u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + sub_100019CEC(v39 + 48) = v20;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }

  uint64_t v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 16) = v10;
  BOOL v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  BOOL v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYPed", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 72) = v10;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "auxOverSrcYawDiffSum", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 217), 5u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }

  char v20 = *(_BYTE *)(a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 125) = v20;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 121), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  char v14 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + sub_100019CEC(v39 + 48) = v14;
  BOOL v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "interruptFlag", *(_BYTE *)(a1 + 180));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }

  __int128 v16 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 56) = v16;
  BOOL v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }

  PB::TextFormatter::format(this, "integratedVelocityZForwards", *(double *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

void sub_10004DB54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004DBD4@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  uint64_t result = sub_100013090(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
    sub_1000139B0((uint64_t)&v3);
  }

  return result;
}

void sub_10004DC44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_10004DC70(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  v52.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v52, "SELECT * FROM (");
  char v51 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v8 = std::string::append(&v52, __s, 7uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10004CE2C((uint64_t)__p);
  if ((v49 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v49 & 0x80u) == 0) {
    std::string::size_type v11 = v49;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  __int128 v12 = std::string::append(&v53, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  char v14 = std::string::append(&v54, " FROM ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v16 = std::string::append(&v55, "MicroLocationConfiguration");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v18 = std::string::append(&v56, " ");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    uint64_t v21 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  uint64_t v23 = std::string::append(&v57, v21, v22);
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v25 = std::string::append(&v58, " ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v27 = std::string::append(&v64, " ORDER BY ");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append(&v65, "GenerationTimestamp");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v31 = std::string::append(&v59, " DESC LIMIT ");
  __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v47, a3);
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v33 = &v47;
  }
  else {
    uint64_t v33 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v47.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = std::string::append(&v66, (const std::string::value_type *)v33, size);
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  int v37 = std::string::append(&v60, ") ORDER BY ");
  __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v39 = std::string::append(&v63, "GenerationTimestamp");
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t cap = v39->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v61 = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if (v51 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    unint64_t v41 = (char *)v61;
  }
  else {
    unint64_t v41 = (char *)v61[0];
  }
  sub_1003C0D54(a1, v41, &v63);
  std::string::size_type v42 = v63.__r_.__value_.__r.__words[0];
  __int128 v43 = (sqlite3_stmt *)sub_100019240((uint64_t)v63.__r_.__value_.__l.__data_);
  memset(&v60, 0, sizeof(v60));
  while (j__sqlite3_step(v43) == 100)
  {
    sub_100011CB8(v43, 1, &v66);
    sub_100050220(v43, 3, (uint64_t)&v63);
    sub_100011CB8(v43, 5, &v59);
    std::string::size_type v44 = v59.__r_.__value_.__s.__size_;
    if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v44 = v59.__r_.__value_.__l.__size_;
    }
    if (v44 && (sub_10010147C((uint64_t)&v59, (uint64_t)&v65), v65.__r_.__value_.__s.__data_[16]))
    {
      sub_10010147C((uint64_t)&v59, (uint64_t)&v65);
      if (!v65.__r_.__value_.__s.__data_[16]) {
        sub_100036CD8();
      }
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
    }

    else
    {
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
    }

    std::string::size_type v45 = v60.__r_.__value_.__l.__size_;
    if (v60.__r_.__value_.__l.__size_ >= v60.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v46 = sub_100050330((uint64_t *)&v60, (uint64_t)&v66, (uint64_t)&v63, (uint64_t *)&v64);
    }

    else
    {
      sub_10005046C( (uint64_t)&v60.__r_.__value_.__l.__cap_,  v60.__r_.__value_.__l.__size_,  (uint64_t)&v66,  (uint64_t)&v63,  (uint64_t *)&v64);
      std::string::size_type v46 = v45 + 112;
    }

    v60.__r_.__value_.__l.__size_ = v46;
    sub_10008C0E0((wireless_diagnostics::google::protobuf::MessageLite *)&v63);
  }

  sqlite3_reset(v43);
  *a4 = v60;
  memset(&v60, 0, sizeof(v60));
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  sub_100050CAC((void ***)&v63);
  if (v42) {
    (*(void (**)(std::string::size_type))(*(void *)v42 + 8LL))(v42);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(v61[0]);
  }
}

void sub_10004E21C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  __int128 buf = &a51;
  sub_100050CAC(&buf);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10004E618( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v52.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v52, "WHERE ");
    __int128 v12 = std::string::append(&v52, "ConfigurationType");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    char v14 = std::string::append(&v53, "=");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&__p, a4);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v18 = std::string::append(&v54, (const std::string::value_type *)p_p, size);
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    int v20 = std::string::append(&v55, " AND ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v22 = std::string::append(&v56, "GenerationTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v24 = std::string::append(&v57, "<= ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    int v26 = *(char *)(a5 + 23);
    if (v26 >= 0) {
      uint64_t v27 = (const std::string::value_type *)a5;
    }
    else {
      uint64_t v27 = *(const std::string::value_type **)a5;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(a5 + 8);
    }
    uint64_t v29 = std::string::append(&v58, v27, v28);
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    if (*(_BYTE *)(a2 + 24))
    {
      v54.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v54, " AND ");
      uint64_t v31 = std::string::append(&v54, "RTLOIType");
      __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0LL;
      v31->__r_.__value_.__l.__cap_ = 0LL;
      v31->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v33 = std::string::append(&v55, "=");
      __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0LL;
      v33->__r_.__value_.__l.__cap_ = 0LL;
      v33->__r_.__value_.__r.__words[0] = 0LL;
      if (!*(_BYTE *)(a2 + 24)) {
        sub_100036CD8();
      }
      int v35 = *(char *)(a2 + 23);
      if (v35 >= 0) {
        __int128 v36 = (const std::string::value_type *)a2;
      }
      else {
        __int128 v36 = *(const std::string::value_type **)a2;
      }
      if (v35 >= 0) {
        std::string::size_type v37 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v37 = *(void *)(a2 + 8);
      }
      __int128 v38 = std::string::append(&v56, v36, v37);
      __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v40 = std::string::append(&v57, "");
      __int128 v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__l.__cap_ = v40->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0LL;
      v40->__r_.__value_.__l.__cap_ = 0LL;
      v40->__r_.__value_.__r.__words[0] = 0LL;
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v42 = &v58;
      }
      else {
        std::string::size_type v42 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v43 = v58.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v43 = v58.__r_.__value_.__l.__size_;
      }
      std::string::append(&v59, (const std::string::value_type *)v42, v43);
    }

    if (a3[16])
    {
      v57.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v57, " AND ");
      sub_1010DDBC0(&v55, "RtLoiGroupId");
      if (!a3[16]) {
        sub_100036CD8();
      }
      sub_100053C78((const void **)&v55.__r_.__value_.__l.__data_, a3, (uint64_t)&v56);
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v44 = &v56;
      }
      else {
        std::string::size_type v44 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v45 = v56.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v45 = v56.__r_.__value_.__l.__size_;
      }
      std::string::size_type v46 = std::string::append(&v57, (const std::string::value_type *)v44, v45);
      __int128 v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__l.__cap_ = v46->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0LL;
      v46->__r_.__value_.__l.__cap_ = 0LL;
      v46->__r_.__value_.__r.__words[0] = 0LL;
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v48 = &v58;
      }
      else {
        uint64_t v48 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v49 = v58.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v49 = v58.__r_.__value_.__l.__size_;
      }
      std::string::append(&v59, (const std::string::value_type *)v48, v49);
    }

    sub_10004DC70(*(void *)a1, (uint64_t)&v59, 1u, &v58);
    if (v58.__r_.__value_.__r.__words[0] == v58.__r_.__value_.__l.__size_)
    {
      *a6 = 0;
      a6[112] = 0;
    }

    else
    {
      sub_100050858((uint64_t)a6, (uint64_t)v58.__r_.__value_.__l.__data_);
    }

    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    sub_100050CAC((void ***)&v57);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819C40);
    }
    uint64_t v50 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      v59.__r_.__value_.__r.__words[0] = 68289026LL;
      LOWORD(v59.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, table is not valid so we can't get the most recent configuration before time}",  (uint8_t *)&v59,  0x12u);
    }

    *a6 = 0;
    a6[112] = 0;
  }

void sub_10004EBB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  *(void *)(v47 - 160) = v47 - 128;
  sub_100050CAC((void ***)(v47 - 160));
  _Unwind_Resume(a1);
}

void sub_10004ED7C(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v41.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v41, "WHERE ");
    uint64_t v10 = std::string::append(&v41, "ConfigurationType");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v42, "=");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v40, *a2);
    if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v14 = &v40;
    }
    else {
      char v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v40.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    __int128 v16 = std::string::append(&v43, (const std::string::value_type *)v14, size);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if (*(_BYTE *)(a3 + 24))
    {
      v39.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v39, " AND ");
      unint64_t v18 = std::string::append(&v39, "RTLOIType");
      __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0LL;
      v18->__r_.__value_.__l.__cap_ = 0LL;
      v18->__r_.__value_.__r.__words[0] = 0LL;
      int v20 = std::string::append(&v40, "=");
      __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      if (!*(_BYTE *)(a3 + 24)) {
        sub_100036CD8();
      }
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        __int128 v23 = (const std::string::value_type *)a3;
      }
      else {
        __int128 v23 = *(const std::string::value_type **)a3;
      }
      if (v22 >= 0) {
        std::string::size_type v24 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v24 = *(void *)(a3 + 8);
      }
      __int128 v25 = std::string::append(&v41, v23, v24);
      __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0LL;
      v25->__r_.__value_.__l.__cap_ = 0LL;
      v25->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v27 = std::string::append(&v42, "");
      __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0LL;
      v27->__r_.__value_.__l.__cap_ = 0LL;
      v27->__r_.__value_.__r.__words[0] = 0LL;
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v29 = &v43;
      }
      else {
        uint64_t v29 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v30 = v43.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v30 = v43.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v29, v30);
    }

    if (a4[16])
    {
      v42.__r_.__value_.__s.__size_ = 5;
      strcpy((char *)&v42, " AND ");
      sub_1010DDBC0(&v40, "RtLoiGroupId");
      if (!a4[16]) {
        sub_100036CD8();
      }
      sub_100053C78((const void **)&v40.__r_.__value_.__l.__data_, a4, (uint64_t)&v41);
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v31 = &v41;
      }
      else {
        uint64_t v31 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v32 = v41.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v32 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v33 = std::string::append(&v42, (const std::string::value_type *)v31, v32);
      __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0LL;
      v33->__r_.__value_.__l.__cap_ = 0LL;
      v33->__r_.__value_.__r.__words[0] = 0LL;
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v35 = &v43;
      }
      else {
        int v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v36 = v43.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v35, v36);
    }

    sub_10004DC70(*(void *)a1, (uint64_t)&v44, 1u, &v43);
    if (v43.__r_.__value_.__r.__words[0] == v43.__r_.__value_.__l.__size_)
    {
      *a5 = 0;
      a5[112] = 0;
    }

    else
    {
      sub_100050858((uint64_t)a5, (uint64_t)v43.__r_.__value_.__l.__data_);
    }

    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    sub_100050CAC((void ***)&v42);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819C40);
    }
    std::string::size_type v37 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v44.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get the most recent wifi channel histogram",  (uint8_t *)&v44,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v44, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      LOWORD(v43.__r_.__value_.__l.__data_) = 0;
      __int128 v38 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v44,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get the most recent wifi channel histogram",  &v43,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationConfigurationTable::getMostRecentConfigur ationAtLoi(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std: :optional<const boost::uuids::uuid> &)",  "%s\n",  (const char *)v38);
      if (v38 != &v44) {
        free(v38);
      }
    }

    *a5 = 0;
    a5[112] = 0;
  }

void sub_10004F2C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
}

void sub_10004F434(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  v45[0] = a2;
  v45[1] = a3;
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v6 = (char *)operator new(0x28uLL);
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_1012C8460;
    *(_OWORD *)uint64_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *(void *)(v6 + 29) = 0LL;
    sub_10000AE6C((uint64_t)v45, v6);
    std::string::size_type size = v44.__r_.__value_.__s.__size_;
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &v44;
    }
    else {
      uint64_t v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v44.__r_.__value_.__l.__size_;
    }
    LOBYTE(v42) = 45;
    __int128 v9 = sub_10004F988(v8, (unsigned __int8 *)v8 + size, (unsigned __int8 *)&v42);
    uint64_t v10 = (char *)&v44 + v44.__r_.__value_.__s.__size_;
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0)
    {
      __int128 v11 = &v44;
    }

    else
    {
      uint64_t v10 = (char *)(v44.__r_.__value_.__r.__words[0] + v44.__r_.__value_.__l.__size_);
      __int128 v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }

    std::string::erase(&v44, v9 - (unsigned __int8 *)v11, v10 - (char *)v9);
    v34.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v34, "WHERE ");
    __int128 v12 = std::string::append(&v34, "ConfigurationType");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    char v14 = std::string::append(&v35, "=");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&__p, 2);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v17 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    unint64_t v18 = std::string::append(&v36, (const std::string::value_type *)p_p, v17);
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    int v20 = std::string::append(&v37, " AND HEX(");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    int v22 = std::string::append(&v38, "Configuration");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v24 = std::string::append(&v39, ") LIKE '%");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v44;
    }
    else {
      __int128 v26 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v27 = v44.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v27 = v44.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v40, (const std::string::value_type *)v26, v27);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v30 = std::string::append(&v41, "%'");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type cap = v30->__r_.__value_.__l.__cap_;
    __int128 v42 = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    sub_10004DC70(*(void *)a1, (uint64_t)&v42, 1u, &v41);
    if (v41.__r_.__value_.__r.__words[0] == v41.__r_.__value_.__l.__size_)
    {
      *a4 = 0;
      a4[112] = 0;
    }

    else
    {
      sub_100050858((uint64_t)a4, (uint64_t)v41.__r_.__value_.__l.__data_);
    }

    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    sub_100050CAC((void ***)&v40);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v42);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819C40);
    }
    std::string::size_type v32 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      v44.__r_.__value_.__r.__words[0] = 68289026LL;
      LOWORD(v44.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, table is not valid so we can't get cluster anchor value statistics maps from it}",  (uint8_t *)&v44,  0x12u);
    }

    *a4 = 0;
    a4[112] = 0;
  }

void sub_10004F858( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, void *__p, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  *(void *)(v54 - 192) = v54 - 160;
  sub_100050CAC((void ***)(v54 - 192));
  _Unwind_Resume(a1);
}

void sub_10004F97C()
{
}

unsigned __int8 *sub_10004F988(const void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }

    while (v6 != a2);
  }

  return result;
}

BOOL sub_10004F9EC(uint64_t a1, unint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v42.__r_.__value_.__s.__size_ = 12;
    strcpy((char *)&v42, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v42, "MicroLocationConfiguration");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v6 = std::string::append(&v43, " WHERE ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    int v8 = std::string::append(&v44, "GenerationTimestamp");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v10 = std::string::append(&v45, " IN (");
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v46, "SELECT ");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    char v14 = std::string::append(&v47, "GenerationTimestamp");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v16 = std::string::append(&v48, " FROM ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v18 = std::string::append(&v49, "MicroLocationConfiguration");
    __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    int v20 = std::string::append(&v50, " ORDER BY ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    int v22 = std::string::append(&v51, "GenerationTimestamp");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v24 = std::string::append(&v52, " LIMIT ");
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v41, a2);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v26 = &v41;
    }
    else {
      __int128 v26 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v41.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v53, (const std::string::value_type *)v26, size);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v30 = std::string::append(&v56, ")");
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v32 = (char *)__p;
    }
    else {
      std::string::size_type v32 = (char *)__p[0];
    }
    sub_1003C0D54(*(void *)a1, v32, &v56);
    std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
    std::string v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v56.__r_.__value_.__l.__data_);
    if (v34)
    {
      BOOL v35 = sub_1003BB2BC(*(void *)a1, v34);
      if (!v33) {
        goto LABEL_42;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
      std::string v38 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Error getting a prepared statement",  (uint8_t *)&v56,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v56, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819C40);
        }
        LOWORD(v53.__r_.__value_.__l.__data_) = 0;
        std::string v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Error getting a prepared statement",  &v53,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationConfigurationTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v40);
        if (v40 != &v56) {
          free(v40);
        }
      }

      BOOL v35 = 0LL;
      if (!v33) {
        goto LABEL_42;
      }
    }

    (*(void (**)(std::string::size_type))(*(void *)v33 + 8LL))(v33);
LABEL_42:
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return v35;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819C40);
  }
  std::string v36 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't deleteOldestRows",  (uint8_t *)&v56,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v56, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819C40);
    }
    LOWORD(__p[0]) = 0;
    std::string v39 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v56,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't deleteOldestRows",  __p,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationConfigurationTable::deleteOldestRows(uint64_t)",  "%s\n",  (const char *)v39);
    if (v39 != &v56) {
      free(v39);
    }
  }

  return 0LL;
}

void sub_100050064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, void *a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000501F4(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100050220@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sqlite3_column_blob(a1, a2);
  int v7 = sqlite3_column_bytes(a1, a2);
  if (!v6) {
    sub_1012267EC();
  }
  int v8 = v7;
  sub_100063BC8(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1010DDBC0(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_101819400;
  }

  return result;
}

void sub_1000502E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_10008C0E0(v15);
      _Unwind_Resume(a1);
    }
  }

  else if (!v17)
  {
    goto LABEL_6;
  }

  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100050330(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  else {
    unint64_t v10 = v6;
  }
  unint64_t v18 = a1 + 2;
  if (v10) {
    __int128 v11 = (char *)sub_10005057C((uint64_t)(a1 + 2), v10);
  }
  else {
    __int128 v11 = 0LL;
  }
  char v14 = v11;
  __int128 v15 = &v11[112 * v5];
  int v17 = &v11[112 * v10];
  sub_10005046C((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  __int128 v16 = v15 + 112;
  sub_100050508(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000507E4(&v14);
  return v12;
}

void sub_100050458(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10005046C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
  }

  sub_10004CFBC(a2, (__int128 *)__p, a4, *a5, a5[1]);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000504EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100050508(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1000505C4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10005057C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1000070D4();
  }
  return operator new(112 * a2);
}

uint64_t sub_1000505C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 112LL;
      sub_10005068C(a1, v7 - 112, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 112LL;
      *((void *)&v16 + 1) -= 112LL;
    }

    while (v9 != a5);
    uint64_t v11 = v16;
  }

  char v14 = 1;
  sub_100050724((uint64_t)v13);
  return v11;
}

void sub_100050678( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10005068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1010DD48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }

  __int128 v7 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + sub_100019CEC(v39 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v7;
  return sub_10008C06C(a2 + 56, a3 + 56);
}

void sub_100050708(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100050724(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100050758((uint64_t *)a1);
  }
  return a1;
}

void sub_100050758(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1000507A8(v3, v1);
      v1 += 112LL;
    }

    while (v1 != v2);
  }

void sub_1000507A8(uint64_t a1, uint64_t a2)
{
}

void **sub_1000507E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100050814(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    sub_1000507A8(v4, i - 112);
  }

uint64_t sub_100050858(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }

  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  sub_10008C06C(a1 + 56, a2 + 56);
  *(_BYTE *)(a1 + 112) = 1;
  return a1;
}

void sub_1000508E0(_Unwind_Exception *exception_object)
{
}

double sub_1000508FC@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100050940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005095C(std::string *a1)
{
  return sub_10003E884(a1);
}

uint64_t sub_1000509A0(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ConfigurationType");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100050A48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100050A7C(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "Configuration");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    __int128 v4 = __p;
  }
  else {
    __int128 v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100050B24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_100050B58@<D0>(std::string *a1@<X8>)
{
  uint64_t v2 = 6LL;
  do
  {
    if (v2 == 6)
    {
      v8.__r_.__value_.__s.__size_ = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }

    else
    {
      v8.__r_.__value_.__s.__size_ = 2;
      strcpy((char *)&v8, ", ");
    }

    __int128 v3 = std::string::append(&v8, "?");
    __int128 v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t cap = v3->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0LL;
    v3->__r_.__value_.__l.__cap_ = 0LL;
    v3->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v6 = HIBYTE(cap);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    --v2;
  }

  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_100050C60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050CAC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::size_type v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112LL;
        sub_1000507A8((uint64_t)(v1 + 2), v4);
      }

      while ((void *)v4 != v2);
      std::string::size_type v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100050D30()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationConfiguration");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_10004CE2C((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  std::string::size_type v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::string v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_10004CEF4((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993A20 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993A10 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993A10,  (void *)&_mh_execute_header);
}

void sub_100050F1C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050FC8(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934BD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934BD0))
  {
    sub_1000550E0((std::string *)&xmmword_101934BB8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934BB8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934BD0);
  }

  if (byte_101934BCF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934BB8, *((unint64_t *)&xmmword_101934BB8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934BB8;
    *(void *)(a1 + 16) = unk_101934BC8;
  }

void sub_100051078(_Unwind_Exception *a1)
{
}

void sub_100051090(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101934BF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101934BF0))
  {
    sub_100012F3C((std::string *)&xmmword_101934BD8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101934BD8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101934BF0);
  }

  if (byte_101934BEF < 0)
  {
    sub_1010DD48C((_BYTE *)a1, (void *)xmmword_101934BD8, *((unint64_t *)&xmmword_101934BD8 + 1));
  }

  else
  {
    *(_OWORD *)a1 = xmmword_101934BD8;
    *(void *)(a1 + 16) = unk_101934BE8;
  }

void sub_100051140(_Unwind_Exception *a1)
{
}

void sub_100051158(uint64_t *a1)
{
  BOOL v2 = sub_1003C1048(*a1);
  *((_BYTE *)a1 + 8) = v2;
  if (v2)
  {
    sub_1003B59A0(*a1, "MiLoLoiTable", (const char **)&off_101819DD0, 0LL, 0);
    char v3 = sub_1003B747C(*a1, "MiLoLoiTable");
    *((_BYTE *)a1 + 8) = v3;
    if ((v3 & 1) != 0)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      uint64_t v4 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v12 = "MiLoLoiTable";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Sucessfully created table if necessary: %s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819DB0);
        }
        uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Sucessfully created table if necessary: %s",  &v9);
LABEL_19:
        __int128 v7 = (uint8_t *)v5;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMiLoLoiTable::initTable()", "%s\n");
LABEL_29:
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      std::string v8 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136446210;
        uint64_t v12 = "MiLoLoiTable";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to create table: %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819DB0);
        }
        int v9 = 136446210;
        unint64_t v10 = "MiLoLoiTable";
        __int128 v7 = (uint8_t *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to create table: %{public}s",  &v9,  12);
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMiLoLoiTable::initTable()", "%s\n");
        goto LABEL_29;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    std::string::size_type v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Database is not connected so we can't intialize our table",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      uint64_t v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Database is not connected so we can't intialize our table");
      goto LABEL_19;
    }
  }

uint64_t sub_100051544(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_100051158((uint64_t *)a1);
  return a1;
}

uint64_t sub_100051570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, double a7)
{
  *(double *)a1 = a7;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  uint64_t v8 = a1 + 40;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)v8, *(void **)a6, *((void *)a6 + 1));
  }

  else
  {
    __int128 v9 = *a6;
    *(void *)(v8 + 16) = *((void *)a6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }

  return a1;
}

void sub_1000515C4(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int a3@<W3>, std::string *a4@<X8>)
{
  v49.__r_.__value_.__s.__size_ = 15;
  strcpy((char *)&v49, "SELECT * FROM (");
  char v48 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v8 = std::string::append(&v49, __s, 7uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_100050FC8((uint64_t)__p);
  if ((v46 & 0x80u) == 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v11 = v46;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v50, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  char v14 = std::string::append(&v51, " FROM ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  unsigned __int8 v16 = std::string::append(&v52, "MiLoLoiTable");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  unsigned __int8 v18 = std::string::append(&v53, " ");
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    std::string v21 = (const std::string::value_type *)a2;
  }
  else {
    std::string v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  std::string v23 = std::string::append(&v59, v21, v22);
  __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0LL;
  v23->__r_.__value_.__l.__cap_ = 0LL;
  v23->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v25 = std::string::append(&v60, " ORDER BY ");
  __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0LL;
  v25->__r_.__value_.__l.__cap_ = 0LL;
  v25->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v27 = std::string::append(&v54, "LastSeenTimeStamp");
  __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v29 = std::string::append(&v61, " DESC LIMIT ");
  __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v44, a3);
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int128 v31 = &v44;
  }
  else {
    __int128 v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v44.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  std::string::size_type v33 = std::string::append(&v55, (const std::string::value_type *)v31, size);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  char v43 = 1;
  strcpy(v42, ")");
  BOOL v35 = std::string::append(&v58, v42, 1uLL);
  __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  int64_t cap = v35->__r_.__value_.__l.__cap_;
  __int128 v56 = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  if (v43 < 0) {
    operator delete(*(void **)v42);
  }
  if (v48 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    std::string v37 = (char *)&v56;
  }
  else {
    std::string v37 = (char *)v56;
  }
  sub_1003C0D54(a1, v37, &v58);
  std::string::size_type v38 = v58.__r_.__value_.__r.__words[0];
  std::string v39 = (sqlite3_stmt *)sub_100019240((uint64_t)v58.__r_.__value_.__l.__data_);
  memset(&v55, 0, sizeof(v55));
  while (j__sqlite3_step(v39) == 100)
  {
    v53.__r_.__value_.__r.__words[0] = sqlite3_column_double(v39, 1);
    sub_100011CB8(v39, 2, &v58);
    sub_100011CB8(v39, 3, &v61);
    sub_100011CB8(v39, 4, &v54);
    sub_10010147C((uint64_t)&v58, (uint64_t)&v60);
    if (!v60.__r_.__value_.__s.__data_[16]) {
      sub_100036CD8();
    }
    sub_10010147C((uint64_t)&v61, (uint64_t)&v59);
    if (!v59.__r_.__value_.__s.__data_[16]) {
      sub_100036CD8();
    }
    std::string::size_type v40 = v55.__r_.__value_.__l.__size_;
    if (v55.__r_.__value_.__l.__size_ >= v55.__r_.__value_.__l.__cap_)
    {
      std::string::size_type v41 = sub_100055410((uint64_t *)&v55, (uint64_t *)&v53, (__int128 *)&v60, (__int128 *)&v59, (uint64_t)&v54);
    }

    else
    {
      sub_100055524( (uint64_t)&v55.__r_.__value_.__l.__cap_,  v55.__r_.__value_.__l.__size_,  (uint64_t *)&v53,  (__int128 *)&v60,  (__int128 *)&v59,  (uint64_t)&v54);
      std::string::size_type v41 = v40 + 64;
    }

    v55.__r_.__value_.__l.__size_ = v41;
  }

  sqlite3_reset(v39);
  *a4 = v55;
  memset(&v55, 0, sizeof(v55));
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  sub_10003706C((void ***)&v58);
  if (v38) {
    (*(void (**)(std::string::size_type))(*(void *)v38 + 8LL))(v38);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v56);
  }
}

void sub_100051B2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void **buf)
{
  __int128 buf = &a47;
  sub_10003706C(&buf);
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100051EEC()
{
}

void sub_100051F00(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x100051D14LL);
}

uint64_t sub_100051F10(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (byte_101993A3F >= 0) {
      uint64_t v5 = (char *)&xmmword_101993A28;
    }
    else {
      uint64_t v5 = (char *)xmmword_101993A28;
    }
    sub_1003C0D54(v4, v5, &v30);
    uint64_t v6 = a2[1];
    if (*a2 != v6)
    {
      uint64_t v7 = *a2 + 40LL;
      while (1)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_100019240(v30);
        double v9 = *(double *)(v7 - 40);
        memset(&v29, 0, sizeof(v29));
        if ((sub_100013090(v7 - 32, &v29) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        memset(&__p, 0, sizeof(__p));
        if ((sub_100013090(v7 - 16, &__p) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&buf);
          *(void *)&__int128 buf = &off_101818CB0;
          sub_1000139B0((uint64_t)&buf);
        }

        if (!sub_1003B7480(v8, 2, v9)) {
          break;
        }
        unint64_t v10 = (v29.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v29 : (std::string *)v29.__r_.__value_.__r.__words[0];
        std::string::size_type v11 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        uint64_t v12 = (char *)v7;
        if (!sub_1003BC1F0(v8, 5, v12)) {
          break;
        }
        if (!sub_1003BB2BC(*(void *)a1, v8))
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101819DB0);
          }
          __int128 v17 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            if (byte_101993A3F >= 0) {
              unsigned __int8 v18 = &xmmword_101993A28;
            }
            else {
              unsigned __int8 v18 = (__int128 *)xmmword_101993A28;
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to execute statement. %{public}s",  (uint8_t *)&buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_101819DB0);
            }
            if (byte_101993A3F >= 0) {
              __int128 v19 = &xmmword_101993A28;
            }
            else {
              __int128 v19 = (__int128 *)xmmword_101993A28;
            }
            int v31 = 136446210;
            std::string::size_type v32 = v19;
            LODWORD(v27) = 12;
            int v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to execute statement. %{public}s",  &v31,  v27);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoLoiTable::insertOrReplace(const std::vector<CLMiLoLoiTable::Entry> &)",  "%s\n",  v20);
          }

LABEL_32:
          uint64_t v13 = 0LL;
          goto LABEL_33;
        }

        uint64_t v13 = 1LL;
LABEL_33:
        if (v7 + 24 == v6) {
          char v16 = 0;
        }
        else {
          char v16 = v13;
        }
        v7 += 64LL;
        if ((v16 & 1) == 0) {
          goto LABEL_71;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      char v14 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993A3F >= 0) {
          __int128 v15 = &xmmword_101993A28;
        }
        else {
          __int128 v15 = (__int128 *)xmmword_101993A28;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819DB0);
        }
        if (byte_101993A3F >= 0) {
          std::string v21 = &xmmword_101993A28;
        }
        else {
          std::string v21 = (__int128 *)xmmword_101993A28;
        }
        int v31 = 136380675;
        std::string::size_type v32 = v21;
        LODWORD(v27) = 12;
        std::string::size_type v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v31,  v27);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoLoiTable::insertOrReplace(const std::vector<CLMiLoLoiTable::Entry> &)",  "%s\n",  v22);
      }

      sqlite3_reset(v8);
      goto LABEL_32;
    }

    uint64_t v13 = 1LL;
LABEL_71:
    uint64_t v24 = v30;
    uint64_t v30 = 0LL;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    std::string v23 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      __int128 v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v29,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMiLoLoiTable::insertOrReplace(const std::vector<CLMiLoLoiTable::Entry> &)",  "%s\n",  v26);
    }

    return 0LL;
  }

  return v13;
}

      ++v14;
    }

    while (v14 != v13);
LABEL_40:
    if (v15 != v13 && v15 == v11) {
      return 1LL;
    }
  }

  __int128 v19 = 17LL;
  if (v1 < 0x11) {
    __int128 v19 = v1;
  }
  if (v19)
  {
    int v20 = &v11[v19];
    std::string v21 = v11;
    std::string::size_type v22 = v20;
    do
    {
      if (*v21 == 73)
      {
        std::string v23 = &_mh_execute_header.magic + 1;
        while (v23 != 17)
        {
          if (&v21[v23] == v20) {
            goto LABEL_56;
          }
          uint64_t v24 = v21[v23];
          __int128 v25 = aInternalclient_0[v23++];
          if (v24 != v25) {
            goto LABEL_48;
          }
        }

        std::string::size_type v22 = v21;
      }

        *((void *)this + 1) = v20 + 1;
      }
    }

    if (v10 != 3)
    {
      std::string::size_type v11 = v9 & 7;
      goto LABEL_26;
    }

    std::string::size_type v11 = v9 & 7;
    if (v11 == 2) {
      break;
    }
    if ((v9 & 7) == 0)
    {
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = (char *)*((void *)this + 2);
      goto LABEL_51;
    }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  std::string::size_type v11 = *(void *)(v5 + 40);
  if (!v11) {
    std::string::size_type v11 = *(void *)(qword_1019A0980 + 40);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }

          char v16 = 0LL;
          goto LABEL_33;
        }

        char v16 = 1LL;
LABEL_33:
        if (SHIBYTE(v33) < 0) {
          operator delete(__p);
        }
        uint64_t v7 = v11 + 88;
        if (v11 + 88 == v6) {
          __int128 v19 = 0;
        }
        else {
          __int128 v19 = v16;
        }
        if ((v19 & 1) == 0) {
          goto LABEL_71;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181DDB8);
      }
      __int128 v17 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993A6F >= 0) {
          unsigned __int8 v18 = &xmmword_101993A58;
        }
        else {
          unsigned __int8 v18 = (__int128 *)xmmword_101993A58;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181DDB8);
        }
        if (byte_101993A6F >= 0) {
          uint64_t v24 = &xmmword_101993A58;
        }
        else {
          uint64_t v24 = (__int128 *)xmmword_101993A58;
        }
        __int128 v36 = 136380675;
        std::string v37 = v24;
        LODWORD(v30) = 12;
        __int128 v25 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v36,  v30);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMicroLocationMeasurementTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v25);
      }

      sqlite3_reset(v8);
      goto LABEL_32;
    }

    char v16 = 1LL;
LABEL_71:
    uint64_t v27 = v35;
    BOOL v35 = 0LL;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181DDB8);
    }
    __int128 v26 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181DDB8);
      }
      LOWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::string v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &v34,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationMeasurementTable::insertOrReplace(const std::vector<Entry> &)",  "%s\n",  v29);
    }

    return 0LL;
  }

  return v16;
}

        __int128 v28 = (unsigned __int8 *)sub_1000F0EF4(v10);
        std::string v29 = v28[23];
        if ((v29 & 0x80u) == 0LL) {
          uint64_t v30 = v28[23];
        }
        else {
          uint64_t v30 = *((void *)v28 + 1);
        }
        int v31 = a5[23];
        std::string::size_type v32 = (char)v31;
        if ((v31 & 0x80u) != 0LL) {
          int v31 = *((void *)a5 + 1);
        }
        if (v30 == v31)
        {
          if (v32 >= 0) {
            std::string::size_type v33 = a5;
          }
          else {
            std::string::size_type v33 = *(unsigned __int8 **)a5;
          }
          if ((v29 & 0x80) == 0)
          {
            if (v28[23])
            {
              while (*v28 == *v33)
              {
                ++v28;
                ++v33;
                if (!--v29) {
                  goto LABEL_65;
                }
              }

              goto LABEL_47;
            }

            goto LABEL_65;
          }

          if (!memcmp(*(const void **)v28, v33, *((void *)v28 + 1)))
          {
LABEL_65:
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181EDA0);
            }
            unsigned __int8 v46 = (os_log_s *)qword_1019348D8;
            if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 68289026;
              std::string v64 = 0;
              std::string v65 = 2082;
              uint64_t v66 = "";
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMiLoServiceManager::disconnect, releasing model and updating service time}",  buf,  0x12u);
            }

            sub_1000E6F98((uint64_t)a1, v10);
            std::string v47 = a1[13];
            char v48 = sub_1000F0EE0(v10);
            std::string v50 = v49;
            CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
            std::string v52 = sub_1000F0F50(v10);
            std::string v53 = (__int128 *)sub_1000F0EEC(v10);
            std::string v54 = sub_1000F0F58(v10);
            std::string v55 = (__int128 *)sub_1000F0EF4(v10);
            sub_1000F98E0((uint64_t)buf, v48, v50, v52, v53, v54, v55, Current_1);
            uint64_t v58 = 0LL;
            std::string v59 = 0LL;
            std::string v60 = 0LL;
            std::string v61 = &v58;
            uint64_t v62 = 0;
            uint64_t v58 = (char *)operator new(0x58uLL);
            std::string v59 = (uint64_t)v58;
            std::string v60 = v58 + 88;
            std::string v59 = sub_1000EAD2C((uint64_t)&v60, (uint64_t)buf, (uint64_t)&v77, (uint64_t)v58);
            sub_1000E4B58(v47, &v58);
            std::string v61 = &v58;
            sub_1000AA544((void ***)&v61);
            if (v76 < 0) {
              operator delete(*(void **)((char *)__p + 4));
            }
            if (SBYTE5(v73) < 0) {
              operator delete(*(void **)&v70[2]);
            }
            __int128 v56 = sub_1000F0EE0(v10);
            sub_1000E71B0(a1, v56, v57);
            return -1LL;
          }
        }

          uint64_t v12 = 0LL;
          goto LABEL_33;
        }

        uint64_t v12 = 1LL;
LABEL_33:
        if (v7 == v6) {
          __int128 v15 = 0;
        }
        else {
          __int128 v15 = v12;
        }
        v7 += 88LL;
        if ((v15 & 1) == 0) {
          goto LABEL_69;
        }
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F268);
      }
      uint64_t v13 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (byte_101993A87 >= 0) {
          char v14 = &xmmword_101993A70;
        }
        else {
          char v14 = (__int128 *)xmmword_101993A70;
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181F268);
        }
        if (byte_101993A87 >= 0) {
          std::string v21 = &xmmword_101993A70;
        }
        else {
          std::string v21 = (__int128 *)xmmword_101993A70;
        }
        std::string::size_type v32 = 136380675;
        std::string::size_type v33 = v21;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Failed to bind on INSERT OR REPLACE for sql %{private}s",  &v32,  v29);
        std::string v23 = (char *)v22;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoServiceTable::insertOrReplace(const std::vector<CLMiLoServiceTable::Entry> &)",  "%s\n",  v22);
      }

      sqlite3_reset(v8);
      goto LABEL_32;
    }

    uint64_t v12 = 1LL;
LABEL_69:
    __int128 v25 = v31;
    int v31 = 0LL;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181F268);
    }
    uint64_t v24 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't insert or replace",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F268);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't insert or replace",  &__p,  2);
      __int128 v28 = (char *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMiLoServiceTable::insertOrReplace(const std::vector<CLMiLoServiceTable::Entry> &)",  "%s\n",  v27);
    }

    return 0LL;
  }

  return v12;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  (int)a2,  *(double *)(v5 + 112),  a3);
  if ((*(_DWORD *)(v5 + 132) & 0x4000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 120),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  (int)a2,  *(double *)(v5 + 112),  a3);
  if ((*(_DWORD *)(v5 + 132) & 0x4000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 120),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  (int)a2,  *(double *)(v5 + 104),  a3);
  if ((*(_DWORD *)(v5 + 124) & 0x4000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 112),  a3);
  }
  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 60) & 0x1000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 49),  (BOOL)a2,  a4);
  }
  return result;
}

  double v9 = *(void *)(v5 + 24);
  if (!v9) {
    double v9 = *(void *)(qword_1019A0CF0 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }

    uint64_t v12 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 68) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v12;
    uint64_t v6 = *(_DWORD *)(a2 + 68);
    if ((v6 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v7 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 68) |= 0x40u;
    *(_BYTE *)(a1 + 40) = v7;
    uint64_t v6 = *(_DWORD *)(a2 + 68);
LABEL_12:
    if ((v6 & 0x80) != 0)
    {
      LODWORD(result) = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 68) |= 0x80u;
      *(_DWORD *)(a1 + 44) = LODWORD(result);
      uint64_t v6 = *(_DWORD *)(a2 + 68);
    }
  }

  if ((v6 & 0xFF00) == 0) {
    return result;
  }
  if ((v6 & 0x100) == 0)
  {
    if ((v6 & 0x200) == 0) {
      goto LABEL_17;
    }
LABEL_36:
    LODWORD(result) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 68) |= 0x200u;
    *(_DWORD *)(a1 + 52) = LODWORD(result);
    if ((*(_DWORD *)(a2 + 68) & 0x400) == 0) {
      return result;
    }
    goto LABEL_37;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) |= 0x100u;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = LODWORD(result);
  uint64_t v6 = *(_DWORD *)(a2 + 68);
  if ((v6 & 0x200) != 0) {
    goto LABEL_36;
  }
LABEL_17:
  if ((v6 & 0x400) == 0) {
    return result;
  }
LABEL_37:
  *(_DWORD *)(a1 + 68) |= 0x400u;
  uint64_t v13 = *(char **)(a1 + 56);
  if (!v13)
  {
    uint64_t v13 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v13 = off_101829638;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *((void *)v13 + 5) = 0LL;
    *(void *)(a1 + 56) = v13;
  }

  char v14 = *(void *)(a2 + 56);
  if (!v14) {
    char v14 = *(void *)(qword_1019A0D10 + 56);
  }
  return sub_1001F53A4((uint64_t)v13, v14);
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  a2,  *(float *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  __int128 v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v15 >= 0x80)
  {
    char v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    char v3 = *(_DWORD *)(a1 + 48);
  }

  else
  {
    char v16 = 2;
  }

  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_18:
    if ((v3 & 0x80) == 0) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }

  double result = sub_100481740(a1);
  if ((result & 1) != 0)
  {
    *(void *)__int128 buf = v13;
    return sub_100CCCC8C(a1, 13, (uint64_t)buf);
  }

  return result;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  PBDataWriterWriteFloatField(a3, 10LL, self->_minGoodCatherine);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_11:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  *((_DWORD *)a3 + 11) = LODWORD(self->_minGoodCatherine);
  *((_DWORD *)a3 + 26) |= 0x80u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_11:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  *((_DWORD *)result + 18) = self->_nSampleAndHoldCatherine;
  *((_DWORD *)result + 26) |= 0x4000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_10:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  self->_minGoodCatherine = *((float *)a3 + 11);
  *(_DWORD *)&self->_has |= 0x80u;
  char v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x10) == 0)
  {
LABEL_11:
    if ((v3 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  a2,  *(double *)(v5 + 80),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  uint64_t v13 = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 104) |= 0x400u;
  *(void *)(a1 + 72) = v13;
  uint64_t v5 = *(_DWORD *)(a2 + 104);
  if ((v5 & 0x800) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_34;
  }

  uint64_t v7 = *(void *)(v5 + 80);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1250 + 80);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 104) & 0x8000) != 0)
  {
LABEL_35:
    uint64_t v8 = *(void *)(v5 + 88);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A1250 + 88);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v8,  a2,  a4);
  }

  return result;
}

  char v14 = a2[13];
  a1[20] |= 0x800u;
  a1[13] = v14;
  uint64_t v5 = a2[20];
  if ((v5 & 0x1000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v5[15],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  __int128 v15 = *(void *)(a1 + 48);
  if (!v15) {
    __int128 v15 = *(void *)(qword_1019A13D8 + 48);
  }
  char v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100636C18(v15, a2);
  __int128 v17 = (int)v16;
  else {
    unsigned __int8 v18 = 1;
  }
  v4 += v17 + v18 + 1;
  if ((*(_DWORD *)(a1 + 72) & 0x40) != 0)
  {
LABEL_38:
    __int128 v19 = *(void *)(a1 + 56);
    if (!v19) {
      __int128 v19 = *(void *)(qword_1019A13D8 + 56);
    }
    int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100637270(v19, a2);
    std::string v21 = (int)v20;
    else {
      std::string::size_type v22 = 1;
    }
    v4 += v21 + v22 + 1;
  }

  char v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v14 >= 0x80)
  {
    __int128 v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
    char v3 = *(_DWORD *)(a1 + 40);
  }

  else
  {
    __int128 v15 = 2;
  }

  uint64_t v4 = (v15 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_36:
    char v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    else {
      __int128 v17 = 2;
    }
    uint64_t v4 = (v17 + v4);
  }

  __int128 v17 = a2[12];
  a1[17] |= 0x400u;
  a1[12] = v17;
  uint64_t v5 = a2[17];
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }

    uint64_t v24 = 2LL;
    if (!v18) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  std::string v21 = sub_1006F705C(&v34, &v36);
  std::string::size_type v22 = sub_1006F705C(&v33, &v35);
  if (v21 == 2 || v22 == 2)
  {
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_10184BF50);
    }
    uint64_t v27 = (os_log_s *)qword_1019345F8;
    if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Database upper and/or lower time bound query failed.",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019345F0 != -1) {
        dispatch_once(&qword_1019345F0, &stru_10184BF50);
      }
      LOWORD(v32.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345F8,  0LL,  "Database upper and/or lower time bound query failed.",  &v32,  2);
      std::string v29 = (void **)v28;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityDB::ActivityCode CLSensorRecorderDb::getSensorRecordMetaIdsBounds(CFAbsoluteTime, CFAbsoluteTime, CLSe nsorRecorderSensorMeta *, CLSensorRecorderSensorMeta *) const",  "%s\n",  v28);
LABEL_48:
      if (v29 != __p) {
        free(v29);
      }
      goto LABEL_32;
    }

    goto LABEL_32;
  }

  uint64_t v24 = v21 == 1 || v22 == 1;
  if (!v18) {
    goto LABEL_34;
  }
LABEL_33:
  (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
LABEL_34:
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  return v24;
}

        dispatch_once(&qword_1019344E0, &stru_10184FFD8);
        goto LABEL_28;
      }

      v1 += 152LL;
      if (v1 == v2) {
        return 1LL;
      }
    }

    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10184FFD8);
    }
    double v9 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "programmer error, entries passed into calculateSessionSWOLF should all have same session id",  buf,  2u);
    }

    unint64_t v10 = sub_1002921D0(115, 0);
    double result = 0LL;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344E0 == -1) {
        goto LABEL_28;
      }
      goto LABEL_32;
    }
  }

  return result;
}

      std::string v49 = v46
          * (0.015
           / (exp( (0.9 - sqrtf( (float)((float)((float)(v146 / (float)v44) * (float)(v146 / (float)v44))
                         + (float)((float)(v147 / (float)v44) * (float)(v147 / (float)v44)))
                 + (float)((float)(v43 / (float)v44) * (float)(v43 / (float)v44))))
              / 0.08)
            + 1.0))
          + 0.00000900000032;
      if (*(_BYTE *)(a1 + 224) && !*(_DWORD *)(a1 + 616)) {
        std::string v49 = v49 * 0.85;
      }
      *(double *)&uint64_t v152 = v40 / v45;
      *((double *)&v152 + 1) = v41 / v45;
      __int128 v153 = v42 / v45;
      sub_1007C353C(a1, (double *)&v152, v49);
      if (*(_BYTE *)(a1 + 224)) {
        sub_1007C0D6C((double *)(a1 + 576), (double *)(a1 + 16));
      }
      *(void *)(a1 + 608) = *a5;
      std::string v50 = *(_DWORD *)(a1 + 616);
      std::string v51 = __OFSUB__(v50, 1);
      std::string v52 = v50 - 1;
      if (v52 < 0 == v51)
      {
        *(_DWORD *)(a1 + 616) = v52;
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018504C8);
        }
        std::string v53 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "Doing some crude updates to catch up.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018504C8);
          }
          *(_WORD *)__int128 v154 = 0;
          LODWORD(v137) = 2;
          char v119 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Doing some crude updates to catch up.",  v154,  *(void *)&v137);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v119);
          if (v119 != buf) {
            free(v119);
          }
        }
      }

      if (*(_BYTE *)(a1 + 196))
      {
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_101850508);
        }
        std::string v54 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
        {
          std::string v55 = *(void *)(a1 + 64);
          __int128 v56 = *(void *)(a1 + 72);
          std::string v57 = *(double *)(a1 + 80);
          uint64_t v58 = *(double *)(a1 + 88);
          std::string v59 = *(double *)(a1 + 96);
          std::string v60 = *(double *)(a1 + 104);
          std::string v61 = *a5;
          *(_DWORD *)__int128 buf = 134219520;
          *(void *)&uint8_t buf[4] = v55;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 2048;
          v165 = v57;
          __int128 v166 = 2048;
          uint64_t v167 = v58;
          __int128 v168 = 2048;
          __int128 v169 = v59;
          __int128 v170 = 2048;
          __int128 v171 = v60;
          __int128 v172 = 2048;
          std::string::size_type v173 = v61;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEBUG,  "[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f",  buf,  0x48u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_101850508);
          }
          uint64_t v62 = *(void *)(a1 + 64);
          std::string v63 = *(void *)(a1 + 72);
          std::string v64 = *(double *)(a1 + 80);
          std::string v65 = *(double *)(a1 + 88);
          uint64_t v66 = *(double *)(a1 + 96);
          int v67 = *(double *)(a1 + 104);
          __int16 v68 = *a5;
          *(_DWORD *)__int128 v154 = 134219520;
          *(void *)&v154[4] = v62;
          *(_WORD *)&v154[12] = 2048;
          *(void *)&v154[14] = v63;
          *(_WORD *)&v154[22] = 2048;
          __int128 v155 = v64;
          __int128 v156 = 2048;
          v157 = v65;
          __int128 v158 = 2048;
          v159 = v66;
          __int128 v160 = 2048;
          CFStringRef v161 = v67;
          __int128 v162 = 2048;
          uint64_t v163 = v68;
          LODWORD(v137) = 72;
          uint64_t v69 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f",  COERCE_DOUBLE(v154),  v137,  v138,  v139,  v140,  v141,  v142);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v69);
LABEL_52:
          if (v69 != buf) {
            free(v69);
          }
          return;
        }
      }

      return;
    }
  }

  sub_1007C3400(a1 + 304, (uint64_t)&v148);
  __int128 v145 = sqrt(v150 * v150 + v149 * v149 + v151 * v151);
  uint64_t v78 = *(double *)(a1 + 608);
  if (v78 > 0.0 && *(double *)(a1 + 176) - v78 > 15.0 && v145 < 0.3)
  {
    sub_1007C34D4(a1 + 304, (uint64_t)buf);
    if (fabs( sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v165 * v165)
         + -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 616) = 10;
      if (!*(_BYTE *)(a1 + 196)) {
        goto LABEL_187;
      }
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      uint64_t v97 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_187;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      *(_WORD *)__int128 v154 = 0;
      LODWORD(v137) = 2;
      int v98 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "it's been too long. go through.",  v154,  *(void *)&v137);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v98);
LABEL_121:
      if (v98 != buf) {
        free(v98);
      }
      goto LABEL_187;
    }
  }

  if (*(_DWORD *)(a1 + 392) <= (int)((double)*(unint64_t *)(a1 + 312) * 0.5))
  {
LABEL_86:
    sub_1007C0D6C((double *)(a1 + 576), (double *)(a1 + 16));
    return;
  }

  __int128 v79 = *(void *)(a1 + 296);
  if (v79) {
    char v80 = *(float *)(*(void *)(*(void *)(a1 + 264)
  }
  else {
    char v80 = 0.0;
  }
  if (v80 > 0.2)
  {
    sub_1007C0D6C((double *)(a1 + 576), (double *)(a1 + 16));
    if (*(_BYTE *)(a1 + 196))
    {
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      char v81 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        __int128 v82 = *(void *)(a1 + 576);
        uint64_t v83 = *(void *)(a1 + 584);
        __int128 v84 = *(double *)(a1 + 592);
        *(_DWORD *)__int128 buf = 134218496;
        *(void *)&uint8_t buf[4] = v82;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v83;
        *(_WORD *)&buf[22] = 2048;
        v165 = v84;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "grabing gravity, %.4f, %.4f, %.4f",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018504C8);
        }
        __int128 v129 = *(void *)(a1 + 576);
        uint64_t v130 = *(void *)(a1 + 584);
        __int128 v131 = *(double *)(a1 + 592);
        *(_DWORD *)__int128 v154 = 134218496;
        *(void *)&v154[4] = v129;
        *(_WORD *)&v154[12] = 2048;
        *(void *)&v154[14] = v130;
        *(_WORD *)&v154[22] = 2048;
        __int128 v155 = v131;
        LODWORD(v137) = 32;
        v132 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "grabing gravity, %.4f, %.4f, %.4f",  COERCE_DOUBLE(v154),  v137,  v138);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const C FTimeInterval &)",  "%s\n",  v132);
        if (v132 != buf) {
          free(v132);
        }
      }
    }
  }

  uint64_t v85 = *(double *)(a1 + 576);
  uint64_t v86 = *(double *)(a1 + 584);
  __int128 v87 = *(double *)(a1 + 592);
  v88 = fabs(v150 * v86 + v149 * v85 + v151 * v87);
  v144 = v145 - v88;
  uint64_t v89 = *(double *)(a1 + 336);
  v90 = *(double *)(a1 + 416);
  char v91 = *(double *)(a1 + 496);
  char v92 = v86 * v90 + v89 * v85 + v91 * v87;
  __int128 v139 = v89 - v92 * v85;
  v140 = v90 - v92 * v86;
  __int128 v141 = v91 - v92 * v87;
  v142 = v92;
  __int128 v143 = fabs(v141) + fabs(v139) + fabs(v140);
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018504C8);
    }
    __int128 v93 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134219264;
      *(double *)&uint8_t buf[4] = v149;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v150;
      *(_WORD *)&buf[22] = 2048;
      v165 = v151;
      __int128 v166 = 2048;
      uint64_t v167 = v145;
      __int128 v168 = 2048;
      __int128 v169 = v88;
      __int128 v170 = 2048;
      __int128 v171 = v145 - v88;
      _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      *(_DWORD *)__int128 v154 = 134219264;
      *(double *)&v154[4] = v149;
      *(_WORD *)&v154[12] = 2048;
      *(double *)&v154[14] = v150;
      *(_WORD *)&v154[22] = 2048;
      __int128 v155 = v151;
      __int128 v156 = 2048;
      v157 = v145;
      __int128 v158 = 2048;
      v159 = v88;
      __int128 v160 = 2048;
      CFStringRef v161 = v145 - v88;
      LODWORD(v137) = 62;
      __int128 v133 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f",  COERCE_DOUBLE(v154),  v137,  v138,  v139,  v140,  v141);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v133);
      if (v133 != buf) {
        free(v133);
      }
    }

    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018504C8);
    }
    uint64_t v94 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134219008;
      *(double *)&uint8_t buf[4] = v139;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v140;
      *(_WORD *)&buf[22] = 2048;
      v165 = v141;
      __int128 v166 = 2048;
      uint64_t v167 = v142;
      __int128 v168 = 2048;
      __int128 v169 = v143;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      *(_DWORD *)__int128 v154 = 134219008;
      *(double *)&v154[4] = v139;
      *(_WORD *)&v154[12] = 2048;
      *(double *)&v154[14] = v140;
      *(_WORD *)&v154[22] = 2048;
      __int128 v155 = v141;
      __int128 v156 = 2048;
      v157 = v142;
      __int128 v158 = 2048;
      v159 = v143;
      LODWORD(v137) = 52;
      uint64_t v134 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f",  COERCE_DOUBLE(v154),  v137,  v138,  v139,  v140);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v134);
      if (v134 != buf) {
        free(v134);
      }
    }
  }

  __int128 v95 = *(void *)(a1 + 296);
  if (v95) {
    v96 = *(float *)(a1 + 248) / (float)v95;
  }
  else {
    v96 = 0.0;
  }
  __int16 v115 = v96 <= 1.57079633;
  int v116 = 0.0;
  if (!v115) {
    int v116 = 1.0;
  }
  if (v143 > (v116 * 0.5 + 1.0) * 6.0)
  {
LABEL_137:
    *(_DWORD *)(a1 + 600) = 0;
    return;
  }

  if (v144 >= 0.01 || v143 >= 0.6)
  {
    int v122 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v122;
    if (!v95) {
      goto LABEL_177;
    }
    char v123 = (int *)(a1 + 600);
    __int16 v117 = *(float *)(a1 + 248) / (float)v95;
  }

  else
  {
    if (!v95)
    {
      int v122 = *(_DWORD *)(a1 + 600) + 1;
      *(_DWORD *)(a1 + 600) = v122;
      goto LABEL_177;
    }

    __int16 v117 = *(float *)(a1 + 248) / (float)v95;
    if (v117 > 0.5)
    {
      if (!*(_BYTE *)(a1 + 196)) {
        goto LABEL_187;
      }
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      __int128 v118 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_187;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      *(_WORD *)__int128 v154 = 0;
      LODWORD(v137) = 2;
      int v98 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "===========Skip ahead.",  v154,  *(void *)&v137);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v98);
      goto LABEL_121;
    }

    char v123 = (int *)(a1 + 600);
    int v122 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v122;
  }

  if (v117 > 1.0
    && *(float *)(*(void *)(*(void *)(a1 + 264) + (((v95 + *(void *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                + 4 * ((v95 + *(void *)(a1 + 288) - 1) & 0x3FF)) < 0.2)
  {
    sub_1007C34D4(a1 + 304, (uint64_t)buf);
    char v124 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v165 * v165);
    if (fabs(v124 + -1.0) / v124 >= 0.025)
    {
      int v122 = *v123;
    }

    else
    {
      if (*(_BYTE *)(a1 + 196))
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018504C8);
        }
        __int128 v125 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018504C8);
          }
          *(_WORD *)__int128 v154 = 0;
          LODWORD(v137) = 2;
          __int128 v136 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Skip ahead------.",  v154,  *(void *)&v137);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v136);
          if (v136 != buf) {
            free(v136);
          }
        }
      }

      int v122 = *v123 + 2;
      *char v123 = v122;
    }
  }

  sub_1007F17FC(v10, v11, *(void *)a5, *(uint64_t **)(a5 + 8), &v28);
  *(void *)a6 = v28;
  double result = *(double *)&v29;
  *(_OWORD *)(a6 + 8) = v29;
  return result;
}

  if (v40 == 0.0) {
    goto LABEL_33;
  }
  if ((*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v102 = fabs(v40);
    __int128 v103 = 2.22044605e-16;
    if (v102 >= 1.0) {
      __int128 v103 = v102 * 2.22044605e-16;
    }
    if (v102 <= v103)
    {
LABEL_33:
      std::string v37 = 0;
      goto LABEL_34;
    }
  }

  uint64_t v104 = fabs(v15);
  if (v104 == 90.0)
  {
LABEL_29:
    std::string v37 = 1;
LABEL_34:
    std::string::size_type v41 = 1;
    goto LABEL_35;
  }

  if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    std::string::size_type v41 = 0;
  }

  else
  {
    __int128 v105 = fabs(v104 + -90.0);
    if (v104 < 90.0) {
      uint64_t v104 = 90.0;
    }
    if (v104 >= 1.0) {
      char v106 = v104 * 2.22044605e-16;
    }
    else {
      char v106 = 2.22044605e-16;
    }
    std::string::size_type v41 = v105 <= v106;
  }

  std::string v37 = 1;
LABEL_35:
  *a6 = v41;
  std::string v42 = vabdd_f64(v16, v14);
  char v43 = 180.0;
  if (v42 == 180.0) {
    goto LABEL_36;
  }
  std::string v44 = v16 - v14;
  if (COERCE__INT64(fabs(v16 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    std::string v61 = fabs(v42 + -180.0);
    char v43 = 180.0;
    if (v42 < 180.0) {
      std::string v42 = 180.0;
    }
    uint64_t v62 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
    if (v61 <= v62) {
      goto LABEL_36;
    }
  }

  char v43 = 180.0;
  if (v44 <= 180.0)
  {
    if (v44 >= -180.0) {
      goto LABEL_37;
    }
    char v43 = fmod(v44 + -180.0, 360.0) + 180.0;
LABEL_36:
    std::string v44 = v43;
    goto LABEL_37;
  }

  std::string v44 = fmod(v44 + 180.0, 360.0) + -180.0;
  if (v44 == -180.0) {
    goto LABEL_36;
  }
  std::string v63 = ((*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
     && (*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v63 || *(void *)&v44 == 0LL)
  {
    char v43 = 180.0;
    std::string v65 = fabs(v44 + 180.0);
    uint64_t v66 = fabs(v44);
    if (v66 < 180.0) {
      uint64_t v66 = 180.0;
    }
    int v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
    if (v65 <= v67) {
      goto LABEL_36;
    }
  }

        std::string v21 = v11;
        std::string::size_type v22 = 0.01;
LABEL_33:
        __int128 v15 = sub_100940428(v21, v22);
        goto LABEL_34;
      case 3u:
        if (v6 == v5)
        {
          __int128 v25 = 0LL;
        }

        else
        {
          __int128 v25 = 0LL;
          do
          {
            __int128 v26 = *v6++;
            if (v26 > 0.65) {
              ++v25;
            }
          }

          while (v6 != v5);
        }

        __int128 v15 = sub_100940428((float)((float)((float)v25 / (float)(unint64_t)v7) * 100.0), 1.0);
        uint64_t v24 = 10;
        goto LABEL_43;
      default:
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_101860D10);
        }
        char v16 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "Unexpected CLMobility::QuantityTypeIdentifier %d",  (uint8_t *)&__p,  8u);
        }

        __int128 v15 = 0.0;
        if (sub_1002921D0(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_1019346B8,  17LL,  "Unexpected CLMobility::QuantityTypeIdentifier %d",  &buf);
          unsigned __int8 v18 = (std::string *)v17;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIden tifier, const std::vector<float> &, int) const",  "%s\n",  v17);
          if (v18 != &__p) {
            free(v18);
          }
        }

      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      __int128 v28 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        std::string v29 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string v29 = &v64;
        }
        uint64_t v30 = v21 + 7;
        *(_DWORD *)__int128 buf = 136381187;
        char v91 = v29;
        char v92 = 2082;
        __int128 v93 = v22;
        uint64_t v94 = 2081;
        __int128 v95 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        std::string::size_type v33 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v33 = &v64;
        }
        __int128 v34 = v21 + 7;
        __int128 v84 = 136381187;
        uint64_t v85 = v33;
        uint64_t v86 = 2082;
        __int128 v87 = v22;
        v88 = 2081;
        uint64_t v89 = v34;
        LODWORD(v59) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s",  &v84,  v59);
        __int128 v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }

      if (*(_BYTE *)(a1 + 619))
      {
        *(_DWORD *)__int128 buf = v6 != v7;
        sub_1010DDBC0(__p, "Visit");
        sub_1009F57F8(a1, (uint64_t)(v21 + 4), (int *)buf, (uint64_t)&v65, (uint64_t *)__p, a3);
        if (v63 < 0) {
          operator delete(__p[0]);
        }
      }

      goto LABEL_44;
    }
  }

  else
  {
    std::string::assign(&v64, "n/a");
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    std::string v37 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v38 = &v64;
      if ((v64.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string::size_type v38 = (std::string *)v64.__r_.__value_.__r.__words[0];
      }
      std::string v39 = "exit";
      if (v6 == v7) {
        std::string v39 = "entry";
      }
      *(_DWORD *)__int128 buf = 136380931;
      char v91 = v38;
      char v92 = 2082;
      __int128 v93 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "#significantRegion: visit, id, %{private}s, %{public}s",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      std::string v51 = &v64;
      if ((v64.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        std::string v51 = (std::string *)v64.__r_.__value_.__r.__words[0];
      }
      std::string v52 = "exit";
      if (v6 == v7) {
        std::string v52 = "entry";
      }
      __int128 v84 = 136380931;
      uint64_t v85 = v51;
      uint64_t v86 = 2082;
      __int128 v87 = v52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "#significantRegion: visit, id, %{private}s, %{public}s",  &v84,  22);
      std::string v54 = (uint8_t *)v53;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)",  "%s\n",  v53);
      if (v54 != buf) {
        free(v54);
      }
    }

    std::string::size_type v40 = *(void **)(a1 + 240);
    if (v40 != (void *)(a1 + 248))
    {
      if (v6 == v7) {
        std::string::size_type v41 = "entry";
      }
      else {
        std::string::size_type v41 = "exit";
      }
      do
      {
        if ((v40[24] & 0x80) != 0
          && a1 + 824 != sub_100700B84(a1 + 816, (unsigned __int8 *)v40 + 32)
          && !*((_DWORD *)v40 + 70))
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          std::string v44 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            std::string v45 = (std::string *)v64.__r_.__value_.__r.__words[0];
            if ((v64.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string v45 = &v64;
            }
            unsigned __int8 v46 = v40 + 7;
            *(_DWORD *)__int128 buf = 136381187;
            char v91 = v45;
            char v92 = 2082;
            __int128 v93 = v41;
            uint64_t v94 = 2081;
            __int128 v95 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s, exit",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            std::string v47 = (std::string *)v64.__r_.__value_.__r.__words[0];
            if ((v64.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string v47 = &v64;
            }
            char v48 = v40 + 7;
            __int128 v84 = 136381187;
            uint64_t v85 = v47;
            uint64_t v86 = 2082;
            __int128 v87 = v41;
            v88 = 2081;
            uint64_t v89 = v48;
            LODWORD(v59) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "#significantRegion: visit, id, %{private}s, %{public}s, %{private}s, exit",  &v84,  v59);
            std::string v50 = (uint8_t *)v49;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::onVisit(const CFAbsoluteTime, CLVisit *)",  "%s\n",  v49);
            if (v50 != buf) {
              free(v50);
            }
          }

          if (*(_BYTE *)(a1 + 619))
          {
            *(_DWORD *)__int128 buf = 1;
            sub_1010DDBC0(v60, "Visit");
            sub_1009F57F8(a1, (uint64_t)(v40 + 4), (int *)buf, (uint64_t)&v65, (uint64_t *)v60, a3);
            if (v61 < 0) {
              operator delete(v60[0]);
            }
          }
        }

        std::string v42 = (void *)v40[1];
        if (v42)
        {
          do
          {
            char v43 = v42;
            std::string v42 = (void *)*v42;
          }

          while (v42);
        }

        else
        {
          do
          {
            char v43 = (void *)v40[2];
            _ZF = *v43 == (void)v40;
            std::string::size_type v40 = v43;
          }

          while (!_ZF);
        }

        std::string::size_type v40 = v43;
      }

      while (v43 != (void *)(a1 + 248));
    }
  }

  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_1019A1A48 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v13,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }

  std::string::size_type v11 = *(void *)(v5 + 40);
  if (!v11) {
    std::string::size_type v11 = *(void *)(qword_1019A1A88 + 40);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  if (v38 < 0) {
    operator delete(*(void **)buf);
  }
LABEL_34:
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrCadenceAgreementMean),  @"hrCadenceAgreementMean");
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_11:
    if ((*(_WORD *)&has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  PBDataWriterWriteDoubleField(a3, 10LL, self->_vo2Mean);
  has = self->_has;
  if ((*(_WORD *)&has & 0x2000) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  *((void *)a3 + 17) = *(void *)&self->_vo2Mean;
  *((_DWORD *)a3 + 41) |= 0x10000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x2000) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  *((void *)result + 5) = *(void *)&self->_hrCadenceAgreementMean;
  *((_DWORD *)result + 41) |= 0x10u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_11:
    if ((*(_WORD *)&has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  self->_vo2Mean = *((double *)a3 + 17);
  *(_DWORD *)&self->_has |= 0x10000u;
  char v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x2000) == 0)
  {
LABEL_12:
    if ((v3 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  unsigned __int8 v18 = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 76) |= 0x800u;
  *(_BYTE *)(a1 + 68) = v18;
  if ((*(_DWORD *)(a2 + 76) & 0x1000) == 0) {
    return;
  }
LABEL_19:
  uint64_t v7 = *(_BYTE *)(a2 + 69);
  *(_DWORD *)(a1 + 76) |= 0x1000u;
  *(_BYTE *)(a1 + 69) = v7;
}

  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_1019A1D48 + 32);
  }
  char v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A5A9F8(v13, a2);
  __int128 v15 = (int)v14;
  else {
    char v16 = 1;
  }
  uint64_t v4 = (v4 + v15 + v16 + 1);
  char v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }

  char v14 = fopen(v11, "r");
  if (!v14)
  {
LABEL_23:
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101878CA0);
    }
    __int128 v15 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      if (v47 >= 0) {
        char v16 = __filename;
      }
      else {
        char v16 = *(char **)__filename;
      }
      __int128 v17 = *__error();
      unsigned __int8 v18 = __error();
      __int128 v19 = strerror(*v18);
      *(_DWORD *)__int128 buf = 136446722;
      std::string v57 = v16;
      uint64_t v58 = 1026;
      std::string v59 = v17;
      std::string v60 = 2082;
      v61[0] = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101878CA0);
      }
      std::string::size_type v38 = qword_101934858;
      if (v47 >= 0) {
        std::string v39 = __filename;
      }
      else {
        std::string v39 = *(char **)__filename;
      }
      std::string::size_type v40 = *__error();
      std::string::size_type v41 = __error();
      std::string v42 = strerror(*v41);
      std::string v50 = 136446722;
      std::string v51 = v39;
      std::string v52 = 1026;
      std::string v53 = v40;
      std::string v54 = 2082;
      *(void *)std::string v55 = v42;
      LODWORD(v45) = 28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v38,  16LL,  "TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe",  &v50,  v45);
      std::string v44 = (uint8_t *)v43;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)",  "%s\n",  v43);
      if (v44 != buf) {
        free(v44);
      }
    }

    int v20 = 0LL;
    goto LABEL_35;
  }

          v16 += 2;
          if ((double **)((char *)v16 - *v15) == (double **)4096)
          {
            std::string::size_type v38 = (double **)v15[1];
            ++v15;
            char v16 = v38;
          }
        }
      }
    }
  }

  else
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_101879420);
    }
    std::string v39 = (os_log_s *)qword_1019346A8;
    uint64_t v13 = -1.0;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 68289026;
      std::string v42 = 0;
      char v43 = 2082;
      std::string v44 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#Warning,invalid visit location, abort distance check}",  buf,  0x12u);
    }
  }

  return v13;
}

  __int128 v19 = 108LL;
  if (v3) {
LABEL_33:
  }
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  return v19;
}

  if (HIBYTE(v143))
  {
    if ((_BYTE)v143) {
      pthread_mutex_unlock(v142);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v141 + 24LL))(v141);
    }
  }

  return v28;
}
}
}

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101884558);
  }
  std::string::size_type v22 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    std::string v23 = *v16;
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "WIFITILE: fDefaultDisableTilesWhileLocked, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
    std::string::size_type v38 = *v16;
    char v43 = 67109120;
    LODWORD(v44) = v38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "WIFITILE: fDefaultDisableTilesWhileLocked, %d",  &v43);
    std::string::size_type v40 = (char *)v39;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()",  "%s\n",  v39);
    if (v40 != buf) {
      free(v40);
    }
  }

  uint64_t v24 = *(void *)(a1 + 480);
  __int128 v25 = *(void *)(v24 + 16);
  __int128 v26 = *(void *)(v24 + 24);
  uint64_t v27 = *(_DWORD *)(v24 + 48);
  sub_100E79F28(a2);
  sub_100DEE810();
  __int128 v28 = (char *)operator new(0x138uLL);
  sub_1010DDBC0(buf, "CLWifiTileServer");
  sub_100E79D6C(v28, 0LL, &qword_10199EB20, &__p, buf);
  if (v48 < 0) {
    operator delete(*(void **)buf);
  }
  v28[80] = v4;
  *((void *)v28 + 14) = v25;
  *((void *)v28 + 15) = v26;
  *((_DWORD *)v28 + 33) = v27;
  *((void *)v28 + 17) = *v10;
  *(int64x2_t *)(v28 + 152) = vdupq_n_s64(0x3FA999999999999AuLL);
  *((void *)v28 + 21) = 0x100000001000LL;
  std::string *v28 = 1;
  sub_1004F2598();
  if (sub_1004F7A4C()) {
    std::string v29 = 0;
  }
  else {
    std::string v29 = 3;
  }
  *((_DWORD *)v28 + 37) = v29;
  v28[177] = 0;
  std::string::size_type v41 = (uint64_t)v28;
  sub_100E7A284(a2, 0, &v41);
  uint64_t v30 = v41;
  std::string::size_type v41 = 0LL;
  if (v30)
  {
    int v31 = (void *)sub_100970994(v30);
    operator delete(v31);
  }

  char v14 = *(void *)(v5 + 64);
  if (!v14) {
    char v14 = *(void *)(qword_1019A20E0 + 64);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v14,  a2,  a4);
  if ((*(_DWORD *)(v5 + 84) & 0x100) != 0)
  {
LABEL_35:
    __int128 v15 = *(void *)(v5 + 72);
    if (!v15) {
      __int128 v15 = *(void *)(qword_1019A20E0 + 72);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v15,  a2,  a4);
  }

  return result;
}

  __int128 v17 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 72) |= 0x400u;
  *(_DWORD *)(a1 + 52) = v17;
  uint64_t v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  __int128 v15 = *(_DWORD *)(a2 + 48);
  v3 |= 0x400u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + sub_100019CEC(v39 + 48) = v15;
  BOOL v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "metMinutePercentile98", *(float *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 44), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  double result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 128) = result;
  BOOL v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "instantaneousSpeed", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 112), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  double result = *(float *)(a2 + 48);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + sub_100019CEC(v39 + 48) = result;
  BOOL v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "impulseStartTime", *(void *)(a1 + 8));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  std::string::size_type v11 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 8) = v11;
  BOOL v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "currentMax", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "accelX", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 100), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 44) = v13;
  BOOL v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "posPeakHeight", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  __int128 v17 = *(_DWORD *)(a2 + 108);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 108) = v17;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 112), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 76), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }

  std::string::size_type v22 = *(void *)(a2 + 128);
  v8 |= 1u;
  *(_WORD *)(a1 + 204) = v8;
  *(void *)(a1 + 128) = v22;
  uint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 2) == 0)
  {
LABEL_17:
    if ((v7 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "isSlowRollDetected", *(_BYTE *)(a1 + 200));
  uint64_t v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  uint64_t v12 = *(_BYTE *)(a2 + 61);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 61) = v12;
  BOOL v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "isFreeFall", *(_BYTE *)(a1 + 61));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 58), 0x12Fu);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  char v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 72) = v14;
  BOOL v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "movingSpeedMetersPerSecondThresholdFromSydneyB", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0x6Cu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  char v14 = *(_DWORD *)(a2 + 104);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 104) = v14;
  BOOL v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "runningArclengthOverEpoch", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 80), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  unsigned __int8 v18 = *(_DWORD *)(a2 + 124);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 124) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "minNumPeaks", *(_DWORD *)(a1 + 128));
  std::string::size_type v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x1000) == 0)
  {
LABEL_15:
    if ((v11 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 144), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  __int128 v17 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(result + 96) = v3;
  *(_DWORD *)(result + 80) = v17;
  BOOL v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_34:
    __int128 v19 = *(void *)(a2 + 24);
    *(_WORD *)(result + 96) = v3 | 4;
    *(void *)(result + 24) = v19;
    return result;
  }

  PB::TextFormatter::format(this, "numTriggersThreshold", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) != 0) {
    goto LABEL_33;
  }
LABEL_16:
  if ((v5 & 0x1000) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(this, "windowDuration", *(_DWORD *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x133u);
  if ((*(_WORD *)(v3 + 96) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x134u);
  }
  return result;
}

  std::string::size_type v22 = *(void *)(a2 + 136);
  *(_WORD *)(a1 + 192) |= 0x80u;
  *(void *)(a1 + 136) = v22;
  std::string::size_type v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x100) == 0)
  {
LABEL_20:
    if ((v11 & 0x200) == 0) {
      goto LABEL_21;
    }
LABEL_34:
    uint64_t v24 = *(void *)(a2 + 152);
    *(_WORD *)(a1 + 192) |= 0x200u;
    *(void *)(a1 + 152) = v24;
    if ((*(_WORD *)(a2 + 192) & 0x400) == 0) {
      return a1;
    }
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "machContinuousLocationTimestamp", *(double *)(a1 + 120));
  uint64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 96), 9u);
  char v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "poseY", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  unsigned __int8 v18 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) |= 0x10u;
  *(_DWORD *)(a1 + 76) = v18;
  unint64_t v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }

  std::string::size_type v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = v11;
  BOOL v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 20), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  BOOL v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 104), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  __int128 v28 = *(_DWORD *)(a2 + 152);
  *(_WORD *)(a1 + 168) |= 0x40u;
  *(_DWORD *)(a1 + 152) = v28;
  if ((*(_WORD *)(a2 + 168) & 0x80) != 0)
  {
LABEL_21:
    int v20 = *(_DWORD *)(a2 + 156);
    *(_WORD *)(a1 + 168) |= 0x80u;
    *(_DWORD *)(a1 + 156) = v20;
  }

  PB::TextFormatter::format(this, "currentRange", *(float *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 100), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  char v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 80) = v16;
  BOOL v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  __int128 v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 52) = v15;
  BOOL v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 56) = result;
  BOOL v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "centripetalAccelMeanZ", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 96), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }

  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 56) = result;
  BOOL v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P5", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 168), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "accelFFTBin3", *(float *)(a1 + 28));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }

  char v14 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 40) = v14;
  BOOL v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "luxShift", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  __int128 v15 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 84) = v3;
  *(void *)(result + 16) = v15;
  BOOL v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "runningModeStartTime", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  BOOL v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "rotRateInerFFTAmpZHigh", *(float *)(a1 + 48));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  __int128 v17 = *(_BYTE *)(a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(result + 116) = v3;
  *(_BYTE *)(result + 113) = v17;
  BOOL v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_34:
    __int128 v19 = *(_DWORD *)(a2 + 104);
    *(_WORD *)(result + 116) = v3 | 0x1000;
    *(_DWORD *)(result + 104) = v19;
    return result;
  }

  PB::TextFormatter::format(this, "truthMetsGradeCorrected", *(double *)(a1 + 80));
  uint64_t v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x400) != 0) {
    goto LABEL_33;
  }
LABEL_16:
  if ((v5 & 0x800) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 0xFu);
  if ((*(_WORD *)(v3 + 116) & 0x1000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x10u);
  }
  return result;
}

  double result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 16) = result;
  BOOL v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  std::string::size_type v11 = *(_DWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v11;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "gradeOnsetCounter", *(_DWORD *)(a1 + 116));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 152), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 8) = result;
  BOOL v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  PB::TextFormatter::format(this, "integratedAngleYgBackwards", *(double *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 104), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }

  if (qword_101934670 != -1) {
    dispatch_once(&qword_101934670, &stru_1018A3688);
  }
  std::string v21 = (os_log_s *)qword_101934678;
  if (os_log_type_enabled((os_log_t)qword_101934678, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "CLWorkoutRecorder: acquireTokenWithSettings, Unable to aquire token due to system side sampling rate.",  buf,  2u);
  }

  uint64_t v7 = sub_1002921D0(115, 2);
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934670 != -1) {
      dispatch_once(&qword_101934670, &stru_1018A3688);
    }
    LOWORD(v25[0]) = 0;
    std::string::size_type v11 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934678,  0LL,  "CLWorkoutRecorder: acquireTokenWithSettings, Unable to aquire token due to system side sampling rate.",  v25,  2,  v25[0]);
    goto LABEL_45;
  }

  return v7;
}

void sub_100052584( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, void *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8LL))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100052610(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v24.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v24, "WHERE ");
    uint64_t v8 = std::string::append(&v24, "LoiId");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    char v23 = 2;
    strcpy(__s, "=");
    unint64_t v10 = std::string::append(&v25, __s, 2uLL);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    memset(&__p, 0, sizeof(__p));
    if ((sub_100013090(a2, &__p) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)v30);
      v30[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
      sub_1000139B0((uint64_t)v30);
    }

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    char v14 = std::string::append(&v26, (const std::string::value_type *)p_p, size);
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    v30[0].__r_.__value_.__s.__size_ = 1;
    strcpy((char *)v30, "");
    char v16 = std::string::append(&v27, (const std::string::value_type *)v30, 1uLL);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type cap = v16->__r_.__value_.__l.__cap_;
    __int128 v28 = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if (v23 < 0) {
      operator delete(*(void **)__s);
    }
    sub_1000515C4(*(void *)a1, (uint64_t)&v28, a3, v30);
    if (v30[0].__r_.__value_.__r.__words[0] == v30[0].__r_.__value_.__l.__size_)
    {
      char v18 = 0;
      *a4 = 0;
    }

    else
    {
      *(_OWORD *)a4 = *(_OWORD *)(v30[0].__r_.__value_.__r.__words[0] + 24);
      char v18 = 1;
    }

    a4[16] = v18;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    sub_10003706C((void ***)&v27);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v28);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    __int128 v19 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get LOI Group Id for LOI",  (uint8_t *)v30,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v30, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      LOWORD(v28) = 0;
      int v20 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  v30,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get LOI Group Id for LOI",  &v28,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::optional<boost::uuids::uuid> CLMiLoLoiTable::getLoiGroupIdForLoi(const boost::uuids::uuid &, uint32_t)",  "%s\n",  (const char *)v20);
      if (v20 != v30) {
        free(v20);
      }
    }

    *a4 = 0;
    a4[16] = 0;
  }

void sub_1000529D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,std::bad_cast a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
}

void sub_100052A9C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  std::string v65 = 0LL;
  if (*((_BYTE *)a1 + 8))
  {
    if (*a2 == a2[1])
    {
      *a4 = 0LL;
      a4[1] = 0LL;
      a4[2] = 0LL;
    }

    else
    {
      v66.__r_.__value_.__s.__size_ = 7;
      strcpy((char *)&v66, " WHERE ");
      uint64_t v8 = std::string::append(&v66, "LoiId");
      __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0LL;
      v8->__r_.__value_.__l.__cap_ = 0LL;
      v8->__r_.__value_.__r.__words[0] = 0LL;
      __s.__r_.__value_.__s.__size_ = 4;
      strcpy((char *)&__s, " IN ");
      unint64_t v10 = std::string::append(&v62, (const std::string::value_type *)&__s, 4uLL);
      __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      v60.__r_.__value_.__s.__size_ = 1;
      strcpy((char *)&v60, "(");
      uint64_t v12 = std::string::append(&v67, (const std::string::value_type *)&v60, 1uLL);
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      if (*a2 != v15)
      {
        unsigned int v16 = 1;
        do
        {
          memset(&__s, 0, sizeof(__s));
          if ((sub_100013090(v14, &__s) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v67);
            v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
            sub_1000139B0((uint64_t)&v67);
          }

          __int128 v17 = std::string::insert(&__s, 0LL, "");
          __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0LL;
          v17->__r_.__value_.__l.__cap_ = 0LL;
          v17->__r_.__value_.__r.__words[0] = 0LL;
          __int128 v19 = std::string::append(&v66, "");
          __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0LL;
          v19->__r_.__value_.__l.__cap_ = 0LL;
          v19->__r_.__value_.__r.__words[0] = 0LL;
          if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string v21 = &v62;
          }
          else {
            std::string v21 = (std::string *)v62.__r_.__value_.__r.__words[0];
          }
          if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v62.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v62.__r_.__value_.__l.__size_;
          }
          std::string::append(&v63, (const std::string::value_type *)v21, size);
          v14 += 16LL;
          ++v16;
        }

        while (v14 != v15);
      }

      v67.__r_.__value_.__s.__size_ = 1;
      LOWORD(v67.__r_.__value_.__l.__data_) = 41;
      std::string::append(&v63, (const std::string::value_type *)&v67, 1uLL);
      v58.__r_.__value_.__s.__size_ = 16;
      strcpy((char *)&v58, "SELECT DISTINCT ");
      char v23 = std::string::append(&v58, "LoiGroupId");
      __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0LL;
      v23->__r_.__value_.__l.__cap_ = 0LL;
      v23->__r_.__value_.__r.__words[0] = 0LL;
      char v57 = 6;
      strcpy(v56, " FROM ");
      std::string v25 = std::string::append(&v59, v56, 6uLL);
      __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0LL;
      v25->__r_.__value_.__l.__cap_ = 0LL;
      v25->__r_.__value_.__r.__words[0] = 0LL;
      std::string v27 = std::string::append(&v60, "MiLoLoiTable");
      __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0LL;
      v27->__r_.__value_.__l.__cap_ = 0LL;
      v27->__r_.__value_.__r.__words[0] = 0LL;
      if ((v63.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v29 = &v63;
      }
      else {
        std::string v29 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      if ((v63.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v30 = v63.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v30 = v63.__r_.__value_.__l.__size_;
      }
      int v31 = std::string::append(&__s, (const std::string::value_type *)v29, v30);
      __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0LL;
      v31->__r_.__value_.__l.__cap_ = 0LL;
      v31->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v33 = std::string::append(&v66, " LIMIT ");
      __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0LL;
      v33->__r_.__value_.__l.__cap_ = 0LL;
      v33->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v55, a3);
      if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v35 = &v55;
      }
      else {
        BOOL v35 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v36 = v55.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v36 = v55.__r_.__value_.__l.__size_;
      }
      std::string v37 = std::string::append(&v67, (const std::string::value_type *)v35, v36);
      __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0LL;
      v37->__r_.__value_.__l.__cap_ = 0LL;
      v37->__r_.__value_.__r.__words[0] = 0LL;
      if (v57 < 0) {
        operator delete(*(void **)v56);
      }
      if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v39 = &v62;
      }
      else {
        std::string v39 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*a1, (char *)v39, &v67);
      std::string::size_type v40 = v67.__r_.__value_.__r.__words[0];
      std::string::size_type v41 = (sqlite3_stmt *)sub_100019240((uint64_t)v67.__r_.__value_.__l.__data_);
      while (j__sqlite3_step(v41) == 100)
      {
        sub_100011CB8(v41, 0, &v67);
        sub_10010147C((uint64_t)&v67, (uint64_t)&v66);
        if (!v66.__r_.__value_.__s.__data_[16]) {
          sub_100036CD8();
        }
        std::string v42 = (char *)__p[1];
        if (__p[1] >= v65)
        {
          int64_t v44 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          unint64_t v45 = v44 + 1;
          uint64_t v46 = v65 - (char *)__p[0];
          else {
            unint64_t v47 = v45;
          }
          if (v47) {
            char v48 = (char *)sub_100037038((uint64_t)&v65, v47);
          }
          else {
            char v48 = 0LL;
          }
          std::string v49 = &v48[16 * v44];
          *(_OWORD *)std::string v49 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          std::string v51 = (char *)__p[0];
          std::string v50 = (char *)__p[1];
          std::string v52 = v49;
          if (__p[1] != __p[0])
          {
            do
            {
              *((_OWORD *)v52 - 1) = *((_OWORD *)v50 - 1);
              v52 -= 16;
              v50 -= 16;
            }

            while (v50 != v51);
            std::string v50 = (char *)__p[0];
          }

          char v43 = v49 + 16;
          __p[0] = v52;
          __p[1] = v49 + 16;
          std::string v65 = &v48[16 * v47];
          if (v50) {
            operator delete(v50);
          }
        }

        else
        {
          *(_OWORD *)__p[1] = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          char v43 = v42 + 16;
        }

        __p[1] = v43;
      }

      sqlite3_reset(v41);
      *(_OWORD *)a4 = *(_OWORD *)__p;
      a4[2] = v65;
      __p[1] = 0LL;
      std::string v65 = 0LL;
      __p[0] = 0LL;
      if (v40) {
        (*(void (**)(std::string::size_type))(*(void *)v40 + 8LL))(v40);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    std::string v53 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v67.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't get LOI Group Id for LOIs",  (uint8_t *)&v67,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v67, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      LOWORD(v63.__r_.__value_.__l.__data_) = 0;
      std::string v54 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &v67,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't get LOI Group Id for LOIs",  &v63,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<boost::uuids::uuid> CLMiLoLoiTable::getLoiGroupIdsForLois(const std::vector<boost::uuids::uuid> &, uint32_t)",  "%s\n",  (const char *)v54);
      if (v54 != &v67) {
        free(v54);
      }
    }

    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v65;
  }

void sub_1000532A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

#error "100053634: call analysis failed (funcsize=100)"
void sub_100053664()
{
  __cxa_end_catch();
  JUMPOUT(0x10005345CLL);
}

void sub_100053678(void *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  JUMPOUT(0x1000534A0LL);
}

uint64_t sub_100053688(uint64_t a1, uint64_t *a2, __int128 **a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*a3 == a3[1])
    {
      return 1LL;
    }

    else
    {
      uint64_t v41 = 0LL;
      unint64_t v42 = 0LL;
      unint64_t v43 = 0LL;
      CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (*(char *)(a4 + 23) < 0)
      {
        sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
      }

      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a4;
        uint64_t v40 = *(void *)(a4 + 16);
      }

      *(CFAbsoluteTime *)&__int128 v44 = Current_1;
      *((void *)&v44 + 1) = v9;
      *(void *)&__int128 v45 = v10;
      *((void *)&v45 + 1) = v9;
      uint64_t v46 = v10;
      if (SHIBYTE(v40) < 0)
      {
        sub_1010DD48C(&v47, __p[0], (unint64_t)__p[1]);
        if (SHIBYTE(v40) < 0) {
          operator delete(__p[0]);
        }
      }

      else
      {
        __int128 v47 = *(_OWORD *)__p;
        uint64_t v48 = v40;
      }

      unint64_t v13 = v42;
      if (v42 >= v43)
      {
        uint64_t v18 = sub_100055660(&v41, &v44);
      }

      else
      {
        __int128 v14 = v44;
        __int128 v15 = v45;
        *(void *)(v42 + 32) = v46;
        *(_OWORD *)unint64_t v13 = v14;
        *(_OWORD *)(v13 + 16) = v15;
        unsigned int v16 = (_BYTE *)(v13 + 40);
        if (SHIBYTE(v48) < 0)
        {
          sub_1010DD48C(v16, (void *)v47, *((unint64_t *)&v47 + 1));
        }

        else
        {
          __int128 v17 = v47;
          *(void *)(v13 + 56) = v48;
          *(_OWORD *)unsigned int v16 = v17;
        }

        uint64_t v18 = v13 + 64;
      }

      unint64_t v42 = v18;
      __int128 v19 = *a3;
      __int128 v20 = a3[1];
      if (*a3 != v20)
      {
        do
        {
          CFAbsoluteTime v21 = j__CFAbsoluteTimeGetCurrent_1();
          __int128 v22 = *v19;
          __int128 v23 = *(_OWORD *)a2;
          if (*(char *)(a4 + 23) < 0)
          {
            __int128 v34 = *(_OWORD *)a2;
            __int128 v35 = *v19;
            sub_1010DD48C(__dst, *(void **)a4, *(void *)(a4 + 8));
            __int128 v23 = v34;
            __int128 v22 = v35;
          }

          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)a4;
            uint64_t v38 = *(void *)(a4 + 16);
          }

          *(CFAbsoluteTime *)__int128 buf = v21;
          *(_OWORD *)&uint8_t buf[8] = v22;
          *(_OWORD *)&_BYTE buf[24] = v23;
          if (SHIBYTE(v38) < 0)
          {
            sub_1010DD48C(&v50, __dst[0], (unint64_t)__dst[1]);
          }

          else
          {
            __int128 v50 = *(_OWORD *)__dst;
            uint64_t v51 = v38;
          }

          __int128 v44 = *(_OWORD *)buf;
          __int128 v45 = *(_OWORD *)&buf[16];
          uint64_t v46 = *(void *)&buf[32];
          if (SHIBYTE(v48) < 0) {
            operator delete((void *)v47);
          }
          __int128 v47 = v50;
          uint64_t v48 = v51;
          HIBYTE(v51) = 0;
          LOBYTE(v50) = 0;
          if (SHIBYTE(v38) < 0) {
            operator delete(__dst[0]);
          }
          unint64_t v24 = v42;
          if (v42 >= v43)
          {
            uint64_t v29 = sub_100055660(&v41, &v44);
          }

          else
          {
            __int128 v25 = v44;
            __int128 v26 = v45;
            *(void *)(v42 + 32) = v46;
            *(_OWORD *)unint64_t v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            std::string v27 = (_BYTE *)(v24 + 40);
            if (SHIBYTE(v48) < 0)
            {
              sub_1010DD48C(v27, (void *)v47, *((unint64_t *)&v47 + 1));
            }

            else
            {
              __int128 v28 = v47;
              *(void *)(v24 + 56) = v48;
              *(_OWORD *)std::string v27 = v28;
            }

            uint64_t v29 = v24 + 64;
          }

          unint64_t v42 = v29;
          ++v19;
        }

        while (v19 != v20);
      }

      uint64_t v12 = sub_100051F10(a1, &v41);
      if ((v12 & 1) == 0)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101819DB0);
        }
        std::string::size_type v30 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "#Warning Failed to update LOI Database Table with LOI Ids",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_101819DB0);
          }
          v36[0] = 0;
          std::string::size_type v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "#Warning Failed to update LOI Database Table with LOI Ids",  v36,  2);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMiLoLoiTable::updateLoiGroupIdForLois(const boost::uuids::uuid &, const std::vector<boost::uuids::uui d> &, const std::string &)",  "%s\n",  v33);
          if (v33 != buf) {
            free(v33);
          }
        }
      }

      if (SHIBYTE(v48) < 0) {
        operator delete((void *)v47);
      }
      *(void *)__int128 buf = &v41;
      sub_10003706C((void ***)buf);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    __int128 v11 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we update LOIGroupId for specified LOI Ids",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      LOWORD(v44) = 0;
      __int128 v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we update LOIGroupId for specified LOI Ids",  &v44,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMiLoLoiTable::updateLoiGroupIdForLois(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> & , const std::string &)",  "%s\n",  v32);
      if (v32 != buf) {
        free(v32);
      }
    }

    return 0LL;
  }

  return v12;
}

void sub_100053BE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, __int16 a27, char a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, int a40, __int16 a41, char a42, char a43, char *a44)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  a44 = &a30;
  sub_10003706C((void ***)&a44);
  _Unwind_Resume(a1);
}

double sub_100053C78@<D0>(const void **a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  if (*a2)
  {
LABEL_2:
    else {
      size_t v6 = (size_t)a1[1];
    }
    uint64_t v7 = &v64;
    sub_1000392EC((uint64_t)&v64, v6 + 12);
    if ((v64.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v7 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      else {
        uint64_t v8 = *a1;
      }
      memmove(v7, v8, v6);
    }

    strcpy((char *)v7 + v6, " IN (SELECT ");
    uint64_t v9 = std::string::append(&v64, "MiLoLoiTable");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v11 = std::string::append(&v65, ".");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v13 = std::string::append(&v66, "LoiId");
    __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    v13->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v15 = std::string::append(&v67, " FROM ");
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v17 = std::string::append(&v68, "MiLoLoiTable");
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v19 = std::string::append(&v69, " WHERE ");
    __int128 v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__l.__cap_ = v19->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    CFAbsoluteTime v21 = std::string::append(&v70, "MiLoLoiTable");
    __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v23 = std::string::append(&v71, ".");
    __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v25 = std::string::append(&v72, "LoiGroupId");
    __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0LL;
    v25->__r_.__value_.__l.__cap_ = 0LL;
    v25->__r_.__value_.__r.__words[0] = 0LL;
    std::string v27 = std::string::append(&v73, "=(SELECT ");
    __int128 v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0LL;
    v27->__r_.__value_.__l.__cap_ = 0LL;
    v27->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v29 = std::string::append(&v74, "MiLoLoiTable");
    __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0LL;
    v29->__r_.__value_.__l.__cap_ = 0LL;
    v29->__r_.__value_.__r.__words[0] = 0LL;
    int v31 = std::string::append(&v75, ".");
    __int128 v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0LL;
    v31->__r_.__value_.__l.__cap_ = 0LL;
    v31->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v33 = std::string::append(&v76, "LoiGroupId");
    __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__l.__cap_ = v33->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0LL;
    v33->__r_.__value_.__l.__cap_ = 0LL;
    v33->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v35 = std::string::append(&v77, " FROM ");
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    std::string v37 = std::string::append(&v78, "MiLoLoiTable");
    __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0LL;
    v37->__r_.__value_.__l.__cap_ = 0LL;
    v37->__r_.__value_.__r.__words[0] = 0LL;
    std::string v39 = std::string::append(&v79, " WHERE ");
    __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0LL;
    v39->__r_.__value_.__l.__cap_ = 0LL;
    v39->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v41 = std::string::append(&v80, "MiLoLoiTable");
    __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__l.__cap_ = v41->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0LL;
    v41->__r_.__value_.__l.__cap_ = 0LL;
    v41->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v43 = std::string::append(&v81, ".");
    __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__l.__cap_ = v43->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0LL;
    v43->__r_.__value_.__l.__cap_ = 0LL;
    v43->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v45 = std::string::append(&v82, "LoiId");
    __int128 v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__l.__cap_ = v45->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0LL;
    v45->__r_.__value_.__l.__cap_ = 0LL;
    v45->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v47 = std::string::append(&v83, "=");
    __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__l.__cap_ = v47->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0LL;
    v47->__r_.__value_.__l.__cap_ = 0LL;
    v47->__r_.__value_.__r.__words[0] = 0LL;
    memset(&__p, 0, sizeof(__p));
    if ((sub_100013090((uint64_t)a2, &__p) & 1) == 0)
    {
      std::string v62 = std::bad_cast::bad_cast(v86);
      v86[0].__vftable = (std::bad_cast_vtbl *)&off_101818CB0;
      sub_1000139B0((uint64_t)v62);
    }

    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v51 = std::string::append(&v84, (const std::string::value_type *)p_p, size);
    __int128 v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__l.__cap_ = v51->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0LL;
    v51->__r_.__value_.__l.__cap_ = 0LL;
    v51->__r_.__value_.__r.__words[0] = 0LL;
    std::string v53 = std::string::append(&v85, "))");
    std::string::size_type v55 = v53->__r_.__value_.__l.__size_;
    *(void *)a3 = v53->__r_.__value_.__r.__words[0];
    *(void *)(a3 + 8) = v55;
    *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v55) = v53->__r_.__value_.__s.__size_;
    v53->__r_.__value_.__l.__size_ = 0LL;
    v53->__r_.__value_.__l.__cap_ = 0LL;
    v53->__r_.__value_.__r.__words[0] = 0LL;
    int v56 = (char)v85.__r_.__value_.__s.__size_;
    *(_BYTE *)(a3 + 23) = v55;
    if (v56 < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
  }

  else
  {
    uint64_t v57 = 1LL;
    while (v57 != 16)
    {
      if (a2[v57++])
      {
        break;
      }
    }

    else {
      size_t v59 = (size_t)a1[1];
    }
    std::string v60 = (char *)v86;
    sub_1000392EC((uint64_t)v86, v59 + 3);
    if (SHIBYTE(v87) < 0) {
      std::string v60 = (char *)v86[0].__vftable;
    }
    if (v59)
    {
      else {
        std::string v61 = *a1;
      }
      memmove(v60, v61, v59);
    }

    *(_DWORD *)&v60[v59] = 2236989;
    double result = *(double *)&v86[0].__vftable;
    *(_OWORD *)a3 = *(_OWORD *)&v86[0].__vftable;
    *(void *)(a3 + 16) = v87;
  }

  return result;
}

void sub_100054324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, void *a49, uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1000544E4()
{
}

void sub_1000544EC()
{
}

void sub_1000544F4()
{
}

void sub_1000544FC()
{
}

void sub_100054504()
{
}

void sub_10005450C()
{
}

void sub_100054514()
{
}

void sub_10005451C()
{
}

void sub_100054524()
{
}

void sub_10005452C()
{
}

void sub_100054534()
{
}

void sub_10005453C()
{
}

void sub_100054544()
{
}

void sub_10005454C()
{
}

void sub_100054554()
{
}

void sub_10005455C(uint64_t a1@<X0>, _BYTE *a2@<X1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v18.__r_.__value_.__s.__size_ = 6;
    strcpy((char *)&v18, "WHERE ");
    sub_1010DDBC0(v14, "LoiId");
    sub_100053C78((const void **)v14, a2, (uint64_t)__p);
    if ((v17 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v9 = v17;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    __int128 v10 = std::string::append(&v18, (const std::string::value_type *)v8, v9);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type cap = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)__int128 buf = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    sub_1000515C4(*(void *)a1, (uint64_t)buf, a3, a4);
    if (SHIBYTE(cap) < 0) {
      operator delete(*(void **)buf);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    __int128 v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid, can't select LOI IDs for specified LOI Group Id",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      LOWORD(v18.__r_.__value_.__l.__data_) = 0;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid, can't select LOI IDs for specified LOI Group Id",  &v18,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMiLoLoiTable::Entry> CLMiLoLoiTable::selectLoiIdsInLoiGroupId(const boost::uuids::uuid &, uint32_t)",  "%s\n",  v13);
    }

    a4->__r_.__value_.__r.__words[0] = 0LL;
    a4->__r_.__value_.__l.__size_ = 0LL;
    a4->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_1000547DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *__p, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
}

unint64_t sub_100054844(uint64_t *a1)
{
  v21.__r_.__value_.__s.__size_ = 21;
  strcpy((char *)&v21, "SELECT COUNT(*) FROM ");
  BOOL v2 = std::string::append(&v21, "MiLoLoiTable");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  char v20 = 7;
  strcpy(__s, " WHERE ");
  uint64_t v4 = std::string::append(&v22, __s, 7uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  size_t v6 = std::string::append(&v23, "LoiId");
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  char v18 = 1;
  strcpy(v17, "=");
  uint64_t v8 = std::string::append(&v27, v17, 1uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v10 = std::string::append(&v26, "LoiGroupId");
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t cap = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if (v18 < 0) {
    operator delete(*(void **)v17);
  }
  if (v20 < 0) {
    operator delete(*(void **)__s);
  }
  if (cap >= 0) {
    __int128 v12 = (char *)__p;
  }
  else {
    __int128 v12 = (char *)__p[0];
  }
  sub_1003C0D54(*a1, v12, &v26);
  std::string::size_type v13 = v26.__r_.__value_.__r.__words[0];
  __int128 v14 = (sqlite3_stmt *)sub_100019240((uint64_t)v26.__r_.__value_.__l.__data_);
  if (j__sqlite3_step(v14) == 100) {
    unint64_t v15 = sub_100054CD8(v14, 0);
  }
  else {
    unint64_t v15 = 0LL;
  }
  sqlite3_reset(v14);
  if (v13) {
    (*(void (**)(std::string::size_type))(*(void *)v13 + 8LL))(v13);
  }
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

unint64_t sub_100054CD8(sqlite3_stmt *a1, int a2)
{
  unint64_t result = sqlite3_column_int64(a1, a2);
  if ((result & 0x8000000000000000LL) != 0) {
    sub_101226A40();
  }
  if (HIDWORD(result)) {
    sub_101226BAC();
  }
  return result;
}

void sub_100054D00(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8))
  {
    v18.__r_.__value_.__s.__size_ = 7;
    strcpy((char *)&v18, " WHERE ");
    size_t v6 = std::string::insert(&v18, 0LL, "MiLoLoiTable");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v8 = std::string::append(&v19, "LoiId");
    __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    char v17 = 1;
    strcpy(__s, "=");
    __int128 v10 = std::string::append(&v20, __s, 1uLL);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v12 = std::string::append(&v21, "LoiGroupId");
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type cap = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    if (v17 < 0) {
      operator delete(*(void **)__s);
    }
    sub_1000515C4(*(void *)a1, (uint64_t)__p, a2, a3);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819DB0);
    }
    __int128 v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "#Warning Table is not valid so we can't select all loi groups",  (uint8_t *)__p,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
      LOWORD(v21.__r_.__value_.__l.__data_) = 0;
      unint64_t v15 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning Table is not valid so we can't select all loi groups",  &v21,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLMiLoLoiTable::Entry> CLMiLoLoiTable::selectAllLoiGroups(uint32_t)",  "%s\n",  v15);
    }

    a3->__r_.__value_.__r.__words[0] = 0LL;
    a3->__r_.__value_.__l.__size_ = 0LL;
    a3->__r_.__value_.__l.__cap_ = 0LL;
  }

void sub_100054FF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, void *a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, void *__p, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
}

void sub_100055088(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1000550B4(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_1000550E0@<D0>(std::string *a1@<X8>)
{
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100055124( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100055140(std::string *a1)
{
  return sub_100055334(a1);
}

uint64_t sub_10005517C(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "LoiId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100055224( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100055258(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "LoiGroupId");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_100055300( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100055334(std::string *a1)
{
  v7.__r_.__value_.__s.__size_ = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "LoiType");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t cap = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v5 = HIBYTE(cap);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 0LL;
}

void sub_1000553DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100055410(uint64_t *a1, uint64_t *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  else {
    unint64_t v13 = v7;
  }
  std::string v21 = a1 + 2;
  if (v13) {
    __int128 v14 = (char *)sub_10001275C((uint64_t)(a1 + 2), v13);
  }
  else {
    __int128 v14 = 0LL;
  }
  char v17 = v14;
  std::string v18 = &v14[64 * v6];
  std::string v20 = &v14[64 * v13];
  sub_100055524((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  std::string v19 = v18 + 64;
  sub_1000555EC(a1, &v17);
  uint64_t v15 = a1[1];
  sub_1000377A0((uint64_t)&v17);
  return v15;
}

void sub_100055510(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100055524(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t v7 = *a3;
  __int128 v8 = *a4;
  __int128 v9 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    __int128 v11 = *a5;
    __int128 v12 = *a4;
    sub_1010DD48C(__p, *(void **)a6, *(void *)(a6 + 8));
    __int128 v9 = v11;
    __int128 v8 = v12;
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a6;
    uint64_t v14 = *(void *)(a6 + 16);
  }

  *(void *)a2 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  __int128 v10 = (_BYTE *)(a2 + 40);
  if (SHIBYTE(v14) < 0)
  {
    sub_1010DD48C(v10, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    *(_OWORD *)__int128 v10 = *(_OWORD *)__p;
    *(void *)(a2 + 56) = v14;
  }

void sub_1000555D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000555EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100037570((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100055660(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string v21 = a1 + 2;
  if (v9) {
    __int128 v10 = (char *)sub_10001275C(v7, v9);
  }
  else {
    __int128 v10 = 0LL;
  }
  __int128 v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  std::string v19 = v11;
  std::string v20 = &v10[64 * v9];
  __int128 v12 = *a2;
  __int128 v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)__int128 v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  uint64_t v14 = v11 + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_1010DD48C(v14, *((void **)a2 + 5), *((void *)a2 + 6));
    __int128 v11 = v19;
  }

  else
  {
    __int128 v15 = *(__int128 *)((char *)a2 + 40);
    *((void *)v11 + 7) = *((void *)a2 + 7);
    *(_OWORD *)uint64_t v14 = v15;
  }

  std::string v19 = v11 + 64;
  sub_1000555EC(a1, v18);
  uint64_t v16 = a1[1];
  sub_1000377A0((uint64_t)v18);
  return v16;
}

void sub_100055760(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100055774()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1012C8520;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MiLoLoiTable");
  __int128 v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__l.__cap_ = v0->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0LL;
  v0->__r_.__value_.__l.__cap_ = 0LL;
  v0->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v2 = std::string::append(&v20, " (");
  __int128 v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__l.__cap_ = v2->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0LL;
  v2->__r_.__value_.__l.__cap_ = 0LL;
  v2->__r_.__value_.__r.__words[0] = 0LL;
  sub_100050FC8((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v8 = std::string::append(&v22, ") ");
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  sub_100051090((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    __int128 v10 = __p;
  }
  else {
    __int128 v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  __int128 v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_101993A38 = v12->__r_.__value_.__l.__cap_;
  xmmword_101993A28 = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  return __cxa_atexit( (void (*)(void *))&std::string::~string,  &xmmword_101993A28,  (void *)&_mh_execute_header);
}

void sub_100055960( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100055A0C(uint64_t *a1)
{
  uint64_t result = objc_opt_class(&OBJC_CLASS___BMMicroLocationRestrictedLocalizationStream);
  if (result)
  {
    uint64_t result = objc_opt_new(&OBJC_CLASS___BMMicroLocationRestrictedLocalizationStream);
    *a1 = result;
  }

  return result;
}

void sub_100055A44(id *a1)
{
  *a1 = 0LL;
}

id *sub_100055A6C(id *result, void *a2)
{
  if (*result)
  {
    __int128 v3 = result;
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819F10);
    }
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Saving Microlocation localization results to Biome restricted stream",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819F10);
      }
      v14[0] = 0;
      __int128 v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Saving Microlocation localization results to Biome restricted stream",  v14,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicrolocationBiomePublisherHelper::saveEventsToBiomeStream(NSArray<BMMicroLocationRestrictedLocalizationEvent *> *)",  "%s\n",  v9);
    }

    id v5 = [*v3 source];
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    uint64_t result = (id *)[a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)v11;
      do
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(a2);
          }
          [v5 sendEvent:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8)];
          uint64_t v8 = (id *)((char *)v8 + 1);
        }

        while (v6 != v8);
        uint64_t result = (id *)[a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
        uint64_t v6 = result;
      }

      while (result);
    }
  }

  return result;
}

id sub_100055C98(uint64_t a1, void *a2)
{
  id result = (id)objc_opt_class(&OBJC_CLASS___BMLocationMicroLocationVisit);
  if (result)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819F10);
    }
    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Saving Microlocation localization results to Biome public stream",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819F10);
      }
      v14[0] = 0;
      __int128 v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Saving Microlocation localization results to Biome public stream",  v14,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicrolocationBiomePublisherHelper::saveEventsToPublicBiomeStream(NSArray<BMLocationMicroLocationVisit *> *)",  "%s\n",  v9);
    }

    id v5 = objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Location"), "MicroLocationVisit"), "source");
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    id result = [a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
    if (result)
    {
      id v6 = result;
      uint64_t v7 = *(void *)v11;
      do
      {
        uint64_t v8 = 0LL;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(a2);
          }
          [v5 sendEvent:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8)];
          uint64_t v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id result = [a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
        id v6 = result;
      }

      while (result);
    }
  }

  return result;
}

void sub_100055ED0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_100055EFC(void *a1, uint64_t a2)
{
  *a1 = a2;
  v8[0] = &off_101819F90;
  v8[1] = a1;
  void v8[3] = v8;
  v9[0] = &off_10181A020;
  v9[1] = a1;
  void v9[3] = v9;
  v10[0] = &off_10181A0A0;
  v10[1] = a1;
  void v10[3] = v10;
  v11[0] = &off_10181A120;
  v11[1] = a1;
  __int128 v12 = v11;
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[1] = 0LL;
  __int128 v3 = (char *)operator new(0x80uLL);
  a1[3] = v3 + 128;
  a1[1] = v3;
  a1[2] = v3;
  uint64_t v4 = 0LL;
  a1[2] = sub_1000575E0((uint64_t)(a1 + 3), (uint64_t)v8, (uint64_t)&v13, (uint64_t)v3);
  do
  {
    id v5 = (&v12)[v4];
    if (&v11[v4] == v5)
    {
      id v5 = &v11[v4];
      uint64_t v6 = 4LL;
    }

    else
    {
      if (!v5) {
        goto LABEL_7;
      }
      uint64_t v6 = 5LL;
    }

    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
    v4 -= 4LL;
  }

  while (v4 != -16);
  a1[7] = 0LL;
  a1[8] = 0LL;
  return a1;
}

void sub_10005603C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 16) = v14;
  sub_10005771C(&a10);
  uint64_t v16 = 0LL;
  while (1)
  {
    char v17 = *(char **)(&a12 + v16 + 120);
    if (&a12 + v16 + 96 == v17) {
      break;
    }
    if (v17)
    {
      uint64_t v18 = 5LL;
LABEL_6:
      (*(void (**)(void))(*(void *)v17 + 8 * v18))();
    }

    v16 -= 32LL;
    if (v16 == -128) {
      _Unwind_Resume(a1);
    }
  }

  char v17 = &a12 + v16 + 96;
  uint64_t v18 = 4LL;
  goto LABEL_6;
}

void sub_1000560AC(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 64) = j__CFAbsoluteTimeGetCurrent_1();
  *(_DWORD *)(a1 + 32) = sub_1000382F4(*(void *)a1);
  *(_DWORD *)(a1 + 36) = sub_1000380E0(*(void *)a1);
  *(_DWORD *)(a1 + 40) = sub_100037DF0(*(void *)a1);
  *(_DWORD *)(a1 + 44) = sub_100038508(*(void *)a1);
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = sub_1000387F4(*(void *)a1);
  *(double *)(a1 + 56) = sub_10002AED8(*(void *)a1);
}

void sub_100056118(uint64_t a1)
{
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  char v3 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v2, v20);
  CFRelease(v2);
  BOOL v4 = v20[0];
  id v5 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v4) {
    char v8 = 0;
  }
  else {
    char v8 = v3;
  }
  if ((v8 & 1) != 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819F60);
    }
    __int128 v9 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to CoreAnalytics is disabled",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819F60);
      }
      *(_WORD *)std::string v20 = 0;
      __int128 v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to Co reAnalytics is disabled",  v20,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationMaintenance::collectMetricsPostMaintenance()",  "%s\n",  v10);
    }
  }

  else
  {
    double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
    double v12 = *(double *)(a1 + 56);
    int v13 = sub_1000382F4(*(void *)a1);
    int v14 = sub_1000380E0(*(void *)a1);
    int v15 = sub_100037DF0(*(void *)a1);
    int v16 = sub_100038508(*(void *)a1);
    int v17 = sub_1000387F4(*(void *)a1);
    sub_10002D640(*(void *)a1, buf);
    CFAbsoluteTime v18 = j__CFAbsoluteTimeGetCurrent_1();
    double v19 = *(double *)(a1 + 64);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3321888768LL;
    void v21[2] = sub_1000564A8;
    uint64_t v21[3] = &unk_101819F30;
    v21[4] = a1;
    v21[5] = (uint64_t)((Current_1 - v12) / 60.0);
    int v25 = v13;
    int v26 = v14;
    int v27 = v15;
    int v28 = v16;
    int v29 = v17;
    *(double *)&v21[6] = v18 - v19;
    std::string v23 = 0LL;
    uint64_t v24 = 0LL;
    std::string __p = 0LL;
    sub_1000577B4(&__p, *(const void **)buf, (uint64_t)v31, ((uint64_t)v31 - *(void *)buf) >> 4);
    AnalyticsSendEventLazy(@"com.apple.MicroLocation.Maintenance", v21);
    if (__p)
    {
      std::string v23 = __p;
      operator delete(__p);
    }

    if (*(void *)buf)
    {
      int v31 = *(std::__shared_weak_count **)buf;
      operator delete(*(void **)buf);
    }
  }

void sub_100056454( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1000564A8(uint64_t a1)
{
  CFStringRef v2 = *(_DWORD **)(a1 + 32);
  v4[0] = @"ageOfOldestRecordingDays";
  v5[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v4[1] = @"numModels";
  v5[1] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 80));
  void v4[2] = @"numModelsDeleted";
  void v5[2] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (v2[8] - *(_DWORD *)(a1 + 80)));
  v4[3] = @"numRecordingEvents";
  void v5[3] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 84));
  v4[4] = @"numRecordingEventsDeleted";
  v5[4] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (v2[9] - *(_DWORD *)(a1 + 84)));
  v4[5] = @"numMeasurements";
  v5[5] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 88));
  v4[6] = @"numMeasurementsDeleted";
  void v5[6] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (v2[10] - *(_DWORD *)(a1 + 88)));
  v4[7] = @"numConfigurations";
  v5[7] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 92));
  v4[8] = @"numConfiguationsDeleted";
  _WORD v5[8] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (v2[11] - *(_DWORD *)(a1 + 92)));
  v4[9] = @"numRapportEntries";
  v5[9] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 96));
  v4[10] = @"numRapportEntriesDeleted";
  v5[10] = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (v2[12] - *(_DWORD *)(a1 + 96)));
  v4[11] = @"maintenanceRunTime";
  v5[11] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48));
  v4[12] = @"numCustomLoiIds";
  v5[12] = +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  13LL);
}

void *sub_1000566BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  CFStringRef v2 = (void *)(a1 + 56);
  v2[2] = 0LL;
  return sub_1000577B4( v2,  *(const void **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
}

void sub_1000566D8(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }

void sub_1000566F0(void **a1)
{
  __int128 v1 = *a1;
  sub_1002F0B04(&v23);
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsRecordingPurgeAge", 0x8000100u, kCFAllocatorNull);
  int v3 = sub_1002A77CC(v23, (uint64_t)v2, buf);
  CFRelease(v2);
  unsigned int v4 = *(_DWORD *)buf;
  id v5 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    uint64_t v6 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v3) {
    uint64_t v8 = 1440LL * v4;
  }
  else {
    uint64_t v8 = 70560LL;
  }
  sub_1002F0B04(&v23);
  CFStringRef v9 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsSimilarityListLabelsPurgeAge", 0x8000100u, kCFAllocatorNull);
  int v10 = sub_1002A77CC(v23, (uint64_t)v9, buf);
  CFRelease(v9);
  unsigned int v11 = *(_DWORD *)buf;
  double v12 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    int v13 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (v10) {
    uint64_t v15 = 1440LL * v11;
  }
  else {
    uint64_t v15 = 40320LL;
  }
  int v16 = sub_1000255A4(v1, v8, v15, 1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819F60);
  }
  int v17 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime v18 = "NOT ";
    if (v16) {
      CFAbsoluteTime v18 = "";
    }
    *(_DWORD *)__int128 buf = 136446210;
    std::string v22 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Did %{public}s delete old data", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819F60);
    }
    double v19 = "NOT ";
    if (v16) {
      double v19 = "";
    }
    LODWORD(v23) = 136446210;
    *(void *)((char *)&v23 + 4) = v19;
    std::string v20 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Did %{public}s delete old data",  &v23,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationMaintenance::deleteOldEntries()", "%s\n", v20);
  }

#error "100056BA8: call analysis failed (funcsize=93)"
void sub_100056C08(uint64_t *a1)
{
  int v1;
  os_log_s *v2;
  const char *v3;
  const char *v4;
  char *v5;
  int v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;
  __int128 v1 = sub_1000305A4(*a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819F60);
  }
  CFStringRef v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    int v3 = "NOT";
    if (v1) {
      int v3 = "";
    }
    *(_DWORD *)__int128 buf = 136446210;
    CFStringRef v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Did %{public}s free database space", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819F60);
    }
    unsigned int v4 = "NOT";
    if (v1) {
      unsigned int v4 = "";
    }
    uint64_t v6 = 136446210;
    unint64_t v7 = v4;
    id v5 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  1LL,  "Did %{public}s free database space",  &v6,  12);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMicroLocationMaintenance::freeDatabaseSpace()", "%s\n", v5);
  }

#error "100056F48: call analysis failed (funcsize=91)"
uint64_t sub_100056FA8(uint64_t a1)
{
  return a1 + 8;
}

void sub_100056FB0(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_100056FE4(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_101819F90;
  result[1] = v3;
  return result;
}

uint64_t sub_100057018(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_101819F90;
  a2[1] = v2;
  return result;
}

void *sub_100057034(uint64_t a1, uint64_t a2)
{
  id result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    id result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1000570C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000570FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100057138()
{
}

uint64_t sub_100057144(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void *sub_1000571B0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_10181A020;
  result[1] = v3;
  return result;
}

uint64_t sub_1000571E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10181A020;
  a2[1] = v2;
  return result;
}

void *sub_100057200(uint64_t a1, uint64_t a2)
{
  id result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    id result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_100057290( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000572C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100057304()
{
}

void *sub_100057318(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_10181A0A0;
  result[1] = v3;
  return result;
}

uint64_t sub_10005734C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10181A0A0;
  a2[1] = v2;
  return result;
}

void *sub_100057368(uint64_t a1, uint64_t a2)
{
  id result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    id result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1000573F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057430(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10005746C()
{
}

void *sub_100057480(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &off_10181A120;
  result[1] = v3;
  return result;
}

uint64_t sub_1000574B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_10181A120;
  a2[1] = v2;
  return result;
}

void *sub_1000574D0(uint64_t a1, uint64_t a2)
{
  id result = v6;
  if (v6 == v5)
  {
    uint64_t v4 = 4LL;
    id result = v5;
  }

  else
  {
    if (!v6) {
      return result;
    }
    uint64_t v4 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_100057560( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100057598(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1000575D4()
{
}

uint64_t sub_1000575E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10001A504(v4, v6);
      v6 += 32LL;
      uint64_t v4 = v11 + 32;
      v11 += 32LL;
    }

    while (v6 != a3);
  }

  char v9 = 1;
  sub_100057680((uint64_t)v8);
  return v4;
}

void sub_10005766C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100057680(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_1000576B4(a1);
  }
  return a1;
}

uint64_t sub_1000576B4(uint64_t result)
{
  uint64_t v1 = **(void **)(result + 16);
  uint64_t v2 = **(void **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      uint64_t v3 = v1 - 32;
      id result = *(void *)(v1 - 8);
      if (v1 - 32 == result) {
        break;
      }
      if (result)
      {
        uint64_t v4 = 5LL;
LABEL_6:
        id result = (*(uint64_t (**)(void))(*(void *)result + 8 * v4))();
      }

      uint64_t v1 = v3;
      if (v3 == v2) {
        return result;
      }
    }

    id result = v1 - 32;
    uint64_t v4 = 4LL;
    goto LABEL_6;
  }

  return result;
}

void sub_10005771C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  id v5 = **a1;
  if (v4 == v2) {
    goto LABEL_10;
  }
  do
  {
    uint64_t v6 = v4 - 32;
    unint64_t v7 = (char *)*((void *)v4 - 1);
    if (v4 - 32 == v7)
    {
      unint64_t v7 = v4 - 32;
      uint64_t v8 = 4LL;
    }

    else
    {
      if (!v7) {
        goto LABEL_8;
      }
      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*(void *)v7 + 8 * v8))();
LABEL_8:
    uint64_t v4 = v6;
  }

  while (v6 != v2);
  id v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void *sub_1000577B4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    id result = sub_10005782C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_100057810(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10005782C(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_100007008();
  }
  id result = (char *)sub_100037038((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double sub_10005786C(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_WORD *)(a1 + 141) = 0;
  *(_WORD *)(a1 + 158) = 0;
  *(_OWORD *)(a1 + sub_100019CEC(v39 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 94) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 118) = 0LL;
  *(_DWORD *)(a1 + 175) = 0;
  *(void *)(a1 + 184) = a2;
  return result;
}

uint64_t sub_1000578AC(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  uint64_t v10 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    __int128 buf = (void *)68289794;
    *(_WORD *)std::string v70 = 2082;
    *(void *)&v70[2] = "";
    __int16 v71 = 1026;
    *(_DWORD *)std::string v72 = a3;
    *(_WORD *)&v72[4] = 1026;
    *(_DWORD *)&v72[6] = a4;
    LOWORD(v73[0]) = 2050;
    *(void *)((char *)v73 + 2) = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager: requestLocalization, isForce:%{public}hhd, isInMotio nTrigger:%{public}hhd, TriggerReason:%{public}lu}",  (uint8_t *)&buf,  0x28u);
  }

  int v11 = sub_10005B614(a1, a2);
  char v12 = v11;
  if (v11) {
    unsigned int v13 = 5;
  }
  else {
    unsigned int v13 = 0;
  }
  unsigned int v66 = v13;
  double v65 = sub_10010323C(a2);
  BOOL v14 = sub_100058520(a2);
  id v15 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if ((v12 & 1) == 0)
  {
    if (a1[124])
    {
      (*(void (**)(void, uint64_t))(**((void **)a1 + 23) + 32LL))(*((void *)a1 + 23), a2);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      uint64_t v16 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181A190);
        }
        LOWORD(v64[0]) = 0;
        int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer",  v64,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLoc ationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)",  "%s\n",  v17);
      }

LABEL_26:
      unsigned int v20 = 1;
LABEL_27:
      unsigned int v66 = v20;
      goto LABEL_28;
    }

    int v18 = *a1;
    if (v18 == 1)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      double v19 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing",  (uint8_t *)&buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181A190);
        }
        LOWORD(v64[0]) = 0;
        std::string v61 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing",  v64,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLoc ationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)",  "%s\n",  v61);
      }

      (*(void (**)(void, uint64_t, void))(**((void **)a1 + 23) + 24LL))( *((void *)a1 + 23),  a2,  v14 & (a4 ^ 1u));
      goto LABEL_26;
    }

    if (*((_DWORD *)a1 + 24) == 1)
    {
      __int128 v30 = (uint64_t *)*((void *)a1 + 3);
      if (v30)
      {
        while (*((_DWORD *)v30 + 8) != 1)
        {
          __int128 v30 = (uint64_t *)*v30;
          if (!v30) {
            goto LABEL_53;
          }
        }

        if (sub_1000585B4() && !a3)
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181A190);
          }
          int v31 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache",  (uint8_t *)&buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181A190);
            }
            LOWORD(v64[0]) = 0;
            std::string v62 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache",  v64,  2);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicr oLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)",  "%s\n",  v62);
          }

          unsigned int v20 = 4;
          goto LABEL_27;
        }

        int v18 = *a1;
      }
    }

  *(_DWORD *)(a1 + 72) |= 0x10u;
  char v12 = *(void **)(a1 + 32);
  if (!v12)
  {
    char v12 = operator new(0x30uLL);
    *char v12 = off_10181A720;
    v12[1] = 0LL;
    v12[2] = 3LL;
    void v12[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v12[4] = 0LL;
    uint64_t v12[5] = 0LL;
    *(void *)(a1 + 32) = v12;
  }

  unsigned int v13 = *(void *)(a2 + 32);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A0818 + 32);
  }
  sub_100066D7C((uint64_t)v12, v13);
  uint64_t v6 = *(_DWORD *)(a2 + 72);
  if ((v6 & 0x20) != 0) {
    goto LABEL_31;
  }
LABEL_12:
  if ((v6 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_36:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  uint64_t v16 = *(void **)(a1 + 48);
  if (!v16)
  {
    uint64_t v16 = operator new(0x48uLL);
    *uint64_t v16 = off_10181A4C8;
    v16[1] = 0LL;
    std::locale v16[2] = 5LL;
    void v16[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v16[6] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v16[7] = 0LL;
    v16[4] = 0LL;
    v16[5] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v16 + 16) = 0;
    *(void *)(a1 + sub_100019CEC(v39 + 48) = v16;
  }

  int v17 = *(void *)(a2 + 48);
  if (!v17) {
    int v17 = *(void *)(qword_1019A0818 + 48);
  }
  sub_10006424C((uint64_t)v16, v17);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 72) |= 0x80u;
    int v18 = *(void **)(a1 + 56);
    if (!v18)
    {
      int v18 = operator new(0x40uLL);
      *int v18 = off_10181A630;
      v18[1] = 0LL;
      void v18[2] = 6LL;
      v18[3] = 0LL;
      v18[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v18[5] = 1LL;
      *((_DWORD *)v18 + 14) = 0;
      v18[6] = 0LL;
      *(void *)(a1 + 56) = v18;
    }

    double v19 = *(void *)(a2 + 56);
    if (!v19) {
      double v19 = *(void *)(qword_1019A0818 + 56);
    }
    *(float *)&id v5 = sub_100065A7C((uint64_t)v18, v19);
  }

  return *(float *)&v5;
}

    if (v11 == 4) {
      return 1LL;
    }
    double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, v9, a3);
    if ((result & 1) == 0) {
      return 0LL;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline( this,  sub_100064130,  v5);
  if ((_DWORD)result) {
    goto LABEL_64;
  }
  return result;
}

  unsigned int v13 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 116) |= 0x10u;
  BOOL v14 = *(std::string **)(a1 + 32);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    BOOL v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 32) = v14;
  }

  std::string::operator=(v14, v13);
  id v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x40) == 0) {
    goto LABEL_15;
  }
LABEL_32:
  int v17 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 116) |= 0x40u;
  int v18 = *(std::string **)(a1 + 48);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v18 = (std::string *)operator new(0x18uLL);
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + sub_100019CEC(v39 + 48) = v18;
  }

  std::string::operator=(v18, v17);
  id v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x80) != 0)
  {
LABEL_35:
    double v19 = *(const std::string **)(a2 + 56);
    *(_DWORD *)(a1 + 116) |= 0x80u;
    unsigned int v20 = *(std::string **)(a1 + 56);
    if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unsigned int v20 = (std::string *)operator new(0x18uLL);
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 56) = v20;
    }

    std::string::operator=(v20, v19);
    id v5 = *(_DWORD *)(a2 + 116);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(10LL, *(void *)(v5 + 80), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  unsigned int v13 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 84) |= 0x10u;
  BOOL v14 = *(std::string **)(a1 + 32);
  if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    BOOL v14 = (std::string *)operator new(0x18uLL);
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 32) = v14;
  }

  std::string::operator=(v14, v13);
  id v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x40) == 0) {
    goto LABEL_15;
  }
LABEL_32:
  int v17 = *(const std::string **)(a2 + 56);
  *(_DWORD *)(a1 + 84) |= 0x40u;
  int v18 = *(std::string **)(a1 + 56);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v18 = (std::string *)operator new(0x18uLL);
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 56) = v18;
  }

  std::string::operator=(v18, v17);
  id v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x80) != 0)
  {
LABEL_35:
    double v19 = *(const std::string **)(a2 + 64);
    *(_DWORD *)(a1 + 84) |= 0x80u;
    unsigned int v20 = *(std::string **)(a1 + 64);
    if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unsigned int v20 = (std::string *)operator new(0x18uLL);
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 64) = v20;
    }

    std::string::operator=(v20, v19);
    id v5 = *(_DWORD *)(a2 + 84);
  }

  char v9 = *(void *)(v5 + 24);
  if (!v9) {
    char v9 = *(void *)(qword_1019A0980 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }

  sub_1000B73C0((uint64_t)&v28, v8, v3);
  memset(buf, 0, sizeof(buf));
  double v32 = 1065353216;
  id v15 = (uint64_t)v28;
  BOOL v14 = v29;
  if (v28 == v29)
  {
    int v17 = (uint64_t)v28;
  }

  else
  {
    do
    {
      __p[0] = (void *)(v15 + 40);
      uint64_t v16 = sub_1000BB7F0((uint64_t)buf, (unsigned __int8 *)(v15 + 40), (uint64_t)&unk_1012CF090, (__int128 **)__p);
      ++*((void *)v16 + 5);
      v15 += 64LL;
    }

    while ((__int128 *)v15 != v14);
    id v15 = (uint64_t)v28;
    int v17 = (uint64_t)v29;
  }

  sub_1010DDBC0(__p, "home");
  __int128 v30 = __p;
  int v18 = *((void *)sub_1000BBB2C((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)&v30) + 5);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "work");
  __int128 v30 = __p;
  double v19 = *((void *)sub_1000BBB2C((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)&v30) + 5);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  sub_1010DDBC0(__p, "airplay");
  __int128 v30 = __p;
  unsigned int v20 = *((void *)sub_1000BBB2C((uint64_t)buf, (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)&v30) + 5);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v21 = sub_1000B7444(*(void *)(a1 + 8));
  std::string v22 = sub_10002C5E8(*(void *)(a1 + 8));
  __int128 v23 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v24 = (v17 - v15) >> 6;
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v24),  @"loiCount");
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v18),  @"loiHomeCount");
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v19),  @"loiWorkCount");
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v20),  @"loiAirplayCount");
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v24 - v18),  @"loiNotHomeCount");
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6),  @"hasLegacy");
  objc_msgSend( v23,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (v21 - v22)),  @"deduplicatedLoiCount");
  sub_10004AD90((uint64_t)buf);
  *(void *)__int128 buf = &v28;
  sub_10003706C((void ***)buf);
  return v23;
}

  uint64_t v10 = *(_BYTE *)(a2 + 89);
  *(_DWORD *)(a1 + 96) |= 4u;
  *(_BYTE *)(a1 + 89) = v10;
  uint64_t v6 = *(_DWORD *)(a2 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 24),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 72),  a3);
  if ((*(_DWORD *)(v5 + 96) & 0x800) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 80),  a3);
  }
  return result;
}

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 92) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 92) |= 0x20u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 92) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 92) |= 0x20u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 92) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 92) |= 0x20u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 92) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 92) |= 0x20u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 92) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 92) |= 0x20u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 92) |= 8u;
  *(double *)(a1 + 32) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 92) |= 0x20u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  if ((v5 & 0xFF0000) != 0)
  {
    if ((v5 & 0x10000) != 0)
    {
      char v9 = *(_DWORD *)(a2 + 120);
      if (((v9 - 25) > 0x32 || ((1LL << (v9 - 25)) & 0x4000002000001LL) == 0)
        && (v9 + 1) >= 2)
      {
        sub_10122F9B4();
      }

      *(_DWORD *)(a1 + 152) |= 0x10000u;
      *(_DWORD *)(a1 + 120) = v9;
      id v5 = *(_DWORD *)(a2 + 152);
    }

    if ((v5 & 0x20000) != 0)
    {
      uint64_t v10 = *(_DWORD *)(a2 + 124);
      if (v10 >= 3) {
        sub_10122F98C();
      }
      *(_DWORD *)(a1 + 152) |= 0x20000u;
      *(_DWORD *)(a1 + 124) = v10;
      id v5 = *(_DWORD *)(a2 + 152);
    }

    if ((v5 & 0x40000) != 0)
    {
      int v11 = *(_DWORD *)(a2 + 128);
      if (v11 >= 3) {
        sub_10122F964();
      }
      *(_DWORD *)(a1 + 152) |= 0x40000u;
      *(_DWORD *)(a1 + 128) = v11;
      id v5 = *(_DWORD *)(a2 + 152);
    }

    if ((v5 & 0x80000) != 0)
    {
      char v12 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)(a1 + 152) |= 0x80000u;
      *(_DWORD *)(a1 + 132) = v12;
      id v5 = *(_DWORD *)(a2 + 152);
    }

    if ((v5 & 0x100000) != 0)
    {
      unsigned int v13 = *(void *)(a2 + 136);
      *(_DWORD *)(a1 + 152) |= 0x100000u;
      *(void *)(a1 + 136) = v13;
      id v5 = *(_DWORD *)(a2 + 152);
    }

    if ((v5 & 0x200000) != 0)
    {
      BOOL v14 = *(_BYTE *)(a2 + 144);
      *(_DWORD *)(a1 + 152) |= 0x200000u;
      *(_BYTE *)(a1 + 144) = v14;
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  *(_DWORD *)(v5 + 48),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  double result = *(float *)(a2 + 20);
  *(_DWORD *)(a1 + 56) |= 8u;
  *(float *)(a1 + 20) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_11:
    if ((v6 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_28:
    double result = *(float *)(a2 + 28);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(float *)(a1 + 28) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 56);
    if ((v6 & 0x40) == 0)
    {
LABEL_13:
      if ((v6 & 0x80) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }

    goto LABEL_29;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 40),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  *(_DWORD *)(a1 + 56) |= 4u;
  char v12 = *(void **)(a1 + 24);
  if (!v12)
  {
    char v12 = operator new(0x20uLL);
    v12[1] = 0LL;
    v12[2] = 0LL;
    *char v12 = off_1018295C0;
    *((_DWORD *)v12 + 6) = 0;
    *(void *)(a1 + 24) = v12;
  }

  unsigned int v13 = *(void *)(a2 + 24);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A0D28 + 24);
  }
  *(float *)&id v5 = sub_1001F4F7C((uint64_t)v12, v13);
  uint64_t v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 46),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x100) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(float *)(v5 + 48),  a3);
  }
  return result;
}

  unsigned int v13 = *(_DWORD *)(a2 + 40);
  if (v13 >= 5) {
    sub_1012301AC();
  }
  *(_DWORD *)(a1 + 56) |= 0x10u;
  *(_DWORD *)(a1 + 40) = v13;
  uint64_t v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_33:
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    *(_DWORD *)(a1 + 44) = LODWORD(v5);
    if ((*(_DWORD *)(a2 + 56) & 0x80) == 0) {
      return *(float *)&v5;
    }
    goto LABEL_12;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 45),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

    double result = *(double *)(a2 + 64);
    *(_DWORD *)(a1 + 88) |= 0x40u;
    *(double *)(a1 + 64) = result;
    if ((*(_DWORD *)(a2 + 88) & 0x80) == 0) {
      return result;
    }
LABEL_19:
    double result = *(double *)(a2 + 72);
    *(_DWORD *)(a1 + 88) |= 0x80u;
    *(double *)(a1 + 72) = result;
  }

  return result;
}

  int v18 = *(_DWORD *)(a2 + 48);
  if (v18 >= 4) {
    sub_1012302EC();
  }
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = v18;
  unsigned int v13 = *(_DWORD *)(a2 + 76);
  if ((v13 & 0x10) != 0) {
    goto LABEL_28;
  }
LABEL_16:
  if ((v13 & 0x20) == 0) {
    goto LABEL_17;
  }
LABEL_29:
  *(_DWORD *)(a1 + 76) |= 0x20u;
  unsigned int v20 = *(_WORD **)(a1 + 56);
  if (!v20)
  {
    unsigned int v20 = operator new(0x18uLL);
    *(void *)unsigned int v20 = off_10182A010;
    v20[4] = 0;
    *((_DWORD *)v20 + 3) = 0;
    *((_DWORD *)v20 + 4) = 0;
    *(void *)(a1 + 56) = v20;
  }

  uint64_t v21 = *(_BYTE **)(a2 + 56);
  if (!v21) {
    uint64_t v21 = *(_BYTE **)(qword_1019A0DB0 + 56);
  }
  sub_100201378((uint64_t)v20, v21);
  if ((*(_DWORD *)(a2 + 76) & 0x40) != 0)
  {
LABEL_18:
    BOOL v14 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 76) |= 0x40u;
    *(void *)(a1 + 64) = v14;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(float *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_sessionType),  @"sessionType");
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_11:
    if ((has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PBDataWriterWriteBOOLField(a3, self->_eligibleForHealthKit, 10LL);
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_12:
    if ((has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  *((_BYTE *)a3 + 101) = self->_eligibleForHealthKit;
  *((_WORD *)a3 + 52) |= 0x4000u;
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_12:
    if ((has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  *((_DWORD *)result + 23) = self->_sessionType;
  *((_WORD *)result + 52) |= 0x800u;
  has = (__int16)self->_has;
  if ((has & 0x4000) == 0)
  {
LABEL_11:
    if ((has & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  self->_eligibleForHealthKit = *((_BYTE *)a3 + 101);
  *(_WORD *)&self->_has |= 0x4000u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 0x2000) == 0)
  {
LABEL_12:
    if ((v3 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double v19 = **(void (****)(double))(a1 + 200);
  if (v9 == INFINITY)
  {
    unsigned int v20 = (uint64_t (**)(void))(v19 + 3);
  }

  else
  {
    (*v19)(v9);
    unsigned int v20 = (uint64_t (**)(void))(**(void **)(a1 + 200) + 16LL);
  }

  return (*v20)();
}

  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_10031B628;
  v36[3] = &unk_1018327E0;
  double v37 = a2;
  __int128 v38 = a3;
  uint64_t v36[4] = a4;
  sub_100319030((uint64_t)a1, 3u, (uint64_t)v36);
}

    unsigned int v13 = v14;
    v15 += 96LL;
    v14 += 96LL;
    if (v14 == a2) {
      return 1LL;
    }
  }

  double v19 = *(_DWORD *)(v14 + 24);
LABEL_9:
  double v41 = *(void *)(v14 + 16);
  unint64_t v40 = *(_OWORD *)v14;
  __int128 v38 = *(void *)(v14 + 28);
  std::string v39 = *(_DWORD *)(v14 + 36);
  unsigned int v20 = *(double *)(v14 + 40);
  uint64_t v21 = *(void *)(v14 + 48);
  *(_OWORD *)unint64_t v43 = *(_OWORD *)(v14 + 60);
  *(_OWORD *)&v43[16] = *(_OWORD *)(v14 + 76);
  std::string v22 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)BOOL v14 = *(_OWORD *)v13;
  *(_OWORD *)(v14 + 16) = v22;
  __int128 v23 = *(_OWORD *)(v13 + 32);
  uint64_t v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v13 + 73);
  char v25 = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(v14 + sub_100019CEC(v39 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v25;
  int v26 = a1;
  *(_OWORD *)(v14 + 32) = v23;
  if (v13 != a1)
  {
    char v27 = v15;
    while (1)
    {
      uint64_t v28 = a1 + v27;
      int v29 = *(_DWORD *)(a1 + v27 + 152);
      if (v17 <= v29)
      {
        if (v17 != v29) {
          goto LABEL_23;
        }
        __int128 v30 = *(_DWORD *)(a1 + v27 + 120);
        if (v19 <= v30)
        {
          if (v19 != v30)
          {
LABEL_23:
            int v26 = v13;
            goto LABEL_25;
          }
        }
      }

      int v31 = (_OWORD *)(v28 + 192);
      v13 -= 96LL;
      double v32 = (_OWORD *)(v28 + 96);
      double v33 = v32[3];
      v31[2] = v32[2];
      v31[3] = v33;
      v31[4] = v32[4];
      *(_OWORD *)((char *)v31 + 73) = *(_OWORD *)((char *)v32 + 73);
      CFStringRef v34 = v32[1];
      *int v31 = *v32;
      v31[1] = v34;
      v27 -= 96LL;
      if (v27 == -192)
      {
        int v26 = a1;
        goto LABEL_25;
      }
    }

    int v26 = a1 + v27 + 192;
  }

    unsigned int v13 = v14;
    v15 += 96LL;
    v14 += 96LL;
    if (v14 == a2) {
      return 1LL;
    }
  }

  double v19 = *(_DWORD *)(v14 + 24);
LABEL_9:
  std::string v39 = *(void *)(v14 + 16);
  unsigned int v20 = *(_DWORD *)(v14 + 28);
  uint64_t v21 = *(double *)(v14 + 32);
  double v37 = *(_OWORD *)(v14 + 40);
  __int128 v38 = *(_OWORD *)v14;
  *(_OWORD *)double v41 = *(_OWORD *)(v14 + 60);
  *(_OWORD *)&v41[16] = *(_OWORD *)(v14 + 76);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v13 + 73);
  std::string v22 = *(_OWORD *)(v13 + 64);
  __int128 v23 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)BOOL v14 = *(_OWORD *)v13;
  *(_OWORD *)(v14 + 16) = v23;
  uint64_t v24 = *(_OWORD *)(v13 + 48);
  char v25 = a1;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v14 + sub_100019CEC(v39 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v22;
  if (v13 != a1)
  {
    int v26 = v15;
    while (1)
    {
      char v27 = a1 + v26;
      uint64_t v28 = *(_DWORD *)(a1 + v26 + 152);
      if (v17 <= v28)
      {
        if (v17 != v28) {
          goto LABEL_23;
        }
        int v29 = *(_DWORD *)(a1 + v26 + 120);
        if (v19 <= v29)
        {
          if (v19 != v29)
          {
LABEL_23:
            char v25 = v13;
            goto LABEL_25;
          }
        }
      }

      __int128 v30 = (_OWORD *)(v27 + 192);
      v13 -= 96LL;
      int v31 = (_OWORD *)(v27 + 96);
      double v32 = v31[3];
      v30[2] = v31[2];
      v30[3] = v32;
      v30[4] = v31[4];
      *(_OWORD *)((char *)v30 + 73) = *(_OWORD *)((char *)v31 + 73);
      double v33 = v31[1];
      *__int128 v30 = *v31;
      v30[1] = v33;
      v26 -= 96LL;
      if (v26 == -192)
      {
        char v25 = a1;
        goto LABEL_25;
      }
    }

    char v25 = a1 + v26 + 192;
  }

  PBDataWriterWriteUint32Field(a3, self->_nLowCatherine, 4LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  *((_DWORD *)a3 + 17) = self->_nLowCatherine;
  *((_DWORD *)a3 + 26) |= 0x2000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  self->_nLowCatherine = *((_DWORD *)a3 + 17);
  *(_DWORD *)&self->_has |= 0x2000u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x800) == 0)
  {
LABEL_5:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

    sub_1001040F8();
  }

  if (v7 != __s1.__r_.__value_.__l.__size_) {
    goto LABEL_10;
  }
  if (v7 == -1LL) {
    goto LABEL_26;
  }
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (!memcmp(p_s1, v6, v8))
  {
    unsigned int v13 = 0LL;
    if ((size & 0x80) == 0) {
      return v13;
    }
    goto LABEL_22;
  }

LABEL_28:
  -[CLUsageSyncManager setPairedDeviceID:](self, "setPairedDeviceID:", v16);
  if (-[CLUsageSyncManager isPaired](self, "isPaired"))
  {
    if (objc_msgSend( -[CLUsageSyncManager currentlyActiveDevice](self, "currentlyActiveDevice"),  "isNearby"))
    {
      -[CLUsageSyncManager requestFullResync](self, "requestFullResync");
      uint64_t v24 = 0;
    }

    else
    {
      uint64_t v24 = 1;
    }

    self->_needFullResync = v24;
    -[CLUsageSyncManager sendAllUsageSyncData](self, "sendAllUsageSyncData");
  }

  -[CLUsageSyncManager setRetryTimer:]( self,  "setRetryTimer:",  objc_msgSend(objc_msgSend(-[CLUsageSyncManager universe](self, "universe"), "silo"), "newTimer"));
  *(void *)__int128 buf = 0LL;
  *(void *)int v29 = buf;
  *(void *)&v29[8] = 0x3052000000LL;
  *(void *)&v29[16] = sub_10060C160;
  *(void *)&v29[24] = sub_10060C170;
  __int128 v30 = self;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10060C17C;
  void v25[3] = &unk_10182EFC8;
  v25[4] = buf;
  -[CLTimer setHandler:](self->_retryTimer, "setHandler:", v25);
  -[CLTimer setNextFireDelay:](self->_retryTimer, "setNextFireDelay:", 1.79769313e308);
  self->_retryTimerSet = 0;
  _Block_object_dispose(buf, 8);
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  a2,  *(double *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  if ((v5 & 0x10000) != 0)
  {
    uint64_t v10 = a2[18];
    a1[20] |= 0x10000u;
    a1[18] = v10;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

        if (v11 != 4)
        {
          continue;
        }

        return 1LL;
      case 7u:
        int v11 = TagFallback & 7;
        unsigned int v20 = (char *)*((void *)this + 1);
        char v12 = *((void *)this + 2);
        goto LABEL_105;
      default:
        int v11 = TagFallback & 7;
        goto LABEL_26;
    }
  }

  double v19 = *(_DWORD *)(a2 + 48);
  a1[17] |= 0x20u;
  a1[12] = v19;
  unsigned int v13 = *(_DWORD *)(a2 + 68);
  if ((v13 & 0x40) != 0)
  {
LABEL_27:
    unsigned int v20 = *(_DWORD *)(a2 + 52);
    if (v20 >= 6) {
      sub_1012419BC();
    }
    a1[17] |= 0x40u;
    a1[13] = v20;
    unsigned int v13 = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x80) != 0) {
      goto LABEL_29;
    }
LABEL_19:
    if ((v13 & 0x100) == 0) {
      return;
    }
    goto LABEL_20;
  }

  char v12 = a2[6];
  a1[17] |= 0x10u;
  a1[6] = v12;
  id v5 = a2[17];
  if ((v5 & 0x20) != 0) {
    goto LABEL_27;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_28:
  BOOL v14 = a2[8];
  a1[17] |= 0x40u;
  a1[8] = v14;
  id v5 = a2[17];
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    uint64_t v6 = a2[9];
    a1[17] |= 0x80u;
    a1[9] = v6;
    id v5 = a2[17];
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  v5[12],  a2,  a4);
  uint64_t v6 = v5[17];
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v5[13],  a2,  a4);
  if ((v5[16] & 0x1000) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v5[14],  a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

    int v11 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 4u;
    *(_DWORD *)(a1 + 16) = v11;
    id v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

      unint64_t v47 = *(unsigned __int8 *)(a1 + 196);
      *(_DWORD *)(a1 + 600) = 0;
      if (v47)
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_1018504C8);
        }
        uint64_t v48 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 134218752;
          *(double *)&uint8_t buf[4] = v40;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2048;
          v165 = v42;
          __int128 v166 = 2048;
          uint64_t v167 = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "accM, (%.4f, %.4f, %.4f), mag, %.3f",  buf,  0x2Au);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_1018504C8);
          }
          *(_DWORD *)__int128 v154 = 134218752;
          *(double *)&v154[4] = v40;
          *(_WORD *)&v154[12] = 2048;
          *(double *)&v154[14] = v41;
          *(_WORD *)&v154[22] = 2048;
          __int128 v155 = v42;
          __int128 v156 = 2048;
          v157 = v45;
          LODWORD(v137) = 42;
          __int128 v120 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "accM, (%.4f, %.4f, %.4f), mag, %.3f",  COERCE_DOUBLE(v154),  v137,  v138,  v139);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v120);
          if (v120 != buf) {
            free(v120);
          }
        }
      }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v11 >= 0x80)
  {
    char v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    char v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v11 >= 0x80)
  {
    char v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    char v12 = 2;
  }

  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

  if ((v6 & 0x10) == 0)
  {
    if ((v6 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_34:
    *(_DWORD *)(a1 + 88) |= 0x20u;
    uint64_t v16 = *(char **)(a1 + 40);
    if (!v16)
    {
      uint64_t v16 = (char *)operator new(0x48uLL);
      *(void *)uint64_t v16 = off_101859020;
      *(_OWORD *)(v16 + 8) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 52) = 0u;
      *(void *)(a1 + 40) = v16;
    }

    int v17 = *(void *)(a2 + 40);
    if (!v17) {
      int v17 = *(void *)(qword_1019A17B8 + 40);
    }
    sub_1008124C8((uint64_t)v16, v17);
    uint64_t v6 = *(_DWORD *)(a2 + 88);
    if ((v6 & 0x40) == 0)
    {
LABEL_29:
      if ((v6 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_42;
    }

    goto LABEL_39;
  }

  BOOL v14 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 88) |= 0x10u;
  id v15 = *(std::string **)(a1 + 32);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    id v15 = (std::string *)operator new(0x18uLL);
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 32) = v15;
  }

  std::string::operator=(v15, v14);
  uint64_t v6 = *(_DWORD *)(a2 + 88);
  if ((v6 & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_28:
  if ((v6 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_39:
  int v18 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 88) |= 0x40u;
  double v19 = *(std::string **)(a1 + 48);
  if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    double v19 = (std::string *)operator new(0x18uLL);
    v19->__r_.__value_.__l.__size_ = 0LL;
    v19->__r_.__value_.__l.__cap_ = 0LL;
    v19->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + sub_100019CEC(v39 + 48) = v19;
  }

  std::string::operator=(v19, v18);
  uint64_t v6 = *(_DWORD *)(a2 + 88);
  if ((v6 & 0x80) != 0)
  {
LABEL_42:
    *(_DWORD *)(a1 + 88) |= 0x80u;
    unsigned int v20 = *(void **)(a1 + 56);
    if (!v20)
    {
      unsigned int v20 = operator new(0x28uLL);
      v20[1] = 0LL;
      void v20[2] = 0LL;
      *unsigned int v20 = off_101858E40;
      *((_DWORD *)v20 + 6) = 0;
      v20[4] = 0LL;
      *(void *)(a1 + 56) = v20;
    }

    uint64_t v21 = *(void *)(a2 + 56);
    if (!v21) {
      uint64_t v21 = *(void *)(qword_1019A17B8 + 56);
    }
    sub_100810938(v20, v21);
    uint64_t v6 = *(_DWORD *)(a2 + 88);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(7LL, *(void *)(v5 + 48), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

    *(_DWORD *)(a1 + 56) |= 8u;
    char v12 = *(void **)(a1 + 32);
    if (!v12)
    {
      char v12 = operator new(0x28uLL);
      v12[1] = 0LL;
      v12[2] = 0LL;
      *char v12 = off_1018594D0;
      *((_DWORD *)v12 + 6) = 0;
      v12[4] = 0LL;
      *(void *)(a1 + 32) = v12;
    }

    unsigned int v13 = *(void *)(a2 + 32);
    if (!v13) {
      unsigned int v13 = *(void *)(qword_1019A1818 + 32);
    }
    sub_1008180F0(v12, v13);
    id v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return;
      }
      goto LABEL_32;
    }
}
}
}
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", self->_workoutType),  @"workoutType");
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_12:
    if ((has & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  PBDataWriterWriteDoubleField(a3, 11LL, self->_cadence);
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_13:
    if ((has & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  *((void *)a3 + 1) = *(void *)&self->_cadence;
  *((_WORD *)a3 + 38) |= 1u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_13:
    if ((has & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  *((_DWORD *)result + 17) = self->_workoutType;
  *((_WORD *)result + 38) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_12:
    if ((has & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  self->_cadence = *((double *)a3 + 1);
  *(_WORD *)&self->_has |= 1u;
  uint64_t v3 = *((_WORD *)a3 + 38);
  if ((v3 & 8) == 0)
  {
LABEL_13:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  int v11 = *(void *)(v5 + 40);
  if (!v11) {
    int v11 = *(void *)(qword_1019A1A48 + 40);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  char v9 = *(void *)(v5 + 24);
  if (!v9) {
    char v9 = *(void *)(qword_1019A1A88 + 24);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v9,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 40),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_durationInSeconds),  @"durationInSeconds");
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  PBDataWriterWriteUint64Field(a3, self->_pointCount, 4LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  *((void *)a3 + 13) = self->_pointCount;
  *((_DWORD *)a3 + 41) |= 0x1000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  *((void *)result + 2) = *(void *)&self->_durationInSeconds;
  *((_DWORD *)result + 41) |= 2u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_5:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  self->_pointCFIndex Count = *((void *)a3 + 13);
  *(_DWORD *)&self->_has |= 0x1000u;
  uint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x400) == 0)
  {
LABEL_6:
    if ((v3 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101874268);
  }
  int v18 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    double v19 = a1[3];
    unsigned int v20 = 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v19;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v20;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
    int v31 = (int)a4;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "@WifiAps, history, %{public}lu, aged, %{public}lu, thresh, %{public}d",  (uint8_t *)&__p,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101874268);
    }
    uint64_t v21 = a1[3];
    std::string v22 = 0x2E8BA2E8BA2E8BA3LL * ((a2[1] - *a2) >> 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
    int v26 = (int)a4;
    LODWORD(v24) = 28;
    __int128 v23 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WifiAps, history, %{public}lu, aged, %{public}lu, thresh, %{public}d",  &buf,  v24);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiService_Type::AccessPointVector CL::Wifi1::Types::WifiScanHistory::removeAgedAccessPoints(cl::chrono::CFAbso luteTimeClock::time_point, cl::chrono::secondsf)",  "%s\n",  (const char *)v23);
    if (v23 != &__p) {
      free(v23);
    }
  }

  *(_DWORD *)(a1 + 396) |= 0x10u;
  unsigned int v13 = *(char **)(a1 + 32);
  if (!v13)
  {
    unsigned int v13 = (char *)operator new(0x28uLL);
    *(void *)unsigned int v13 = off_101875708;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(a1 + 32) = v13;
  }

  BOOL v14 = *(void *)(a2 + 32);
  if (!v14) {
    BOOL v14 = *(void *)(qword_1019A1D38 + 32);
  }
  sub_100BB8754((uint64_t)v13, v14);
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x20) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v7 & 0x40) == 0) {
    goto LABEL_15;
  }
LABEL_36:
  *(_DWORD *)(a1 + 396) |= 0x40u;
  int v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    int v17 = operator new(0x28uLL);
    v17[1] = 0LL;
    v17[2] = 0LL;
    *int v17 = off_1018758E8;
    *((_DWORD *)v17 + 6) = 0;
    v17[4] = 0LL;
    *(void *)(a1 + sub_100019CEC(v39 + 48) = v17;
  }

  int v18 = *(void *)(a2 + 48);
  if (!v18) {
    int v18 = *(void *)(qword_1019A1D38 + 48);
  }
  sub_100BB8978(v17, v18);
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 396) |= 0x80u;
    double v19 = *(void **)(a1 + 56);
    if (!v19)
    {
      double v19 = operator new(0x28uLL);
      v19[1] = 0LL;
      v19[2] = 0LL;
      *double v19 = off_101875960;
      *((_DWORD *)v19 + 6) = 0;
      v19[4] = 0LL;
      *(void *)(a1 + 56) = v19;
    }

    unsigned int v20 = *(void *)(a2 + 56);
    if (!v20) {
      unsigned int v20 = *(void *)(qword_1019A1D38 + 56);
    }
    sub_100BB8AB4(v19, v20);
    uint64_t v7 = *(_DWORD *)(a2 + 396);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(unsigned __int8 *)(v5 + 68),  v4,  a4);
  if ((*(_DWORD *)(v5 + 76) & 0x1000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(unsigned __int8 *)(v5 + 69),  v4,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

  sub_1002F0B04(buf);
  unsigned int v13 = sub_1002A7CB0(*(uint64_t *)&buf[0], "ConvergingStateConverganceAttemptsPerWindow", &v43);
  BOOL v14 = v13;
  id v15 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_32;
  }
  uint64_t v16 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    int v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v14) {
      goto LABEL_39;
    }
  }

  else
  {
LABEL_32:
    if (!v13) {
      goto LABEL_39;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10187F748);
  }
  int v18 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 67109120;
    DWORD1(buf[0]) = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "converging state overriding ConvergenceAttemptsPerWindow, %d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10187F748);
    }
    __int128 v45 = 67109120;
    LODWORD(v46) = v43;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "converging state overriding ConvergenceAttemptsPerWindow, %d",  &v45);
    __int128 v38 = (char *)v37;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceSettings::initSettingOverrides()", "%s\n", v37);
  }

  dword_101990494 = v43;
LABEL_39:
  sub_1002F0B04(buf);
  double v19 = sub_1002A82BC(*(uint64_t *)&buf[0], "ConvergingStateConverganceBudgetWindow", &v44);
  unsigned int v20 = v19;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_43;
  }
  std::string v22 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    __int128 v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v20) {
      goto LABEL_50;
    }
  }

  else
  {
LABEL_43:
    if (!v19) {
      goto LABEL_50;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10187F748);
  }
  uint64_t v24 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "converging state overriding ConvergenceBudgetWindow, %f",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10187F748);
    }
    __int128 v45 = 134217984;
    uint64_t v46 = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "converging state overriding ConvergenceBudgetWindow, %f",  COERCE_DOUBLE(&v45));
    unint64_t v40 = (char *)v39;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceSettings::initSettingOverrides()", "%s\n", v39);
  }

  qword_101990498 = v44;
LABEL_50:
  sub_1002F0B04(buf);
  char v25 = sub_1002A82BC(*(uint64_t *)&buf[0], "ConvergingStateConvergenceAttemptMaxDuration", &v44);
  int v26 = v25;
  char v27 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_54;
  }
  uint64_t v28 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    int v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v26) {
      return;
    }
  }

  else
  {
LABEL_54:
    if (!v25) {
      return;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10187F748);
  }
  __int128 v30 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "converging state overriding ConvergenceAttemptMaxDuration, %f",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10187F748);
    }
    __int128 v45 = 134217984;
    uint64_t v46 = v44;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "converging state overriding ConvergenceAttemptMaxDuration, %f",  COERCE_DOUBLE(&v45));
    uint64_t v42 = (char *)v41;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLFenceSettings::initSettingOverrides()", "%s\n", v41);
  }

  qword_1019904A0 = v44;
}

  uint64_t v10 = a2[1];
  *uint64_t v4 = *a2;
  v4[1] = v10;
  int v11 = a2[2];
  char v12 = a2[3];
  unsigned int v13 = a2[5];
  v4[4] = a2[4];
  v4[5] = v13;
  void v4[2] = v11;
  v4[3] = v12;
  BOOL v14 = a2[6];
  id v15 = a2[7];
  uint64_t v16 = a2[8];
  *(_OWORD *)((char *)v4 + 140) = *(_OWORD *)((char *)a2 + 140);
  v4[7] = v15;
  v4[8] = v16;
  v4[6] = v14;
}

  char v12 = *(void *)(v5 + 48);
  if (!v12) {
    char v12 = *(void *)(qword_1019A20E0 + 48);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v12,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }

  unsigned int v13 = *(_BYTE *)(a2 + 18);
  *(_DWORD *)(a1 + 32) |= 8u;
  *(_BYTE *)(a1 + 18) = v13;
  id v5 = *(_DWORD *)(a2 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    id v15 = *(_BYTE *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 0x20u;
    *(_BYTE *)(a1 + 20) = v15;
    id v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_29;
  }

        goto LABEL_28;
      }

    size_t v8 = (uint64_t *)v8[1];
  }

  while (v8 != &v31);
  uint64_t v16 = (uint64_t *)v29;
  if (v29 != v30)
  {
    do
    {
      sub_100F01E28((uint64_t)a1, (std::string *)(v16 + 4), v7 == 0);
      int v17 = (char *)v16[1];
      if (v17)
      {
        do
        {
          int v18 = (char **)v17;
          int v17 = *(char **)v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          int v18 = (char **)v16[2];
          double v19 = *v18 == (char *)v16;
          uint64_t v16 = (uint64_t *)v18;
        }

        while (!v19);
      }

      uint64_t v16 = (uint64_t *)v18;
    }

    while (v18 != v30);
  }

  char v12 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v12;
  id v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0) {
    goto LABEL_27;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_28:
  BOOL v14 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(_DWORD *)(a1 + 36) = v14;
  id v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    uint64_t v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v6;
    id v5 = *(_DWORD *)(a2 + 72);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(_DWORD *)(v5 + 52),  v4,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  BOOL v14 = *(_BYTE *)(a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 47) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_28:
    uint64_t v16 = *(_BYTE *)(a2 + 49);
    *(_WORD *)(result + 52) = v3 | 0x800;
    *(_BYTE *)(result + 49) = v16;
    return result;
  }

  PB::TextFormatter::format(this, "refereeCyclingStateDecision", *(_DWORD *)(a1 + 36));
  id v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 4) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 48), 0x16u);
  if ((*(_WORD *)(v3 + 52) & 0x800) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 49), 0x17u);
  }
  return result;
}

  BOOL v14 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 80) = v3;
  *(void *)(result + 40) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_28:
    uint64_t v16 = *(_DWORD *)(a2 + 56);
    *(_WORD *)(result + 80) = v3 | 0x80;
    *(_DWORD *)(result + 56) = v16;
    return result;
  }

  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 68));
  id v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 76));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xCu);
  if ((*(_WORD *)(v3 + 80) & 0x80) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0xDu);
  }
  return result;
}

  char v9 = *(_DWORD *)(a2 + 16);
  v3 |= 4u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 16) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingStatsThreshold", *(float *)(a1 + 28));
  id v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 113), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 85);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 85) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "stepSide", *(_DWORD *)(a1 + 76));
  id v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 86), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  char v25 = *(_BYTE *)(a2 + 37);
  *(_WORD *)(a1 + 48) |= 8u;
  *(_BYTE *)(a1 + 37) = v25;
  double v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 0x40) == 0)
  {
LABEL_17:
    if ((v19 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 38), 0xCu);
  if ((*(_WORD *)(v3 + 48) & 0x400) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 44), 0xDu);
  }
  return result;
}

  unsigned int v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 52) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  id v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "negPeakHeight", *(float *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "nAccelGap", *(_DWORD *)(a1 + 104));
  if ((*(_WORD *)(a1 + 120) & 0x20) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "numResets", *(_DWORD *)(a1 + 108));
LABEL_12:
  uint64_t v10 = *(float **)(a1 + 32);
  int v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    char v12 = *v10++;
    PB::TextFormatter::format(this, "prevQ", v12);
  }

  unsigned int v13 = *(float **)(a1 + 56);
  BOOL v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    id v15 = *v13++;
    PB::TextFormatter::format(this, "rawClampedAccel", v15);
  }

  uint64_t v16 = *(_WORD *)(a1 + 120);
  if ((v16 & 0x200) == 0)
  {
    if ((v16 & 2) == 0) {
      goto LABEL_18;
    }
LABEL_29:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 88));
    if ((*(_WORD *)(a1 + 120) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "shouldTrigger", *(_BYTE *)(a1 + 118));
  uint64_t v16 = *(_WORD *)(a1 + 120);
  if ((v16 & 2) != 0) {
    goto LABEL_29;
  }
LABEL_18:
  if ((v16 & 0x40) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "triggerPathBitmap", *(_DWORD *)(a1 + 112));
  return PB::TextFormatter::endObject(this);
}

  uint64_t v16 = *(_BYTE *)(a2 + 200);
  v8 |= 0x2000u;
  *(_WORD *)(a1 + 204) = v8;
  *(_BYTE *)(a1 + 200) = v16;
  uint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "epochLatchingCount", *(float *)(a1 + 24));
  id v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x65u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  size_t v8 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 92) = v3;
  *(void *)(result + 24) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 52));
  id v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x66u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  size_t v8 = *(_DWORD *)(a2 + 84);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 84) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "jHG", *(void *)(a1 + 24));
  id v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 92), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 128), 0xAu);
  if ((*(_BYTE *)(v3 + 140) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 136), 0xBu);
  }
  return result;
}

  int v11 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + 16) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "isBTHintDetected", *(_BYTE *)(a1 + 92));
  id v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x12Du);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  uint64_t v16 = *(void *)(a2 + 96);
  *(_WORD *)(a1 + 192) |= 4u;
  *(void *)(a1 + 96) = v16;
  int v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 0x10) == 0)
  {
LABEL_14:
    if ((v11 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }

  int v18 = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 116) |= 0x100u;
  *(_DWORD *)(a1 + 104) = v18;
  char v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 2) == 0)
  {
LABEL_11:
    if ((v9 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 6u);
  size_t v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  uint64_t v6 = *(_DWORD *)(a2 + 20);
  v3 |= 8u;
  *(_WORD *)(a1 + 64) = v3;
  *(_DWORD *)(a1 + 20) = v6;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "hronset", *(float *)(a1 + 40));
  id v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 52));
  id v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 32));
  id v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 28));
  id v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 60) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "elevationDescended", *(void *)(a1 + 24));
  id v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  char v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 76) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 60));
  id v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimeCv", *(double *)(a1 + 24));
  id v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }

  unsigned int v20 = *(void *)(a2 + 32);
  v6 |= 4u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 32) = v20;
  id v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }

  std::string v22 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 100) |= 8u;
  *(void *)(a1 + sub_100019CEC(v39 + 48) = v22;
  unsigned int v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 0x10) == 0)
  {
LABEL_15:
    if ((v13 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "totalDistanceCalibratedPedometer", *(double *)(a1 + 64));
  uint64_t v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x40) != 0) {
    goto LABEL_27;
  }
LABEL_15:
  if ((v7 & 0x80) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "totalDistanceOdometer", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xCu);
  if ((*(_WORD *)(v3 + 100) & 0x100) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xDu);
  }
  return result;
}

  int v18 = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 96) |= 1u;
  *(void *)(a1 + 32) = v18;
  uint64_t v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 4) != 0) {
    goto LABEL_27;
  }
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    int v11 = *(void *)(a2 + 40);
    *(_WORD *)(a1 + 96) |= 2u;
    *(void *)(a1 + 40) = v11;
  }

  return a1;
}

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  if ((*(_WORD *)(v3 + 96) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xCu);
  }
  return result;
}

  uint64_t v7 = *(_BYTE *)(a2 + 84);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 84) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "metSource", *(_DWORD *)(a1 + 76));
  id v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 85), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  double result = *(float *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 44) = result;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_28:
    double result = *(float *)(a2 + 40);
    *(_WORD *)(a1 + 64) = v3 | 0x80;
    *(float *)(a1 + 40) = result;
    return result;
  }

  PB::TextFormatter::format(this, "pocketObstructed", *(float *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "visible", *(float *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 0xCu);
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 40), 0xDu);
  }
  return result;
}

  size_t v8 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 60) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "filteredGravityZ", *(float *)(a1 + 32));
  id v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  char v9 = *(_BYTE *)(a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 81) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "gyroInUse", *(_BYTE *)(a1 + 79));
  id v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 79), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  char v12 = *(_BYTE *)(a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 58) = v12;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "pedEnergyZByPlane", *(float *)(a1 + 32));
  id v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 57), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  BOOL v14 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 36) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_28:
    uint64_t v16 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(result + 64) = v3 | 0x200;
    *(_DWORD *)(result + 52) = v16;
    return result;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0xCu);
  if ((*(_WORD *)(v3 + 64) & 0x200) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0xDu);
  }
  return result;
}

  BOOL v14 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(void *)(result + 24) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_28:
    uint64_t v16 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(result + 100) = v3 | 0x800;
    *(_DWORD *)(result + 92) = v16;
    return result;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  id v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x1000) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 0x200) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xCu);
  if ((*(_WORD *)(v3 + 100) & 0x800) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0xDu);
  }
  return result;
}

  unsigned int v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 84) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  BOOL v14 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_28:
    uint64_t v16 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 68) = v3 | 4;
    *(_DWORD *)(result + 24) = v16;
    return result;
  }

  PB::TextFormatter::format(this, "positionZ", *(float *)(a1 + 60));
  id v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 36), 0xCu);
  if ((*(_WORD *)(v3 + 68) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 0xDu);
  }
  return result;
}

  double result = PB::Writer::write(this, *(float *)(v3 + 120), 4u);
  uint64_t v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_28:
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 6u);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  int v11 = *(void *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 96) = v11;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "isMotionOverrideSet", *(_BYTE *)(a1 + 113));
  id v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 9u);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      return result;
    }
LABEL_28:
    double result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 92) = v3 | 0x20;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    return result;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0) {
    goto LABEL_27;
  }
LABEL_13:
  if ((v5 & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "velocityY", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0xCu);
  if ((*(_WORD *)(v3 + 92) & 0x20) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 48), 0xDu);
  }
  return result;
}

  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "qStopZ", *(float *)(a1 + 60));
  id v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 0xAu);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 56) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "covariancePreMeasurement00", *(float *)(a1 + 32));
  id v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 40) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  id v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 72), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }

  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 64) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "horizontalAccelMagnitudeMeanSqrt", *(double *)(a1 + 48));
  id v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

LABEL_53:
    if (v18 == 2) {
      (*(void (**)(void, uint64_t))(**((void **)a1 + 23) + 40LL))(*((void *)a1 + 23), 2LL);
    }
    double v32 = v65;
    double v33 = *((double *)a1 + 13);
    sub_1002F0B04(&buf);
    CFStringRef v34 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsMinDurationBetweenTriggers", 0x8000100u, kCFAllocatorNull);
    int v35 = sub_1002A832C((uint64_t)buf, (uint64_t)v34, v64);
    CFRelease(v34);
    double v36 = v32 - v33;
    double v37 = *(double *)v64;
    __int128 v38 = *(std::__shared_weak_count **)v70;
    if (*(void *)v70)
    {
      std::string v39 = (unint64_t *)(*(void *)v70 + 8LL);
      do
        unint64_t v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }

    double v41 = 3.0;
    if (v35) {
      double v41 = v37;
    }
    if (v36 >= v41)
    {
      if (((*(uint64_t (**)(void))(**((void **)a1 + 23) + 88LL))(*((void *)a1 + 23)) & 1) != 0)
      {
        sub_10005871C((uint64_t)a1, a2, 1LL, &v65, (uint64_t)v15, v14 & a4);
        goto LABEL_28;
      }

      unint64_t v47 = *((void *)a1 + 10);
      if (v47 >= *((void *)a1 + 11))
      {
        uint64_t v48 = sub_10005B8D4((uint64_t *)a1 + 9);
      }

      else
      {
        sub_1000865CC(*((void *)a1 + 10));
        uint64_t v48 = v47 + 136;
        *((void *)a1 + 10) = v47 + 136;
      }

      *((void *)a1 + 10) = v48;
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      std::string v60 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        __int128 buf = (void *)68289026;
        *(_WORD *)std::string v70 = 2082;
        *(void *)&v70[2] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager: Wait For Display On}",  (uint8_t *)&buf,  0x12u);
      }

      unsigned int v20 = 2;
      goto LABEL_27;
    }

    uint64_t v42 = qword_1019348D0;
    if (v65 < *((double *)a1 + 13))
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      unint64_t v43 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = *((void *)a1 + 13);
        __int128 buf = (void *)68289538;
        *(_WORD *)std::string v70 = 2082;
        *(void *)&v70[2] = "";
        __int16 v71 = 2050;
        *(double *)std::string v72 = v65;
        *(_WORD *)&v72[8] = 2050;
        v73[0] = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:fLastTrigger is in the past, triggerTS:%{public}.3f, fLastTriggerTS:%{public}.3f}",  (uint8_t *)&buf,  0x26u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181A190);
        }
      }

      __int128 v45 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        uint64_t v46 = *((void *)a1 + 13);
        __int128 buf = (void *)68289538;
        *(_WORD *)std::string v70 = 2082;
        *(void *)&v70[2] = "";
        __int16 v71 = 2050;
        *(double *)std::string v72 = v65;
        *(_WORD *)&v72[8] = 2050;
        v73[0] = v46;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v45,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "fLastTrigger is in the past",  "{msg%{public}.0s:fLastTrigger is in the past, triggerTS:%{public}.3f, fLastTriggerTS:%{public}.3f}",  (uint8_t *)&buf,  0x26u);
        uint64_t v42 = qword_1019348D0;
      }

      else
      {
        uint64_t v42 = -1LL;
      }

      *((double *)a1 + 13) = v65;
    }

    if (v42 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    std::string v49 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v50 = *((void *)a1 + 13);
      __int128 buf = (void *)68289538;
      *(_WORD *)std::string v70 = 2082;
      *(void *)&v70[2] = "";
      __int16 v71 = 2050;
      *(double *)std::string v72 = v65;
      *(_WORD *)&v72[8] = 2050;
      v73[0] = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager: Reschedule trigger, triggerTS:%{public}.3f, fL astTriggerTS:%{public}.3f}",  (uint8_t *)&buf,  0x26u);
    }

    unint64_t v51 = *((void *)a1 + 10);
    if (v51 >= *((void *)a1 + 11))
    {
      uint64_t v52 = sub_10005B8D4((uint64_t *)a1 + 9);
    }

    else
    {
      sub_1000865CC(*((void *)a1 + 10));
      uint64_t v52 = v51 + 136;
      *((void *)a1 + 10) = v51 + 136;
    }

    *((void *)a1 + 10) = v52;
    unsigned int v66 = 3;
    sub_1002F0B04(&buf);
    CFStringRef v53 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsLocalizationRescheduleDelay",  0x8000100u,  kCFAllocatorNull);
    int v54 = sub_1002A832C((uint64_t)buf, (uint64_t)v53, v64);
    CFRelease(v53);
    double v55 = *(double *)v64;
    int v56 = *(std::__shared_weak_count **)v70;
    if (*(void *)v70)
    {
      uint64_t v57 = (unint64_t *)(*(void *)v70 + 8LL);
      do
        unint64_t v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }

    double v59 = 5.0;
    if (v54) {
      double v59 = v55;
    }
    (*(void (**)(void, uint64_t))(**((void **)a1 + 23) + 72LL))( *((void *)a1 + 23),  (uint64_t)((v59 - (v65 - *((double *)a1 + 13))) * 1000.0));
    a1[124] = 1;
    if (!a1[175]) {
      sub_10005A33C((uint64_t)a1, a2);
    }
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  *(_DWORD *)(v5 + 172),  a2,  a4);
  char v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x100000) == 0)
  {
LABEL_32:
    if ((v12 & 0x200000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString( 22LL,  *(void *)(v5 + 176),  a2);
  }

  char v25 = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 116) |= 0x400u;
  *(_BYTE *)(a1 + 68) = v25;
  id v5 = *(_DWORD *)(a2 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_43:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_55;
  }

  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

  if ((v5 & 0xFF00) == 0) {
    goto LABEL_103;
  }
  if ((v5 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x100u;
    std::string v22 = *(void **)(a1 + 72);
    if (!v22)
    {
      std::string v22 = operator new(0x30uLL);
      *std::string v22 = off_10181AF90;
      v22[1] = 0x10000000DLL;
      void v22[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      uint64_t v22[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      _DWORD v22[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v22[5] = 0LL;
      *(void *)(a1 + 72) = v22;
    }

    __int128 v23 = *(void *)(a2 + 72);
    if (!v23) {
      __int128 v23 = *(void *)(qword_1019A0978 + 72);
    }
    sub_100071FE0((uint64_t)v22, v23);
    id v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x200) == 0)
    {
LABEL_56:
      if ((v5 & 0x400) == 0) {
        goto LABEL_57;
      }
      goto LABEL_73;
    }
  }

  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_56;
  }

  *(_DWORD *)(a1 + 292) |= 0x200u;
  uint64_t v24 = *(void **)(a1 + 80);
  if (!v24)
  {
    uint64_t v24 = operator new(0x30uLL);
    v24[4] = 14LL;
    *uint64_t v24 = off_10181B170;
    v24[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v24[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v24[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v24 + 10) = 0;
    *(void *)(a1 + 80) = v24;
  }

  char v25 = *(void *)(a2 + 80);
  if (!v25) {
    char v25 = *(void *)(qword_1019A0978 + 80);
  }
  sub_100073D14((uint64_t)v24, v25);
  id v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x400) == 0)
  {
LABEL_57:
    if ((v5 & 0x800) == 0) {
      goto LABEL_58;
    }
    goto LABEL_78;
  }

    __int128 v23 = *((unsigned __int8 *)a1 + 17);
    uint64_t v24 = v42;
    if (*((_BYTE *)a1 + 17)) {
      uint64_t v24 = 0;
    }
    *((_BYTE *)a1 + 80) = v24;
    if ((v24 & 1) != 0)
    {
      char v25 = 1;
    }

    else
    {
      if (v23) {
        int v26 = 1;
      }
      else {
        int v26 = (*((_DWORD *)a1 + 22) - 1) >= 3;
      }
      char v25 = !v26;
    }

    *((_BYTE *)a1 + 82) = v25;
    char v27 = *((int *)a1 + 5);
    uint64_t v28 = *((_DWORD *)a1 + 18);
    if (v27 > 7)
    {
      __int128 v30 = dbl_1012E00F0[v28 == 0];
    }

    else
    {
      int v29 = (double *)&unk_1012E0100;
      if (!v28) {
        int v29 = (double *)&unk_1012E0140;
      }
      __int128 v30 = v29[v27];
    }

    *((double *)a1 + 12) = v30;
    if (v23) {
      int v31 = 1;
    }
    else {
      int v31 = v28 == 0;
    }
    double v32 = !v31;
    *((_BYTE *)a1 + 16) = v32;
    double v33 = (_OWORD *)a1[17];
    CFStringRef v34 = a1[18] - (void)v33;
    if (a4)
    {
      if ((int)(v34 >> 4) <= 1)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101826790);
        }
        int v35 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          double v36 = *a1;
          double v37 = (unint64_t)(a1[18] - a1[17]) >> 4;
          *(_DWORD *)__int128 buf = 134283777;
          *(void *)&uint8_t buf[4] = v36;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "CLMM,CLTSP,id,%{private}lld,has less than two coordinate,%{public}d",  buf,  0x12u);
        }

        double result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101826790);
          }
          __int128 v38 = *a1;
          std::string v39 = (unint64_t)(a1[18] - a1[17]) >> 4;
          uint64_t v44 = 134283777;
          __int128 v45 = v38;
          uint64_t v46 = 1026;
          unint64_t v47 = v39;
          unint64_t v40 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,CLTSP,id,%{private}lld,has less than two coordinate,%{public}d",  &v44,  18);
          int v11 = v41;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMapRoad::fillFromMapHelperNSDictionaryArray(CLDistanceCalc &, NSDictionary * _Nonnull, BOOL)",  "%s\n",  v40);
LABEL_86:
          if (v11 != buf) {
            free(v11);
          }
          return 0LL;
        }

        return result;
      }
    }

    else
    {
      double result = 1LL;
      if (!v33 || (v34 & 0xFFFFFFFF0LL) != 0x10) {
        return result;
      }
      *(_OWORD *)__int128 buf = *v33;
      sub_1001ABF24(a1, (double *)buf, 0);
    }

    return 1LL;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101826790);
  }
  uint64_t v6 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "CLMM,CLTSP,fillFromMapHelperNSDictionaryArray,array is null",  buf,  2u);
  }

  uint64_t v7 = sub_1002921D0(115, 0);
  double result = 0LL;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101826790);
    }
    LOWORD(v44) = 0;
    char v9 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,CLTSP,fillFromMapHelperNSDictionaryArray,array is null",  &v44,  2);
    int v11 = v10;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMapRoad::fillFromMapHelperNSDictionaryArray(CLDistanceCalc &, NSDictionary * _Nonnull, BOOL)",  "%s\n",  v9);
    goto LABEL_86;
  }

  return result;
}

  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 92) |= 0x100u;
      __int128 v23 = *(char **)(a1 + 72);
      if (!v23)
      {
        __int128 v23 = (char *)operator new(0x60uLL);
        *(void *)__int128 v23 = &off_101827868;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *((void *)v23 + 11) = 0LL;
        *(void *)(a1 + 72) = v23;
      }

      uint64_t v24 = *(void *)(a2 + 72);
      if (!v24) {
        uint64_t v24 = *(void *)(qword_1019A0AF0 + 72);
      }
      double result = sub_1001C8B88((uint64_t)v23, v24);
      uint64_t v6 = *(_DWORD *)(a2 + 92);
    }

    if ((v6 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 92) |= 0x200u;
      char v25 = *(char **)(a1 + 80);
      if (!v25)
      {
        char v25 = (char *)operator new(0x40uLL);
        *(void *)char v25 = &off_1018278E0;
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_OWORD *)(v25 + 40) = 0u;
        *((void *)v25 + 7) = 0LL;
        *(void *)(a1 + 80) = v25;
      }

      int v26 = *(void *)(a2 + 80);
      if (!v26) {
        int v26 = *(void *)(qword_1019A0AF0 + 80);
      }
      return sub_1001C8D94((uint64_t)v25, v26);
    }
  }

  return result;
}

  double v37 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 168) |= 0x1000u;
  *(_DWORD *)(a1 + 60) = v37;
  int v29 = *(_DWORD *)(a2 + 168);
  if ((v29 & 0x2000) == 0)
  {
LABEL_48:
    if ((v29 & 0x4000) == 0) {
      return;
    }
    goto LABEL_49;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 88),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32,  (int)a2,  *(double *)(v5 + 144),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  *(_DWORD *)(v5 + 120),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  *(void *)((char *)v33
  CFStringRef v34 = v27;
  std::streambuf::~streambuf(&v35);
  std::ios::~ios(&v36);
  return a1;
}

      gzclose(v7);
    }

    else
    {
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182E260);
      }
      int v26 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        char v27 = *__error();
        *(_DWORD *)__int128 buf = 136446466;
        std::string v62 = v50;
        int v63 = 1026;
        *(_DWORD *)std::string v64 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_10182E260);
        }
        uint64_t v44 = qword_101934A78;
        __int128 v45 = *__error();
        int v54 = 136446466;
        double v55 = v50;
        int v56 = 1026;
        *(_DWORD *)uint64_t v57 = v45;
        LODWORD(vsub_100019CEC(v39 + 48) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v44,  17LL,  "CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d",  &v54,  v48);
        unint64_t v47 = (uint8_t *)v46;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLCommonGzipDecompressFile(const char *, const char *)",  "%s\n",  v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      size_t v8 = 0;
      uint64_t v10 = 0;
      char v12 = 0LL;
    }

    fclose(v6);
    goto LABEL_55;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10182E260);
  }
  uint64_t v24 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    char v25 = *__error();
    *(_DWORD *)__int128 buf = 136446466;
    std::string v62 = (void *)a2;
    int v63 = 1026;
    *(_DWORD *)std::string v64 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182E260);
    }
    double v41 = qword_101934A78;
    uint64_t v42 = *__error();
    int v54 = 136446466;
    double v55 = (void *)a2;
    int v56 = 1026;
    *(_DWORD *)uint64_t v57 = v42;
    LODWORD(vsub_100019CEC(v39 + 48) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v41,  17LL,  "CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d",  &v54,  v48);
    __int128 v23 = (uint8_t *)v43;
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v43);
LABEL_79:
    if (v23 != buf) {
      free(v23);
    }
  }

  *(_OWORD *)(a1 + 8) = v53;
  unsigned int v20 = *(unsigned __int8 *)(a1 + 119);
  else {
    uint64_t v21 = *(unsigned __int8 *)(a1 + 119);
  }
  if (!v21)
  {
    std::string::operator=((std::string *)(a1 + 96), &__p);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
    int v26 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Returned database, path:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    goto LABEL_99;
  }

  if ((v20 & 0x80u) == 0LL) {
    std::string v22 = *(unsigned __int8 *)(a1 + 119);
  }
  else {
    std::string v22 = *(void *)(a1 + 104);
  }
  std::string::size_type size = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v22 != size) {
    goto LABEL_82;
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*v9, p_p, *(void *)(a1 + 104)))
    {
LABEL_82:
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_101835C50);
      }
      char v27 = (os_log_s *)off_101934A28;
      if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v28 = &__p;
        }
        else {
          uint64_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v29 = (void *)(a1 + 96);
        *(_DWORD *)__int128 buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2082;
        *(void *)&buf[20] = v28;
        uint64_t v57 = 2082;
        *(void *)unint64_t v58 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Requested filename, expected:%{public, location:escape_only}s, actual:%{publi c, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_101835C50);
        }
      }

      __int128 v30 = (os_log_s *)off_101934A28;
      if (os_signpost_enabled((os_log_t)off_101934A28))
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v31 = &__p;
        }
        else {
          int v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int128 buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&_BYTE buf[18] = 2082;
        *(void *)&buf[20] = v31;
        uint64_t v57 = 2082;
        *(void *)unint64_t v58 = v9;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Requested filename",  "{msg%{public}.0s:Requested filename, expected:%{public, location:escape_only}s, actual:%{publi c, location:escape_only}s}",  buf,  0x26u);
      }
    }
  }

  else if (*(_BYTE *)(a1 + 119))
  {
    char v25 = (unsigned __int8 *)(a1 + 96);
    while (*v25 == p_p->__r_.__value_.__s.__data_[0])
    {
      ++v25;
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v20) {
        goto LABEL_99;
      }
    }

    goto LABEL_82;
  }

      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101835F08);
      }
      unsigned int v20 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "system exiting sleep", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101835F08);
        }
        v32[0] = 0;
        LODWORD(v30) = 2;
        std::string v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "system exiting sleep",  v32,  v30);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)",  "%s\n",  v22);
      }

      *(_DWORD *)__int128 buf = 3;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144LL))(a1, buf, 0LL, 0xFFFFFFFFLL);
      *(_BYTE *)(a1 + 2sub_100019CEC(v39 + 48) = 0;
      if (a3 == -536870256)
      {
        if (!*(void *)(a1 + 256))
        {
          if (qword_101934A40 != -1) {
            dispatch_once(&qword_101934A40, &stru_101835F08);
          }
          uint64_t v21 = (os_log_s *)qword_101934A48;
          if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "#warning No sleep state tranaction on will not sleep",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A40 != -1) {
              dispatch_once(&qword_101934A40, &stru_101835F08);
            }
            v32[0] = 0;
            LODWORD(v30) = 2;
            int v29 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  0LL,  "#warning No sleep state tranaction on will not sleep",  v32,  v30);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)",  "%s\n",  v29);
          }
        }

        *(void *)(a1 + 256) = 0LL;
      }

      break;
    default:
      return;
  }

          unsigned int v13 = sub_10123A078(result);
          return sub_100452CC4(v13);
        }

        if (v12 != 6) {
          goto LABEL_42;
        }
        return 1LL;
      }
    }

    else if (v11 == v12 - 3 < 3)
    {
      goto LABEL_38;
    }

    double result = sub_101239F14();
    goto LABEL_51;
  }

  char v9 = v7 - 3 < 3;
  if (v7 - 3 < 3) {
    goto LABEL_30;
  }
  uint64_t v10 = *(_DWORD *)(a2 + 8);
  if (v10 >= 0xA)
  {
    if (v10 - 3 < 3) {
      return 1LL;
    }
    goto LABEL_30;
  }

  double result = 1LL;
  if (((0x287u >> v10) & 1) == 0 && v10 - 3 > 2)
  {
LABEL_30:
    if (v7 == 9) {
      char v9 = 1;
    }
    int v11 = v7 == 7 || v9;
    goto LABEL_35;
  }

  return result;
}

    [*(id *)(a1 + 136) setDictionary:v14 forKey:@"RemoteUsage" atKeyPath:v12];
LABEL_57:
    int v29 = 0LL;
    goto LABEL_116;
  }

  if (!a4)
  {
    if (v17) {
      int v35 = 1;
    }
    else {
      int v35 = a5;
    }
    if (v35 == 1) {
      goto LABEL_65;
    }
    goto LABEL_53;
  }

  if (v17) {
    int v31 = v19 == 0LL;
  }
  else {
    int v31 = 0;
  }
  unsigned int v20 = !v31;
  if (!v31 || ([v17 doubleValue], v32 > a7))
  {
    double v33 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a7);
    goto LABEL_56;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101840220);
  }
  double v36 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "#Warning, new start time for %@ is after it's stored time",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 == -1)
    {
LABEL_123:
      std::string v69 = 138412290;
      std::string v70 = v12;
      uint64_t v57 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "#Warning, new start time for %@ is after it's stored time",  &v69,  12);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLClientManager::setClientServiceActiveAtTime(CLClientKeyPath *, CLClientServiceType, BOOL, BOOL, double, Device)",  "%s\n",  v57);
      if (v57 != buf) {
        free(v57);
      }
      return 0LL;
    }

  id v5 = v4 + 2;
  if ((v3 & 0x40) == 0) {
    id v5 = v4;
  }
  if ((v3 & 0x80) != 0) {
    v5 += 2;
  }
LABEL_57:
  if ((v3 & 0x100) != 0) {
    double result = v5 + 2;
  }
  else {
    double result = v5;
  }
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = result;
  return result;
}

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v5[18],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }

  std::string::size_type v273 = sub_1008529B8((double *)v5);
  v274 = v41;
  __int128 v275 = v42;
  __int128 v270 = sub_1008529B8((double *)v4);
  int v271 = v43;
  v272 = v44;
  v267 = sub_1008529B8((double *)v7);
  int v268 = v45;
  int v269 = v46;
  unint64_t v47 = sub_1008529B8((double *)v6);
  v264 = v47;
  v265 = v48;
  int v266 = v49;
  uint64_t v262 = 0LL;
  v263 = 0LL;
  uint64_t v50 = v268;
  unint64_t v51 = v269;
  uint64_t v52 = v268 * v49 - v269 * v48;
  CFStringRef v53 = v267;
  int v54 = v269 * v47 - v267 * v49;
  double v55 = v267 * v48 - v268 * v47;
  __int128 v259 = v52;
  v260 = v54;
  __int128 v261 = v55;
  v258 = 0.0;
  if (v39)
  {
    int v56 = 0;
    uint64_t v57 = 0;
    unint64_t v58 = 0;
LABEL_57:
    std::string v60 = 1;
    goto LABEL_58;
  }

  double v59 = 1.0 - (v49 * v269 + v268 * v48 + v267 * v47);
  v258 = v59;
  if (v59 == 0.0) {
    goto LABEL_56;
  }
  uint64_t v85 = COERCE__INT64(fabs(1.0 - (v49 * v269 + v268 * v48 + v267 * v47))) - 1;
  uint64_t v86 = (unint64_t)(COERCE__INT64(fabs(1.0 - (v49 * v269 + v268 * v48 + v267 * v47))) - 0x10000000000000LL) >> 53 > 0x3FE
     && v85 > 0xFFFFFFFFFFFFELL;
  if (!v86 || *(void *)&v59 == 0LL)
  {
    v88 = fabs(v59);
    uint64_t v89 = 2.22044605e-16;
    if (v88 >= 1.0) {
      uint64_t v89 = v88 * 2.22044605e-16;
    }
    if (v88 <= v89)
    {
LABEL_56:
      int v56 = 0;
      uint64_t v57 = 0;
      v258 = 0.0;
      unint64_t v58 = 1;
      goto LABEL_57;
    }
  }

  v90 = v55 * v275 + v54 * v274 + v52 * v273;
  if (v90 == 0.0) {
    goto LABEL_86;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v55 * v275 + v54 * v274 + v52 * v273)) >= 0x7FF0000000000000LL)
  {
    if (v90 > 0.0) {
      uint64_t v57 = 1;
    }
    else {
      uint64_t v57 = -1;
    }
  }

  else
  {
    uint64_t v163 = fabs(v90);
    __int128 v164 = 2.22044605e-16;
    if (v163 >= 1.0) {
      __int128 v164 = v163 * 2.22044605e-16;
    }
    if (v90 > 0.0) {
      uint64_t v57 = 1;
    }
    else {
      uint64_t v57 = -1;
    }
    if (v163 <= v164) {
LABEL_86:
    }
      uint64_t v57 = 0;
  }

  v185 = v55 * v272 + v54 * v271 + v52 * v270;
  if (v185 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(v55 * v272 + v54 * v271 + v52 * v270)) >= 0x7FF0000000000000LL)
    {
      if (v185 > 0.0) {
        int v56 = 1;
      }
      else {
        int v56 = -1;
      }
      goto LABEL_313;
    }

    __int128 v186 = fabs(v185);
    v187 = 2.22044605e-16;
    if (v186 >= 1.0) {
      v187 = v186 * 2.22044605e-16;
    }
    if (v185 > 0.0) {
      int v56 = 1;
    }
    else {
      int v56 = -1;
    }
    if (v186 > v187) {
      goto LABEL_313;
    }
  }

  int v56 = 0;
LABEL_313:
  uint64_t v262 = __PAIR64__(v56, v57);
  if (v56 * v57 == 1)
  {
    *(void *)&v282 = 0LL;
    __int128 v188 = 40LL;
    do
    {
      v189 = (char *)&v282 + v188;
      *(_OWORD *)v189 = xmmword_1013394A0;
      *((void *)v189 + 2) = 0LL;
      *((void *)v189 + 3) = 0LL;
      *((_OWORD *)v189 + 2) = xmmword_1012E0180;
      v189[48] = 0;
      v188 += 56LL;
    }

    while (v189 + 56 != (char *)v291);
    goto LABEL_458;
  }

  unint64_t v58 = 0;
  std::string v60 = 0;
LABEL_58:
  std::string v62 = v274;
  std::string v61 = v275;
  int v63 = v273;
  std::string v64 = v274 * v272 - v275 * v271;
  double v65 = v275 * v270 - v273 * v272;
  unsigned int v66 = v273 * v271 - v274 * v270;
  int v255 = v64;
  v256 = v65;
  std::string::size_type v257 = v66;
  *((void *)&v254 + 1) = 0LL;
  if ((v12 & 1) != 0)
  {
    std::string v67 = 0;
    char v68 = 0;
    goto LABEL_62;
  }

  std::string v69 = 1.0 - (v272 * v275 + v274 * v271 + v273 * v270);
  *((double *)&v254 + 1) = v69;
  if (v69 == 0.0) {
    goto LABEL_61;
  }
  char v91 = COERCE__INT64(fabs(1.0 - (v272 * v275 + v274 * v271 + v273 * v270))) - 1;
  char v92 = (unint64_t)(COERCE__INT64(fabs(1.0 - (v272 * v275 + v274 * v271 + v273 * v270))) - 0x10000000000000LL) >> 53 > 0x3FE
     && v91 > 0xFFFFFFFFFFFFELL;
  if (!v92 || *(void *)&v69 == 0LL)
  {
    uint64_t v94 = fabs(v69);
    __int128 v95 = 2.22044605e-16;
    if (v94 >= 1.0) {
      __int128 v95 = v94 * 2.22044605e-16;
    }
    if (v94 <= v95)
    {
LABEL_61:
      std::string v67 = 0;
      char v68 = 0;
      *((void *)&v254 + 1) = 0LL;
      unint64_t v58 = 1;
      goto LABEL_62;
    }
  }

  v96 = v269 * v66 + v65 * v268 + v64 * v267;
  if (v96 == 0.0) {
    goto LABEL_99;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v269 * v66 + v65 * v268 + v64 * v267)) >= 0x7FF0000000000000LL)
  {
    if (v96 > 0.0) {
      char v68 = 1;
    }
    else {
      char v68 = -1;
    }
  }

  else
  {
    v165 = fabs(v96);
    __int128 v166 = 2.22044605e-16;
    if (v165 >= 1.0) {
      __int128 v166 = v165 * 2.22044605e-16;
    }
    if (v96 > 0.0) {
      char v68 = 1;
    }
    else {
      char v68 = -1;
    }
    if (v165 <= v166) {
LABEL_99:
    }
      char v68 = 0;
  }

  __int128 v190 = v49 * v66 + v65 * v48 + v64 * v47;
  if (v190 != 0.0)
  {
    if ((*(void *)&v190 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      if (v190 > 0.0) {
        std::string v67 = 1;
      }
      else {
        std::string v67 = -1;
      }
      goto LABEL_334;
    }

    CFStringRef v191 = fabs(v190);
    __int128 v192 = 2.22044605e-16;
    if (v191 >= 1.0) {
      __int128 v192 = v191 * 2.22044605e-16;
    }
    if (v190 > 0.0) {
      std::string v67 = 1;
    }
    else {
      std::string v67 = -1;
    }
    if (v191 > v192) {
      goto LABEL_334;
    }
  }

  std::string v67 = 0;
LABEL_334:
  v263 = __PAIR64__(v67, v68);
  if (v67 * v68 == 1)
  {
    *(void *)&v282 = 0LL;
    uint64_t v193 = 40LL;
    do
    {
      std::string::size_type v194 = (char *)&v282 + v193;
      *(_OWORD *)std::string::size_type v194 = xmmword_1013394A0;
      *((void *)v194 + 2) = 0LL;
      *((void *)v194 + 3) = 0LL;
      *((_OWORD *)v194 + 2) = xmmword_1012E0180;
      v194[48] = 0;
      v193 += 56LL;
    }

    while (v194 + 56 != (char *)v291);
    goto LABEL_458;
  }

  v195 = sqrt(v66 * v66 + v65 * v65 + v64 * v64);
  if (v195 != 0.0)
  {
    if (*(void *)&v195 >> 52 > 0x7FEuLL) {
      goto LABEL_346;
    }
    __int128 v196 = fabs(v195);
    uint64_t v197 = 2.22044605e-16;
    if (v196 >= 1.0) {
      uint64_t v197 = v196 * 2.22044605e-16;
    }
    if (v196 > v197)
    {
LABEL_346:
      std::string v70 = 0;
      std::string v64 = v64 / v195;
      double v65 = v65 / v195;
      int v255 = v64;
      v256 = v65;
      unsigned int v66 = v66 / v195;
      std::string::size_type v257 = v66;
      if ((v60 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_67:
      if (!v70)
      {
        std::string v84 = 1;
        goto LABEL_105;
      }

      std::string v72 = *(void *)(v5 + 8);
      *(void *)&v282 = *(void *)v5;
      *(void *)&v291[0] = v72;
      sub_100843CD4((double *)&v282, (double *)v291, 1);
      std::string v73 = *(double *)&v282;
      std::string v74 = *(double *)v291;
      std::string v75 = v6[1];
      *(void *)&v282 = *v6;
      *(void *)&v291[0] = v75;
      sub_100843CD4((double *)&v282, (double *)v291, 1);
      if (v73 != *(double *)&v282)
      {
        if ((*(void *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_170;
        }

        char v106 = vabdd_f64(v73, *(double *)&v282);
        __int128 v107 = fabs(v73);
        __int128 v108 = fabs(*(double *)&v282);
        if (v107 >= v108) {
          __int128 v108 = v107;
        }
        std::string v109 = v108 >= 1.0 ? v108 * 2.22044605e-16 : 2.22044605e-16;
        if (v106 > v109) {
          goto LABEL_170;
        }
      }

      if (v74 != *(double *)v291)
      {
        if ((*(void *)&v74 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_170;
        }

        __int128 v127 = vabdd_f64(v74, *(double *)v291);
        CFStringRef v128 = fabs(v74);
        __int128 v129 = fabs(*(double *)v291);
        if (v128 >= v129) {
          __int128 v129 = v128;
        }
        uint64_t v130 = v129 >= 1.0 ? v129 * 2.22044605e-16 : 2.22044605e-16;
        if (v127 > v130)
        {
LABEL_170:
          *(void *)&v282 = 0LL;
          __int128 v131 = 40LL;
          do
          {
            v132 = (char *)&v282 + v131;
            *(_OWORD *)v132 = xmmword_1013394A0;
            *((void *)v132 + 2) = 0LL;
            *((void *)v132 + 3) = 0LL;
            *((_OWORD *)v132 + 2) = xmmword_1012E0180;
            v132[48] = 0;
            v131 += 56LL;
          }

          while (v132 + 56 != (char *)v291);
          goto LABEL_458;
        }
      }

      std::string v76 = 40LL;
      do
      {
        std::string v77 = (char *)&v282 + v76;
        *(_OWORD *)std::string v77 = xmmword_1013394A0;
        *((void *)v77 + 2) = 0LL;
        *((void *)v77 + 3) = 0LL;
        *((_OWORD *)v77 + 2) = xmmword_1012E0180;
        v77[48] = 0;
        v76 += 56LL;
      }

      while (v77 + 56 != (char *)v291);
LABEL_72:
      *(void *)&v282 = 1LL;
      *((void *)&v282 + 1) = *(void *)v277[0];
      *(void *)&v283 = *(void *)(v277[0] + 8);
      memset((char *)v291 + 2, 0, 40);
      std::string v78 = v288;
      *(_OWORD *)(a3 + 96) = v287;
      *(_OWORD *)(a3 + 112) = v78;
      *(_OWORD *)(a3 + 128) = v289;
      std::string v79 = *(_OWORD *)&v284[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v284;
      *(_OWORD *)(a3 + sub_100019CEC(v39 + 48) = v79;
      std::string v80 = v286;
      *(_OWORD *)(a3 + 64) = v285;
      *(_OWORD *)(a3 + 80) = v80;
      std::string v81 = v283;
      *(_OWORD *)a3 = v282;
      *(_OWORD *)(a3 + 16) = v81;
      std::string v82 = v291[1];
      *(_OWORD *)(a3 + 154) = v291[0];
      *(void *)(a3 + 144) = v290;
      std::string v83 = 48;
LABEL_459:
      *(_WORD *)(a3 + 152) = v83;
LABEL_460:
      *(_OWORD *)(a3 + 170) = v82;
      *(_OWORD *)(a3 + 180) = *(_OWORD *)((char *)&v291[1] + 10);
      return;
    }
  }

  if (!v57 || !v56)
  {
    int v56 = 0;
    uint64_t v57 = 0;
    uint64_t v262 = 0LL;
  }

    uint64_t v57 = *(void *)(v12 + 48);
    if (v57 == (void)v82) {
      break;
    }
LABEL_67:
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v12;
    std::string v62 = *(_OWORD *)(v12 + 16);
    int v63 = *(_OWORD *)(v12 + 32);
    std::string v64 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v46 + sub_100019CEC(v39 + 48) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v46 + 64) = v64;
    *(_OWORD *)(v46 + 16) = v62;
    *(_OWORD *)(v46 + 32) = v63;
    double v65 = *(_OWORD *)(v12 + 80);
    unsigned int v66 = *(_OWORD *)(v12 + 96);
    std::string v67 = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v46 + 112) = *(_OWORD *)(v12 + 112);
    *(_OWORD *)(v46 + 128) = v67;
    *(_OWORD *)(v46 + 80) = v65;
    *(_OWORD *)(v46 + 96) = v66;
    char v68 = *(_OWORD *)(v12 + 144);
    std::string v69 = *(_OWORD *)(v12 + 160);
    std::string v70 = *(_OWORD *)(v12 + 176);
    *(void *)(v46 + 192) = *(void *)(v12 + 192);
    *(_OWORD *)(v46 + 160) = v69;
    *(_OWORD *)(v46 + 176) = v70;
    *(_OWORD *)(v46 + 144) = v68;
    if (v9 < v11) {
      goto LABEL_70;
    }
  }

  unint64_t v58 = *(void *)(v12 + 56);
  double v59 = v58 < *((void *)&v82 + 1);
  if (v58 == *((void *)&v82 + 1))
  {
    std::string v60 = *(void *)(v12 + 64);
    double v59 = v60 < (uint64_t)v83;
    if (v60 == (void)v83) {
      double v59 = *(_OWORD *)(v12 + 72) < (__int128)__PAIR128__(v84, *((unint64_t *)&v83 + 1));
    }
  }

  if (!v59)
  {
    if (*(_OWORD *)(v12 + 64) != v83) {
      goto LABEL_67;
    }
    std::string v61 = v58 == *((void *)&v82 + 1) && *(void *)(v12 + 80) == (void)v84;
  }

    uint64_t v57 = *(void *)(v12 + 128);
    if (v57 == (void)v87) {
      break;
    }
LABEL_67:
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v12;
    std::string v62 = *(_OWORD *)(v12 + 16);
    int v63 = *(_OWORD *)(v12 + 32);
    std::string v64 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v46 + sub_100019CEC(v39 + 48) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v46 + 64) = v64;
    *(_OWORD *)(v46 + 16) = v62;
    *(_OWORD *)(v46 + 32) = v63;
    double v65 = *(_OWORD *)(v12 + 80);
    unsigned int v66 = *(_OWORD *)(v12 + 96);
    std::string v67 = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v46 + 112) = *(_OWORD *)(v12 + 112);
    *(_OWORD *)(v46 + 128) = v67;
    *(_OWORD *)(v46 + 80) = v65;
    *(_OWORD *)(v46 + 96) = v66;
    char v68 = *(_OWORD *)(v12 + 144);
    std::string v69 = *(_OWORD *)(v12 + 160);
    std::string v70 = *(_OWORD *)(v12 + 176);
    *(void *)(v46 + 192) = *(void *)(v12 + 192);
    *(_OWORD *)(v46 + 160) = v69;
    *(_OWORD *)(v46 + 176) = v70;
    *(_OWORD *)(v46 + 144) = v68;
    if (v9 < v11) {
      goto LABEL_70;
    }
  }

  unint64_t v58 = *(void *)(v12 + 136);
  double v59 = v58 < *((void *)&v87 + 1);
  if (v58 == *((void *)&v87 + 1))
  {
    std::string v60 = *(void *)(v12 + 144);
    double v59 = v60 < (int64_t)v88.n128_u64[0];
    if (v60 == v88.n128_u64[0]) {
      double v59 = *(_OWORD *)(v12 + 152) < (__int128)__PAIR128__(v89, v88.n128_u64[1]);
    }
  }

  if (!v59)
  {
    if (*(_OWORD *)(v12 + 144) != *(_OWORD *)&v88) {
      goto LABEL_67;
    }
    std::string v61 = v58 == *((void *)&v87 + 1) && *(void *)(v12 + 160) == (void)v89;
  }

    if (memcmp(a1, v3, v4)) {
      goto LABEL_54;
    }
    return 1LL;
  }

  switch(v2)
  {
    case 0x1Fu:
      if (*a1 == 0x656E6E6F434C436BLL
        && a1[1] == 0x73654D6E6F697463LL
        && a1[2] == 0x6967655265676173LL
        && *(void *)((char *)a1 + 23) == 0x65746174536E6F69LL)
      {
        return 1LL;
      }

      break;
    case 0x24u:
      if (memcmp(a1, "kCLConnectionMessageRegionMonitoring", 0x24uLL)) {
        break;
      }
      return 1LL;
    case 0x27u:
      uint64_t v3 = "kCLConnectionMessageAuthorizationStatus";
      uint64_t v4 = 39LL;
      goto LABEL_53;
  }

  *(void *)((char *)v37
  __int128 v38 = v30;
  std::streambuf::~streambuf(&v39);
  std::ios::~ios(&v40);
  return a1;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(_DWORD *)(v5 + 160),  (int)a2,  a4);
  uint64_t v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x200000) == 0)
  {
LABEL_29:
    if ((v10 & 0x400000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  *(_DWORD *)(v5 + 164),  (int)a2,  a4);
  }

  *(void *)((char *)v33
  CFStringRef v34 = v27;
  std::streambuf::~streambuf(&v35);
  std::ios::~ios(&v36);
  return a1;
}

      uint64_t v44 = 1.0;
LABEL_54:
      __int128 v45 = v30[6] + v30[5] - 1;
      if (*(_BYTE *)(*(void *)(v30[2] + 8 * (v45 / 0x17)) + 176 * (v45 % 0x17) + 156))
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v46 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 134349056;
          *(void *)&uint8_t buf[4] = 0x4008000000000000LL;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "#selection Inflating gate for associated AP to %{public}.1f",  buf,  0xCu);
        }

        uint64_t v44 = 3.0;
        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          uint64_t v89 = 134349056;
          *(void *)v90 = 0x4008000000000000LL;
          LODWORD(v79) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection Inflating gate for associated AP to %{public}.1f",  &v89,  v79);
          std::string v67 = (char *)v66;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)",  "%s\n",  v66);
          int v26 = v81;
          if (v67 != buf) {
            free(v67);
          }
        }
      }

      if (v43 <= v44)
      {
        if (*((_DWORD *)v30 + 167) == 4) {
          *((_DWORD *)v30 + 167) = 1;
        }
        std::string v49 = v30[6] + v30[5] - 1;
        if (sub_100E8C200(*(void *)(v30[2] + 8 * (v49 / 0x17)) + 176 * (v49 % 0x17), v80) <= 30.0)
        {
          int v54 = v30[6] + v30[5] - 1;
          *(_OWORD *)(*(void *)(v30[2] + 8 * (v54 / 0x17)) + 176 * (v54 % 0x17)) = *(_OWORD *)(a2 + 8);
        }

        else
        {
          *((_DWORD *)v30 + 167) = 0;
        }
      }

      else
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        unint64_t v47 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v48 = *((_DWORD *)v30 + 165);
          *(_DWORD *)__int128 buf = 67110912;
          *(_DWORD *)&uint8_t buf[4] = v48;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(double *)&buf[10] = v43;
          char v106 = 2050;
          __int128 v107 = v44;
          __int128 v108 = 2050;
          std::string v109 = v39;
          uint64_t v110 = 2050;
          __int128 v111 = v40;
          __int16 v112 = 2050;
          __int128 v113 = v41;
          int v114 = 2050;
          __int16 v115 = v42;
          int v116 = 2050;
          __int16 v117 = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "#selection,Rejecting inconsistence hypothesis,hID,%d,ndis,%{public}.3f,gating,%{public}.1f,dt,%{public}.3f,d tNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,in terHypoEuclideanDistance_m,%{public}.3f",  buf,  0x4Eu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          char v68 = *((_DWORD *)v30 + 165);
          uint64_t v89 = 67110912;
          *(_DWORD *)v90 = v68;
          *(_WORD *)&v90[4] = 2050;
          *(double *)&v90[6] = v43;
          char v91 = 2050;
          char v92 = v44;
          __int128 v93 = 2050;
          uint64_t v94 = v39;
          __int128 v95 = 2050;
          v96 = v40;
          uint64_t v97 = 2050;
          int v98 = v41;
          char v99 = 2050;
          char v100 = v42;
          __int128 v101 = 2050;
          int v102 = v37;
          LODWORD(v79) = 78;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Rejecting inconsistence hypothesis,hID,%d,ndis,%{public}.3f,gating,%{public}.1f,dt,%{public}.3f,d tNonStatic,%{public}.3f,worstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,in terHypoEuclideanDistance_m,%{public}.3f",  &v89,  v79);
          std::string v70 = (char *)v69;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)",  "%s\n",  v69);
          int v26 = v81;
          if (v70 != buf) {
            free(v70);
          }
        }

        *((_DWORD *)v30 + 167) = 4;
      }

      goto LABEL_84;
    }

    sub_100AB7520(*(void *)(a1 + 1696), (uint64_t)&v86);
    if (v86 >= 0.0 && (v36 >= v86 ? (double v55 = v36 - v86 <= 6.0) : (double v55 = 1), v55)
      || (*(void *)__int128 buf = 0xBFF0000000000000LL, (sub_10044B44C((void *)(a1 + 1840), (double *)buf) & 1) != 0))
    {
      int v56 = v87;
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      double v41 = fmax(v56 * 3.0, 25.0);
      uint64_t v42 = fmax(v82 + v41, 1.0);
      unint64_t v43 = v37 / v42;
      uint64_t v57 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v58 = *((_DWORD *)v30 + 165);
        *(_DWORD *)__int128 buf = 67111168;
        *(_DWORD *)&uint8_t buf[4] = v58;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(double *)&buf[10] = v37 / v42;
        char v106 = 2050;
        __int128 v107 = v39;
        __int128 v108 = 2050;
        std::string v109 = v40;
        uint64_t v110 = 2050;
        __int128 v111 = v41;
        __int16 v112 = 2050;
        __int128 v113 = v42;
        int v114 = 2050;
        __int16 v115 = v37;
        int v116 = 2050;
        __int16 v117 = v87;
        __int128 v118 = 2050;
        char v119 = v88;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "#selection,IO-based distance moved xCheck,hID,%d,ndis,%{public}.3f,dt,%{public}.3f,dtNonStatic,%{public}.3f,wo rstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,% {public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f",  buf,  0x58u);
      }

      int v26 = v81;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        double v59 = *((_DWORD *)v30 + 165);
        uint64_t v89 = 67111168;
        *(_DWORD *)v90 = v59;
        *(_WORD *)&v90[4] = 2050;
        *(double *)&v90[6] = v37 / v42;
        char v91 = 2050;
        char v92 = v39;
        __int128 v93 = 2050;
        uint64_t v94 = v40;
        __int128 v95 = 2050;
        v96 = v41;
        uint64_t v97 = 2050;
        int v98 = v42;
        char v99 = 2050;
        char v100 = v37;
        __int128 v101 = 2050;
        int v102 = v87;
        __int128 v103 = 2050;
        uint64_t v104 = v88;
        LODWORD(v79) = 88;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,IO-based distance moved xCheck,hID,%d,ndis,%{public}.3f,dt,%{public}.3f,dtNonStatic,%{public}.3f,wo rstCaseDistanceTravelled_m,%{public}.3f,upperBoundHypoHunc1Sigma_m,%{public}.3f,interHypoEuclideanDistance_m,% {public}.3f,IO_DistanceMoved_m,%{public}.1f,DistanceMovedInterval_s,%{public}.2f",  &v89,  v79);
        std::string v61 = (char *)v60;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)",  "%s\n",  v60);
LABEL_112:
        if (v61 != buf) {
          free(v61);
        }
LABEL_51:
        int v26 = v81;
      }
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v26 = v81;
      std::string v62 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        int v63 = *((_DWORD *)v30 + 165);
        *(_DWORD *)__int128 buf = 67241216;
        *(_DWORD *)&uint8_t buf[4] = v63;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(double *)&buf[10] = v36;
        char v106 = 2050;
        __int128 v107 = v86;
        __int128 v108 = 2050;
        std::string v109 = v87;
        uint64_t v110 = 2050;
        __int128 v111 = v88;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "#selection,IO data usage timed out,hID,%{public}d,hypo_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m ,%{public}.1f,DistanceMovedInterval_s,%{public}.2f",  buf,  0x30u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        std::string v64 = *((_DWORD *)v30 + 165);
        uint64_t v89 = 67241216;
        *(_DWORD *)v90 = v64;
        *(_WORD *)&v90[4] = 2050;
        *(double *)&v90[6] = v36;
        char v91 = 2050;
        char v92 = v86;
        __int128 v93 = 2050;
        uint64_t v94 = v87;
        __int128 v95 = 2050;
        v96 = v88;
        LODWORD(v79) = 48;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,IO data usage timed out,hID,%{public}d,hypo_mct,%{public}.3f,IO_mct,%{public}.3f,IO_DistanceMoved_m ,%{public}.1f,DistanceMovedInterval_s,%{public}.2f",  &v89,  v79);
        std::string v61 = (char *)v65;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)",  "%s\n",  v65);
        goto LABEL_112;
      }
    }

    if (*(_BYTE *)(a1 + 2096)) {
      goto LABEL_53;
    }
    goto LABEL_78;
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  __int16 v71 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    std::string v72 = *(_DWORD *)(a1 + 900);
    *(_DWORD *)__int128 buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v72;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(double *)&buf[10] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "#selection,Rejecting last yielded/selected hypothesis,hID,%{public}d,in favor of new location/hypothesis,ratio,%{public}.1f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    std::string v76 = *(_DWORD *)(a1 + 900);
    uint64_t v89 = 67240448;
    *(_DWORD *)v90 = v76;
    *(_WORD *)&v90[4] = 2050;
    *(double *)&v90[6] = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Rejecting last yielded/selected hypothesis,hID,%{public}d,in favor of new location/hypothesis,ratio,%{public}.1f",  &v89,  18);
    std::string v78 = (char *)v77;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::detectOutlierHypotheses(const LCFusionProviderLocation &)",  "%s\n",  v77);
    if (v78 != buf) {
      free(v78);
    }
  }

  std::string v73 = *(uint64_t **)(a1 + 240);
  if (v73)
  {
    std::string v74 = *(_DWORD *)(a1 + 900);
    do
    {
      if (*((_DWORD *)v73 + 165) == v74) {
        *((_DWORD *)v73 + 167) = 4;
      }
      std::string v73 = (uint64_t *)*v73;
    }

    while (v73);
  }

  bzero(buf, 0x2D0uLL);
  sub_1005F658C((uint64_t)buf);
  sub_100AA2550(a1 + 248, (uint64_t)buf);
  sub_10000AE14((uint64_t)&v120);
  sub_1005F67A0(buf);
  return 1LL;
}

  unsigned int v13 = *(void *)(v5 + 72);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A1D48 + 72);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v13,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_59;
  }

  if (v134 == -1.0)
  {
    double v33 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoGnssAvailability,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoGnssAvailability,currentTime,%f",  COERCE_DOUBLE(v149));
      uint64_t v46 = (uint8_t *)v45;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v45);
      if (v46 != buf) {
        free(v46);
      }
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }
  }

  else
  {
    sub_100EA81A8(a1 + 3520, (uint64_t)v135, a3);
  }

  if (v140 == -1.0)
  {
    CFStringRef v34 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_OutdoorNoMapMatchingRouteHint,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_OutdoorNoMapMatchingRouteHint,currentTime,%f",  COERCE_DOUBLE(v149));
      uint64_t v48 = (uint8_t *)v47;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v47);
      if (v48 != buf) {
        free(v48);
      }
      p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
      if (v25) {
        goto LABEL_68;
      }
LABEL_101:
      std::string v49 = (os_log_s *)qword_101934948;
      if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(double *)&uint8_t buf[4] = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoCMGpsModelOutput,currentTime,%f",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        *(_DWORD *)v149 = 134217984;
        *(double *)&v149[4] = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoCMGpsModelOutput,currentTime,%f",  COERCE_DOUBLE(v149));
        std::string v84 = (uint8_t *)v83;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v83);
        if (v84 != buf) {
          free(v84);
        }
      }

      goto LABEL_106;
    }
  }

  else
  {
    sub_100EA7B34(a1 + 3520, &v141, a3);
  }

  if (!v25) {
    goto LABEL_101;
  }
LABEL_68:
  *(_OWORD *)&uint8_t buf[8] = v91;
  *(void *)__int128 buf = 0LL;
  *(void *)__int128 v158 = v92;
  sub_100EA8470(a1 + 3520, (__int128 *)buf, a3);
LABEL_106:
  if (v26)
  {
    *(void *)__int128 buf = 0LL;
    *(double *)&uint8_t buf[8] = v22;
    sub_100EA8730(a1 + 3520, (__int128 *)buf, a3);
  }

  else
  {
    uint64_t v50 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoCMWiFiModelOutput,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoCMWiFiModelOutput,currentTime,%f",  COERCE_DOUBLE(v149));
      uint64_t v86 = (uint8_t *)v85;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v85);
      if (v86 != buf) {
        free(v86);
      }
    }
  }

  if (HIDWORD(v90))
  {
    *(void *)__int128 buf = 0LL;
    *(double *)&uint8_t buf[8] = v21;
    sub_100EA89F0(a1 + 3520, (__int128 *)buf, a3);
  }

  else
  {
    unint64_t v51 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoCMALSModelOutput,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      *(_DWORD *)v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoCMALSModelOutput,currentTime,%f",  COERCE_DOUBLE(v149));
      v88 = (uint8_t *)v87;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v87);
      if (v88 != buf) {
        free(v88);
      }
    }
  }

  uint64_t v52 = sub_100D09174(a1 + 3136);
  CFStringRef v53 = *(float *)(a1 + 3144);
  int v54 = sub_100D0919C(a1 + 3136);
  sub_1004F2598();
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (sub_1001B9A1C())
  {
  }

  else if (v20 != 3)
  {
LABEL_138:
    if (qword_101934940 != -1) {
      dispatch_once(&qword_101934940, &stru_101879FF0);
    }
    std::string v62 = (os_log_s *)qword_101934948;
    if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134217984;
      *(double *)&uint8_t buf[4] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "CLOutdoorEstimator_NoAlsEvidence,currentTime,%f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934940 != -1) {
        dispatch_once(&qword_101934940, &stru_101879FF0);
      }
      *(_DWORD *)v149 = 134217984;
      *(double *)&v149[4] = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  2LL,  "CLOutdoorEstimator_NoAlsEvidence,currentTime,%f",  COERCE_DOUBLE(v149));
      std::string v82 = (uint8_t *)v81;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v81);
      if (v82 != buf) {
        free(v82);
      }
      p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
    }

    goto LABEL_143;
  }

  if (v53 <= 0.0 || !v52) {
    goto LABEL_138;
  }
  int v56 = 750.0;
  if (v54 <= 750.0) {
    goto LABEL_138;
  }
  *(_DWORD *)&uint8_t buf[8] = 0;
  uint64_t v57 = 15000.0;
  if (v54 <= 15000.0) {
    uint64_t v57 = v54;
  }
  if (v54 >= 750.0) {
    int v56 = v57;
  }
  unint64_t v58 = *(float *)(a1 + 3144);
  double v59 = 90.0;
  if (v58 < 90.0) {
    double v59 = *(float *)(a1 + 3144);
  }
  std::string v60 = v59;
  _NF = v58 < 0.0;
  std::string v61 = 0.0;
  if (!_NF) {
    std::string v61 = v60;
  }
  *(double *)&uint8_t buf[16] = v56;
  *(double *)__int128 v158 = v61;
  v158[8] = v52;
  *(void *)&v159[6] = v20;
  *(double *)__int128 buf = a3;
  sub_100EA8CB0(a1 + 3520, (uint64_t)buf, a3);
LABEL_143:
  *(double *)a2 = a3;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = v20;
  *(_BYTE *)(a2 + sub_100019CEC(v39 + 48) = sub_100D09174(a1 + 3136);
  *(_DWORD *)(a2 + 52) = v18;
  sub_100EA75D4(a1 + 3520, a2);
  int v63 = (os_log_s *)qword_101934948;
  if (os_log_type_enabled((os_log_t)qword_101934948, OS_LOG_TYPE_INFO))
  {
    std::string v64 = *(double *)a2;
    double v65 = *(void *)(a2 + 8);
    unsigned int v66 = *(void *)(a2 + 16);
    std::string v67 = *(void *)(a2 + 24);
    char v68 = *(unsigned __int8 *)(a2 + 48);
    std::string v69 = *(void *)(a2 + 32);
    std::string v70 = *(void *)(a2 + 40);
    *(_DWORD *)__int128 buf = 134219521;
    *(double *)&uint8_t buf[4] = v64;
    *(_WORD *)&buf[12] = 2049;
    *(void *)&buf[14] = v65;
    *(_WORD *)&buf[22] = 2049;
    *(void *)__int128 v158 = v66;
    *(_WORD *)&v158[8] = 2049;
    *(void *)v159 = v67;
    *(_WORD *)&v159[8] = 2049;
    *(void *)&v159[10] = v69;
    *(_WORD *)&v159[18] = 1025;
    *(_DWORD *)&v159[20] = v68;
    __int128 v160 = 2049;
    CFStringRef v161 = v70;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_INFO,  "CLOutdoorEstimator_HMM Estimate,startTime,%f,mctTimestampSec,%{private}f,type, %{private}ld,confidence,%{private}l d,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld",  buf,  0x44u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    std::string v72 = *(double *)a2;
    std::string v73 = *(void *)(a2 + 8);
    std::string v74 = *(void *)(a2 + 16);
    std::string v75 = *(void *)(a2 + 24);
    std::string v76 = *(unsigned __int8 *)(a2 + 48);
    std::string v77 = *(void *)(a2 + 32);
    std::string v78 = *(void *)(a2 + 40);
    *(_DWORD *)v149 = 134219521;
    *(double *)&v149[4] = v72;
    __int128 v150 = 2049;
    *(void *)unint64_t v151 = v73;
    *(_WORD *)&v151[8] = 2049;
    *(void *)uint64_t v152 = v74;
    *(_WORD *)&v152[8] = 2049;
    __int128 v153 = v75;
    LOWORD(v154) = 2049;
    *(void *)((char *)&v154 + 2) = v77;
    WORD5(v154) = 1025;
    HIDWORD(v154) = v76;
    __int128 v155 = 2049;
    __int128 v156 = v78;
    LODWORD(v90) = 68;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934948,  1LL,  "CLOutdoorEstimator_HMM Estimate,startTime,%f,mctTimestampSec,%{private}f,type, %{private}ld,confidence,%{private}l d,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld",  v149,  v90);
    std::string v80 = (uint8_t *)v79;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLOutdoor_Type::OutdoorUpdate CLOutdoorLabeler::update(CFAbsoluteTime)",  "%s\n",  v79);
    if (v80 != buf) {
      free(v80);
    }
  }

  __int16 v71 = *(int *)(a1 + 3788);
  if ((_DWORD)v71 != 3) {
    *(void *)(a2 + 16) = v71;
  }
  *(double *)(a1 + 3192) = a3;
  if (__p)
  {
    uint64_t v94 = __p;
    operator delete(__p);
  }

  if (v142)
  {
    __int128 v143 = v142;
    operator delete(v142);
  }

  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }

  *(void *)__int128 buf = v133;
  sub_100023498((void ***)buf);
  if (v146)
  {
    int v147 = v146;
    operator delete(v146);
  }

  a1[66] = v8;
  if ((v10 & 1) != 0)
  {
    uint64_t v28 = *((_DWORD *)a1 + 130);
    *((_DWORD *)a1 + 130) = v28 + 1;
    if (v28 < 1)
    {
      __int128 v30 = 1;
      int v31 = -INFINITY;
      double v32 = -INFINITY;
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101880CD0);
      }
      int v29 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "[RunningSpeedKF] feedStepCountEntry - no valid non-zero measurements for 2 epochs, resetting KF",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101880CD0);
        }
        LOWORD(v71) = 0;
        LODWORD(v61) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "[RunningSpeedKF] feedStepCountEntry - no valid non-zero measurements for 2 epochs, resetting KF",  &v71,  *(void *)&v61);
        double v55 = (uint8_t *)v54;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)",  "%s\n",  v54);
        if (v55 != buf) {
          free(v55);
        }
      }

      __int128 v30 = 0;
      *(_OWORD *)(a1 + 1) = 0u;
      *((int64x2_t *)a1 + 38) = vdupq_n_s64(0xFFF0000000000000LL);
      *(_OWORD *)(a1 + 71) = xmmword_10135CEA0;
      *(_OWORD *)(a1 + 73) = unk_10135CEB0;
      *((_OWORD *)a1 + 21) = 0u;
      *((_OWORD *)a1 + 24) = 0u;
      *((_OWORD *)a1 + 25) = 0u;
      *((_OWORD *)a1 + 26) = 0u;
      *((_OWORD *)a1 + 27) = 0u;
      *((_OWORD *)a1 + 28) = 0u;
      *((_OWORD *)a1 + 29) = 0u;
      *((_OWORD *)a1 + 30) = 0u;
      *((_OWORD *)a1 + 31) = 0u;
      *(_DWORD *)((char *)a1 + 695) = 0;
      *(_OWORD *)(a1 + 37) = 0u;
      *(_OWORD *)(a1 + 39) = 0u;
      *(_OWORD *)(a1 + 33) = 0u;
      *(_OWORD *)(a1 + 35) = 0u;
      *(_OWORD *)(a1 + 29) = 0u;
      *(_OWORD *)(a1 + 31) = 0u;
      *(_OWORD *)(a1 + 25) = 0u;
      *(_OWORD *)(a1 + 27) = 0u;
      *(_OWORD *)(a1 + 21) = 0u;
      *(_OWORD *)(a1 + 23) = 0u;
      *(_OWORD *)(a1 + 17) = 0u;
      *(_OWORD *)(a1 + 19) = 0u;
      *(_OWORD *)(a1 + 13) = 0u;
      *(_OWORD *)(a1 + 15) = 0u;
      *(_OWORD *)(a1 + 9) = 0u;
      *(_OWORD *)(a1 + 11) = 0u;
      *(_OWORD *)(a1 + 5) = 0u;
      *(_OWORD *)(a1 + 7) = 0u;
      *(_OWORD *)(a1 + 3) = 0u;
      *(_OWORD *)(a1 + 67) = 0u;
      a1[75] = -INFINITY;
      a1[78] = -INFINITY;
      *(_OWORD *)(a1 + 69) = xmmword_10135CE50;
      a1[41] = 0.0;
      *((_BYTE *)a1 + 352) = 0;
      *(_OWORD *)(a1 + 45) = 0u;
      *((_WORD *)a1 + 188) = 0;
      *((_DWORD *)a1 + 130) = 0;
      *(_OWORD *)(a1 + 85) = 0u;
      int v31 = -INFINITY;
      double v32 = -INFINITY;
      a1[66] = 0.0;
    }
  }

  else
  {
    double v33 = v7 * v17;
    if (v17 <= 0.0) {
      double v33 = v66;
    }
    int v31 = v33 / v65;
    if (v12)
    {
      CFStringRef v34 = v69;
      v19.f64[0] = v7;
      sub_100D429A0(a1, v4, v19, v69);
      double v32 = v34 / v70;
      sub_100D42A14((uint64_t)a1, v68, v32, v31);
    }

    else
    {
      sub_100D42B50((uint64_t)a1, v33 / v65);
      double v32 = -INFINITY;
    }

    __int128 v30 = 0;
    *((_DWORD *)a1 + 130) = 0;
  }

  sub_100D42BE0(a1, v4);
  Current = CFAbsoluteTimeGetCurrent();
  double v36 = *((void *)a1 + 68);
  __int128 v38 = sub_100D42F4C(v37, (uint64_t)(a1 + 67), v30);
  unint64_t v40 = v69;
  std::string v39 = v70;
  double v41 = *(_OWORD *)(a1 + 69);
  uint64_t v42 = *((void *)a1 + 77);
  unint64_t v43 = *((void *)a1 + 78);
  uint64_t v44 = *((void *)a1 + 71);
  __int128 v45 = *((_OWORD *)a1 + 37);
  uint64_t v46 = *((void *)a1 + 76);
  unint64_t v47 = v68;
  if (v64 >= 8.25)
  {
    uint64_t v48 = 0;
    std::string v49 = 0;
  }

  else
  {
    uint64_t v48 = *((_BYTE *)a1 + 696);
    std::string v49 = *((_BYTE *)a1 + 697);
  }

  uint64_t v50 = v67;
  a1[41] = v4;
  a1[42] = v63;
  *((void *)a1 + 43) = v36;
  *((_BYTE *)a1 + 352) = v38;
  a1[45] = v31;
  a1[46] = v32;
  *((_BYTE *)a1 + 376) = v12;
  *((_BYTE *)a1 + 377) = v10 ^ 1;
  a1[48] = v7;
  a1[49] = v66;
  a1[50] = v40;
  a1[51] = v65;
  a1[52] = v39;
  a1[53] = Current - v63;
  a1[54] = v17;
  *(_OWORD *)(a1 + 55) = v41;
  *((void *)a1 + 57) = v42;
  *((void *)a1 + 58) = v43;
  *((void *)a1 + 59) = v44;
  *((_OWORD *)a1 + 30) = v45;
  *((void *)a1 + 62) = v46;
  *((_DWORD *)a1 + 126) = v47;
  *((_BYTE *)a1 + 508) = v48;
  *((_BYTE *)a1 + 509) = v49;
  *((_BYTE *)a1 + 510) = v64 < 8.25;
  *((_BYTE *)a1 + 511) = v50;
  return memcpy(a1 + 1, (const void *)a2, 0x140uLL);
}

  if (v148 < 2) {
    goto LABEL_54;
  }
  unint64_t v40 = *(int **)(a1 + 984);
  std::string v39 = 1LL;
  if (v40 == v150) {
    goto LABEL_219;
  }
  __asm { FMOV            V0.2D, #-1.0 }

  int v147 = _Q0;
  while (2)
  {
    __int128 v160 = 0LL;
    __int128 v45 = *(void *)(a1 + 1136);
    *(void *)__int128 v171 = 0LL;
    *(void *)&v171[8] = v45;
    *(_OWORD *)&v171[16] = v147;
    *(_OWORD *)&v171[32] = 0uLL;
    *(void *)__int128 v172 = 0xBFF0000000000000LL;
    v174[15] = 0.0;
    LODWORD(v174[16]) = 0;
    memset(&v174[10], 0, 34);
    memset(&v174[17], 0, 75);
    memset(&v174[27], 0, 56);
    memset(v174, 0, 78);
    std::string::size_type v173 = 0u;
    memset(&v172[8], 0, 80);
    v174[34] = -1.0;
    v157 = (uint64_t)&v157;
    __int128 v158 = &v157;
    v159 = 0LL;
    uint64_t v46 = 1354LL;
    if (!*((_BYTE *)v40 + 48)) {
      uint64_t v46 = 1356LL;
    }
    if (((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *, void, uint64_t, void *, double, double))(*(void *)v161 + 80LL))( v161,  v171,  &v157,  0LL,  1LL,  (void *)v40 + 7,  *(double *)&v40[v46],  40.0) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        int v98 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEBUG,  "CLMM,roadsAtIntersection returned false, searching for connected candidates",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          LOWORD(v163) = 0;
          LODWORD(v144) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,roadsAtIntersection returned false, searching for connected candidates",  &v163,  v144);
          __int16 v115 = (uint8_t *)v114;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v114);
          if (v115 != buf) {
            free(v115);
          }
        }
      }

      ++*(_DWORD *)(a1 + 108);
LABEL_133:
      char v99 = 1;
      goto LABEL_161;
    }

    if (!v159) {
      goto LABEL_160;
    }
    unint64_t v47 = v40[18];
    if (v47 < 1)
    {
LABEL_134:
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        char v100 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEBUG,  "CLMM,unexpected incomingCount < 1",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          LOWORD(v163) = 0;
          LODWORD(v144) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,unexpected incomingCount < 1",  &v163,  v144);
          int v102 = (uint8_t *)v101;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v101);
          if (v102 != buf) {
            free(v102);
          }
        }
      }

      goto LABEL_160;
    }

    uint64_t v48 = 0LL;
    std::string v49 = 0;
    do
    {
      uint64_t v50 = *(double *)&v40[2 * v48 + 666];
      if (*((_BYTE *)v40 + 48))
      {
        if (v50 < v174[15]) {
          goto LABEL_70;
        }
      }

      else if (v50 < v174[15])
      {
        goto LABEL_70;
      }

      if (sub_100D2DBDC( (double *)(a1 + 608),  v174[0],  v174[1],  *(double *)&v40[2 * v48 + 282],  *(double *)&v40[2 * v48 + 474],  *(double *)(a1 + 1200)) <= 40.0) {
        ++v49;
      }
      unint64_t v47 = v40[18];
LABEL_70:
      ++v48;
    }

    while (v48 < v47);
    if (v49 < 1) {
      goto LABEL_134;
    }
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      unint64_t v51 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v52 = *(void *)(a1 + 1136);
        CFStringRef v53 = *((void *)v40 + 4);
        int v54 = v40[19];
        *(_DWORD *)__int128 buf = 134349569;
        __int128 v176 = v52;
        int v177 = 2049;
        __int128 v178 = v53;
        v179 = 1026;
        std::string::size_type v180 = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        int v116 = *(void *)(a1 + 1136);
        __int16 v117 = *((void *)v40 + 4);
        __int128 v118 = v40[19];
        uint64_t v163 = 134349569;
        __int128 v164 = v116;
        v165 = 2049;
        __int128 v166 = v117;
        uint64_t v167 = 1026;
        __int128 v168 = v118;
        LODWORD(v144) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d",  &v163,  v144);
        __int128 v120 = (uint8_t *)v119;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v119);
        if (v120 != buf) {
          free(v120);
        }
      }
    }

    v40[52] = v49;
    double v55 = v158;
    if (v158 == &v157) {
      goto LABEL_154;
    }
    int v56 = 0;
    CFStringRef v146 = 0;
    uint64_t v57 = 0LL;
    __int128 v145 = v40 + 172;
    while (2)
    {
      if (*(void *)v55[2] == *((void *)v40 + 4)
        && *((unsigned __int8 *)v55 + 32) == (*((unsigned __int8 *)v40 + 48) ^ 1))
      {
        goto LABEL_120;
      }

      __str = v56;
      unint64_t v58 = (std::__shared_weak_count *)v55[3];
      __int128 v154 = v55[2];
      __int128 v155 = v58;
      if (v58)
      {
        double v59 = (unint64_t *)&v58->__shared_owners_;
        do
          std::string v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }

      sub_100BDA324((uint64_t)v156, (uint64_t)&v154, *((_BYTE *)v55 + 32));
      std::string v61 = v155;
      if (v155)
      {
        std::string v62 = (unint64_t *)&v155->__shared_owners_;
        do
          int v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }

      std::string v64 = (int *)sub_100D73AC4(a1 + 984, (uint64_t)v156);
      double v65 = v64;
      __int128 v153 = 0.0;
      if (v150 == v64 || v64[18] < 1)
      {
LABEL_118:
        std::string v73 = v57;
        goto LABEL_119;
      }

      unsigned int v66 = 0LL;
      std::string v67 = 0;
      char v68 = 0.0;
      while (2)
      {
        std::string v69 = &v65[2 * v66];
        std::string v70 = *((double *)v69 + 333);
        __int16 v71 = *((double *)v55 + 5);
        if (*((_BYTE *)v65 + 48))
        {
          if (v70 <= v71) {
            goto LABEL_99;
          }
        }

        else if (v70 >= v71)
        {
          goto LABEL_99;
        }

        std::string v72 = sub_100D2DBDC( (double *)(a1 + 608),  v174[0],  v174[1],  *(double *)&v65[2 * v66 + 282],  *(double *)&v65[2 * v66 + 474],  *(double *)(a1 + 1200));
        if (v72 <= 40.0)
        {
          __int128 v153 = *((double *)v69 + 333) + v153;
          char v68 = v68 + v72;
          ++v67;
        }

      double v41 = *(void *)(a1 + 184) + *(void *)(a1 + 176) - 1LL;
      uint64_t v42 = (void *)(a1 + 152);
LABEL_54:
      *(void *)(a1 + 680) = *(void *)(*(void *)(*v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL))
                                        + ((v41 & 0x3F) << 6)
                                        + 8);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_1018840E8);
      }
      unint64_t v43 = (os_log_s *)qword_1019345B8;
      if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 67109376;
        uint64_t v57 = a2;
        unint64_t v58 = 2048;
        double v59 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "WorkoutElevationFusion,source,%d,deltaH,%f",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019345B0 != -1) {
          dispatch_once(&qword_1019345B0, &stru_1018840E8);
        }
        v53[0] = 67109376;
        v53[1] = a2;
        int v54 = 2048;
        double v55 = v7;
        LODWORD(v52) = 18;
        unint64_t v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "WorkoutElevationFusion,source,%d,deltaH,%f",  v53,  v52);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLElevationChangeEntry CLWorkoutElevationFusion::fuseElevation(CLElevationSource)",  "%s\n",  v51);
      }

      uint64_t v44 = *(_OWORD *)(a1 + 688);
      *a3 = *(_OWORD *)(a1 + 672);
      a3[1] = v44;
      __int128 v45 = *(_OWORD *)(a1 + 720);
      a3[2] = *(_OWORD *)(a1 + 704);
      a3[3] = v45;
      return;
    case 4:
      ++*(_DWORD *)(a1 + 796);
      goto LABEL_46;
    default:
      if (a2 == 1000) {
LABEL_45:
      }
        ++*(_DWORD *)(a1 + 764);
      goto LABEL_46;
  }

      if (a1[41].i8[8])
      {
        uint64_t v57 = *(std::__shared_weak_count **)(a2 + 24);
        int v63 = *(void *)(a2 + 16);
        std::string v64 = v57;
        if (v57)
        {
          unint64_t v58 = (unint64_t *)&v57->__shared_weak_owners_;
          do
            double v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }

        sub_1004CEAFC((uint64_t)a1[3].i64, (double *)(a2 + 8), &v63);
        int v56 = v64;
        if (v64) {
          goto LABEL_58;
        }
      }

      break;
  }

      if ((a2 & 1) != 0 || (a1[66] & 1) != 0) {
        char v27 = 1;
      }
      *(_DWORD *)__int128 buf = 1;
      (*(void (**)(_DWORD *, uint8_t *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v24,  0LL,  0xFFFFFFFFLL,  0LL);
    }

    sub_100527B44(v24);
    sub_1009EB4CC((uint64_t)&v28, v29);
  }

  else
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10188C1A8);
    }
    size_t v8 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Unable to get all fences from database",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188C1A8);
      }
      LOWORD(v24[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  17LL,  "Unable to get all fences from database",  v24,  2);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBeaconFenceAuthorizationManager::unlockedNotifyAllWithSuspendFences(BOOL)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  sub_100527B44(&v31);
}

        uint64_t v44 = (void **)(v6 - 5);
        if (v6 - 5 != v14)
        {
          sub_100007664((uint64_t)v14, (__n128 *)v6 - 5);
          *((_DWORD *)v14 + 6) = *((_DWORD *)v6 - 14);
          sub_100007664((uint64_t)(v14 + 2), (__n128 *)v6 - 3);
          __int128 v45 = *(__int128 *)((char *)v6 - 24);
          *((_DWORD *)v14 + 18) = *((_DWORD *)v6 - 2);
          *(__int128 *)((char *)v14 + 56) = v45;
        }

        uint64_t v46 = *v44;
        if (*v44)
        {
          *((void *)v6 - 9) = v46;
          operator delete(v46);
        }

        *((void *)v6 - 10) = v23;
        *((void *)v6 - 9) = v15;
        *((void *)v6 - 8) = v235;
        *((_DWORD *)v6 - 14) = v230;
        unint64_t v47 = (void *)*((void *)v6 - 6);
        if (v47)
        {
          *((void *)v6 - 5) = v47;
          operator delete(v47);
        }

        *(v6 - 3) = v245;
        *((void *)v6 - 4) = v240;
        *(__int128 *)((char *)v6 - 24) = v254;
        *((_DWORD *)v6 - 2) = v26;
        uint64_t v48 = v31 >= v22;
        --a3;
        a4 = v225;
        if (!v48)
        {
LABEL_77:
          sub_100F49594(v261, v6 - 5, v251, v225 & 1);
          a4 = 0;
          goto LABEL_78;
        }

        std::string v49 = sub_100F4AD1C((uint64_t)v261, (uint64_t)(v6 - 5));
        if (!sub_100F4AD1C((uint64_t)v6, (uint64_t)v260))
        {
          if (!v49) {
            goto LABEL_77;
          }
LABEL_78:
          __int128 v261 = v6;
LABEL_139:
          a2 = (uint64_t)v260;
          continue;
        }

        if (!v49)
        {
          v260 = v6 - 5;
          uint64_t v6 = v261;
          goto LABEL_139;
        }

        return;
    }
  }

  sub_1003CF328(*(_DWORD **)(v42 + 80), (unint64_t)(a2[1] - *a2) >> 3, (int)v43, a3);
  unint64_t v47 = *(void *)(v42 + 152);
  if (v47) {
    sub_1002FABE0(v47, (void *)a4);
  }
  sub_100603B94((uint64_t)&v79, v80[0]);
  sub_100008390((uint64_t)&v81, v82[0]);
  if (v83)
  {
    std::string v84 = v83;
    operator delete(v83);
  }

  if (HIBYTE(v91)) {
    goto LABEL_58;
  }
}

  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 72));
  id v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 140), 0xFu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }

  int v11 = *(void *)(a2 + 320);
  v5 |= 0x8000000000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 320) = v11;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000000LL) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfDistanceTraveledPostImpact", *(void *)(a1 + 48));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 344), 0x2Eu);
  id v5 = *v4;
  if ((*v4 & 0x10000000000LL) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }

  int v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v11;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "maxNumStaticBins", *(_DWORD *)(a1 + 72));
  id v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 154), 0x10u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }

  uint64_t v28 = *(void *)(a2 + 352);
  v10 |= 0x10000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 352) = v28;
  char v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  if ((*(_DWORD *)(a2 + 128) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = v3 | 0x40;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = v4;
  return *(float *)&v4;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_54;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_48;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_39;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_48;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_48:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_54;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
LABEL_54:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  char v25 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 212) |= 0x100u;
  *(_DWORD *)(a1 + 128) = v25;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "locallyArmedBitmap", *(_DWORD *)(a1 + 136));
  char v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v9 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0xDu);
  BOOL v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000) == 0)
  {
LABEL_22:
    if ((v14 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  double result = *(float *)(a2 + 20);
  v3 |= 8u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 20) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 4) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "rawRmsSum", *(float *)(a1 + 76));
  id v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 16), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }

  unsigned int v13 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 152) = v3;
  *(void *)(a1 + 16) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 116));
  id v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 100), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

  char v25 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 80) = v25;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 32));
  id v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xD0u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 88);
  v3 |= 0x4000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 88) = v21;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "metaCountOfFreefallTimePassed", *(_DWORD *)(a1 + 112));
  id v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 0x13u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }

  id v5 = *(_DWORD *)(a2 + 128);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 128) = v5;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "didProcess", *(_BYTE *)(a1 + 158));
  id v5 = *(void *)(a1 + 172);
  if ((v5 & 0x1000000000LL) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 6u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }

        if (PB::Reader::placeMark(this, v58, v45, v46)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v44 + 16LL))(v44, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v58);
LABEL_82:
          uint64_t v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      default:
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_82;
    }
  }

            *(_DWORD *)(a1 + 24) = v28;
          }

          else
          {
            double result = PB::Reader::skip(this, v22, v13 & 7, 0);
            if (!(_DWORD)result) {
              return result;
            }
          }

          goto LABEL_54;
        }

        int v35 = (void **)operator new(0x18uLL);
        v35[1] = 0LL;
        v35[2] = 0LL;
        std::string *v35 = 0LL;
        std::string __p = 0LL;
        double v36 = *v9;
        os_log_s *v9 = v35;
        if (v36)
        {
          sub_10058A4FC((int)v9, v36);
          double v37 = (void **)__p;
          std::string __p = 0LL;
          if (v37) {
            sub_10058A4FC((int)&__p, v37);
          }
        }

        CFStringRef v34 = *v9;
      }

      PB::Reader::read(this, v34);
LABEL_54:
      uint64_t v2 = *((void *)this + 1);
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && v4 == 0);
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "heartRate", *(float *)(a1 + 76));
  id v5 = *(void *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0xEu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "signalRateSigmaKcpss", *(float *)(a1 + 108));
  id v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
LABEL_55:
    PB::TextFormatter::format(this, "smudgeTimeoutCountdownMs", *(float *)(a1 + 116));
    if ((*(_DWORD *)(a1 + 120) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_28;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 88), 0x19u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 84), 0x1Bu);
  }

  unsigned int v20 = *(_DWORD *)(a2 + 136);
  v3 |= 0x8000000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 136) = v20;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "pearlSessionRunning", *(_DWORD *)(a1 + 96));
  id v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x12u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }

  uint64_t v10 = *(_BYTE *)(a2 + 132);
  v3 |= 0x20000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 132) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "qz", *(float *)(a1 + 100));
  id v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 28), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }

  BOOL v14 = *(void *)(a2 + 64);
  v3 |= 0x80uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 64) = v14;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "planarChaosAtMaxSaturation", *(float *)(a1 + 124));
  id v5 = *(void *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 124), 0xCu);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }

  double result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 2sub_100019CEC(v39 + 48) = v3;
  *(double *)(a1 + 168) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlCv", *(double *)(a1 + 168));
  id v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 176), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

  double result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 96) = result;
  if ((*(_DWORD *)(a2 + 216) & 0x1000) != 0) {
    goto LABEL_54;
  }
  return result;
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x17u);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0) {
LABEL_30:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x18u);
LABEL_31:
  char v9 = *(const PB::Base **)(v3 + 56);
  if (v9) {
    double result = PB::Writer::writeSubmessage(this, v9, 0x19u);
  }
  if ((*(_BYTE *)(v3 + 154) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 128), 0x1Au);
  }
  return result;
}

  double result = *(float *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 44) = result;
  if ((*(_DWORD *)(a2 + 116) & 2) != 0) {
    goto LABEL_54;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x10000000000LL) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "cycleTimeMean", *(float *)(a1 + 48));
  id v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 177), 7u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }

  char v27 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 32) = v27;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "vehicularWifiHint", *(_BYTE *)(a1 + 114));
  id v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_27;
    }
LABEL_55:
    PB::TextFormatter::format(this, "workoutDetectionType", *(_DWORD *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 116) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_28;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x19u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_27:
    if ((v4 & 0x2000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x1Bu);
  }

  double v32 = *(void *)(a2 + 72);
  v5 |= 0x100u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 72) = v32;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 180) & 0x1000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 104));
LABEL_24:
  uint64_t v6 = *(void *)(a1 + 112);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))( v6,  this,  "trackRunData");
  }
  uint64_t v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 164));
    uint64_t v7 = *(_DWORD *)(a1 + 180);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_57;
    }
  }

  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }

  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 168));
  uint64_t v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_30;
    }
LABEL_58:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 180) & 0x4000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_31;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 156), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }

  std::string v22 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 32) = v22;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "rawAltitude", *(double *)(a1 + 104));
  id v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 88);
  v5 |= 0x1000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 88) = v21;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "machineFrequency", *(float *)(a1 + 96));
  id v5 = *(void *)(a1 + 192);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 8), 0xBu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }

  std::string v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 52) = v22;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "relOmegaVarLong", *(float *)(a1 + 72));
  id v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 108), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "qHat_X", *(float *)(a1 + 96));
  char v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }

  char v12 = *(_DWORD *)(a2 + 212);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_DWORD *)(a1 + 212) = v12;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 64));
  id v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 192), 0x11u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }

  int v26 = *(_BYTE *)(a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 180) = v26;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }

  PB::TextFormatter::format(this, "kalmanStateCovariance", *(double *)(a1 + 128));
  id v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 104), 0x18u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }

  uint64_t v28 = *(void *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 160) = v28;
  if ((*(_DWORD *)(a2 + 212) & 0x2000000) != 0) {
    goto LABEL_54;
  }
  return result;
}

    *(void *)(a1 + 184) = *(void *)(v23 + 16);
    double v36 = *(double *)(v1 + 128);
    double v37 = *(double *)(v1 + 32);
    if (v36 >= v37) {
      __int128 v38 = v1;
    }
    else {
      __int128 v38 = v1 + 96;
    }
    if (v8 != v2)
    {
      if (v36 >= v37) {
        std::string v39 = v1 + 96;
      }
      else {
        std::string v39 = v1;
      }
      unint64_t v40 = v1 + 192;
      double v41 = v1;
      while (1)
      {
        uint64_t v42 = v40;
        unint64_t v43 = v40 + 96;
        if (v43 == v2) {
          break;
        }
        uint64_t v44 = v41 + 288;
        __int128 v45 = *(double *)(v42 + 128);
        uint64_t v46 = *(double *)(v42 + 32);
        unint64_t v47 = *(double *)(v38 + 32);
        uint64_t v48 = *(double *)(v39 + 32);
        if (v46 >= v47) {
          std::string v49 = v38;
        }
        else {
          std::string v49 = v42;
        }
        if (v45 < v48) {
          uint64_t v44 = v39;
        }
        if (v45 < v47) {
          __int128 v38 = v43;
        }
        if (v46 >= v48) {
          std::string v39 = v42;
        }
        if (v45 >= v46)
        {
          __int128 v38 = v49;
          std::string v39 = v44;
        }

        unint64_t v40 = v42 + 192;
        double v41 = v42;
        if (v42 + 192 == v2) {
          goto LABEL_77;
        }
      }
    }

  *(void *)((char *)v33
  v33[2] = v27;
  std::streambuf::~streambuf(&v34);
  std::ios::~ios(&v35);
  return a1;
}

  *(void *)((char *)v33
  CFStringRef v34 = v27;
  std::streambuf::~streambuf(&v35);
  std::ios::~ios(&v36);
  return a1;
}

  *(void *)((char *)v33
  CFStringRef v34 = v27;
  std::streambuf::~streambuf(&v35);
  std::ios::~ios(&v36);
  return a1;
}

  *(void *)((char *)v33
  CFStringRef v34 = v27;
  std::streambuf::~streambuf(&v35);
  std::ios::~ios(&v36);
  return a1;
}

  *(void *)((char *)v33
  CFStringRef v34 = v27;
  std::streambuf::~streambuf(&v35);
  std::ios::~ios(&v36);
  return a1;
}

LABEL_28:
  sub_100058B10((uint64_t)a1, a2, 0, a5, v66, (uint64_t)v64);
  uint64_t v21 = *((void *)a1 + 23);
  int v63 = 0;
  sub_100018E34(&v63);
  __p[0] = (void *)sub_100017338((ssize_t)&v63);
  __p[1] = v22;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100058F98(__p, (uint64_t)v64, (uint64_t)&buf, Current_1);
  (*(void (**)(uint64_t, void **))(*(void *)v21 + 96LL))(v21, &buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v73 + 2));
  sub_100019D7C((unsigned int *)&v63);
  int v63 = 0;
  sub_10010137C(&v63, &buf);
  uint64_t v24 = v64[4];
  sub_1001013A0((int *)&v66, __p);
  char v25 = (*(uint64_t (**)(void))(**((void **)a1 + 23) + 88LL))(*((void *)a1 + 23));
  if (*((_DWORD *)a1 + 24) == 1 && (int v26 = (uint64_t *)*((void *)a1 + 3)) != 0LL)
  {
    while (*((_DWORD *)v26 + 8) != 1)
    {
      int v26 = (uint64_t *)*v26;
      if (!v26) {
        goto LABEL_32;
      }
    }

    char v27 = sub_1000585B4();
  }

  else
  {
LABEL_32:
    char v27 = 0;
  }

  sub_10009120C(a2, (uint64_t)&buf, v24, (uint64_t)__p, v25, v27, (uint64_t)v15);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  if ((v72[3] & 0x80000000) != 0) {
    operator delete(buf);
  }
  uint64_t v28 = v66;
  sub_10008809C((wireless_diagnostics::google::protobuf::MessageLite *)v64);
  return v28;
}

  if ((v21 & 0x100) != 0)
  {
    uint64_t v24 = *(_BYTE *)(a2 + 97);
    *(_DWORD *)(a1 + 104) |= 0x100u;
    *(_BYTE *)(a1 + 97) = v24;
  }

  if ((v22 & 0xFF00) == 0) {
    goto LABEL_38;
  }
  if ((v22 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 192) |= 0x100u;
    __int128 v30 = *(void **)(a1 + 112);
    if (!v30)
    {
      __int128 v30 = operator new(0x28uLL);
      v30[1] = 0LL;
      v30[2] = 0LL;
      *__int128 v30 = off_10181AB58;
      *((_DWORD *)v30 + 6) = 0;
      v30[4] = 0LL;
      *(void *)(a1 + 112) = v30;
    }

    int v31 = *(void *)(a2 + 112);
    if (!v31) {
      int v31 = *(void *)(qword_1019A0880 + 112);
    }
    sub_10006C44C(v30, v31);
    std::string v22 = *(_DWORD *)(a2 + 192);
    if ((v22 & 0x200) == 0)
    {
LABEL_31:
      if ((v22 & 0x400) == 0) {
        goto LABEL_32;
      }
      goto LABEL_59;
    }
  }

  else if ((v22 & 0x200) == 0)
  {
    goto LABEL_31;
  }

  double v32 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 192) |= 0x200u;
  *(_DWORD *)(a1 + 108) = v32;
  std::string v22 = *(_DWORD *)(a2 + 192);
  if ((v22 & 0x400) == 0)
  {
LABEL_32:
    if ((v22 & 0x800) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(unsigned __int8 *)(v5 + 69),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  *(_DWORD *)(a1 + 292) |= 8u;
  char v12 = *(void **)(a1 + 32);
  if (!v12)
  {
    char v12 = operator new(0x18uLL);
    *char v12 = off_10181B0F8;
    v12[1] = 5LL;
    *((_DWORD *)v12 + 4) = 0;
    *(void *)(a1 + 32) = v12;
  }

  unsigned int v13 = *(void *)(a2 + 32);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A0978 + 32);
  }
  sub_100073954((uint64_t)v12, v13);
  id v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_38:
    *(_DWORD *)(a1 + 292) |= 0x20u;
    uint64_t v16 = *(_DWORD **)(a1 + 48);
    if (!v16)
    {
      uint64_t v16 = operator new(0x78uLL);
      v16[16] = 9;
      *(void *)uint64_t v16 = off_10181B260;
      *((void *)v16 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_WORD *)v16 + 34) = 0;
      *((void *)v16 + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 12) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 13) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v16 + 14) = 0LL;
      *(void *)(a1 + sub_100019CEC(v39 + 48) = v16;
    }

    int v17 = *(void *)(a2 + 48);
    if (!v17) {
      int v17 = *(void *)(qword_1019A0978 + 48);
    }
    sub_100074A40((uint64_t)v16, v17);
    id v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_53;
      }
      goto LABEL_48;
    }

    goto LABEL_43;
  }

  *(_DWORD *)(a1 + 92) |= 8u;
  unsigned int v13 = *(char **)(a1 + 32);
  if (!v13)
  {
    unsigned int v13 = (char *)operator new(0x60uLL);
    *(void *)unsigned int v13 = &off_101827610;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 11) = 0LL;
    *(void *)(a1 + 32) = v13;
  }

  BOOL v14 = *(void *)(a2 + 32);
  if (!v14) {
    BOOL v14 = *(void *)(qword_1019A0AF0 + 32);
  }
  double result = sub_1001C80A4((uint64_t)v13, v14);
  uint64_t v6 = *(_DWORD *)(a2 + 92);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_38:
    *(_DWORD *)(a1 + 92) |= 0x20u;
    int v17 = *(char **)(a1 + 48);
    if (!v17)
    {
      int v17 = (char *)operator new(0x88uLL);
      *(void *)int v17 = &off_101827700;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *(_OWORD *)(v17 + 104) = 0u;
      *(_OWORD *)(v17 + 120) = 0u;
      *(void *)(a1 + sub_100019CEC(v39 + 48) = v17;
    }

    int v18 = *(void *)(a2 + 48);
    if (!v18) {
      int v18 = *(void *)(qword_1019A0AF0 + 48);
    }
    double result = sub_1001C84BC((uint64_t)v17, v18);
    uint64_t v6 = *(_DWORD *)(a2 + 92);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_53;
      }
      goto LABEL_48;
    }

    goto LABEL_43;
  }

  double result = *(double *)(a2 + 24);
  *(_DWORD *)(a1 + 96) |= 0x10u;
  *(double *)(a1 + 24) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 96);
  if ((v6 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_10:
  if ((v6 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_30:
  double result = *(double *)(a2 + 40);
  *(_DWORD *)(a1 + 96) |= 0x40u;
  *(double *)(a1 + 40) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 96);
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 96) |= 0x80u;
    *(double *)(a1 + sub_100019CEC(v39 + 48) = result;
    uint64_t v6 = *(_DWORD *)(a2 + 96);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 16),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 168);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 152),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 132);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  (int)a2,  *(double *)(v5 + 16),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(unsigned __int8 *)(v5 + 36),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 56),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  int v11 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 96) |= 4u;
  *(void *)(a1 + 24) = v11;
  id v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 88),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(unsigned __int8 *)(v5 + 42),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 60);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  *(_DWORD *)(a1 + 56) |= 0x20u;
  BOOL v14 = *(void **)(a1 + 32);
  if (!v14)
  {
    BOOL v14 = operator new(0x18uLL);
    *BOOL v14 = off_101829890;
    v14[1] = 0LL;
    *((_DWORD *)v14 + 4) = 0;
    *(void *)(a1 + 32) = v14;
  }

  id v15 = *(void *)(a2 + 32);
  if (!v15) {
    id v15 = *(void *)(qword_1019A0D38 + 32);
  }
  sub_1001F8800((uint64_t)v14, v15);
  uint64_t v6 = *(_DWORD *)(a2 + 56);
  if ((v6 & 0x40) != 0) {
    goto LABEL_33;
  }
LABEL_11:
  if ((v6 & 0x80) != 0)
  {
LABEL_12:
    LODWORD(v5) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x80u;
    *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = LODWORD(v5);
  }

  return *(float *)&v5;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(unsigned __int8 *)(v5 + 47),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 56) & 0x400) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  *(unsigned __int8 *)(v5 + 48),  (BOOL)a2,  a4);
  }
  return result;
}

  char v12 = *(unsigned int *)(a1 + 16);
  double result = (v12 + v4);
  if ((int)v12 >= 1)
  {
    BOOL v14 = *(void *)(a1 + 8);
    do
    {
      id v15 = *(unsigned __int8 *)(*(void *)v14 + 28LL);
      if (*(_BYTE *)(*(void *)v14 + 28LL))
      {
        if ((v15 & 2) != 0) {
          id v15 = ((v15 << 31 >> 31) & 9) + 9;
        }
        else {
          id v15 = (v15 << 31 >> 31) & 9;
        }
      }

      *(_DWORD *)(*(void *)v14 + 24LL) = v15;
      double result = (result + v15 + 1);
      v14 += 8LL;
      --v12;
    }

    while (v12);
  }

  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = result;
  return result;
}

  *(_DWORD *)(a1 + 68) |= 8u;
  unsigned int v13 = *(char **)(a1 + 32);
  if (!v13)
  {
    unsigned int v13 = (char *)operator new(0x28uLL);
    *(void *)unsigned int v13 = off_101827B80;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(a1 + 32) = v13;
  }

  BOOL v14 = *(void *)(a2 + 32);
  if (!v14) {
    BOOL v14 = *(void *)(qword_1019A0DE8 + 32);
  }
  double result = sub_1001D323C((uint64_t)v13, v14);
  uint64_t v6 = *(_DWORD *)(a2 + 68);
  if ((v6 & 0x10) != 0) {
    goto LABEL_33;
  }
LABEL_9:
  if ((v6 & 0x20) == 0) {
    goto LABEL_10;
  }
LABEL_38:
  *(_DWORD *)(a1 + 68) |= 0x20u;
  int v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    int v17 = operator new(0x20uLL);
    *int v17 = off_101827EC8;
    v17[1] = 0LL;
    v17[2] = 0LL;
    v17[3] = 0LL;
    *(void *)(a1 + sub_100019CEC(v39 + 48) = v17;
  }

  int v18 = *(void *)(a2 + 48);
  if (!v18) {
    int v18 = *(void *)(qword_1019A0DE8 + 48);
  }
  double result = sub_1001D60C0((uint64_t)v17, v18);
  if ((*(_DWORD *)(a2 + 68) & 0x40) != 0)
  {
LABEL_11:
    double result = *(double *)(a2 + 56);
    *(_DWORD *)(a1 + 68) |= 0x40u;
    *(double *)(a1 + 56) = result;
  }

  return result;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  a2,  *(float *)(v5 + 48),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_eligibleForCalorimetry),  @"eligibleForCalorimetry");
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_13:
    if ((has & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PBDataWriterWriteUint32Field(a3, self->_numWorkoutsContrToEstimate, 12LL);
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_14:
    if ((has & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  *((_DWORD *)a3 + 22) = self->_numWorkoutsContrToEstimate;
  *((_WORD *)a3 + 52) |= 0x400u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_14:
    if ((has & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  *((_BYTE *)result + 100) = self->_eligibleForCalorimetry;
  *((_WORD *)result + 52) |= 0x2000u;
  has = (__int16)self->_has;
  if ((has & 0x400) == 0)
  {
LABEL_13:
    if ((has & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  self->_numWorkoutsContrToEstimate = *((_DWORD *)a3 + 22);
  *(_WORD *)&self->_has |= 0x400u;
  uint64_t v3 = *((_WORD *)a3 + 52);
  if ((v3 & 4) == 0)
  {
LABEL_14:
    if ((v3 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  double v19 = 2LL;
LABEL_38:
  CFStringRef v34 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v35
  double v36 = v22;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v38);
  return v19;
}
}

          CFRelease(v3);
          return;
        }

        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101835F08);
        }
        uint64_t v10 = (os_log_s *)qword_101934A48;
        if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t valuePtr = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "cannot get kMISPropHostsTypeAirPort",  valuePtr,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_28;
        }
        bzero(valuePtr, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101835F08);
        }
        LOWORD(v12[0]) = 0;
        size_t v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  valuePtr,  1628LL,  &_mh_execute_header,  qword_101934A48,  17LL,  "cannot get kMISPropHostsTypeAirPort",  v12,  2,  v12[0]);
      }

      else
      {
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101835F08);
        }
        char v9 = (os_log_s *)qword_101934A48;
        if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t valuePtr = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "cannot get kMISPropHostsCurrentByType",  valuePtr,  2u);
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_28;
        }
        bzero(valuePtr, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101835F08);
        }
        LOWORD(v12[0]) = 0;
        size_t v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  valuePtr,  1628LL,  &_mh_execute_header,  qword_101934A48,  17LL,  "cannot get kMISPropHostsCurrentByType",  v12,  2,  v12[0]);
      }
    }

    else
    {
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101835F08);
      }
      uint64_t v7 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t valuePtr = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cannot get kMISPropHosts", valuePtr, 2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_28;
      }
      bzero(valuePtr, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101835F08);
      }
      LOWORD(v12[0]) = 0;
      size_t v8 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  valuePtr,  1628LL,  &_mh_execute_header,  qword_101934A48,  17LL,  "cannot get kMISPropHosts",  v12,  2,  v12[0]);
    }

    int v11 = (char *)v8;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonStatus::onDynamicStore(SCDynamicStoreRef, CFArrayRef)",  "%s\n",  v8);
    goto LABEL_28;
  }

  unsigned int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v13 >= 0x80)
  {
    BOOL v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 48);
  }

  else
  {
    BOOL v14 = 2;
  }

  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  BOOL v14 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 96) |= 8u;
  *(void *)(a1 + 32) = v14;
  id v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_30:
    uint64_t v16 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 96) |= 0x20u;
    *(void *)(a1 + sub_100019CEC(v39 + 48) = v16;
    id v5 = *(_DWORD *)(a2 + 96);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_31;
  }

  PBDataWriterWriteUint32Field(a3, self->_nVeryHighCatherine, 6LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  *((_DWORD *)a3 + 19) = self->_nVeryHighCatherine;
  *((_DWORD *)a3 + 26) |= 0x8000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  *((_DWORD *)result + 15) = self->_nHighCatherine;
  *((_DWORD *)result + 26) |= 0x800u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x8000) == 0)
  {
LABEL_6:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }

  self->_nVeryHighCatherine = *((_DWORD *)a3 + 19);
  *(_DWORD *)&self->_has |= 0x8000u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x400) == 0)
  {
LABEL_7:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
    uint64_t v10 = v7 == 2;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    sub_1010DDBC0(v14, (char *)[v5 UTF8String]);
    if (sub_100FE3530((char **)v14))
    {
      int v11 = sub_100D9660C(v5);
      if (SHIBYTE(v15[0]) < 0) {
        operator delete(v14[0]);
      }
      if ((v11 & 1) == 0) {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
      }
    }

    else if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL)) {
    char v12 = v6 == 1;
  }
  else {
    char v12 = 0;
  }
  if (v12
    && ([@"com.apple.locationd.bundle-/System/Library/LocationBundles/WifiCalling.bundle" isEqualToString:v5] & 1) == 0)
  {
    if (a2)
    {
      [a2 clientName];
      if (BYTE1(v20)) {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
      }
    }

    else
    {
      char v25 = 0LL;
      *(_OWORD *)std::string __p = 0u;
      uint64_t v24 = 0u;
      uint64_t v21 = 0u;
      *(_OWORD *)std::string v22 = 0u;
      double v19 = 0u;
      unsigned int v20 = 0u;
      *(_OWORD *)int v17 = 0u;
      *(_OWORD *)int v18 = 0u;
      *(_OWORD *)id v15 = 0u;
      uint64_t v16 = 0u;
      *(_OWORD *)BOOL v14 = 0u;
    }

    if (SHIBYTE(v24) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(*((void **)&v20 + 1));
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[1]);
    }
    if (SHIBYTE(v18[0]) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[1]);
    }
    if (SHIBYTE(v15[0]) < 0) {
      operator delete(v14[0]);
    }
  }

  unsigned int v13 = *(void *)(*(void *)(a1 + 72) + 8LL);
  if (*(_BYTE *)(v13 + 24) || *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL))
  {
    if (v8)
    {
      *(_BYTE *)(v13 + 24) = 0;
      if (v8 == 2) {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0;
      }
    }
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  return ValueAtIndex;
}

      -[CMStrideCalLocationFSM requestTransitionToLocationState:]( self->fStrideCalLocationFSM,  "requestTransitionToLocationState:",  1LL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101843B48);
      }
      int v17 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        int v18 = -[CMStrideCalibrationStepCountBuffer stepsInWindow](*p_fStepsBuffer, "stepsInWindow");
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v32) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "TrackClose,Pass,EnabledNotSufficientSteps,Steps,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101843B48);
        }
        double v19 = qword_101934518;
        unsigned int v20 = -[CMStrideCalibrationStepCountBuffer stepsInWindow](*p_fStepsBuffer, "stepsInWindow");
        int v29 = 67109120;
        LODWORD(v30) = v20;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v19,  2LL,  "TrackClose,Pass,EnabledNotSufficientSteps,Steps,%d",  &v29);
        std::string v22 = (uint8_t *)v21;
        sub_10029211C("Generic", 1LL, 0, 2LL, "-[CMStrideCalibrator fsm:didUpdateLocationAtTime:]", "%s\n", v21);
        if (v22 != buf) {
          free(v22);
        }
      }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 60),  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 72),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 104);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v5[11],  a2,  a4);
  uint64_t v6 = v5[20];
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  unsigned int v13 = *(void *)(v5 + 56);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A1328 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v13,  a2,  a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(_DWORD *)(v5 + 64),  a2,  a4);
  }
  return result;
}

  char v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v12 >= 0x80)
  {
    unsigned int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 40);
  }

  else
  {
    unsigned int v13 = 2;
  }

  uint64_t v4 = (v13 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v5[14],  a2,  a4);
  if ((v5[17] & 0x2000) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v5[15],  a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

  double v19 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) |= 0x10u;
  *(_DWORD *)(a1 + sub_100019CEC(v39 + 48) = v19;
  unsigned int v13 = *(_DWORD *)(a2 + 68);
  if ((v13 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_17:
  if ((v13 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_31:
  uint64_t v21 = *(_DWORD *)(a2 + 56);
  if (v21 >= 7) {
    sub_101241AAC();
  }
  *(_DWORD *)(a1 + 68) |= 0x40u;
  *(_DWORD *)(a1 + 56) = v21;
  if ((*(_DWORD *)(a2 + 68) & 0x80) != 0)
  {
LABEL_19:
    BOOL v14 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 68) |= 0x80u;
    *(_DWORD *)(a1 + 60) = v14;
  }

    unsigned int v13 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 64) |= 0x10u;
    *(_DWORD *)(a1 + 24) = v13;
    id v5 = *(_DWORD *)(a2 + 64);
    if ((v5 & 0x20) == 0)
    {
LABEL_10:
      if ((v5 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
    if (*((_DWORD *)v93 + 6)) {
      uint64_t v46 = "exited";
    }
    else {
      uint64_t v46 = "entered";
    }
    std::string v72 = v46;
    unint64_t v47 = v86 + 12;
    uint64_t v48 = v86 + 6;
    std::string v49 = v86 + 6;
    uint64_t v50 = v86 + 9;
    std::string v70 = v49;
    unint64_t v51 = "";
    std::string v74 = qword_101934878;
    std::string v76 = a5;
    unsigned int v66 = v51;
    char v68 = v86[25];
    std::string v64 = sub_100270760((uint64_t)v48);
    uint64_t v52 = *((double *)v86 + 18) >= 7000.0;
    CFStringRef v53 = *((_DWORD *)v86 + 52);
    int v54 = v86[35] != v86[34];
    double v55 = *((unsigned __int8 *)v86 + 236);
    int v56 = CLMotionActivity::isStatic((CLMotionActivity *)(v79 + 6));
    uint64_t v57 = CLMotionActivity::isWalking((CLMotionActivity *)(v79 + 6));
    unint64_t v58 = CLMotionActivity::isDriving((CLMotionActivity *)(v79 + 6));
    double v59 = CLMotionActivity::isInVehicle((CLMotionActivity *)(v79 + 6));
    std::string v60 = (v53 >> 4) & 1;
    char v100 = 136384515;
    __int128 v101 = v72;
    int v102 = 2082;
    __int128 v103 = v47;
    uint64_t v104 = 2081;
    __int128 v105 = v70;
    char v106 = 2081;
    __int128 v107 = v50;
    __int128 v108 = 1026;
    a5 = v76;
    std::string v109 = v76;
    uint64_t v110 = 2081;
    __int128 v111 = v66;
    __int16 v112 = 2049;
    __int128 v113 = v68;
    int v114 = 1025;
    __int16 v115 = v64;
    int v116 = 1025;
    __int16 v117 = v52;
    __int128 v118 = 1025;
    char v119 = v60;
    __int128 v120 = 1025;
    __int128 v121 = v54;
    int v122 = 1025;
    char v123 = v55;
    char v124 = 1025;
    __int128 v125 = v56;
    unint64_t v126 = 1025;
    __int128 v127 = v57;
    CFStringRef v128 = 1025;
    __int128 v129 = v58;
    uint64_t v130 = 1025;
    __int128 v131 = v59;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v74,  2LL,  "Fence: Sending %{private}s notification for [%{public}s]/%{private}s/%{private}s to client %{public}d%{private}s, sinceLast,%{private}.1f, type,%{private}d,%{private}d,%{private}d,%{private}d,%{private}d, motion,%{private}d,%{pr ivate}d,%{private}d,%{private}d",  &v100,  122);
    std::string v62 = (uint8_t *)v61;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::notifyFenceEntryExitForAuthorizedFence(const CLFenceManager_Type::Fence &, const CLFenceManag er_Type::FenceStatus &, const CLDaemonLocation &, int)",  "%s\n",  v61);
    if (v62 != buf) {
      free(v62);
    }
  }

  (*(void (**)(uint64_t, uint64_t *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v93 + 3,  v86 + 6,  0LL,  a5,  0LL);
  if (*(_BYTE *)(a1 + 3785) && !*(_BYTE *)(a1 + 3786))
  {
    uint64_t v44 = *(void **)(a1 + 32);
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472LL;
    v77[2] = sub_1006636E4;
    v77[3] = &unk_101847C18;
    v77[4] = &v96;
    v77[5] = &v92;
    v77[6] = &v85;
    v77[7] = &v78;
    sub_1004DDF18(v44, (uint64_t)v77);
  }

  _Block_object_dispose(&v78, 8);
  _Block_object_dispose(&v85, 8);
  sub_100668374((uint64_t)v91);
  _Block_object_dispose(&v92, 8);
  _Block_object_dispose(&v96, 8);
  return 1LL;
}

  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

  memset(&__str, 0, sizeof(__str));
  sub_1002F0B04(buf);
  int v17 = sub_1002A8560(*(uint64_t *)buf, "EEDLISURL", &__str);
  int v18 = v17;
  double v19 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_32;
  }
  unsigned int v20 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    uint64_t v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18) {
      goto LABEL_40;
    }
  }

  else
  {
LABEL_32:
    if (!v17) {
      goto LABEL_40;
    }
  }

  std::string v22 = (void *)(a1 + 64);
  std::string::operator=((std::string *)(a1 + 64), &__str);
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  __int128 v23 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *(_DWORD *)a1;
    char v25 = (void *)(a1 + 64);
    *(_DWORD *)__int128 buf = 67240451;
    *(_DWORD *)&uint8_t buf[4] = v24;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2Cfg,inst,%{public}d,overriding LIS URL to %{private}s",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    double v55 = *(_DWORD *)a1;
    LODWORD(v75.__r_.__value_.__l.__data_) = 67240451;
    HIDWORD(v75.__r_.__value_.__r.__words[0]) = v55;
    LOWORD(v75.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v22;
    LODWORD(v67) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2Cfg,inst,%{public}d,overriding LIS URL to %{private}s",  &v75,  v67);
    uint64_t v57 = (uint8_t *)v56;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v56);
    if (v57 != buf) {
      free(v57);
    }
  }

  double result = sub_1006A8BD8((uint64_t)v10, (char *)v23, v13);
  uint64_t v28 = (double *)a1[18];
  char v27 = (double *)a1[19];
  int v29 = 0.0;
  if (vabdd_f64(*(v27 - 2), *v28) >= 60.0)
  {
    if (v28 == v27) {
      goto LABEL_34;
    }
    __int128 v30 = -1LL;
    int v31 = 0.0;
    do
    {
      double v32 = v28[1];
      double v33 = v32 - v31;
      int v31 = v31 + (v32 - v31) / (double)(v30 + 2);
      int v29 = v29 + v33 * (v32 - v31);
      v28 += 2;
      ++v30;
    }

    while (v28 != v27);
    if (!v30) {
LABEL_34:
    }
      CFStringRef v34 = 2.22044605e-16;
    else {
      CFStringRef v34 = v29 / (double)v30 + 2.22044605e-16;
    }
    int v29 = sqrt(v34);
  }

  *(double *)(a3 + 40) = v29;
  return result;
}

  *(_DWORD *)(a1 + 72) |= 8u;
  char v12 = *(void **)(a1 + 32);
  if (!v12)
  {
    char v12 = operator new(0x20uLL);
    *char v12 = &off_101858DC8;
    v12[1] = 0LL;
    v12[2] = 0LL;
    void v12[3] = 0LL;
    *(void *)(a1 + 32) = v12;
  }

  unsigned int v13 = *(void *)(a2 + 32);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A17D0 + 32);
  }
  sub_1008104A4((uint64_t)v12, v13);
  id v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_34:
    id v15 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 64) = v15;
    id v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        return;
      }
      goto LABEL_41;
    }

    goto LABEL_36;
  }

      if (v24)
      {
        double v33 = a4[1];
        double v32 = (unint64_t)a4[2];
        if ((unint64_t)v33 >= v32)
        {
          int v35 = ((char *)v33 - (_BYTE *)*a4) >> 3;
          double v36 = v32 - (void)*a4;
          double v37 = v36 >> 2;
          else {
            __int128 v38 = v37;
          }
          if (v38)
          {
            std::string v39 = (char *)sub_1000071BC(v84, v38);
            unsigned int v13 = *v6;
          }

          else
          {
            std::string v39 = 0LL;
          }

          std::string v60 = &v39[8 * v35];
          *(void *)std::string v60 = v13;
          CFStringRef v34 = v60 + 8;
          std::string v62 = (char *)*a4;
          std::string v61 = (char *)a4[1];
          if (v61 != *a4)
          {
            do
            {
              int v63 = *((void *)v61 - 1);
              v61 -= 8;
              *((void *)v60 - 1) = v63;
              v60 -= 8;
            }

            while (v61 != v62);
            std::string v61 = (char *)*a4;
          }

          *a4 = v60;
          a4[1] = v34;
          a4[2] = &v39[8 * v38];
          if (v61) {
            operator delete(v61);
          }
        }

        else
        {
          std::string *v33 = v13;
          CFStringRef v34 = v33 + 1;
        }

        a4[1] = v34;
      }

  double v19 = v26;
  if (v26)
  {
    unsigned int v20 = (unint64_t *)&v26->__shared_owners_;
    do
      uint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}
}

    if (v6 == v8) {
      uint64_t v16 = 3;
    }
    else {
      uint64_t v16 = 4;
    }
    if (v6 >= v8) {
      char v9 = v16;
    }
    else {
      char v9 = 5LL;
    }
    goto LABEL_40;
  }

  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_10185FC60);
  }
  uint64_t v10 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "No buffered Motion Cals, no arbitration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934600 != -1) {
      dispatch_once(&qword_101934600, &stru_10185FC60);
    }
    LOWORD(v35[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934608,  2LL,  "No buffered Motion Cals, no arbitration",  v35,  2);
    char v27 = (uint8_t *)v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const",  "%s\n",  v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  return 1LL;
}

      uint64_t v42 = v39
          * (0.015
           / (exp( (0.9 - sqrtf( (float)((float)((float)(v147 / (float)v37) * (float)(v147 / (float)v37))
                         + (float)((float)(v148 / (float)v37) * (float)(v148 / (float)v37)))
                 + (float)((float)(v146 / (float)v37) * (float)(v146 / (float)v37))))
              / 0.08)
            + 1.0))
          + 0.00000900000032;
      if (*(_BYTE *)(a1 + 512) && !*(_DWORD *)(a1 + 904)) {
        uint64_t v42 = v42 * 0.85;
      }
      *(double *)&uint64_t v163 = v34 / v38;
      *((double *)&v163 + 1) = v35 / v38;
      __int128 v164 = v36 / v38;
      sub_1008F7B2C(a1, (double *)&v163, v42);
      if (*(_BYTE *)(a1 + 512)) {
        sub_1007C0D6C((double *)(a1 + 864), (double *)(a1 + 16));
      }
      *(void *)(a1 + 896) = *a5;
      unint64_t v43 = *(_DWORD *)(a1 + 904);
      uint64_t v44 = __OFSUB__(v43, 1);
      __int128 v45 = v43 - 1;
      if (v45 < 0 == v44)
      {
        *(_DWORD *)(a1 + 904) = v45;
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        uint64_t v46 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "Doing some crude updates to catch up.",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_101860170);
          }
          *(_WORD *)__int128 v153 = 0;
          LODWORD(v138) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Doing some crude updates to catch up.",  v153,  *(void *)&v138);
          __int16 v112 = (char *)v111;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v111);
          if (v112 != buf) {
            free(v112);
          }
        }
      }

      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_101934570 != -1) {
          dispatch_once(&qword_101934570, &stru_1018601B0);
        }
        unint64_t v47 = (os_log_s *)qword_101934578;
        if (os_log_type_enabled((os_log_t)qword_101934578, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v48 = *(void *)(a1 + 64);
          std::string v49 = *(void *)(a1 + 72);
          uint64_t v50 = *(double *)(a1 + 80);
          unint64_t v51 = *(double *)(a1 + 88);
          uint64_t v52 = *(double *)(a1 + 96);
          CFStringRef v53 = *(double *)(a1 + 104);
          int v54 = *a5;
          *(_DWORD *)__int128 buf = 134219520;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 2048;
          __int128 v166 = v50;
          uint64_t v167 = 2048;
          __int128 v168 = v51;
          __int128 v169 = 2048;
          __int128 v170 = v52;
          __int128 v171 = 2048;
          __int128 v172 = v53;
          std::string::size_type v173 = 2048;
          std::string::size_type v174 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f",  buf,  0x48u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934570 != -1) {
            dispatch_once(&qword_101934570, &stru_1018601B0);
          }
          double v55 = *(void *)(a1 + 64);
          int v56 = *(void *)(a1 + 72);
          uint64_t v57 = *(double *)(a1 + 80);
          unint64_t v58 = *(double *)(a1 + 88);
          double v59 = *(double *)(a1 + 96);
          std::string v60 = *(double *)(a1 + 104);
          std::string v61 = *a5;
          *(_DWORD *)__int128 v153 = 134219520;
          *(void *)&v153[4] = v55;
          *(_WORD *)&v153[12] = 2048;
          *(void *)&v153[14] = v56;
          *(_WORD *)&v153[22] = 2048;
          __int128 v154 = v57;
          __int128 v155 = 2048;
          __int128 v156 = v58;
          v157 = 2048;
          __int128 v158 = v59;
          v159 = 2048;
          __int128 v160 = v60;
          CFStringRef v161 = 2048;
          __int128 v162 = v61;
          LODWORD(v138) = 72;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934578,  2LL,  "[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f",  COERCE_DOUBLE(v153),  v138,  v139,  v140,  v141,  v142,  v143);
          int v63 = (char *)v62;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v62);
LABEL_48:
          if (v63 != buf) {
            free(v63);
          }
          return;
        }
      }

      return;
    }
  }

  sub_1007C3400(a1 + 592, (uint64_t)&v149);
  __int128 v145 = sqrt(v151 * v151 + v150 * v150 + v152 * v152);
  std::string v73 = *(double *)(a1 + 896);
  if (v73 > 0.0 && *(double *)(a1 + 176) - v73 > 15.0 && v145 < 0.3)
  {
    sub_1007C34D4(a1 + 592, (uint64_t)buf);
    if (fabs( sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v166 * v166)
         + -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 904) = 10;
      if (!*(_BYTE *)(a1 + 472)) {
        goto LABEL_181;
      }
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      char v92 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_181;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      *(_WORD *)__int128 v153 = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "it's been too long. go through.",  v153,  *(void *)&v138);
      uint64_t v94 = (char *)v93;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, cons t CFTimeInterval &)",  "%s\n",  v93);
LABEL_117:
      if (v94 != buf) {
        free(v94);
      }
      goto LABEL_181;
    }
  }

  if (*(_DWORD *)(a1 + 680) <= (int)((double)*(unint64_t *)(a1 + 600) * 0.5))
  {
LABEL_82:
    sub_1007C0D6C((double *)(a1 + 864), (double *)(a1 + 16));
    return;
  }

  std::string v74 = *(void *)(a1 + 584);
  if (v74) {
    std::string v75 = *(float *)(*(void *)(*(void *)(a1 + 552)
  }
  else {
    std::string v75 = 0.0;
  }
  if (v75 > 0.2)
  {
    sub_1007C0D6C((double *)(a1 + 864), (double *)(a1 + 16));
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      std::string v76 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        std::string v77 = *(void *)(a1 + 864);
        std::string v78 = *(void *)(a1 + 872);
        std::string v79 = *(double *)(a1 + 880);
        *(_DWORD *)__int128 buf = 134218496;
        *(void *)&uint8_t buf[4] = v77;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v78;
        *(_WORD *)&buf[22] = 2048;
        __int128 v166 = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "grabing gravity, %.4f, %.4f, %.4f",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        __int128 v125 = *(void *)(a1 + 864);
        unint64_t v126 = *(void *)(a1 + 872);
        __int128 v127 = *(double *)(a1 + 880);
        *(_DWORD *)__int128 v153 = 134218496;
        *(void *)&v153[4] = v125;
        *(_WORD *)&v153[12] = 2048;
        *(void *)&v153[14] = v126;
        *(_WORD *)&v153[22] = 2048;
        __int128 v154 = v127;
        LODWORD(v138) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "grabing gravity, %.4f, %.4f, %.4f",  COERCE_DOUBLE(v153),  v138,  v139);
        __int128 v129 = (char *)v128;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, co nst CFTimeInterval &)",  "%s\n",  v128);
        if (v129 != buf) {
          free(v129);
        }
      }
    }
  }

  std::string v80 = *(double *)(a1 + 864);
  std::string v81 = *(double *)(a1 + 872);
  std::string v82 = *(double *)(a1 + 880);
  std::string v83 = fabs(v151 * v81 + v150 * v80 + v152 * v82);
  v144 = v145 - v83;
  std::string v84 = *(double *)(a1 + 624);
  uint64_t v85 = *(double *)(a1 + 704);
  uint64_t v86 = *(double *)(a1 + 784);
  __int128 v87 = v81 * v85 + v84 * v80 + v86 * v82;
  __int128 v139 = v84 - v87 * v80;
  v140 = v85 - v87 * v81;
  __int128 v141 = v86 - v87 * v82;
  v142 = v87;
  __int128 v143 = fabs(v141) + fabs(v139) + fabs(v140);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    v88 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134219264;
      *(double *)&uint8_t buf[4] = v150;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v151;
      *(_WORD *)&buf[22] = 2048;
      __int128 v166 = v152;
      uint64_t v167 = 2048;
      __int128 v168 = v145;
      __int128 v169 = 2048;
      __int128 v170 = v83;
      __int128 v171 = 2048;
      __int128 v172 = v145 - v83;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f",  buf,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      *(_DWORD *)__int128 v153 = 134219264;
      *(double *)&v153[4] = v150;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v151;
      *(_WORD *)&v153[22] = 2048;
      __int128 v154 = v152;
      __int128 v155 = 2048;
      __int128 v156 = v145;
      v157 = 2048;
      __int128 v158 = v83;
      v159 = 2048;
      __int128 v160 = v145 - v83;
      LODWORD(v138) = 62;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f",  COERCE_DOUBLE(v153),  v138,  v139,  v140,  v141,  v142);
      __int128 v131 = (char *)v130;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, cons t CFTimeInterval &)",  "%s\n",  v130);
      if (v131 != buf) {
        free(v131);
      }
    }

    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_101860170);
    }
    uint64_t v89 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 134219008;
      *(double *)&uint8_t buf[4] = v139;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v140;
      *(_WORD *)&buf[22] = 2048;
      __int128 v166 = v141;
      uint64_t v167 = 2048;
      __int128 v168 = v142;
      __int128 v169 = 2048;
      __int128 v170 = v143;
      _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      *(_DWORD *)__int128 v153 = 134219008;
      *(double *)&v153[4] = v139;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v140;
      *(_WORD *)&v153[22] = 2048;
      __int128 v154 = v141;
      __int128 v155 = 2048;
      __int128 v156 = v142;
      v157 = 2048;
      __int128 v158 = v143;
      LODWORD(v138) = 52;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f",  COERCE_DOUBLE(v153),  v138,  v139,  v140,  v141);
      __int128 v133 = (char *)v132;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, cons t CFTimeInterval &)",  "%s\n",  v132);
      if (v133 != buf) {
        free(v133);
      }
    }
  }

  v90 = *(void *)(a1 + 584);
  if (v90) {
    char v91 = *(float *)(a1 + 536) / (float)v90;
  }
  else {
    char v91 = 0.0;
  }
  char v106 = v91 <= 1.57079633;
  __int128 v107 = 0.0;
  if (!v106) {
    __int128 v107 = 1.0;
  }
  if (v143 > (v107 * 0.5 + 1.0) * 6.0)
  {
LABEL_131:
    *(_DWORD *)(a1 + 888) = 0;
    return;
  }

  if (v144 >= 0.01 || v143 >= 0.6)
  {
    __int16 v117 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v117;
    if (!v90) {
      goto LABEL_171;
    }
    __int128 v118 = (int *)(a1 + 888);
    __int128 v108 = *(float *)(a1 + 536) / (float)v90;
  }

  else
  {
    if (!v90)
    {
      __int16 v117 = *(_DWORD *)(a1 + 888) + 1;
      *(_DWORD *)(a1 + 888) = v117;
      goto LABEL_171;
    }

    __int128 v108 = *(float *)(a1 + 536) / (float)v90;
    if (v108 > 0.5)
    {
      if (!*(_BYTE *)(a1 + 472)) {
        goto LABEL_181;
      }
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      std::string v109 = (os_log_s *)qword_101934568;
      if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_181;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_101860170);
      }
      *(_WORD *)__int128 v153 = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "===========Skip ahead.",  v153,  *(void *)&v138);
      uint64_t v94 = (char *)v110;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, cons t CFTimeInterval &)",  "%s\n",  v110);
      goto LABEL_117;
    }

    __int128 v118 = (int *)(a1 + 888);
    __int16 v117 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v117;
  }

  if (v108 > 1.0
    && *(float *)(*(void *)(*(void *)(a1 + 552) + (((v90 + *(void *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                + 4 * ((v90 + *(void *)(a1 + 576) - 1) & 0x3FF)) < 0.2)
  {
    sub_1007C34D4(a1 + 592, (uint64_t)buf);
    char v119 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v166 * v166);
    if (fabs(v119 + -1.0) / v119 >= 0.025)
    {
      __int16 v117 = *v118;
    }

    else
    {
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_101934560 != -1) {
          dispatch_once(&qword_101934560, &stru_101860170);
        }
        __int128 v120 = (os_log_s *)qword_101934568;
        if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934560 != -1) {
            dispatch_once(&qword_101934560, &stru_101860170);
          }
          *(_WORD *)__int128 v153 = 0;
          LODWORD(v138) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Skip ahead------.",  v153,  *(void *)&v138);
          __int128 v137 = (char *)v136;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v136);
          if (v137 != buf) {
            free(v137);
          }
        }
      }

      __int16 v117 = *v118 + 2;
      *__int128 v118 = v117;
    }
  }

  *((_DWORD *)__dst + 46) = sub_100922F28((uint64_t)__dst);
  return __dst;
}

      void v4[2] = a2[2];
      *((_BYTE *)v4 + 24) = 1;
      return result;
    }

    char v9 = a2[1];
    if (v9 > 0.0 || v9 == -1.79769313e308)
    {
      if (v5 > result[15])
      {
        int v11 = a2[2] - fmax(v9, 0.0);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        void v15[2] = sub_10099A974;
        void v15[3] = &unk_101863CA8;
        v15[4] = result;
        *(double *)&v15[5] = v5;
        *(double *)&v15[6] = v11;
        char v12 = v15;
LABEL_24:
        double result = (double *)AnalyticsSendEventLazy(@"com.apple.CoreMotion.GyroBiasFit", v12);
      }
    }

    else if (*((_BYTE *)result + 24))
    {
      __dst[0] = _NSConcreteStackBlock;
      __dst[1] = 3221225472LL;
      __dst[2] = sub_10099A6DC;
      __dst[3] = &unk_101820718;
      *(double *)&__dst[4] = v5;
      char v12 = __dst;
      goto LABEL_24;
    }

    unsigned int v13 = *((unsigned __int8 *)v4 + 156);
    BOOL v14 = *((_DWORD *)a2 + 13);
    v4[18] = *(double *)((char *)a2 + 44);
    *((_DWORD *)v4 + 38) = v14;
    if (!v13) {
      *((_BYTE *)v4 + 156) = 1;
    }
    v4[17] = a2[3];
    goto LABEL_28;
  }

  return result;
}

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_pace),  @"pace");
  has = (__int16)self->_has;
  if ((has & 0x2000) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((has & 4) != 0) {
LABEL_15:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrTime),  @"hrTime");
  return v3;
}

  PBDataWriterWriteBOOLField(a3, self->_isStroller, 13LL);
  if ((*(_WORD *)&self->_has & 4) != 0) {
    goto LABEL_29;
  }
}

  *((_BYTE *)a3 + 74) = self->_isStroller;
  *((_WORD *)a3 + 38) |= 0x2000u;
  if ((*(_WORD *)&self->_has & 4) != 0) {
    goto LABEL_29;
  }
}

  *((void *)result + 4) = *(void *)&self->_pace;
  *((_WORD *)result + 38) |= 8u;
  has = (__int16)self->_has;
  if ((has & 0x2000) == 0)
  {
LABEL_14:
    if ((has & 4) == 0) {
      return result;
    }
    goto LABEL_15;
  }

  self->_isStroller = *((_BYTE *)a3 + 74);
  *(_WORD *)&self->_has |= 0x2000u;
  if ((*((_WORD *)a3 + 38) & 4) != 0) {
    goto LABEL_29;
  }
}

  double v19 = 2LL;
LABEL_34:
  int v29 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void **)((char *)v30
  int v31 = v22;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(&v33);
  return v19;
}

        dispatch_once(&qword_101934870, &stru_101865AB8);
        goto LABEL_26;
      }
    }

    else
    {
      [*(id *)(*(void *)(a1 + 2224) + 16) unregister:*(void *)(*(void *)(a1 + 2224) + 8) forNotification:0];
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101865AB8);
      }
      id v5 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 == -1) {
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
  }

        if (!v11) {
          return;
        }
        uint64_t v21 = *(_DWORD *)(a1 + 684);
        if (v21 < 1 || !sub_1009F4C34(a1)) {
          return;
        }
        if (!*(_DWORD *)(a1 + 444))
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          uint64_t v28 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 134349056;
            *(void *)std::string v78 = 0x4014000000000000LL;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "Fence: no reachability, expedite watchdog, %{public}.1lf",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            std::string v67 = 134349056;
            *(void *)char v68 = 0x4014000000000000LL;
            LODWORD(v66) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: no reachability, expedite watchdog, %{public}.1lf",  &v67,  v66);
            double v59 = (uint8_t *)v58;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification & , const CLWifiService_Type::NotificationData &)",  "%s\n",  v58);
            if (v59 != buf) {
              free(v59);
            }
          }

          *(_DWORD *)(a1 + 688) = 2;
          if (((*(uint64_t (**)(void))(**(void **)(a1 + 1768) + 400LL))(*(void *)(a1 + 1768)) & 1) != 0
            || *(_DWORD *)(a1 + 684) != 1)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            int v29 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              __int128 v30 = *(_DWORD *)(a1 + 684);
              int v31 = *(_DWORD *)(a1 + 688);
              double v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 1768) + 400LL))(*(void *)(a1 + 1768));
              *(_DWORD *)__int128 buf = 67240704;
              *(_DWORD *)std::string v78 = v30;
              *(_WORD *)&v78[4] = 1026;
              *(_DWORD *)&v78[6] = v31;
              *(_WORD *)std::string v79 = 1026;
              *(_DWORD *)&v79[2] = v32;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "Fence: skip urgent, watchdog already active, %{public}d,%{public}d, %{public}d",  buf,  0x14u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101866E28);
              }
              double v33 = qword_101934878;
              CFStringRef v34 = *(_DWORD *)(a1 + 684);
              int v35 = *(_DWORD *)(a1 + 688);
              double v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 1768) + 400LL))(*(void *)(a1 + 1768));
              std::string v67 = 67240704;
              *(_DWORD *)char v68 = v34;
              *(_WORD *)&v68[4] = 1026;
              *(_DWORD *)&v68[6] = v35;
              *(_WORD *)std::string v69 = 1026;
              *(_DWORD *)&v69[2] = v36;
              LODWORD(v66) = 20;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v33,  2LL,  "Fence: skip urgent, watchdog already active, %{public}d,%{public}d, %{public}d",  &v67,  v66);
              __int128 v38 = (uint8_t *)v37;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v37);
              if (v38 != buf) {
                free(v38);
              }
            }

            goto LABEL_80;
          }

          goto LABEL_78;
        }

        std::string v22 = *(_DWORD *)(a1 + 688);
        if (v22 <= 1)
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          __int128 v23 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v24 = *(_DWORD *)(a1 + 688);
            *(_DWORD *)__int128 buf = 67240192;
            *(_DWORD *)std::string v78 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %{public}d",  buf,  8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            std::string v60 = *(_DWORD *)(a1 + 688);
            std::string v67 = 67240192;
            *(_DWORD *)char v68 = v60;
            LODWORD(v66) = 8;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %{public}d",  &v67,  v66);
            std::string v62 = (uint8_t *)v61;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification & , const CLWifiService_Type::NotificationData &)",  "%s\n",  v61);
            if (v62 != buf) {
              free(v62);
            }
          }

          char v25 = *(void (**)(void))(**(void **)(a1 + 1768) + 304LL);
          goto LABEL_79;
        }

        if (v21 == 1
          && v22 == 2
          && ((*(uint64_t (**)(void))(**(void **)(a1 + 1768) + 400LL))(*(void *)(a1 + 1768)) & 1) == 0)
        {
          sub_1004F2598();
          if ((sub_1001B9A1C() & 1) == 0)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            std::string v39 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v40 = *(_DWORD *)(a1 + 688);
              *(_DWORD *)__int128 buf = 67240704;
              *(_DWORD *)std::string v78 = v40;
              *(_WORD *)&v78[4] = 1026;
              *(_DWORD *)&v78[6] = 2;
              *(_WORD *)std::string v79 = 2050;
              *(void *)&v79[2] = 0x4014000000000000LL;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "Fence: expedite location watchdog due to empty / error scan , %{public}d, %{public}d, kUrgentWatchdogAct ivation, %{public}.1lf",  buf,  0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101866E28);
              }
              int v63 = *(_DWORD *)(a1 + 688);
              std::string v67 = 67240704;
              *(_DWORD *)char v68 = v63;
              *(_WORD *)&v68[4] = 1026;
              *(_DWORD *)&v68[6] = 2;
              *(_WORD *)std::string v69 = 2050;
              *(void *)&v69[2] = 0x4014000000000000LL;
              LODWORD(v66) = 24;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: expedite location watchdog due to empty / error scan , %{public}d, %{public}d, kUrgentWatchdogAct ivation, %{public}.1lf",  &v67,  v66);
              double v65 = (uint8_t *)v64;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v64);
              if (v65 != buf) {
                free(v65);
              }
            }

  uint64_t v10 = *(void *)(v5 + 56);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A1A90 + 56);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }

  unsigned int v13 = *(void *)(a1 + 48);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A1A90 + 48);
  }
  BOOL v14 = *(unsigned __int8 *)(v13 + 32);
  if (*(_BYTE *)(v13 + 32))
  {
    id v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0) {
      v15 += 9;
    }
    if ((v14 & 4) != 0) {
      BOOL v14 = v15 + 2;
    }
    else {
      BOOL v14 = v15;
    }
  }

  *(_DWORD *)(v13 + 28) = v14;
  uint64_t v4 = (v4 + v14 + 2);
  uint64_t v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_52;
    }
    goto LABEL_46;
  }

  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

  if ((v21 & 0xFF00) != 0)
  {
    if ((v21 & 0x100) != 0)
    {
      __int128 v23 = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a1 + 172) |= 0x100u;
      *(_DWORD *)(a1 + 80) = v23;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x200) != 0)
    {
      uint64_t v24 = *(_DWORD *)(a2 + 84);
      if (v24 >= 5) {
        sub_10125A390();
      }
      *(_DWORD *)(a1 + 172) |= 0x200u;
      *(_DWORD *)(a1 + 84) = v24;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x400) != 0)
    {
      char v25 = *(_DWORD *)(a2 + 88);
      if (v25 >= 5) {
        sub_10125A368();
      }
      *(_DWORD *)(a1 + 172) |= 0x400u;
      *(_DWORD *)(a1 + 88) = v25;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x800) != 0)
    {
      int v26 = *(_DWORD *)(a2 + 92);
      if (v26 >= 5) {
        sub_10125A340();
      }
      *(_DWORD *)(a1 + 172) |= 0x800u;
      *(_DWORD *)(a1 + 92) = v26;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x1000) != 0)
    {
      char v27 = *(_DWORD *)(a2 + 96);
      if (v27 >= 5) {
        sub_10125A318();
      }
      *(_DWORD *)(a1 + 172) |= 0x1000u;
      *(_DWORD *)(a1 + 96) = v27;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x2000) != 0)
    {
      uint64_t v28 = *(_DWORD *)(a2 + 100);
      if (v28 >= 5) {
        sub_10125A2F0();
      }
      *(_DWORD *)(a1 + 172) |= 0x2000u;
      *(_DWORD *)(a1 + 100) = v28;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x8000) != 0)
    {
      *(_DWORD *)(a1 + 172) |= 0x8000u;
      int v29 = *(char **)(a1 + 128);
      if (!v29)
      {
        int v29 = (char *)operator new(0x50uLL);
        *(void *)int v29 = &off_1018697D0;
        *(_OWORD *)(v29 + 8) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(_OWORD *)(v29 + 40) = 0u;
        *(_OWORD *)(v29 + 56) = 0u;
        *((void *)v29 + 9) = 0LL;
        *(void *)(a1 + 128) = v29;
      }

      __int128 v30 = *(void *)(a2 + 128);
      if (!v30) {
        __int128 v30 = *(void *)(qword_1019A1AE0 + 128);
      }
      sub_100A4FCC8((uint64_t)v29, v30);
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }
  }

  if ((v21 & 0xFF0000) != 0)
  {
    if ((v21 & 0x10000) != 0)
    {
      int v31 = *(_DWORD *)(a2 + 136);
      if (v31 >= 5) {
        sub_10125A2C8();
      }
      *(_DWORD *)(a1 + 172) |= 0x10000u;
      *(_DWORD *)(a1 + 136) = v31;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x20000) != 0)
    {
      double v32 = *(_DWORD *)(a2 + 140);
      if (v32 >= 5) {
        sub_10125A2A0();
      }
      *(_DWORD *)(a1 + 172) |= 0x20000u;
      *(_DWORD *)(a1 + 140) = v32;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x40000) != 0)
    {
      double v33 = *(_DWORD *)(a2 + 144);
      if (v33 >= 5) {
        sub_10125A278();
      }
      *(_DWORD *)(a1 + 172) |= 0x40000u;
      *(_DWORD *)(a1 + 144) = v33;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x80000) != 0)
    {
      CFStringRef v34 = *(_DWORD *)(a2 + 148);
      if (v34 >= 5) {
        sub_10125A250();
      }
      *(_DWORD *)(a1 + 172) |= 0x80000u;
      *(_DWORD *)(a1 + 1sub_100019CEC(v39 + 48) = v34;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x100000) != 0)
    {
      int v35 = *(_DWORD *)(a2 + 160);
      if (v35 >= 5) {
        sub_10125A228();
      }
      *(_DWORD *)(a1 + 172) |= 0x100000u;
      *(_DWORD *)(a1 + 160) = v35;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x200000) != 0)
    {
      double v36 = *(void *)(a2 + 152);
      *(_DWORD *)(a1 + 172) |= 0x200000u;
      *(void *)(a1 + 152) = v36;
      uint64_t v21 = *(_DWORD *)(a2 + 172);
    }

    if ((v21 & 0x400000) != 0)
    {
      double v37 = *(_DWORD *)(a2 + 164);
      if (v37 >= 4) {
        sub_10125A200();
      }
      *(_DWORD *)(a1 + 172) |= 0x400000u;
      *(_DWORD *)(a1 + 164) = v37;
    }
  }

  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_10186E0A0);
  }
  char v12 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v13 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)__int128 buf = 67240448;
    double v32 = v3;
    double v33 = 1026;
    CFStringRef v34 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "#dataprotection onKeybagStateChange, lock_state, %{public}d, data_availability, %{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_10186E0A0);
    }
    BOOL v14 = *(_DWORD *)(a1 + 112);
    char v25 = 67240448;
    int v26 = v3;
    char v27 = 1026;
    uint64_t v28 = v14;
    LODWORD(v23) = 14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A48,  2LL,  "#dataprotection onKeybagStateChange, lock_state, %{public}d, data_availability, %{public}d",  &v25,  v23);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  sub_100AF5BEC((void *)(a1 + 16), &v22);
  *(_OWORD *)(a1 + 96) = v22;
  *(void *)(a1 + 112) = v23;
  if (__p)
  {
    char v25 = __p;
    operator delete(__p);
  }

  (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 52),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 64) & 0x1000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 56),  (int)a2,  a4);
  }
  return result;
}

  BOOL v14 = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_BYTE *)(a1 + 26) = v14;
  id v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_20:
  if ((v5 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_30:
  uint64_t v16 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 0x40u;
  *(_DWORD *)(a1 + 28) = v16;
  id v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x80) != 0)
  {
LABEL_22:
    uint64_t v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x80u;
    *(_DWORD *)(a1 + 32) = v10;
    id v5 = *(_DWORD *)(a2 + 44);
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  *(unsigned __int8 *)(v5 + 48),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  size_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    size_t v8 = *(void *)(qword_1019A1CE8 + 16);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  v8,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_hrMin),  @"hrMin");
  has = self->_has;
  if ((*(_WORD *)&has & 0x100) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  PBDataWriterWriteDoubleField(a3, 6LL, self->_hrMax);
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_8:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  *((void *)a3 + 9) = *(void *)&self->_hrMax;
  *((_DWORD *)a3 + 41) |= 0x100u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_8:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  *((void *)result + 11) = *(void *)&self->_hrMin;
  *((_DWORD *)result + 41) |= 0x400u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x100) == 0)
  {
LABEL_7:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  self->_hrMax = *((double *)a3 + 9);
  *(_DWORD *)&self->_has |= 0x100u;
  uint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x200) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

  unsigned int v13 = *(void *)(a1 + 24);
  if (!v13) {
    unsigned int v13 = *(void *)(qword_1019A1E40 + 24);
  }
  BOOL v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC62EC(v13, a2);
  id v15 = (int)v14;
  else {
    uint64_t v16 = 1;
  }
  uint64_t v4 = (v4 + v15 + v16 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0) {
      goto LABEL_46;
    }
    goto LABEL_40;
  }

  id v15 = 33;
LABEL_29:
  if ((id)v13 != [v5 count]) {
    goto LABEL_37;
  }
  if (!v9)
  {
LABEL_41:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018774E8);
    }
    int v17 = (os_log_s *)qword_101934988;
    if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
      return (CLClientKeyPath *)+[CLClientKeyPath nullClientKeyPath](&OBJC_CLASS___CLClientKeyPath, "nullClientKeyPath");
    }
    *(_DWORD *)__int128 buf = 68289282;
    unsigned int v20 = 0;
    uint64_t v21 = 2082;
    std::string v22 = "";
    __int128 v23 = 2114;
    uint64_t v24 = a3;
    int v18 = "{msg%{public}.0s:#Warning creating #CLCKP from clientKey with nil anchor. Returning nullCKP, clientK"
          "ey:%{public, location:escape_only}@}";
    goto LABEL_45;
  }

  uint64_t v16 = v14 - 101;
  if (v16 > 0xB || ((1 << v16) & 0x891) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018774E8);
    }
    int v17 = (os_log_s *)qword_101934988;
    if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
      return (CLClientKeyPath *)+[CLClientKeyPath nullClientKeyPath](&OBJC_CLASS___CLClientKeyPath, "nullClientKeyPath");
    }
    *(_DWORD *)__int128 buf = 68289282;
    unsigned int v20 = 0;
    uint64_t v21 = 2082;
    std::string v22 = "";
    __int128 v23 = 2114;
    uint64_t v24 = a3;
    int v18 = "{msg%{public}.0s:#Warning creating #CLCKP from clientKey with invalid anchor type. Returning nullCKP, "
          "clientKey:%{public, location:escape_only}@}";
    goto LABEL_45;
  }

  if (!v12 || (v15 - 101) <= 0x15 && ((1 << (v15 - 101)) & 0x240811) != 0) {
    return +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:",  v8,  v9);
  }
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018774E8);
  }
  int v17 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 68289282;
    unsigned int v20 = 0;
    uint64_t v21 = 2082;
    std::string v22 = "";
    __int128 v23 = 2114;
    uint64_t v24 = a3;
    int v18 = "{msg%{public}.0s:#Warning creating #CLCKP from clientKey with invalid subIdentity type. Returning nullCK"
          "P, clientKey:%{public, location:escape_only}@}";
LABEL_45:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 0x1Cu);
  }

  return (CLClientKeyPath *)+[CLClientKeyPath nullClientKeyPath](&OBJC_CLASS___CLClientKeyPath, "nullClientKeyPath");
}

      sub_100BFC1C0();
    }

    if (v6 > 91)
    {
      if (v6 == 92) {
        return sub_100BFC010(a1, a2, (unsigned __int8 *)a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }

    else
    {
      if (v6 == 91) {
        return (unsigned __int8 *)sub_100BFC0B0(a1, (char *)a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }

    return sub_100BFC20C(a1, a2, a3);
  }

  return v3;
}

  return v10;
}

  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_1018833A8);
  }
  unsigned int v20 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = *(_DWORD *)(a1 + 32);
    std::string v22 = *(void *)(a1 + 24);
    __int128 v23 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)__int128 buf = 134221312;
    char v68 = v36;
    std::string v69 = 2048;
    std::string v70 = *((void *)&v36 + 1);
    __int16 v71 = 1024;
    std::string v72 = v35;
    std::string v73 = 2048;
    std::string v74 = *((void *)&v35 + 1);
    std::string v75 = 1024;
    std::string v76 = v10;
    std::string v77 = 1024;
    std::string v78 = v11;
    std::string v79 = 1024;
    std::string v80 = v12;
    std::string v81 = 1024;
    std::string v82 = v21;
    std::string v83 = 1024;
    std::string v84 = LODWORD(v37);
    uint64_t v85 = 2048;
    uint64_t v86 = v22;
    __int128 v87 = 2048;
    v88 = *(float *)&v38;
    uint64_t v89 = 2048;
    v90 = *((float *)&v38 + 1);
    char v91 = 2048;
    char v92 = *((float *)&v37 + 1);
    __int128 v93 = 1024;
    uint64_t v94 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "SwimStop,startTime,%f,tier2Time,%f,epochCount,%d,epochTier2,%ld,bufferCnt,%d,bufferedPed,%d,bufferedSwim,%d,count, %d,style,%d,lastTime,%f,angle,%f,vectorMag,%f,yaw,%f,sinceTurn,%d",  buf,  0x72u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_1018833A8);
    }
    uint64_t v24 = *(_DWORD *)(a1 + 32);
    char v25 = *(void *)(a1 + 24);
    int v26 = *(_DWORD *)(a1 + 12);
    std::string v39 = 134221312;
    unint64_t v40 = v36;
    double v41 = 2048;
    uint64_t v42 = *((void *)&v36 + 1);
    unint64_t v43 = 1024;
    uint64_t v44 = v35;
    __int128 v45 = 2048;
    uint64_t v46 = *((void *)&v35 + 1);
    unint64_t v47 = 1024;
    uint64_t v48 = v10;
    std::string v49 = 1024;
    uint64_t v50 = v11;
    unint64_t v51 = 1024;
    uint64_t v52 = v12;
    CFStringRef v53 = 1024;
    int v54 = v24;
    double v55 = 1024;
    int v56 = LODWORD(v37);
    uint64_t v57 = 2048;
    unint64_t v58 = v25;
    double v59 = 2048;
    std::string v60 = *(float *)&v38;
    std::string v61 = 2048;
    std::string v62 = *((float *)&v38 + 1);
    int v63 = 2048;
    std::string v64 = *((float *)&v37 + 1);
    double v65 = 1024;
    unsigned int v66 = v26;
    LODWORD(v29) = 114;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "SwimStop,startTime,%f,tier2Time,%f,epochCount,%d,epochTier2,%ld,bufferCnt,%d,bufferedPed,%d,bufferedSwim,%d,count, %d,style,%d,lastTime,%f,angle,%f,vectorMag,%f,yaw,%f,sinceTurn,%d",  COERCE_DOUBLE(&v39),  v29,  v30,  v31,  v32,  v34,  (_DWORD)v35,  DWORD2(v35),  (_DWORD)v36,  *((double *)&v36 + 1),  v37,  v38);
    uint64_t v28 = (uint8_t *)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLSwimWorkoutStopModel::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v27);
    if (v28 != buf) {
      free(v28);
    }
  }

  return *(int *)(a1 + 32) >= 118 && (!(_DWORD)v31 || v32 >= 1);
}

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 60),  v4,  a4);
  if ((*(_DWORD *)(v5 + 72) & 0x2000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(v5 + 64),  v4,  a4);
  }
  return result;
}

  double result = sub_100A112B4(v26);
  if (HIBYTE(v29))
  {
    if ((_BYTE)v29) {
      return pthread_mutex_unlock(v28);
    }
    else {
      return (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24LL))(v27);
    }
  }

  return result;
}

  int v11 = *(_DWORD *)(a2 + 20);
  v3 |= 8u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 20) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "isFallDetectionFeatureEnabled", *(_BYTE *)(a1 + 69));
  id v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "externalMachineType", *(_DWORD *)(a1 + 168));
  id v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 72), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "averagePace", *(float *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 72));
  id v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  char v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 88) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }

  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "wristOrientation", *(_DWORD *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xDu);
  if ((*(_WORD *)(v3 + 88) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  }
  return result;
}

  char v27 = *(_BYTE *)(a2 + 43);
  *(_WORD *)(a1 + 48) |= 0x200u;
  *(_BYTE *)(a1 + 43) = v27;
  double v19 = *(_WORD *)(a2 + 48);
  if ((v19 & 0x100) == 0)
  {
LABEL_19:
    if ((v19 & 0x10) == 0) {
      goto LABEL_20;
    }
LABEL_30:
    int v29 = *(_BYTE *)(a2 + 38);
    *(_WORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 38) = v29;
    if ((*(_WORD *)(a2 + 48) & 0x400) == 0) {
      return a1;
    }
    goto LABEL_21;
  }

  int v26 = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 108) |= 0x80u;
  *(_BYTE *)(a1 + 104) = v26;
  if ((*(_BYTE *)(a2 + 108) & 0x10) != 0)
  {
LABEL_18:
    double v19 = *(_DWORD *)(a2 + 92);
    *(_BYTE *)(a1 + 108) |= 0x10u;
    *(_DWORD *)(a1 + 92) = v19;
  }

  id v15 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 56) = v15;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      return result;
    }
LABEL_30:
    int v17 = *(_BYTE *)(a2 + 64);
    *(_WORD *)(result + 68) = v3 | 0x2000;
    *(_BYTE *)(result + 64) = v17;
    return result;
  }

  PB::TextFormatter::format(this, "referenceFrame", *(_DWORD *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 1) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xDu);
  if ((*(_WORD *)(v3 + 68) & 0x2000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0xEu);
  }
  return result;
}

  char v9 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 100) = v3;
  *(void *)(result + 8) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "negPeakRightHalfWidth", *(_DWORD *)(a1 + 48));
  id v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 100), 0xAu);
  BOOL v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x40) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }

  unsigned int v13 = *(_DWORD *)(a2 + 88);
  v6 |= 0x10u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 88) = v13;
  id v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  int v18 = *(void *)(a2 + 152);
  v8 |= 8u;
  *(_WORD *)(a1 + 204) = v8;
  *(void *)(a1 + 152) = v18;
  uint64_t v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  size_t v8 = *(_BYTE *)(a2 + 65);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 65) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "isAudio", *(_BYTE *)(a1 + 57));
  id v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 64), 0x67u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 76) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "loggedAtEpoch", *(_BYTE *)(a1 + 88));
  id v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0x68u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  uint64_t v10 = *(_DWORD *)(a2 + 100);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 100) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "jLG", *(void *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 76), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "isMAPDetected", *(_BYTE *)(a1 + 148));
  int v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x100) == 0)
  {
LABEL_11:
    if ((v11 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  unsigned int v13 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 96) = v3;
  *(void *)(result + 40) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "isTriggerCluster", *(_BYTE *)(a1 + 94));
  id v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x12Fu);
  uint64_t v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  int v18 = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 192) |= 1u;
  *(void *)(a1 + 80) = v18;
  int v11 = *(_WORD *)(a2 + 192);
  if ((v11 & 8) == 0)
  {
LABEL_16:
    if ((v11 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "globalReferenceFrame", *(_DWORD *)(a1 + 184));
  id v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  unsigned int v20 = *(_DWORD *)(a2 + 108);
  *(_WORD *)(a1 + 116) |= 0x200u;
  *(_DWORD *)(a1 + 108) = v20;
  char v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 1) == 0)
  {
LABEL_13:
    if ((v9 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 96));
  char v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 8u);
  size_t v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_14;
    }
LABEL_30:
    double result = PB::Writer::write(this, *(float *)(v3 + 84), 0xAu);
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 60);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 64) = v3;
  *(_BYTE *)(a1 + 60) = v7;
  uint64_t v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_30:
    double result = *(float *)(a2 + 8);
    *(_WORD *)(a1 + 64) = v3 | 1;
    *(float *)(a1 + 8) = result;
    return result;
  }

  PB::TextFormatter::format(this, "runVo2max", *(float *)(a1 + 48));
  id v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "weightKG", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 0xDu);
  if ((*(_WORD *)(v3 + 64) & 1) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 8), 0xEu);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 68) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 60));
  id v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 40), 0xDu);
  if ((*(_WORD *)(v3 + 68) & 0x40) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 36), 0xEu);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 32), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "numberOfSamples", *(_DWORD *)(a1 + 44));
  id v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 72), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "isOnSphere", *(_DWORD *)(a1 + 72));
  size_t v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 116), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0) {
    goto LABEL_29;
  }
LABEL_5:
  if ((v4 & 0x20) != 0) {
LABEL_6:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 80), 5u);
LABEL_7:
  id v5 = *(float **)(v3 + 8);
  uint64_t v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    double result = PB::Writer::write(this, v7, 6u);
  }

  size_t v8 = *(float **)(v3 + 32);
  char v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    double result = PB::Writer::write(this, v10, 7u);
  }

  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 104), 8u);
    int v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0) {
        goto LABEL_16;
      }
      goto LABEL_33;
    }
  }

  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 92), 9u);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 24) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant", *(_DWORD *)(a1 + 36));
  id v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  char v12 = *(_BYTE *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 88) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "heightRef", *(float *)(a1 + 64));
  id v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  int v11 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 84) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  id v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 64), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  double result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 80) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeMedian", *(double *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }

  std::string v22 = *(void *)(a2 + 16);
  v6 |= 1u;
  *(_DWORD *)(a1 + 152) = v6;
  *(void *)(a1 + 16) = v22;
  if ((*(_DWORD *)(a2 + 152) & 0x80000) != 0)
  {
LABEL_16:
    char v9 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 152) = v6 | 0x80000;
    *(_DWORD *)(a1 + 140) = v9;
  }

  uint64_t v24 = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 100) |= 0x400u;
  *(_BYTE *)(a1 + 96) = v24;
  unsigned int v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 0x200) != 0) {
    goto LABEL_29;
  }
LABEL_17:
  if ((v13 & 0x100) != 0)
  {
LABEL_18:
    BOOL v14 = *(_DWORD *)(a2 + 88);
    *(_WORD *)(a1 + 100) |= 0x100u;
    *(_DWORD *)(a1 + 88) = v14;
  }

  return a1;
}

        if (PB::Reader::placeMark(this, v63, v20, v21)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*v22 + 16LL))(v22, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v63);
LABEL_97:
          uint64_t v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        *(_WORD *)(a1 + 100) |= 1u;
        int v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7LL || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v26);
        goto LABEL_88;
      case 4u:
        *(_WORD *)(a1 + 100) |= 2u;
        char v27 = *((void *)this + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7LL || v27 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + 32) = *(void *)(*(void *)this + v27);
        goto LABEL_88;
      case 5u:
        *(_WORD *)(a1 + 100) |= 0x80u;
        uint64_t v28 = *((void *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7LL || v28 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + 80) = *(void *)(*(void *)this + v28);
        goto LABEL_88;
      case 6u:
        *(_WORD *)(a1 + 100) |= 0x20u;
        int v29 = *((void *)this + 1);
        if (v29 > 0xFFFFFFFFFFFFFFF7LL || v29 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + 64) = *(void *)(*(void *)this + v29);
        goto LABEL_88;
      case 7u:
        *(_WORD *)(a1 + 100) |= 0x40u;
        __int128 v30 = *((void *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7LL || v30 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + 72) = *(void *)(*(void *)this + v30);
        goto LABEL_88;
      case 8u:
        *(_WORD *)(a1 + 100) |= 4u;
        int v31 = *((void *)this + 1);
        if (v31 > 0xFFFFFFFFFFFFFFF7LL || v31 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v31);
        goto LABEL_88;
      case 9u:
        *(_WORD *)(a1 + 100) |= 8u;
        double v32 = *((void *)this + 1);
        if (v32 > 0xFFFFFFFFFFFFFFF7LL || v32 + 8 > *((void *)this + 2)) {
          goto LABEL_54;
        }
        *(void *)(a1 + sub_100019CEC(v39 + 48) = *(void *)(*(void *)this + v32);
        goto LABEL_88;
      case 0xAu:
        *(_WORD *)(a1 + 100) |= 0x10u;
        double v33 = *((void *)this + 1);
        if (v33 <= 0xFFFFFFFFFFFFFFF7LL && v33 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v33);
LABEL_88:
          *((void *)this + 1) += 8LL;
        }

        else
        {
LABEL_54:
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_97;
      case 0xBu:
        *(_WORD *)(a1 + 100) |= 0x400u;
        CFStringRef v34 = *((void *)this + 1);
        if (v34 >= *((void *)this + 2))
        {
          double v37 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          int v35 = v34 + 1;
          double v36 = *(unsigned __int8 *)(*(void *)this + v34);
          *((void *)this + 1) = v35;
          double v37 = v36 != 0;
        }

        *(_BYTE *)(a1 + 96) = v37;
        goto LABEL_97;
      case 0xCu:
        *(_WORD *)(a1 + 100) |= 0x200u;
        __int128 v38 = *((void *)this + 1);
        std::string v39 = *((void *)this + 2);
        unint64_t v40 = *(void *)this;
        if (v38 <= 0xFFFFFFFFFFFFFFF5LL && v38 + 10 <= v39)
        {
          double v41 = 0;
          uint64_t v42 = 0;
          unint64_t v43 = 0LL;
          do
          {
            uint64_t v44 = v38 + 1;
            *((void *)this + 1) = v38 + 1;
            __int128 v45 = *(_BYTE *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0) {
              goto LABEL_92;
            }
            v41 += 7;
            __int128 v38 = v44;
            BOOL v14 = v42++ > 8;
          }

          while (!v14);
LABEL_79:
          LODWORD(v43) = 0;
          goto LABEL_92;
        }

        int v54 = 0;
        double v55 = 0;
        unint64_t v43 = 0LL;
        if (v39 <= v38) {
          std::string v39 = *((void *)this + 1);
        }
        while (2)
        {
          if (v39 == v38)
          {
            LODWORD(v43) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v56 = v38 + 1;
            uint64_t v57 = *(_BYTE *)(v40 + v38);
            *((void *)this + 1) = v56;
            v43 |= (unint64_t)(v57 & 0x7F) << v54;
            if (v57 < 0)
            {
              v54 += 7;
              __int128 v38 = v56;
              BOOL v14 = v55++ > 8;
              if (v14) {
                goto LABEL_79;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v43) = 0;
            }
          }

          break;
        }

  char v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v9;
  uint64_t v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_30:
    double result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }

  PB::TextFormatter::format(this, "pace", *(double *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 86), 0xDu);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 0xEu);
  }
  return result;
}

  uint64_t v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 76) = v10;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "gravityShift", *(float *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 52), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  int v11 = *(_BYTE *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 80) = v11;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "hostWakeCount", *(_DWORD *)(a1 + 60));
  id v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 78), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  BOOL v14 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(void *)(result + 8) = v14;
  uint64_t v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "reversedTimestampCounts", *(_DWORD *)(a1 + 40));
  id v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  id v15 = *(_DWORD *)(a2 + 92);
  v3 |= 0x1000u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 92) = v15;
  uint64_t v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      return result;
    }
LABEL_30:
    int v17 = *(_BYTE *)(a2 + 96);
    *(_WORD *)(result + 100) = v3 | 0x2000;
    *(_BYTE *)(result + 96) = v17;
    return result;
  }

  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 72));
  id v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x2000) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 92));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xDu);
  if ((*(_WORD *)(v3 + 100) & 0x2000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 96), 0xEu);
  }
  return result;
}

  PB::TextFormatter::format(this, "rollMeanAbs", *(float *)(a1 + 32));
  id v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 92), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }

  unsigned int v13 = *(void *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 116) = v3;
  *(void *)(result + 72) = v13;
  uint64_t v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 56));
  id v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 48), 0xBu);
  uint64_t v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  uint64_t v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "rBoresightY", *(float *)(a1 + 68));
  id v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 68), 0xCu);
  uint64_t v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  double result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 80) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "covariancePreMeasurement11", *(float *)(a1 + 40));
  id v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 84), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }

  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 120) = v3;
  *(double *)(a1 + 8) = result;
  uint64_t v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 120) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }

  PB::TextFormatter::format(this, "swingVelocityY", *(double *)(a1 + 96));
  id v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x1000) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v5 & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 112));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(double *)(v3 + 16), 0xDu);
  if ((*(_WORD *)(v3 + 120) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 0xEu);
  }
  return result;
}

  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  id v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 96), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }

  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 32) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

  PB::TextFormatter::format(this, "rotationRateGravityProjectionMax", *(double *)(a1 + 56));
  id v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 104), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }

    *(void *)(a1 + 176) = *(void *)(v7 + 8);
    uint64_t v21 = *(double *)(v1 + 112);
    std::string v22 = *(double *)(v1 + 16);
    if (v21 >= v22) {
      __int128 v23 = v1 + 96;
    }
    else {
      __int128 v23 = v1;
    }
    if (v8 != v2)
    {
      if (v21 >= v22) {
        uint64_t v24 = v1;
      }
      else {
        uint64_t v24 = v1 + 96;
      }
      char v25 = v1 + 192;
      int v26 = v1;
      while (1)
      {
        char v27 = v25;
        uint64_t v28 = v25 + 96;
        if (v28 == v2) {
          break;
        }
        int v29 = v26 + 288;
        __int128 v30 = *(double *)(v27 + 112);
        int v31 = *(double *)(v27 + 16);
        double v32 = *(double *)(v24 + 16);
        double v33 = *(double *)(v23 + 16);
        if (v31 >= v32) {
          CFStringRef v34 = v24;
        }
        else {
          CFStringRef v34 = v27;
        }
        if (v30 < v33) {
          int v29 = v23;
        }
        if (v30 < v32) {
          uint64_t v24 = v28;
        }
        if (v31 >= v33) {
          __int128 v23 = v27;
        }
        if (v30 >= v31)
        {
          uint64_t v24 = v34;
          __int128 v23 = v29;
        }

        char v25 = v27 + 192;
        int v26 = v27;
        if (v27 + 192 == v2) {
          goto LABEL_53;
        }
      }

      int v35 = *(double *)(v27 + 16);
    }

        if (v14 <= a2)
        {
          int v18 = v14 + 12;
        }

        else
        {
          id v5 = v14;
          int v18 = v7;
        }
      }

      else
      {
        char v12 = v5 - 12;
        while (1)
        {
          v12 -= 12LL;
          if (v12 == v7) {
            break;
          }
          double result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
          if ((_DWORD)result)
          {
            unint64_t v40 = *(_DWORD *)(v7 + 8);
            double v33 = *(void *)v7;
            unsigned int v13 = *(void *)v12;
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
            *(void *)uint64_t v7 = v13;
            *(_DWORD *)(v12 + 8) = v40;
            *(void *)char v12 = v33;
            ++v11;
            goto LABEL_13;
          }
        }

        __int128 v23 = v7 + 12;
        double result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
        if ((result & 1) == 0)
        {
          while ((uint64_t *)v23 != v10)
          {
            double result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
            if ((_DWORD)result)
            {
              unint64_t v43 = *(_DWORD *)(v23 + 8);
              double v36 = *(void *)v23;
              uint64_t v24 = *v10;
              *(_DWORD *)(v23 + 8) = *(_DWORD *)(v5 - 4);
              *(void *)__int128 v23 = v24;
              v23 += 12LL;
              *(_DWORD *)(v5 - 4) = v43;
              *uint64_t v10 = v36;
              goto LABEL_44;
            }

            v23 += 12LL;
          }

          return result;
        }

void sub_10005847C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34, char a35, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  *(void *)(v40 + 80) = v41;
  _Unwind_Resume(exception_object);
}

BOOL sub_100058520(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 128) & 4) == 0) {
    return 0LL;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_1019A0980 + 16);
  }
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  int v3 = *((char *)v2 + 23);
  if (v3 < 0)
  {
    if (v2[1] != 20) {
      return 0LL;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }

  else if (v3 != 20)
  {
    return 0LL;
  }

  uint64_t v4 = (uint64_t *)*v2;
  uint64_t v5 = v2[1];
  int v6 = *((_DWORD *)v2 + 4);
  return v4 == (uint64_t *)0x6C616E7265746E49LL && v5 == 0x6F4D746E65696C43LL && v6 == 1852795252;
}

uint64_t sub_1000585B4()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsPedestrianFenceEnabled", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100058674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10005868C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = (uint64_t *)result;
  *(_BYTE *)(result + 124) = 1;
  if (*(_BYTE *)(result + 175))
  {
    if (!a3) {
      return result;
    }
  }

  else
  {
    double result = sub_10005A33C(result, a2);
    if (!a3) {
      return result;
    }
  }

  unint64_t v5 = v4[10];
  if (v5 >= v4[11])
  {
    double result = sub_10005B8D4(v4 + 9);
  }

  else
  {
    sub_1000865CC(v4[10]);
    double result = v5 + 136;
    v4[10] = v5 + 136;
  }

  v4[10] = result;
  return result;
}

void sub_100058714(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_10005871C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  int v11 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = v38;
    unsigned int v13 = "";
    if (v38)
    {
      BOOL v14 = operator new(0x28uLL);
      int v29 = v14;
      __int128 v30 = xmmword_1012C8460;
      *BOOL v14 = 0u;
      v14[1] = 0u;
      *(void *)((char *)v14 + 29) = 0LL;
      sub_10000AE6C((uint64_t)v37, v14);
      if (v30 >= 0) {
        unsigned int v13 = (const char *)&v29;
      }
      else {
        unsigned int v13 = (const char *)v29;
      }
    }

    sub_1000946B0(a3, &__p);
    if (SHIBYTE(v28) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)__int128 buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)double v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = v13;
    __int16 v33 = 2082;
    CFStringRef v34 = p_p;
    __int16 v35 = 1026;
    int v36 = a6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager::startTrigger, TriggerUUID:%{public, location:escape_on ly}s, ScanActivity:%{public, location:escape_only}s, isInMotionTrigger:%{public}hhd}",  buf,  0x2Cu);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
    if (v12 && SHIBYTE(v30) < 0) {
      operator delete(v29);
    }
  }

  *(_BYTE *)a1 = a3;
  *(void *)(a1 + 104) = *a4;
  if ((_DWORD)a3 == 1) {
    *(void *)(a1 + 112) = *a4;
  }
  *(_WORD *)(a1 + 177) = a6 | 0x100;
  sub_10005A964(a1, a2);
  sub_1001031A0(a2, buf);
  LODWORD(__p) = 0;
  sub_100018E34((int *)&__p);
  uint64_t v16 = sub_100017338((ssize_t)&__p);
  double v19 = *(void **)buf;
  uint64_t v18 = *(void *)v32;
  if (!v32[8])
  {
    uint64_t v18 = v17;
    double v19 = (void *)v16;
  }

  int v20 = *(unsigned __int8 *)(a1 + 158);
  *(void *)(a1 + 142) = v19;
  *(void *)(a1 + 150) = v18;
  if (!v20) {
    *(_BYTE *)(a1 + 158) = 1;
  }
  sub_100019D7C((unsigned int *)&__p);
  (*(void (**)(void, uint64_t, uint64_t, void *, uint64_t))(**(void **)(a1 + 184) + 16LL))( *(void *)(a1 + 184),  a2,  a3,  a4,  a5);
  if (*(_BYTE *)a1 == 1 && *(_BYTE *)(a1 + 176))
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    uint64_t v21 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v32 = 2082;
      *(void *)&v32[2] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager::startTrigger, setting medium confidence due to motion}",  buf,  0x12u);
    }

    uint64_t v22 = *(void *)(a1 + 184);
    __int128 v23 = operator new(4uLL);
    *(void *)__int128 buf = v23;
    *__int128 v23 = 2;
    *(void *)&v32[8] = v23 + 1;
    *(void *)double v32 = v23 + 1;
    uint64_t v24 = operator new(4uLL);
    std::string __p = v24;
    *uint64_t v24 = 1;
    char v27 = v24 + 1;
    uint64_t v28 = v24 + 1;
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v22 + 80LL))(v22, buf, &__p);
    if (__p)
    {
      char v27 = __p;
      operator delete(__p);
    }

    if (*(void *)buf)
    {
      *(void *)double v32 = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

void sub_100058AA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100058B10( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int v27 = a5;
  unsigned int v28 = a3;
  sub_100063AA8(a6);
  if ((*(_BYTE *)(a2 + 128) & 4) == 0) {
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0980 + 16);
  }
  if ((*(_BYTE *)(v10 + 44) & 4) != 0)
  {
    int v20 = *(__int128 **)(v10 + 16);
    if (*((char *)v20 + 23) < 0)
    {
      sub_1010DD48C(&__str, *(void **)v20, *((void *)v20 + 1));
    }

    else
    {
      __int128 v21 = *v20;
      __str.__r_.__value_.__l.__cap_ = *((void *)v20 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
    }
  }

  else
  {
LABEL_5:
    sub_1010DDBC0(&__str, "");
  }

  *(_DWORD *)(a6 + 80) |= 0x10u;
  int v11 = *(std::string **)(a6 + 32);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v11 = (std::string *)operator new(0x18uLL);
    v11->__r_.__value_.__r.__words[0] = 0LL;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a6 + 32) = v11;
  }

  std::string::operator=(v11, &__str);
  unsigned int v12 = v28;
  if (!sub_10006419C(v28))
  {
    uint64_t v22 = "::CLMicroLocationProto::TriggerRequestType_IsValid(value)";
    int v23 = 20735;
    uint64_t v24 = "set_requesttype";
    goto LABEL_39;
  }

  *(_DWORD *)(a6 + 80) |= 0x100u;
  *(_DWORD *)(a6 + 56) = v12;
  if (!sub_1000641A8(a4))
  {
    uint64_t v22 = "::CLMicroLocationProto::TriggerReason_IsValid(value)";
    int v23 = 20781;
    uint64_t v24 = "set_reason";
LABEL_39:
    __assert_rtn(v24, "microlocation.pb.h", v23, v22);
  }

  *(_DWORD *)(a6 + 80) |= 0x400u;
  *(_DWORD *)(a6 + 72) = a4;
  sub_10010137C(&v28, &v29);
  *(_DWORD *)(a6 + 80) |= 8u;
  unsigned int v13 = *(std::string **)(a6 + 16);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unsigned int v13 = (std::string *)operator new(0x18uLL);
    v13->__r_.__value_.__r.__words[0] = 0LL;
    v13->__r_.__value_.__l.__size_ = 0LL;
    v13->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a6 + 16) = v13;
  }

  std::string::operator=(v13, &v29);
  sub_1001031A0(a2, v30);
  if (v30[16])
  {
    memset(&v25, 0, sizeof(v25));
    if ((sub_100013090((uint64_t)v30, &v25) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v29);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
      sub_1000139B0((uint64_t)&v29);
    }

    *(_DWORD *)(a6 + 80) |= 0x40u;
    BOOL v14 = *(std::string **)(a6 + 48);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      BOOL v14 = (std::string *)operator new(0x18uLL);
      v14->__r_.__value_.__r.__words[0] = 0LL;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      *(void *)(a6 + sub_100019CEC(v39 + 48) = v14;
    }

    std::string::operator=(v14, &v25);
  }

  char v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 88LL))(*(void *)(a1 + 184));
  *(_DWORD *)(a6 + 80) |= 4u;
  *(_BYTE *)(a6 + 28) = v15;
  unsigned int v16 = v27;
  if (!sub_1000641A8(v27)) {
    __assert_rtn( "set_requeststatus",  "microlocation.pb.h",  20758,  "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)");
  }
  *(_DWORD *)(a6 + 80) |= 0x200u;
  *(_DWORD *)(a6 + 60) = v16;
  sub_1001013A0((int *)&v27, &v29);
  *(_DWORD *)(a6 + 80) |= 0x20u;
  uint64_t v17 = *(std::string **)(a6 + 40);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v17 = (std::string *)operator new(0x18uLL);
    v17->__r_.__value_.__r.__words[0] = 0LL;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a6 + 40) = v17;
  }

  std::string::operator=(v17, &v29);
  char v18 = *(_BYTE *)(a1 + 124);
  *(_DWORD *)(a6 + 80) |= 0x80u;
  *(_BYTE *)(a6 + 29) = v18;
  if (*(_BYTE *)(a1 + 158))
  {
    memset(&v25, 0, sizeof(v25));
    if ((sub_100013090(a1 + 142, &v25) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v29);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101818CB0;
      sub_1000139B0((uint64_t)&v29);
    }

    *(_DWORD *)(a6 + 80) |= 0x800u;
    double v19 = *(std::string **)(a6 + 64);
    if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      double v19 = (std::string *)operator new(0x18uLL);
      v19->__r_.__value_.__r.__words[0] = 0LL;
      v19->__r_.__value_.__l.__size_ = 0LL;
      v19->__r_.__value_.__l.__cap_ = 0LL;
      *(void *)(a6 + 64) = v19;
    }

    std::string::operator=(v19, &v25);
  }

void sub_100058F10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, std::bad_cast a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10008809C(v29);
  _Unwind_Resume(a1);
}

void sub_100058F98(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
}

void sub_10005900C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100059020(unsigned __int8 *a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationTriggerManager: requestRecording",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    LOWORD(v23[0]) = 0;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationTriggerManager: requestRecording",  v23,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestRecording(const CLMicroLocationPr oto::RecordingEvent &)",  "%s\n",  v22);
  }

  else {
    unsigned int v5 = 0;
  }
  unsigned int v26 = v5;
  id v6 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (v26 == 5) {
    goto LABEL_13;
  }
  int v7 = *a1;
  if (v7 == 1)
  {
LABEL_33:
    unint64_t v15 = *((void *)a1 + 7);
    if (v15 >= *((void *)a1 + 8))
    {
      uint64_t v16 = sub_10005B8D4((uint64_t *)a1 + 6);
    }

    else
    {
      sub_1000865CC(*((void *)a1 + 7));
      uint64_t v16 = v15 + 136;
      *((void *)a1 + 7) = v15 + 136;
    }

    *((void *)a1 + 7) = v16;
    unsigned int v12 = 2;
    unsigned int v26 = 2;
    goto LABEL_37;
  }

  if (v7 != 2)
  {
    if (!a1[176])
    {
      *(void *)__int128 buf = sub_10010323C(a2);
      sub_10005871C((uint64_t)a1, a2, 2LL, buf, (uint64_t)v6, 0);
      if (v26 == 2)
      {
        unsigned int v12 = 2;
        goto LABEL_37;
      }

      goto LABEL_13;
    }

    goto LABEL_33;
  }

  (*(void (**)(void, uint64_t, void))(**((void **)a1 + 23) + 24LL))(*((void *)a1 + 23), a2, 0LL);
  unsigned int v26 = 1;
  if ((*(_BYTE *)(a2 + 129) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v8 = *(void *)(a2 + 88);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A0980 + 88);
  }
  if ((*(_BYTE *)(v8 + 44) & 4) != 0)
  {
    unsigned int v13 = *(__int128 **)(v8 + 16);
    if (*((char *)v13 + 23) < 0)
    {
      sub_1010DD48C(buf, *(void **)v13, *((void *)v13 + 1));
    }

    else
    {
      __int128 v14 = *v13;
      uint64_t v30 = *((void *)v13 + 2);
      *(_OWORD *)__int128 buf = v14;
    }
  }

  else
  {
LABEL_17:
    sub_1010DDBC0(buf, "");
  }

  int v25 = 1;
  sub_10010137C(&v25, v23);
  sub_1001013A0((int *)&v26, __p);
  char v9 = (*(uint64_t (**)(void))(**((void **)a1 + 23) + 88LL))(*((void *)a1 + 23));
  if (*((_DWORD *)a1 + 24) == 1 && (uint64_t v10 = (uint64_t *)*((void *)a1 + 3)) != 0LL)
  {
    while (*((_DWORD *)v10 + 8) != 1)
    {
      uint64_t v10 = (uint64_t *)*v10;
      if (!v10) {
        goto LABEL_22;
      }
    }

    char v11 = sub_1000585B4();
  }

  else
  {
LABEL_22:
    char v11 = 0;
  }

  sub_10009120C(a2, (uint64_t)v23, (uint64_t)buf, (uint64_t)__p, v9, v11, (uint64_t)v6);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(*(void **)buf);
  }
  unsigned int v12 = v26;
LABEL_37:
  sub_100058B10((uint64_t)a1, a2, 1u, 0, v12, (uint64_t)v23);
  uint64_t v17 = *((void *)a1 + 23);
  int v25 = 0;
  sub_100018E34(&v25);
  __p[0] = (void *)sub_100017338((ssize_t)&v25);
  __p[1] = v18;
  double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
  sub_100058F98(__p, (uint64_t)v23, (uint64_t)buf, Current_1);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v17 + 96LL))(v17, buf);
  sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v31);
  sub_100019D7C((unsigned int *)&v25);
  uint64_t v20 = v26;
  sub_10008809C((wireless_diagnostics::google::protobuf::MessageLite *)v23);
  return v20;
}

void sub_100059448( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  *(void *)(v38 + 56) = v39;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000594D8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 24);
    if (v4)
    {
      while (*((_DWORD *)v4 + 8) != 1)
      {
        uint64_t v4 = (uint64_t *)*v4;
        if (!v4) {
          goto LABEL_5;
        }
      }

      goto LABEL_6;
    }
  }

LABEL_5:
  if (sub_10005977C())
  {
LABEL_6:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    unsigned int v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      __int16 v20 = 1026;
      LODWORD(p_p) = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager::requestMotion - setting fence, onlyIfNotRunning:%{public}hhd}",  buf,  0x18u);
    }

    (*(void (**)(void, uint64_t))(**(void **)(a1 + 184) + 48LL))(*(void *)(a1 + 184), a2);
    return 1LL;
  }

  if (*(_DWORD *)(a1 + 96))
  {
    __int16 v14 = 31075;
    std::string __p = *(void **)"LowLatency";
    uint64_t v7 = 10LL;
    char v8 = 10;
  }

  else
  {
    qmemcpy(&__p, "Legacy", 6);
    uint64_t v7 = 6LL;
    char v8 = 6;
  }

  *((_BYTE *)&__p + v7) = 0;
  char v15 = v8;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  char v9 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    for (uint64_t i = *(uint64_t **)(a1 + 24); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 8) == 1) {
        break;
      }
    }

    int v11 = sub_10005977C();
    *(_DWORD *)__int128 buf = 68289794;
    int v17 = 0;
    __int16 v18 = 2082;
    double v19 = "";
    __int16 v20 = 2082;
    p_p = &__p;
    __int16 v22 = 1026;
    BOOL v23 = i != 0LL;
    __int16 v24 = 1026;
    int v25 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager::requestMotion, denied requestMotion, Mode:%{public, lo cation:escape_only}s, isLowLatencyPolicyAvailable:%{public}hhd, PedestrianFenceWhenSpectatingEnabled:%{public}hhd}",  buf,  0x28u);
    int v12 = v15;
    *(_BYTE *)(a1 + 176) = 0;
    if (v12 < 0) {
      operator delete(__p);
    }
  }

  else
  {
    *(_BYTE *)(a1 + 176) = 0;
  }

  return 0LL;
}

    __int16 v14 = 0;
LABEL_6:
    std::operator+<char>(&v26, "com.apple.microlocation.", a2);
    char v15 = std::string::append(&v26, ".triggers");
    uint64_t v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    int64_t cap = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      int v17 = __p;
    }
    else {
      int v17 = (void **)__p[0];
    }
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100091CB8;
    v23[3] = &unk_10181CA80;
    v23[4] = a4;
    v23[5] = a2;
    v23[6] = a1;
    v23[7] = a5;
    v23[8] = a3;
    __int16 v24 = a6;
    int v25 = v14;
    AnalyticsSendEventLazy(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17), v23);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    return;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CAA0);
  }
  __int16 v18 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "CLMicroLocationCoreAnalyticsPublishHelper, sendTriggerEvent, not sending event because sending to CoreAnalytics is disabled",  (uint8_t *)__p,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CAA0);
    }
    LOWORD(v26.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "CLMicroLocationCoreAnalyticsPublishHelper, sendTriggerEvent, not sending event because sending to CoreAnalytics is disabled",  &v26,  2);
    __int16 v22 = (void **)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLMicroLocationCoreAnalyticsPublishHelper::sendTriggerEvent(const CLMicroLocationProto::RecordingEvent &, const std::string &, const std::string &, const std::string &, const std::string &, const BOOL)",  "%s\n",  v21);
    if (v22 != __p) {
      free(v22);
    }
  }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFFCuLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFFCuLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  *a3 = result;
  a3[1] = v5;
  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

  v1[3] = v2;
  int v3 = qword_1019A0C18;
  if (!qword_1019A0C18)
  {
    double result = sub_1001D0A48(result);
    int v3 = qword_1019A0C18;
  }

  v1[4] = v3;
  return result;
}

  v1[3] = v2;
  int v3 = qword_1019A0CE0;
  if (!qword_1019A0CE0)
  {
    double result = sub_1001D0A48(result);
    int v3 = qword_1019A0CE0;
  }

  v1[13] = v3;
  uint64_t v4 = qword_1019A0CE8;
  if (!qword_1019A0CE8)
  {
    double result = sub_1001D0A48(result);
    uint64_t v4 = qword_1019A0CE8;
  }

  v1[17] = v4;
  return result;
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xF70uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xF70uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xF68uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xF68uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFD0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFD0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1400uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1400uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  if (-[TRANSITPbRegionPreloadManifest marketsCount](self, "marketsCount"))
  {
    [a3 clearMarkets];
    id v6 = -[TRANSITPbRegionPreloadManifest marketsCount](self, "marketsCount");
    if (v6)
    {
      uint64_t v7 = v6;
      for (uint64_t i = 0LL; i != v7; ++i)
        objc_msgSend(a3, "addMarkets:", -[TRANSITPbRegionPreloadManifest marketsAtIndex:](self, "marketsAtIndex:", i));
    }
  }

  int v17 = 0u;
  __int16 v18 = 0u;
  char v15 = 0u;
  uint64_t v16 = 0u;
  markets = self->_markets;
  char v9 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( markets,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
  if (v9)
  {
    uint64_t v10 = v9;
    int v11 = *(void *)v16;
    do
    {
      for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(markets);
        }
        unsigned int v13 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)i) copyWithZone:a3];
        [v6 addMarkets:v13];
      }

      uint64_t v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( markets,  "countByEnumeratingWithState:objects:count:",  &v15,  v19,  16LL);
    }

    while (v10);
  }

  return v6;
}

  int v12 = 0u;
  unsigned int v13 = 0u;
  uint64_t v10 = 0u;
  int v11 = 0u;
  unsigned int v5 = (void *)*((void *)a3 + 3);
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    char v8 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        -[TRANSITPbRegionPreloadManifest addMarkets:]( self,  "addMarkets:",  *(void *)(*((void *)&v10 + 1) + 8LL * (void)i));
      }

      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  if (-[TRANSITPbLocationFingerprint macsCount](self, "macsCount"))
  {
    [a3 clearMacs];
    id v6 = -[TRANSITPbLocationFingerprint macsCount](self, "macsCount");
    if (v6)
    {
      uint64_t v7 = v6;
      for (uint64_t i = 0LL; i != v7; ++i)
        objc_msgSend(a3, "addMacs:", -[TRANSITPbLocationFingerprint macsAtIndex:](self, "macsAtIndex:", i));
    }
  }

  if (-[TRANSITPbLocationFingerprint modesCount](self, "modesCount"))
  {
    [a3 clearModes];
    char v9 = -[TRANSITPbLocationFingerprint modesCount](self, "modesCount");
    if (v9)
    {
      uint64_t v10 = v9;
      for (uint64_t j = 0LL; j != v10; ++j)
      {
        -[TRANSITPbLocationFingerprint modesAtIndex:](self, "modesAtIndex:", j);
        objc_msgSend(a3, "addModes:");
      }
    }
  }

  PBRepeatedUInt64Copy(v7 + 8, &self->_macs);
  PBRepeatedDoubleCopy(v8 + 32, &self->_modes);
  return v8;
}

  id v6 = (char *)[a3 macsCount];
  if (v6)
  {
    uint64_t v7 = v6;
    for (uint64_t i = 0LL; i != v7; ++i)
      -[TRANSITPbLocationFingerprint addMacs:](self, "addMacs:", [a3 macsAtIndex:i]);
  }

  char v9 = (char *)[a3 modesCount];
  if (v9)
  {
    uint64_t v10 = v9;
    for (uint64_t j = 0LL; j != v10; ++j)
    {
      [a3 modesAtIndex:j];
      -[TRANSITPbLocationFingerprint addModes:](self, "addModes:");
    }
  }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFA0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFA0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  if (v12 < 0.0) {
    int v12 = v12 + 360.0;
  }
  unsigned int v13 = v5 + v12;
  __int16 v14 = v9 + v5 + v12 + -360.0;
  if (vabdd_f64(v14, v8) < 180.0) {
    __int16 v14 = v8;
  }
  if (v13 > v6 && v14 < v5) {
    return 0LL;
  }
  return v4[3] >= a2[1] && v4[1] <= a2[3];
}

  if (v13 < 0.0) {
    unsigned int v13 = v13 + 360.0;
  }
  __int16 v14 = v6 + v13;
  char v15 = v10 + v6 + v13 + -360.0;
  if (vabdd_f64(v15, v9) < 180.0) {
    char v15 = v9;
  }
  if (v14 > v7 && v15 < v6) {
    return 1LL;
  }
LABEL_11:
  if (a2[7] < a3[5] || a2[5] > a3[7]) {
    return 1LL;
  }
  return sub_10085ADFC( *(_DWORD *)a1,  *(void **)(a1 + 8),  (uint64_t)a2,  *(_DWORD *)(a1 + 16),  *(__int128 ***)(a1 + 24),  (uint64_t)a3,  0,  0,  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int8 ***)(a1 + 56));
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFA0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFA0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  *((_DWORD *)a3 + 10) = self->_operationType;
  if (-[CLCompanionSyncAuthObject vectorClocksCount](self, "vectorClocksCount"))
  {
    [a3 clearVectorClocks];
    id v6 = -[CLCompanionSyncAuthObject vectorClocksCount](self, "vectorClocksCount");
    if (v6)
    {
      uint64_t v7 = v6;
      for (uint64_t i = 0LL; i != v7; ++i)
        objc_msgSend( a3,  "addVectorClocks:",  -[CLCompanionSyncAuthObject vectorClocksAtIndex:](self, "vectorClocksAtIndex:", i));
    }
  }

  if (-[CLCompanionSyncAuthObject interestZonesCount](self, "interestZonesCount"))
  {
    [a3 clearInterestZones];
    char v9 = -[CLCompanionSyncAuthObject interestZonesCount](self, "interestZonesCount");
    if (v9)
    {
      uint64_t v10 = v9;
      for (uint64_t j = 0LL; j != v10; ++j)
        objc_msgSend( a3,  "addInterestZones:",  -[CLCompanionSyncAuthObject interestZonesAtIndex:](self, "interestZonesAtIndex:", j));
    }
  }

  int v12 = (char)self->_has;
  if ((v12 & 2) != 0)
  {
    *((_DWORD *)a3 + 8) = self->_correctiveCompensationMask;
    *((_BYTE *)a3 + 60) |= 2u;
    int v12 = (char)self->_has;
  }

  if ((v12 & 0x10) != 0)
  {
    *((_BYTE *)a3 + 57) = self->_suppressShowingInSettings;
    *((_BYTE *)a3 + 60) |= 0x10u;
  }

  *((_DWORD *)v7 + 10) = self->_operationType;
  std::string v29 = 0u;
  uint64_t v30 = 0u;
  unsigned int v27 = 0u;
  char v28 = 0u;
  vectorClocks = self->_vectorClocks;
  uint64_t v10 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( vectorClocks,  "countByEnumeratingWithState:objects:count:",  &v27,  v32,  16LL);
  if (v10)
  {
    int v11 = v10;
    int v12 = *(void *)v28;
    do
    {
      for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v12) {
          objc_enumerationMutation(vectorClocks);
        }
        __int16 v14 = [*(id *)(*((void *)&v27 + 1) + 8 * (void)i) copyWithZone:a3];
        [v7 addVectorClocks:v14];
      }

      int v11 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( vectorClocks,  "countByEnumeratingWithState:objects:count:",  &v27,  v32,  16LL);
    }

    while (v11);
  }

  int v25 = 0u;
  unsigned int v26 = 0u;
  BOOL v23 = 0u;
  __int16 v24 = 0u;
  interestZones = self->_interestZones;
  uint64_t v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( interestZones,  "countByEnumeratingWithState:objects:count:",  &v23,  v31,  16LL);
  if (v16)
  {
    int v17 = v16;
    __int16 v18 = *(void *)v24;
    do
    {
      for (uint64_t j = 0LL; j != v17; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v24 != v18) {
          objc_enumerationMutation(interestZones);
        }
        __int16 v20 = [*(id *)(*((void *)&v23 + 1) + 8 * (void)j) copyWithZone:a3];
        [v7 addInterestZones:v20];
      }

      int v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( interestZones,  "countByEnumeratingWithState:objects:count:",  &v23,  v31,  16LL);
    }

    while (v17);
  }

  __int128 v21 = (char)self->_has;
  if ((v21 & 2) != 0)
  {
    *((_DWORD *)v7 + 8) = self->_correctiveCompensationMask;
    *((_BYTE *)v7 + 60) |= 2u;
    __int128 v21 = (char)self->_has;
  }

  if ((v21 & 0x10) != 0)
  {
    *((_BYTE *)v7 + 57) = self->_suppressShowingInSettings;
    *((_BYTE *)v7 + 60) |= 0x10u;
  }

  return v7;
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    v2 += 2;
  }

  while (v2 != v3);
  uint64_t v16 = *(void *)(a1 + 328);
  for (uint64_t i = *(void *)(a1 + 336); i != v16; uint64_t i = sub_10000AE14(i - 16))
    ;
  *(void *)(a1 + 336) = v16;
  sub_10097726C((uint64_t **)(a1 + 240), (uint64_t)&v24);
  sub_10097726C((uint64_t **)(a1 + 264), (uint64_t)&v24);
  if (!*(_BYTE *)(a1 + 216))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101862CF0);
    }
    int v17 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v18 = *(void *)(a1 + 256);
      double v19 = *(void *)(a1 + 280);
      *(_DWORD *)__int128 buf = 134349312;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101862CF0);
      }
      __int16 v20 = *(void *)(a1 + 256);
      __int128 v21 = *(void *)(a1 + 280);
      uint64_t v30 = 134349312;
      uint64_t v31 = v20;
      double v32 = 2050;
      __int16 v33 = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu",  &v30,  22,  v24,  v25,  v26);
      BOOL v23 = (char *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeoMapFeatureRoadGeometryBuffer::updateRoadDataObjectsWithNewlyBufferedData()",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

  sub_100008390((uint64_t)&v24, v25);
  if (HIBYTE(v29))
  {
LABEL_32:
    if ((_BYTE)v29) {
      pthread_mutex_unlock(v28);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v27 + 24LL))(v27);
    }
  }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xF68uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xF68uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFA0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFA0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  _DWORD v7[2] = -[ALSLocation copyWithZone:](self->_location, "copyWithZone:", a3);
  return v7;
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    LOBYTE(v3) = 0;
  }

  return (char)v3;
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF8uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF8uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10187C0D8);
  }
  char v9 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(_DWORD *)(a1 + 284);
    int v11 = *(float *)(a1 + 292);
    int v12 = *(float *)(a1 + 296);
    unsigned int v13 = *(float *)(a1 + 300);
    __int16 v14 = *(float *)(a1 + 304);
    char v15 = *(float *)(a1 + 308);
    uint64_t v16 = *(float *)(a1 + 312);
    int v17 = *(float *)(a1 + 316);
    __int16 v18 = *(float *)(a1 + 320);
    double v19 = *(_DWORD *)(a1 + 324);
    __int16 v20 = *(float *)(a1 + 328);
    __int128 v21 = *(unsigned __int8 *)(a1 + 332);
    __int16 v22 = *(_DWORD *)(a1 + 288);
    BOOL v23 = *(unsigned __int8 *)(a1 + 340);
    __int16 v24 = *(unsigned __int8 *)(a1 + 341);
    int v25 = *(unsigned __int8 *)(a1 + 342);
    unsigned int v26 = *(float *)(a1 + 336);
    *(_DWORD *)__int128 buf = 67113216;
    std::string v62 = v10;
    int v63 = 2048;
    std::string v64 = v11;
    double v65 = 2048;
    unsigned int v66 = v12;
    std::string v67 = 2048;
    char v68 = v13;
    std::string v69 = 2048;
    std::string v70 = v14;
    __int16 v71 = 2048;
    std::string v72 = v15;
    std::string v73 = 2048;
    std::string v74 = v16;
    std::string v75 = 2048;
    std::string v76 = v17;
    std::string v77 = 2048;
    std::string v78 = v18;
    std::string v79 = 1024;
    std::string v80 = v19;
    std::string v81 = 2048;
    std::string v82 = v20;
    std::string v83 = 1024;
    std::string v84 = v21;
    uint64_t v85 = 1024;
    uint64_t v86 = v22;
    __int128 v87 = 1024;
    v88 = v23;
    uint64_t v89 = 1024;
    v90 = v24;
    char v91 = 1024;
    char v92 = v25;
    __int128 v93 = 2048;
    uint64_t v94 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Received stored user info from SPU, gender, %d, height(m), %f, weight(kg), %f, vo2max, %f, age, %f, hrmin, %f, hrm ax, %f, hronset, %f, pal, %f, condition, %d, runVo2max, %f,betaBlockerUse, %d, biologicalSex, %d, isAgeSet, %d, is HeightSet, %d, isWeightSet, %d, adaptiveExerciseMinuteThreshold, %f",  buf,  0x90u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10187C0D8);
    }
    char v28 = *(_DWORD *)(a1 + 284);
    std::string v29 = *(float *)(a1 + 292);
    uint64_t v30 = *(float *)(a1 + 296);
    uint64_t v31 = *(float *)(a1 + 300);
    double v32 = *(float *)(a1 + 304);
    __int16 v33 = *(float *)(a1 + 308);
    CFStringRef v34 = *(float *)(a1 + 312);
    __int16 v35 = *(float *)(a1 + 316);
    int v36 = *(float *)(a1 + 320);
    double v37 = *(_DWORD *)(a1 + 324);
    uint64_t v38 = *(float *)(a1 + 328);
    uint64_t v39 = *(unsigned __int8 *)(a1 + 332);
    uint64_t v40 = *(_DWORD *)(a1 + 288);
    uint64_t v41 = *(unsigned __int8 *)(a1 + 340);
    uint64_t v42 = *(unsigned __int8 *)(a1 + 341);
    unint64_t v43 = *(unsigned __int8 *)(a1 + 342);
    uint64_t v44 = *(float *)(a1 + 336);
    LODWORD(vsub_100019CEC(v39 + 48) = 67113216;
    HIDWORD(vsub_100019CEC(v39 + 48) = v28;
    *(_WORD *)std::string v49 = 2048;
    *(double *)&void v49[2] = v29;
    *(_WORD *)&v49[10] = 2048;
    *(double *)&v49[12] = v30;
    *(_WORD *)&v49[20] = 2048;
    *(double *)&v49[22] = v31;
    *(_WORD *)&v49[30] = 2048;
    *(_WORD *)uint64_t v50 = 2048;
    *(double *)&v50[2] = v33;
    *(_WORD *)&v50[10] = 2048;
    LODWORD(v51) = HIDWORD(v34);
    WORD2(v51) = 2048;
    HIWORD(v51) = LOWORD(v35);
    LOWORD(v52) = 1024;
    HIWORD(v52) = v37;
    LOWORD(v53) = 1024;
    HIWORD(v53) = v39;
    *(_DWORD *)int v54 = v40;
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = v41;
    double v55 = 1024;
    int v56 = v42;
    uint64_t v57 = 1024;
    unint64_t v58 = v43;
    double v59 = 2048;
    std::string v60 = v44;
    LODWORD(v47) = 144;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Received stored user info from SPU, gender, %d, height(m), %f, weight(kg), %f, vo2max, %f, age, %f, hrmin, %f, hrm ax, %f, hronset, %f, pal, %f, condition, %d, runVo2max, %f,betaBlockerUse, %d, biologicalSex, %d, isAgeSet, %d, is HeightSet, %d, isWeightSet, %d, adaptiveExerciseMinuteThreshold, %f",  &v48,  v47,  v48,  *(double *)v49,  *(double *)&v49[8],  *(double *)&v49[16],  *(double *)&v49[24],  v32,  *(double *)v50,  *(_DWORD *)&v50[8],  v51,  *(void *)&v35 >> 16,  LODWORD(v36),  v52,  LODWORD(v38),  v53,  *(double *)v54);
    uint64_t v46 = (uint8_t *)v45;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionCoprocessor::visitStoredUserInfo(const CMMotionCoprocessorReply::StoredUserInfo *)",  "%s\n",  v45);
    if (v46 != buf) {
      free(v46);
    }
  }

  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16LL))(a1 + 176);
  *(_BYTE *)(a1 + 593) = *(_DWORD *)(a1 + 284);
  *(_BYTE *)(a1 + 594) = *(_DWORD *)(a1 + 288);
  *(void *)(a1 + 600) = *(void *)v3;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 300);
  *(_OWORD *)(v3 + 324) = *(_OWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 320);
  *(_BYTE *)(a1 + 595) = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 328);
  *(_BYTE *)(a1 + 596) = *(_BYTE *)(a1 + 332);
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 336);
  *(_BYTE *)(a1 + 597) = *(_BYTE *)(a1 + 340) | (2 * *(_BYTE *)(a1 + 341)) | (4 * *(_BYTE *)(a1 + 342));
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 24LL))(a1 + 176);
  return sub_1006DD65C(a1, 4LL, v4, 60LL);
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF8uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF8uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF8uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF8uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFFCuLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFFCuLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFD0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFD0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFD8uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFD8uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFD0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFD0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF8uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF8uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    uint64_t v10 = 40.0;
    return v10 * a2;
  }

  int v11 = 0LL;
  while (a3
        - *(double *)(*(void *)(v7 + (((unint64_t)(v6 + v11) >> 5) & 0x7FFFFFFFFFFFFF8LL))
                    + 16LL * (v6 + v11)) < a2)
  {
    if (v4 == ++v11)
    {
      LODWORD(v11) = 0;
      break;
    }
  }

  sub_100F2B49C( a3,  a2,  (uint64_t)a1,  (double *)&v13,  (double *)&v14,  (double *)&v13 + 1,  (double *)&v14 + 1,  v15,  v11,  v5);
  uint64_t v10 = (*(double *)&v14 * 3.0
       + *(double *)&v13 * 0.0
       + *((double *)&v13 + 1) * 5.0
       + *((double *)&v14 + 1) * 40.0
       + v15[0] * 40.0)
      / 100.0;
  return v10 * a2;
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10188E1B8);
  }
  uint64_t v7 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100F57510((unsigned int *)a1, __p);
    char v8 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
       ? __p
       : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CELL_LOC: override to, %s", (uint8_t *)&buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10188E1B8);
    }
    char v9 = qword_101934A78;
    sub_100F57510((unsigned int *)a1, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p___int128 buf = &buf;
    }
    else {
      p___int128 buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    unsigned int v13 = 136315138;
    __int16 v14 = p_buf;
    int v11 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v9,  2LL,  "CELL_LOC: override to, %s",  (const char *)&v13);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCell::overrideUarfcnPsc(int, int, int, int)",  "%s\n",  (const char *)v11);
    if (v11 != __p) {
      free(v11);
    }
  }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFF0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFF0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

  sessionId = self->_sessionId;
  if (sessionId) {
    [a3 setSessionId:sessionId];
  }
}

  void v8[4] = -[NSData copyWithZone:](self->_sessionId, "copyWithZone:", a3);
  return v8;
}

  if (*((void *)a3 + 4)) {
    -[ALCMWorkoutEvent setSessionId:](self, "setSessionId:");
  }
}

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0x1000uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0x1000uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFC0uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFC0uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

    unsigned int v13 = v12 >> 3;
    __int16 v14 = v12 >> 3 < -1;
    char v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    int v17 = -(v16 >> 1);
    __int16 v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    __int16 v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }

    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }

  __int128 v21 = a1[2];
  __int16 v22 = (v21 - a1[1]) >> 3;
  BOOL v23 = a1[3];
  __int16 v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&int v54 = operator new(0xFD8uLL);
      sub_1000EC960(a1, &v54);
      return;
    }

    *(void *)&int v54 = operator new(0xFD8uLL);
    sub_1000ECA74((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    __int128 v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    int v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        uint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      CFStringRef v34 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      char v8 = v35;
      std::string v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8LL;
        }

        while (v50);
      }

void sub_100059758( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005977C()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsPedestrianFenceWhenSpectatingEnabled",  0x8000100u,  kCFAllocatorNull);
  unsigned int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  int v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_100059838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100059850(uint64_t a1)
{
  *(_BYTE *)(a1 + 176) = 1;
  if (*(_BYTE *)a1 == 1)
  {
    uint64_t v1 = *(void *)(a1 + 184);
    BOOL v2 = operator new(4uLL);
    BOOL v7 = v2;
    *BOOL v2 = 2;
    uint64_t v8 = v2 + 1;
    char v9 = v2 + 1;
    int v3 = operator new(4uLL);
    std::string __p = v3;
    *int v3 = 1;
    unint64_t v5 = v3 + 1;
    id v6 = v3 + 1;
    (*(void (**)(uint64_t, void **, void **))(*(void *)v1 + 80LL))(v1, &v7, &__p);
    if (__p)
    {
      unint64_t v5 = __p;
      operator delete(__p);
    }

    if (v7)
    {
      uint64_t v8 = v7;
      operator delete(v7);
    }
  }

void sub_1000598F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100059924(uint64_t result)
{
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t sub_10005992C(uint64_t a1, int a2, unsigned int a3)
{
  if (!*(_BYTE *)a1) {
    return 0LL;
  }
  if (*(_BYTE *)a1 == 1
    && *(_DWORD *)(a1 + 96) == 1
    && !*(_BYTE *)(a1 + 176)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 184) + 88LL))(*(void *)(a1 + 184)))
  {
    (*(void (**)(void, void))(**(void **)(a1 + 184) + 48LL))(*(void *)(a1 + 184), 0LL);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  id v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLMicroLocationTriggerManager: stopTrigger, Reason:%{public}d}",  buf,  0x18u);
  }

  *(_OWORD *)__int128 buf = *(_OWORD *)(a1 + 48);
  *(void *)&uint8_t buf[16] = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + sub_100019CEC(v39 + 48) = 0LL;
  sub_10005BB78((void **)(a1 + 48));
  *(void *)(a1 + sub_100019CEC(v39 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  memset(v15, 0, sizeof(v15));
  uint64_t v16 = v15;
  sub_10005B848((void ***)&v16);
  *(_BYTE *)a1 = 0;
  BOOL v7 = *(void (****)(void))(a1 + 56);
  uint64_t v8 = *(void (****)(void))(a1 + 48);
  if (v7 != v8)
  {
    char v9 = v7 - 17;
    uint64_t v10 = v7 - 17;
    do
    {
      int v11 = *v10;
      v10 -= 17;
      (*v11)(v9);
      BOOL v12 = v9 == v8;
      char v9 = v10;
    }

    while (!v12);
  }

  *(void *)(a1 + 56) = v8;
  if (*(_BYTE *)(a1 + 178)) {
    *(_BYTE *)(a1 + 178) = 0;
  }
  if (*(_BYTE *)(a1 + 141)) {
    *(_BYTE *)(a1 + 141) = 0;
  }
  if (*(_BYTE *)(a1 + 158)) {
    *(_BYTE *)(a1 + 158) = 0;
  }
  if (a2) {
    uint64_t v13 = sub_100059B70(a1, (uint64_t *)buf, a3);
  }
  else {
    uint64_t v13 = 0LL;
  }
  v15[0] = (void **)buf;
  sub_10005B848(v15);
  return v13;
}

void sub_100059B58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_100059B70(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    if (!*(_BYTE *)(a1 + 1)) {
      return 0LL;
    }
    if (*(_BYTE *)(a1 + 124) || *(_BYTE *)(a1 + 176))
    {
      uint64_t v6 = a1 + 48;
      return 0LL;
    }

    char v9 = 1;
    do
    {
      if ((v9 & 1) != 0)
      {
        CFAbsoluteTime Current_1 = j__CFAbsoluteTimeGetCurrent_1();
        sub_10005871C(a1, v3, 2LL, &Current_1, 0LL, 0);
        sub_100058B10(a1, v3, 1u, a3, 0, (uint64_t)v18);
        uint64_t v10 = *(void *)(a1 + 184);
        int v17 = 0;
        sub_100018E34(&v17);
        *(void *)&__int128 v20 = sub_100017338((ssize_t)&v17);
        *((void *)&v20 + 1) = v11;
        double v12 = j__CFAbsoluteTimeGetCurrent_1();
        sub_100058F98(&v20, (uint64_t)v18, (uint64_t)v21, v12);
        (*(void (**)(uint64_t, _BYTE *))(*(void *)v10 + 96LL))(v10, v21);
        sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)v22);
        p_CFAbsoluteTime Current_1 = (unsigned int *)&v17;
      }

      else
      {
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 184) + 24LL))( *(void *)(a1 + 184),  v3,  0LL);
        sub_100058B10(a1, v3, 1u, a3, 1u, (uint64_t)v18);
        uint64_t v14 = *(void *)(a1 + 184);
        LODWORD(Current_1) = 0;
        sub_100018E34((int *)&Current_1);
        *(void *)&__int128 v20 = sub_100017338((ssize_t)&Current_1);
        *((void *)&v20 + 1) = v15;
        double v16 = j__CFAbsoluteTimeGetCurrent_1();
        sub_100058F98(&v20, (uint64_t)v18, (uint64_t)v21, v16);
        (*(void (**)(uint64_t, _BYTE *))(*(void *)v14 + 96LL))(v14, v21);
        sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)v22);
        p_CFAbsoluteTime Current_1 = (unsigned int *)&Current_1;
      }

      sub_100019D7C(p_Current_1);
      sub_10008809C((wireless_diagnostics::google::protobuf::MessageLite *)v18);
      char v9 = 0;
      v3 += 136LL;
    }

    while (v3 != v4);
  }

  return 1LL;
}

void sub_100059D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100059DDC(uint64_t a1, int a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = "No";
    v17[0] = 68289282;
    v17[1] = 0;
    __int16 v18 = 2082;
    double v19 = "";
    if (a2) {
      unint64_t v5 = "Yes";
    }
    __int16 v20 = 2082;
    __int128 v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager: setSpectatingEnabled, spectatingEnabled:%{public, loca tion:escape_only}s}",  (uint8_t *)v17,  0x1Cu);
  }

  *(_BYTE *)(a1 + 1) = a2;
  if ((a2 & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    BOOL v7 = *(void (****)(void))(a1 + 48);
    uint64_t v6 = *(void (****)(void))(a1 + 56);
    if (v6 != v7)
    {
      uint64_t v8 = v6 - 17;
      char v9 = v6 - 17;
      do
      {
        uint64_t v10 = *v9;
        v9 -= 17;
        (*v10)(v8);
        BOOL v11 = v8 == v7;
        uint64_t v8 = v9;
      }

      while (!v11);
    }

    *(void *)(a1 + 56) = v7;
    if (*(_BYTE *)(a1 + 178)) {
      *(_BYTE *)(a1 + 178) = 0;
    }
    *(_BYTE *)(a1 + 124) = 0;
    if (*(_BYTE *)(a1 + 175)) {
      *(_BYTE *)(a1 + 175) = 0;
    }
    uint64_t v13 = *(void (****)(void))(a1 + 72);
    double v12 = *(void (****)(void))(a1 + 80);
    if (v12 != v13)
    {
      uint64_t v14 = v12 - 17;
      uint64_t v15 = v12 - 17;
      do
      {
        double v16 = *v15;
        v15 -= 17;
        (*v16)(v14);
        BOOL v11 = v14 == v13;
        uint64_t v14 = v15;
      }

      while (!v11);
    }

    *(void *)(a1 + 80) = v13;
  }

BOOL sub_100059F70(uint64_t a1)
{
  return *(_BYTE *)(a1 + 178) && *(_BYTE *)(a1 + 177) != 0;
}

uint64_t sub_100059F90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_100059F98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

BOOL sub_100059FA0(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  BOOL v7 = sub_10001A7B8((void *)(a1 + 8), a2);
  if (!v7)
  {
    uint64_t v10 = a2;
    *((_DWORD *)sub_10005BBEC(v6, a2, (uint64_t)&unk_1012CF090, &v10) + 8) = *a3;
    if (!*(_DWORD *)(a1 + 96))
    {
      char v9 = *(uint64_t **)(a1 + 24);
      if (v9)
      {
        while (*((_DWORD *)v9 + 8) != 1)
        {
          char v9 = (uint64_t *)*v9;
          if (!v9) {
            return v7 == 0LL;
          }
        }

        if (sub_1000585B4())
        {
          *(_DWORD *)(a1 + 96) = 1;
          (*(void (**)(void))(**(void **)(a1 + 184) + 56LL))(*(void *)(a1 + 184));
        }
      }
    }
  }

  return v7 == 0LL;
}

BOOL sub_10005A06C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  unint64_t v5 = sub_10001A7B8((void *)(a1 + 8), a2);
  if (v5)
  {
    sub_10005BE44(v4, a2);
    if (*(_DWORD *)(a1 + 96) == 1)
    {
      uint64_t v6 = *(uint64_t **)(a1 + 24);
      if (v6)
      {
        while (*((_DWORD *)v6 + 8) != 1)
        {
          uint64_t v6 = (uint64_t *)*v6;
          if (!v6) {
            goto LABEL_6;
          }
        }
      }

      else
      {
LABEL_6:
        if ((sub_10005977C() & 1) == 0)
        {
          *(_DWORD *)(a1 + 96) = 0;
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181A190);
          }
          BOOL v7 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Stopping motion based triggers", buf, 2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181A190);
            }
            v10[0] = 0;
            char v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Stopping motion based triggers",  v10,  2);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLMicroLocationTriggerManager::removePolicy(const boost::uuids::uuid &)",  "%s\n",  v9);
          }

          (*(void (**)(void))(**(void **)(a1 + 184) + 64LL))(*(void *)(a1 + 184));
        }
      }
    }

    if (!*(void *)(a1 + 32) && *(_BYTE *)a1) {
      (*(void (**)(void))(**(void **)(a1 + 184) + 40LL))(*(void *)(a1 + 184));
    }
  }

  return v5 != 0LL;
}

BOOL sub_10005A28C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 1;
}

void sub_10005A29C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_100007008();
    }
    int64_t v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v6 = (char *)sub_100037038(v3, a2);
    BOOL v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0LL];
    char v9 = &v6[16 * v8];
    BOOL v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }

      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }

    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10) {
      operator delete(v10);
    }
  }

uint64_t sub_10005A33C(uint64_t a1, uint64_t a2)
{
  if (!v14)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    uint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Localization trigger does not have a valid trigger UUID",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      v11[0] = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Localization trigger does not have a valid trigger UUID",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID(const CLMicroLocationProto::RecordingEvent &)",  "%s\n",  v10);
    }
  }

  *(_DWORD *)__int128 buf = 0;
  sub_100018E34((int *)buf);
  uint64_t v4 = sub_100017338((ssize_t)buf);
  uint64_t v7 = v13[0];
  uint64_t v6 = v13[1];
  if (!v14)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
  }

  int v8 = *(unsigned __int8 *)(a1 + 175);
  *(void *)(a1 + 159) = v7;
  *(void *)(a1 + 167) = v6;
  if (!v8) {
    *(_BYTE *)(a1 + 175) = 1;
  }
  return sub_100019D7C((unsigned int *)buf);
}

void sub_10005A528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10005A544(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      BOOL v2 = (_BYTE *)a1;
      unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
      goto LABEL_6;
    }

    return 255LL;
  }

  unint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 255LL;
  }
  BOOL v2 = *(_BYTE **)a1;
LABEL_6:
  if (v3 >= 0x2D) {
    unint64_t v3 = 45LL;
  }
  uint64_t v4 = &v2[v3];
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  do
  {
    if (*v5 == 109)
    {
      uint64_t v7 = &_mh_execute_header.magic + 1;
      while (v7 != 45)
      {
        if (&v5[v7] == v4) {
          goto LABEL_18;
        }
        int v8 = v5[v7];
        int v9 = aMiloInternalLe[v7++];
        if (v8 != v9) {
          goto LABEL_10;
        }
      }

      uint64_t v6 = v5;
    }

LABEL_63:
      ++v28;
    }

    while (v28 != v27);
LABEL_71:
    if (v29 != v27 && v29 == v11) {
      return 3LL;
    }
  }

  uint64_t v33 = 30LL;
  if (v1 < 0x1E) {
    uint64_t v33 = v1;
  }
  if (v33)
  {
    CFStringRef v34 = &v11[v33];
    __int16 v35 = v11;
    int v36 = v34;
    do
    {
      if (*v35 == 73)
      {
        uint64_t v37 = &_mh_execute_header.magic + 1;
        while (v37 != 30)
        {
          if (&v35[v37] == v34) {
            goto LABEL_87;
          }
          int v38 = v35[v37];
          int v39 = aInternalclient_2[v37++];
          if (v38 != v39) {
            goto LABEL_79;
          }
        }

        int v36 = v35;
      }

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  __int16 v22 = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 228) |= 0x100000u;
  *(void *)(a1 + 152) = v22;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x200000) == 0)
  {
LABEL_48:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_65;
  }

  *(void *)(v146 + 8) = v142;
  v149 = sub_1001D2D84(qword_1019A0CF0);
  __int128 v150 = *((void *)v145 + 415);
  unint64_t v151 = qword_1019A0B40;
  if (!qword_1019A0B40)
  {
    v149 = sub_1001D0A48(v149);
    unint64_t v151 = qword_1019A0B40;
  }

  *(void *)(v150 + 8) = v151;
  uint64_t v152 = qword_1019A0CF0;
  if (!qword_1019A0CF0)
  {
    v149 = sub_1001D0A48(v149);
    uint64_t v152 = qword_1019A0CF0;
  }

  *(void *)(v150 + 16) = v152;
  __int128 v153 = (void *)qword_1019A0D10;
  __int128 v154 = *((void *)v135 + 416);
  if (v154)
  {
    *(void *)(qword_1019A0D10 + 8) = v154;
    __int128 v155 = &dword_1019A0000;
    __int128 v156 = &dword_1019A0000;
    v157 = &dword_1019A0000;
    __int128 v158 = &dword_1019A0000;
  }

  else
  {
    v149 = sub_1001D0A48(v149);
    __int128 v154 = *((void *)v135 + 416);
    v153[1] = v154;
    __int128 v155 = &dword_1019A0000;
    __int128 v156 = &dword_1019A0000;
    v157 = &dword_1019A0000;
    __int128 v158 = &dword_1019A0000;
    if (!v154)
    {
      v149 = sub_1001D0A48(v149);
      __int128 v154 = *((void *)v135 + 416);
    }
  }

  v153[2] = v154;
  v159 = qword_1019A0D08;
  if (!qword_1019A0D08)
  {
    v149 = sub_1001D0A48(v149);
    v159 = qword_1019A0D08;
  }

  v153[7] = v159;
  __int128 v160 = qword_1019A0D18;
  CFStringRef v161 = qword_1019A0B40;
  if (!qword_1019A0B40)
  {
    v149 = sub_1001D0A48(v149);
    CFStringRef v161 = qword_1019A0B40;
  }

  *(void *)(v160 + 8) = v161;
  __int128 v162 = qword_1019A0D10;
  if (!qword_1019A0D10)
  {
    v149 = sub_1001D0A48(v149);
    CFStringRef v161 = qword_1019A0B40;
    __int128 v162 = qword_1019A0D10;
  }

  *(void *)(v160 + 16) = v162;
  uint64_t v163 = qword_1019A0D20;
  if (!v161)
  {
    sub_1001D0A48(v149);
    CFStringRef v161 = qword_1019A0B40;
  }

  *(void *)(v163 + 8) = v161;
  __int128 v164 = sub_1001D2E18(qword_1019A0D28);
  v165 = (void *)qword_1019A0D38;
  __int128 v166 = qword_1019A0B40;
  if (!qword_1019A0B40)
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v166 = qword_1019A0B40;
  }

  v165[1] = v166;
  uint64_t v167 = qword_1019A0D28;
  if (!qword_1019A0D28)
  {
    __int128 v164 = sub_1001D0A48(v164);
    uint64_t v167 = qword_1019A0D28;
  }

  v165[2] = v167;
  __int128 v168 = qword_1019A0D30;
  if (!qword_1019A0D30)
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v168 = qword_1019A0D30;
  }

  v165[4] = v168;
  __int128 v169 = qword_1019A0D40;
  __int128 v170 = qword_1019A0B40;
  if (qword_1019A0B40)
  {
    *(void *)(qword_1019A0D40 + 8) = qword_1019A0B40;
    __int128 v171 = *((void *)v158 + 425);
    __int128 v172 = v171;
  }

  else
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v170 = qword_1019A0B40;
    *(void *)(v169 + 8) = qword_1019A0B40;
    __int128 v172 = *((void *)v158 + 425);
    if (v170)
    {
      __int128 v171 = *((void *)v158 + 425);
    }

    else
    {
      __int128 v164 = sub_1001D0A48(v164);
      __int128 v171 = *((void *)v158 + 425);
      __int128 v170 = qword_1019A0B40;
    }
  }

  *(void *)(v172 + 64) = v170;
  __int128 v176 = qword_1019A0D50;
  if (!v171)
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v171 = *((void *)v158 + 425);
  }

  *(void *)(v176 + 8) = v171;
  int v177 = *((void *)v156 + 428);
  __int128 v178 = qword_1019A0D58;
  if (!qword_1019A0D58)
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v178 = qword_1019A0D58;
  }

  *(void *)(v177 + 8) = v178;
  v179 = *((void *)v155 + 429);
  std::string::size_type v180 = qword_1019A0B40;
  if (qword_1019A0B40)
  {
    *(void *)(v179 + 8) = qword_1019A0B40;
    unint64_t v181 = (void *)qword_1019A0D70;
  }

  else
  {
    __int128 v164 = sub_1001D0A48(v164);
    std::string::size_type v180 = qword_1019A0B40;
    *(void *)(v179 + 8) = qword_1019A0B40;
    unint64_t v181 = (void *)qword_1019A0D70;
    if (!v180)
    {
      __int128 v164 = sub_1001D0A48(v164);
      std::string::size_type v180 = qword_1019A0B40;
    }
  }

  v181[1] = v180;
  __int128 v182 = *((void *)v156 + 428);
  if (!v182)
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v182 = *((void *)v156 + 428);
  }

  v181[3] = v182;
  v183 = *((void *)v155 + 429);
  if (!v183)
  {
    __int128 v164 = sub_1001D0A48(v164);
    v183 = *((void *)v155 + 429);
  }

  v181[4] = v183;
  __int128 v184 = *((void *)v157 + 431);
  v185 = qword_1019A0B40;
  if (qword_1019A0B40)
  {
    *(void *)(v184 + 8) = qword_1019A0B40;
    __int128 v186 = qword_1019A0D98;
  }

  else
  {
    __int128 v164 = sub_1001D0A48(v164);
    v185 = qword_1019A0B40;
    *(void *)(v184 + 8) = qword_1019A0B40;
    __int128 v186 = qword_1019A0D98;
    if (!v185)
    {
      __int128 v164 = sub_1001D0A48(v164);
      v185 = qword_1019A0B40;
    }
  }

  *(void *)(v186 + 8) = v185;
  v187 = qword_1019A0D80;
  if (!qword_1019A0D80)
  {
    __int128 v164 = sub_1001D0A48(v164);
    v187 = qword_1019A0D80;
  }

  *(void *)(v186 + 56) = v187;
  __int128 v188 = qword_1019A0DB0;
  v189 = qword_1019A0DA8;
  if (!qword_1019A0DA8)
  {
    __int128 v164 = sub_1001D0A48(v164);
    v189 = qword_1019A0DA8;
  }

  *(void *)(v188 + 8) = v189;
  __int128 v190 = qword_1019A0DB8;
  if (!qword_1019A0DB8)
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v190 = qword_1019A0DB8;
  }

  *(void *)(v188 + 56) = v190;
  CFStringRef v191 = qword_1019A0DC0;
  __int128 v192 = qword_1019A0B40;
  if (qword_1019A0B40)
  {
    *(void *)(qword_1019A0DC0 + 8) = qword_1019A0B40;
    *(void *)(qword_1019A0DD0 + 8) = v192;
  }

  else
  {
    __int128 v164 = sub_1001D0A48(v164);
    __int128 v192 = qword_1019A0B40;
    *(void *)(v191 + 8) = qword_1019A0B40;
    uint64_t v193 = qword_1019A0DD0;
    if (!v192)
    {
      __int128 v164 = sub_1001D0A48(v164);
      __int128 v192 = qword_1019A0B40;
      *(void *)(v193 + 8) = qword_1019A0B40;
      std::string::size_type v194 = (void *)qword_1019A0DD8;
      if (!v192)
      {
        __int128 v164 = sub_1001D0A48(v164);
        __int128 v192 = qword_1019A0B40;
      }

      goto LABEL_129;
    }

    *(void *)(qword_1019A0DD0 + 8) = v192;
  }

  std::string::size_type v194 = (void *)qword_1019A0DD8;
LABEL_129:
  v194[1] = v192;
  v195 = qword_1019A0DC8;
  if (!qword_1019A0DC8)
  {
    __int128 v164 = sub_1001D0A48(v164);
    v195 = qword_1019A0DC8;
  }

  v194[2] = v195;
  __int128 v196 = qword_1019A0DD0;
  if (!qword_1019A0DD0)
  {
    sub_1001D0A48(v164);
    __int128 v196 = qword_1019A0DD0;
  }

  v194[3] = v196;
  sub_1001D2E94(qword_1019A0DE8);
  wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_1001D01F4,  v197);
}

  if ((*(_WORD *)&self->_has & 0x400) != 0)
  {
    if ((*((_WORD *)a3 + 52) & 0x400) == 0 || self->_numWorkoutsContrToEstimate != *((_DWORD *)a3 + 22)) {
      goto LABEL_82;
    }
  }

  else if ((*((_WORD *)a3 + 52) & 0x400) != 0)
  {
    goto LABEL_82;
  }

  if ((has & 4) != 0)
  {
  }

  else if ((v7 & 4) != 0)
  {
    goto LABEL_82;
  }

  if ((has & 2) != 0)
  {
  }

  else if ((v7 & 2) != 0)
  {
    goto LABEL_82;
  }

  LOBYTE(v5) = (v7 & 0x80) == 0;
  if ((has & 0x80) != 0)
  {
    LOBYTE(v5) = 1;
  }

  return v5;
}

  (*(void (**)(uint64_t))(*(void *)v36 + 24LL))(v36);
  return v9;
}
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

    __int16 v20 = a1[43];
    __int128 v21 = 0x4006666601000101LL;
LABEL_65:
    *(void *)(v20 + 88) = v21;
LABEL_66:
    uint64_t v15 = a1[43];
    char v14 = a1[44];
    goto LABEL_67;
  }

  if (v12 > 18239)
  {
    if (v12 > 19149)
    {
      switch(v12)
      {
        case 19150:
LABEL_10:
          double result = sub_100412BBC(a1, a6);
          uint64_t v16 = a1[43];
          if ((_DWORD)result) {
            int v17 = 1074161254;
          }
          else {
            int v17 = 1083074150;
          }
          *(_DWORD *)(v16 + 88) = 256;
          *(_DWORD *)(v16 + 92) = v17;
          goto LABEL_66;
        case 90603:
          uint64_t v15 = a1[19];
          char v14 = a1[20];
          goto LABEL_67;
        case 519150:
          goto LABEL_10;
      }

      goto LABEL_83;
    }

    if (v12 == 18240)
    {
      uint64_t v15 = a1[33];
      char v14 = a1[34];
      goto LABEL_67;
    }

    int v18 = 19090;
    goto LABEL_46;
  }

  if (v12 > 18099)
  {
    if (v12 != 18100)
    {
      if (v12 == 18200)
      {
        uint64_t v15 = a1[45];
        char v14 = a1[46];
        goto LABEL_67;
      }

      goto LABEL_83;
    }

    goto LABEL_64;
  }

  if (v12 == 15670)
  {
    uint64_t v15 = a1[41];
    char v14 = a1[42];
    goto LABEL_67;
  }

  if (v12 == 18050)
  {
LABEL_32:
    uint64_t v15 = a1[23];
    char v14 = a1[24];
    goto LABEL_67;
  }

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[12];
  if (v25 >= 0x80)
  {
    uint64_t v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
    unint64_t v3 = a1[17];
  }

  else
  {
    uint64_t v26 = 2;
  }

  uint64_t v4 = (v26 + v4);
  if ((v3 & 0x800) == 0)
  {
LABEL_52:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_73;
  }

  double result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B,  v5[28],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v39 + 24LL))(v39);
  return v9;
}

    BOOL v2 = "ERROR";
    return std::string::assign(a2, v2);
  }

  if (a1 > 255)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x4000)
      {
        if (a1 == 0x4000)
        {
          BOOL v2 = "kTypeDrivingMounted";
          return std::string::assign(a2, v2);
        }

        if (a1 == 0x8000)
        {
          BOOL v2 = "kTypeMotorcycle";
          return std::string::assign(a2, v2);
        }
      }

      else
      {
        if (a1 == 0x2000)
        {
          BOOL v2 = "kTypeVehicularInHand";
          return std::string::assign(a2, v2);
        }

        if (a1 == 12288)
        {
          BOOL v2 = "kTypeDrivingOther";
          return std::string::assign(a2, v2);
        }
      }
    }

    else if (a1 > 4095)
    {
      if (a1 == 4096)
      {
        BOOL v2 = "kTypeDriving";
        return std::string::assign(a2, v2);
      }

      if (a1 == 4128)
      {
        BOOL v2 = "kTypeDrivingOrWalkingSlow";
        return std::string::assign(a2, v2);
      }
    }

    else
    {
      if (a1 == 256)
      {
        BOOL v2 = "kTypeInVehicleFrozen";
        return std::string::assign(a2, v2);
      }

      if (a1 == 512)
      {
        BOOL v2 = "kTypeInVehicleStatic";
        return std::string::assign(a2, v2);
      }
    }

    goto LABEL_63;
  }

  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        BOOL v2 = "kTypeRunning";
        return std::string::assign(a2, v2);
      }

      if (a1 == 128)
      {
        BOOL v2 = "kTypeCycling";
        return std::string::assign(a2, v2);
      }
    }

    else
    {
      if (a1 == 16)
      {
        BOOL v2 = "kTypeWalking";
        return std::string::assign(a2, v2);
      }

      if (a1 == 32)
      {
        BOOL v2 = "kTypeWalkingSlow";
        return std::string::assign(a2, v2);
      }
    }

    goto LABEL_63;
  }

  BOOL v2 = "kTypeFrozen";
  switch(a1)
  {
    case 0:
      BOOL v2 = "kTypeUnknown";
      break;
    case 1:
      return std::string::assign(a2, v2);
    case 2:
      BOOL v2 = "kTypeStatic";
      break;
    case 3:
      goto LABEL_63;
    case 4:
      BOOL v2 = "kTypeMoving";
      break;
    default:
      if (a1 != 12) {
        goto LABEL_63;
      }
      BOOL v2 = "kTypeSemiStationary";
      break;
  }

  return std::string::assign(a2, v2);
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 56), v43);
}

  if (v8)
  {
    int v54 = (unint64_t *)&v8->__shared_owners_;
    do
      double v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10049108C(v76);
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  if (v12) {
    return 0LL;
  }
  return v3 < v5 || v16;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  uint64_t v7 = a2[13];
LABEL_64:
  if (__p)
  {
    uint64_t v50 = (char *)__p;
    operator delete(__p);
  }

  return v7;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  uint64_t v16 = *(void *)(v5 + 104);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A1D48 + 104);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  v16,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }

      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_78;
      }
    }
  }

  uint64_t v7 = 100LL;
LABEL_78:
  sub_1001BA1BC(v46);
  return v7;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

        int v17 = *(void *)(a1 + 16);
        v137[0] = *(void *)(a1 + 8);
        v137[1] = v17;
        if (v17)
        {
          int v18 = (unint64_t *)(v17 + 8);
          do
            uint64_t v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }

        __int16 v20 = 70.0;
        __int128 v21 = sub_100D5B8C8(a1, 70.0);
        __int16 v22 = *(double *)(a1 + 1224);
        if (v21 < 0.0)
        {
          if (v22 < 5.0)
          {
            sub_100BDC7E0((uint64_t)v139, a1 + 1016);
            if (((*(uint64_t (**)(void, _BYTE *, uint64_t, double))(*(void *)v137[0] + 88LL))( v137[0],  v139,  a1 + 912,  *(double *)(a1 + 3176)) & 1) == 0)
            {
              if (!*(_BYTE *)(a1 + 96)) {
                goto LABEL_121;
              }
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              CFStringRef v34 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,DOT particle assistance",  buf,  2u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_121;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              v133[0] = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,DOT particle assistance",  v133,  2);
              int v25 = (char *)v95;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)",  "%s\n",  v95);
              goto LABEL_237;
            }

            if (sub_100D504C0(*(float *)&v143 - *(double *)(a1 + 1232)) > 8.0)
            {
              if (!*(_BYTE *)(a1 + 96)) {
                goto LABEL_121;
              }
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              uint64_t v23 = (os_log_s *)qword_1019348B8;
              if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLMM,no DOT,too close large road direction change",  buf,  2u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_121;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              v133[0] = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,no DOT,too close large road direction change",  v133,  2);
              int v25 = (char *)v24;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)",  "%s\n",  v24);
LABEL_237:
              if (v25 != buf) {
                free(v25);
              }
LABEL_121:
              sub_100BDC958((uint64_t)v139);
LABEL_122:
              BOOL v11 = 0LL;
LABEL_147:
              sub_10000AE14((uint64_t)v137);
              return v11;
            }

            sub_100BDC958((uint64_t)v139);
          }

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  unsigned int v27 = 1LL;
LABEL_64:
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  return v27;
}

  uint64_t v47 = *(double *)(a2 + 192);
  uint64_t v48 = *(double *)(a2 + 104);
  if (v47 > 0.0 && v48 >= 0.0)
  {
    if (v47 < 13.0)
    {
      *(void *)(a2 + 192) = 0x402A000000000000LL;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      std::string v49 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v50 = *(void *)(a2 + 8);
        uint64_t v51 = *(void *)(a2 + 104);
        int v52 = *(void *)(a2 + 192);
        *(_DWORD *)__int128 buf = 134349568;
        uint64_t v89 = v50;
        v90 = 2050;
        char v91 = v51;
        char v92 = 2050;
        __int128 v93 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        std::string v70 = *(void *)(a2 + 8);
        __int16 v71 = *(void *)(a2 + 104);
        std::string v72 = *(void *)(a2 + 192);
        std::string v82 = 134349568;
        std::string v83 = v70;
        std::string v84 = 2050;
        uint64_t v85 = v71;
        uint64_t v86 = 2050;
        __int128 v87 = v72;
        LODWORD(v79) = 32;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf",  &v82,  v79);
        std::string v74 = (uint8_t *)v73;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)",  "%s\n",  v73);
        if (v74 != buf) {
          free(v74);
        }
      }
    }

    uint64_t v47 = *(double *)(a2 + 192);
    uint64_t v48 = *(double *)(a2 + 104);
  }

  if (v47 <= 0.0) {
    goto LABEL_83;
  }
  if (v48 < 0.0) {
    goto LABEL_83;
  }
  int v53 = *(double *)(a3 + 344);
  if (v53 < 0.0 || v15 >= 2.2) {
    goto LABEL_83;
  }
  int v54 = fmod(v48 - v53, 360.0);
  if (v54 < 0.0) {
    int v54 = v54 + 360.0;
  }
  if (v54 > 180.0) {
    int v54 = v54 + -360.0;
  }
  double v55 = fabs(v54);
  if (!*(_BYTE *)(a1 + 1032))
  {
    *(_BYTE *)(a1 + 1032) = v55 > 14.0;
    return;
  }

  if (v55 < 8.0) {
LABEL_83:
  }
    *(_BYTE *)(a1 + 1032) = 0;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v38 + 24LL))(v38);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  int v39 = v9;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894CB8);
  }
  uint64_t v40 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109632;
    *(_DWORD *)std::string v78 = v38;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v39;
    *(_WORD *)std::string v79 = 1024;
    *(_DWORD *)&v79[2] = 400;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "TILE: result: tilestool: pass, %d, tests, %u, %d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    *(_DWORD *)std::string __p = 67109632;
    *(_DWORD *)&__p[4] = v38;
    *(_WORD *)&std::string __p[8] = 1024;
    *(_DWORD *)&__p[10] = v39;
    *(_WORD *)std::string v76 = 1024;
    *(_DWORD *)&v76[2] = 400;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: result: tilestool: pass, %d, tests, %u, %d",  __p,  20,  (_DWORD)v50);
    uint64_t v48 = (uint8_t *)v47;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationInd exEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v47);
    if (v48 != buf) {
      free(v48);
    }
  }

  sub_1001B4C40(v73);
  return v38;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  (*(void (**)(uint64_t))(*(void *)v40 + 24LL))(v40);
  return v9;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  BOOL v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "multiPeakPathLengthDelaySpread", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 153), 0x19u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }

  __int128 v21 = *(void *)(a2 + 184);
  v5 |= 0x400000uLL;
  *BOOL v2 = v5;
  *(void *)(a1 + 184) = v21;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfSteps", *(void *)(a1 + 128));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 192), 0x38u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }

  __int128 v21 = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 112) = v21;
  BOOL v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "numStaticBins", *(_DWORD *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }

  int v38 = *(_BYTE *)(a2 + 385);
  v10 |= 0x200000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 385) = v38;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }

  double result = *(float *)(a2 + 196);
  v3 |= 0x100000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 196) = result;
  BOOL v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000000000000LL) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "fallType", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 212), 0xDu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }

  __int16 v35 = *(_BYTE *)(a2 + 210);
  *(_DWORD *)(a1 + 212) |= 0x40000000u;
  *(_BYTE *)(a1 + 210) = v35;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x1000) == 0)
  {
LABEL_34:
    if ((v10 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "nPrecondition", *(_DWORD *)(a1 + 172));
  int v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x100000) == 0)
  {
LABEL_26:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 196), 0x17u);
  char v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }

  int v31 = *(_DWORD *)(a2 + 124);
  v3 |= 0x800000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 124) = v31;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "metaMaxPower", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }

  double result = *(float *)(a2 + 116);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 116) = result;
  BOOL v2 = *(void *)(a2 + 172);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "kChaosOrSaturationMetRO", *(_BYTE *)(a1 + 162));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x10000000000LL) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 112), 0x67u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_65;
  }

        *(_DWORD *)(a1 + 20) = v30;
      }

      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v33 = *((void *)this + 1);
        CFStringRef v34 = *((void *)this + 2);
        __int16 v35 = *(void *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v34)
        {
          int v46 = 0;
          uint64_t v47 = 0;
          int v38 = 0LL;
          if (v34 <= v33) {
            CFStringRef v34 = *((void *)this + 1);
          }
          while (1)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_66;
            }

            uint64_t v48 = v33 + 1;
            std::string v49 = *(_BYTE *)(v35 + v33);
            *((void *)this + 1) = v48;
            v38 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0) {
              break;
            }
            v46 += 7;
            uint64_t v33 = v48;
            char v14 = v47++ > 8;
            if (v14)
            {
LABEL_58:
              LODWORD(v38) = 0;
              goto LABEL_66;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v38) = 0;
          }
        }

        else
        {
          int v36 = 0;
          uint64_t v37 = 0;
          int v38 = 0LL;
          while (1)
          {
            int v39 = v33 + 1;
            *((void *)this + 1) = v33 + 1;
            uint64_t v40 = *(_BYTE *)(v35 + v33);
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v36 += 7;
            uint64_t v33 = v39;
            char v14 = v37++ > 8;
            if (v14) {
              goto LABEL_58;
            }
          }
        }

  int v9 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 68) = v9;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "rawHRMets", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 104), 0x18u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }

  uint64_t v30 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 96) = v30;
  BOOL v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "regValSignalTotalEvents", *(_DWORD *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  if ((*(_DWORD *)(a2 + 136) & 0x1000000) == 0) {
    return *(float *)&v4;
  }
LABEL_64:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 136) = v3 | 0x1000000;
  *(_DWORD *)(a1 + 112) = v4;
  return *(float *)&v4;
}

  int v24 = *(_DWORD *)(a2 + 184);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 184) = v24;
  BOOL v2 = *(void *)(a2 + 212);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "planarTimestampAtMaxEnergy", *(void *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 180), 0x16u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }

  uint64_t v50 = *(_BYTE *)(a2 + 241);
  v6 |= 0x2000000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_BYTE *)(a1 + 241) = v50;
  uint64_t v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x80000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "dailySteps7daysMean", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 242), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 172);
  v3 |= 0x4000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 172) = v13;
  BOOL v2 = *(void *)(a2 + 184);
  if ((v2 & 0x100000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "isWeightSet", *(_BYTE *)(a1 + 179));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x11u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }

  int v32 = *(void *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 104) = v32;
  BOOL v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 204));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
LABEL_65:
    PB::TextFormatter::format(this, "undulationModel", *(_DWORD *)(a1 + 212));
    if ((*(_DWORD *)(a1 + 220) & 0x100000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_33;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 120), 0x1Eu);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x4000000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 196), 0x20u);
  }

  int v31 = *(_DWORD *)(a2 + 128);
  v5 |= 0x400000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 128) = v31;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "rowStrokePower", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x15u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }

  char v14 = *(_DWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 16) = v14;
  BOOL v2 = *(void *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "blockHeadTurnFalsePositive", *(_BYTE *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 116), 0xCu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_65;
  }

  int v32 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 16) = v32;
  BOOL v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "srcRotationAxisAlignment", *(float *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_65:
    PB::TextFormatter::format(this, "steadyStatePedestrian", *(_BYTE *)(a1 + 126));
    if ((*(_DWORD *)(a1 + 128) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_33;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 116), 0x1Eu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 122), 0x20u);
  }

  CFStringRef v34 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 164) |= 0x40000u;
  *(_DWORD *)(a1 + 136) = v34;
  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 153), 0x19u);
  BOOL v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }

  double result = *(double *)(a2 + 96);
  v3 |= 0x800uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 96) = result;
  BOOL v2 = *(void *)(a2 + 224);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 136), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }

LABEL_79:
      ++v35;
    }

    while (v35 != v34);
LABEL_87:
    if (v36 != v34 && v36 == v11) {
      return 2LL;
    }
  }

  uint64_t v40 = 26LL;
  if (v1 < 0x1A) {
    uint64_t v40 = v1;
  }
  if (!v40) {
    goto LABEL_105;
  }
  uint64_t v41 = &v11[v40];
  uint64_t v42 = v11;
  unint64_t v43 = v41;
  do
  {
    if (*v42 == 73)
    {
      uint64_t v44 = &_mh_execute_header.magic + 1;
      while (v44 != 26)
      {
        if (&v42[v44] == v41) {
          goto LABEL_102;
        }
        int v45 = v42[v44];
        int v46 = aInternalclient_3[v44++];
        if (v45 != v46) {
          goto LABEL_94;
        }
      }

      unint64_t v43 = v42;
    }

  __int16 v22 = *(void *)(v5 + 128);
  if (!v22) {
    __int16 v22 = *(void *)(qword_1019A0978 + 128);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  v22,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }

    int v38 = *(_OWORD *)(v26 + 8);
    *(void *)&uint8_t buf[16] = *(void *)(v26 + 24);
    *(_OWORD *)__int128 buf = v38;
    goto LABEL_81;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EA08);
  }
  __int128 v21 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:LOI Manager, received nil LOI Identifier from place inference, possibly because there is no active user on macOS, we will start leeching and wait for next location update}",  buf,  0x12u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181EA08);
    }
  }

  __int16 v22 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    *(_DWORD *)__int128 buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "LOI Manager, received nil LOI Identifier from place inference, possibly because there is no active user on macOS, we will start leeching and wait for next location update",  "{msg%{public}.0s:LOI Manager, received nil LOI Identifier from place inference, possibly because there is no active user on macOS, we will start leeching and wait for next location update}",  buf,  0x12u);
  }

  std::string::assign((std::string *)(a1 + 368), "unknown");
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 4sub_100019CEC(v39 + 48) = *(void *)(a1 + 440);
  if (*(_BYTE *)(a1 + 484)) {
    *(_BYTE *)(a1 + 484) = 0;
  }
  (*(void (**)(void))(**(void **)(a1 + 328) + 32LL))(*(void *)(a1 + 328));
  sub_1010DDBC0(buf, "Not in Active Location State");
LABEL_81:
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(void *)(a3 + 16) = *(void *)&buf[16];
  *(_BYTE *)(a3 + 24) = 1;
}

  BOOL v11 = *(void *)(v5 + 88);
  if (!v11) {
    BOOL v11 = *(void *)(qword_1019A0BA0 + 88);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v11,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_83;
  }

    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_type);
    goto LABEL_80;
  }

  if (type > 40)
  {
    if (type > 99)
    {
      if (type > 2019)
      {
        if (type == 2020)
        {
          uint64_t v5 = @"kTypeCalisthenics";
          goto LABEL_80;
        }

        if (type == 2022)
        {
          uint64_t v5 = @"kTypeFunctionalStrength";
          goto LABEL_80;
        }
      }

      else
      {
        if (type == 100)
        {
          uint64_t v5 = @"kTypeCyclingLeg";
          goto LABEL_80;
        }

        if (type == 2010)
        {
          uint64_t v5 = @"kTypeStationaryCycling";
          goto LABEL_80;
        }
      }
    }

    else if (type > 55)
    {
      if (type == 56)
      {
        uint64_t v5 = @"kTypeDrivingOther";
        goto LABEL_80;
      }

      if (type == 63)
      {
        uint64_t v5 = @"kTypeMultiSportTransition";
        goto LABEL_80;
      }
    }

    else
    {
      if (type == 41)
      {
        uint64_t v5 = @"kTypeWalkingSlow";
        goto LABEL_80;
      }

      if (type == 52)
      {
        uint64_t v5 = @"kTypeVehicularInHand";
        goto LABEL_80;
      }
    }

    goto LABEL_79;
  }

  uint64_t v5 = @"kTypeUnknown";
  switch(type)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = @"kTypeFrozen";
      break;
    case 2:
      uint64_t v5 = @"kTypeStatic";
      break;
    case 3:
      uint64_t v5 = @"kTypeMoving";
      break;
    case 4:
      uint64_t v5 = @"kTypeWalking";
      break;
    case 5:
      uint64_t v5 = @"kTypeDriving";
      break;
    case 6:
      uint64_t v5 = @"kTypeCycling";
      break;
    case 7:
      uint64_t v5 = @"kTypeSemiStationary";
      break;
    case 8:
      uint64_t v5 = @"kTypeRunning";
      break;
    case 9:
      uint64_t v5 = @"kTypeMovingCoarse";
      break;
    case 10:
      uint64_t v5 = @"kTypeInVehicleFrozen";
      break;
    case 11:
      uint64_t v5 = @"kTypeInVehicleStatic";
      break;
    default:
      goto LABEL_79;
  }

    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_activityType);
    goto LABEL_80;
  }

  if (activityType > 40)
  {
    if (activityType > 99)
    {
      if (activityType > 2019)
      {
        if (activityType == 2020)
        {
          uint64_t v5 = @"kTypeCalisthenics";
          goto LABEL_80;
        }

        if (activityType == 2022)
        {
          uint64_t v5 = @"kTypeFunctionalStrength";
          goto LABEL_80;
        }
      }

      else
      {
        if (activityType == 100)
        {
          uint64_t v5 = @"kTypeCyclingLeg";
          goto LABEL_80;
        }

        if (activityType == 2010)
        {
          uint64_t v5 = @"kTypeStationaryCycling";
          goto LABEL_80;
        }
      }
    }

    else if (activityType > 55)
    {
      if (activityType == 56)
      {
        uint64_t v5 = @"kTypeDrivingOther";
        goto LABEL_80;
      }

      if (activityType == 63)
      {
        uint64_t v5 = @"kTypeMultiSportTransition";
        goto LABEL_80;
      }
    }

    else
    {
      if (activityType == 41)
      {
        uint64_t v5 = @"kTypeWalkingSlow";
        goto LABEL_80;
      }

      if (activityType == 52)
      {
        uint64_t v5 = @"kTypeVehicularInHand";
        goto LABEL_80;
      }
    }

    goto LABEL_79;
  }

  uint64_t v5 = @"kTypeUnknown";
  switch(activityType)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = @"kTypeFrozen";
      break;
    case 2:
      uint64_t v5 = @"kTypeStatic";
      break;
    case 3:
      uint64_t v5 = @"kTypeMoving";
      break;
    case 4:
      uint64_t v5 = @"kTypeWalking";
      break;
    case 5:
      uint64_t v5 = @"kTypeDriving";
      break;
    case 6:
      uint64_t v5 = @"kTypeCycling";
      break;
    case 7:
      uint64_t v5 = @"kTypeSemiStationary";
      break;
    case 8:
      uint64_t v5 = @"kTypeRunning";
      break;
    case 9:
      uint64_t v5 = @"kTypeMovingCoarse";
      break;
    case 10:
      uint64_t v5 = @"kTypeInVehicleFrozen";
      break;
    case 11:
      uint64_t v5 = @"kTypeInVehicleStatic";
      break;
    default:
      goto LABEL_79;
  }

    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_activityType);
    goto LABEL_80;
  }

  if (activityType > 40)
  {
    if (activityType > 99)
    {
      if (activityType > 2019)
      {
        if (activityType == 2020)
        {
          uint64_t v5 = @"kTypeCalisthenics";
          goto LABEL_80;
        }

        if (activityType == 2022)
        {
          uint64_t v5 = @"kTypeFunctionalStrength";
          goto LABEL_80;
        }
      }

      else
      {
        if (activityType == 100)
        {
          uint64_t v5 = @"kTypeCyclingLeg";
          goto LABEL_80;
        }

        if (activityType == 2010)
        {
          uint64_t v5 = @"kTypeStationaryCycling";
          goto LABEL_80;
        }
      }
    }

    else if (activityType > 55)
    {
      if (activityType == 56)
      {
        uint64_t v5 = @"kTypeDrivingOther";
        goto LABEL_80;
      }

      if (activityType == 63)
      {
        uint64_t v5 = @"kTypeMultiSportTransition";
        goto LABEL_80;
      }
    }

    else
    {
      if (activityType == 41)
      {
        uint64_t v5 = @"kTypeWalkingSlow";
        goto LABEL_80;
      }

      if (activityType == 52)
      {
        uint64_t v5 = @"kTypeVehicularInHand";
        goto LABEL_80;
      }
    }

    goto LABEL_79;
  }

  uint64_t v5 = @"kTypeUnknown";
  switch(activityType)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = @"kTypeFrozen";
      break;
    case 2:
      uint64_t v5 = @"kTypeStatic";
      break;
    case 3:
      uint64_t v5 = @"kTypeMoving";
      break;
    case 4:
      uint64_t v5 = @"kTypeWalking";
      break;
    case 5:
      uint64_t v5 = @"kTypeDriving";
      break;
    case 6:
      uint64_t v5 = @"kTypeCycling";
      break;
    case 7:
      uint64_t v5 = @"kTypeSemiStationary";
      break;
    case 8:
      uint64_t v5 = @"kTypeRunning";
      break;
    case 9:
      uint64_t v5 = @"kTypeMovingCoarse";
      break;
    case 10:
      uint64_t v5 = @"kTypeInVehicleFrozen";
      break;
    case 11:
      uint64_t v5 = @"kTypeInVehicleStatic";
      break;
    default:
      goto LABEL_79;
  }

  __int16 v22 = *(void *)(v5 + 128);
  if (!v22) {
    __int16 v22 = *(void *)(qword_1019A11B8 + 128);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v22,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }

    return;
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101848590);
  }
  __int16 v22 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "MovingApDetector, centroid database is null!",  (uint8_t *)__p,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101848590);
    }
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "MovingApDetector, centroid database is null!",  &v31,  2);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)",  "%s\n",  v23);
  }

  if (v6 == a1)
  {
LABEL_80:
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184C310);
    }
    std::string v29 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      sub_100923668(a2, &v81);
      uint64_t v30 = (v81.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v81 : (std::string *)v81.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "FenceCal: creating a new combined fence for, %{private}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v81, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184C310);
      }
      uint64_t v50 = qword_101934878;
      sub_100923668(a2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v51 = &buf;
      }
      else {
        uint64_t v51 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      std::string v77 = 136380675;
      std::string v78 = *(double *)&v51;
      LODWORD(v76) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v81,  1628LL,  &_mh_execute_header,  v50,  2LL,  "FenceCal: creating a new combined fence for, %{private}s",  &v77,  v76);
      int v53 = v52;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)",  "%s\n",  (const char *)v53);
      if (v53 != &v81) {
        free(v53);
      }
    }

    sub_10070045C((uint64_t)&v81);
    uint64_t v6 = sub_1007006B8((uint64_t)a1, 0LL, 0LL, (uint64_t)&v81);
    int v31 = *a1;
    *(void *)(v31 + 8) = v6;
    *uint64_t v6 = v31;
    *a1 = (uint64_t)v6;
    v6[1] = (uint64_t)a1;
    ++a1[2];
    sub_100700568((uint64_t)&v81);
  }

  if (v6 != a1)
  {
    sub_100700120((uint64_t)(v6 + 2), a2);
    *((_BYTE *)v6 + 288) |= a3;
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10184C310);
    }
    int v32 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      sub_100923668((uint64_t)(v6 + 2), &v81);
      uint64_t v33 = (v81.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v81 : (std::string *)v81.__r_.__value_.__r.__words[0];
      CFStringRef v34 = *((unsigned __int8 *)v6 + 288);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1025;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "FenceCal: adding to, %{private}s, isExit, %{private}d",  (uint8_t *)&buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v81, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184C310);
      }
      char v68 = qword_101934878;
      sub_100923668((uint64_t)(v6 + 2), &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string v69 = &buf;
      }
      else {
        std::string v69 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      std::string v70 = *((unsigned __int8 *)v6 + 288);
      std::string v77 = 136380931;
      std::string v78 = *(double *)&v69;
      std::string v79 = 1025;
      LODWORD(v80) = v70;
      LODWORD(v76) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v81,  1628LL,  &_mh_execute_header,  v68,  2LL,  "FenceCal: adding to, %{private}s, isExit, %{private}d",  &v77,  v76);
      std::string v72 = v71;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLCombinedFencesList::addFenceToCombinedList(std::list<CLFenceManager_Type::CombinedFence> &, const CLFenceManager_Type::Fence &, BOOL)",  "%s\n",  (const char *)v72);
      if (v72 != &v81) {
        free(v72);
      }
    }
  }

  return 1LL;
}

      if (v39) {
        goto LABEL_102;
      }
LABEL_80:
      if (v38)
      {
LABEL_102:
        Current = CFAbsoluteTimeGetCurrent();
        uint64_t v51 = v36[13];
        int v52 = rand();
        int v53 = (Current - v51) / 86400.0;
        int v54 = v53;
        HIDWORD(v55) = -1030792151 * v52 + 85899344;
        LODWORD(v55) = HIDWORD(v55);
        if ((v55 >> 2) <= 0x28F5C28)
        {
          v128[0] = @"age";
          *(float *)&int v53 = v53;
          v129[0] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v53);
          v128[1] = @"fromAppleLocationServices";
          v129[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v38);
          v128[2] = @"fromTiles";
          v129[2] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v39);
          v128[3] = @"horizontalAccuracy";
          v129[3] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v36[9]);
          v128[4] = @"reach";
          v129[4] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *((unsigned int *)v36 + 22));
          v128[5] = @"verticalAccuracy";
          v129[5] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v36[10]);
          AnalyticsSendEvent( @"com.apple.locationd.WifiPositioningAPLocations",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v129,  v128,  6LL));
        }

        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018607D0);
        }
        int v56 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          sub_1007EC360(&v111);
          uint64_t v57 = &v111;
          if ((v111.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v57 = (std::string *)v111.__r_.__value_.__r.__words[0];
          }
          unint64_t v58 = *((void *)v36 + 6);
          double v59 = *((void *)v36 + 7);
          std::string v60 = *((_DWORD *)v36 + 22);
          std::string v62 = *((void *)v36 + 8);
          std::string v61 = *((void *)v36 + 9);
          int v63 = *((void *)v36 + 10);
          std::string v64 = &v104;
          if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string v64 = (std::string *)v104.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int128 buf = 134351619;
          *(void *)&uint8_t buf[4] = v34;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v94;
          *(_WORD *)&buf[22] = 2081;
          __int128 v131 = v57;
          *(_WORD *)v132 = 2049;
          *(void *)&v132[2] = v58;
          __int128 v133 = 2049;
          uint64_t v134 = v59;
          __int128 v135 = 2050;
          __int128 v136 = v61;
          __int128 v137 = 1026;
          __int128 v138 = v60;
          __int128 v139 = 2049;
          v140 = v62;
          __int128 v141 = 2050;
          v142 = v63;
          __int128 v143 = 2082;
          v144 = v64;
          __int128 v145 = 2050;
          CFStringRef v146 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}1.f , reach, %{public}d, altitude, %{private}.1f, vacc, %{public}.1f, src, %{public}s, query age, %{public}.6f days",  buf,  0x6Cu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_115;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_1018607D0);
        }
        double v65 = qword_101934868;
        sub_1007EC360(&v102);
        unsigned int v66 = &v102;
        if ((v102.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unsigned int v66 = (std::string *)v102.__r_.__value_.__r.__words[0];
        }
        std::string v67 = *((void *)v36 + 6);
        char v68 = *((void *)v36 + 7);
        std::string v69 = *((_DWORD *)v36 + 22);
        __int16 v71 = *((void *)v36 + 8);
        std::string v70 = *((void *)v36 + 9);
        std::string v72 = *((void *)v36 + 10);
        std::string v73 = &v104;
        if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string v73 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        LODWORD(v111.__r_.__value_.__l.__data_) = 134351619;
        *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = v34;
        WORD2(v111.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 6) = v94;
        HIWORD(v111.__r_.__value_.__r.__words[2]) = 2081;
        __int16 v112 = v66;
        *(_WORD *)__int128 v113 = 2049;
        *(void *)&v113[2] = v67;
        int v114 = 2049;
        __int16 v115 = v68;
        int v116 = 2050;
        __int16 v117 = v70;
        __int128 v118 = 1026;
        char v119 = v69;
        __int128 v120 = 2049;
        __int128 v121 = v71;
        int v122 = 2050;
        char v123 = v72;
        char v124 = 2082;
        __int128 v125 = v73;
        unint64_t v126 = 2050;
        __int128 v127 = v54;
        LODWORD(v89) = 108;
        std::string v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v65,  0LL,  "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}1.f, reach, %{public}d, altitude, %{private}.1f, vacc, %{public}.1f, src, %{public}s, q uery age, %{public}.6f days",  &v111,  v89);
        goto LABEL_126;
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018607D0);
      }
      unint64_t v43 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
      {
        sub_1007EC360(&v111);
        uint64_t v44 = &v111;
        if ((v111.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v44 = (std::string *)v111.__r_.__value_.__r.__words[0];
        }
        int v45 = &v104;
        if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v45 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__int128 buf = 134349827;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v94;
        *(_WORD *)&buf[22] = 2081;
        __int128 v131 = v44;
        *(_WORD *)v132 = 2082;
        *(void *)&v132[2] = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{public}s",  buf,  0x2Au);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_115;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018607D0);
      }
      int v46 = qword_101934868;
      sub_1007EC360(&v102);
      uint64_t v47 = &v102;
      if ((v102.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v47 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      uint64_t v48 = &v104;
      if ((v104.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v48 = (std::string *)v104.__r_.__value_.__r.__words[0];
      }
      LODWORD(v111.__r_.__value_.__l.__data_) = 134349827;
      *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = v34;
      WORD2(v111.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 6) = v94;
      HIWORD(v111.__r_.__value_.__r.__words[2]) = 2081;
      __int16 v112 = v47;
      *(_WORD *)__int128 v113 = 2082;
      *(void *)&v113[2] = v48;
      LODWORD(v89) = 42;
      std::string v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v46,  0LL,  "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{public}s",  &v111,  v89);
LABEL_126:
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const",  "%s\n",  v49);
      if (v49 != buf) {
        free(v49);
      }
LABEL_115:
      int v32 = (void *)*v32;
      ++v34;
      if (!v32) {
        goto LABEL_129;
      }
    }

    sub_1002DFB20(a7 + 1224, &v103, &v103);
    uint64_t v37 = "notindb";
LABEL_57:
    std::string::assign(&v104, v37);
    goto LABEL_58;
  }

  uint64_t v33 = 0;
  __int128 v95 = 0;
LABEL_129:
  if (*(_BYTE *)(v92 + 8))
  {
    std::string v74 = sub_1002FB09C((uint64_t)&v105, (void *)v92);
    if (&v106 != v74)
    {
      std::string v75 = *(unsigned __int8 *)(a7 + 1400);
      std::string v76 = *(_OWORD *)(v74 + 7);
      *(_OWORD *)(a7 + 1304) = *(_OWORD *)(v74 + 5);
      *(_OWORD *)(a7 + 1320) = v76;
      std::string v77 = *(_OWORD *)(v74 + 11);
      std::string v78 = *(_OWORD *)(v74 + 15);
      std::string v79 = *(_OWORD *)(v74 + 9);
      *(_OWORD *)(a7 + 1368) = *(_OWORD *)(v74 + 13);
      *(_OWORD *)(a7 + 1384) = v78;
      *(_OWORD *)(a7 + 1336) = v79;
      *(_OWORD *)(a7 + 1352) = v77;
      if (!v75) {
        *(_BYTE *)(a7 + 1400) = 1;
      }
    }
  }

  std::string v80 = *((_DWORD *)a2 + 6);
  if (v80 >= 1)
  {
    if (v80 == 1)
    {
      std::string v81 = 1;
    }

    else if (v80 >= 5)
    {
      if (v80 >= 9)
      {
        if (v80 >= 0x11)
        {
          if (v80 >= 0x21)
          {
            else {
              std::string v81 = 65;
            }
          }

          else
          {
            std::string v81 = 32;
          }
        }

        else
        {
          std::string v81 = 16;
        }
      }

      else
      {
        std::string v81 = 8;
      }
    }

    else
    {
      std::string v81 = 4;
    }

    std::string v82 = 100 * *(_DWORD *)(a7 + 1288);
    std::string v83 = 100 * *(_DWORD *)(a7 + 1248);
    if (v91) {
      std::string v84 = "alsonly";
    }
    else {
      std::string v84 = "tilesals";
    }
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018607D0);
    }
    uint64_t v85 = v82 / v80;
    uint64_t v86 = (os_log_s *)qword_101934868;
    __int128 v87 = v83 / v80;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 67241730;
      *(_DWORD *)&uint8_t buf[4] = v80;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v81;
      *(_WORD *)&buf[14] = 2082;
      *(void *)&uint8_t buf[16] = v84;
      LOWORD(v131) = 1026;
      *(_DWORD *)((char *)&v131 + 2) = 100 * v95 / v80;
      HIWORD(v131) = 1026;
      *(_DWORD *)v132 = 100 * v33 / v80;
      *(_WORD *)&v132[4] = 1026;
      *(_DWORD *)&v132[6] = v85;
      __int128 v133 = 1026;
      LODWORD(v134) = v87;
      _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEBUG,  "WlpMetric, aplookup, %{public}d, %{public}d, sources, %{public}s, als, %{public}d, tiles, %{public}d, invalid, % {public}d, unknown, %{public}d",  buf,  0x30u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018607D0);
      }
      LODWORD(v111.__r_.__value_.__l.__data_) = 67241730;
      HIDWORD(v111.__r_.__value_.__r.__words[0]) = v80;
      LOWORD(v111.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v111.__r_.__value_.__r.__words[1] + 2) = v81;
      HIWORD(v111.__r_.__value_.__r.__words[1]) = 2082;
      v111.__r_.__value_.__l.__cap_ = (std::string::size_type)v84;
      LOWORD(v112) = 1026;
      *(_DWORD *)((char *)&v112 + 2) = 100 * v95 / v80;
      HIWORD(v112) = 1026;
      *(_DWORD *)__int128 v113 = 100 * v33 / v80;
      *(_WORD *)&v113[4] = 1026;
      *(_DWORD *)&v113[6] = v85;
      int v114 = 1026;
      LODWORD(v115) = v87;
      LODWORD(v89) = 48;
      v88 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WlpMetric, aplookup, %{public}d, %{public}d, sources, %{public}s, als, %{public}d, tiles, %{public }d, invalid, %{public}d, unknown, %{public}d",  &v111,  v89);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const",  "%s\n",  v88);
      if (v88 != buf) {
        free(v88);
      }
    }

    if ((*(_BYTE *)(v90 + 6440) & 0xF) == 0)
    {
      v96[0] = _NSConcreteStackBlock;
      v96[1] = 3221225472LL;
      v96[2] = sub_1008FCE08;
      v96[3] = &unk_10183D0E8;
      v96[4] = v84;
      uint64_t v97 = v81;
      int v98 = 100 * v95 / v80;
      char v99 = 100 * v33 / v80;
      char v100 = v85;
      __int128 v101 = v87;
      AnalyticsSendEventLazy(@"com.apple.clx.wifiloc.aplookup", v96);
    }
  }

  sub_100008390((uint64_t)&v105, v106);
  if (__p)
  {
    std::string v109 = (char *)__p;
    operator delete(__p);
  }

      dispatch_once(&qword_101934830, &stru_101860CB0);
      goto LABEL_67;
    }
  }

  return result;
}

  int v25 = *(void *)(v5 + 152);
  if (!v25) {
    int v25 = *(void *)(qword_1019A1CE8 + 152);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  v25,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      return result;
    }
    goto LABEL_85;
  }

  __int128 v21 = *(void *)(v5 + 136);
  if (!v21) {
    __int128 v21 = *(void *)(qword_1019A1D38 + 136);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  v21,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_85;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  int v25 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(a1 + 8);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v192 = "alertCanceledBecauseOfHighFrequencyFFT";
    uint64_t v193 = 2048;
    std::string::size_type v194 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v102 = *(void *)(a1 + 8);
    v187 = 136315394;
    __int128 v188 = "alertCanceledBecauseOfHighFrequencyFFT";
    v189 = 2048;
    __int128 v190 = v102;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    uint64_t v104 = (uint8_t *)v103;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v103);
    if (v104 != buf) {
      free(v104);
    }
  }

  *a4 = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200000) == 0)
  {
LABEL_10:
    if ((v10 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_91;
  }

    if (v9 != buf) {
      free(v9);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10188D488);
  }
  uint64_t v10 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "#Error,HRSE,onAvlFileUpdated,null pointer",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "#Error,HRSE,onAvlFileUpdated,null pointer",  __p,  2);
    int v9 = (char *)v11;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v11);
    goto LABEL_79;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
}

          *(_DWORD *)((char *)v13 + OBJC_IVAR___CLPMotionActivity__type) = v16;
LABEL_80:
          -[CLPMotionActivity setType:](v13, "setType:");
          -[CLPMotionActivity setConfidence:](v14, "setConfidence:", a3->confidence);
          return v14;
        }

        if (type != 18050)
        {
          uint64_t v16 = 0;
          int v17 = 18100;
          goto LABEL_76;
        }
      }
    }

    else
    {
      if (type <= 15329)
      {
        if (type > 15054)
        {
          if (((type - 15100) > 0x32 || ((1LL << (type + 4)) & 0x4000000000401LL) == 0)
            && ((type - 15230) > 0x19 || ((1 << (type - 126)) & 0x2100001) == 0))
          {
            uint64_t v16 = 0;
            int v17 = 15055;
            goto LABEL_76;
          }

          goto LABEL_78;
        }

        if (type <= 12149)
        {
          uint64_t v16 = 0;
          if (type != 3016)
          {
            int v17 = 11805;
LABEL_48:
            uint64_t v16 = a3->type;
            goto LABEL_76;
          }

          goto LABEL_79;
        }

        uint64_t v16 = a3->type;
        if (type == 12150) {
          goto LABEL_79;
        }
        uint64_t v16 = 0;
        int v17 = 15030;
LABEL_76:
        if (type != v17) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }

      if (((type - 15560) > 0x3C || ((1LL << (type + 56)) & 0x1004000100000001LL) == 0)
        && ((type - 15330) > 0x1E || ((1 << (type + 30)) & 0x40100001) == 0))
      {
        uint64_t v16 = 0;
        int v17 = 15460;
        goto LABEL_76;
      }
    }

  if (v99)
  {
    p_shared_owners = (unint64_t *)&v99->__shared_owners_;
    do
      __int16 v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }

  if (v100)
  {
    std::string v72 = (unint64_t *)&v100->__shared_owners_;
    do
      std::string v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }

  if (v101)
  {
    int v102 = (__n128 *)v101;
    operator delete(v101);
  }

  return v68;
}

    free(v59);
    goto LABEL_43;
  }

  unsigned int v27 = (_OWORD *)a4[1];
  if (v26 == v27) {
    goto LABEL_47;
  }
  char v28 = 1;
  do
  {
    sub_100BEF53C((unsigned __int8 *)&v87, (const unsigned __int8 *)v26);
    sub_100BEF53C((unsigned __int8 *)&v88, (const unsigned __int8 *)v26 + 16);
    std::string v29 = v26[2];
    uint64_t v30 = v26[3];
    int v31 = v26[4];
    *(_OWORD *)&v91[12] = *(_OWORD *)((char *)v26 + 76);
    v90 = v30;
    *(_OWORD *)char v91 = v31;
    uint64_t v89 = v29;
    sub_100BEF560((unsigned __int8 *)__p, "00000000-0000-0000-0000-000000000000");
    if (!sub_100BEF5A4((const unsigned __int8 *)&v88, (const unsigned __int8 *)__p))
    {
      int v32 = sub_10105604C(a2, (const unsigned __int8 *)&v88);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101896610);
      }
      uint64_t v33 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
      {
        sub_100BEF5DC((const unsigned __int8 *)&v88, __p);
        CFStringRef v34 = __p;
        if (SBYTE7(v78) < 0) {
          CFStringRef v34 = (void **)__p[0];
        }
        *(_DWORD *)__int128 buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v32 != 0;
        std::string v84 = 2080;
        uint64_t v85 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "AnalyticsLogger, checking for effort score associated sessionId match in workout activities, isMatch, %d, effo rtScoreSessionId, %s",  buf,  0x12u);
        if (SBYTE7(v78) < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101896610);
        }
        uint64_t v40 = qword_1019347E8;
        sub_100BEF5DC((const unsigned __int8 *)&v88, buf);
        uint64_t v41 = buf;
        if (v86 < 0) {
          uint64_t v41 = *(uint8_t **)buf;
        }
        *(_DWORD *)__int16 v71 = 67109378;
        *(_DWORD *)&v71[4] = v32 != 0;
        *(_WORD *)&v71[8] = 2080;
        *(void *)&v71[10] = v41;
        LODWORD(v68) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v40,  2LL,  "AnalyticsLogger, checking for effort score associated sessionId match in workout activities, isMatch, %d, effo rtScoreSessionId, %s",  v71,  v68);
        unint64_t v43 = v42;
        if (v86 < 0) {
          operator delete(*(void **)buf);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQuer yInterface::EffortScoreSet> &) const",  "%s\n",  v43);
      }

      __p[0] = &v88;
      __int16 v35 = sub_1010555B8( (uint64_t **)a2,  (const unsigned __int8 *)&v88,  (uint64_t)&unk_1012CF090,  (const unsigned __int8 **)__p);
      v28 &= v32 != 0;
      int v36 = v90;
      int v38 = *(_OWORD *)v91;
      uint64_t v37 = *(_OWORD *)&v91[16];
      *((_OWORD *)v35 + 5) = v89;
      *((_OWORD *)v35 + 6) = v36;
      *((_OWORD *)v35 + 7) = v38;
      *((_OWORD *)v35 + 8) = v37;
      int v39 = v88;
      *((_OWORD *)v35 + 3) = v87;
      *((_OWORD *)v35 + 4) = v39;
    }

    v26 += 6;
  }

  while (v26 != v27);
  return v28 & 1;
}

  uint64_t v37 = *(void *)(a2 + 272);
  v5 |= 0x200000000uLL;
  *BOOL v2 = v5;
  *(void *)(a1 + 272) = v37;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000LL) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "skippedFallStatsSensorTime", *(void *)(a1 + 248));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 264), 0x4Au);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreEnd", *(double *)(a1 + 296));
  uint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 336), 0x21u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_81;
  }

  BOOL v11 = *(_DWORD *)(a2 + 148);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 1sub_100019CEC(v39 + 48) = v11;
  BOOL v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000000000LL) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "pathLengthHarmonicMean", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }

  char v14 = *(void *)(a2 + 72);
  v5 |= 0x100uLL;
  *BOOL v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(void *)(a1 + 72) = v14;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_14:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "deltaTriggerTime", *(void *)(a1 + 8));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 72), 9u);
  uint64_t v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }

  uint64_t v19 = *(_BYTE *)(a2 + 162);
  v3 |= 0x8000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 162) = v19;
  BOOL v2 = *(void *)(a2 + 172);
  if ((v2 & 0x10000000000LL) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "maxChaos", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x400000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 163), 0x77u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }

              *(void *)(a1 + 72) = v24;
              goto LABEL_85;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              BOOL v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_58;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 80) |= 4u;
              BOOL v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_58;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 4u:
              *(_WORD *)(a1 + 80) |= 8u;
              BOOL v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_58;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 80) |= 1u;
              unsigned int v27 = *((void *)this + 1);
              BOOL v2 = *((void *)this + 2);
              char v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                int v38 = 0;
                int v31 = 0LL;
                if (v2 <= v27) {
                  BOOL v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    int v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }

                  int v39 = v27++;
                  uint64_t v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  char v14 = v38++ > 8;
                  if (v14)
                  {
                    int v31 = 0LL;
LABEL_83:
                    BOOL v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  int v31 = 0LL;
                }
                goto LABEL_83;
              }

              std::string v29 = 0;
              uint64_t v30 = 0;
              int v31 = 0LL;
              do
              {
                BOOL v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                int v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v29 += 7;
                unsigned int v27 = v2;
                char v14 = v30++ > 8;
              }

              while (!v14);
              int v31 = 0LL;
LABEL_84:
              *(void *)(a1 + 8) = v31;
LABEL_85:
              unint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              BOOL v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_58;
              }
              *(void *)(a1 + sub_100019CEC(v39 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              BOOL v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_58;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x80u;
              BOOL v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_58;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x10u;
              BOOL v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_74:
                BOOL v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_58:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_85;
            default:
              double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              BOOL v2 = *((void *)this + 1);
              goto LABEL_85;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

          *(_DWORD *)(a1 + 28) = v38;
          goto LABEL_83;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v41 = *((void *)this + 1);
          uint64_t v42 = *((void *)this + 2);
          unint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
          {
            uint64_t v44 = 0;
            int v45 = 0;
            int v46 = 0LL;
            do
            {
              uint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              uint64_t v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_82;
              }
              v44 += 7;
              uint64_t v41 = v47;
              char v14 = v45++ > 8;
            }

            while (!v14);
LABEL_70:
            int v46 = 0LL;
            goto LABEL_82;
          }

          uint64_t v57 = 0;
          unint64_t v58 = 0;
          int v46 = 0LL;
          if (v42 <= v41) {
            uint64_t v42 = *((void *)this + 1);
          }
          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_83;
      }

      while (1)
      {
        if (v42 == v41)
        {
          int v46 = 0LL;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_82;
        }

        double v59 = v41 + 1;
        std::string v60 = *(_BYTE *)(v43 + v41);
        *((void *)this + 1) = v59;
        v46 |= (unint64_t)(v60 & 0x7F) << v57;
        if ((v60 & 0x80) == 0) {
          break;
        }
        v57 += 7;
        uint64_t v41 = v59;
        char v14 = v58++ > 8;
        if (v14) {
          goto LABEL_70;
        }
      }

      if (*((_BYTE *)this + 24)) {
        int v46 = 0LL;
      }
LABEL_82:
      *(void *)(a1 + 16) = v46;
LABEL_83:
      BOOL v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    BOOL v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      int v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      BOOL v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        BOOL v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

          *(_DWORD *)(a1 + 28) = v38;
          goto LABEL_83;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          uint64_t v41 = *((void *)this + 1);
          uint64_t v42 = *((void *)this + 2);
          unint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
          {
            uint64_t v44 = 0;
            int v45 = 0;
            int v46 = 0LL;
            do
            {
              uint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              uint64_t v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_82;
              }
              v44 += 7;
              uint64_t v41 = v47;
              char v14 = v45++ > 8;
            }

            while (!v14);
LABEL_70:
            int v46 = 0LL;
            goto LABEL_82;
          }

          uint64_t v57 = 0;
          unint64_t v58 = 0;
          int v46 = 0LL;
          if (v42 <= v41) {
            uint64_t v42 = *((void *)this + 1);
          }
          break;
        default:
          double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_83;
      }

      while (1)
      {
        if (v42 == v41)
        {
          int v46 = 0LL;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_82;
        }

        double v59 = v41 + 1;
        std::string v60 = *(_BYTE *)(v43 + v41);
        *((void *)this + 1) = v59;
        v46 |= (unint64_t)(v60 & 0x7F) << v57;
        if ((v60 & 0x80) == 0) {
          break;
        }
        v57 += 7;
        uint64_t v41 = v59;
        char v14 = v58++ > 8;
        if (v14) {
          goto LABEL_70;
        }
      }

      if (*((_BYTE *)this + 24)) {
        int v46 = 0LL;
      }
LABEL_82:
      *(void *)(a1 + 16) = v46;
LABEL_83:
      BOOL v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    BOOL v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      int v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      BOOL v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        BOOL v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v40 = *(_DWORD *)(a2 + 104);
  v3 |= 0x1000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 104) = v40;
  BOOL v2 = *(void *)(a2 + 212);
  if ((v2 & 4) == 0)
  {
LABEL_42:
    if ((v2 & 2) == 0) {
      goto LABEL_43;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "soundMaxMeanOverArmSession", *(float *)(a1 + 196));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x1000000000LL) == 0)
  {
LABEL_39:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_40;
    }
LABEL_81:
    PB::TextFormatter::format(this, "soundMeanLast15s", *(float *)(a1 + 204));
    if ((*(void *)(a1 + 212) & 0x800) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_41;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x26u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_40:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x28u);
  }

  std::string v64 = *(void *)(a2 + 40);
  v6 |= 0x10u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 40) = v64;
  int v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x4000) == 0)
  {
LABEL_51:
    if ((v39 & 0x2000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "userIsAgeSet", *(_BYTE *)(a1 + 240));
  uint64_t v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0) {
      goto LABEL_53;
    }
LABEL_81:
    PB::TextFormatter::format(this, "userIsWeightSet", *(_BYTE *)(a1 + 242));
    if ((*(_DWORD *)(a1 + 244) & 0x80000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_54;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0x24u);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }

  unsigned int v27 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 40) = v27;
  BOOL v2 = *(void *)(a2 + 184);
  if ((v2 & 0x80) == 0)
  {
LABEL_37:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "stepLengthIsValid", *(_BYTE *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 48), 0x21u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }

        PB::Reader::recallMark(this, v79);
        goto LABEL_114;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_114:
      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 != 2)
    {
      std::string v60 = (char *)a1[5];
      double v59 = a1[6];
      if ((unint64_t)v60 >= v59)
      {
        std::string v67 = (char *)*v10;
        char v68 = (v60 - (_BYTE *)*v10) >> 3;
        std::string v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
LABEL_123:
        }
          sub_100007008();
        std::string v70 = v59 - (void)v67;
        if (v70 >> 2 > v69) {
          std::string v69 = v70 >> 2;
        }
        else {
          __int16 v71 = v69;
        }
        if (v71)
        {
          std::string v72 = (char *)sub_1000071BC(v11, v71);
          std::string v67 = (char *)a1[4];
          std::string v60 = (char *)a1[5];
        }

        else
        {
          std::string v72 = 0LL;
        }

        std::string v75 = &v72[8 * v68];
        *(void *)std::string v75 = 0LL;
        unint64_t v58 = v75 + 8;
        while (v60 != v67)
        {
          std::string v76 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v75 - 1) = v76;
          v75 -= 8;
        }

        a1[4] = v75;
        a1[5] = v58;
        a1[6] = &v72[8 * v71];
        if (v67) {
          operator delete(v67);
        }
      }

      else
      {
        *(void *)std::string v60 = 0LL;
        unint64_t v58 = v60 + 8;
      }

      a1[5] = v58;
      goto LABEL_110;
    }

    if ((PB::Reader::placeMark(this, v79, v26, a4) & 1) != 0) {
      return 0LL;
    }
    uint64_t v42 = *((void *)this + 1);
    unint64_t v43 = *((void *)this + 2);
    while (v42 < v43 && !*((_BYTE *)this + 24))
    {
      int v45 = (char *)a1[5];
      uint64_t v44 = a1[6];
      if ((unint64_t)v45 >= v44)
      {
        uint64_t v47 = (char *)*v10;
        uint64_t v48 = (v45 - (_BYTE *)*v10) >> 3;
        std::string v49 = v48 + 1;
        uint64_t v50 = v44 - (void)v47;
        if (v50 >> 2 > v49) {
          std::string v49 = v50 >> 2;
        }
        else {
          uint64_t v51 = v49;
        }
        if (v51)
        {
          int v52 = (char *)sub_1000071BC(v11, v51);
          uint64_t v47 = (char *)a1[4];
          int v45 = (char *)a1[5];
        }

        else
        {
          int v52 = 0LL;
        }

        int v53 = &v52[8 * v48];
        *(void *)int v53 = 0LL;
        int v46 = v53 + 8;
        while (v45 != v47)
        {
          int v54 = *((void *)v45 - 1);
          v45 -= 8;
          *((void *)v53 - 1) = v54;
          v53 -= 8;
        }

        a1[4] = v53;
        a1[5] = v46;
        a1[6] = &v52[8 * v51];
        if (v47) {
          operator delete(v47);
        }
      }

      else
      {
        *(void *)int v45 = 0LL;
        int v46 = v45 + 8;
      }

      a1[5] = v46;
      double v55 = *((void *)this + 1);
      if (v55 > 0xFFFFFFFFFFFFFFF7LL || v55 + 8 > *((void *)this + 2))
      {
LABEL_78:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_79;
      }

      *(v46 - 1) = *(void *)(*(void *)this + v55);
      unint64_t v43 = *((void *)this + 2);
      uint64_t v42 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v42;
    }

    goto LABEL_79;
  }

  return v6 == 0;
}

  int v46 = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 192) |= 0x40uLL;
  *(_DWORD *)(a1 + 64) = v46;
  uint64_t v13 = *(void *)(a2 + 192);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v13 & 0x100000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "workoutDetectionType", *(_DWORD *)(a1 + 184));
  uint64_t v7 = *(void *)(a1 + 192);
  if ((v7 & 0x20) != 0) {
    goto LABEL_80;
  }
LABEL_41:
  if ((v7 & 0x2000000000LL) != 0) {
LABEL_42:
  }
    PB::TextFormatter::format(this, "youthClassificationReason", *(_DWORD *)(a1 + 188));
  return PB::TextFormatter::endObject(this);
}

  double result = PB::Writer::write(this, *(float *)(v3 + 172), 0x26u);
  if ((*(void *)(v3 + 192) & 0x400000000LL) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x27u);
  }
  return result;
}

  uint64_t v30 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 72) = v30;
  BOOL v2 = *(void *)(a2 + 188);
  if ((v2 & 0x4000000000LL) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }

  PB::TextFormatter::format(this, "overrideHeadTurn", *(_BYTE *)(a1 + 186));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_81;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 164), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }

LABEL_94:
    ++v42;
  }

  while (v42 != v41);
LABEL_102:
  if (v43 != v41 && v43 == v11) {
    return 2LL;
  }
LABEL_105:
  uint64_t v47 = 10LL;
  if (v1 < 0xA) {
    uint64_t v47 = v1;
  }
  uint64_t v48 = &v11[v47];
  if (v47)
  {
    std::string v49 = v11;
    uint64_t v50 = &v11[v47];
    do
    {
      if (*v49 == 102)
      {
        uint64_t v51 = &_mh_execute_header.magic + 1;
        while (v51 != 10)
        {
          if (&v49[v51] == v48) {
            goto LABEL_119;
          }
          int v52 = v49[v51];
          int v53 = aFocusMode[v51++];
          if (v52 != v53) {
            goto LABEL_110;
          }
        }

        uint64_t v50 = v49;
      }

  unsigned int v27 = *(void *)(v5 + 168);
  if (!v27) {
    unsigned int v27 = *(void *)(qword_1019A0978 + 168);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  v27,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_100;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  (int)a2,  *(double *)(v5 + 144),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_96;
  }

  if (v137)
  {
    __int128 v138 = (double *)v137;
    operator delete(v137);
  }

  if (*(_BYTE *)(a2 + 272))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    uint64_t v40 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = *(void *)(a2 + 256);
      uint64_t v42 = *(void *)(a2 + 264);
      *(void *)std::string::size_type v200 = 68289539LL;
      *(_WORD *)&v200[8] = 2082;
      *(void *)&v200[10] = "";
      *(_WORD *)&v200[18] = 2049;
      *(void *)&v200[20] = v41;
      *(_WORD *)&v200[28] = 2049;
      *(void *)&v200[30] = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:requesting wifi tile download, latitude:%{private}f, longitude:%{private}f}",  v200,  0x26u);
    }

    (*(void (**)(void, uint64_t, double, double))(**(void **)(a1 + 120) + 208LL))( *(void *)(a1 + 120),  a2 + 216,  *(double *)(a2 + 256),  *(double *)(a2 + 264));
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    unint64_t v43 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v44 = *(void *)(a2 + 256);
      int v45 = *(void *)(a2 + 264);
      *(_DWORD *)std::string::size_type v200 = 134283777;
      *(void *)&v200[4] = v44;
      *(_WORD *)&v200[12] = 2049;
      *(void *)&v200[14] = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f",  v200,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      __int128 v129 = *(void *)(a2 + 256);
      uint64_t v130 = *(void *)(a2 + 264);
      *(_DWORD *)std::string __p = 134283777;
      *(void *)&__p[4] = v129;
      *(_WORD *)&_BYTE __p[12] = 2049;
      *(void *)&__p[14] = v130;
      LODWORD(v152) = 22;
      __int128 v131 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v131);
      if (v131 != v200) {
        free(v131);
      }
    }
  }

  if (*(_BYTE *)(a2 + 288))
  {
    int v46 = *(double *)(a2 + 280);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    uint64_t v47 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(void *)std::string::size_type v200 = 68289282LL;
      *(_WORD *)&v200[8] = 2082;
      *(void *)&v200[10] = "";
      *(_WORD *)&v200[18] = 2050;
      *(double *)&v200[20] = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:update schedule of refresh timer, delay_s:%{public}.09f}",  v200,  0x1Cu);
    }

    sub_100445A4C(a1, v48, v46);
    *(_BYTE *)(a1 + 152) = *(double *)(a2 + 280) == 15.0;
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    std::string v49 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v50 = *(unsigned __int8 *)(a1 + 152);
      *(_DWORD *)std::string::size_type v200 = 134349312;
      *(double *)&v200[4] = v46;
      *(_WORD *)&v200[12] = 1026;
      *(_DWORD *)&v200[14] = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "@WifiLogic, decision, timer, %{public}.1f, reIssue, %{public}d",  v200,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      v132 = *(unsigned __int8 *)(a1 + 152);
      *(_DWORD *)std::string __p = 134349312;
      *(double *)&__p[4] = v46;
      *(_WORD *)&_BYTE __p[12] = 1026;
      *(_DWORD *)&__p[14] = v132;
      LODWORD(v152) = 18;
      __int128 v133 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, timer, %{public}.1f, reIssue, %{public}d",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v133);
      if (v133 != v200) {
        free(v133);
      }
    }
  }

  if (*(_BYTE *)(a2 + 297))
  {
    sub_100445A4C(a1, v4, 1.79769313e308);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    uint64_t v51 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string::size_type v200 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, timer, cancel", v200, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      *(_WORD *)std::string __p = 0;
      LODWORD(v152) = 2;
      uint64_t v134 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, timer, cancel",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v134);
      if (v134 != v200) {
        free(v134);
      }
    }
  }

  if (*(_BYTE *)(a2 + 312))
  {
    int v52 = *(double *)(a2 + 304);
    [*(id *)(a1 + 144) setNextFireDelay:v52];
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    int v53 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string::size_type v200 = 134349056;
      *(double *)&v200[4] = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "@WifiLogic, decision, wsbtimer, %{public}.1f",  v200,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      *(_DWORD *)std::string __p = 134349056;
      *(double *)&__p[4] = v52;
      LODWORD(v152) = 12;
      __int128 v135 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, wsbtimer, %{public}.1f",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v135);
      if (v135 != v200) {
        free(v135);
      }
    }
  }

  if (*(_BYTE *)(a2 + 321))
  {
    [*(id *)(a1 + 144) setNextFireDelay:1.79769313e308];
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    int v54 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string::size_type v200 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEBUG,  "@WifiLogic, decision, wsbtimer, cancel",  v200,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      *(_WORD *)std::string __p = 0;
      LODWORD(v152) = 2;
      __int128 v136 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, wsbtimer, cancel",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v136);
      if (v136 != v200) {
        free(v136);
      }
    }
  }

  if (*(_BYTE *)(a2 + 323))
  {
    sub_1004970CC(1u);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101839360);
    }
    double v55 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string::size_type v200 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "@ClxWifi, Fix, 0, ll, N/A", v200, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101839360);
      }
      *(_WORD *)std::string __p = 0;
      LODWORD(v152) = 2;
      __int128 v137 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@ClxWifi, Fix, 0, ll, N/A",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v137);
      if (v137 != v200) {
        free(v137);
      }
    }

    *(_BYTE *)(a1 + 152) = 0;
    int v56 = *(void *)(a1 + 120);
    *(_DWORD *)std::string::size_type v200 = 9;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)v56 + 104LL))(v56, v200, 1LL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    uint64_t v57 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string::size_type v200 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyUnavail", v200, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      *(_WORD *)std::string __p = 0;
      LODWORD(v152) = 2;
      v142 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, notifyUnavail",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v142);
      if (v142 != v200) {
        free(v142);
      }
    }
  }

  if (*(_BYTE *)(a2 + 1128))
  {
    sub_100246564((uint64_t)__p);
    unint64_t v58 = *(_OWORD *)(a2 + 440);
    __int128 v178 = *(_OWORD *)(a2 + 424);
    v179 = v58;
    v180[0] = *(_OWORD *)(a2 + 456);
    *(_OWORD *)((char *)v180 + 12) = *(_OWORD *)(a2 + 468);
    double v59 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)&__p[32] = *(_OWORD *)(a2 + 360);
    __int128 v176 = v59;
    std::string v60 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)int v177 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)&v177[16] = v60;
    std::string v61 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 328);
    *(_OWORD *)&__p[16] = v61;
    memcpy(v181, (const void *)(a2 + 488), sizeof(v181));
    sub_1000F2F30(&v182, (uint64_t *)(a2 + 1008));
    std::string v62 = *(_OWORD *)(a2 + 1072);
    int v63 = *(_OWORD *)(a2 + 1104);
    __int128 v188 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)v189 = v63;
    *(void *)&v189[13] = *(void *)(a2 + 1117);
    std::string v64 = *(_OWORD *)(a2 + 1040);
    __int128 v184 = *(_OWORD *)(a2 + 1024);
    v185 = v64;
    __int128 v186 = *(_OWORD *)(a2 + 1056);
    v187 = v62;
    double v65 = *(double *)(a2 + 4720);
    unsigned int v66 = *(double *)(a2 + 4456);
    std::string v67 = *(double *)(a2 + 4472);
    char v68 = *(double *)&v177[12];
    if (qword_101934A90 != -1) {
      dispatch_once(&qword_101934A90, &stru_101839450);
    }
    std::string v69 = v65 - v66;
    std::string v70 = v65 - v67;
    __int16 v71 = v65 - v68;
    std::string v72 = (os_log_s *)qword_101934A98;
    if (os_log_type_enabled((os_log_t)qword_101934A98, OS_LOG_TYPE_DEBUG))
    {
      std::string v73 = v69;
      std::string v74 = v70;
      std::string v75 = v71;
      *(_DWORD *)std::string::size_type v200 = 136318466;
      *(void *)&v200[4] = "WiFi";
      *(_WORD *)&v200[12] = 1024;
      *(_DWORD *)&v200[14] = 1;
      *(_WORD *)&v200[18] = 2048;
      *(void *)&v200[20] = *(void *)&__p[4];
      *(_WORD *)&v200[28] = 2048;
      *(void *)&v200[30] = *(void *)&__p[12];
      *(_WORD *)&v200[38] = 2048;
      *(void *)&v200[40] = *(void *)&__p[20];
      *(_WORD *)&v200[48] = 1024;
      *(_DWORD *)&v200[50] = *(_DWORD *)&v177[20];
      *(_WORD *)int v201 = 2048;
      *(double *)&v201[2] = v73;
      __int128 v202 = 2048;
      v203 = v74;
      __int128 v204 = 1024;
      unint64_t v205 = 0;
      std::string::size_type v206 = 2048;
      CFStringRef v207 = *(void *)&__p[28];
      __int128 v208 = 2048;
      uint64_t v209 = *(void *)&__p[36];
      __int128 v210 = 1024;
      v211 = 0;
      unint64_t v212 = 2048;
      uint64_t v213 = v75;
      __int128 v214 = 1024;
      __int128 v215 = v180[0];
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3f,sinceReg,%.3f,Confirmed,%d,Altitude,%.2f,Verti calAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%f,integrity,%d",  v200,  0x7Au);
    }

    if (sub_1002921D0(117, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934A90 != -1) {
        dispatch_once(&qword_101934A90, &stru_101839450);
      }
      __int128 v138 = v69;
      __int128 v139 = v70;
      v140 = v71;
      __int128 v156 = 136318466;
      v157 = (uint64_t)"WiFi";
      __int128 v158 = 1024;
      *(_DWORD *)v159 = 1;
      *(_WORD *)&v159[4] = 2048;
      *(void *)&v159[6] = *(void *)&__p[4];
      *(_WORD *)&v159[14] = 2048;
      *(void *)&v159[16] = *(void *)&__p[12];
      *(_WORD *)&v159[24] = 2048;
      *(void *)&v159[26] = *(void *)&__p[20];
      *(_WORD *)&v159[34] = 1024;
      *(_DWORD *)&v159[36] = *(_DWORD *)&v177[20];
      *(_WORD *)__int128 v160 = 2048;
      *(double *)&v160[2] = v138;
      CFStringRef v161 = 2048;
      __int128 v162 = v139;
      uint64_t v163 = 1024;
      __int128 v164 = 0;
      v165 = 2048;
      __int128 v166 = *(void *)&__p[28];
      uint64_t v167 = 2048;
      __int128 v168 = *(void *)&__p[36];
      __int128 v169 = 1024;
      __int128 v170 = 0;
      __int128 v171 = 2048;
      __int128 v172 = v140;
      std::string::size_type v173 = 1024;
      std::string::size_type v174 = v180[0];
      __int128 v141 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934A98,  2LL,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3f,sinceReg,%.3f,Confirmed,%d,Alti tude,%.2f,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%f,integrity,%d",  (const char *)&v156,  122,  *(double *)__dst,  *(double *)&__dst[1],  v154,  v155);
      sub_10029211C( "LOCATION",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v141);
      if (v141 != v200) {
        free(v141);
      }
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101839360);
    }
    std::string v76 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string::size_type v200 = 134284801;
      *(void *)&v200[4] = *(void *)&__p[4];
      *(_WORD *)&v200[12] = 2049;
      *(void *)&v200[14] = *(void *)&__p[12];
      *(_WORD *)&v200[22] = 2050;
      *(void *)&v200[24] = *(void *)&__p[20];
      *(_WORD *)&v200[32] = 2049;
      *(void *)&v200[34] = *(void *)&__p[28];
      *(_WORD *)&v200[42] = 2050;
      *(void *)&v200[44] = *(void *)&__p[36];
      *(_WORD *)&v200[52] = 2050;
      *(void *)int v201 = *(void *)&v177[12];
      _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, alt, %{private}.1f, altunc, %{public}.1f, timestamp, %{public}.3f",  v200,  0x3Eu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101839360);
      }
      __int128 v156 = 134284801;
      v157 = *(void *)&__p[4];
      __int128 v158 = 2049;
      *(void *)v159 = *(void *)&__p[12];
      *(_WORD *)&v159[8] = 2050;
      *(void *)&v159[10] = *(void *)&__p[20];
      *(_WORD *)&v159[18] = 2049;
      *(void *)&v159[20] = *(void *)&__p[28];
      *(_WORD *)&v159[28] = 2050;
      *(void *)&v159[30] = *(void *)&__p[36];
      *(_WORD *)&v159[38] = 2050;
      *(void *)__int128 v160 = *(void *)&v177[12];
      LODWORD(v152) = 62;
      __int128 v143 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, alt, %{priva te}.1f, altunc, %{public}.1f, timestamp, %{public}.3f",  &v156,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v143);
      if (v143 != v200) {
        free(v143);
      }
    }

    sub_1004970CC(0);
    std::string v77 = *(void *)(a1 + 120);
    *(_DWORD *)std::string::size_type v200 = 0;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, void, uint64_t, void))(*(void *)v77 + 112LL))( v77,  v200,  __p,  0LL,  0xFFFFFFFFLL,  0LL);
    sub_101015B60(v200);
    sub_101015C90(*(_OWORD **)v200, __p);
    std::string v78 = *(std::__shared_weak_count **)&v200[8];
    if (*(void *)&v200[8])
    {
      std::string v79 = (unint64_t *)(*(void *)&v200[8] + 8LL);
      do
        std::string v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    std::string v81 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string::size_type v200 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyLoc", v200, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      LOWORD(v156) = 0;
      LODWORD(v152) = 2;
      v144 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, notifyLoc",  &v156,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v144);
      if (v144 != v200) {
        free(v144);
      }
    }

    std::string v82 = v193;
    if (v193)
    {
      p_shared_owners = (unint64_t *)&v193->__shared_owners_;
      do
        std::string v84 = __ldaxr(p_shared_owners);
      while (__stlxr(v84 - 1, p_shared_owners));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }

    if (v192 < 0) {
      operator delete(v191);
    }
    uint64_t v85 = (std::__shared_weak_count *)*((void *)&v190 + 1);
    if (*((void *)&v190 + 1))
    {
      uint64_t v86 = (unint64_t *)(*((void *)&v190 + 1) + 8LL);
      do
        __int128 v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }

    v88 = v183;
    if (v183)
    {
      uint64_t v89 = (unint64_t *)&v183->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
  }

  if (*(_BYTE *)(a2 + 1160))
  {
    if (*(void *)(a2 + 1136) == *(void *)(a2 + 1144)) {
      sub_101239AA8(qword_101934860 == -1);
    }
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    char v91 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      char v92 = 0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 1144) - *(void *)(a2 + 1136)) >> 2);
      *(_DWORD *)std::string::size_type v200 = 134349056;
      *(void *)&v200[4] = v92;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "notifying clients of %{public}ld batched wifi locations",  v200,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      __int128 v145 = 0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 1144) - *(void *)(a2 + 1136)) >> 2);
      *(_DWORD *)std::string __p = 134349056;
      *(void *)&__p[4] = v145;
      LODWORD(v152) = 12;
      CFStringRef v146 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "notifying clients of %{public}ld batched wifi locations",  __p,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v146);
      if (v146 != v200) {
        free(v146);
      }
    }

    sub_100246564((uint64_t)__p);
    __int128 v93 = *(void *)(a2 + 1144);
    uint64_t v94 = *(_OWORD *)(v93 - 140);
    *(_OWORD *)std::string __p = *(_OWORD *)(v93 - 156);
    *(_OWORD *)&__p[16] = v94;
    __int128 v95 = *(_OWORD *)(v93 - 108);
    v96 = *(_OWORD *)(v93 - 76);
    uint64_t v97 = *(_OWORD *)(v93 - 124);
    *(_OWORD *)int v177 = *(_OWORD *)(v93 - 92);
    *(_OWORD *)&v177[16] = v96;
    *(_OWORD *)&__p[32] = v97;
    __int128 v176 = v95;
    int v98 = *(_OWORD *)(v93 - 44);
    char v99 = *(_OWORD *)(v93 - 28);
    char v100 = *(_OWORD *)(v93 - 60);
    *(_OWORD *)((char *)v180 + 12) = *(_OWORD *)(v93 - 16);
    v179 = v98;
    v180[0] = v99;
    __int128 v178 = v100;
    sub_1004490E4((uint64_t *)(a2 + 1136), v200);
    __int128 v101 = *(_OWORD *)v200;
    *(void *)std::string::size_type v200 = 0LL;
    *(void *)&v200[8] = 0LL;
    int v102 = (std::__shared_weak_count *)*((void *)&v190 + 1);
    __int128 v190 = v101;
    if (v102)
    {
      __int128 v103 = (unint64_t *)&v102->__shared_owners_;
      do
        uint64_t v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }

    __int128 v105 = *(std::__shared_weak_count **)&v200[8];
    if (*(void *)&v200[8])
    {
      char v106 = (unint64_t *)(*(void *)&v200[8] + 8LL);
      do
        __int128 v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }

    __int128 v108 = *(void *)(a1 + 120);
    *(_DWORD *)std::string::size_type v200 = 22;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, void, uint64_t, void))(*(void *)v108 + 112LL))( v108,  v200,  __p,  0LL,  0xFFFFFFFFLL,  0LL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    std::string v109 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v110 = 0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 1144) - *(void *)(a2 + 1136)) >> 2);
      *(_DWORD *)std::string::size_type v200 = 134349056;
      *(void *)&v200[4] = v110;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "WsbCalc, notify, %{public}lu", v200, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      int v147 = 0x6F96F96F96F96F97LL * ((uint64_t)(*(void *)(a2 + 1144) - *(void *)(a2 + 1136)) >> 2);
      __int128 v156 = 134349056;
      v157 = v147;
      LODWORD(v152) = 12;
      __int128 v148 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WsbCalc, notify, %{public}lu",  &v156,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v148);
      if (v148 != v200) {
        free(v148);
      }
    }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    __int128 v111 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string::size_type v200 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEBUG,  "@WifiLogic, decision, notifyBatched",  v200,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(v200, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
      LOWORD(v156) = 0;
      LODWORD(v152) = 2;
      v149 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, notifyBatched",  &v156,  v152);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v149);
      if (v149 != v200) {
        free(v149);
      }
    }

    __int16 v112 = v193;
    if (v193)
    {
      __int128 v113 = (unint64_t *)&v193->__shared_owners_;
      do
        int v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }

    if (v192 < 0) {
      operator delete(v191);
    }
    __int16 v115 = (std::__shared_weak_count *)*((void *)&v190 + 1);
    if (*((void *)&v190 + 1))
    {
      int v116 = (unint64_t *)(*((void *)&v190 + 1) + 8LL);
      do
        __int16 v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }

    __int128 v118 = v183;
    if (v183)
    {
      char v119 = (unint64_t *)&v183->__shared_owners_;
      do
        __int128 v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
  }

  return HIDWORD(v152);
}

            unint64_t v43 = operator new(0x130uLL);
            sub_100D45D2C(v43, v11, a2, DictionaryOfClasses, a1, *(void *)(a1 + 32));
            goto LABEL_110;
          }

  sub_1002F0B04(__p);
  __int16 v71 = (int *)(a1 + 880);
  std::string v72 = sub_1002A7CB0((uint64_t)__p[0].__r_.__value_.__l.__data_, "NumEnablePromptsPerApplication", (_DWORD *)(a1 + 880));
  std::string v73 = v72;
  std::string v74 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (!__p[0].__r_.__value_.__l.__size_) {
    goto LABEL_98;
  }
  std::string v75 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
  do
    std::string v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
    if (!v73) {
      goto LABEL_104;
    }
  }

  else
  {
LABEL_98:
    if (!v72) {
      goto LABEL_104;
    }
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  std::string v77 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    std::string v78 = *v71;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v78;
    _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "#warning Maximum location services enabled prompts per application overridden to %{public}d",  (uint8_t *)__p,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    unint64_t v151 = *v71;
    LODWORD(v178) = 67240192;
    DWORD1(v178) = v151;
    LODWORD(v158) = 8;
    uint64_t v152 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#warning Maximum location services enabled prompts per application overridden to %{public}d",  &v178,  v158);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)",  "%s\n",  (const char *)v152);
    if (v152 != __p) {
      free(v152);
    }
  }

  unsigned int v27 = *(void *)(v5 + 168);
  if (!v27) {
    unsigned int v27 = *(void *)(qword_1019A11B8 + 168);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  v27,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_100;
  }

  uint64_t v26 = *(void *)(v5 + 176);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_1019A1D38 + 176);
  }
  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  v26,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_100;
  }

  std::string v49 = *(void *)(a1 + 104);
  if (!v49) {
    std::string v49 = *(void *)(qword_1019A1D38 + 104);
  }
  uint64_t v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC2EFC(v49, a2);
  uint64_t v51 = (int)v50;
  else {
    int v52 = 1;
  }
  v4 += v51 + v52 + 1;
  unint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x4000) == 0)
  {
LABEL_62:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_112;
    }
    goto LABEL_106;
  }

  double result = *(float *)(a2 + 40);
  v3 |= 0x20uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 40) = result;
  BOOL v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_96;
  }

  PB::TextFormatter::format(this, "yMax", *(float *)(a1 + 188));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000000000LL) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_46;
    }
    goto LABEL_96;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 116), 0x2Cu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_96;
  }

  double result = *(float *)(a2 + 148);
  v5 |= 0x4000000uLL;
  *BOOL v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 1sub_100019CEC(v39 + 48) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x40000000000000LL) == 0)
  {
LABEL_29:
    if ((v7 & 0x20000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }

  PB::TextFormatter::format(this, "faultCounter", *(void *)(a1 + 32));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_96;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 148), 0x18u);
  uint64_t v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40000000000000LL) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }

  double result = *(float *)(a2 + 220);
  v5 |= 0x10000000000000uLL;
  *BOOL v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 220) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_96;
  }

  PB::TextFormatter::format(this, "audioDvRmsThreshold", *(float *)(a1 + 72));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_96;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 140), 0xFu);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000LL) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_96;
  }

  uint64_t v16 = *(_BYTE *)(a2 + 304);
  int v17 = v6 >> 16;
  v6 |= 0x200uLL;
  *BOOL v2 = v5;
  *(_BYTE *)(a1 + 326) = v17;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 304) = v16;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_14:
    if ((v8 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_96;
  }

  PB::TextFormatter::format(this, "isAudioSupported", *(_BYTE *)(a1 + 305));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x800) == 0)
  {
LABEL_13:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_96;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 304), 0x6Au);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_96;
  }

  int v17 = *(_BYTE *)(a2 + 169);
  v3 |= 0x400000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 169) = v17;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  BOOL v2 = *(void *)(a2 + 204);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_96;
  }

  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet0", *(_BYTE *)(a1 + 165));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x80000000000LL) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_96;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 160), 0x6Fu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_96;
  }

        PB::Reader::recallMark(this, v92);
        goto LABEL_133;
      }

      if ((_DWORD)v27 == 1)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        char v28 = *((void *)this + 1);
        std::string v29 = *((void *)this + 2);
        uint64_t v30 = *(void *)this;
        if (v28 > 0xFFFFFFFFFFFFFFF5LL || v28 + 10 > v29)
        {
          std::string v64 = 0;
          double v65 = 0;
          uint64_t v33 = 0LL;
          if (v29 <= v28) {
            std::string v29 = *((void *)this + 1);
          }
          while (1)
          {
            if (v29 == v28)
            {
              LODWORD(v33) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }

            unsigned int v66 = v28 + 1;
            std::string v67 = *(_BYTE *)(v30 + v28);
            *((void *)this + 1) = v66;
            v33 |= (unint64_t)(v67 & 0x7F) << v64;
            if ((v67 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            char v28 = v66;
            __int16 v20 = v65++ > 8;
            if (v20)
            {
LABEL_88:
              LODWORD(v33) = 0;
              goto LABEL_114;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v33) = 0;
          }
        }

        else
        {
          int v31 = 0;
          int v32 = 0;
          uint64_t v33 = 0LL;
          while (1)
          {
            CFStringRef v34 = v28 + 1;
            *((void *)this + 1) = v28 + 1;
            __int16 v35 = *(_BYTE *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            char v28 = v34;
            __int16 v20 = v32++ > 8;
            if (v20) {
              goto LABEL_88;
            }
          }
        }

        PB::Reader::recallMark(this, v92);
        goto LABEL_133;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_133:
      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 != 2)
    {
      std::string v72 = *(char **)(a1 + 40);
      __int16 v71 = *(void *)(a1 + 48);
      if ((unint64_t)v72 >= v71)
      {
        std::string v79 = (char *)*v10;
        std::string v80 = (v72 - (_BYTE *)*v10) >> 3;
        std::string v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61) {
LABEL_144:
        }
          sub_100007008();
        std::string v82 = v71 - (void)v79;
        if (v82 >> 2 > v81) {
          std::string v81 = v82 >> 2;
        }
        else {
          std::string v83 = v81;
        }
        if (v83)
        {
          std::string v84 = (char *)sub_1000071BC(v11, v83);
          std::string v79 = *(char **)(a1 + 32);
          std::string v72 = *(char **)(a1 + 40);
        }

        else
        {
          std::string v84 = 0LL;
        }

        __int128 v87 = &v84[8 * v80];
        *(void *)__int128 v87 = 0LL;
        unsigned int v66 = v87 + 8;
        while (v72 != v79)
        {
          v88 = *((void *)v72 - 1);
          v72 -= 8;
          *((void *)v87 - 1) = v88;
          v87 -= 8;
        }

        *(void *)(a1 + 32) = v87;
        *(void *)(a1 + 40) = v66;
        *(void *)(a1 + sub_100019CEC(v39 + 48) = &v84[8 * v83];
        if (v79) {
          operator delete(v79);
        }
      }

      else
      {
        *(void *)std::string v72 = 0LL;
        unsigned int v66 = v72 + 8;
      }

      *(void *)(a1 + 40) = v66;
      goto LABEL_129;
    }

    if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0) {
      return 0LL;
    }
    uint64_t v50 = *((void *)this + 1);
    uint64_t v51 = *((void *)this + 2);
    while (v50 < v51 && !*((_BYTE *)this + 24))
    {
      int v53 = *(char **)(a1 + 40);
      int v52 = *(void *)(a1 + 48);
      if ((unint64_t)v53 >= v52)
      {
        double v55 = (char *)*v10;
        int v56 = (v53 - (_BYTE *)*v10) >> 3;
        uint64_t v57 = v56 + 1;
        unint64_t v58 = v52 - (void)v55;
        if (v58 >> 2 > v57) {
          uint64_t v57 = v58 >> 2;
        }
        else {
          double v59 = v57;
        }
        if (v59)
        {
          std::string v60 = (char *)sub_1000071BC(v11, v59);
          double v55 = *(char **)(a1 + 32);
          int v53 = *(char **)(a1 + 40);
        }

        else
        {
          std::string v60 = 0LL;
        }

        std::string v61 = &v60[8 * v56];
        *(void *)std::string v61 = 0LL;
        int v54 = v61 + 8;
        while (v53 != v55)
        {
          std::string v62 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v61 - 1) = v62;
          v61 -= 8;
        }

        *(void *)(a1 + 32) = v61;
        *(void *)(a1 + 40) = v54;
        *(void *)(a1 + sub_100019CEC(v39 + 48) = &v60[8 * v59];
        if (v55) {
          operator delete(v55);
        }
      }

      else
      {
        *(void *)int v53 = 0LL;
        int v54 = v53 + 8;
      }

      *(void *)(a1 + 40) = v54;
      int v63 = *((void *)this + 1);
      if (v63 > 0xFFFFFFFFFFFFFFF7LL || v63 + 8 > *((void *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }

      *(v54 - 1) = *(void *)(*(void *)this + v63);
      uint64_t v51 = *((void *)this + 2);
      uint64_t v50 = *((void *)this + 1) + 8LL;
      *((void *)this + 1) = v50;
    }

    goto LABEL_94;
  }

  return v6 == 0;
}

  int v45 = *(_BYTE *)(a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(void *)(result + 188) = v3;
  *(_BYTE *)(result + 186) = v45;
  BOOL v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80000000000LL) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000LL) == 0) {
      goto LABEL_48;
    }
    goto LABEL_96;
  }

  PB::TextFormatter::format(this, "verticalRotationSimilarity", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000000LL) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_96;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000000LL) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_96;
  }

LABEL_110:
      ++v49;
    }

    while (v49 != v48);
  }

  else
  {
    uint64_t v50 = v11;
  }

  double result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x27,  (int)a2,  *(double *)(v5 + 232),  a3);
  uint64_t v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x80) == 0)
  {
LABEL_41:
    if ((v7 & 0x100) == 0) {
      goto LABEL_42;
    }
    goto LABEL_112;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_nInterpolatedCatherine),  @"nInterpolatedCatherine");
  has = self->_has;
  if ((*(_WORD *)&has & 0x4000) == 0)
  {
LABEL_88:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_89;
    }
    goto LABEL_112;
  }

          sub_1004F2598();
          if ((sub_1004F64FC() & 0x100) != 0)
          {
            if (*(void *)(a2 + 232) == *(void *)(a2 + 224)
              && !sub_1002954D0(*(double *)(a2 + 72), *(double *)(a2 + 80)))
            {
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              std::string v49 = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v50 = &__str;
                if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v51 = &v126;
                }
                else {
                  uint64_t v51 = (std::string *)v126.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __dst = 136380931;
                *(void *)&__dst[4] = v50;
                *(_WORD *)&__dst[12] = 2081;
                *(void *)&__dst[14] = v51;
                _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Not adding fence %{private}s/%{private}s because coordinate is invalid",  __dst,  0x16u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_242;
              }
              bzero(__dst, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              int v52 = &__str;
              if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              int v53 = (v126.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &v126
                  : (std::string *)v126.__r_.__value_.__r.__words[0];
              LODWORD(v140.__r_.__value_.__l.__data_) = 136380931;
              *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
              WORD2(v140.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v140.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v53;
              _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Not adding fence %{private}s/%{private}s because coordinate is invalid",  &v140,  22);
              double v55 = (char *)v54;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v54);
              if (v55 == __dst) {
                goto LABEL_242;
              }
LABEL_292:
              free(v55);
              goto LABEL_242;
            }

            if (sub_100A09D8C(&__str, v123))
            {
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              int v36 = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
              {
                if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v37 = __str.__r_.__value_.__s.__size_;
                }
                else {
                  uint64_t v37 = __str.__r_.__value_.__l.__size_;
                }
                int v38 = __dst;
                sub_1000392EC((uint64_t)__dst, v37 + 1);
                if (__dst[23] < 0) {
                  int v38 = *(_BYTE **)__dst;
                }
                if (v37)
                {
                  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    int v39 = &__str;
                  }
                  else {
                    int v39 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  memmove(v38, v39, v37);
                }

                *(_WORD *)&v38[v37] = 47;
                if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v40 = &v126;
                }
                else {
                  uint64_t v40 = (std::string *)v126.__r_.__value_.__r.__words[0];
                }
                if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v41 = v126.__r_.__value_.__s.__size_;
                }
                else {
                  uint64_t v41 = v126.__r_.__value_.__l.__size_;
                }
                uint64_t v42 = std::string::append((std::string *)__dst, (const std::string::value_type *)v40, v41);
                unint64_t v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
                v140.__r_.__value_.__l.__cap_ = v42->__r_.__value_.__l.__cap_;
                *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v43;
                v42->__r_.__value_.__l.__size_ = 0LL;
                v42->__r_.__value_.__l.__cap_ = 0LL;
                v42->__r_.__value_.__r.__words[0] = 0LL;
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
                uint64_t v44 = &v140;
                if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v44 = (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                }
                LODWORD(v139.__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
                _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "canPerformMonitoringForFence is true, fence, %{private}s",  (uint8_t *)&v139,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(__dst, 0x65CuLL);
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101847D40);
                }
                std::string v84 = qword_101934878;
                sub_10065EF44((const void **)&__str.__r_.__value_.__l.__data_, &v140);
                if ((v140.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v85 = &v140;
                }
                else {
                  uint64_t v85 = (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                }
                LODWORD(v139.__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  v84,  2LL,  "canPerformMonitoringForFence is true, fence, %{private}s",  &v139,  12);
                __int128 v87 = v86;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v87);
                if (v87 != __dst) {
                  free(v87);
                }
              }

              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              int v45 = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
              {
                sub_100923668((uint64_t)&__str, (std::stringbuf::string_type *)__dst);
                int v46 = __dst[23] >= 0 ? __dst : *(_BYTE **)__dst;
                LODWORD(v140.__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
                _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "Adding fence %{private}s",  (uint8_t *)&v140,  0xCu);
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(__dst, 0x65CuLL);
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101847D40);
                }
                v88 = qword_101934878;
                sub_100923668((uint64_t)&__str, &v140);
                if ((v140.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v89 = &v140;
                }
                else {
                  uint64_t v89 = (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                }
                LODWORD(v139.__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = (std::string::size_type)v89;
                LODWORD(v97) = 12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  v88,  2LL,  "Adding fence %{private}s",  &v139,  v97);
                char v91 = v90;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v91);
                if (v91 != __dst) {
                  free(v91);
                }
              }

              if ((sub_1009E61B0(a1 + 14, (uint64_t)&__str) & 1) != 0)
              {
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101847D40);
                }
                uint64_t v47 = (os_log_s *)qword_101934878;
                if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
                {
                  sub_100923668((uint64_t)&v110, (std::stringbuf::string_type *)__dst);
                  uint64_t v48 = __dst[23] >= 0 ? __dst : *(_BYTE **)__dst;
                  LODWORD(v140.__r_.__value_.__l.__data_) = 136380675;
                  *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
                  _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Fence:Add sending kNotificationFenceSetupCompleted, fence, %{private}s",  (uint8_t *)&v140,  0xCu);
                  if ((__dst[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__dst);
                  }
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(__dst, 0x65CuLL);
                  if (qword_101934870 != -1) {
                    dispatch_once(&qword_101934870, &stru_101847D40);
                  }
                  char v92 = qword_101934878;
                  sub_100923668((uint64_t)&v110, &v140);
                  if ((v140.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    __int128 v93 = &v140;
                  }
                  else {
                    __int128 v93 = (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v139.__r_.__value_.__l.__data_) = 136380675;
                  *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
                  LODWORD(v97) = 12;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  v92,  0LL,  "Fence:Add sending kNotificationFenceSetupCompleted, fence, %{private}s",  &v139,  v97);
                  __int128 v95 = v94;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v95);
                  if (v95 != __dst) {
                    free(v95);
                  }
                }

                *(_DWORD *)std::string __dst = 3;
                (*(void (**)(uint64_t *, _BYTE *, std::string *, void, uint64_t, void))(*a1 + 152))( a1,  __dst,  &v110,  0LL,  0xFFFFFFFFLL,  0LL);
                BOOL v11 = 1LL;
                goto LABEL_252;
              }

          int v36 = v17;
LABEL_111:
          free(v36);
          return;
        }
      }

      return;
    }

    sub_100C0C278(a4, (uint64_t)&v98);
    sub_1001B4C40(a1 + 41);
    int v32 = DWORD2(v99);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    uint64_t v33 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)__int16 v112 = DWORD2(v99);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894CB8);
      }
      *(_DWORD *)std::string __p = 67109120;
      *(_DWORD *)&__p[4] = DWORD2(v99);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u",  __p);
      __int128 v87 = (uint8_t *)v86;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::Ap pRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, con st CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v86);
      if (v87 != buf) {
        free(v87);
      }
    }

    if (!*(_BYTE *)(a5 + 8))
    {
      int v17 = (uint8_t *)sub_100599BF4((uint64_t)a1, a2, a3, 0, v32, SHIDWORD(v99));
      if (!v17) {
        return;
      }
      if (DWORD2(v99))
      {
        int v52 = 0LL;
        *(void *)&uint64_t v51 = 134219266LL;
        char v92 = v51;
        do
        {
          uint64_t v94 = 0;
          __int128 v93 = 0LL;
          sub_100C0C188((unsigned __int16 *)&v17[v52 * HIDWORD(v99)], (uint64_t)&v93);
          int v53 = operator new(0x20uLL);
          int v54 = v93;
          v53[1] = a1 + 41;
          v53[2] = v54;
          *((_DWORD *)v53 + 6) = v94;
          double v55 = a1[41];
          *int v53 = v55;
          *(void *)(v55 + 8) = v53;
          a1[41] = v53;
          ++a1[43];
          int v56 = (unsigned __int16)v93;
          uint64_t v57 = (*(uint64_t (**)(void *))(*a1 + 80LL))(a1);
          unint64_t v58 = sub_1008ADB4C((uint64_t)(a1 + 6));
          double v59 = (*(double (**)(void *))(*a1 + 56LL))(a1);
          std::string v60 = WORD1(v93);
          std::string v61 = (*(uint64_t (**)(void *))(*a1 + 72LL))(a1);
          std::string v62 = sub_1008ADB70((uint64_t)(a1 + 6));
          (*(void (**)(void *))(*a1 + 64LL))(a1);
          if (!*(_BYTE *)(a5 + 9))
          {
            std::string v64 = v63;
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101894CB8);
            }
            double v65 = v58 + (double)v56 / (double)v57 * v59 + v59 / (double)v57 * 0.5;
            unsigned int v66 = v62 + (double)v60 / (double)v61 * v64 + v64 / (double)v61 * 0.5;
            std::string v67 = (os_log_s *)qword_101934A78;
            if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
            {
              char v68 = DWORD2(v99);
              std::string v69 = a1[43];
              sub_100C34680((unsigned __int16 *)&v93, (std::stringbuf::string_type *)__p);
              std::string v70 = __p;
              if (v106[3] < 0) {
                std::string v70 = *(_BYTE **)__p;
              }
              *(_DWORD *)__int128 buf = v92;
              *(void *)__int16 v112 = v52;
              *(_WORD *)&v112[8] = 1024;
              *(_DWORD *)&v112[10] = v68;
              __int128 v113 = 2048;
              *(void *)int v114 = v69;
              *(_WORD *)&v114[8] = 2080;
              *(void *)&v114[10] = v70;
              __int16 v115 = 2048;
              int v116 = v65;
              __int16 v117 = 2048;
              __int128 v118 = v66;
              _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf",  buf,  0x3Au);
              if ((v106[3] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              __int16 v71 = qword_101934A78;
              std::string v72 = DWORD2(v99);
              std::string v73 = a1[43];
              sub_100C34680((unsigned __int16 *)&v93, &v95);
              std::string v74 = &v95;
              if ((v95.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                std::string v74 = (std::stringbuf::string_type *)v95.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string __p = v92;
              *(void *)&__p[4] = v52;
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = v72;
              __int128 v105 = 2048;
              *(void *)char v106 = v73;
              *(_WORD *)&v106[8] = 2080;
              *(void *)&v106[10] = v74;
              __int128 v107 = 2048;
              __int128 v108 = v65;
              std::string v109 = 2048;
              uint64_t v110 = v66;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v71,  2LL,  "TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf",  __p,  58,  v89,  v90,  *(double *)&v92,  *((double *)&v92 + 1));
              std::string v76 = v75;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_ Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, c onst void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendation IndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v76);
            }
          }

          ++v52;
        }

        while (v52 < DWORD2(v99));
      }

      goto LABEL_110;
    }

    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    CFStringRef v34 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "TILE: CLSpatialDataTileTemplate, headers only, give up",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    *(_WORD *)std::string __p = 0;
    LODWORD(v88) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: CLSpatialDataTileTemplate, headers only, give up",  __p,  v88);
    int v31 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const C LTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTi lesManager_Type::AppRecommendationEntry]",  "%s\n",  v35);
LABEL_64:
    if (v31 == buf) {
      return;
    }
    int v36 = v31;
    goto LABEL_111;
  }

  sub_100C0C158(a4, (uint64_t)&v96);
  sub_1001B4C40(a1 + 44);
  unsigned int v27 = DWORD2(v97);
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894CB8);
  }
  char v28 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)__int16 v112 = DWORD2(v97);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = DWORD2(v97);
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u",  __p);
    uint64_t v85 = (uint8_t *)v84;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const C LTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTi lesManager_Type::AppRecommendationEntry]",  "%s\n",  v84);
    if (v85 != buf) {
      free(v85);
    }
  }

  if (!*(_BYTE *)(a5 + 8))
  {
    int v17 = (uint8_t *)sub_100599BF4((uint64_t)a1, a2, a3, 0, v27, SHIDWORD(v97));
    if (!v17) {
      return;
    }
    if (DWORD2(v97))
    {
      uint64_t v37 = 0LL;
      do
      {
        uint64_t v94 = 0;
        __int128 v93 = 0LL;
        sub_100C0C188((unsigned __int16 *)&v17[v37 * HIDWORD(v97)], (uint64_t)&v93);
        int v38 = operator new(0x20uLL);
        int v39 = v93;
        v38[1] = a1 + 44;
        v38[2] = v39;
        *((_DWORD *)v38 + 6) = v94;
        uint64_t v40 = a1[44];
        *int v38 = v40;
        *(void *)(v40 + 8) = v38;
        a1[44] = v38;
        ++a1[46];
        if (!*(_BYTE *)(a5 + 9))
        {
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894CB8);
          }
          uint64_t v41 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v42 = DWORD2(v99);
            unint64_t v43 = a1[46];
            sub_100C34680((unsigned __int16 *)&v93, (std::stringbuf::string_type *)__p);
            uint64_t v44 = __p;
            if (v106[3] < 0) {
              uint64_t v44 = *(_BYTE **)__p;
            }
            *(_DWORD *)__int128 buf = 134218754;
            *(void *)__int16 v112 = v37;
            *(_WORD *)&v112[8] = 1024;
            *(_DWORD *)&v112[10] = v42;
            __int128 v113 = 2048;
            *(void *)int v114 = v43;
            *(_WORD *)&v114[8] = 2080;
            *(void *)&v114[10] = v44;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "TILE: entry, %3lu, %3u, %3lu, %s",  buf,  0x26u);
            if ((v106[3] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A70 != -1) {
              dispatch_once(&qword_101934A70, &stru_101894CB8);
            }
            int v45 = qword_101934A78;
            int v46 = DWORD2(v99);
            uint64_t v47 = a1[46];
            sub_100C34680((unsigned __int16 *)&v93, &v95);
            uint64_t v48 = &v95;
            if ((v95.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v48 = (std::stringbuf::string_type *)v95.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 134218754;
            *(void *)&__p[4] = v37;
            *(_WORD *)&_BYTE __p[12] = 1024;
            *(_DWORD *)&__p[14] = v46;
            __int128 v105 = 2048;
            *(void *)char v106 = v47;
            *(_WORD *)&v106[8] = 2080;
            *(void *)&v106[10] = v48;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  2LL,  "TILE: entry, %3lu, %3u, %3lu, %s",  __p,  38,  v89,  v90);
            uint64_t v50 = v49;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Ty pe::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexE ntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v50);
          }
        }

        ++v37;
      }

      while (v37 < DWORD2(v97));
    }

    goto LABEL_110;
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894CB8);
  }
  std::string v29 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "TILE: CLSpatialDataTileTemplate, headers only, give up",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894CB8);
    }
    *(_WORD *)std::string __p = 0;
    LODWORD(v88) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: CLSpatialDataTileTemplate, headers only, give up",  __p,  v88);
    int v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppR ecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const C LTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTi lesManager_Type::AppRecommendationEntry]",  "%s\n",  v30);
    goto LABEL_64;
  }

            PB::Reader::recallMark(this, v107);
          }

          else
          {
            std::string v78 = *(char **)(a1 + 64);
            std::string v77 = *(void *)(a1 + 72);
            if ((unint64_t)v78 >= v77)
            {
              char v91 = (char *)*v10;
              char v92 = (v78 - (_BYTE *)*v10) >> 2;
              __int128 v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62) {
LABEL_172:
              }
                sub_100007008();
              uint64_t v94 = v77 - (void)v91;
              if (v94 >> 1 > v93) {
                __int128 v93 = v94 >> 1;
              }
              else {
                __int128 v95 = v93;
              }
              if (v95)
              {
                v96 = (char *)sub_10000956C(v106, v95);
                char v91 = *(char **)(a1 + 56);
                std::string v78 = *(char **)(a1 + 64);
              }

              else
              {
                v96 = 0LL;
              }

              __int128 v101 = &v96[4 * v92];
              *(_DWORD *)__int128 v101 = 0;
              std::string v74 = v101 + 4;
              while (v78 != v91)
              {
                int v102 = *((_DWORD *)v78 - 1);
                v78 -= 4;
                *((_DWORD *)v101 - 1) = v102;
                v101 -= 4;
              }

              *(void *)(a1 + 56) = v101;
              *(void *)(a1 + 64) = v74;
              *(void *)(a1 + 72) = &v96[4 * v95];
              if (v91) {
                operator delete(v91);
              }
            }

            else
            {
              *(_DWORD *)std::string v78 = 0;
              std::string v74 = v78 + 4;
            }

            *(void *)(a1 + 64) = v74;
LABEL_156:
            __int128 v103 = *((void *)this + 1);
            if (v103 <= 0xFFFFFFFFFFFFFFFBLL && v103 + 4 <= *((void *)this + 2))
            {
              *(v74 - 1) = *(_DWORD *)(*(void *)this + v103);
LABEL_160:
              char v28 = *((void *)this + 1) + 4LL;
LABEL_161:
              *((void *)this + 1) = v28;
            }

            else
            {
LABEL_158:
              *((_BYTE *)this + 24) = 1;
            }
          }

  double result = *(float *)(a2 + 184);
  v5 |= 0x800000000uLL;
  *BOOL v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 184) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x400000000LL) == 0)
  {
LABEL_45:
    if ((v7 & 0x80000000000LL) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }

  PB::TextFormatter::format(this, "hgDeltaVZUnconditional", *(float *)(a1 + 212));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000000000LL) == 0)
  {
LABEL_44:
    if ((v6 & 0x100000000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_112;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 184), 0x28u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x400000000LL) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000LL) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }

  double result = *(float *)(a2 + 16);
  v5 |= 2uLL;
  *BOOL v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 16) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_37:
    if ((v7 & 0x800) == 0) {
      goto LABEL_38;
    }
    goto LABEL_112;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *(float *)(a1 + 136));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000LL) == 0)
  {
LABEL_36:
    if ((v6 & 0x200000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_112;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 279), 0x1Fu);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0) {
      goto LABEL_37;
    }
    goto LABEL_112;
  }

  char v28 = *(_BYTE *)(a2 + 313);
  *(_WORD *)(a1 + 324) = v6;
  v6 |= 0x40000uLL;
  *BOOL v2 = v5;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(_BYTE *)(a1 + 313) = v28;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_112;
  }

  PB::TextFormatter::format(this, "kAudioDvMaxRmsThresholdStretchRO", *(float *)(a1 + 92));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x2000) == 0)
  {
LABEL_29:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_112;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 313), 0x7Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_112;
  }

  PB::TextFormatter::format(this, "cumulativeRotationHarmonicMean", *(float *)(a1 + 84));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_112;
  }

  uint64_t v37 = *(_DWORD *)(a2 + 132);
  v3 |= 0x8000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 132) = v37;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  BOOL v2 = *(void *)(a2 + 204);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_112;
  }

  PB::TextFormatter::format(this, "kEnergyAndChaosOrSaturationMetRO", *(_BYTE *)(a1 + 180));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x400000000000000LL) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_112;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 169), 0x3F0u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_32:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_112;
  }

LABEL_119:
  if (v50 != v11 || v50 == v48) {
    return 4LL;
  }
  else {
    return 0LL;
  }
}

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_177;
  }
  if ((v3 & 0x10000) != 0)
  {
    std::string v69 = *(void *)(a1 + 136);
    if (!v69) {
      std::string v69 = *(void *)(qword_1019A0978 + 136);
    }
    std::string v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007AA08(v69, a2);
    __int16 v71 = (int)v70;
    else {
      std::string v72 = 1;
    }
    uint64_t v4 = (v4 + v71 + v72 + 2);
    unint64_t v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_141;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }

  std::string v73 = *(void *)(a1 + 144);
  if (!v73) {
    std::string v73 = *(void *)(qword_1019A0978 + 144);
  }
  std::string v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007B148(v73, a2);
  std::string v75 = (int)v74;
  else {
    std::string v76 = 1;
  }
  uint64_t v4 = (v4 + v75 + v76 + 2);
  unint64_t v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_147;
  }

      *(void *)(v3 + 8) = v86;
      *(void *)(v3 + 16) = v80;
      *(void *)(v3 + 24) = v87;
      if (v73) {
        operator delete(v73);
      }
      goto LABEL_121;
    }
  }

  uint64_t v48 = *(void *)(a2 + 216);
  *(_DWORD *)(a1 + 368) |= 8u;
  *(void *)(a1 + 216) = v48;
  int v36 = *(_DWORD *)(a2 + 368);
  if ((v36 & 0x10) == 0)
  {
LABEL_88:
    if ((v36 & 0x20) == 0) {
      goto LABEL_89;
    }
    goto LABEL_122;
  }

  *(float *)&uint64_t v6 = self->_totalDropoutTime;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"totalDropoutTime");
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_97:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_98;
    }
    goto LABEL_121;
  }

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_177;
  }
  if ((v3 & 0x10000) != 0)
  {
    std::string v69 = *(void *)(a1 + 136);
    if (!v69) {
      std::string v69 = *(void *)(qword_1019A11B8 + 136);
    }
    std::string v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F6F78(v69, a2);
    __int16 v71 = (int)v70;
    else {
      std::string v72 = 1;
    }
    uint64_t v4 = (v4 + v71 + v72 + 2);
    unint64_t v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_141;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }

  std::string v73 = *(void *)(a1 + 144);
  if (!v73) {
    std::string v73 = *(void *)(qword_1019A11B8 + 144);
  }
  std::string v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DF874(v73, a2);
  std::string v75 = (int)v74;
  else {
    std::string v76 = 1;
  }
  uint64_t v4 = (v4 + v75 + v76 + 2);
  unint64_t v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_147;
  }

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_163;
  }
  if ((v3 & 0x10000) != 0)
  {
    std::string v67 = *(void *)(a1 + 128);
    if (!v67) {
      std::string v67 = *(void *)(qword_1019A1CE8 + 128);
    }
    char v68 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2E674(v67, a2);
    std::string v69 = (int)v68;
    else {
      std::string v70 = 1;
    }
    uint64_t v4 = (v4 + v69 + v70 + 2);
    unint64_t v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_139;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }

  __int16 v71 = *(void *)(a1 + 136);
  if (!v71) {
    __int16 v71 = *(void *)(qword_1019A1CE8 + 136);
  }
  std::string v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2F198(v71, a2);
  std::string v73 = (int)v72;
  else {
    std::string v74 = 1;
  }
  uint64_t v4 = (v4 + v73 + v74 + 2);
  unint64_t v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_145;
  }

      int v56 = __str + 1;
      uint64_t v57 = v73;
LABEL_120:
      double v55 = (uint64_t *)v55[1];
      if (v55 != &v157) {
        continue;
      }
      break;
    }

    if ((int)v57 >= 1)
    {
      *((_BYTE *)v40 + 200) = 1;
      if (v56 > 1) {
        *((_BYTE *)v40 + 192) = 1;
      }
      v40[49] = v146;
      if (!*(_BYTE *)(a1 + 96)) {
        goto LABEL_153;
      }
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      __int128 v103 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v104 = *(void *)(a1 + 1136);
        __int128 v105 = *((void *)v40 + 4);
        char v106 = *((unsigned __int8 *)v40 + 200);
        __int128 v107 = *((unsigned __int8 *)v40 + 192);
        *(_DWORD *)__int128 buf = 134349825;
        __int128 v176 = v104;
        int v177 = 2049;
        __int128 v178 = v105;
        v179 = 1026;
        std::string::size_type v180 = v106;
        unint64_t v181 = 1026;
        __int128 v182 = v107;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEBUG,  "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d",  buf,  0x22u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        __int128 v125 = *(void *)(a1 + 1136);
        unint64_t v126 = *((void *)v40 + 4);
        __int128 v127 = *((unsigned __int8 *)v40 + 200);
        CFStringRef v128 = *((unsigned __int8 *)v40 + 192);
        uint64_t v163 = 134349825;
        __int128 v164 = v125;
        v165 = 2049;
        __int128 v166 = v126;
        uint64_t v167 = 1026;
        __int128 v168 = v127;
        __int128 v169 = 1026;
        __int128 v170 = v128;
        LODWORD(v144) = 34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d",  &v163,  v144);
        uint64_t v130 = (uint8_t *)v129;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v129);
        if (v130 != buf) {
          free(v130);
        }
        char v99 = 0;
      }

      else
      {
LABEL_153:
        char v99 = 0;
      }

      goto LABEL_161;
    }

  double result = *(float *)(a2 + 224);
  v5 |= 0x200000000000uLL;
  *BOOL v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 224) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x4000000000LL) == 0)
  {
LABEL_54:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }

  PB::TextFormatter::format(this, "lgArclengthXYZOverEpoch", *(float *)(a1 + 244));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000000000000LL) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000000LL) == 0) {
      goto LABEL_54;
    }
    goto LABEL_121;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 224), 0x31u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x4000000000LL) == 0)
  {
LABEL_54:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }

  double result = *(float *)(a2 + 32);
  v5 |= 0x20uLL;
  *BOOL v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 32) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10) == 0)
  {
LABEL_46:
    if ((v4 & 8) == 0) {
      goto LABEL_47;
    }
    goto LABEL_121;
  }

  PB::TextFormatter::format(this, "isAudioSupported", *(_BYTE *)(a1 + 271));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0) {
      goto LABEL_46;
    }
    goto LABEL_121;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 24), 0x28u);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_121;
  }

  double result = *(float *)(a2 + 256);
  v5 |= 0x2000000000000000uLL;
  *BOOL v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 256) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((v8 & 0x80) == 0)
  {
LABEL_39:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_121;
  }

  PB::TextFormatter::format(this, "kMaxAudioRmsRO", *(float *)(a1 + 116));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_121;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 256), 0xD1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x80) == 0)
  {
LABEL_39:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_121;
  }

  double result = *(float *)(a2 + 76);
  v5 |= 0x200uLL;
  *BOOL v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 76) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x80000000000000LL) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_121;
  }

  PB::TextFormatter::format(this, "firstTimestampMAPDecision", *(void *)(a1 + 16));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_121;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 76), 9u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x80000000000000LL) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_121;
  }

  uint64_t v47 = *(_BYTE *)(a2 + 198);
  uint64_t v48 = v4 >> 16;
  v4 |= 0x800uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v48;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 198) = v47;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  BOOL v2 = *(void *)(a2 + 204);
  if ((v2 & 0x800) == 0)
  {
LABEL_41:
    if ((v2 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_121;
  }

  PB::TextFormatter::format(this, "kMaxChaosRO0", *(float *)(a1 + 48));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_40:
    if ((v5 & 0x100) == 0) {
      goto LABEL_41;
    }
    goto LABEL_121;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 185), 0x3F9u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000000000LL) == 0)
  {
LABEL_41:
    if ((v5 & 0x40) == 0) {
      goto LABEL_42;
    }
    goto LABEL_121;
  }

            PB::Reader::recallMark(this, v106);
          }

          else
          {
            std::string v82 = *(char **)(a1 + 16);
            std::string v81 = *(void *)(a1 + 24);
            if ((unint64_t)v82 >= v81)
            {
              __int128 v93 = (char *)*v10;
              uint64_t v94 = (v82 - (_BYTE *)*v10) >> 2;
              __int128 v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 62) {
LABEL_171:
              }
                sub_100007008();
              v96 = v81 - (void)v93;
              if (v96 >> 1 > v95) {
                __int128 v95 = v96 >> 1;
              }
              else {
                uint64_t v97 = v95;
              }
              if (v97)
              {
                int v98 = (char *)sub_10000956C(v11, v97);
                __int128 v93 = *(char **)(a1 + 8);
                std::string v82 = *(char **)(a1 + 16);
              }

              else
              {
                int v98 = 0LL;
              }

              __int128 v101 = &v98[4 * v94];
              *(_DWORD *)__int128 v101 = 0;
              std::string v80 = v101 + 4;
              while (v82 != v93)
              {
                int v102 = *((_DWORD *)v82 - 1);
                v82 -= 4;
                *((_DWORD *)v101 - 1) = v102;
                v101 -= 4;
              }

              *(void *)(a1 + 8) = v101;
              *(void *)(a1 + 16) = v80;
              *(void *)(a1 + 24) = &v98[4 * v97];
              if (v93) {
                operator delete(v93);
              }
            }

            else
            {
              *(_DWORD *)std::string v82 = 0;
              std::string v80 = v82 + 4;
            }

            *(void *)(a1 + 16) = v80;
LABEL_154:
            __int128 v103 = *((void *)this + 1);
            if (v103 <= 0xFFFFFFFFFFFFFFFBLL && v103 + 4 <= *((void *)this + 2))
            {
              *(v80 - 1) = *(_DWORD *)(*(void *)this + v103);
LABEL_158:
              std::string v77 = *((void *)this + 1) + 4LL;
LABEL_159:
              *((void *)this + 1) = v77;
            }

            else
            {
LABEL_156:
              *((_BYTE *)this + 24) = 1;
            }
          }

uint64_t sub_10005A964(uint64_t a1, uint64_t a2)
{
  if (!v14)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    unint64_t v3 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Localization trigger does not have a valid trigger UUID",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      v11[0] = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  16LL,  "Localization trigger does not have a valid trigger UUID",  v11,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLMicroLocationTriggerManager::setCurrentLocalizationUUID(const CLMicroLocationProto::RecordingEvent &)",  "%s\n",  v10);
    }
  }

  *(_DWORD *)__int128 buf = 0;
  sub_100018E34((int *)buf);
  uint64_t v4 = sub_100017338((ssize_t)buf);
  uint64_t v7 = v13[0];
  uint64_t v6 = v13[1];
  if (!v14)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
  }

  int v8 = *(unsigned __int8 *)(a1 + 141);
  *(void *)(a1 + 125) = v7;
  *(void *)(a1 + 133) = v6;
  if (!v8) {
    *(_BYTE *)(a1 + 141) = 1;
  }
  return sub_100019D7C((unsigned int *)buf);
}

void sub_10005AB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_10005AB6C(unsigned __int8 *a1, void *a2, int a3)
{
  if (*a2 != a2[1])
  {
    if (!a1[1]) {
      return 0LL;
    }
    int v17 = a2;
    int v18 = a3;
    uint64_t v19 = a1;
    int v5 = *a1;
    if (*a1)
    {
      if (v5 != 2)
      {
        if (v5 == 1)
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181A190);
          }
          uint64_t v6 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 68289026;
            int v21 = 0;
            __int16 v22 = 2082;
            uint64_t v23 = "";
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:handeling rescheduled localizations while localizing, shouldn't happen}",  buf,  0x12u);
          }

          uint64_t v8 = *a2;
          uint64_t v7 = a2[1];
          while (v8 != v7)
          {
            (*(void (**)(void, uint64_t, void))(**((void **)a1 + 23) + 24LL))( *((void *)a1 + 23),  v8,  0LL);
            v8 += 136LL;
          }
        }

        return 1LL;
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      uint64_t v10 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 68289026;
        int v21 = 0;
        __int16 v22 = 2082;
        uint64_t v23 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:handeling rescheduled localizations while recording, shouldn't happen}",  buf,  0x12u);
      }

      uint64_t v12 = (void (***)(void))*((void *)a1 + 6);
      BOOL v11 = (void (***)(void))*((void *)a1 + 7);
      if (v11 != v12)
      {
        uint64_t v13 = v11 - 17;
        char v14 = v11 - 17;
        do
        {
          uint64_t v15 = *v14;
          v14 -= 17;
          (*v15)(v13);
          BOOL v16 = v13 == v12;
          uint64_t v13 = v14;
        }

        while (!v16);
      }

      *((void *)a1 + 7) = v12;
      (*(void (**)(void, void))(**((void **)a1 + 23) + 40LL))(*((void *)a1 + 23), *a1);
      *a1 = 0;
    }

    sub_10005ADA0((uint64_t)&v17);
  }

  return 1LL;
}

void sub_10005ADA0(uint64_t a1)
{
  uint64_t v1 = **(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 8LL);
  if (v1 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    char v5 = 1;
    do
    {
      if ((v5 & 1) != 0)
      {
        v12[0] = j__CFAbsoluteTimeGetCurrent_1();
        sub_10005871C(v4, v1, 1LL, v12, 0LL, 0);
        sub_100058B10(v4, v1, 0, *(_DWORD *)(a1 + 8), 0, (uint64_t)v10);
      }

      else
      {
        (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 184) + 24LL))( *(void *)(v4 + 184),  v1,  0LL);
        sub_100058B10(v4, v1, 0, *(_DWORD *)(a1 + 8), 1u, (uint64_t)v10);
      }

      uint64_t v6 = *(void *)(v4 + 184);
      int v9 = 0;
      sub_100018E34(&v9);
      *(void *)&__int128 v11 = sub_100017338((ssize_t)&v9);
      *((void *)&v11 + 1) = v7;
      double Current_1 = j__CFAbsoluteTimeGetCurrent_1();
      sub_100058F98(&v11, (uint64_t)v10, (uint64_t)v12, Current_1);
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 96LL))(v6, v12);
      sub_100081760((wireless_diagnostics::google::protobuf::MessageLite *)&v13);
      sub_100019D7C((unsigned int *)&v9);
      sub_10008809C((wireless_diagnostics::google::protobuf::MessageLite *)v10);
      char v5 = 0;
      v1 += 136LL;
    }

    while (v1 != v2);
  }

void sub_10005AF58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
}

void sub_10005AFA0(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsEnableInternalFallbackLocalization",  0x8000100u,  kCFAllocatorNull);
  char v5 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v4, (BOOL *)&v26);
  CFRelease(v4);
  int v6 = LOBYTE(v26);
  uint64_t v7 = *(std::__shared_weak_count **)v28;
  if (*(void *)v28)
  {
    uint64_t v8 = (unint64_t *)(*(void *)v28 + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v6) {
    char v10 = 0;
  }
  else {
    char v10 = v5;
  }
  if ((v10 & 1) == 0 && *(_DWORD *)(a1 + 96) == 1)
  {
    sub_1002F0B04(buf);
    CFStringRef v11 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaxDurationBetweenLocalizationTriggers",  0x8000100u,  kCFAllocatorNull);
    int v12 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v11, &v26);
    CFRelease(v11);
    double v13 = v26;
    char v14 = *(std::__shared_weak_count **)v28;
    if (*(void *)v28)
    {
      uint64_t v15 = (unint64_t *)(*(void *)v28 + 8LL);
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    if (v12) {
      double v17 = v13;
    }
    else {
      double v17 = 3600.0;
    }
    double v18 = sub_10010323C(a2);
    double v19 = *(double *)(a1 + 112);
    if (v18 >= v19)
    {
      if (v18 - v19 < v17) {
        return;
      }
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A190);
      }
      __int16 v20 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        double v21 = *(double *)(a1 + 112);
        *(_DWORD *)__int128 buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)char v28 = 2082;
        *(void *)&v28[2] = "";
        __int16 v29 = 2050;
        double v30 = v18;
        __int16 v31 = 2050;
        double v32 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:triggerFallbackLocalizationEvent: fLastTrigger is in the past, triggerTS:%{publ ic}.3f, fLastLocalizationTriggerTS:%{public}.3f}",  buf,  0x26u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181A190);
        }
      }

      __int16 v22 = (os_log_s *)qword_1019348D8;
      if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
        goto LABEL_30;
      }
      double v23 = *(double *)(a1 + 112);
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v28 = 2082;
      *(void *)&v28[2] = "";
      __int16 v29 = 2050;
      double v30 = v18;
      __int16 v31 = 2050;
      double v32 = v23;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "triggerFallbackLocalizationEvent: fLastTrigger is in the past",  "{msg%{public}.0s:triggerFallbackLocalizationEvent: fLastTrigger is in the past, triggerTS:%{public }.3f, fLastLocalizationTriggerTS:%{public}.3f}",  buf,  0x26u);
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
LABEL_30:
    int v24 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      double v25 = v18 - *(double *)(a1 + 112);
      *(_DWORD *)__int128 buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)char v28 = 2082;
      *(void *)&v28[2] = "";
      __int16 v29 = 2050;
      double v30 = v17;
      __int16 v31 = 2050;
      double v32 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:triggerFallbackLocalizationEvent: requesting localization on screen on because we haven't localized for more than , Max time between localizations:%{public}f, Time since last_s:%{public}.09f}",  buf,  0x26u);
    }

    sub_1000578AC((unsigned __int8 *)a1, a2, 1, 0, 0);
  }

void sub_10005B36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10005B394(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (!*(_BYTE *)(result + 124)) {
      sub_10005B3D4(result, 1);
    }
    return sub_1000594D8(v2, 1LL);
  }

  return result;
}

void sub_10005B3D4(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 124) = 0;
  if (*(_BYTE *)(a1 + 175)) {
    *(_BYTE *)(a1 + 175) = 0;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 88LL))(*(void *)(a1 + 184)) & 1) != 0)
  {
    *(_OWORD *)__int128 buf = *(_OWORD *)(a1 + 72);
    *(void *)&uint8_t buf[16] = *(void *)(a1 + 88);
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 88) = 0LL;
    *(void *)(a1 + 72) = 0LL;
    sub_10005BB78((void **)(a1 + 72));
    *(void *)(a1 + 72) = 0LL;
    *(void *)(a1 + 80) = 0LL;
    *(void *)(a1 + 88) = 0LL;
    memset(v5, 0, sizeof(v5));
    int v6 = v5;
    sub_10005B848((void ***)&v6);
    sub_10005AB6C((unsigned __int8 *)a1, buf, a2);
    v5[0] = (void **)buf;
    sub_10005B848(v5);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181A190);
    }
    CFStringRef v4 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager: get delayed trigger timeout, awaiting display on}",  buf,  0x12u);
    }
  }

void sub_10005B544( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__n128 sub_10005B55C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 125);
  *a2 = result;
  a2[1].n128_u8[0] = *(_BYTE *)(a1 + 141);
  return result;
}

__n128 sub_10005B570@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 159);
  *a2 = result;
  a2[1].n128_u8[0] = *(_BYTE *)(a1 + 175);
  return result;
}

BOOL sub_10005B584(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 129) & 4) == 0) {
    return 0LL;
  }
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_1019A0980 + 88);
  }
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  int v3 = *((char *)v2 + 23);
  if (v3 < 0)
  {
    if (v2[1] != 17) {
      return 0LL;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }

  else if (v3 != 17)
  {
    return 0LL;
  }

  CFStringRef v4 = (uint64_t *)*v2;
  uint64_t v5 = v2[1];
  int v6 = *((unsigned __int8 *)v2 + 16);
  return v4 == (uint64_t *)0x6C616E7265746E49LL && v5 == 0x614D746E65696C43LL && v6 == 99;
}

uint64_t sub_10005B614(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = a1[1];
  if (a1[124]) {
    int v4 = (*(_DWORD *)(a2 + 128) >> 10) & 1;
  }
  else {
    int v4 = 0;
  }
  BOOL v5 = sub_10005B584(a2) && a1[101] != 0;
  if (v3) {
    uint64_t v6 = v4 | v5;
  }
  else {
    uint64_t v6 = 1LL;
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181A190);
  }
  uint64_t v7 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290050;
    v9[1] = 0;
    __int16 v10 = 2082;
    CFStringRef v11 = "";
    __int16 v12 = 1026;
    int v13 = v3 ^ 1;
    __int16 v14 = 1026;
    int v15 = v4;
    __int16 v16 = 1026;
    BOOL v17 = v5;
    __int16 v18 = 1026;
    int v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLMicroLocationTriggerManager: shouldReject, spectatingDiabled:%{public}hhd, isReco rdingRequestDuringWaitForRescheduledTrigger:%{public}hhd, macTriggerThrottle:%{public}hhd, result:%{public}hhd}",  (uint8_t *)v9,  0x2Au);
  }

  return v6;
}

std::string *sub_10005B76C@<X0>(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  __n128 result = (std::string *)sub_1010DDBC0(a2, "");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A0980 + 16);
    }
    if ((*(_BYTE *)(v6 + 44) & 4) != 0)
    {
      uint64_t v8 = (const std::string **)(v6 + 16);
      return std::string::operator=(a2, *v8);
    }
  }

  if ((v5 & 0x400) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A0980 + 88);
    }
    if ((*(_BYTE *)(v7 + 44) & 4) != 0)
    {
      uint64_t v8 = (const std::string **)(v7 + 16);
      return std::string::operator=(a2, *v8);
    }
  }

  return result;
}