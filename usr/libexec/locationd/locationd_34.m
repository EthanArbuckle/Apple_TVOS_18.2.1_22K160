void sub_1011B6044(uint64_t a1)
{
  os_log_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "disableRhythmicGnssEngine", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    v9[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "disableRhythmicGnssEngine",  v9,  2);
    v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::disableRhythmicGnssEngine()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  v3 = *(void *)(a1 + 40);
  if (v3)
  {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:3];
  }

  v4 = *(void *)(a1 + 56);
  if (v4) {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:1];
  }
  v5 = *(void *)(a1 + 48);
  if (v5) {
    [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:4];
  }
  v6 = *(void *)(a1 + 8);
  sub_1011B42D8(a1);
  if (*(_BYTE *)(a1 + 160)) {
    *(_BYTE *)(a1 + 160) = 0;
  }
}

BOOL sub_1011B625C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 106))
    {
      sub_1011B8B24((double *)a1);
      double v2 = *(double *)(a1 + 112);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v3 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 416);
        uint64_t v5 = *(void *)(a1 + 432);
        *(_DWORD *)buf = 134349568;
        uint64_t v25 = v4;
        __int16 v26 = 2050;
        uint64_t v27 = v5;
        __int16 v28 = 2050;
        double v29 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CLRGE,power budget,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerB udgetLastBackedup_s,%{public}.3lf,allowedDurationInSec,%{public}.3lf",  buf,  0x20u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        uint64_t v12 = *(void *)(a1 + 416);
        uint64_t v13 = *(void *)(a1 + 432);
        *(_DWORD *)v19 = 134349568;
        *(void *)&v19[4] = v12;
        __int16 v20 = 2050;
        uint64_t v21 = v13;
        __int16 v22 = 2050;
        double v23 = v2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,power budget,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerB udgetLastBackedup_s,%{public}.3lf,allowedDurationInSec,%{public}.3lf",  v19,  32);
        v15 = (uint8_t *)v14;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v14);
        if (v15 != buf) {
          free(v15);
        }
      }

      if (*(double *)(a1 + 416) >= v2)
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        v6 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLRGE,power budget exceeds permitted level or invalid",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_1018A1D80);
          }
          *(_WORD *)v19 = 0;
          LODWORD(v18) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,power budget exceeds permitted level or invalid",  v19,  v18,  *(void *)v19);
LABEL_25:
          v10 = (uint8_t *)v8;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v8);
          if (v10 != buf) {
            free(v10);
          }
          return 0LL;
        }

        return result;
      }
    }

    else
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v11 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "CLRGE,power budget not applicable",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        *(_WORD *)v19 = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,power budget not applicable",  v19,  2);
        v17 = (uint8_t *)v16;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v16);
        if (v17 != buf) {
          free(v17);
        }
      }
    }

    return 1LL;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  v9 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CLRGE,#warning,hasPowerBudget,no clients",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    *(_WORD *)v19 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,#warning,hasPowerBudget,no clients",  v19,  2,  *(void *)v19);
    goto LABEL_25;
  }

  return result;
}

void sub_1011B67A0(uint64_t a1)
{
  double v1 = *(double *)(a1 + 312);
  if (v1 != 0.0)
  {
    v6 = CFDateCreate(kCFAllocatorDefault, v1);
    if (IOPMCancelScheduledPowerEvent(v6, @"CLRhythmicGnss", @"wake"))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v7 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 312);
        *(_DWORD *)buf = 134283521;
        uint64_t v17 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLRGE,System wake couldn't cancel for,%{private}.3lf",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      uint64_t v9 = *(void *)(a1 + 312);
      LODWORD(v15) = 134283521;
      *(void *)((char *)&v15 + 4) = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,System wake couldn't cancel for,%{private}.3lf",  &v15,  12,  v15);
    }

    else
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v11 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 312);
        *(_DWORD *)buf = 134283521;
        uint64_t v17 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "CLRGE,System wake cancelled for,%{private}.3lf",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      uint64_t v13 = *(void *)(a1 + 312);
      LODWORD(v15) = 134283521;
      *(void *)((char *)&v15 + 4) = v13;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,System wake cancelled for,%{private}.3lf",  &v15,  12,  v15);
    }

    v14 = (uint8_t *)v10;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::cancelAPWakeRequest()", "%s\n", v10);
    if (v14 != buf) {
      free(v14);
    }
LABEL_25:
    CFRelease(v6);
    return;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLRGE,there is no schedule to wake AP up,so not cancelling",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v15) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,there is no schedule to wake AP up,so not cancelling",  &v15,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::cancelAPWakeRequest()", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

void sub_1011B6BA8(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    sub_1011BFA3C(v8, a2, a3, a4);
  }
  if (*(void *)(a1 + 232)) {
    sub_1011B8F70(a1 + 208, a2, a3, a4);
  }
}

void sub_1011B6C18(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startWifiLocation", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,startWifiLocation",  v12,  2);
    v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (*(_BYTE *)(a1 + 304))
  {
    if (*(void *)(a1 + 24))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v3 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,register wifi client", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,register wifi client",  v12,  v11);
        uint64_t v8 = (uint8_t *)v7;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }

      [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:0 registrationInfo:0];
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,gnss is not running",  v12,  v11);
      v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

void sub_1011B7020(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startCellLocation", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    v12[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,startCellLocation",  v12,  2);
    v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (*(_BYTE *)(a1 + 304))
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v3 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,register cell client", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        v12[0] = 0;
        LODWORD(v11) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,register cell client",  v12,  v11);
        uint64_t v8 = (uint8_t *)v7;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }

      [*(id *)(*(void *)(a1 + 32) + 16) register:*(void *)(*(void *)(a1 + 32) + 8) forNotification:0 registrationInfo:0];
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,gnss is not running",  v12,  v11);
      v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

void sub_1011B7428(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,requestAPWake", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v18) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,requestAPWake",  &v18,  2);
    __int128 v15 = (uint8_t *)v14;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(double *)(a1 + 120) != 1.79769313e308 || *(_BYTE *)(a1 + 104))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1011B67A0(a1);
      double v4 = Current + *(double *)(a1 + 120);
      double v5 = v4 - (sub_101171D4C() - *(double *)(a1 + 272));
      v6 = CFDateCreate(kCFAllocatorDefault, v5);
      *(double *)(a1 + 312) = v5;
      if (IOPMSchedulePowerEvent(v6, @"CLRhythmicGnss", @"wake"))
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        v7 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLRGE,Couldn't schedule wake event!",  buf,  2u);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        LOWORD(v18) = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,Couldn't schedule wake event!",  &v18,  v17,  v18);
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        uint64_t v12 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134283521;
          double v20 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "CLRGE,System wake now scheduled for,%{private}.3lf",  buf,  0xCu);
        }

        if (!sub_1002921D0(115, 2)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        LODWORD(v18) = 134283521;
        *(double *)((char *)&v18 + 4) = v5;
        LODWORD(v17) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,System wake now scheduled for,%{private}.3lf",  &v18,  v17,  v18);
      }

      v16 = (uint8_t *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v8);
      if (v16 != buf) {
        free(v16);
      }
LABEL_33:
      CFRelease(v6);
      return;
    }

    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v13 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGE,requestAPWake,don't wake AP", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,requestAPWake,don't wake AP",  &v18,  v17,  (void)v18);
LABEL_26:
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v9 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CLRGE,#warning,requestAPWake,no clients",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      LOWORD(v18) = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,#warning,requestAPWake,no clients",  &v18,  v17,  (void)v18);
      goto LABEL_26;
    }
  }

void sub_1011B7A40(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,stopWifiLocation", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,stopWifiLocation",  v13,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (!*(_BYTE *)(a1 + 304))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    double v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,gnss is not running",  v13,  v12,  v13[0]);
LABEL_40:
    uint64_t v11 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v5);
    if (v11 != buf) {
      free(v11);
    }
    return;
  }

  if (*(_BYTE *)(a1 + 305))
  {
    if (*(void *)(a1 + 24))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v3 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,unregister wifi client", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,unregister wifi client",  v13,  v12);
        v10 = (uint8_t *)v9;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      [*(id *)(*(void *)(a1 + 24) + 16) unregister:*(void *)(*(void *)(a1 + 24) + 8) forNotification:0];
    }

    return;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  v6 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRGE,Wifi and Cell are not running", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,Wifi and Cell are not running",  v13,  v12,  v13[0]);
    goto LABEL_40;
  }

void sub_1011B7F18(uint64_t a1)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v2 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,stopCellLocation", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v13[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,stopCellLocation",  v13,  2);
    uint64_t v8 = (uint8_t *)v7;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  if (!*(_BYTE *)(a1 + 304))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    double v4 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,gnss is not running",  v13,  v12,  v13[0]);
LABEL_40:
    uint64_t v11 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v5);
    if (v11 != buf) {
      free(v11);
    }
    return;
  }

  if (*(_BYTE *)(a1 + 305))
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v3 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,unregister cell client", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        LOWORD(v13[0]) = 0;
        LODWORD(v12) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,unregister cell client",  v13,  v12);
        v10 = (uint8_t *)v9;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v9);
        if (v10 != buf) {
          free(v10);
        }
      }

      [*(id *)(*(void *)(a1 + 32) + 16) unregister:*(void *)(*(void *)(a1 + 32) + 8) forNotification:0];
    }

    return;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  v6 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRGE,Wifi and Cell are not running", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v13[0]) = 0;
    LODWORD(v12) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,Wifi and Cell are not running",  v13,  v12,  v13[0]);
    goto LABEL_40;
  }

void sub_1011B83F0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 160))
  {
    *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 88);
    uint64_t v2 = sub_1004DD868();
    sub_1004E0DF4(v2, (int *)(a1 + 328));
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    v3 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "CLRGE,#warning,sendDataToCA,no clients",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,#warning,sendDataToCA,no clients",  v6,  2);
      double v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::sendRhythmicGnssDataToCoreAnalytics()",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }
  }

void sub_1011B85BC(uint64_t a1, double a2, double a3)
{
  unsigned int v6 = sub_1011B88C4();
  double v7 = (double)v6;
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v8 = v7 - a2;
  uint64_t v9 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)(a1 + 400);
    int v11 = *(_DWORD *)(a1 + 404);
    int v12 = *(_DWORD *)(a1 + 408);
    *(_DWORD *)buf = 67241984;
    int v37 = v10;
    __int16 v38 = 1026;
    int v39 = v11;
    __int16 v40 = 1026;
    int v41 = v12;
    __int16 v42 = 1026;
    BOOL v43 = v8 <= a3;
    __int16 v44 = 1026;
    BOOL v45 = v7 <= a3;
    __int16 v46 = 2050;
    double v47 = a2;
    __int16 v48 = 1026;
    unsigned int v49 = v6;
    __int16 v50 = 2050;
    double v51 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CLRGE,updateRhythmicGnssPerDayUsage,totalGnssInADay_s,%{public}d, totalLeechedGnssInADay_s,%{public}d,totalProacti veGnssInADay_s,%{public}d,hasDayChangedBeforeThisSession,%{public}d,hasDayChangedAfterThisSession,%{public}d,rhyth micSessionTime,%{public}.3lf,currentSecondsIntoToday,%{public}d,secondsInDayBeforeCurSession,%{public}.3lf",  buf,  0x3Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    int v16 = *(_DWORD *)(a1 + 400);
    int v17 = *(_DWORD *)(a1 + 404);
    int v18 = *(_DWORD *)(a1 + 408);
    v21[0] = 67241984;
    v21[1] = v16;
    __int16 v22 = 1026;
    int v23 = v17;
    __int16 v24 = 1026;
    int v25 = v18;
    __int16 v26 = 1026;
    BOOL v27 = v8 <= a3;
    __int16 v28 = 1026;
    BOOL v29 = v7 <= a3;
    __int16 v30 = 2050;
    double v31 = a2;
    __int16 v32 = 1026;
    unsigned int v33 = v6;
    __int16 v34 = 2050;
    double v35 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,updateRhythmicGnssPerDayUsage,totalGnssInADay_s,%{public}d, totalLeechedGnssInADay_s,%{public}d,totalProacti veGnssInADay_s,%{public}d,hasDayChangedBeforeThisSession,%{public}d,hasDayChangedAfterThisSession,%{public}d,rhyth micSessionTime,%{public}.3lf,currentSecondsIntoToday,%{public}d,secondsInDayBeforeCurSession,%{public}.3lf",  v21,  58);
    double v20 = (uint8_t *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::updateRhythmicGnssPerDayUsageToCoreAnalytics(const double, const double)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  if (v8 <= a3)
  {
    uint64_t v13 = sub_1004DD868();
    sub_1004E13BC(v13, (int *)(a1 + 400));
    *(void *)(a1 + 404) = 0LL;
  }

  *(_DWORD *)(a1 + 400) = (int)(*(double *)(a1 + 424) + a2);
  if (*(_BYTE *)(a1 + 336)) {
    *(_DWORD *)(a1 + 404) = (int)((double)*(int *)(a1 + 404) + a2);
  }
  if (v8 > a3 && v7 <= a3)
  {
    *(_DWORD *)(a1 + 408) = (int)((double)*(int *)(a1 + 408) + a2);
    uint64_t v15 = sub_1004DD868();
    sub_1004E13BC(v15, (int *)(a1 + 400));
    *(void *)(a1 + 400) = 0LL;
    *(_DWORD *)(a1 + 408) = 0;
  }

double sub_1011B88C4()
{
  v0 = localtime(&v2);
  return (double)(3600 * v0->tm_hour + 60 * v0->tm_min + v0->tm_sec);
}

void sub_1011B890C(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 160))
  {
    sub_1011B8B24((double *)a1);
    *(double *)(a1 + 432) = sub_1011B88C4();
    if (*(_BYTE *)(a1 + 106))
    {
      double v4 = 0.0;
      if (!*(_BYTE *)(a1 + 128)) {
        double v4 = sub_1004F9D50();
      }
      double v5 = *(double *)(a1 + 416) + v4 + a2;
      *(double *)(a1 + 416) = v5;
      *(_DWORD *)(a1 + 408) = (int)v5;
    }

    *(double *)(a1 + 424) = *(double *)(a1 + 424) + a2;
    sub_1011B8D34((_BYTE *)a1);
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    unsigned int v6 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLRGE,#warning,updateTotalGnssPowerBudgetUsedInADay,no clients",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      v9[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,#warning,updateTotalGnssPowerBudgetUsedInADay,no clients",  v9,  2);
      double v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::updateTotalGnssPowerBudgetUsedInADay(const double)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

void sub_1011B8B24(double *a1)
{
  double v2 = sub_1011B88C4();
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  v3 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *((void *)a1 + 53);
    uint64_t v4 = *((void *)a1 + 54);
    uint64_t v6 = *((void *)a1 + 52);
    *(_DWORD *)buf = 134349824;
    double v21 = v2;
    __int16 v22 = 2050;
    uint64_t v23 = v6;
    __int16 v24 = 2050;
    uint64_t v25 = v4;
    __int16 v26 = 2050;
    uint64_t v27 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "CLRGE,reset power budget,secondsIntoDayCurrent,%{public}.3lf,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{publi c}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v8 = *((void *)a1 + 53);
    uint64_t v7 = *((void *)a1 + 54);
    uint64_t v9 = *((void *)a1 + 52);
    int v12 = 134349824;
    double v13 = v2;
    __int16 v14 = 2050;
    uint64_t v15 = v9;
    __int16 v16 = 2050;
    uint64_t v17 = v7;
    __int16 v18 = 2050;
    uint64_t v19 = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,reset power budget,secondsIntoDayCurrent,%{public}.3lf,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{publi c}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf",  &v12,  42);
    int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::resetProactiveGnssPowerBudgetPerDayIfDayChanged()",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  if (a1[54] > v2)
  {
    a1[52] = 0.0;
    a1[53] = 0.0;
  }

void sub_1011B8D34(_BYTE *a1)
{
  if (a1[106])
  {
    uint64_t v2 = sub_1002F8DDC();
    sub_1002AC820(v2, @"TotalActiveGnssSecondsUsedPerDayKeyString", a1 + 416);
  }

  uint64_t v3 = sub_1002F8DDC();
  sub_1002AC820(v3, @"TotalSecondsIntoDayAtLastPowerBudgetStoredKeyString", a1 + 432);
  uint64_t v4 = sub_1002F8DDC();
  sub_1002AC820(v4, @"TotalActiveGnssSecondsUsedByAllRhythmicGnssClientsKeyString", a1 + 424);
  uint64_t v5 = sub_1002F8DDC();
  (*(void (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  uint64_t v6 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *((void *)a1 + 53);
    uint64_t v7 = *((void *)a1 + 54);
    uint64_t v9 = *((void *)a1 + 52);
    *(_DWORD *)buf = 134284033;
    uint64_t v22 = v9;
    __int16 v23 = 2049;
    uint64_t v24 = v7;
    __int16 v25 = 2050;
    uint64_t v26 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLRGE,storeDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIn toDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v11 = *((void *)a1 + 53);
    uint64_t v10 = *((void *)a1 + 54);
    uint64_t v12 = *((void *)a1 + 52);
    int v15 = 134284033;
    uint64_t v16 = v12;
    __int16 v17 = 2049;
    uint64_t v18 = v10;
    __int16 v19 = 2050;
    uint64_t v20 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,storeDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIn toDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf",  &v15,  32);
    __int16 v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssEngine::storeDailyPowerBudgetUsageDataOnDisk()",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

uint64_t sub_1011B8F70(uint64_t a1, int a2, char a3, int a4)
{
  int v8 = a2;
  char v7 = a3;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *, int *))(*(void *)v4 + 48LL))(v4, &v8, &v7, &v6);
}

void sub_1011B8FB8(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1011B8FE4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1011B9048()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1011B90BC(_Unwind_Exception *a1)
{
}

void sub_1011B90D4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      double v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)double v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1011B9170(_Unwind_Exception *a1)
{
}

void sub_1011B9188()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      double v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *double v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1011B9214(_Unwind_Exception *a1)
{
}

uint64_t sub_1011B922C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A05B8, (void *)&_mh_execute_header);
}

void *sub_1011B9270@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xA) {
    uint64_t v2 = "UnhandledMethod";
  }
  else {
    uint64_t v2 = (&off_1018A1DC0)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B929C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    uint64_t v2 = "UnhandledSession";
  }
  else {
    uint64_t v2 = (&off_1018A1E18)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B92C8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    uint64_t v2 = "UnhandledProtocol";
  }
  else {
    uint64_t v2 = (&off_1018A1E68)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B92F4@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xC) {
    uint64_t v2 = "UnhandledRAT";
  }
  else {
    uint64_t v2 = (&off_1018A1EB8)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B9320@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x24) {
    uint64_t v2 = "UnhandledError";
  }
  else {
    uint64_t v2 = (&off_1018A1F20)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B934C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    uint64_t v2 = "UnhandledTandemCapability";
  }
  else {
    uint64_t v2 = (&off_1018A2048)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B9378@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    uint64_t v2 = "UnhandledPhoneNumberAvailability";
  }
  else {
    uint64_t v2 = (&off_1018A2070)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void *sub_1011B93A4@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xB) {
    uint64_t v2 = "UnhandledAbortCauseType";
  }
  else {
    uint64_t v2 = (&off_1018A2098)[a1];
  }
  return sub_1010DDBC0(a2, v2);
}

void sub_1011B93D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_1018A1DA0);
  }
  uint64_t v5 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v93 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(unsigned __int8 *)(a1 + 40);
    int v9 = *(_DWORD *)(a1 + 80);
    sub_1011B9270(*(_DWORD *)(a1 + 84), v107);
    if (v108 >= 0) {
      uint64_t v10 = v107;
    }
    else {
      uint64_t v10 = (void **)v107[0];
    }
    v91 = v10;
    sub_1011B929C(*(_DWORD *)(a1 + 88), v105);
    if (v106 >= 0) {
      uint64_t v11 = v105;
    }
    else {
      uint64_t v11 = (void **)v105[0];
    }
    v89 = v11;
    sub_1011B92C8(*(_DWORD *)(a1 + 92), v103);
    if (v104 >= 0) {
      uint64_t v12 = v103;
    }
    else {
      uint64_t v12 = (void **)v103[0];
    }
    v87 = v12;
    sub_1011B92F4(*(_DWORD *)(a1 + 96), v101);
    if (v102 >= 0) {
      double v13 = v101;
    }
    else {
      double v13 = (void **)v101[0];
    }
    v85 = v13;
    uint64_t v14 = *(int *)(a1 + 136);
    else {
      int v15 = (&off_1018A20F8)[v14];
    }
    int v73 = *(_DWORD *)(a1 + 100);
    int v75 = *(_DWORD *)(a1 + 104);
    int v77 = *(_DWORD *)(a1 + 108);
    int v79 = *(_DWORD *)(a1 + 112);
    uint64_t v81 = *(void *)(a1 + 120);
    uint64_t v83 = *(void *)(a1 + 128);
    sub_1010DDBC0(v99, v15);
    if (v100 >= 0) {
      uint64_t v16 = v99;
    }
    else {
      uint64_t v16 = (void **)v99[0];
    }
    v71 = v16;
    float v18 = *(float *)(a1 + 140);
    float v17 = *(float *)(a1 + 144);
    sub_1011B9320(*(_DWORD *)(a1 + 148), v97);
    __int16 v19 = (void **)v97[0];
    if (v98 >= 0) {
      __int16 v19 = v97;
    }
    uint64_t v20 = *(int *)(a1 + 156);
    v69 = v19;
    else {
      double v21 = (&off_1018A2118)[v20];
    }
    int v22 = *(unsigned __int8 *)(a1 + 152);
    int v23 = *(unsigned __int8 *)(a1 + 153);
    sub_1010DDBC0(__p, v21);
    if (v96 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = (void **)__p[0];
    }
    int v26 = *(_DWORD *)(a1 + 160);
    int v25 = *(_DWORD *)(a1 + 164);
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v27 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 68296451;
    int v110 = 0;
    __int16 v111 = 2082;
    v112 = "";
    __int16 v113 = 2049;
    *(void *)v114 = v2;
    *(_WORD *)&v114[8] = 2049;
    *(void *)v115 = v3;
    *(_WORD *)&v115[8] = 2049;
    *(void *)&v115[10] = v4;
    *(_WORD *)&v115[18] = 2050;
    *(void *)&v115[20] = v93;
    *(_WORD *)&v115[28] = 2050;
    *(void *)&v115[30] = v6;
    *(_WORD *)&v115[38] = 2050;
    *(void *)v116 = v7;
    *(_WORD *)&v116[8] = 1026;
    *(_DWORD *)v117 = v8;
    *(_WORD *)&v117[4] = 1026;
    *(_DWORD *)&v117[6] = v9;
    *(_WORD *)&v117[10] = 2082;
    *(void *)v118 = v91;
    *(_WORD *)&v118[8] = 2082;
    *(void *)&v118[10] = v89;
    *(_WORD *)v119 = 2082;
    *(void *)&v119[2] = v87;
    *(_WORD *)&v119[10] = 2082;
    *(void *)v120 = v85;
    *(_WORD *)&v120[8] = 1025;
    *(_DWORD *)&v120[10] = v73;
    *(_WORD *)&v120[14] = 1025;
    *(_DWORD *)&v120[16] = v75;
    *(_WORD *)&v120[20] = 1025;
    *(_DWORD *)&v120[22] = v77;
    *(_WORD *)&v120[26] = 1025;
    *(_DWORD *)v121 = v79;
    *(_WORD *)&v121[4] = 2050;
    uint64_t v122 = v81;
    *(_WORD *)v123 = 2050;
    *(void *)&v123[2] = v83;
    *(_WORD *)v124 = 2082;
    *(void *)&v124[2] = v71;
    *(_WORD *)v125 = 2050;
    *(double *)&v125[2] = v18;
    *(_WORD *)v126 = 2050;
    *(double *)&v126[2] = v17;
    *(_WORD *)v127 = 2082;
    *(void *)&v127[2] = v69;
    LOWORD(v128) = 1026;
    *(_DWORD *)((char *)&v128 + 2) = v22;
    HIWORD(v128) = 1026;
    *(_DWORD *)v129 = v23;
    *(_WORD *)&v129[4] = 2082;
    *(void *)&v129[6] = v24;
    __int16 v130 = 1026;
    int v131 = v26;
    __int16 v132 = 1026;
    int v133 = v25;
    __int16 v134 = 2050;
    uint64_t v135 = v28;
    __int16 v136 = 2050;
    uint64_t v137 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLEmergencySessionReport part 1, lat:%{private}.08f, lon:%{private}.08f, alt:%{private}f, accuracy:%{public}f, verticalAccuracy:%{public}f, ttff:%{public}f , positionValid:%{public}hhd, source:%{public}d, methodType:%{public, location:escape_only}s, sessio nType:%{public, location:escape_only}s, protocol:%{public, location:escape_only}s, rat:%{public, locatio n:escape_only}s, mcc:%{private}d, mnc:%{private}d, sid:%{private}d, nid:%{private}d, requestedTi meout:%{public}f, requestedAccuracy:%{public}f, requestReportType:%{public, location:escape_only }s, transFreq:%{public}f, transBW:%{public}f, errorCode:%{public, location:escape_only}s, HE LOEnabled:%{public}hhd, HELOInjected:%{public}hhd, HELOUsed:%{public, location:escape_only}s, sendErro r:%{public}d, modemError:%{public}d, starttime:%{public}f, stoptime:%{public}f}",  buf,  0x10Cu);
    if (v96 < 0) {
      operator delete(__p[0]);
    }
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v100 < 0) {
      operator delete(v99[0]);
    }
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_1018A1DA0);
    }
  }

  BOOL v29 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    int v90 = *(unsigned __int8 *)(a1 + 168);
    int v88 = *(unsigned __int8 *)(a1 + 169);
    int v86 = *(unsigned __int8 *)(a1 + 170);
    uint64_t v92 = *(void *)(a1 + 176);
    int v94 = *(unsigned __int8 *)(a1 + 184);
    sub_1011B934C(*(_DWORD *)(a1 + 188), v107);
    int v30 = v108;
    double v31 = (void **)v107[0];
    int v32 = *(_DWORD *)(a1 + 192);
    int v33 = *(unsigned __int8 *)(a1 + 196);
    int v34 = *(unsigned __int8 *)(a1 + 197);
    int v35 = *(_DWORD *)(a1 + 200);
    int v36 = *(_DWORD *)(a1 + 204);
    int v70 = *(_DWORD *)(a1 + 208);
    int v72 = *(unsigned __int8 *)(a1 + 212);
    int v74 = *(_DWORD *)(a1 + 216);
    int v76 = *(_DWORD *)(a1 + 220);
    int v78 = *(_DWORD *)(a1 + 224);
    int v80 = *(_DWORD *)(a1 + 228);
    int v82 = *(_DWORD *)(a1 + 232);
    int v84 = *(_DWORD *)(a1 + 236);
    sub_1011B9378(*(_DWORD *)(a1 + 240), v105);
    v112 = "";
    int v37 = v107;
    if (v30 < 0) {
      int v37 = v31;
    }
    __int16 v38 = (void **)v105[0];
    if (v106 >= 0) {
      __int16 v38 = v105;
    }
    *(_DWORD *)v114 = v90;
    *(_DWORD *)&v114[6] = v88;
    *(_DWORD *)&v115[2] = v86;
    *(void *)&v115[8] = v92;
    *(_DWORD *)&v115[18] = v94;
    *(void *)&v115[24] = v37;
    *(_DWORD *)&v115[34] = v32;
    *(_DWORD *)v116 = v33;
    *(_DWORD *)&v116[6] = v34;
    *(_DWORD *)&v117[2] = v35;
    *(_WORD *)v117 = 1025;
    *(_WORD *)&v117[6] = 1025;
    *(_DWORD *)&v117[8] = v36;
    *(_DWORD *)&v118[2] = v70;
    *(_DWORD *)&v118[8] = v72;
    *(_DWORD *)&v118[14] = v74;
    *(_DWORD *)&v119[2] = v76;
    *(_DWORD *)&v119[8] = v78;
    *(_DWORD *)&v120[2] = v80;
    *(_DWORD *)&v120[8] = v82;
    *(_DWORD *)&v120[14] = v84;
    __int16 v111 = 2082;
    *(_WORD *)&v115[22] = 2082;
    *(_WORD *)&v120[18] = 2082;
    int v39 = *(unsigned __int8 *)(a1 + 244);
    *(void *)&v120[20] = v38;
    int v40 = *(unsigned __int8 *)(a1 + 245);
    *(_DWORD *)&v121[2] = v39;
    __int16 v113 = 1026;
    *(_WORD *)&v114[4] = 1026;
    *(_WORD *)v115 = 1026;
    *(_WORD *)&v115[16] = 1026;
    *(_WORD *)&v115[32] = 1026;
    *(_WORD *)&v115[38] = 1026;
    *(_WORD *)&v116[4] = 1026;
    *(_WORD *)v118 = 1026;
    *(_WORD *)&v118[6] = 1026;
    *(_WORD *)&v118[12] = 1026;
    *(_WORD *)v119 = 1026;
    *(_WORD *)&v119[6] = 1026;
    *(_WORD *)v120 = 1026;
    *(_WORD *)&v120[6] = 1026;
    *(_WORD *)&v120[12] = 1026;
    *(_WORD *)v121 = 1026;
    LOWORD(v122) = 1026;
    *(_DWORD *)((char *)&v122 + 2) = v40;
    uint64_t v41 = *(void *)(a1 + 256);
    *(void *)v123 = *(void *)(a1 + 248);
    *(void *)v124 = v41;
    uint64_t v42 = *(void *)(a1 + 272);
    *(void *)v125 = *(void *)(a1 + 264);
    *(void *)v126 = v42;
    *(void *)v127 = *(void *)(a1 + 912);
    *(_WORD *)&v126[8] = 2049;
    *(_WORD *)&v127[8] = 2049;
    uint64_t v128 = *(void *)(a1 + 920);
    *(_WORD *)&v115[6] = 2050;
    HIWORD(v122) = 2050;
    *(_WORD *)&v123[8] = 2050;
    *(_WORD *)&v124[8] = 2050;
    *(_WORD *)&v125[8] = 2050;
    *(_WORD *)v129 = 2050;
    *(void *)&v129[2] = *(void *)(a1 + 928);
    *(_DWORD *)buf = 68296451;
    int v110 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLEmergencySessionReport part 2, wifiAssociated:%{public}hhd, isTandemDP:%{public }hhd, isOrbitFileAvailable:%{public}hhd, orbitFileAge:%{public}llu, wasNetworkReachable:%{public}hhd, tandemCapability:%{public, location:escape_only}s, nInstance:%{public}u, isTandemVD:%{public}hhd, is SimPresent:%{public}hhd, subscriberMCC:%{private}d, subscribeMNC:%{private}d, satelliteReportCount:% {public}u, HELORejected:%{public}hhd, heloRejectReason:%{public}u, numValidFixesSent:%{public}d, num NoFixMessagesSent:%{public}d, numSendSuccessForValidFix:%{public}d, numSendFailForValidFixes:%{public}d, lastHttpPostFailureCode:%{public}d, phoneNumbersAvailable:%{public, location:escape_only}s, wasNILRSent :%{public}hhd, isNWRefLocAvailable:%{public}hhd, nwRefLocUncertainity:%{public}f, nwRefLocDeviatio nFromHELO:%{public}f, nwRefLocDeviationFromCellLocation:%{public}f, nwRefLocDeviationFromFinalFix :%{public}f, nwRefLocLat:%{private}f, nwRefLocLon:%{private}f, nwRefLocConfidence:%{public}f}",  buf,  0xE8u);
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_1018A1DA0);
    }
  }

  BOOL v43 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = *(int *)(a1 + 936);
    else {
      BOOL v45 = (&off_1018A2130)[v44];
    }
    sub_1010DDBC0(v107, v45);
    if (v108 >= 0) {
      __int16 v46 = v107;
    }
    else {
      __int16 v46 = (void **)v107[0];
    }
    int v47 = *(unsigned __int8 *)(a1 + 940);
    __int16 v48 = v105;
    sub_1011B93A4(*(_DWORD *)(a1 + 944), v105);
    if (v106 < 0) {
      __int16 v48 = (void **)v105[0];
    }
    unsigned int v49 = v103;
    sub_1011B929C(*(_DWORD *)(a1 + 948), v103);
    if (v104 < 0) {
      unsigned int v49 = (void **)v103[0];
    }
    uint64_t v50 = *(int *)(a1 + 952);
    else {
      double v51 = (&off_1018A2130)[v50];
    }
    sub_1010DDBC0(v101, v51);
    v52 = (void **)v101[0];
    if (v102 >= 0) {
      v52 = v101;
    }
    v53 = (void *)(a1 + 960);
    int v54 = *(_DWORD *)(a1 + 956);
    v55 = (void *)(a1 + 984);
    int v56 = *(_DWORD *)(a1 + 1008);
    int v57 = *(_DWORD *)(a1 + 1012);
    int v58 = *(unsigned __int8 *)(a1 + 1016);
    int v59 = *(unsigned __int8 *)(a1 + 1017);
    int v60 = *(unsigned __int8 *)(a1 + 1018);
    int v61 = *(_DWORD *)(a1 + 1048);
    int v62 = *(_DWORD *)(a1 + 1052);
    int v63 = *(unsigned __int8 *)(a1 + 1068);
    int v64 = *(unsigned __int8 *)(a1 + 1069);
    int v65 = *(unsigned __int8 *)(a1 + 1070);
    int v66 = *(unsigned __int8 *)(a1 + 1071);
    int v67 = *(unsigned __int8 *)(a1 + 1072);
    int v68 = *(_DWORD *)(a1 + 1076);
    *(_DWORD *)buf = 68294402;
    int v110 = 0;
    __int16 v111 = 2082;
    v112 = "";
    __int16 v113 = 2082;
    *(void *)v114 = v46;
    *(_WORD *)&v114[8] = 1026;
    *(_DWORD *)v115 = v47;
    *(_WORD *)&v115[4] = 2082;
    *(void *)&v115[6] = v48;
    *(_WORD *)&v115[14] = 2082;
    *(void *)&v115[16] = v49;
    *(_WORD *)&v115[24] = 2082;
    *(void *)&v115[26] = v52;
    *(_WORD *)&v115[34] = 1026;
    *(_DWORD *)&v115[36] = v54;
    *(_WORD *)v116 = 2082;
    *(void *)&v116[2] = v53;
    *(_WORD *)v117 = 2082;
    *(void *)&v117[2] = v55;
    *(_WORD *)&v117[10] = 1026;
    *(_DWORD *)v118 = v56;
    *(_WORD *)&v118[4] = 1026;
    *(_DWORD *)&v118[6] = v57;
    *(_WORD *)&v118[10] = 1026;
    *(_DWORD *)&v118[12] = v58;
    *(_WORD *)&v118[16] = 1026;
    *(_DWORD *)v119 = v59;
    *(_WORD *)&v119[4] = 1026;
    *(_DWORD *)&v119[6] = v60;
    *(_WORD *)&v119[10] = 1026;
    *(_DWORD *)v120 = v61;
    *(_WORD *)&v120[4] = 1026;
    *(_DWORD *)&v120[6] = v62;
    *(_WORD *)&v120[10] = 1026;
    *(_DWORD *)&v120[12] = v63;
    *(_WORD *)&v120[16] = 1026;
    *(_DWORD *)&v120[18] = v64;
    *(_WORD *)&v120[22] = 1026;
    *(_DWORD *)&v120[24] = v65;
    *(_WORD *)v121 = 1026;
    *(_DWORD *)&v121[2] = v66;
    LOWORD(v122) = 1026;
    *(_DWORD *)((char *)&v122 + 2) = v67;
    HIWORD(v122) = 1026;
    *(_DWORD *)v123 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLEmergencySessionReport part 3, commType:%{public, location:escape_only}s, isInAct iveEmergency:%{public}hhd, abortCause:%{public, location:escape_only}s, overridingSessionType:%{public, location:escape_only}s, overridingCommType:%{public, location:escape_only}s, finalFixDeviationFromCellLocati on:%{public}d, fCarrierBundleVersion:%{public, location:escape_only}s, fCarrierBundleID:%{public, locati on:escape_only}s, locConfigCompatibilityVersion:%{public}d, locConfigContentVersion:%{public}d, isSUPLEn abled:%{public}hhd, isDBHEnabled:%{public}hhd, wasDBHLocationSent:%{public}hhd, nwReportedFixDeviation FromDBH:%{public}d, nwReportedFixDeviationFromWifiLocation:%{public}d, fIsWlanFeatureEnabled:%{public}hh d, isLocationSourceEnabled:%{public}hhd, isRssiReportingEnabled:%{public}hhd, wasRssiRequested:%{publi c}hhd, wasServingApSent:%{public}hhd, finalFixDeviationFromSuplEnd:%{public}d}",  buf,  0xA8u);
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
  }

void sub_1011B9D58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46, void *a47, uint64_t a48, int a49, __int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011B9E04(uint64_t a1)
{
  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_1018A1DA0);
  }
  uint64_t v2 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEBUG))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    LOWORD(v9[2]) = 2082;
    *(void *)((char *)&v9[2] + 2) = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#awd CLEmergencySessionReport::reset}",  (uint8_t *)v9,  0x12u);
  }

  bzero(v9, 0x4D8uLL);
  sub_100F9F1F0((uint64_t)v9);
  memcpy((void *)a1, v9, 0x3C0uLL);
  uint64_t v3 = (void **)(a1 + 960);
  *(_OWORD *)uint64_t v3 = v10;
  *(void *)(a1 + 976) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  uint64_t v4 = (void **)(a1 + 984);
  *(_OWORD *)uint64_t v4 = v12;
  *(void *)(a1 + 1000) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(v12) = 0;
  *(_OWORD *)(a1 + 1088) = v19;
  *(_OWORD *)(a1 + 1104) = v20;
  *(_OWORD *)(a1 + 1120) = v21[0];
  *(_OWORD *)(a1 + 1040) = v16;
  *(_OWORD *)(a1 + 1056) = v17;
  *(_OWORD *)(a1 + 1072) = v18;
  __int128 v5 = v15;
  *(_OWORD *)(a1 + 1008) = v14;
  *(_OWORD *)(a1 + 1024) = v5;
  *(_OWORD *)(a1 + 1132) = *(_OWORD *)((char *)v21 + 12);
  uint64_t v6 = (void **)(a1 + 1152);
  *(_OWORD *)uint64_t v6 = __p;
  *(void *)(a1 + 1168) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__p) = 0;
  uint64_t v7 = (_OWORD *)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0)
  {
    operator delete(*(void **)(a1 + 1176));
    int v8 = SHIBYTE(v23);
    _OWORD *v7 = v24;
    *(void *)(a1 + 1192) = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    *(_OWORD *)(a1 + 1200) = v26;
    *(_OWORD *)(a1 + 1216) = v27;
    *(void *)(a1 + 1232) = v28;
    if (v8 < 0) {
      operator delete((void *)__p);
    }
  }

  else
  {
    *(void *)(a1 + 1192) = v25;
    _OWORD *v7 = v24;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    *(_OWORD *)(a1 + 1200) = v26;
    *(_OWORD *)(a1 + 1216) = v27;
    *(void *)(a1 + 1232) = v28;
  }

  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

uint64_t sub_1011BA0AC(uint64_t result, int a2, int a3)
{
  if (a2 && (a3 & 1) != 0)
  {
    int v3 = 4;
  }

  else if (a2)
  {
    else {
      int v3 = 4;
    }
  }

  else if (a3)
  {
    if (((*(_DWORD *)(result + 240) - 2) & 0xFFFFFFFD) != 0) {
      int v3 = 3;
    }
    else {
      int v3 = 4;
    }
  }

  else
  {
    int v3 = 1;
  }

  *(_DWORD *)(result + 240) = v3;
  return result;
}

void sub_1011BA104(uint64_t a1, uint64_t a2)
{
  int v3 = 4;
  switch(*(_DWORD *)(a2 + 96))
  {
    case 0:
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      if (sub_100869780(a2))
      {
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_1018A1DA0);
        }
        uint64_t v4 = (os_log_s *)qword_101934898;
        if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Valid location with unknown or obsolete type",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934890 != -1) {
            dispatch_once(&qword_101934890, &stru_1018A1DA0);
          }
          v7[0] = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning Valid location with unknown or obsolete type",  v7,  2);
          uint64_t v6 = (uint8_t *)v5;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void Emergency::CLEmergencySessionReport::setPositionSource(const CLDaemonLocation &)",  "%s\n",  v5);
          if (v6 != buf) {
            free(v6);
          }
        }
      }

      int v3 = 0;
      goto LABEL_11;
    case 1:
    case 3:
    case 9:
      int v3 = 1;
      goto LABEL_11;
    case 4:
    case 0xA:
    case 0xB:
    case 0xD:
      int v3 = 2;
      goto LABEL_11;
    case 6:
    case 7:
    case 8:
LABEL_11:
      *(_DWORD *)(a1 + 80) = v3;
      break;
    default:
      return;
  }

void sub_1011BA31C(id a1)
{
  qword_101934898 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1011BA348(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = 0LL;
  switch(*a2)
  {
    case 0xFFFFFFFF:
      return result;
    case 0:
      __asm { FMOV            V0.2D, #30.0; jumptable 00000001011BA384 case 1 }

      *(_OWORD *)a3 = _Q0;
      *(_DWORD *)(a3 + 16) = 0;
      sub_1011BA4D8();
      char v10 = 0;
      *(void *)(a3 + 24) = v11;
      *(_WORD *)(a3 + 32) = 256;
      *(void *)(a3 + 48) = 0x408C200000000000LL;
      goto LABEL_4;
    case 1:
      __asm { FMOV            V0.2D, #30.0; jumptable 00000001011BA384 case 2 }

      *(_OWORD *)a3 = _Q0;
      *(_DWORD *)(a3 + 16) = 1;
      sub_1011BA4D8();
      *(void *)(a3 + 24) = v13;
      *(_WORD *)(a3 + 32) = 257;
      sub_1011BA4D8();
      char v10 = 0;
      *(void *)(a3 + 48) = v14;
LABEL_4:
      *(_BYTE *)(a3 + 34) = 0;
      double v15 = 1.79769313e308;
      goto LABEL_13;
    case 2:
      *(void *)a3 = 0x403E000000000000LL;
      sub_1002F0B04(&v22);
      int v16 = sub_1002A82BC(v22, "CLRhythmicGnssDefaultActiveGnssTime_s", &v24);
      double v17 = v24;
      if (!v16) {
        double v17 = 18.0;
      }
      *(double *)(a3 + 8) = v17;
      __int128 v18 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          unint64_t v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }

      *(_DWORD *)(a3 + 16) = 2;
      sub_1011BA4D8();
      *(void *)(a3 + 24) = v21;
      *(_WORD *)(a3 + 32) = 0;
      *(void *)(a3 + 48) = 0x7FEFFFFFFFFFFFFFLL;
      char v10 = 1;
      *(_BYTE *)(a3 + 34) = 1;
      double v15 = (double)sub_1011BA584();
LABEL_13:
      *(double *)(a3 + 40) = v15;
      *(_WORD *)(a3 + 56) = 1;
      *(_OWORD *)(a3 + 64) = xmmword_1013E4530;
      *(_BYTE *)(a3 + 80) = v10;
      break;
    default:
      return 1LL;
  }

  return 1LL;
}

void sub_1011BA4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011BA4D8()
{
  unsigned __int8 v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }

void sub_1011BA570(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1011BA584()
{
  HIDWORD(v9) = 0;
  sub_1002F0B04(buf);
  char v0 = sub_1002A775C(*(uint64_t *)buf, "CLProactiveGnssPowerBudget_s", (_DWORD *)&v9 + 1);
  char v1 = v0;
  unint64_t v2 = v12;
  if (!v12) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((v0 & 1) != 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if ((v1 & 1) == 0) {
LABEL_6:
  }
    HIDWORD(v9) = sub_1004FD018();
LABEL_7:
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v5 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v9);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGE,getPowerBudget,%{public}d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    v10[0] = 67240192;
    v10[1] = HIDWORD(v9);
    LODWORD(v9) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,getPowerBudget,%{public}d",  v10,  v9);
    int v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "uint32_t CLRhythmicGnssClientManager::getProactiveGnssPowerBudgetInSecondsBasedOnHW()",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  return HIDWORD(v9);
}

void sub_1011BA7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1011BA7BC(uint64_t a1, int *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  unint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67174657;
    int v25 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,removeRhythmicGnssClient,%{private}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    int v10 = *a2;
    LODWORD(v19) = 67174657;
    DWORD1(v19) = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,removeRhythmicGnssClient,%{private}d",  &v19,  8);
    __int128 v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssClientManager::removeRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  __int128 v19 = xmmword_1012ED930;
  LODWORD(v20) = -1;
  *((void *)&v20 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)uint64_t v21 = 0;
  _OWORD v21[2] = 0;
  *(_OWORD *)&v21[8] = xmmword_1012ED960;
  *(_WORD *)&v21[24] = 1;
  __int128 v22 = xmmword_1013E4520;
  LOBYTE(v23) = 0;
  uint64_t v6 = sub_1011BA348(a1, a2, (uint64_t)&v19);
  if ((v6 & 1) != 0)
  {
    v16[2] = *(_OWORD *)v21;
    v16[3] = *(_OWORD *)&v21[16];
    v16[4] = v22;
    uint64_t v17 = v23;
    v16[0] = v19;
    v16[1] = v20;
    sub_1011BAB7C(a1, (uint64_t *)v16);
    if (*(void *)(a1 + 152) == *(void *)(a1 + 160))
    {
      uint64_t v7 = *(void *)(a1 + 144);
      if (v7) {
        sub_1011B6044(v7);
      }
    }

    if (*(void *)(a1 + 136)) {
      sub_1011BB708( a1 + 112,  0,  *(_DWORD *)(a1 + 192),  -1431655765 * ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5));
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    int v8 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,removeRhythmicGnssClient,invalid mode",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      v18[0] = 0;
      LODWORD(v15) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,removeRhythmicGnssClient,invalid mode",  v18,  v15);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssClientManager::removeRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  return v6;
}

void sub_1011BAB7C(uint64_t a1, uint64_t *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  unint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    *(_DWORD *)buf = 134349056;
    *(void *)v107 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientConfigurationList,size,%{public}zu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    int v92 = 134349056;
    *(void *)uint64_t v93 = v78;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientConfigurationList,size,%{public}zu",  &v92,  12);
    int v80 = (uint8_t *)v79;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::Rhythmic GnssConfiguration)",  "%s\n",  v79);
    if (v80 != buf) {
      free(v80);
    }
  }

  uint64_t v6 = *(void *)(a1 + 152);
  if (v6 != *(void *)(a1 + 160))
  {
    uint64_t v7 = -v6;
    while (1)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      int v8 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)v6;
        uint64_t v10 = *(void *)(v6 + 8);
        uint64_t v11 = *(void *)(v6 + 16);
        int v12 = *(_DWORD *)(v6 + 24);
        uint64_t v13 = *(void *)(v6 + 32);
        int v14 = *(unsigned __int8 *)(v6 + 40);
        int v15 = *(unsigned __int8 *)(v6 + 41);
        int v16 = *(unsigned __int8 *)(v6 + 42);
        uint64_t v18 = *(void *)(v6 + 48);
        uint64_t v17 = *(void *)(v6 + 56);
        int v19 = *(unsigned __int8 *)(v6 + 64);
        int v20 = *(unsigned __int8 *)(v6 + 65);
        uint64_t v21 = *(void *)(v6 + 72);
        uint64_t v22 = *(void *)(v6 + 80);
        *(_DWORD *)buf = 67243520;
        *(_DWORD *)v107 = v9;
        *(_WORD *)&v107[4] = 2050;
        *(void *)&v107[6] = v10;
        *(_WORD *)&v107[14] = 2050;
        *(void *)&v107[16] = v11;
        __int16 v108 = 1026;
        *(_DWORD *)v109 = v12;
        *(_WORD *)&v109[4] = 2050;
        *(void *)&v109[6] = v13;
        __int16 v110 = 1026;
        int v111 = v14;
        __int16 v112 = 1026;
        *(_DWORD *)__int16 v113 = v15;
        *(_WORD *)&v113[4] = 2050;
        *(void *)&v113[6] = v17;
        __int16 v114 = 1026;
        *(_DWORD *)v115 = v16;
        *(_WORD *)&v115[4] = 2050;
        *(void *)&v115[6] = v18;
        __int16 v116 = 1026;
        int v117 = v19;
        __int16 v118 = 1026;
        *(_DWORD *)v119 = v20;
        *(_WORD *)&v119[4] = 2050;
        *(void *)&v119[6] = v21;
        *(_WORD *)&v119[14] = 2050;
        *(void *)&v119[16] = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientConfigurationList,clientIter->clientInfo,fRhythmicGnssActiveConfiguration,refCount,%{public }d,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionIn terval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{ public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d, useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,addition alPowerAssertionTime_s,%{public}.3lf",  buf,  0x72u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2148);
        }
        int v37 = *(_DWORD *)v6;
        uint64_t v38 = *(void *)(v6 + 8);
        uint64_t v39 = *(void *)(v6 + 16);
        int v40 = *(_DWORD *)(v6 + 24);
        uint64_t v41 = *(void *)(v6 + 32);
        int v42 = *(unsigned __int8 *)(v6 + 40);
        int v43 = *(unsigned __int8 *)(v6 + 41);
        int v44 = *(unsigned __int8 *)(v6 + 42);
        uint64_t v46 = *(void *)(v6 + 48);
        uint64_t v45 = *(void *)(v6 + 56);
        int v47 = *(unsigned __int8 *)(v6 + 64);
        int v48 = *(unsigned __int8 *)(v6 + 65);
        uint64_t v49 = *(void *)(v6 + 72);
        uint64_t v50 = *(void *)(v6 + 80);
        int v92 = 67243520;
        *(_DWORD *)uint64_t v93 = v37;
        *(_WORD *)&v93[4] = 2050;
        *(void *)&v93[6] = v38;
        *(_WORD *)&v93[14] = 2050;
        *(void *)&v93[16] = v39;
        __int16 v94 = 1026;
        *(_DWORD *)v95 = v40;
        *(_WORD *)&v95[4] = 2050;
        *(void *)&v95[6] = v41;
        __int16 v96 = 1026;
        int v97 = v42;
        __int16 v98 = 1026;
        *(_DWORD *)v99 = v43;
        *(_WORD *)&v99[4] = 2050;
        *(void *)&v99[6] = v45;
        __int16 v100 = 1026;
        *(_DWORD *)v101 = v44;
        *(_WORD *)&v101[4] = 2050;
        *(void *)&v101[6] = v46;
        __int16 v102 = 1026;
        int v103 = v47;
        __int16 v104 = 1026;
        *(_DWORD *)v105 = v48;
        *(_WORD *)&v105[4] = 2050;
        *(void *)&v105[6] = v49;
        *(_WORD *)&v105[14] = 2050;
        *(void *)&v105[16] = v50;
        LODWORD(v89) = 114;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientConfigurationList,clientIter->clientInfo,fRhythmicGnssActiveConfiguration,refCount,%{public }d,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionIn terval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{ public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d, useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,addition alPowerAssertionTime_s,%{public}.3lf",  &v92,  v89);
        v52 = (uint8_t *)v51;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::Rhyt hmicGnssConfiguration)",  "%s\n",  v51);
        if (v52 != buf) {
          free(v52);
        }
      }

      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      uint64_t v23 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *a2;
        uint64_t v25 = a2[1];
        int v26 = *((_DWORD *)a2 + 4);
        uint64_t v27 = a2[3];
        int v28 = *((unsigned __int8 *)a2 + 32);
        int v29 = *((unsigned __int8 *)a2 + 33);
        int v30 = *((unsigned __int8 *)a2 + 34);
        uint64_t v32 = a2[5];
        uint64_t v31 = a2[6];
        int v33 = *((unsigned __int8 *)a2 + 56);
        int v34 = *((unsigned __int8 *)a2 + 57);
        uint64_t v35 = a2[8];
        uint64_t v36 = a2[9];
        *(_DWORD *)buf = 134352128;
        *(void *)v107 = v24;
        *(_WORD *)&v107[8] = 2050;
        *(void *)&v107[10] = v25;
        *(_WORD *)&v107[18] = 1026;
        *(_DWORD *)&v107[20] = v26;
        __int16 v108 = 2050;
        *(void *)v109 = v27;
        *(_WORD *)&v109[8] = 1026;
        *(_DWORD *)&v109[10] = v28;
        __int16 v110 = 1026;
        int v111 = v29;
        __int16 v112 = 2050;
        *(void *)__int16 v113 = v31;
        *(_WORD *)&v113[8] = 1026;
        *(_DWORD *)&v113[10] = v30;
        __int16 v114 = 2050;
        *(void *)v115 = v32;
        *(_WORD *)&v115[8] = 1026;
        *(_DWORD *)&v115[10] = v33;
        __int16 v116 = 1026;
        int v117 = v34;
        __int16 v118 = 2050;
        *(void *)v119 = v35;
        *(_WORD *)&v119[8] = 2050;
        *(void *)&v119[10] = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientConfigurationList,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsAct iveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{pu blic}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable, %{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnss DutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf",  buf,  0x6Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2148);
        }
        uint64_t v53 = *a2;
        uint64_t v54 = a2[1];
        int v55 = *((_DWORD *)a2 + 4);
        uint64_t v56 = a2[3];
        int v57 = *((unsigned __int8 *)a2 + 32);
        int v58 = *((unsigned __int8 *)a2 + 33);
        int v59 = *((unsigned __int8 *)a2 + 34);
        uint64_t v61 = a2[5];
        uint64_t v60 = a2[6];
        int v62 = *((unsigned __int8 *)a2 + 56);
        int v63 = *((unsigned __int8 *)a2 + 57);
        uint64_t v64 = a2[8];
        uint64_t v65 = a2[9];
        int v92 = 134352128;
        *(void *)uint64_t v93 = v53;
        *(_WORD *)&v93[8] = 2050;
        *(void *)&v93[10] = v54;
        *(_WORD *)&v93[18] = 1026;
        *(_DWORD *)&v93[20] = v55;
        __int16 v94 = 2050;
        *(void *)v95 = v56;
        *(_WORD *)&v95[8] = 1026;
        *(_DWORD *)&v95[10] = v57;
        __int16 v96 = 1026;
        int v97 = v58;
        __int16 v98 = 2050;
        *(void *)v99 = v60;
        *(_WORD *)&v99[8] = 1026;
        *(_DWORD *)&v99[10] = v59;
        __int16 v100 = 2050;
        *(void *)v101 = v61;
        *(_WORD *)&v101[8] = 1026;
        *(_DWORD *)&v101[10] = v62;
        __int16 v102 = 1026;
        int v103 = v63;
        __int16 v104 = 2050;
        *(void *)v105 = v64;
        *(_WORD *)&v105[8] = 2050;
        *(void *)&v105[10] = v65;
        LODWORD(v89) = 108;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientConfigurationList,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsAct iveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{pu blic}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable, %{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnss DutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf",  &v92,  v89);
        int v67 = (uint8_t *)v66;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::Rhyt hmicGnssConfiguration)",  "%s\n",  v66);
        if (v67 != buf) {
          free(v67);
        }
      }

      if (*((_DWORD *)a2 + 4) == *(_DWORD *)(v6 + 24)) {
        break;
      }
      v6 += 96LL;
      v7 -= 96LL;
      if (v6 == *(void *)(a1 + 160)) {
        goto LABEL_40;
      }
    }

    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    int v68 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientConfigurationList,item found",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      LOWORD(v92) = 0;
      LODWORD(v89) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientConfigurationList,item found",  &v92,  v89);
      v85 = (uint8_t *)v84;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::Rhythm icGnssConfiguration)",  "%s\n",  v84);
      if (v85 != buf) {
        free(v85);
      }
    }

    --*(_DWORD *)v6;
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    v69 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      int v70 = *(_DWORD *)v6;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v107 = v70;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientConfigurationList,clientIter->refCount,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      int v86 = *(_DWORD *)v6;
      int v92 = 67240192;
      *(_DWORD *)uint64_t v93 = v86;
      LODWORD(v89) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientConfigurationList,clientIter->refCount,%{public}d",  &v92,  v89);
      int v88 = (uint8_t *)v87;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::Rhythm icGnssConfiguration)",  "%s\n",  v87);
      if (v88 != buf) {
        free(v88);
      }
    }

    if (!*(_DWORD *)v6)
    {
      uint64_t v73 = *(void *)(a1 + 160);
      uint64_t v74 = v73 - (96 - v7);
      if (v73 != 96 - v7) {
        memmove((void *)-v7, (const void *)(96 - v7), v73 - (96 - v7));
      }
      *(void *)(a1 + 160) = v74 - v7;
      sub_1011BC130(a1);
      uint64_t v75 = *(void *)(a1 + 144);
      if (v75 && *(void *)(a1 + 160) != *(void *)(a1 + 152))
      {
        __int128 v76 = *(_OWORD *)(a1 + 224);
        v90[2] = *(_OWORD *)(a1 + 208);
        v90[3] = v76;
        v90[4] = *(_OWORD *)(a1 + 240);
        uint64_t v91 = *(void *)(a1 + 256);
        __int128 v77 = *(_OWORD *)(a1 + 192);
        v90[0] = *(_OWORD *)(a1 + 176);
        v90[1] = v77;
        sub_1011B5974(v75, (uint64_t *)v90);
      }
    }
  }

uint64_t sub_1011BB708(uint64_t a1, char a2, int a3, int a4)
{
  char v8 = a2;
  int v6 = a4;
  int v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_100008BDC();
  }
  return (*(uint64_t (**)(uint64_t, char *, int *, int *))(*(void *)v4 + 48LL))(v4, &v8, &v7, &v6);
}

void sub_1011BB74C(void *a1, uint64_t *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
    *(_DWORD *)buf = 134349056;
    v71[0] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLRGCM,addClientToClientManagerInfo,size,%{public}zu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
    int v68 = 134349056;
    *(void *)v69 = v55;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,addClientToClientManagerInfo,size,%{public}zu",  &v68,  12);
    int v57 = (uint8_t *)v56;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v56);
    if (v57 != buf) {
      free(v57);
    }
  }

  int v6 = (int *)a1[19];
  int v63 = (char **)(a1 + 19);
  if (v6 == (int *)a1[20])
  {
LABEL_19:
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    int v14 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addClientToClientManagerInfo,adding new client type",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      LOWORD(v68) = 0;
      LODWORD(v62) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addClientToClientManagerInfo,adding new client type",  &v68,  v62);
      int v59 = (uint8_t *)v58;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v58);
      if (v59 != buf) {
        free(v59);
      }
    }

    uint64_t v16 = *a2;
    uint64_t v15 = a2[1];
    int v18 = *((_DWORD *)a2 + 4);
    int v17 = *((_DWORD *)a2 + 5);
    uint64_t v19 = a2[3];
    char v20 = *((_BYTE *)a2 + 32);
    char v21 = *((_BYTE *)a2 + 33);
    char v22 = *((_BYTE *)a2 + 34);
    int v66 = *(_DWORD *)((char *)a2 + 35);
    char v67 = *((_BYTE *)a2 + 39);
    uint64_t v24 = a2[5];
    uint64_t v23 = a2[6];
    char v25 = *((_BYTE *)a2 + 56);
    char v26 = *((_BYTE *)a2 + 57);
    __int16 v65 = *((_WORD *)a2 + 31);
    int v64 = *(_DWORD *)((char *)a2 + 58);
    uint64_t v28 = a2[8];
    uint64_t v27 = a2[9];
    char v29 = *((_BYTE *)a2 + 80);
    unint64_t v30 = a1[21];
    unint64_t v31 = a1[20];
    if (v31 >= v30)
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)*v63) >> 5);
      unint64_t v34 = v33 + 1;
      if (v33 + 1 > 0x2AAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)*v63) >> 5);
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x155555555555555LL) {
        unint64_t v36 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36) {
        int v37 = (char *)sub_1003F6AEC((uint64_t)(a1 + 21), v36);
      }
      else {
        int v37 = 0LL;
      }
      uint64_t v45 = &v37[96 * v33];
      *(_DWORD *)uint64_t v45 = 1;
      *((void *)v45 + 1) = v16;
      *((void *)v45 + 2) = v15;
      uint64_t v46 = &v37[96 * v36];
      *((_DWORD *)v45 + 6) = v18;
      *((_DWORD *)v45 + 7) = v17;
      *((void *)v45 + 4) = v19;
      v45[40] = v20;
      v45[41] = v21;
      v45[42] = v22;
      *(_DWORD *)(v45 + 43) = v66;
      v45[47] = v67;
      *((void *)v45 + 6) = v24;
      *((void *)v45 + 7) = v23;
      v45[64] = v25;
      v45[65] = v26;
      *((_WORD *)v45 + 35) = v65;
      *(_DWORD *)(v45 + 66) = v64;
      *((void *)v45 + 9) = v28;
      *((void *)v45 + 10) = v27;
      v45[88] = v29;
      uint64_t v32 = v45 + 96;
      int v48 = (char *)a1[19];
      int v47 = (char *)a1[20];
      if (v47 != v48)
      {
        do
        {
          __int128 v49 = *((_OWORD *)v47 - 5);
          *((_OWORD *)v45 - 6) = *((_OWORD *)v47 - 6);
          *((_OWORD *)v45 - 5) = v49;
          __int128 v50 = *((_OWORD *)v47 - 4);
          __int128 v51 = *((_OWORD *)v47 - 3);
          __int128 v52 = *((_OWORD *)v47 - 1);
          *((_OWORD *)v45 - 2) = *((_OWORD *)v47 - 2);
          *((_OWORD *)v45 - 1) = v52;
          *((_OWORD *)v45 - 4) = v50;
          *((_OWORD *)v45 - 3) = v51;
          v45 -= 96;
          v47 -= 96;
        }

        while (v47 != v48);
        int v47 = *v63;
      }

      a1[19] = v45;
      a1[20] = v32;
      a1[21] = v46;
      if (v47) {
        operator delete(v47);
      }
    }

    else
    {
      *(_DWORD *)unint64_t v31 = 1;
      *(void *)(v31 + 8) = v16;
      *(void *)(v31 + 16) = v15;
      *(_DWORD *)(v31 + 24) = v18;
      *(_DWORD *)(v31 + 28) = v17;
      *(void *)(v31 + 32) = v19;
      *(_BYTE *)(v31 + 40) = v20;
      *(_BYTE *)(v31 + 41) = v21;
      *(_BYTE *)(v31 + 42) = v22;
      *(_DWORD *)(v31 + 43) = v66;
      *(_BYTE *)(v31 + 47) = v67;
      *(void *)(v31 + 48) = v24;
      *(void *)(v31 + 56) = v23;
      *(_BYTE *)(v31 + 64) = v25;
      *(_BYTE *)(v31 + 65) = v26;
      *(_WORD *)(v31 + 70) = v65;
      *(_DWORD *)(v31 + 66) = v64;
      *(void *)(v31 + 72) = v28;
      *(void *)(v31 + 80) = v27;
      uint64_t v32 = (char *)(v31 + 96);
      *(_BYTE *)(v31 + 88) = v29;
    }

    a1[20] = v32;
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    uint64_t v53 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
      *(_DWORD *)buf = 134349056;
      v71[0] = v54;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "CLRGCM,addClientToClientManagerInfo,size,%{public}zu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
      int v68 = 134349056;
      *(void *)v69 = v60;
      LODWORD(v62) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,addClientToClientManagerInfo,size,%{public}zu",  &v68,  v62);
      int v44 = (uint8_t *)v61;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v61);
LABEL_65:
      if (v44 != buf) {
        free(v44);
      }
    }
  }

  else
  {
    while (1)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      int v7 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = v6[6];
        int v9 = *((_DWORD *)a2 + 4);
        *(_DWORD *)buf = 67109376;
        LODWORD(v71[0]) = v8;
        WORD2(v71[0]) = 1024;
        *(_DWORD *)((char *)v71 + 6) = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%d,requestPowerMode,%d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2148);
        }
        int v10 = v6[6];
        int v11 = *((_DWORD *)a2 + 4);
        int v68 = 67109376;
        *(_DWORD *)v69 = v10;
        *(_WORD *)&v69[4] = 1024;
        *(_DWORD *)&v69[6] = v11;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%d,requestPowerMode,%d",  &v68,  14);
        uint64_t v13 = (uint8_t *)v12;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnss Configuration &)",  "%s\n",  v12);
        if (v13 != buf) {
          free(v13);
        }
      }

      if (*((_DWORD *)a2 + 4) == v6[6]) {
        break;
      }
      v6 += 24;
    }

    ++*v6;
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    uint64_t v38 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = v6[6];
      int v40 = *v6;
      *(_DWORD *)buf = 67240448;
      LODWORD(v71[0]) = v39;
      WORD2(v71[0]) = 1026;
      *(_DWORD *)((char *)v71 + 6) = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      int v41 = v6[6];
      int v42 = *v6;
      int v68 = 67240448;
      *(_DWORD *)v69 = v41;
      *(_WORD *)&v69[4] = 1026;
      *(_DWORD *)&v69[6] = v42;
      LODWORD(v62) = 14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d",  &v68,  v62);
      int v44 = (uint8_t *)v43;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v43);
      goto LABEL_65;
    }
  }

void sub_1011BC130(uint64_t a1)
{
  *(_OWORD *)(a1 + 176) = xmmword_1012ED930;
  *(_DWORD *)(a1 + 192) = -1;
  *(void *)(a1 + 200) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 210) = 0;
  *(_OWORD *)(a1 + 216) = xmmword_1012ED960;
  *(_WORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_1013E4520;
  *(_BYTE *)(a1 + 256) = 0;
  uint64_t v1 = *(void *)(a1 + 152);
  uint64_t v2 = *(void *)(a1 + 160);
  if (v1 == v2) {
    return;
  }
  uint64_t v4 = v1 + 96;
  if (v1 + 96 == v2)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(v1 + 8);
    *(void *)(a1 + 200) = *(void *)(v1 + 32);
    *(_WORD *)(a1 + 208) = *(_WORD *)(v1 + 40);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(v1 + 88);
    *(void *)(a1 + 224) = *(void *)(v1 + 56);
    uint64_t v20 = v1;
  }

  else
  {
    double v5 = *(double *)(v1 + 104);
    double v6 = *(double *)(v1 + 8);
    if (v5 >= v6) {
      uint64_t v7 = *(void *)(a1 + 152);
    }
    else {
      uint64_t v7 = v1 + 96;
    }
    uint64_t v8 = v1 + 192;
    if (v1 + 192 != v2)
    {
      if (v5 >= v6) {
        uint64_t v9 = v1 + 96;
      }
      else {
        uint64_t v9 = *(void *)(a1 + 152);
      }
      uint64_t v10 = v1 + 192;
      uint64_t v11 = *(void *)(a1 + 152);
      while (1)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v10 + 96;
        if (v13 == v2) {
          break;
        }
        uint64_t v14 = v11 + 288;
        double v15 = *(double *)(v12 + 104);
        double v16 = *(double *)(v12 + 8);
        double v17 = *(double *)(v7 + 8);
        double v18 = *(double *)(v9 + 8);
        if (v16 >= v17) {
          uint64_t v19 = v7;
        }
        else {
          uint64_t v19 = v12;
        }
        if (v15 < v18) {
          uint64_t v14 = v9;
        }
        if (v15 < v17) {
          uint64_t v7 = v13;
        }
        if (v16 >= v18) {
          uint64_t v9 = v12;
        }
        if (v15 >= v16)
        {
          uint64_t v7 = v19;
          uint64_t v9 = v14;
        }

        uint64_t v10 = v12 + 192;
        uint64_t v11 = v12;
        if (v12 + 192 == v2) {
          goto LABEL_28;
        }
      }
    }

void sub_1011BCD38(void *a1, uint64_t a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
    *(_DWORD *)buf = 134349056;
    v49[0] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
    int v46 = 134349056;
    *(void *)double v47 = v38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu",  &v46,  12);
    uint64_t v40 = (uint8_t *)v39;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v39);
    if (v40 != buf) {
      free(v40);
    }
  }

  uint64_t v6 = a1[33];
  if (v6 == a1[34])
  {
LABEL_19:
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    uint64_t v12 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addClientToCoreAnalyticsInfo,adding new client type",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      LOWORD(v46) = 0;
      LODWORD(v45) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addClientToCoreAnalyticsInfo,adding new client type",  &v46,  v45);
      uint64_t v42 = (uint8_t *)v41;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v41);
      if (v42 != buf) {
        free(v42);
      }
    }

    int v13 = *(_DWORD *)(a2 + 16);
    double v14 = sub_101171D4C();
    double v15 = v14;
    double v16 = (double *)a1[34];
    unint64_t v17 = a1[35];
    if ((unint64_t)v16 >= v17)
    {
      uint64_t v19 = (double *)a1[33];
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v19) >> 4);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555LL) {
        sub_100007008();
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v19) >> 4);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v23 = 0x555555555555555LL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)sub_1000BB1F4((uint64_t)(a1 + 35), v23);
        uint64_t v19 = (double *)a1[33];
        double v16 = (double *)a1[34];
      }

      else
      {
        uint64_t v24 = 0LL;
      }

      double v32 = &v24[48 * v20];
      *(double *)double v32 = v15;
      *((_DWORD *)v32 + 2) = 1;
      *((_DWORD *)v32 + 4) = v13;
      *((void *)v32 + 3) = 0LL;
      double v33 = &v24[48 * v23];
      *((_DWORD *)v32 + 8) = 0;
      *((void *)v32 + 5) = 0LL;
      double v18 = (double *)(v32 + 48);
      if (v16 != v19)
      {
        do
        {
          __int128 v34 = *((_OWORD *)v16 - 3);
          __int128 v35 = *((_OWORD *)v16 - 1);
          *((_OWORD *)v32 - 2) = *((_OWORD *)v16 - 2);
          *((_OWORD *)v32 - 1) = v35;
          *((_OWORD *)v32 - 3) = v34;
          v32 -= 48;
          v16 -= 6;
        }

        while (v16 != v19);
        uint64_t v19 = (double *)a1[33];
      }

      a1[33] = v32;
      a1[34] = v18;
      a1[35] = v33;
      if (v19) {
        operator delete(v19);
      }
    }

    else
    {
      double *v16 = v14;
      *((_DWORD *)v16 + 2) = 1;
      *((_DWORD *)v16 + 4) = v13;
      v16[3] = 0.0;
      *((_DWORD *)v16 + 8) = 0;
      double v18 = v16 + 6;
      _OWORD v16[5] = 0.0;
    }

    a1[34] = v18;
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    double v36 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
      *(_DWORD *)buf = 134349056;
      v49[0] = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
      int v46 = 134349056;
      *(void *)double v47 = v43;
      LODWORD(v45) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu",  &v46,  v45);
      double v31 = (uint8_t *)v44;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v44);
LABEL_65:
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  else
  {
    while (1)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      uint64_t v7 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(v6 + 16);
        *(_DWORD *)buf = 67109120;
        LODWORD(v49[0]) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2148);
        }
        int v9 = *(_DWORD *)(v6 + 16);
        int v46 = 67109120;
        *(_DWORD *)double v47 = v9;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%d",  &v46);
        uint64_t v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnss Configuration &)",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(v6 + 16)) {
        break;
      }
      v6 += 48LL;
      if (v6 == a1[34]) {
        goto LABEL_19;
      }
    }

    ++*(_DWORD *)(v6 + 8);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    uint64_t v25 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *(_DWORD *)(v6 + 16);
      int v27 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)buf = 67240448;
      LODWORD(v49[0]) = v26;
      WORD2(v49[0]) = 1026;
      *(_DWORD *)((char *)v49 + 6) = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      int v28 = *(_DWORD *)(v6 + 16);
      int v29 = *(_DWORD *)(v6 + 8);
      int v46 = 67240448;
      *(_DWORD *)double v47 = v28;
      *(_WORD *)&v47[4] = 1026;
      *(_DWORD *)&v47[6] = v29;
      LODWORD(v45) = 14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d",  &v46,  v45);
      double v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)",  "%s\n",  v30);
      goto LABEL_65;
    }
  }

void sub_1011BD5D8(uint64_t a1, int *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
    *(_DWORD *)buf = 134349056;
    *(void *)uint64_t v42 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
    int v35 = 134349056;
    *(void *)double v36 = v23;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu",  &v35,  12);
    uint64_t v25 = (uint8_t *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v6 = *(int **)(a1 + 272);
  if ((int *)v7 != v6)
  {
    int v8 = *a2;
    int v9 = (double *)(v7 + 16);
    uint64_t v10 = -v7;
    while (v8 != *(_DWORD *)v9)
    {
      uint64_t v11 = (int *)(v9 + 4);
      v9 += 6;
      v10 -= 48LL;
      if (v11 == v6) {
        goto LABEL_20;
      }
    }

    int v12 = *((_DWORD *)v9 - 2) - 1;
    *((_DWORD *)v9 - 2) = v12;
    if (!v12)
    {
      double v13 = sub_101171D4C();
      v9[1] = v13 - *(v9 - 2);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      double v14 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *(_DWORD *)v9;
        uint64_t v16 = *((void *)v9 + 1);
        uint64_t v17 = *((void *)v9 - 2);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)uint64_t v42 = v15;
        *(_WORD *)&v42[4] = 2050;
        *(void *)&v42[6] = v16;
        __int16 v43 = 2050;
        double v44 = v13;
        __int16 v45 = 2050;
        uint64_t v46 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,now,%{public}.3lf,client AddedAt,%{public}.3lf",  buf,  0x26u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2148);
        }
        int v29 = *(_DWORD *)v9;
        uint64_t v30 = *((void *)v9 + 1);
        uint64_t v31 = *((void *)v9 - 2);
        int v35 = 67240960;
        *(_DWORD *)double v36 = v29;
        *(_WORD *)&v36[4] = 2050;
        *(void *)&v36[6] = v30;
        __int16 v37 = 2050;
        double v38 = v13;
        __int16 v39 = 2050;
        uint64_t v40 = v31;
        LODWORD(v34) = 38;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,now,%{public}.3lf,client AddedAt,%{public}.3lf",  &v35,  v34);
        double v33 = (uint8_t *)v32;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      uint64_t v18 = sub_1004DD868();
      sub_1004E1180(v18, (int *)v9);
      uint64_t v19 = *(void *)(a1 + 272);
      uint64_t v20 = v19 - (48 - v10);
      if (v19 != 48 - v10) {
        memmove((void *)-v10, (const void *)(48 - v10), v19 - (48 - v10));
      }
      *(void *)(a1 + 272) = v20 - v10;
    }
  }

uint64_t sub_1011BDB60(uint64_t a1, uint64_t *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addProactiveGnssClientWithConfiguration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    v25[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addProactiveGnssClientWithConfiguration",  v25,  2);
    uint64_t v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::Rhyth micGnssConfiguration &)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 96LL)
  {
    if (*(_DWORD *)(i + 24) == 2)
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2148);
      }
      double v14 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addProactiveGnssClientWithConfiguration,only one proactive client is allowed",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2148);
        }
        v25[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addProactiveGnssClientWithConfiguration,only one proactive client is allowed",  v25,  v22);
        unint64_t v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::R hythmicGnssConfiguration &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      return 0LL;
    }
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  uint64_t v6 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLRGCM,addProactiveGnssClientWithConfiguration starting Gps",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    v25[0] = 0;
    LODWORD(v22) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGCM,addProactiveGnssClientWithConfiguration starting Gps",  v25,  v22);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::Rhyth micGnssConfiguration &)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  sub_1011BB74C((void *)a1, a2);
  sub_1011BC130(a1);
  sub_1011BCD38((void *)a1, (uint64_t)a2);
  uint64_t v7 = *(void *)(a1 + 144);
  if (v7)
  {
    __int128 v8 = *(_OWORD *)(a1 + 224);
    v23[2] = *(_OWORD *)(a1 + 208);
    v23[3] = v8;
    v23[4] = *(_OWORD *)(a1 + 240);
    uint64_t v24 = *(void *)(a1 + 256);
    __int128 v9 = *(_OWORD *)(a1 + 192);
    v23[0] = *(_OWORD *)(a1 + 176);
    v23[1] = v9;
    sub_1011B5974(v7, (uint64_t *)v23);
  }

  if (!*(void *)(a1 + 136)) {
    return 1LL;
  }
  uint64_t v10 = a1 + 112;
  int v11 = *(_DWORD *)(a1 + 192);
  int v12 = -1431655765 * ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
  uint64_t v13 = 1LL;
  sub_1011BB708(v10, 1, v11, v12);
  return v13;
}

void sub_1011BE004(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1011BE22C(uint64_t a1, void *a2)
{
  if ((sub_1004FD0BC() & 1) == 0)
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    uint64_t v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "CLPG,onVisit for ProactiveGnss is not handled on this platform",  buf,  2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "CLPG,onVisit for ProactiveGnss is not handled on this platform",  v11,  2,  v11[0]);
LABEL_25:
    uint64_t v10 = (uint8_t *)v8;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLProactiveGnss::onVisit(const CLVisit *)", "%s\n", v8);
    if (v10 != buf) {
      free(v10);
    }
    return;
  }

  if (a2)
  {
    int v4 = [a2 hasDepartureDate];
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    unint64_t v5 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)buf = 68289795;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 1026;
      int v17 = v4;
      __int16 v18 = 2113;
      uint64_t v19 = a2;
      __int16 v20 = 1026;
      int v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:CLPG,ProactiveGnss,received leeched visit notification, isVisitExit:%{public}d, v isit:%{private, location:escape_only}@, Previous visit state:%{public}d}",  buf,  0x28u);
    }

    *(_BYTE *)(a1 + 202) = v4;
    sub_1011BF04C(a1, v4);
    return;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2168);
  }
  __int128 v9 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLPG,onVisit is nil", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    LOWORD(v11[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "CLPG,onVisit is nil",  v11,  2,  v11[0]);
    goto LABEL_25;
  }

void sub_1011BE57C()
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2168);
  }
  char v0 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "CLPG,getMinSessionDurationBetween2Sessions",  (uint8_t *)buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    *(_WORD *)int v11 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLPG,getMinSessionDurationBetween2Sessions",  v11,  2);
    uint64_t v7 = (char *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLProactiveGnss::getDurationBetween2Sessions(const double)",  "%s\n",  v6);
  }

  sub_1002F0B04(buf);
  else {
    double v1 = 30.0;
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (*((void *)&buf[0] + 1))
  {
    uint64_t v3 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2168);
  }
  unint64_t v5 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134349056;
    *(double *)((char *)buf + 4) = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CLPG,getMinSessionDurationBetween2Sessions,durBetween2Sessions,%{public}.3lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    *(_DWORD *)int v11 = 134349056;
    *(double *)&v11[4] = v1;
    LODWORD(v10) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLPG,getMinSessionDurationBetween2Sessions,durBetween2Sessions,%{public}.3lf",  v11,  v10);
    __int128 v9 = (char *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLProactiveGnss::getDurationBetween2Sessions(const double)",  "%s\n",  v8);
  }

void sub_1011BE8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1011BE8E0(_BYTE *a1, unsigned __int8 *a2)
{
  if (!a1[195])
  {
    if (a1[189] && !a1[188]) {
      goto LABEL_7;
    }
LABEL_6:
    BOOL v4 = *((_DWORD *)a2 + 1) > 3;
    goto LABEL_8;
  }

  if (a1[194]) {
    goto LABEL_6;
  }
LABEL_7:
  BOOL v4 = 0;
LABEL_8:
  if (a1[197])
  {
    if (!a1[196]) {
      goto LABEL_15;
    }
  }

  else if (a1[191] && !a1[190])
  {
    goto LABEL_15;
  }

  if (a2[8])
  {
    BOOL v5 = 1;
    goto LABEL_22;
  }

void sub_1011BEC6C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 200))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    double v1 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLPG,proactiveGnss already active", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2168);
      }
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLPG,proactiveGnss already active",  v14,  2,  v14[0]);
LABEL_24:
      BOOL v13 = (uint8_t *)v2;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveGnss::startProactiveGnss()", "%s\n", v2);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  else if (sub_1004FD0BC() && *(_BYTE *)(a1 + 201))
  {
    *(_OWORD *)buf = xmmword_1012ED930;
    int v16 = -1;
    uint64_t v17 = 0x7FEFFFFFFFFFFFFFLL;
    __int16 v18 = 0;
    char v19 = 0;
    __int128 v20 = xmmword_1012ED960;
    __int16 v21 = 1;
    __int128 v22 = xmmword_1013E4520;
    char v23 = 0;
    sub_1011BEFB0(a1);
    uint64_t v4 = *(void *)(a1 + 32);
    LODWORD(v14[0]) = 2;
    sub_1011BA348(v4, v14, (uint64_t)buf);
    sub_1011BE57C();
    uint64_t v17 = v5;
    int v6 = sub_1011BDB60(*(void *)(a1 + 32), (uint64_t *)buf);
    *(_BYTE *)(a1 + 200) = v6;
    int v7 = (uint8_t *)(a1 + 48);
    if (v6) {
      int v7 = buf;
    }
    __int128 v8 = *((_OWORD *)v7 + 1);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 64) = v8;
    __int128 v10 = *((_OWORD *)v7 + 3);
    __int128 v9 = *((_OWORD *)v7 + 4);
    __int128 v11 = *((_OWORD *)v7 + 2);
    *(_BYTE *)(a1 + 128) = v7[80];
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = v9;
    *(_OWORD *)(a1 + 80) = v11;
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    unsigned int v12 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "CLPG,#warning,start,isProactiveGnssAllowed not allowed",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2168);
      }
      LOWORD(v14[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLPG,#warning,start,isProactiveGnssAllowed not allowed",  v14,  2,  v14[0]);
      goto LABEL_24;
    }
  }

void sub_1011BEFB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 208))
  {
    int v2 = sub_1004FCFC8();
  }

  else
  {
    int v3 = *(unsigned __int8 *)(a1 + 202);
    int v2 = sub_1004FCFC8();
    if (!v3)
    {
      double v7 = 280.0;
      goto LABEL_11;
    }
  }

  int v4 = v2;
  if (*(void *)(a1 + 32))
  {
    sub_1011BA4D8();
    double v6 = v5;
    if (*(void *)(a1 + 32)) {
      sub_1011BA4D8();
    }
    else {
      double v7 = 120.0;
    }
  }

  else
  {
    double v6 = 120.0;
    double v7 = 120.0;
  }

  if (v4) {
    double v7 = v6;
  }
LABEL_11:
  *(double *)(a1 + 176) = v7;
}

void sub_1011BF04C(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 32))
  {
    v24[0] = 2;
    int v4 = (unsigned __int8 *)(a1 + 200);
    if (!*(_BYTE *)(a1 + 200) || sub_1004FD0BC() && *(_BYTE *)(a1 + 201))
    {
      if (sub_1004FD0BC() && *(_BYTE *)(a1 + 201))
      {
        int v5 = sub_1011BE8E0((_BYTE *)a1, v4);
        int v6 = v5;
        if (a2)
        {
          if (*(_BYTE *)(a1 + 200))
          {
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A2168);
            }
            double v7 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "CLPG,visit exit proactive rhythmic active",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_1018A2168);
              }
              uint64_t v8 = qword_101934888;
              LOWORD(v23[0]) = 0;
              __int128 v9 = "CLPG,visit exit proactive rhythmic active";
LABEL_50:
              uint64_t v18 = 1LL;
LABEL_58:
              double v21 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  v18,  v9,  v23,  2,  v23[0]);
              BOOL v13 = v22;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLProactiveGnss::startStopProactiveGnss(const BOOL)",  "%s\n",  v21);
LABEL_59:
              if (v13 != buf) {
                free(v13);
              }
            }
          }

          else
          {
            *(double *)(a1 + 168) = sub_101171D4C();
            if (v6 == 1) {
              sub_1011BEC6C(a1);
            }
          }
        }

        else if (*(_BYTE *)(a1 + 200))
        {
          if (!v5)
          {
            double v16 = sub_101171D4C();
            *(double *)(a1 + 168) = v16;
            LODWORD(v16) = *(_DWORD *)(a1 + 184);
            [*(id *)(a1 + 136) setNextFireDelay:(double)*(unint64_t *)&v16];
          }
        }

        else
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_1018A2168);
          }
          uint64_t v17 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "CLPG,visit entry proactive rhythmic not-active",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A2168);
            }
            uint64_t v8 = qword_101934888;
            LOWORD(v23[0]) = 0;
            __int128 v9 = "CLPG,visit entry proactive rhythmic not-active";
            goto LABEL_50;
          }
        }
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2168);
        }
        BOOL v15 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "CLPG,onVisit MA feature is dis-allowed",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_1018A2168);
          }
          uint64_t v8 = qword_101934888;
          LOWORD(v23[0]) = 0;
          __int128 v9 = "CLPG,onVisit MA feature is dis-allowed";
          uint64_t v18 = 2LL;
          goto LABEL_58;
        }
      }
    }

    else
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2168);
      }
      uint64_t v14 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "CLPG,onVisit MA feature is dis-allowed, stop proactive",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A2168);
        }
        LOWORD(v23[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLPG,onVisit MA feature is dis-allowed, stop proactive",  v23,  2);
        __int128 v20 = (uint8_t *)v19;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n", v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      sub_1011BA7BC(*(void *)(a1 + 32), v24);
      *(_BYTE *)(a1 + 200) = 0;
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2168);
    }
    __int128 v10 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "CLPG,RhythmicGnssManager is not available",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A2168);
      }
      LOWORD(v24[0]) = 0;
      double v11 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "CLPG,RhythmicGnssManager is not available",  v24,  2);
      BOOL v13 = v12;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n", v11);
      goto LABEL_59;
    }
  }

void sub_1011BF698(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1011BF6C4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013E4570;
      v1[3] = unk_1013E4580;
      v1[4] = xmmword_1013E4590;
      v1[0] = xmmword_1013E4550;
      v1[1] = unk_1013E4560;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1011BF798(_Unwind_Exception *a1)
{
}

void sub_1011BF7B0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1011BF814()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1011BF888(_Unwind_Exception *a1)
{
}

void sub_1011BF8A0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      double v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)double v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1011BF93C(_Unwind_Exception *a1)
{
}

void sub_1011BF954()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      double v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *double v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1011BF9E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1011BF9F8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A05D0, (void *)&_mh_execute_header);
}

void sub_1011BFA3C(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2188);
  }
  uint64_t v8 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    int v18 = a2;
    __int16 v19 = 1026;
    int v20 = a4;
    __int16 v21 = 1026;
    int v22 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "CLRhythmicGnssUtility,updateStateInformationToRhythmic,modeOfOps,%{public}d,powerMode,%{public}d,state,%{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2188);
    }
    v12[0] = 67240704;
    v12[1] = a2;
    __int16 v13 = 1026;
    int v14 = a4;
    __int16 v15 = 1026;
    int v16 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRhythmicGnssUtility,updateStateInformationToRhythmic,modeOfOps,%{public}d,powerMode,%{public}d,state,%{public}d",  v12,  20);
    double v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssUtility::updateStateInformationToRhythmic(const CLLocationProvider_Type::GnssModeOfOperation, c onst BOOL, const CLRhythmicGnssWakeMode)",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  uint64_t v9 = 2LL;
  if (!a3) {
    uint64_t v9 = 0LL;
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFDLL | v9;
}

void sub_1011BFC44(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1011BFC70()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1011BFCD4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1011BFD48(_Unwind_Exception *a1)
{
}

void sub_1011BFD60()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      double v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)double v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1011BFDFC(_Unwind_Exception *a1)
{
}

void sub_1011BFE14()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      double v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      *double v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_1011BFEA0(_Unwind_Exception *a1)
{
}

uint64_t sub_1011BFEB8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A05E8, (void *)&_mh_execute_header);
}

void sub_1011C02D4(_Unwind_Exception *a1)
{
}

id sub_1011C02F0(uint64_t a1, void *a2)
{
  return _[a2 onDeviceMotionData:a1];
}

void sub_1011C05C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011C0674(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void *sub_1011C06A0(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_1018A21D8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1011C07CC;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1011C07E0;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1011C07A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1011C07CC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1011C07E0(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

uint64_t sub_1011C07F8(uint64_t a1)
{
  *(void *)a1 = off_1018A2210;

  return a1;
}

void sub_1011C0834(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011C0B34(a1);
  operator delete(v1);
}

id sub_1011C0848(void *a1, int a2, void *__src, unint64_t a4)
{
  HIWORD(v29) = 0;
  if (a4 >= 0x78) {
    size_t v8 = 120LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x79)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A2238);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v40 = (unint64_t)"N14CLDeviceMotion6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v41 = 2048;
      uint64_t v42 = 120LL;
      __int16 v43 = 2048;
      unint64_t v44 = a4;
      __int16 v45 = 1024;
      int v46 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A2238);
      }
      int v31 = 136315906;
      unint64_t v32 = (unint64_t)"N14CLDeviceMotion6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v33 = 2048;
      uint64_t v34 = 120LL;
      __int16 v35 = 2048;
      unint64_t v36 = a4;
      __int16 v37 = 1024;
      int v38 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v31,  38,  v17,  LODWORD(v18[0]));
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>::dispatchData(int, const void *, size_t) [ T = CLDeviceMotion::Sample]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int16 v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1011C0B88;
  v18[3] = &unk_10183ADC8;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v23 = __dst[4];
  __int128 v24 = __dst[5];
  __int128 v25 = v29;
  __int128 v19 = __dst[0];
  __int128 v20 = __dst[1];
  __int128 v21 = __dst[2];
  __int128 v22 = __dst[3];
  uint64_t v26 = v30;
  uint64_t v27 = v10;
  return [v13 async:v18];
}

uint64_t sub_1011C0B1C()
{
  return 1LL;
}

uint64_t sub_1011C0B24(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1011C0B34(uint64_t a1)
{
  *(void *)a1 = off_1018A21D8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1011C0B88(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 168));
  }
  return result;
}

void sub_1011C0BCC(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1011C0BF8(id a1)
{
  uint64_t v1 = operator new(0x990uLL);
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0LL;
  *((void *)v1 + 5) = 0x1400000000LL;
  uint64_t v2 = (CFRunLoopTimerRef *)operator new(0x40uLL);
  sub_10052CE08(v2);
  *(void *)uint64_t v1 = v2;
  int v3 = operator new(0xB0uLL);
  sub_1002F3524((uint64_t)v3, (uint64_t)v2);
  *((void *)v1 + 1) = v3;
  int v4 = operator new(0x20uLL);
  *int v4 = off_1018A2210;
  *int v4 = &off_1018A22A8;
  v4[1] = 0LL;
  v4[2] = sub_1011C0F0C;
  v4[3] = v1;
  *((void *)v1 + 2) = v4;
  sub_1006DCB40(*((void *)v1 + 1), 8, (uint64_t)v4, -1.0);
  int v5 = operator new(0x20uLL);
  *int v5 = off_1018A2210;
  *int v5 = &off_1018A22F8;
  v5[1] = 0LL;
  v5[2] = sub_1011C1090;
  v5[3] = v1;
  *((void *)v1 + 3) = v5;
  sub_1006DCB40(*((void *)v1 + 1), 7, (uint64_t)v5, -1.0);
  int v6 = operator new(0x20uLL);
  void *v6 = off_1018A2210;
  void *v6 = &off_1018A2348;
  v6[1] = 0LL;
  v6[2] = sub_1011C1214;
  v6[3] = v1;
  *((void *)v1 + 4) = v6;
  sub_1006DCB40(*((void *)v1 + 1), 0, (uint64_t)v6, -1.0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  v1,  (CFNotificationCallback)sub_1011C1428,  @"com.apple.sysdiagnose.sysdiagnoseStarted",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018A2278);
  }
  size_t v8 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLATVRemoteStatsCollector started", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018A2278);
    }
    v11[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "CLATVRemoteStatsCollector started",  v11,  2);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLATVRemoteStatsCollector::CLATVRemoteStatsCollector()", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  qword_1019A4190 = (uint64_t)v1;
}

void sub_1011C0ED4(_Unwind_Exception *a1)
{
}

void sub_1011C0F0C()
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018A2278);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "CLATVRemoteStatsCollector received metrics packet",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018A2278);
    }
    v3[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "CLATVRemoteStatsCollector received metrics packet",  v3,  2);
    uint64_t v2 = (uint8_t *)v1;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLATVRemoteStatsCollector::onDeviceMotionLiteMetrics(const SessionMetricsMsg *, void *)",  "%s\n",  v1);
    if (v2 != buf) {
      free(v2);
    }
  }

void sub_1011C1090()
{
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018A2278);
  }
  unsigned __int8 v0 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "CLATVRemoteStatsCollector received Sysdiagnose packet",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018A2278);
    }
    v3[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "CLATVRemoteStatsCollector received Sysdiagnose packet",  v3,  2);
    uint64_t v2 = (uint8_t *)v1;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLATVRemoteStatsCollector::onDeviceMotionLiteSysdiagnose(const SysDiagnoseMsg *, void *)",  "%s\n",  v1);
    if (v2 != buf) {
      free(v2);
    }
  }

void sub_1011C1214(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 40) + (unint64_t)*(unsigned __int16 *)(a2 + 42);
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = a2 + 40 + 120 * (v2 - v3);
  __int128 v6 = *(_OWORD *)(a1 + 80);
  __int128 v5 = *(_OWORD *)(a1 + 96);
  __int128 v7 = *(_OWORD *)(a1 + 64);
  *(void *)(v4 + 120) = *(void *)(a1 + 112);
  __int128 v8 = *(_OWORD *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a1 + 48);
  __int128 v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 56) = v9;
  *(_OWORD *)(v4 + 40) = v8;
  *(_OWORD *)(v4 + 24) = v10;
  *(_OWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 104) = v5;
  *(_OWORD *)(v4 + 88) = v6;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 42);
  unint64_t v12 = *(unsigned int *)(a2 + 44);
  if (v12 <= v11)
  {
    unint64_t v13 = *(unsigned __int16 *)(a2 + 40) + 1LL;
    if (v13 < v12) {
      LOWORD(v12) = 0;
    }
    *(_WORD *)(a2 + 40) = v13 - v12;
  }

  else
  {
    *(_WORD *)(a2 + 42) = v11 + 1;
  }

  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018A2278);
  }
  int v14 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CLATVRemoteStatsCollector received Fused packet",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018A2278);
    }
    v17[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "CLATVRemoteStatsCollector received Fused packet",  v17,  2);
    int v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLATVRemoteStatsCollector::onDeviceMotionLiteFused(const CLMotionTypeDeviceMotionLite *, void *)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

void sub_1011C1428(uint64_t a1, uint64_t a2)
{
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934560 != -1) {
    dispatch_once(&qword_101934560, &stru_1018A2278);
  }
  uint64_t v4 = &OBJC_METACLASS___CLPrivacyManager.vtable;
  __int128 v5 = (os_log_s *)qword_101934568;
  if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(unsigned __int16 *)(a2 + 42);
    *(_DWORD *)buf = 134349056;
    *(void *)int v89 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "CLATVRemoteStatsCollector sysdiagnose started, %{public}zu samples in queue",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018A2278);
    }
    uint64_t v48 = *(unsigned __int16 *)(a2 + 42);
    int v54 = 134349056;
    *(void *)int v55 = v48;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  0LL,  "CLATVRemoteStatsCollector sysdiagnose started, %{public}zu samples in queue",  &v54,  12);
    __int16 v50 = (uint8_t *)v49;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLATVRemoteStatsCollector::onSysdiagnoseStarted(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v49);
    if (v50 != buf) {
      free(v50);
    }
  }

  if (*(_WORD *)(a2 + 42))
  {
    unint64_t v7 = 0LL;
    __int128 v8 = (unsigned __int16 *)(a2 + 40);
    __int16 v52 = (unsigned __int16 *)(a2 + 40);
    uint64_t v53 = a2;
    do
    {
      uint64_t v9 = sub_1011C1A1C(v8, v7);
      __int128 v10 = (os_log_s *)v4[173];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(v9 + 80);
        double v12 = *(double *)v9;
        uint64_t v13 = *(void *)(v9 + 8);
        double v14 = *(float *)(v9 + 44);
        double v15 = *(float *)(v9 + 48);
        double v16 = *(float *)(v9 + 52);
        double v17 = *(float *)(v9 + 32);
        double v18 = *(float *)(v9 + 36);
        double v19 = *(float *)(v9 + 40);
        uint64_t v20 = *(void *)(v9 + 16);
        uint64_t v21 = *(void *)(v9 + 24);
        double v22 = sub_10070CFCC((double *)v9);
        double v23 = sub_10070CF8C((double *)v9);
        double v24 = sub_10070CFE8((double *)v9);
        int v25 = *(unsigned __int8 *)(v9 + 112);
        int v26 = *(unsigned __int8 *)(v9 + 113);
        int v27 = *(unsigned __int8 *)(v9 + 114);
        *(_DWORD *)buf = 67244544;
        *(_DWORD *)int v89 = v7;
        *(_WORD *)&v89[4] = 2050;
        *(void *)&v89[6] = v11;
        p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
        __int16 v90 = 2050;
        double v91 = v12;
        __int16 v92 = 2050;
        uint64_t v93 = v13;
        uint64_t v4 = &OBJC_METACLASS___CLPrivacyManager.vtable;
        __int16 v94 = 2050;
        uint64_t v95 = v20;
        __int128 v8 = v52;
        a2 = v53;
        __int16 v96 = 2050;
        uint64_t v97 = v21;
        __int16 v98 = 2050;
        double v99 = v14;
        __int16 v100 = 2050;
        double v101 = v15;
        __int16 v102 = 2050;
        double v103 = v16;
        __int16 v104 = 2050;
        double v105 = v17;
        __int16 v106 = 2050;
        double v107 = v18;
        __int16 v108 = 2050;
        double v109 = v19;
        __int16 v110 = 2050;
        double v111 = v22;
        __int16 v112 = 2050;
        double v113 = v23;
        __int16 v114 = 2050;
        double v115 = v24;
        __int16 v116 = 1026;
        int v117 = v25;
        __int16 v118 = 1026;
        int v119 = v26;
        __int16 v120 = 1026;
        int v121 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CLATVRemoteStatsCollector: index,%{public}d,machTimestamp,%{public}llu,q.w,%{public}f,q.x,%{public}f,q.y,%{pub lic}f,q.z,%{public}f,omega.x,%{public}f,omega.y,%{public}f,omega.z,%{public}f,userAccel.x,%{public}f,userAccel .y,%{public}f,userAccel.z,%{public}f,pitch,%{public}f,roll,%{public}f,yaw,%{public}f,statusBits,%{public}u,%{p ublic}u,%{public}u",  buf,  0xA6u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        int v28 = v4[173];
        uint64_t v29 = *(void *)(v9 + 80);
        double v30 = *(double *)v9;
        uint64_t v31 = *(void *)(v9 + 8);
        double v32 = *(float *)(v9 + 44);
        double v33 = *(float *)(v9 + 48);
        double v34 = *(float *)(v9 + 52);
        double v35 = *(float *)(v9 + 32);
        double v36 = *(float *)(v9 + 36);
        double v37 = *(float *)(v9 + 40);
        uint64_t v38 = *(void *)(v9 + 16);
        uint64_t v39 = *(void *)(v9 + 24);
        double v40 = sub_10070CFCC((double *)v9);
        double v41 = sub_10070CF8C((double *)v9);
        double v42 = sub_10070CFE8((double *)v9);
        int v43 = *(unsigned __int8 *)(v9 + 112);
        int v44 = *(unsigned __int8 *)(v9 + 113);
        int v45 = *(unsigned __int8 *)(v9 + 114);
        int v54 = 67244544;
        *(_DWORD *)int v55 = v7;
        *(_WORD *)&v55[4] = 2050;
        *(void *)&v55[6] = v29;
        __int16 v56 = 2050;
        double v57 = v30;
        __int16 v58 = 2050;
        uint64_t v59 = v31;
        __int16 v60 = 2050;
        uint64_t v61 = v38;
        __int16 v62 = 2050;
        uint64_t v63 = v39;
        __int16 v64 = 2050;
        double v65 = v32;
        __int16 v66 = 2050;
        double v67 = v33;
        __int16 v68 = 2050;
        double v69 = v34;
        __int16 v70 = 2050;
        double v71 = v35;
        __int16 v72 = 2050;
        double v73 = v36;
        __int16 v74 = 2050;
        double v75 = v37;
        __int16 v76 = 2050;
        double v77 = v40;
        __int16 v78 = 2050;
        double v79 = v41;
        __int16 v80 = 2050;
        double v81 = v42;
        __int16 v82 = 1026;
        int v83 = v43;
        __int16 v84 = 1026;
        int v85 = v44;
        __int16 v86 = 1026;
        int v87 = v45;
        LODWORD(v51) = 166;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v28,  0LL,  "CLATVRemoteStatsCollector: index,%{public}d,machTimestamp,%{public}llu,q.w,%{public}f,q.x,%{public}f,q.y,%{pub lic}f,q.z,%{public}f,omega.x,%{public}f,omega.y,%{public}f,omega.z,%{public}f,userAccel.x,%{public}f,userAccel .y,%{public}f,userAccel.z,%{public}f,pitch,%{public}f,roll,%{public}f,yaw,%{public}f,statusBits,%{public}u,%{p ublic}u,%{public}u",  &v54,  v51);
        int v47 = (uint8_t *)v46;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLATVRemoteStatsCollector::onSysdiagnoseStarted(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)",  "%s\n",  v46);
        if (v47 != buf) {
          free(v47);
        }
        __int128 v8 = v52;
        a2 = v53;
        p_vtable = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
        uint64_t v4 = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
      }

      ++v7;
    }

    while (v7 < *(unsigned __int16 *)(a2 + 42));
  }

void sub_1011C1984(id a1)
{
  qword_101934568 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1011C19B4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011C07F8(a1);
  operator delete(v1);
}

uint64_t sub_1011C19C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1011C19D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011C07F8(a1);
  operator delete(v1);
}

uint64_t sub_1011C19EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1011C19FC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011C07F8(a1);
  operator delete(v1);
}

uint64_t sub_1011C1A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

uint64_t sub_1011C1A1C(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018A2370);
    }
    unint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v17 = a2;
      __int16 v18 = 1024;
      int v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A2370);
      }
      int v9 = *((_DWORD *)a1 + 1);
      int v12 = 134218240;
      unint64_t v13 = a2;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 2 33,i,%zu,capacity,%u.",  (size_t)&v12,  18);
      uint64_t v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const T &CMQueue<CLMotionTypeDeviceMotionLite>::operator[](const size_t) const [T = CLMotionTypeDeviceMotionLite]",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0LL;
  }
  return (uint64_t)&a1[60 * (v4 - v5) + 4];
}

void sub_1011C1C18(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1011C1C44(uint64_t a1)
{
  unint64_t v2 = -[CLIntersiloUniverse initWithSilo:vendor:]( objc_alloc(&OBJC_CLASS___CLIntersiloUniverse),  "initWithSilo:vendor:",  +[CLSilo main](&OBJC_CLASS___CLSilo, "main"),  +[CLServiceVendor sharedInstance](&OBJC_CLASS___CLServiceVendor, "sharedInstance"));
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 88) = 0x4066800000000000LL;
  *(void *)(a1 + 96) = 0LL;
  if (qword_1019A41A0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    uint64_t v3 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v80 = 2082;
      *(void *)&v80[2] = "";
      *(_WORD *)&v80[10] = 2050;
      *(void *)&v80[12] = qword_1019A41A0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning multiple instances created, last instance:%{public}p}",  buf,  0x1Cu);
    }
  }

  qword_1019A41A0 = a1;
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  sub_1002F0B04(buf);
  char v5 = sub_1002A775C(*(uint64_t *)buf, "CLSilo.Version", &v78);
  if (v78 >= dword_101993270) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  unint64_t v7 = *(std::__shared_weak_count **)v80;
  if (!*(void *)v80) {
    goto LABEL_13;
  }
  int v8 = (unint64_t *)(*(void *)v80 + 8LL);
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v6 & 1) != 0) {
      goto LABEL_25;
    }
  }

  else
  {
LABEL_13:
    if ((v6 & 1) != 0) {
      goto LABEL_25;
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "CLSilo.SyncgetGraphFile", 0xFFFFFFFFLL);
  __int128 v10 = *(std::__shared_weak_count **)v80;
  if (*(void *)v80)
  {
    uint64_t v11 = (unint64_t *)(*(void *)v80 + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "CLSilo.NameToCohortMap", 0xFFFFFFFFLL);
  unint64_t v13 = *(std::__shared_weak_count **)v80;
  if (*(void *)v80)
  {
    __int16 v14 = (unint64_t *)(*(void *)v80 + 8LL);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

void sub_1011C26B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  uint64_t v40 = *(void *)(v38 + 32);
  *(void *)(v38 + 32) = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  sub_1002E4CB0(v38);
  _Unwind_Resume(a1);
}

void sub_1011C2834(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A23B0);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    char v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonCore::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A23B0);
    }
    unint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonCore::onStatusNotification, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v9 = 0;
  }

  if (*a2 == 4
    && (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a4 + 16), "vendor"),  "proxyForService:",  @"CLDaemonStatus"),  "syncgetHasLingerClients") & 1) == 0)
  {
    sub_1011C4C68(a4, -1);
  }

  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1011C2A0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011C2A2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t))(*(void *)v1 + 16LL))(v1);
  if (objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(v1 + 16), "vendor"),  "proxyForService:",  @"CLDaemonStatus"),  "syncgetHasLingerClients"))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    unint64_t v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      __int16 v5 = 2082;
      char v6 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:linger requested - not shutting down}",  (uint8_t *)v4,  0x12u);
    }
  }

  else
  {
    sub_1011C5324((unsigned int *)v1, 0);
    [*(id *)(v1 + 48) setNextFireDelay:1.79769313e308];
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
}

void sub_1011C2B60(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011C2B94()
{
}

uint64_t sub_1011C2BA4(uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  [*(id *)(a1 + 96) invalidate];

  *(void *)(a1 + 96) = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_1002E4CB0(a1);
}

uint64_t sub_1011C2C08(uint64_t a1)
{
  uint64_t v1 = (const char *)a1;
  if (sub_1002E52D8(a1))
  {
    uint64_t v2 = _os_activity_create( (void *)&_mh_execute_header,  "CL: startInitialize",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_101934980 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018A23D0);
    }
    std::string::size_type v26 = (os_log_s *)qword_101934A78;
    uint64_t v1 = "(fMutex).__assertOwned()";
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      id v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "(fMutex).__assertOwned()";
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
    }

    int v27 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      *(_DWORD *)buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      id v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v27,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
    }

    __int128 v28 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      id v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "(fMutex).__assertOwned()";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm",  594,  "startInitialize");
    __break(1u);
  }

  dispatch_once(&qword_101934980, &stru_1018A2390);
LABEL_3:
  uint64_t v3 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    int v47 = 0;
    __int16 v48 = 2082;
    id v49 = "";
    __int16 v50 = 2082;
    uint64_t v51 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:startInitialize, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCapabilityMonitor");
  uint64_t v31 = v4;
  [*(id *)(*((void *)v1 + 4) + 16) register:*(void *)(*((void *)v1 + 4) + 8) forNotification:4 registrationInfo:0];
  __int16 v5 = -[NSURLCache initWithMemoryCapacity:diskCapacity:diskPath:]( objc_alloc(&OBJC_CLASS___NSURLCache),  "initWithMemoryCapacity:diskCapacity:diskPath:",  0LL,  0LL,  0LL);
  +[NSURLCache setSharedURLCache:](&OBJC_CLASS___NSURLCache, "setSharedURLCache:", v5);

  uint64_t v6 = sub_1002F8DDC();
  if (sub_1002A6FD4(v6, (uint64_t)@"PrivateMode", &v33))
  {
    id v7 = objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "proxyForService:", @"CLNetworkLocationProvider");
    [v7 setPrivateMode:v33];
    id v8 = objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "proxyForService:", @"CLHarvesterService");
    [v8 setPrivateMode:v33];
  }

  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLLocationController");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLFilteredLocationController");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLTimeZoneManager");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLApplicationLifecycleManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCountryTracker");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLFenceManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CMHealthColdStorageService");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLStatusBarIconManager");
  sub_1008FA854(0);
  sub_1007492FC();
  sub_10082BF88();
  sub_10040CDA0();
  sub_100A290E4();
  sub_1008C5980();
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCardioChangeService");
  if (qword_1019A4198 != -1) {
    dispatch_once(&qword_1019A4198, &stru_1018A2258);
  }
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLGyroCalibrationDatabase");
  sub_100E28910();
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLPressureCalibrationDatabase");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLFitnessTrackingNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLStepCountNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMotionState");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLOnBodyNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMotionStateMediator");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLNatalimetryNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCatherineNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCompanionNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSedentaryTimerNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLActivityLogger");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLVehicleStateNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSensorRecorderNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMotionSyncStore");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMotionStateObserver");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMotionHintLogger");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLRunningAggregatorAWD");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLFitnessDailyAnalyticsAggregator");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLFallNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLPencilState");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMagneticAccessory");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLEmergencyController");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLKappaNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLNearbydInterfaceManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSpringTrackingNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLFitnessMachineNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMotionAlarmNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLHealthAssessmentNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLPressureStatsCollector");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLMobilityWalkingBoutService");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLVO2MaxCloudKitManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLDMVisionService");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSimulationController");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLClientManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLTilesManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCellTilesManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLCoarseCellTilesManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLWifiTilesManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLAppTileDataProvider");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLTransitMacTileDataProvider");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLRoutineMonitor");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSignificantVisitManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSuggestedActionManager");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLLocationStreamer");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLLocationMulticlientStreamer");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLSensorMonitor");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLInternalService");
  objc_msgSend( objc_msgSend(*((id *)v1 + 2), "vendor"),  "ensureServiceIsRunning:",  @"CLAvengerObservationReporterService");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMicroLocationNotifier");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLDistributedSensingService");
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", @"CLMiLoBluetoothService");
  id v9 = -[NSDictionary objectForKeyedSubscript:]( +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  @"/System/Library/LaunchDaemons/com.apple.locationd.plist"),  "objectForKeyedSubscript:",  @"LaunchEvents");
  if (!v9)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    uint64_t v21 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "no LaunchEvents found", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    LOWORD(v34) = 0;
    LODWORD(v3sub_1011C5518(qword_1019A41A0, 0) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "no LaunchEvents found",  &v34,  v30);
    double v23 = (uint8_t *)v22;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void launchServicesWithLaunchEvents()", "%s\n", v22);
LABEL_55:
    if (v23 != buf) {
      free(v23);
    }
    goto LABEL_39;
  }

  id v10 = [v9 objectForKeyedSubscript:@"com.apple.xpc.activity"];
  int v11 = v10;
  if (v10)
  {
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id v12 = [v10 countByEnumeratingWithState:&v34 objects:buf count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v35;
      do
      {
        __int16 v14 = 0LL;
        do
        {
          if (*(void *)v35 != v13) {
            objc_enumerationMutation(v11);
          }
          unint64_t v15 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v14);
          unsigned int v16 = [v15 hasPrefix:@"com.apple.locationd."];
          id v17 = [v15 componentsSeparatedByString:@"."];
          if (v16) {
            uint64_t v18 = 3LL;
          }
          else {
            uint64_t v18 = 0LL;
          }
          id v19 = [v17 objectAtIndexedSubscript:v18];
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018A2390);
          }
          uint64_t v20 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v38 = 68289538;
            int v39 = 0;
            __int16 v40 = 2082;
            double v41 = "";
            __int16 v42 = 2114;
            id v43 = v19;
            __int16 v44 = 2114;
            int v45 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:ensure service is running for xpc activity, service:%{public, location:escape _only}@, identifier:%{public, location:escape_only}@}",  v38,  0x26u);
          }

          -[CLServiceVendor ensureServiceIsRunning:]( +[CLServiceVendor sharedInstance](&OBJC_CLASS___CLServiceVendor, "sharedInstance"),  "ensureServiceIsRunning:",  v19);
          __int16 v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v11 countByEnumeratingWithState:&v34 objects:buf count:16];
      }

      while (v12);
    }

    goto LABEL_39;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018A2390);
  }
  double v24 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "no xpc activities registered", buf, 2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    LOWORD(v34) = 0;
    LODWORD(v3sub_1011C5518(qword_1019A41A0, 0) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "no xpc activities registered",  &v34,  v30);
    double v23 = (uint8_t *)v29;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void launchServicesWithLaunchEvents()", "%s\n", v29);
    goto LABEL_55;
  }

void sub_1011C3938( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state)
{
}

void sub_1011C3968(int a1, uint64_t a2, CFArrayRef theArray)
{
  if (a2 == 1) {
    goto LABEL_6;
  }
  if (a2 == 128 || a2 == 32)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count <= 0) {
      __assert_rtn("wrapRunLoopWithAutoreleasePoolHandler", "CLDaemonCore.mm", 704, "count > 0");
    }
    CFIndex v6 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool(ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      id v8 = (const void *)NSPushAutoreleasePool(0LL);
      CFArrayAppendValue(theArray, v8);
    }
  }

void sub_1011C3A20(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_1019A0618);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1019A0618))
  {
    qword_1019A0610 = 2000000000 * (unint64_t)unk_1019A0624 / dword_1019A0620;
    __cxa_guard_release(&qword_1019A0618);
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_1019A0638);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1019A0638))
  {
    qword_1019A0630 = mach_absolute_time();
    __cxa_guard_release(&qword_1019A0638);
  }

  uint64_t v5 = mach_absolute_time();
  uint64_t v6 = v5;
  if ((a2 & 0x40) == 0)
  {
    uint64_t v7 = qword_1019A0630;
    uint64_t v8 = v5 - qword_1019A0630;
    if (v5 - qword_1019A0630 >= qword_1019A0610)
    {
      memset(&v23, 0, sizeof(v23));
      memset(&__p, 0, sizeof(__p));
      uint64_t v10 = dword_1019A0620;
      unint64_t v9 = unk_1019A0624;
      sub_1011C3DFC(qword_1019A0628, &__p);
      sub_1011C3DFC(a2, &v23);
      unint64_t v11 = v7 * v10 / v9;
      unint64_t v12 = v8 * v10 / v9;
      if (qword_101934980 != -1)
      {
        dispatch_once(&qword_101934980, &stru_1018A2390);
        unint64_t v11 = v7 * v10 / v9;
      }

      double v13 = (double)v11;
      double v14 = (double)v12;
      unint64_t v15 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        id v17 = &v23;
        if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          id v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315906;
        BOOL v33 = p_p;
        __int16 v34 = 2080;
        __int128 v35 = v17;
        __int16 v36 = 2048;
        double v37 = v13 / 1000000000.0;
        __int16 v38 = 2048;
        double v39 = v14 / 1000000000.0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018A2390);
        }
        uint64_t v18 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        id v19 = &v23;
        if ((v23.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          id v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        int v24 = 136315906;
        int v25 = v18;
        __int16 v26 = 2080;
        int v27 = v19;
        __int16 v28 = 2048;
        double v29 = v13 / 1000000000.0;
        __int16 v30 = 2048;
        double v31 = v14 / 1000000000.0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)",  (const char *)&v24,  42,  *(double *)&__p.__r_.__value_.__l.__data_,  *(double *)&__p.__r_.__value_.__l.__size_);
        uint64_t v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLDaemonCore::profileObserverCallback(CFRunLoopObserverRef, CFRunLoopActivity, void *)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }
    }
  }

  qword_1019A0628 = a2;
  qword_1019A0630 = v6;
}

void sub_1011C3DB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
}

std::string *sub_1011C3DFC(char a1, std::string *this)
{
  uint64_t result = std::string::assign(this, "");
  if ((a1 & 1) != 0)
  {
    uint64_t result = std::string::append(this, " kCFRunLoopEntry");
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = std::string::append(this, " kCFRunLoopBeforeTimers");
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

void sub_1011C3EC0(uint64_t a1, void **a2)
{
  kern_return_t v16;
  void *v17;
  os_log_s *v18;
  const char *v19;
  CFRunLoopObserverContext *v20;
  os_log_s *v21;
  __CFRunLoopObserver *v22;
  CFMutableArrayRef v23;
  __CFNotificationCenter *DarwinNotifyCenter;
  os_log_s *v25;
  os_log_s *v26;
  os_log_s *v27;
  os_log_s *v28;
  os_log_s *v29;
  const char *v30;
  CFRunLoopObserverContext *v31;
  const char *v32;
  CFRunLoopObserverContext *v33;
  const char *v34;
  CFRunLoopObserverContext *v35;
  uint64_t v36;
  BOOL v37;
  os_activity_scope_state_s state;
  int v39;
  int v40;
  __int16 v41;
  int v42;
  CFRunLoopObserverContext buf[40];
  unsigned __int8 v4 = (os_log_s *)a1;
  if (!sub_1002E52D8(a1))
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018A23D0);
    }
    __int16 v28 = (os_log_s *)qword_101934A78;
    uint64_t v5 = (void **)"assert";
    a2 = (void **)"(fMutex).__assertOwned()";
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      buf[0].version = 68289539LL;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  (uint8_t *)buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
    }

    double v29 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      buf[0].version = 68289539LL;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  (uint8_t *)buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
    }

    unsigned __int8 v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      buf[0].version = 68289539LL;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  (uint8_t *)buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm",  860,  "startRun");
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  uint64_t v5 = (void **)objc_autoreleasePoolPush();
  uint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: startRun",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934980 != -1) {
LABEL_75:
  }
    dispatch_once(&qword_101934980, &stru_1018A2390);
  uint64_t v7 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].version = 68289282LL;
    LOWORD(buf[0].info) = 2082;
    *(void **)((char *)&buf[0].info + 2) = "";
    WORD1(buf[0].retain) = 2082;
    *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"activity";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:startRun, event:%{public, location:escape_only}s}",  (uint8_t *)buf,  0x1Cu);
  }

  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled(1LL))
  {
    uint64_t v8 = (__CFRunLoop *)sub_10029228C();
    unint64_t v9 = (__CFRunLoopObserver *)qword_1019A0600;
    if (!qword_1019A0600)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, 0LL);
      buf[0].version = 0LL;
      buf[0].info = Mutable;
      buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
      buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
      buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
      qword_1019A0600 = (uint64_t)CFRunLoopObserverCreate( 0LL,  1uLL,  1u,  -2147483647LL,  (CFRunLoopObserverCallBack)sub_1011C3968,  buf);
      qword_1019A0608 = (uint64_t)CFRunLoopObserverCreate( 0LL,  0xA0uLL,  1u,  0x7FFFFFFFLL,  (CFRunLoopObserverCallBack)sub_1011C3968,  buf);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1019A0600, kCFRunLoopCommonModes);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1019A0608, kCFRunLoopCommonModes);
      CFRelease(Mutable);
      unint64_t v9 = (__CFRunLoopObserver *)qword_1019A0600;
    }

    if (!CFRunLoopContainsObserver(v8, v9, kCFRunLoopDefaultMode))
    {
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1019A0600, kCFRunLoopDefaultMode);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1019A0608, kCFRunLoopDefaultMode);
    }
  }

  double v37 = 0;
  sub_1002F0B04(buf);
  sub_1002A6F64(buf[0].version, "RunLoopProfileObserver", &v37);
  info = (std::__shared_weak_count *)buf[0].info;
  if (buf[0].info)
  {
    unint64_t v12 = (unint64_t *)((char *)buf[0].info + 8);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))info->__on_zero_shared)(info);
      std::__shared_weak_count::__release_weak(info);
    }
  }

  double v14 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67109120;
    HIDWORD(buf[0].version) = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "OBSERVER: ProfileObserver = %d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    double v39 = 67109120;
    __int16 v40 = v37;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "OBSERVER: ProfileObserver = %d",  &v39);
    double v31 = (CFRunLoopObserverContext *)v30;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonCore::startRun(os_activity_scope_state_t)", "%s\n", v30);
    if (v31 != buf) {
      free(v31);
    }
  }

  if (v37)
  {
    unint64_t v15 = (__CFRunLoop *)sub_10029228C();
    unsigned int v16 = mach_timebase_info((mach_timebase_info_t)&dword_1019A0620);
    id v17 = p_vtable[304];
    if (v16)
    {
      uint64_t v18 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].version) = 67240192;
        HIDWORD(buf[0].version) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Can't read mach_timebase_info = %{public}d",  (uint8_t *)buf,  8u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        double v39 = 67240192;
        __int16 v40 = v16;
        LODWORD(v36) = 8;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Can't read mach_timebase_info = %{public}d",  &v39,  v36);
        uint64_t v20 = (CFRunLoopObserverContext *)v19;
        sub_10029211C("Generic", 1LL, 0, 0LL, "void CLDaemonCore::installProfileObserver(CFStringRef)", "%s\n", v19);
        if (v20 != buf) {
          free(v20);
        }
      }
    }

    else
    {
      uint64_t v21 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].version) = 67109376;
        HIDWORD(buf[0].version) = unk_1019A0624;
        LOWORD(buf[0].info) = 1024;
        *(_DWORD *)((char *)&buf[0].info + 2) = dword_1019A0620;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "sTimebaseInfo.denom %d sTimebaseInfo.numer %d",  (uint8_t *)buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        double v39 = 67109376;
        __int16 v40 = unk_1019A0624;
        double v41 = 1024;
        __int16 v42 = dword_1019A0620;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "sTimebaseInfo.denom %d sTimebaseInfo.numer %d",  &v39,  14);
        __int128 v35 = (CFRunLoopObserverContext *)v34;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonCore::installProfileObserver(CFStringRef)", "%s\n", v34);
        if (v35 != buf) {
          free(v35);
        }
      }

      unint64_t v22 = (__CFRunLoopObserver *)qword_1019A0640;
      if (!qword_1019A0640)
      {
        std::string v23 = CFArrayCreateMutable(0LL, 0LL, 0LL);
        buf[0].version = 0LL;
        buf[0].info = v23;
        buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
        buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
        buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
        qword_1019A0640 = (uint64_t)CFRunLoopObserverCreate( 0LL,  0xFFFFFFFuLL,  1u,  0LL,  (CFRunLoopObserverCallBack)sub_1011C3A20,  buf);
        CFRunLoopAddObserver(v15, (CFRunLoopObserverRef)qword_1019A0640, kCFRunLoopCommonModes);
        CFRelease(v23);
        unint64_t v22 = (__CFRunLoopObserver *)qword_1019A0640;
      }

      if (!CFRunLoopContainsObserver(v15, v22, kCFRunLoopDefaultMode)) {
        CFRunLoopAddObserver(v15, (CFRunLoopObserverRef)qword_1019A0640, kCFRunLoopDefaultMode);
      }
    }
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLDaemonStartedNotification, 0LL, 0LL, 1u);
  *((_DWORD *)v4 + 6) = 1;
  if (*((_DWORD *)v4 + 10) != -1)
  {
    int v25 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      buf[0].version = 0x304000100LL;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "starting idle shutdown timer of %d seconds",  (uint8_t *)buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      double v39 = 67109120;
      __int16 v40 = 3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "starting idle shutdown timer of %d seconds",  &v39);
      BOOL v33 = (CFRunLoopObserverContext *)v32;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonCore::startRun(os_activity_scope_state_t)", "%s\n", v32);
      if (v33 != buf) {
        free(v33);
      }
    }

    sub_1011C4C68((uint64_t)v4, 3);
  }

  os_activity_scope_leave(&state);
  objc_autoreleasePoolPop(v5);
  os_activity_scope_leave((os_activity_scope_state_t)a2);
  while (*((_DWORD *)v4 + 6))
  {
    sub_1002E4AFC((uint64_t)v4);
    if (!sub_1002E5314((uint64_t)v4))
    {
      a2 = &OBJC_METACLASS___CLPrivacyManager.vtable;
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
      uint64_t v5 = &OBJC_METACLASS___CLPrivacyManager.vtable;
      __int16 v26 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
      {
        buf[0].version = 68289539LL;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{pri vate, location:escape_only}s}",  (uint8_t *)buf,  0x26u);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018A23D0);
        }
      }

      int v27 = (os_log_s *)qword_101934A78;
      if (os_signpost_enabled((os_log_t)qword_101934A78))
      {
        buf[0].version = 68289539LL;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v27,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{pri vate, location:escape_only}s}",  (uint8_t *)buf,  0x26u);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018A23D0);
        }
      }

      unsigned __int8 v4 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
      {
        buf[0].version = 68289539LL;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{pri vate, location:escape_only}s}",  (uint8_t *)buf,  0x26u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm",  898,  "startRun");
      goto LABEL_74;
    }

    CFRunLoopRun();
    sub_1002E4AF0((uint64_t)v4);
  }

void sub_1011C4C2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_1011C4C68(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24))
  {
    if (a2 == -1)
    {
      a2 = *(_DWORD *)(a1 + 40);
      if (a2 < 0) {
        return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
      }
    }

    else if (a2 < 0)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    unsigned __int8 v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      int v10 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "no more clients, %d second(s) to auto-shutdown",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2390);
      }
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "no more clients, %d second(s) to auto-shutdown",  v8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonCore::scheduleShutdown(int)", "%s\n", v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    [*(id *)(a1 + 48) setNextFireDelay:(double)a2];
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

void sub_1011C4E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1011C4E94(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)a1;
  if (sub_1002E52D8(a1))
  {
    uint64_t v2 = _os_activity_create( (void *)&_mh_execute_header,  "CL: startCleanup",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_101934980 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018A23D0);
    }
    uint64_t v7 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "assert";
      __int16 v16 = 2081;
      id v17 = "(fMutex).__assertOwned()";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
    }

    uint64_t v8 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      *(_DWORD *)buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "assert";
      __int16 v16 = 2081;
      id v17 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A23D0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "assert";
      __int16 v16 = 2081;
      id v17 = "(fMutex).__assertOwned()";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm",  906,  "startCleanup");
    __break(1u);
  }

  dispatch_once(&qword_101934980, &stru_1018A2390);
LABEL_3:
  unsigned __int8 v3 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2082;
    unint64_t v15 = "activity";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:startCleanup, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
  }

  unsigned __int8 v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (&_SBApplicationStateEndGeneratingChangeNotifications) {
    SBApplicationStateEndGeneratingChangeNotifications();
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, v1);
  uint64_t v6 = sub_1002F8DDC();
  buf[0] = 1;
  sub_1002AB3FC(v6, off_101937B88, buf);
  -[NSAutoreleasePool drain](v4, "drain");
  os_activity_scope_leave(&state);
}

void sub_1011C5220( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

uint64_t sub_1011C5244(unsigned __int8 *a1, void **a2)
{
  uint64_t v4 = a1[56];
  (*(void (**)(unsigned __int8 *))(*(void *)a1 + 24LL))(a1);
  return v4;
}

void sub_1011C52BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1011C52D0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a1 + 16)) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    }
    else {
      (*(void (**)(void))(**(void **)a1 + 24LL))();
    }
    *(_BYTE *)(a1 + 17) = 0;
  }

  return a1;
}

uint64_t sub_1011C5324(unsigned int *a1, int a2)
{
  uint64_t v4 = _os_activity_create( (void *)&_mh_execute_header,  "CL: locationd shutting down",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &v11);

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018A2390);
  }
  uint64_t v5 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    __int16 v16 = "activity";
    __int16 v17 = 1026;
    int v18 = a2;
    __int16 v19 = 1026;
    int v20 = dword_101993278;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:locationd shutting down, event:%{public, location:escape_only}s, force:%{public}h hd, killerPid:%{public}d}",  buf,  0x28u);
  }

  alarm(0xAu);
  *(void *)buf = a1;
  (*(void (**)(unsigned int *))(*(void *)a1 + 16LL))(a1);
  HIWORD(v14) = 256;
  uint64_t v6 = a1 + 6;
  while (1)
  {
    unsigned int v7 = __ldxr(v6);
    if (v7 != 1) {
      break;
    }
    if (!__stxr(0, v6))
    {
      uint64_t v8 = 1LL;
      *((_BYTE *)a1 + 56) = a2;
      unint64_t v9 = (__CFRunLoop *)sub_10029228C();
      CFRunLoopStop(v9);
      goto LABEL_10;
    }
  }

  uint64_t v8 = 0LL;
  __clrex();
LABEL_10:
  (*(void (**)(unsigned int *))(*(void *)a1 + 24LL))(a1);
  os_activity_scope_leave(&v11);
  return v8;
}

void sub_1011C54E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_100006BB8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C5518(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_1002F0B04(buf);
    v74.__r_.__value_.__s.__data_[0] = 0;
    sub_1002AB3FC(*(uint64_t *)buf, "ObsoleteDataDeleted", &v74);
    unsigned __int8 v3 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v4 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }

    sub_1002F0B04(buf);
    sub_1002F13B4(*(uint64_t *)buf);
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      unsigned int v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    [*(id *)(a1 + 96) setNextFireDelay:0.0];
  }

  else
  {
    BOOL v65 = 0;
    sub_1002F0B04(buf);
    int v9 = sub_1002A6F64(*(uint64_t *)buf, "ObsoleteDataDeleted", &v65);
    if (v65) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    os_activity_scope_state_s v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int16 v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if (v10)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2390);
      }
      __int16 v14 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Obsolete data has already been deleted; not deleting again}",
          buf,
          0x12u);
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2390);
      }
      __int16 v15 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Deleting obsolete data}",  buf,  0x12u);
      }

      double Current = CFAbsoluteTimeGetCurrent();
      __int16 v17 = _os_activity_create( (void *)&_mh_execute_header,  "CL: _deleteObsoleteData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
      os_activity_scope_enter(v17, &state);

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2390);
      }
      int v18 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "activity";
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:_deleteObsoleteData, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      sub_100A98EF8();
      sub_100A99180();
      uint64_t v19 = sub_1002F8DDC();
      sub_1002A667C(v19, "PreviousLocation", 0xFFFFFFFFLL);
      uint64_t v20 = sub_1002F8DDC();
      sub_1002A667C(v20, "WifiLocationNearby", 0xFFFFFFFFLL);
      uint64_t v21 = sub_1002F8DDC();
      (*(void (**)(uint64_t))(*(void *)v21 + 944LL))(v21);
      sub_1002F0B04(buf);
      sub_1002A667C(*(uint64_t *)buf, "LocationEnabled", 0xFFFFFFFFLL);
      unint64_t v22 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        std::string v23 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }

      sub_100309D64(0, &v74);
      for (uint64_t i = 0LL; i != 23; ++i)
      {
        __int16 v26 = off_1018A23F0[i];
        if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          size_t size = v74.__r_.__value_.__s.__size_;
        }
        else {
          size_t size = v74.__r_.__value_.__l.__size_;
        }
        size_t v28 = strlen(off_1018A23F0[i]);
        sub_1000392EC((uint64_t)__p, size + v28);
        if (cap >= 0) {
          double v29 = __p;
        }
        else {
          double v29 = (void **)__p[0];
        }
        if (size)
        {
          if ((v74.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            __int16 v30 = &v74;
          }
          else {
            __int16 v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          memmove(v29, v30, size);
        }

        double v31 = (char *)v29 + size;
        if (v28) {
          memmove(v31, v26, v28);
        }
        v31[v28] = 0;
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018A2390);
        }
        std::string::size_type v32 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          if (cap >= 0) {
            BOOL v33 = __p;
          }
          else {
            BOOL v33 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "#Notice Deleting %{public}s if present",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018A2390);
          }
          if (cap >= 0) {
            __int128 v35 = __p;
          }
          else {
            __int128 v35 = (void **)__p[0];
          }
          int v69 = 136446210;
          id v70 = v35;
          LODWORD(v64) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Notice Deleting %{public}s if present",  &v69,  v64);
          double v37 = (char *)v36;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void _deleteObsoleteData()", "%s\n", v36);
          if (v37 != buf) {
            free(v37);
          }
        }

        if (cap >= 0) {
          __int16 v34 = __p;
        }
        else {
          __int16 v34 = (void **)__p[0];
        }
        sub_100292D50((const char *)v34);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
      }

      sub_100309D64(0, (std::string *)buf);
      __int16 v38 = std::string::append((std::string *)buf, "wifi");
      __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      int64_t cap = v38->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v39;
      v38->__r_.__value_.__l.__size_ = 0LL;
      v38->__r_.__value_.__l.__cap_ = 0LL;
      v38->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (cap >= 0) {
        __int16 v40 = __p;
      }
      else {
        __int16 v40 = (void **)__p[0];
      }
      if (sub_100292D28((const char *)v40))
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018A2390);
        }
        double v41 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Deleting obsolete wifi subdirectory}",  buf,  0x12u);
        }

        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3321888768LL;
        *(void *)&uint8_t buf[16] = sub_1011C6204;
        *(void *)&buf[24] = &unk_1018A24B0;
        if (SHIBYTE(cap) < 0)
        {
          __int16 v42 = (void **)__p[0];
          sub_1010DD48C(v72, __p[0], (unint64_t)__p[1]);
        }

        else
        {
          *(_OWORD *)__int16 v72 = *(_OWORD *)__p;
          int64_t v73 = cap;
          __int16 v42 = __p;
        }

        sub_1007BD82C((uint64_t)v42, (uint64_t)buf);
        if (cap >= 0) {
          id v43 = __p;
        }
        else {
          id v43 = (void **)__p[0];
        }
        sub_100292D6C((const char *)v43);
        if (SHIBYTE(v73) < 0) {
          operator delete(v72[0]);
        }
      }

      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      os_activity_scope_leave(&state);
      if ((sub_1004FAB40() & 8) != 0)
      {
        sub_1002F1454((uint64_t)buf, @"com.apple.springboard", 1, (uint64_t)@"mobile");
        else {
          BOOL v44 = 0;
        }
        LOBYTE(state.opaque[0]) = 0;
        sub_1002F0B04(&v74);
        int v45 = sub_1002A6FD4( (uint64_t)v74.__r_.__value_.__l.__data_,  (uint64_t)@"GestureServiceEnabled",  (BOOL *)&state);
        int v46 = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
        if (v74.__r_.__value_.__l.__size_)
        {
          int v47 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
          do
            unint64_t v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }

        sub_1002F14C8(buf);
        if ((v44 & (v45 ^ 1)) == 1)
        {
          sub_1002F0B04(buf);
          v74.__r_.__value_.__s.__data_[0] = 1;
          sub_1002AB464(*(uint64_t *)buf, @"GestureServiceEnabled", &v74);
          id v49 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            __int16 v50 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              unint64_t v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
        }
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2390);
      }
      __int16 v52 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        CFAbsoluteTime v53 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v53 - Current;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "Obsolete data deleted in %.2f seconds",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018A2390);
        }
        uint64_t v60 = qword_101934988;
        CFAbsoluteTime v61 = CFAbsoluteTimeGetCurrent();
        LODWORD(v74.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)v74.__r_.__value_.__r.__words + 4) = v61 - Current;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v60,  2LL,  "Obsolete data deleted in %.2f seconds",  COERCE_DOUBLE(&v74));
        unint64_t v63 = (char *)v62;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonCore::deleteObsoleteData(BOOL)", "%s\n", v62);
        if (v63 != buf) {
          free(v63);
        }
      }

      sub_1002F0B04(buf);
      v74.__r_.__value_.__s.__data_[0] = 1;
      sub_1002AB3FC(*(uint64_t *)buf, "ObsoleteDataDeleted", &v74);
      id v54 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v55 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }

      sub_1002F0B04(buf);
      sub_1002F13B4(*(uint64_t *)buf);
      uint64_t v57 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v58 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
  }

void sub_1011C6088( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, os_activity_scope_state_s state, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1011C6180(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1011C61AC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1011C61D8(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1011C6204(uint64_t a1, const std::string::value_type *a2)
{
  else {
    size_t v4 = *(void *)(a1 + 40);
  }
  unint64_t v5 = &v26;
  sub_1000392EC((uint64_t)&v26, v4 + 1);
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unint64_t v5 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    unint64_t v8 = *(char **)(a1 + 32);
    unsigned int v7 = (char *)(a1 + 32);
    uint64_t v6 = v8;
    if (v7[23] >= 0) {
      int v9 = v7;
    }
    else {
      int v9 = v6;
    }
    memmove(v5, v9, v4);
  }

  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  int v10 = std::string::append(&v26, a2);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t cap = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018A2390);
  }
  __int16 v12 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v13 = __p;
    if (cap < 0) {
      unint64_t v13 = (void **)__p[0];
    }
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Deleting %s", (uint8_t *)&v26, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v26, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    __int16 v17 = __p;
    if (cap < 0) {
      __int16 v17 = (void **)__p[0];
    }
    int v24 = 136315138;
    int v25 = v17;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v26,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Deleting %s",  (const char *)&v24);
    uint64_t v19 = (std::string *)v18;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void _deleteObsoleteData()_block_invoke", "%s\n", v18);
    if (v19 != &v26) {
      free(v19);
    }
  }

  if (cap >= 0) {
    __int16 v14 = __p;
  }
  else {
    __int16 v14 = (void **)__p[0];
  }
  if (!sub_100292D50((const char *)v14))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2390);
    }
    __int16 v15 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v26.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Could not delete file %{public}s",  (uint8_t *)&v26,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v26, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2390);
      }
      int v24 = 136446210;
      int v25 = (void *)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v26,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Could not delete file %{public}s",  &v24,  12);
      uint64_t v21 = (std::string *)v20;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void _deleteObsoleteData()_block_invoke", "%s\n", v20);
      if (v21 != &v26) {
        free(v21);
      }
    }
  }

  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return 1LL;
}

void sub_1011C65DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C661C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013E46C4;
      v1[3] = unk_1013E46D4;
      v1[4] = xmmword_1013E46E4;
      v1[0] = xmmword_1013E46A4;
      v1[1] = unk_1013E46B4;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1011C66F0(_Unwind_Exception *a1)
{
}

void sub_1011C6708()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1011C676C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1011C67E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1011C67F8()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1019A0660, (void *)&_mh_execute_header);
}

void sub_1011C6870(uint64_t a1)
{
}

uint64_t start(int a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unsigned __int8 v3 = _os_activity_create( (void *)&_mh_execute_header,  "CL: locationd main - setup",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DETACHED);
  os_activity_scope_enter(v3, &state);

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018A2550);
  }
  size_t v4 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v71 = 2082;
    __int16 v72 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:locationd main - setup}",  buf,  0x12u);
  }

  if (_set_user_dir_suffix("com.apple.locationd"))
  {
    unint64_t v5 = -[NSString UTF8String](NSTemporaryDirectory(), "UTF8String");
    if (!sub_1007BDA9C(v5, 73, 0LL))
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2550);
      }
      uint64_t v6 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v71 = 2082;
        __int16 v72 = "";
        __int16 v73 = 2114;
        std::string v74 = 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:locationd could not find attributes of file, Error:%{public, location:escape_only}@}",  buf,  0x1Cu);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018A2550);
        }
      }

      unsigned int v7 = (os_log_s *)qword_101934988;
      if (os_signpost_enabled((os_log_t)qword_101934988))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v71 = 2082;
        __int16 v72 = "";
        __int16 v73 = 2114;
        std::string v74 = 0LL;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "locationd could not find attributes of file",  "{msg%{public}.0s:locationd could not find attributes of file, Error:%{public, location:escape_only}@}",  buf,  0x1Cu);
      }
    }
  }

  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_100292428(Current);
  if (a1 < 2)
  {
    unint64_t v51 = +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  &off_1018D6BE8);
    sub_1004F2598();
    if (sub_1004F8A40())
    {
      sub_1002F0B04(buf);
      if (sub_1002A6F20( *(uint64_t *)buf,  (uint64_t)@"DefaultServiceReplacementMap",  (CFTypeRef *)&cf))
      {
        CFTypeID v13 = CFGetTypeID((CFTypeRef)cf.version);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        sub_10000AE14((uint64_t)buf);
        if (v13 == TypeID)
        {
          version = (void *)cf.version;
          __int128 v62 = 0u;
          __int128 v63 = 0u;
          __int128 v64 = 0u;
          __int128 v65 = 0u;
          id v16 = [(id)cf.version countByEnumeratingWithState:&v62 objects:v69 count:16];
          if (v16)
          {
            uint64_t v17 = *(void *)v63;
            do
            {
              for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v63 != v17) {
                  objc_enumerationMutation(version);
                }
                uint64_t v19 = *(void *)(*((void *)&v62 + 1) + 8LL * (void)i);
                uint64_t v20 = (__CFString *)[version objectForKeyedSubscript:v19];
                if (-[__CFString length](v20, "length")) {
                  uint64_t v21 = v20;
                }
                else {
                  uint64_t v21 = @"_CLUnSupportedService";
                }
                -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v21, v19);
              }

              id v16 = [version countByEnumeratingWithState:&v62 objects:v69 count:16];
            }

            while (v16);
          }
        }
      }

      else
      {
        sub_10000AE14((uint64_t)buf);
      }
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    unint64_t v22 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v71 = 2082;
      __int16 v72 = "";
      __int16 v73 = 2114;
      std::string v74 = (const char *)v51;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:locationd starting up with serviceReplacementMap, ReplacementMap:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }

    -[CLServiceVendor setServiceReplacementMap:missBehavior:]( +[CLServiceVendor sharedInstance](&OBJC_CLASS___CLServiceVendor, "sharedInstance"),  "setServiceReplacementMap:missBehavior:",  v51,  0LL);
    sub_1011C77E8();
    sub_1011C7918();
    sub_100E57248();
    sub_1002F0B04(buf);
    char v23 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)@"LocationServicesEnabledIn8.0", &v61);
    sub_10000AE14((uint64_t)buf);
    if ((v23 & 1) == 0)
    {
      sub_1002F1454((uint64_t)&cf, @"com.apple.locationd.notbackedup", 1, (uint64_t)@"mobile");
      if (sub_1002A6FD4((uint64_t)&cf, (uint64_t)@"LocationServicesEnabledIn8.0", &v61))
      {
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018A2570);
        }
        BOOL v44 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v61;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Setting location services to %d", buf, 8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_1018A2570);
          }
          LODWORD(v67[0]) = 67109120;
          HIDWORD(v67[0]) = v61;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Setting location services to %d",  v67);
          int v46 = (uint8_t *)v45;
          sub_10029211C("Generic", 1LL, 0, 2LL, "int main(int, const char **)", "%s\n", v45);
          if (v46 != buf) {
            free(v46);
          }
        }

        sub_1002F0B04(buf);
        sub_1002AB464(*(uint64_t *)buf, @"LocationServicesEnabledIn8.0", &v61);
        sub_10000AE14((uint64_t)buf);
      }

      sub_1002F14C8(&cf);
    }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v24 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004F2598();
      sub_1004F5DC4((uint64_t)&cf);
      if (SHIBYTE(cf.retain) >= 0) {
        p_CFRunLoopSourceContext cf = &cf;
      }
      else {
        p_CFRunLoopSourceContext cf = (CFRunLoopSourceContext *)cf.version;
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v71 = 2082;
      __int16 v72 = "";
      __int16 v73 = 2082;
      std::string v74 = (const char *)p_cf;
      __int16 v75 = 2082;
      __int16 v76 = "Nov 21 2024";
      __int16 v77 = 2082;
      unsigned int v78 = "21:26:37";
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:locationd information, CoreLocation:%{public, location:escape_only}s, compilation date:%{public, location:escape_only}s, compilation time:%{public, location:escape_only}s}",  buf,  0x30u);
      if (SHIBYTE(cf.retain) < 0) {
        operator delete((void *)cf.version);
      }
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2550);
      }
    }

    std::string v26 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = sub_1004F2598();
      size_t v28 = &cf;
      sub_1004F58C8(v27, (uint64_t)&cf);
      if (SHIBYTE(cf.retain) < 0) {
        size_t v28 = (CFRunLoopSourceContext *)cf.version;
      }
      sub_1004F2598();
      double v29 = v67;
      sub_1004F54FC((uint64_t)v67);
      if (cap < 0) {
        double v29 = (void **)v67[0];
      }
      sub_1004F2598();
      sub_1004F6004((uint64_t)__p);
      if (v59 >= 0) {
        __int16 v30 = __p;
      }
      else {
        __int16 v30 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v71 = 2082;
      __int16 v72 = "";
      __int16 v73 = 2082;
      std::string v74 = (const char *)v28;
      __int16 v75 = 2082;
      __int16 v76 = (const char *)v29;
      __int16 v77 = 2081;
      unsigned int v78 = (const char *)v30;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:system information, model:%{public, location:escape_only}s, system:%{public, lo cation:escape_only}s, IOPlatformSerialNumber:%{private, location:escape_only}s}",  buf,  0x30u);
      if (v59 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(cap) < 0) {
        operator delete(v67[0]);
      }
      if (SHIBYTE(cf.retain) < 0) {
        operator delete((void *)cf.version);
      }
    }

    sub_1002F0B04(buf);
    (*(void (**)(void))(**(void **)buf + 792LL))(*(void *)buf);
    sub_10000AE14((uint64_t)buf);
    sub_1002F0B04(&cf);
    CFIndex v31 = cf.version;
    sub_1004F2598();
    sub_1004F54FC((uint64_t)buf);
    sub_1002ACD58(v31, "LastSystemVersion", (char *)buf);
    if (SBYTE3(v74) < 0) {
      operator delete(*(void **)buf);
    }
    sub_10000AE14((uint64_t)&cf);
    sub_1002F0B04(buf);
    sub_1002F13B4(*(uint64_t *)buf);
    sub_10000AE14((uint64_t)buf);
    sub_1002F0B04(buf);
    int v32 = sub_1002A6F64(*(uint64_t *)buf, "EnableLockTimeDebugging", &v57);
    sub_10000AE14((uint64_t)buf);
    if (v32)
    {
      sub_1002E4AE4(v57);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018A2570);
      }
      BOOL v33 = (os_log_s *)qword_101934A78;
      if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Lock time debugging is enabled", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_1018A2570);
        }
        LOWORD(cf.version) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "Lock time debugging is enabled",  &cf,  2);
        unint64_t v48 = (uint8_t *)v47;
        sub_10029211C("Generic", 1LL, 0, 2LL, "int main(int, const char **)", "%s\n", v47);
        if (v48 != buf) {
          free(v48);
        }
      }
    }

    setiopolicy_np(9, 0, 1);
    __int16 v34 = (char *)sub_1002F8DDC();
    sub_10030AC8C(v34, (uint64_t)buf);
    __int128 v35 = std::string::append((std::string *)buf, "/cache_encryptedA.db");
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    int64_t cap = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)double v67 = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    if (SBYTE3(v74) < 0) {
      operator delete(*(void **)buf);
    }
    sub_100C2B9B8("-journal", (const void **)v67, __p);
    sub_100C2B9B8("-shm", (const void **)v67, v55);
    sub_100C2B9B8("-wal", (const void **)v67, v53);
    if (cap >= 0) {
      uint64_t v37 = v67;
    }
    else {
      uint64_t v37 = (void **)v67[0];
    }
    sub_100296964((const char *)v37);
    if (v59 >= 0) {
      __int16 v38 = __p;
    }
    else {
      __int16 v38 = (void **)__p[0];
    }
    sub_100296964((const char *)v38);
    if (v56 >= 0) {
      __int128 v39 = (const char *)v55;
    }
    else {
      __int128 v39 = (const char *)v55[0];
    }
    sub_100296964(v39);
    if (v54 >= 0) {
      __int16 v40 = (const char *)v53;
    }
    else {
      __int16 v40 = (const char *)v53[0];
    }
    sub_100296964(v40);
    *(_OWORD *)&cf.cancel = unk_1018A2540;
    memset(&cf, 0, 64);
    qword_1019A0678 = (uint64_t)CFRunLoopSourceCreate(kCFAllocatorDefault, 0LL, &cf);
    double v41 = (__CFRunLoop *)sub_10029228C();
    CFRunLoopAddSource(v41, (CFRunLoopSourceRef)qword_1019A0678, kCFRunLoopCommonModes);
    sub_1011CB340();
    sub_1011C1C44((uint64_t)buf);
    qword_1019A0680 = (uint64_t)buf;

    int v42 = sub_1011C5244(buf, (void **)&state);
    sub_1011C2BA4((uint64_t)buf);
    id v43 = _os_activity_create( (void *)&_mh_execute_header,  "CL: locationd main - teardown",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v43, &v52);

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    id v49 = (os_log_s *)qword_101934988;
    BOOL v50 = os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT);
    if (v50)
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v71 = 2082;
      __int16 v72 = "";
      __int16 v73 = 2082;
      std::string v74 = "activity";
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:locationd main - teardown, event:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    sub_1011C6870(v50);
    sub_1011CB3B0();
    sub_1002920DC();
    _Exit(v42);
  }

  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018A2570);
  }
  int v9 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "locationd does not take any command-line arguments. Use CFPreferences instead.",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018A2570);
    }
    LOWORD(cf.version) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "locationd does not take any command-line arguments. Use CFPreferences instead.",  &cf,  2);
    __int16 v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 0LL, "int main(int, const char **)", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  return 0LL;
}

void sub_1011C7698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_1011C77DC(id a1)
{
  return (NSDictionary *)&off_1018D6BC0;
}

void sub_1011C77E8()
{
  char v0 = sub_1002A82BC(v8, "LowWaterLoopProtectionInterval", &v10);
  char v1 = v0;
  uint64_t v2 = v9;
  if (!v9) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((v0 & 1) != 0) {
      goto LABEL_6;
    }
LABEL_9:
    double v10 = 600.0;
    goto LABEL_10;
  }

  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if ((v1 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  if (v10 > 0.0)
  {
LABEL_10:
    unint64_t v5 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "main.low-water-loop-protection");
    dispatch_time_t v6 = dispatch_time(0LL, (uint64_t)(v10 * 1000000000.0));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = nullsub_1279;
    v7[3] = &unk_10181A288;
    v7[4] = v5;
    dispatch_after(v6, &_dispatch_main_q, v7);
  }

void sub_1011C7904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_1011C7918()
{
  else {
    int v0 = 0;
  }
  char v1 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v2 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }

  if (sub_1007B3BCC(v0))
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    unint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289282LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Warning, Legacy logging enabled, radar:%{public}d}",  buf,  0x18u);
    }

    sub_1002F0B04(&v376);
    uint64_t v5 = v376;
    dispatch_time_t v6 = (char *)sub_1002F8DDC();
    sub_10030AC8C(v6, (uint64_t)buf);
    unsigned int v7 = std::string::append((std::string *)buf, "locationd.log");
    __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type cap = v7->__r_.__value_.__l.__cap_;
    __int128 v374 = v8;
    v7->__r_.__value_.__l.__size_ = 0LL;
    v7->__r_.__value_.__l.__cap_ = 0LL;
    v7->__r_.__value_.__r.__words[0] = 0LL;
    sub_1002ACD58(v5 + 104, "LogFile", (char *)&v374);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v374);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v9 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (*((void *)&v376 + 1))
    {
      double v10 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    sub_1002F0B04(&v376);
    uint64_t v12 = v376;
    CFTypeID v13 = (char *)sub_1002F8DDC();
    sub_10030AC8C(v13, (uint64_t)buf);
    __int16 v14 = std::string::append((std::string *)buf, "logs");
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v373 = v14->__r_.__value_.__l.__cap_;
    __int128 v372 = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_1002ACD58(v12 + 104, "LogFileDirectory", (char *)&v372);
    if (SHIBYTE(v373) < 0) {
      operator delete((void *)v372);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    id v16 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (*((void *)&v376 + 1))
    {
      uint64_t v17 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    sub_1002F0B04(buf);
    sub_1002ACA84(*(void *)buf + 104LL, "LogFilePrefix", "locationd");
    uint64_t v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v20 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = 52428800;
    sub_1002AC220(*(void *)buf + 104LL, "LogFileRotationSize", &v376);
    unint64_t v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      char v23 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = 6;
    sub_1002AC220(*(void *)buf + 104LL, "LogFileStorageCount", &v376);
    int v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      std::string v26 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = -1;
    sub_1002AC220(*(void *)buf + 104LL, "LogFileLevel", &v376);
    size_t v28 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      double v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

    sub_1002F0B04(buf);
    LOBYTE(v376) = 0;
    sub_1002AB3FC(*(void *)buf + 104LL, "LogFileFlush", &v376);
    CFIndex v31 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v32 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    sub_1002F0B04(buf);
    LOBYTE(v376) = 0;
    sub_1002AB3FC(*(void *)buf + 104LL, "LogShowUI", &v376);
    __int16 v34 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v35 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

    sub_1002F0B04(buf);
    LOBYTE(v376) = 0;
    sub_1002AB3FC(*(void *)buf + 104LL, "LogFence", &v376);
    uint64_t v37 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int16 v38 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = -1;
    sub_1002AC220(*(void *)buf + 104LL, "LogBufferLevel", &v376);
    __int16 v40 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      double v41 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = 0;
    sub_1002AC220(*(void *)buf + 104LL, "LogBufferSize", &v376);
    id v43 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      BOOL v44 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = 0;
    sub_1002AC220(*(void *)buf + 104LL, "LogConsoleLevel", &v376);
    int v46 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v47 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }

    sub_1002F0B04(buf);
    LODWORD(v376) = 0;
    sub_1002AC220(*(void *)buf + 104LL, "LogStackLevel", &v376);
    id v49 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      BOOL v50 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }

    LOBYTE(v369) = 0;
    sub_1002F0B04(buf);
    int v52 = sub_1002A6F64(*(uint64_t *)buf, "LogLocationsFlush", (BOOL *)&v369);
    int v53 = v52;
    char v54 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_91;
    }
    int v55 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      if (!v53) {
        goto LABEL_546;
      }
    }

    else
    {
LABEL_91:
      if (!v52) {
        goto LABEL_546;
      }
    }

    sub_1002F0B04(buf);
    sub_1002A667C(*(uint64_t *)buf, "LogLocationsFlush", 0xFFFFFFFFLL);
    BOOL v57 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v58 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }

    sub_1002F0B04(buf);
    sub_1002AB3FC(*(uint64_t *)buf, "LogFileFlush", &v369);
    uint64_t v60 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      BOOL v61 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }

LABEL_594:
        sub_1002F0B04(&v376);
        sub_1002A667C(v376, "LogConsoleLevel", 0LL);
        v329 = (std::__shared_weak_count *)*((void *)&v376 + 1);
        if (*((void *)&v376 + 1))
        {
          v330 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
          do
            unint64_t v331 = __ldaxr(v330);
          while (__stlxr(v331 - 1, v330));
          if (!v331)
          {
            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
            std::__shared_weak_count::__release_weak(v329);
          }
        }

        sub_1002F0B04(&v376);
        sub_1002A667C(v376, "LogStackLevel", 0xFFFFFFFFLL);
        v332 = (std::__shared_weak_count *)*((void *)&v376 + 1);
        if (*((void *)&v376 + 1))
        {
          v333 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
          do
            unint64_t v334 = __ldaxr(v333);
          while (__stlxr(v334 - 1, v333));
          if (!v334)
          {
            ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
            std::__shared_weak_count::__release_weak(v332);
          }
        }
      }
    }

    sub_1002F0B04(&v376);
    sub_1002F13B4(v376);
    v335 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (*((void *)&v376 + 1))
    {
      v336 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
      do
        unint64_t v337 = __ldaxr(v336);
      while (__stlxr(v337 - 1, v336));
      if (!v337)
      {
        ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
        std::__shared_weak_count::__release_weak(v335);
      }
    }

    v338 = (void *)sub_1007B3C30();
    sub_1002F0B04(&v376);
    *(_OWORD *)v370 = v376;
    __int128 v376 = 0uLL;
    sub_100E65628(v338, v370);
    v339 = (std::__shared_weak_count *)v370[1];
    if (v370[1])
    {
      v340 = (unint64_t *)(v370[1] + 8);
      do
        unint64_t v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
        std::__shared_weak_count::__release_weak(v339);
      }
    }

    v342 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (*((void *)&v376 + 1))
    {
      v343 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
      do
        unint64_t v344 = __ldaxr(v343);
      while (__stlxr(v344 - 1, v343));
      if (!v344)
      {
        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
        std::__shared_weak_count::__release_weak(v342);
      }
    }

    sub_1004F2598();
    if (sub_1004F5C4C() - 1 < 6)
    {
      uint64_t v345 = sub_1007B3C30();
      sub_1007B6018(v345, 1);
    }

    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_623;
  }

  if (v0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int128 v63 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(void *)buf = 68289282LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid radar, radar:%{public}d}",  buf,  0x18u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2550);
      }
    }

    __int128 v64 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      *(void *)buf = 68289282LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v64,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid radar",  "{msg%{public}.0s:Invalid radar, radar:%{public}d}",  buf,  0x18u);
    }
  }

  sub_1002F0B04(buf);
  int v65 = sub_1002A6E78(*(uint64_t *)buf, "LogFile", &v369, 0xFFFFFFFFLL);
  char v66 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v67 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  if (v65)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v69 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFile";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v70 = sub_1002A6E78(*(uint64_t *)buf, "LogFilePrefix", &v369, 0xFFFFFFFFLL);
  __int16 v71 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v72 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }

  if (v70)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    std::string v74 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFilePrefix";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v75 = sub_1002A6E78(*(uint64_t *)buf, "LogFileFlush", &v369, 0xFFFFFFFFLL);
  __int16 v76 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v77 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  if (v75)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    double v79 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileFlush";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v80 = sub_1002A6E78(*(uint64_t *)buf, "ShowError", &v369, 0xFFFFFFFFLL);
  double v81 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v82 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }

  if (v80)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v84 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "ShowError";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v85 = sub_1002A6E78(*(uint64_t *)buf, "LogFence", &v369, 0xFFFFFFFFLL);
  __int16 v86 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v87 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }

  if (v85)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v89 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFence";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v90 = sub_1002A6E78(*(uint64_t *)buf, "LogBufferSize", &v369, 0xFFFFFFFFLL);
  double v91 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v92 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }

  if (v90)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v94 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogBufferSize";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v95 = sub_1002A6E78(*(uint64_t *)buf, "LogShowUI", &v369, 0xFFFFFFFFLL);
  __int16 v96 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v97 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }

  if (v95)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    double v99 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogShowUI";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v100 = sub_1002A6E78(*(uint64_t *)buf, "LogFileLevel", &v369, 0xFFFFFFFFLL);
  double v101 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v102 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }

  if (v100)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v104 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileLevel";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v105 = sub_1002A6E78(*(uint64_t *)buf, "LogBufferLevel", &v369, 0xFFFFFFFFLL);
  __int16 v106 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v107 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }

  if (v105)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    double v109 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogBufferLevel";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v110 = sub_1002A6E78(*(uint64_t *)buf, "LogConsoleLevel", &v369, 0xFFFFFFFFLL);
  double v111 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v112 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }

  if (v110)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v114 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogConsoleLevel";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v115 = sub_1002A6E78(*(uint64_t *)buf, "LogStackLevel", &v369, 0xFFFFFFFFLL);
  __int16 v116 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v117 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }

  if (v115)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v119 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogStackLevel";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v120 = sub_1002A6E78(*(uint64_t *)buf, "LogFileRotationSize", &v369, 0xFFFFFFFFLL);
  int v121 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v122 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }

  if (v120)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    uint64_t v124 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileRotationSize";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v125 = sub_1002A6E78(*(uint64_t *)buf, "LogFileStorageCount", &v369, 0xFFFFFFFFLL);
  unint64_t v126 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v127 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }

  if (v125)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v129 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileStorageCount";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v130 = sub_1002A6E78(*(uint64_t *)buf, "LogLocations", &v369, 0xFFFFFFFFLL);
  int v131 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    BOOL v132 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }

  if (v130)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v134 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogLocations";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v135 = sub_1002A6E78(*(uint64_t *)buf, "LogLocationsFile", &v369, 0xFFFFFFFFLL);
  uint64_t v136 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v137 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }

  if (v135)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    uint64_t v139 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogLocationsFile";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v140 = sub_1002A6E78(*(uint64_t *)buf, "LogLocationsFlush", &v369, 0xFFFFFFFFLL);
  int v141 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v142 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }

  if (v140)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    uint64_t v144 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogLocationsFlush";
      __int16 v378 = 1026;
      int v379 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFile", 0xFFFFFFFFLL);
  int v145 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v146 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFilePrefix", 0xFFFFFFFFLL);
  uint64_t v148 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v149 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFileFlush", 0xFFFFFFFFLL);
  double v151 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v152 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "ShowError", 0xFFFFFFFFLL);
  uint64_t v154 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v155 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFence", 0xFFFFFFFFLL);
  double v157 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v158 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogBufferSize", 0xFFFFFFFFLL);
  double v160 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v161 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogShowUI", 0xFFFFFFFFLL);
  double v163 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v164 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFileLevel", 0xFFFFFFFFLL);
  uint64_t v166 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v167 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogBufferLevel", 0xFFFFFFFFLL);
  int v169 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v170 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogConsoleLevel", 0xFFFFFFFFLL);
  int v172 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v173 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogStackLevel", 0xFFFFFFFFLL);
  int v175 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v176 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFileRotationSize", 0xFFFFFFFFLL);
  int v178 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v179 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogFileStorageCount", 0xFFFFFFFFLL);
  int v181 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v182 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogLocations", 0xFFFFFFFFLL);
  uint64_t v184 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v185 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogLocationsFile", 0xFFFFFFFFLL);
  __int16 v187 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v188 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }

  sub_1002F0B04(buf);
  sub_1002A667C(*(uint64_t *)buf, "LogLocationsFlush", 0xFFFFFFFFLL);
  uint64_t v190 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v191 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }

  sub_1002F0B04(buf);
  sub_1002F13B4(*(uint64_t *)buf);
  __int16 v193 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v194 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }

  sub_1002F0B04(buf);
  int v196 = sub_1002A6E78(*(uint64_t *)buf, "LogFile", &v369, 0xFFFFFFFFLL);
  __int16 v197 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v198 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }

  if (v196)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    uint64_t v200 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFile";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v200,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v201 = sub_1002A6E78(*(uint64_t *)buf, "LogFilePrefix", &v369, 0xFFFFFFFFLL);
  int v202 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v203 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }

  if (v201)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v205 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFilePrefix";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v206 = sub_1002A6E78(*(uint64_t *)buf, "LogFileFlush", &v369, 0xFFFFFFFFLL);
  __int16 v207 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v208 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }

  if (v206)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v210 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileFlush";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v210,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v211 = sub_1002A6E78(*(uint64_t *)buf, "ShowError", &v369, 0xFFFFFFFFLL);
  unint64_t v212 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v213 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }

  if (v211)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v215 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "ShowError";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v215,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v216 = sub_1002A6E78(*(uint64_t *)buf, "LogFence", &v369, 0xFFFFFFFFLL);
  __int16 v217 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v218 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }

  if (v216)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    uint64_t v220 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFence";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v220,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v221 = sub_1002A6E78(*(uint64_t *)buf, "LogBufferSize", &v369, 0xFFFFFFFFLL);
  int v222 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v223 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }

  if (v221)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v225 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogBufferSize";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v225,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v226 = sub_1002A6E78(*(uint64_t *)buf, "LogShowUI", &v369, 0xFFFFFFFFLL);
  __int16 v227 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v228 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }

  if (v226)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    uint64_t v230 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogShowUI";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v230,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v231 = sub_1002A6E78(*(uint64_t *)buf, "LogFileLevel", &v369, 0xFFFFFFFFLL);
  int v232 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v233 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }

  if (v231)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    __int16 v235 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileLevel";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v235,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v236 = sub_1002A6E78(*(uint64_t *)buf, "LogBufferLevel", &v369, 0xFFFFFFFFLL);
  __int16 v237 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v238 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }

  if (v236)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    int v240 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogBufferLevel";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v240,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v241 = sub_1002A6E78(*(uint64_t *)buf, "LogConsoleLevel", &v369, 0xFFFFFFFFLL);
  v242 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v243 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }

  if (v241)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v245 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogConsoleLevel";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v245,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v246 = sub_1002A6E78(*(uint64_t *)buf, "LogStackLevel", &v369, 0xFFFFFFFFLL);
  v247 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v248 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }

  if (v246)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v250 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogStackLevel";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v250,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v251 = sub_1002A6E78(*(uint64_t *)buf, "LogFileRotationSize", &v369, 0xFFFFFFFFLL);
  v252 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v253 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }

  if (v251)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v255 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileRotationSize";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v255,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v256 = sub_1002A6E78(*(uint64_t *)buf, "LogFileStorageCount", &v369, 0xFFFFFFFFLL);
  v257 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v258 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }

  if (v256)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v260 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogFileStorageCount";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v260,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v261 = sub_1002A6E78(*(uint64_t *)buf, "LogLocations", &v369, 0xFFFFFFFFLL);
  v262 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v263 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }

  if (v261)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v265 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogLocations";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v265,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v266 = sub_1002A6E78(*(uint64_t *)buf, "LogLocationsFile", &v369, 0xFFFFFFFFLL);
  v267 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v268 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }

  if (v266)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v270 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogLocationsFile";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v270,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  sub_1002F0B04(buf);
  int v271 = sub_1002A6E78(*(uint64_t *)buf, "LogLocationsFlush", &v369, 0xFFFFFFFFLL);
  v272 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v273 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }

  if (v271)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2550);
    }
    v275 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)buf = 68289538LL;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "LogLocationsFlush";
      __int16 v378 = 1026;
      int v379 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v275,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, Legacy log settings found, key:%{public, location:escape_only}s, cleari ng:%{public}hhd}",  buf,  0x22u);
    }
  }

  v276 = operator new(0xA0uLL);
  v276[1] = 0LL;
  v276[2] = 0LL;
  void *v276 = off_1018A25A0;
  *(void *)&__int128 v376 = sub_1007B737C((uint64_t)(v276 + 3), @"com.apple.locationd.legacy-logging-dummy-settings", 1);
  *((void *)&v376 + 1) = v276;
  v277 = (char *)sub_1002F8DDC();
  sub_10030AC8C(v277, (uint64_t)buf);
  v278 = std::string::append((std::string *)buf, "locationd.log");
  __int128 v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
  std::string::size_type v368 = v278->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v279;
  v278->__r_.__value_.__l.__size_ = 0LL;
  v278->__r_.__value_.__l.__cap_ = 0LL;
  v278->__r_.__value_.__r.__words[0] = 0LL;
  sub_1002ACD58((uint64_t)(v276 + 16), "LogFile", (char *)__p);
  if (SHIBYTE(v368) < 0) {
    operator delete(__p[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  v280 = (char *)sub_1002F8DDC();
  sub_10030AC8C(v280, (uint64_t)buf);
  v281 = std::string::append((std::string *)buf, "logs");
  __int128 v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
  std::string::size_type v366 = v281->__r_.__value_.__l.__cap_;
  *(_OWORD *)v365 = v282;
  v281->__r_.__value_.__l.__size_ = 0LL;
  v281->__r_.__value_.__l.__cap_ = 0LL;
  v281->__r_.__value_.__r.__words[0] = 0LL;
  sub_1002ACD58((uint64_t)(v276 + 16), "LogFileDirectory", (char *)v365);
  if (SHIBYTE(v366) < 0) {
    operator delete(v365[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1002F0B04(&v363);
  uint64_t v283 = v363;
  v284 = (char *)sub_1002F8DDC();
  sub_10030AC8C(v284, (uint64_t)buf);
  v285 = std::string::append((std::string *)buf, "logs");
  __int128 v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
  std::string::size_type v362 = v285->__r_.__value_.__l.__cap_;
  *(_OWORD *)v361 = v286;
  v285->__r_.__value_.__l.__size_ = 0LL;
  v285->__r_.__value_.__l.__cap_ = 0LL;
  v285->__r_.__value_.__r.__words[0] = 0LL;
  sub_1002ACD58(v283 + 104, "LogFileDirectory", (char *)v361);
  if (SHIBYTE(v362) < 0) {
    operator delete(v361[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  v287 = v364;
  if (v364)
  {
    p_shared_owners = (unint64_t *)&v364->__shared_owners_;
    do
      unint64_t v289 = __ldaxr(p_shared_owners);
    while (__stlxr(v289 - 1, p_shared_owners));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }

  unint64_t v290 = v376;
  sub_1002ACA84(v376 + 104, "LogFilePrefix", "locationd");
  *(_DWORD *)buf = 52428800;
  sub_1002AC220(v290 + 104, "LogFileRotationSize", buf);
  *(_DWORD *)buf = 0;
  sub_1002AC220(v290 + 104, "LogFileStorageCount", buf);
  *(_DWORD *)buf = -1;
  sub_1002AC220(v290 + 104, "LogFileLevel", buf);
  buf[0] = 0;
  sub_1002AB3FC(v290 + 104, "LogFileFlush", buf);
  buf[0] = 0;
  sub_1002AB3FC(v290 + 104, "LogShowUI", buf);
  buf[0] = 0;
  sub_1002AB3FC(v290 + 104, "LogFence", buf);
  *(_DWORD *)buf = -1;
  sub_1002AC220(v290 + 104, "LogBufferLevel", buf);
  *(_DWORD *)buf = 0;
  sub_1002AC220(v290 + 104, "LogBufferSize", buf);
  *(_DWORD *)buf = -1;
  sub_1002AC220(v290 + 104, "LogConsoleLevel", buf);
  *(_DWORD *)buf = -1;
  sub_1002AC220(v290 + 104, "LogStackLevel", buf);
  v291 = (void *)sub_1007B3C30();
  unsigned __int128 v360 = __PAIR128__(*((unint64_t *)&v376 + 1), v290);
  if (*((void *)&v376 + 1))
  {
    v292 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
    do
      unint64_t v293 = __ldxr(v292);
    while (__stxr(v293 + 1, v292));
  }

  sub_100E65628(v291, (uint64_t *)&v360);
  v294 = (std::__shared_weak_count *)*((void *)&v360 + 1);
  if (*((void *)&v360 + 1))
  {
    v295 = (unint64_t *)(*((void *)&v360 + 1) + 8LL);
    do
      unint64_t v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }

  v297 = (std::__shared_weak_count *)*((void *)&v376 + 1);
  if (*((void *)&v376 + 1))
  {
    v298 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
    do
      unint64_t v299 = __ldaxr(v298);
    while (__stlxr(v299 - 1, v298));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
      std::__shared_weak_count::__release_weak(v297);
    }
  }

LABEL_623:
  v346 = (void *)sub_100E00E14();
  sub_1002F0B04(buf);
  __int128 v359 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_100E65628(v346, (uint64_t *)&v359);
  v347 = (std::__shared_weak_count *)*((void *)&v359 + 1);
  if (*((void *)&v359 + 1))
  {
    v348 = (unint64_t *)(*((void *)&v359 + 1) + 8LL);
    do
      unint64_t v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }

  v350 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v351 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
      std::__shared_weak_count::__release_weak(v350);
    }
  }

  uint64_t v353 = sub_100E00E14();
  sub_1002F0B04(buf);
  char v354 = sub_1002A6F64(*(uint64_t *)buf, "BinaryLogEnable", (BOOL *)&v376);
  if ((_BYTE)v376) {
    char v355 = v354;
  }
  else {
    char v355 = 0;
  }
  sub_100E011EC(v353, v355);
  v356 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    v357 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }

void sub_1011CB044( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, int a43, __int16 a44, char a45, char a46, uint64_t a47, char a48)
{
}

uint64_t sub_1011CB328()
{
  uint64_t result = qword_1019A0680;
  if (qword_1019A0680) {
    return sub_1011C5324((unsigned int *)qword_1019A0680, 1);
  }
  return result;
}

uint64_t sub_1011CB340()
{
  sigaction v1 = (sigaction)off_1018A25E0;
  sigaction(3, &v1, 0LL);
  return sigaction(15, &v1, 0LL);
}

void (__cdecl *sub_1011CB3B0())(int)
{
  return signal(15, (void (__cdecl *)(int))1);
}

void sub_1011CB3EC(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1011CB418(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1011CB448(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A25A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011CB458(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A25A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1011CB478(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1011CB488(int a1)
{
  if ((a1 - 2) < 2 || a1 == 15)
  {
    alarm(0xAu);
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_1019A0678);
    uint64_t v2 = (__CFRunLoop *)sub_10029228C();
    CFRunLoopWakeUp(v2);
  }

  else if (a1 == 14)
  {
    _Exit(1);
  }

void sub_1011CB4D8(int a1, uint64_t a2)
{
  if (a2) {
    dword_101993278 = *(_DWORD *)(a2 + 12);
  }
  sub_1011CB488(a1);
}

void sub_1011CB4EC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013E471C;
      v1[3] = unk_1013E472C;
      v1[4] = xmmword_1013E473C;
      v1[0] = xmmword_1013E46FC;
      v1[1] = unk_1013E470C;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1011CB5C0(_Unwind_Exception *a1)
{
}

void sub_1011CB5D8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1011CB63C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1011CB6B0(_Unwind_Exception *a1)
{
}

BOOL sub_1011CB6C8(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a2 + 16);
  if (v2 < v3) {
    return 1LL;
  }
  if (v2 > v3) {
    return 0LL;
  }
  float v4 = *(float *)(a1 + 12);
  float v5 = *(float *)(a2 + 12);
  if (v4 < v5) {
    return 1LL;
  }
  if (v4 > v5) {
    return 0LL;
  }
  float v6 = *(float *)(a1 + 4);
  float v7 = *(float *)(a2 + 4);
  if (v6 < v7) {
    return 1LL;
  }
  if (v6 > v7) {
    return 0LL;
  }
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

uint64_t sub_1011CB73C(uint64_t a1, void *a2)
{
  float v4 = (unsigned __int8 *)(sub_100E44F04((void *)a1, a2) + 2);
  sub_10120E684(v4, a2);
  *(void *)a1 = off_1018A2600;
  *(void *)(a1 + 16) = off_1018A26C0;
  *(_BYTE *)(a1 + 27sub_1011C5518(qword_1019A41A0, 0) = 0;
  *(_DWORD *)(a1 + 272) = -2;
  float v5 = (float **)(a1 + 312);
  float v6 = (void *)(a1 + 336);
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 44sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 52sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 60sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 68sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 28sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  *(void *)(a1 + 288) = 0LL;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 296) = 0LL;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 369) = 0u;
  *(_DWORD *)(a1 + 392) = 1;
  *(int64x2_t *)(a1 + 40sub_1011C5518(qword_1019A41A0, 0) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 416) = 0x8000007F7FFFFFLL;
  *(_BYTE *)(a1 + 712) = 0;
  unsigned int v7 = time(0LL);
  uint64_t v8 = a1 + 400;
  *(_DWORD *)(a1 + 72sub_1011C5518(qword_1019A41A0, 0) = v7;
  uint64_t v9 = 1LL;
  for (uint64_t i = 181LL; i != 804; ++i)
  {
    int v11 = 1812433253 * (v7 ^ (v7 >> 30));
    unsigned int v7 = v11 + v9;
    *(_DWORD *)(a1 + 4 * i) = i + v11 - 180;
    ++v9;
  }

  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  uint64_t v12 = sub_1006E27E8();
  sub_100413284(v12, __p);
  sub_1002A6F64((uint64_t)__p[0], "LogGyro", (BOOL *)(a1 + 712));
  CFTypeID v13 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    __int16 v14 = (unint64_t *)((char *)__p[1] + 8);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  if (sub_1003C1048(a1 + 128)) {
    sub_1003C0200(a1 + 128, "GyroCalibration");
  }
  if (sub_1003B59A0( a1 + 128,  "GyroMultiCalibration",  (const char **)&off_1018A28D8,  (const std::string::value_type **)&off_101993280,  1))
  {
    sub_1011CBF54(a1);
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v87 = 0u;
    __int128 v88 = 0u;
    __int128 v85 = 0u;
    __int128 v86 = 0u;
    __int128 v83 = 0u;
    __int128 v84 = 0u;
    __int128 v81 = 0u;
    __int128 v82 = 0u;
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    *(_OWORD *)std::string __p = 0u;
    __int128 v72 = 0u;
    LOBYTE(__p[0]) = 1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 1;
    (*(void (**)(unsigned __int8 *, std::string *, void **, uint64_t, uint64_t, void))(*(void *)v4 + 152LL))( v4,  &buf,  __p,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  else
  {
    *(void *)(a1 + 32sub_1011C5518(qword_1019A41A0, 0) = *(void *)(a1 + 312);
    sub_1003C0D54(a1 + 128, "SELECT MAX(Round) FROM GyroMultiCalibration", __p);
    id v16 = __p[0];
    double v67 = __p[0];
    uint64_t v17 = (sqlite3_stmt *)sub_100019240((uint64_t)__p[0]);
    if (sqlite3_step(v17) == 100)
    {
      unint64_t v18 = (sqlite3_stmt *)sub_100019240((uint64_t)v16);
      int v19 = sqlite3_column_int(v18, 0);
    }

    else
    {
      int v19 = 0;
    }

    uint64_t v66 = a1 + 128;
    sub_1003C0D54( a1 + 128,  "SELECT Round, Temperature, BiasX, BiasY, BiasZ FROM GyroMultiCalibration WHERE Round = ? OR (Round > ? AND Round <= ?)",  __p);
    uint64_t v20 = __p[0];
    unint64_t v21 = (sqlite3_stmt *)sub_100019240((uint64_t)__p[0]);
    sub_1003C28BC(v21, 1, -1);
    unint64_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
    sub_1003C28BC(v22, 2, v19 - 6);
    char v23 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
    sub_1003C28BC(v23, 3, v19);
    while (1)
    {
      unint64_t v24 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
      int v25 = sqlite3_step(v24);
      if (v25 != 100) {
        break;
      }
      std::string v26 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
      double v27 = sqlite3_column_double(v26, 2);
      size_t v28 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
      double v29 = sqlite3_column_double(v28, 3);
      unint64_t v30 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
      double v31 = sqlite3_column_double(v30, 4);
      int v32 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
      double v33 = sqlite3_column_double(v32, 1);
      __int16 v34 = (sqlite3_stmt *)sub_100019240((uint64_t)v20);
      int v35 = sqlite3_column_int(v34, 0);
      int v36 = v35;
      float v37 = v27;
      float v38 = v29;
      float v39 = v31;
      unint64_t v40 = *(void *)(a1 + 320);
      unint64_t v41 = *(void *)(a1 + 328);
      if (v40 >= v41)
      {
        unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (void)*v5) >> 2);
        unint64_t v45 = v44 + 1;
        if (v44 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          sub_100007008();
        }
        unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - (void)*v5) >> 2);
        if (2 * v46 > v45) {
          unint64_t v45 = 2 * v46;
        }
        if (v46 >= 0x666666666666666LL) {
          unint64_t v47 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v47 = v45;
        }
        uint64_t v48 = (char *)sub_1011D49A4(v47);
        BOOL v50 = (float *)&v48[20 * v44];
        float v51 = v33;
        *BOOL v50 = v37;
        v50[1] = v38;
        v50[2] = v39;
        v50[3] = v51;
        *((_DWORD *)v50 + 4) = v36;
        int v53 = *(float **)(a1 + 312);
        int v52 = *(float **)(a1 + 320);
        char v54 = v50;
        if (v52 != v53)
        {
          do
          {
            __int128 v55 = *(_OWORD *)(v52 - 5);
            *(v54 - 1) = *(v52 - 1);
            *(_OWORD *)(v54 - 5) = v55;
            v54 -= 5;
            v52 -= 5;
          }

          while (v52 != v53);
          int v52 = *v5;
        }

        id v43 = (char *)(v50 + 5);
        *(void *)(a1 + 312) = v54;
        *(void *)(a1 + 32sub_1011C5518(qword_1019A41A0, 0) = v50 + 5;
        *(void *)(a1 + 328) = &v48[20 * v49];
        if (v52) {
          operator delete(v52);
        }
      }

      else
      {
        float v42 = v33;
        *(float *)unint64_t v40 = v37;
        *(float *)(v40 + 4) = v38;
        *(float *)(v40 + 8) = v39;
        *(float *)(v40 + 12) = v42;
        *(_DWORD *)(v40 + 16) = v35;
        id v43 = (char *)(v40 + 20);
      }

      *(void *)(a1 + 32sub_1011C5518(qword_1019A41A0, 0) = v43;
    }

    if (v25 != 101)
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
      unint64_t v56 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        sub_1003C3A08(v66, (std::string *)__p);
        BOOL v57 = (SBYTE7(v72) & 0x80u) == 0 ? __p : (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_FAULT,  "SQL error: %{public}s",  (uint8_t *)&buf,  0xCu);
        if (SBYTE7(v72) < 0) {
          operator delete(__p[0]);
        }
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A29F8);
        }
        __int128 v63 = off_101934598;
        sub_1003C3A08(v66, &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v69 = 136446210;
        int v70 = p_buf;
        int v65 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v63,  17LL,  "SQL error: %{public}s",  &v69,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalMultiRun::loadFromDatabase()",  "%s\n",  v65);
      }
    }

    uint64_t v58 = *(__n128 **)(a1 + 312);
    unint64_t v59 = *(__n128 **)(a1 + 320);
    unint64_t v60 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v59 - (char *)v58) >> 2));
    if (v59 == v58) {
      uint64_t v61 = 0LL;
    }
    else {
      uint64_t v61 = v60;
    }
    sub_1011D4B84(v58, v59, v61, 1);
    if (v20) {
      (*(void (**)(void *))(*(void *)v20 + 8LL))(v20);
    }
    float v6 = (void *)(a1 + 336);
    uint64_t v8 = a1 + 400;
    if (v67) {
      (*(void (**)(void *))(*(void *)v67 + 8LL))(v67);
    }
  }

  *(_BYTE *)(a1 + 384) = sub_1011CC3B0(*(float32x2_t **)(a1 + 312), *(float32x2_t **)(a1 + 320), v6, a1 + 392);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128LL))(a1, v8);
  sub_1011CC900(a1);
  return a1;
}

void sub_1011CBE48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8LL))(a14);
  }
  uint64_t v20 = v16[403];
  v16[403] = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  unint64_t v21 = (void **)(v16 + 35);
  sub_1011D38F4(a15);
  unint64_t v22 = *v18;
  if (*v18)
  {
    v16[40] = v22;
    operator delete(v22);
  }

  char v23 = *v21;
  if (*v21)
  {
    v16[36] = v23;
    operator delete(v23);
  }

  v16[2] = off_1018A3778;
  sub_1003B3930(v16 + 16);
  sub_1003953A8(a16);
  sub_100E450D4(v16);
  _Unwind_Resume(a1);
}

void sub_1011CBF54(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 270))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    char v23 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      std::string __p = (void *)68289539;
      *(_WORD *)double v27 = 2082;
      *(void *)&v27[2] = "";
      *(_WORD *)&v27[10] = 2082;
      *(void *)&v27[12] = "assert";
      __int16 v28 = 2081;
      double v29 = "!fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  (uint8_t *)&__p,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    unint64_t v24 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      std::string __p = (void *)68289539;
      *(_WORD *)double v27 = 2082;
      *(void *)&v27[2] = "";
      *(_WORD *)&v27[10] = 2082;
      *(void *)&v27[12] = "assert";
      __int16 v28 = 2081;
      double v29 = "!fBuilding";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  (uint8_t *)&__p,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v25 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      std::string __p = (void *)68289539;
      *(_WORD *)double v27 = 2082;
      *(void *)&v27[2] = "";
      *(_WORD *)&v27[10] = 2082;
      *(void *)&v27[12] = "assert";
      __int16 v28 = 2081;
      double v29 = "!fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  (uint8_t *)&__p,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  346,  "initializeWithFactoryData");
    __break(1u);
  }

  *(void *)(a1 + 32sub_1011C5518(qword_1019A41A0, 0) = *(void *)(a1 + 312);
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  *(_DWORD *)(a1 + 304) = 0;
  std::string __p = 0LL;
  *(void *)double v27 = 0LL;
  *(void *)&v27[8] = 0LL;
  sub_1006A42C8(&__p);
  int v2 = __p;
  int v3 = *(_DWORD **)v27;
  if (__p != *(void **)v27)
  {
    float v4 = *(char **)(a1 + 288);
    do
    {
      float v5 = (uint64_t *)(v2 + 1);
      unint64_t v6 = *(void *)(a1 + 296);
      if ((unint64_t)v4 >= v6)
      {
        uint64_t v9 = *(void *)(a1 + 280);
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v9] >> 2);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          sub_100007008();
        }
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v9) >> 2);
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        if (v12 >= 0x666666666666666LL) {
          unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v13 = v11;
        }
        __int16 v14 = (char *)sub_1011D49A4(v13);
        id v16 = &v14[20 * v10];
        int v17 = *v2;
        uint64_t v18 = *v5;
        *((_DWORD *)v16 + 2) = v2[3];
        *(void *)id v16 = v18;
        *((_DWORD *)v16 + 3) = v17;
        *((_DWORD *)v16 + 4) = -1;
        uint64_t v20 = *(char **)(a1 + 280);
        int v19 = *(char **)(a1 + 288);
        unint64_t v21 = v16;
        if (v19 != v20)
        {
          do
          {
            __int128 v22 = *(_OWORD *)(v19 - 20);
            *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
            *(_OWORD *)(v21 - 2sub_1011C5518(qword_1019A41A0, 0) = v22;
            v21 -= 20;
            v19 -= 20;
          }

          while (v19 != v20);
          int v19 = *(char **)(a1 + 280);
        }

        float v4 = v16 + 20;
        *(void *)(a1 + 28sub_1011C5518(qword_1019A41A0, 0) = v21;
        *(void *)(a1 + 288) = v16 + 20;
        *(void *)(a1 + 296) = &v14[20 * v15];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        int v7 = *v2;
        uint64_t v8 = *v5;
        *((_DWORD *)v4 + 2) = v2[3];
        *(void *)float v4 = v8;
        *((_DWORD *)v4 + 3) = v7;
        *((_DWORD *)v4 + 4) = -1;
        v4 += 20;
      }

      *(void *)(a1 + 288) = v4;
      ++*(_DWORD *)(a1 + 304);
      v2 += 4;
    }

    while (v2 != v3);
  }

  sub_1011CF57C(a1, -1);
  sub_1011CF844((uint64_t *)a1, -1);
  if (__p)
  {
    *(void *)double v27 = __p;
    operator delete(__p);
  }

void sub_1011CC384( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1011CC3B0(float32x2_t *a1, float32x2_t *a2, void *a3, uint64_t a4)
{
  BOOL v57 = 0LL;
  uint64_t v58 = 0LL;
  unint64_t v59 = 0LL;
  if (a1 == a2) {
    return 0LL;
  }
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  float v5 = a1;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t)v5 + 20 * (v4 >> 1);
    __int32 v8 = *(_DWORD *)(v7 + 16);
    uint64_t v9 = (float32x2_t *)(v7 + 20);
    v4 += ~(v4 >> 1);
    if (v8 <= a1[2].i32[0]) {
      float v5 = v9;
    }
    else {
      unint64_t v4 = v6;
    }
  }

  while (v4);
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  unint64_t v12 = 0LL;
  unint64_t v13 = v58;
  float v14 = 1.1755e-38;
  float v15 = 3.4028e38;
  int v53 = a1;
  for (uint64_t i = a1; ; uint64_t i = v17)
  {
    int v17 = v5;
    if (((sub_1004F97F4() & 0x8000) == 0 || i[2].i32[0] == -1) && (char *)v17 - (char *)i >= 40)
    {
      for (j = (float32x2_t *)((char *)v17 - 20); i != j; j = (float32x2_t *)((char *)v17 - 20))
      {
        uint64_t v20 = i;
        float v21 = i[1].f32[1];
        if (v21 < v15) {
          float v15 = i[1].f32[1];
        }
        if (v21 > v14) {
          float v14 = i[1].f32[1];
        }
        uint64_t i = (float32x2_t *)((char *)i + 20);
        if (i != v17)
        {
          __int128 v22 = i;
          do
          {
            v18.i32[0] = v20[1].i32[1];
            float v23 = v22[1].f32[1];
            if (*(float *)v18.i32 != v23)
            {
              if (v23 < v15) {
                float v15 = v22[1].f32[1];
              }
              if (v23 > v14) {
                float v14 = v22[1].f32[1];
              }
              *(float *)v18.i32 = *(float *)v18.i32 - v23;
              float32x2_t v24 = vdiv_f32(vsub_f32(*v20, *v22), (float32x2_t)vdup_lane_s32(v18, 0));
              float v25 = (float)(v20[1].f32[0] - v22[1].f32[0]) / *(float *)v18.i32;
              if ((unint64_t)v10 >= v12)
              {
                unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v11) >> 2) + 1;
                if (v26 > 0x1555555555555555LL)
                {
                  uint64_t v58 = v13;
                  unint64_t v59 = v12;
                  BOOL v57 = v11;
                  sub_100007008();
                }

                else {
                  unint64_t v27 = v26;
                }
                if (v27) {
                  unint64_t v27 = (unint64_t)sub_1011D5FC4(v27);
                }
                else {
                  uint64_t v28 = 0LL;
                }
                double v29 = (float32x2_t *)(v27 + 4 * (((char *)v10 - (char *)v11) >> 2));
                *double v29 = v24;
                v29[1].f32[0] = v25;
                unint64_t v30 = v29;
                while (v10 != v11)
                {
                  float32x2_t v31 = *(float32x2_t *)((char *)v10 - 12);
                  unint64_t v10 = (float32x2_t *)((char *)v10 - 12);
                  __int32 v32 = v10[1].i32[0];
                  *(float32x2_t *)((char *)v30 - 12) = v31;
                  unint64_t v30 = (float32x2_t *)((char *)v30 - 12);
                  v30[1].i32[0] = v32;
                }

                unint64_t v12 = v27 + 12 * v28;
                unint64_t v13 = (float32x2_t *)((char *)v29 + 12);
                if (v11) {
                  operator delete(v11);
                }
                unint64_t v10 = v13;
                unint64_t v11 = v30;
              }

              else
              {
                float32x2_t *v10 = v24;
                v10[1].f32[0] = v25;
                unint64_t v13 = (float32x2_t *)((char *)v10 + 12);
                unint64_t v10 = (float32x2_t *)((char *)v10 + 12);
              }
            }

            __int128 v22 = (float32x2_t *)((char *)v22 + 20);
          }

          while (v22 != v17);
        }
      }
    }

    if (v17 == a2) {
      break;
    }
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v17) >> 2);
    float v5 = v17;
    do
    {
      unint64_t v34 = v33 >> 1;
      uint64_t v35 = (uint64_t)v5 + 20 * (v33 >> 1);
      __int32 v36 = *(_DWORD *)(v35 + 16);
      float v37 = (float32x2_t *)(v35 + 20);
      v33 += ~(v33 >> 1);
      if (v36 <= v17[2].i32[0]) {
        float v5 = v37;
      }
      else {
        unint64_t v33 = v34;
      }
    }

    while (v33);
  }

  uint64_t v58 = v13;
  unint64_t v59 = v12;
  BOOL v57 = v11;
  if (v11 == v10)
  {
    BOOL v46 = 0LL;
    if (!v10) {
      return v46;
    }
LABEL_60:
    uint64_t v58 = v10;
    operator delete(v10);
    return v46;
  }

  *(float *)(a4 + 24) = v15;
  *(float *)(a4 + 28) = v14;
  *(float *)(a4 + 32) = sub_1011D112C((uint64_t *)&v57);
  *(_DWORD *)(a4 + 36) = v38;
  *(_DWORD *)(a4 + 4sub_1011C5518(qword_1019A41A0, 0) = v39;
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  unint64_t v40 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    double v41 = *(float *)(a4 + 32);
    double v42 = *(float *)(a4 + 36);
    double v43 = *(float *)(a4 + 40);
    *(_DWORD *)std::string buf = 134218496;
    double v67 = v41;
    __int16 v68 = 2048;
    double v69 = v42;
    __int16 v70 = 2048;
    double v71 = v43;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "ComputeFullBias: x,%f,y,%f,z,%f", buf, 0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    double v48 = *(float *)(a4 + 32);
    double v49 = *(float *)(a4 + 36);
    double v50 = *(float *)(a4 + 40);
    int v60 = 134218496;
    double v61 = v48;
    __int16 v62 = 2048;
    double v63 = v49;
    __int16 v64 = 2048;
    double v65 = v50;
    LODWORD(v52) = 32;
    float v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "ComputeFullBias: x,%f,y,%f,z,%f",  COERCE_DOUBLE(&v60),  v52,  *(double *)&v53);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLGyroCalibrationDatabaseLocalMultiRun::computeFullBias(const std::vector<BiasTemperatureRound>::const _iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMo tionTypeGyroBiasFit &)",  "%s\n",  v51);
  }

  BOOL v46 = sub_1011CD644(v53, a2, a3, a4, v44, v45);
  unint64_t v10 = v11;
  if (v11) {
    goto LABEL_60;
  }
  return v46;
}

void sub_1011CC8C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011CC900(uint64_t result)
{
  if (*(_BYTE *)(result + 384))
  {
    uint64_t v1 = result;
    sub_1011CE5AC((double *)result);
    memcpy(__dst, (const void *)(v1 + 392), sizeof(__dst));
    int v2 = 0;
    return (*(uint64_t (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)(v1 + 16) + 152LL))( v1 + 16,  &v2,  __dst,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

void *sub_1011CC994(void *a1)
{
  *a1 = off_1018A2600;
  a1[2] = off_1018A26C0;
  int v2 = a1 + 2;
  uint64_t v3 = a1[403];
  a1[403] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1011D38F4((uint64_t)(a1 + 42));
  unint64_t v4 = (void *)a1[39];
  if (v4)
  {
    a1[40] = v4;
    operator delete(v4);
  }

  float v5 = (void *)a1[35];
  if (v5)
  {
    a1[36] = v5;
    operator delete(v5);
  }

  a1[2] = off_1018A3778;
  sub_1003B3930(a1 + 16);
  sub_1003953A8(v2);
  return sub_100E450D4(a1);
}

void *sub_1011CCA2C(uint64_t a1)
{
  return sub_1011CC994((void *)(a1 - 16));
}

void sub_1011CCA34(void *a1)
{
  uint64_t v1 = sub_1011CC994(a1);
  operator delete(v1);
}

void sub_1011CCA48(uint64_t a1)
{
  uint64_t v1 = sub_1011CC994((void *)(a1 - 16));
  operator delete(v1);
}

uint64_t sub_1011CCA60(uint64_t a1, float *a2, float *a3, __n128 a4, double a5)
{
  float v6 = a4.n128_f32[0];
  uint64_t v10 = *(void *)(a1 + 3224);
  if (v10) {
    (*(void (**)(uint64_t, float *, float *, __n128, double))(*(void *)v10 + 208LL))( v10,  a2,  a3,  a4,  a4.n128_f32[0]);
  }
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  unint64_t v11 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    double v12 = *a2;
    double v13 = a2[1];
    double v14 = a2[2];
    LODWORD(buf[0]) = 134218752;
    *(double *)((char *)buf + 4) = v12;
    WORD2(buf[1]) = 2048;
    *(double *)((char *)&buf[1] + 6) = v13;
    HIWORD(buf[2]) = 2048;
    *(double *)&buf[3] = v14;
    LOWORD(buf[4]) = 2048;
    *(double *)((char *)&buf[4] + 2) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f",  (uint8_t *)buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    double v122 = *a2;
    double v123 = a2[1];
    double v124 = a2[2];
    int v168 = 134218752;
    double v169 = v122;
    __int16 v170 = 2048;
    double v171 = v123;
    __int16 v172 = 2048;
    double v173 = v124;
    __int16 v174 = 2048;
    double v175 = v6;
    LODWORD(v164) = 42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f",  COERCE_DOUBLE(&v168),  v164,  v165,  v166);
    unint64_t v126 = (char *)v125;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVe ctor3 &, float, CFAbsoluteTime)",  "%s\n",  v125);
  }

  if (fabsf(*a2) > 75.0 || fabsf(a2[1]) > 75.0 || fabsf(a2[2]) > 75.0) {
    return 0LL;
  }
  sub_1004F2598();
  int v15 = sub_1004F2690();
  float v16 = 1.1755e-38;
  if (((v15 - 82) & 0xFFFFFFF9) == 0) {
    float v16 = 20.0;
  }
  if (v16 >= v6) {
    return 0LL;
  }
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  int v17 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
  {
    int v18 = *(unsigned __int8 *)(a1 + 270);
    LODWORD(buf[0]) = 67109120;
    HIDWORD(buf[0]) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "fBuilding,%d", (uint8_t *)buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    int v161 = *(unsigned __int8 *)(a1 + 270);
    int v168 = 67109120;
    LODWORD(v169) = v161;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "fBuilding,%d",  &v168);
    double v163 = (char *)v162;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVe ctor3 &, float, CFAbsoluteTime)",  "%s\n",  v162);
  }

  if (*(_BYTE *)(a1 + 270))
  {
    uint64_t v20 = *(void *)(a1 + 280);
    unint64_t v19 = *(void *)(a1 + 288);
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 2);
    if (v21 > 0x3B)
    {
      int v51 = *(_DWORD *)(a1 + 304);
      LODWORD(buf[0]) = 0;
      HIDWORD(buf[0]) = v51;
      int v52 = sub_1011D49E8((uint64_t)buf, a1 + 720, buf);
      uint64_t v53 = *(void *)(a1 + 280);
      if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 288) - v53) >> 2) > v52)
      {
        int v54 = *(_DWORD *)(a1 + 272);
        uint64_t v55 = v53 + 20LL * v52;
        uint64_t v56 = *(void *)a2;
        *(float *)(v55 + 8) = a2[2];
        *(void *)uint64_t v55 = v56;
        *(float *)(v55 + 12) = v6;
        *(_DWORD *)(v55 + 16) = v54;
      }
    }

    else
    {
      unint64_t v22 = *(void *)(a1 + 296);
      if (v19 >= v22)
      {
        unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v20) >> 2);
        if (2 * v57 <= v21 + 1) {
          uint64_t v58 = v21 + 1;
        }
        else {
          uint64_t v58 = 2 * v57;
        }
        if (v57 >= 0x666666666666666LL) {
          unint64_t v59 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v59 = v58;
        }
        int v60 = (char *)sub_1011D49A4(v59);
        double v61 = (float *)&v60[20 * v21];
        double v63 = &v60[20 * v62];
        int v64 = *(_DWORD *)(a1 + 272);
        uint64_t v65 = *(void *)a2;
        v61[2] = a2[2];
        *(void *)double v61 = v65;
        v61[3] = v6;
        *((_DWORD *)v61 + 4) = v64;
        float v25 = (char *)(v61 + 5);
        double v67 = *(float **)(a1 + 280);
        uint64_t v66 = *(float **)(a1 + 288);
        if (v66 != v67)
        {
          do
          {
            __int128 v68 = *(_OWORD *)(v66 - 5);
            *(v61 - 1) = *(v66 - 1);
            *(_OWORD *)(v61 - 5) = v68;
            v61 -= 5;
            v66 -= 5;
          }

          while (v66 != v67);
          uint64_t v66 = *(float **)(a1 + 280);
        }

        *(void *)(a1 + 28sub_1011C5518(qword_1019A41A0, 0) = v61;
        *(void *)(a1 + 288) = v25;
        *(void *)(a1 + 296) = v63;
        if (v66) {
          operator delete(v66);
        }
      }

      else
      {
        int v23 = *(_DWORD *)(a1 + 272);
        uint64_t v24 = *(void *)a2;
        *(float *)(v19 + 8) = a2[2];
        *(void *)unint64_t v19 = v24;
        *(float *)(v19 + 12) = v6;
        *(_DWORD *)(v19 + 16) = v23;
        float v25 = (char *)(v19 + 20);
      }

      *(void *)(a1 + 288) = v25;
    }

    ++*(_DWORD *)(a1 + 304);
    return 1LL;
  }

  uint64_t result = 0LL;
  if (*a3 <= 0.01 && a3[1] <= 0.01 && a3[2] <= 0.01)
  {
    unint64_t v27 = *(void *)(a1 + 368);
    unint64_t v28 = *(void *)(a1 + 376);
    if (v28 >= 0x33)
    {
      --v28;
      *(void *)(a1 + 368) = ++v27;
      *(void *)(a1 + 376) = v28;
      if (v27 >= 0x198)
      {
        operator delete(**(void ***)(a1 + 344));
        *(void *)(a1 + 344) += 8LL;
        unint64_t v28 = *(void *)(a1 + 376);
        unint64_t v27 = *(void *)(a1 + 368) - 204LL;
        *(void *)(a1 + 368) = v27;
      }
    }

    double v29 = (void *)(a1 + 336);
    unint64_t v30 = (char **)(a1 + 344);
    float32x2_t v31 = *(char **)(a1 + 352);
    __int32 v32 = *(char **)(a1 + 344);
    unint64_t v33 = (v31 - v32) >> 3;
    uint64_t v34 = 204 * v33 - 1;
    if (v31 == v32) {
      uint64_t v34 = 0LL;
    }
    unint64_t v35 = v28 + v27;
    int v167 = (void *)(a1 + 336);
    if (v34 != v35) {
      goto LABEL_82;
    }
    BOOL v36 = v27 >= 0xCC;
    unint64_t v37 = v27 - 204;
    if (v36)
    {
      *(void *)(a1 + 368) = v37;
      uint64_t v40 = *(void *)v32;
      int v38 = v32 + 8;
      uint64_t v39 = v40;
      *(void *)(a1 + 344) = v38;
      if (v31 == *(char **)(a1 + 360))
      {
        uint64_t v41 = (uint64_t)&v38[-*v29];
        if ((unint64_t)v38 <= *v29)
        {
          else {
            unint64_t v84 = (uint64_t)&v31[-*v29] >> 2;
          }
          __int128 v85 = (char *)sub_1011D4A98(v84);
          __int128 v87 = &v85[8 * (v84 >> 2)];
          __int128 v88 = *(uint64_t **)(a1 + 344);
          float32x2_t v31 = v87;
          uint64_t v89 = *(void *)(a1 + 352) - (void)v88;
          if (v89)
          {
            float32x2_t v31 = &v87[v89 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v90 = 8 * (v89 >> 3);
            double v91 = &v85[8 * (v84 >> 2)];
            do
            {
              uint64_t v92 = *v88++;
              *(void *)double v91 = v92;
              v91 += 8;
              v90 -= 8LL;
            }

            while (v90);
          }

          unint64_t v93 = *(void **)(a1 + 336);
          *(void *)(a1 + 336) = v85;
          *(void *)(a1 + 344) = v87;
          *(void *)(a1 + 352) = v31;
          *(void *)(a1 + 36sub_1011C5518(qword_1019A41A0, 0) = &v85[8 * v86];
          if (v93)
          {
            operator delete(v93);
            float32x2_t v31 = *(char **)(a1 + 352);
          }
        }

        else
        {
          uint64_t v42 = v41 >> 3;
          BOOL v43 = v41 >> 3 < -1;
          uint64_t v44 = (v41 >> 3) + 2;
          if (v43) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = v42 + 1;
          }
          uint64_t v46 = -(v45 >> 1);
          uint64_t v47 = v45 >> 1;
          double v48 = &v38[-8 * v47];
          int64_t v49 = v31 - v38;
          if (v31 != v38)
          {
            memmove(&v38[-8 * v47], v38, v31 - v38);
            float32x2_t v31 = *v30;
          }

          double v50 = &v31[8 * v46];
          float32x2_t v31 = &v48[v49];
          *(void *)(a1 + 344) = v50;
          *(void *)(a1 + 352) = &v48[v49];
        }
      }

      *(void *)float32x2_t v31 = v39;
    }

    else
    {
      double v69 = *(char **)(a1 + 360);
      __int16 v70 = *(char **)(a1 + 336);
      if (v33 >= (v69 - v70) >> 3)
      {
        if (v69 == v70) {
          unint64_t v73 = 1LL;
        }
        else {
          unint64_t v73 = (v69 - v70) >> 2;
        }
        __int128 v74 = (char *)sub_1011D4A98(v73);
        uint64_t v76 = v75;
        __int128 v77 = operator new(0xFF0uLL);
        __int128 v78 = &v74[8 * v33];
        uint64_t v79 = v76;
        __int128 v80 = &v74[8 * v76];
        if (v33 == v79)
        {
          uint64_t v81 = 8 * v33;
          if (v31 - v32 < 1)
          {
            v127 = v77;
            uint64_t v128 = v81 >> 2;
            if (v31 == v32) {
              unint64_t v129 = 1LL;
            }
            else {
              unint64_t v129 = v128;
            }
            int v130 = (char *)sub_1011D4A98(v129);
            __int128 v78 = &v130[8 * (v129 >> 2)];
            __int128 v80 = &v130[8 * v131];
            if (v74) {
              operator delete(v74);
            }
            __int128 v74 = v130;
            __int128 v77 = v127;
          }

          else
          {
            uint64_t v82 = v81 >> 3;
            if (v82 >= -1) {
              unint64_t v83 = v82 + 1;
            }
            else {
              unint64_t v83 = v82 + 2;
            }
            v78 -= 8 * (v83 >> 1);
          }
        }

        *(void *)__int128 v78 = v77;
        BOOL v132 = v78 + 8;
        unint64_t v133 = *(char **)(a1 + 344);
        __int16 v134 = *(char **)(a1 + 352);
        while (v134 != v133)
        {
          if (v78 == v74)
          {
            if (v132 >= v80)
            {
              if (v80 == v74) {
                unint64_t v139 = 1LL;
              }
              else {
                unint64_t v139 = (v80 - v74) >> 2;
              }
              int v140 = (char *)sub_1011D4A98(v139);
              double v142 = v140;
              __int128 v78 = &v140[(2 * v139 + 6) & 0xFFFFFFFFFFFFFFF8LL];
              uint64_t v144 = v132 - v74;
              BOOL v143 = v132 == v74;
              BOOL v132 = v78;
              if (!v143)
              {
                BOOL v132 = &v78[v144 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v145 = 8 * (v144 >> 3);
                int v146 = v78;
                unint64_t v147 = (uint64_t *)v74;
                do
                {
                  uint64_t v148 = *v147++;
                  *(void *)int v146 = v148;
                  v146 += 8;
                  v145 -= 8LL;
                }

                while (v145);
              }

              __int128 v80 = &v140[8 * v141];
              if (v74) {
                operator delete(v74);
              }
              __int128 v74 = v142;
            }

            else
            {
              uint64_t v135 = (v80 - v132) >> 3;
              if (v135 >= -1) {
                uint64_t v136 = v135 + 1;
              }
              else {
                uint64_t v136 = v135 + 2;
              }
              uint64_t v137 = v136 >> 1;
              __int128 v78 = &v74[8 * (v136 >> 1)];
              unint64_t v138 = v74;
              if (v132 != v74)
              {
                memmove(v78, v74, v132 - v74);
                unint64_t v138 = v132;
              }

              BOOL v132 = &v138[8 * v137];
            }
          }

          uint64_t v149 = *((void *)v134 - 1);
          v134 -= 8;
          *((void *)v78 - 1) = v149;
          v78 -= 8;
          unint64_t v133 = *v30;
        }

        unint64_t v150 = *(void **)(a1 + 336);
        *(void *)(a1 + 336) = v74;
        *(void *)(a1 + 344) = v78;
        *(void *)(a1 + 352) = v132;
        *(void *)(a1 + 36sub_1011C5518(qword_1019A41A0, 0) = v80;
        if (v150) {
          operator delete(v150);
        }
        goto LABEL_81;
      }

      double v71 = operator new(0xFF0uLL);
      __int128 v72 = v71;
      if (v69 == v31)
      {
        if (v32 == v70)
        {
          if (v31 == v32) {
            unint64_t v101 = 1LL;
          }
          else {
            unint64_t v101 = (v69 - v32) >> 2;
          }
          __int16 v102 = (char *)sub_1011D4A98(v101);
          __int32 v32 = &v102[8 * ((v101 + 3) >> 2)];
          __int16 v104 = *(uint64_t **)(a1 + 344);
          int v105 = v32;
          uint64_t v106 = *(void *)(a1 + 352) - (void)v104;
          if (v106)
          {
            int v105 = &v32[v106 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v107 = 8 * (v106 >> 3);
            unint64_t v108 = &v102[8 * ((v101 + 3) >> 2)];
            do
            {
              uint64_t v109 = *v104++;
              *(void *)unint64_t v108 = v109;
              v108 += 8;
              v107 -= 8LL;
            }

            while (v107);
          }

          int v110 = *(void **)(a1 + 336);
          *(void *)(a1 + 336) = v102;
          *(void *)(a1 + 344) = v32;
          *(void *)(a1 + 352) = v105;
          *(void *)(a1 + 36sub_1011C5518(qword_1019A41A0, 0) = &v102[8 * v103];
          if (v110)
          {
            operator delete(v110);
            __int32 v32 = *v30;
          }
        }

        *((void *)v32 - 1) = v72;
        double v111 = *(char **)(a1 + 344);
        __int16 v112 = *(char **)(a1 + 352);
        *(void *)(a1 + 344) = v111 - 8;
        uint64_t v113 = *((void *)v111 - 1);
        *(void *)(a1 + 344) = v111;
        if (v112 == *(char **)(a1 + 360))
        {
          uint64_t v114 = (uint64_t)&v111[-*v167];
          if ((unint64_t)v111 <= *v167)
          {
            else {
              unint64_t v151 = (uint64_t)&v112[-*v167] >> 2;
            }
            double v152 = (char *)sub_1011D4A98(v151);
            uint64_t v154 = &v152[8 * (v151 >> 2)];
            uint64_t v155 = *(uint64_t **)(a1 + 344);
            __int16 v112 = v154;
            uint64_t v156 = *(void *)(a1 + 352) - (void)v155;
            if (v156)
            {
              __int16 v112 = &v154[v156 & 0xFFFFFFFFFFFFFFF8LL];
              uint64_t v157 = 8 * (v156 >> 3);
              double v158 = &v152[8 * (v151 >> 2)];
              do
              {
                uint64_t v159 = *v155++;
                *(void *)double v158 = v159;
                v158 += 8;
                v157 -= 8LL;
              }

              while (v157);
            }

            double v160 = *(void **)(a1 + 336);
            *(void *)(a1 + 336) = v152;
            *(void *)(a1 + 344) = v154;
            *(void *)(a1 + 352) = v112;
            *(void *)(a1 + 36sub_1011C5518(qword_1019A41A0, 0) = &v152[8 * v153];
            if (v160)
            {
              operator delete(v160);
              __int16 v112 = *(char **)(a1 + 352);
            }
          }

          else
          {
            uint64_t v115 = v114 >> 3;
            BOOL v43 = v114 >> 3 < -1;
            uint64_t v116 = (v114 >> 3) + 2;
            if (v43) {
              uint64_t v117 = v116;
            }
            else {
              uint64_t v117 = v115 + 1;
            }
            uint64_t v118 = -(v117 >> 1);
            uint64_t v119 = v117 >> 1;
            int v120 = &v111[-8 * v119];
            int64_t v121 = v112 - v111;
            if (v112 != v111)
            {
              memmove(&v111[-8 * v119], v111, v112 - v111);
              double v111 = *v30;
            }

            __int16 v112 = &v120[v121];
            *(void *)(a1 + 344) = &v111[8 * v118];
            *(void *)(a1 + 352) = &v120[v121];
          }
        }

        *(void *)__int16 v112 = v113;
      }

      else
      {
        *(void *)float32x2_t v31 = v71;
      }
    }

    *(void *)(a1 + 352) += 8LL;
LABEL_81:
    __int32 v32 = *(char **)(a1 + 344);
    unint64_t v35 = *(void *)(a1 + 376) + *(void *)(a1 + 368);
LABEL_82:
    uint64_t v94 = *(void *)&v32[8 * (v35 / 0xCC)];
    unint64_t v95 = v35 % 0xCC;
    uint64_t v96 = *(void *)a2;
    uint64_t v97 = v94 + 20 * v95;
    *(float *)(v97 + 8) = a2[2];
    *(void *)uint64_t v97 = v96;
    *(float *)(v97 + 12) = v6;
    *(_DWORD *)(v97 + 16) = -2;
    ++*(void *)(a1 + 376);
    memset(&buf[1], 0, 312);
    *(double *)std::string buf = a5;
    *(float *)&buf[1] = v6;
    int v168 = 3;
    (*(void (**)(uint64_t, int *, void *, uint64_t, uint64_t, void))(*(void *)(a1 + 16) + 152LL))( a1 + 16,  &v168,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    if (*(_BYTE *)(a1 + 384)) {
      BOOL v100 = sub_1011CD644(*(float32x2_t **)(a1 + 312), *(float32x2_t **)(a1 + 320), v167, a1 + 392, v98, v99);
    }
    else {
      BOOL v100 = 0;
    }
    *(_BYTE *)(a1 + 384) = v100;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128LL))(a1, a1 + 400);
    sub_1011CC900(a1);
    return 1LL;
  }

  return result;
}

void sub_1011CD610(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1011CD644(float32x2_t *a1, float32x2_t *a2, void *a3, uint64_t a4, double a5, double a6)
{
  __int128 v184 = 0u;
  __int128 v185 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (a1 == a2)
  {
    __int16 v112 = 0LL;
    unint64_t v180 = 0LL;
    int v181 = 0LL;
    unint64_t v182 = 0LL;
    if (!a3) {
      goto LABEL_201;
    }
    goto LABEL_178;
  }

  float v6 = a2;
  double v175 = a3;
  unint64_t v7 = 0LL;
  unint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  unint64_t v11 = a1;
  do
  {
    uint64_t v12 = v10 - v9;
    if (v10 == v9) {
      uint64_t v13 = 0LL;
    }
    else {
      uint64_t v13 = ((v10 - v9) << 7) - 1;
    }
    unint64_t v14 = v7 + v8;
    if (v13 != v7 + v8) {
      goto LABEL_95;
    }
    if (v8 < 0x400)
    {
      if (v12 >> 3 >= (unint64_t)((uint64_t)(*((void *)&v184 + 1) - (unint64_t)__p[0]) >> 3))
      {
        uint64_t v177 = v12 >> 3;
        else {
          unint64_t v28 = (uint64_t)(*((void *)&v184 + 1) - (unint64_t)__p[0]) >> 2;
        }
        double v29 = (char *)sub_1011D4A98(v28);
        uint64_t v31 = v30;
        __int32 v32 = operator new(0x1000uLL);
        unint64_t v33 = &v29[8 * v177];
        uint64_t v34 = &v29[8 * v31];
        if (v177 == v31)
        {
          uint64_t v35 = 8 * v177;
          if (v12 < 1)
          {
            uint64_t v47 = v32;
            uint64_t v48 = v35 >> 2;
            if (v10 == v9) {
              unint64_t v49 = 1LL;
            }
            else {
              unint64_t v49 = v48;
            }
            double v50 = (char *)sub_1011D4A98(v49);
            unint64_t v33 = &v50[8 * (v49 >> 2)];
            uint64_t v34 = &v50[8 * v51];
            if (v29) {
              operator delete(v29);
            }
            double v29 = v50;
            __int32 v32 = v47;
          }

          else
          {
            uint64_t v36 = v35 >> 3;
            if (v36 >= -1) {
              unint64_t v37 = v36 + 1;
            }
            else {
              unint64_t v37 = v36 + 2;
            }
            v33 -= 8 * (v37 >> 1);
          }
        }

        *(void *)unint64_t v33 = v32;
        uint64_t v10 = v33 + 8;
        for (uint64_t i = (char *)v184; i != __p[1]; i -= 8)
        {
          if (v33 == v29)
          {
            if (v10 >= v34)
            {
              if (v34 == v29) {
                unint64_t v57 = 1LL;
              }
              else {
                unint64_t v57 = (v34 - v29) >> 2;
              }
              uint64_t v58 = (char *)sub_1011D4A98(v57);
              int v60 = v58;
              unint64_t v33 = &v58[(2 * v57 + 6) & 0xFFFFFFFFFFFFFFF8LL];
              uint64_t v62 = v10 - v29;
              BOOL v61 = v10 == v29;
              uint64_t v10 = v33;
              if (!v61)
              {
                uint64_t v10 = &v33[v62 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v63 = 8 * (v62 >> 3);
                int v64 = v33;
                uint64_t v65 = v29;
                do
                {
                  uint64_t v66 = *(void *)v65;
                  v65 += 8;
                  *(void *)int v64 = v66;
                  v64 += 8;
                  v63 -= 8LL;
                }

                while (v63);
              }

              uint64_t v34 = &v58[8 * v59];
              if (v29) {
                operator delete(v29);
              }
              double v29 = v60;
            }

            else
            {
              uint64_t v53 = (v34 - v10) >> 3;
              if (v53 >= -1) {
                uint64_t v54 = v53 + 1;
              }
              else {
                uint64_t v54 = v53 + 2;
              }
              uint64_t v55 = v54 >> 1;
              unint64_t v33 = &v29[8 * (v54 >> 1)];
              uint64_t v56 = v29;
              if (v10 != v29)
              {
                memmove(v33, v29, v10 - v29);
                uint64_t v56 = v10;
              }

              uint64_t v10 = &v56[8 * v55];
            }
          }

          uint64_t v67 = *((void *)i - 1);
          *((void *)v33 - 1) = v67;
          v33 -= 8;
        }

        __int128 v68 = __p[0];
        __p[0] = v29;
        __p[1] = v33;
        *(void *)&__int128 v184 = v10;
        *((void *)&v184 + 1) = v34;
        if (v68) {
          operator delete(v68);
        }
        float v6 = a2;
        goto LABEL_94;
      }

      unint64_t v26 = operator new(0x1000uLL);
      unint64_t v27 = v26;
      if (*((char **)&v184 + 1) == v10)
      {
        if (v9 == __p[0])
        {
          if (v10 == v9) {
            unint64_t v69 = 1LL;
          }
          else {
            unint64_t v69 = (uint64_t)(*((void *)&v184 + 1) - (void)v9) >> 2;
          }
          __int16 v70 = (char *)sub_1011D4A98(v69);
          uint64_t v9 = &v70[(2 * v69 + 6) & 0xFFFFFFFFFFFFFFF8LL];
          __int128 v72 = (uint64_t *)__p[1];
          unint64_t v73 = v9;
          uint64_t v74 = v184 - (unint64_t)__p[1];
          float v6 = a2;
          if ((void *)v184 != __p[1])
          {
            unint64_t v73 = &v9[v74 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v75 = 8 * (v74 >> 3);
            uint64_t v76 = v9;
            do
            {
              uint64_t v77 = *v72++;
              *(void *)uint64_t v76 = v77;
              v76 += 8;
              v75 -= 8LL;
            }

            while (v75);
          }

          __int128 v78 = __p[0];
          __p[0] = v70;
          __p[1] = v9;
          *(void *)&__int128 v184 = v73;
          *((void *)&v184 + 1) = &v70[8 * v71];
          if (v78) {
            operator delete(v78);
          }
        }

        else
        {
          float v6 = a2;
        }

        *((void *)v9 - 1) = v27;
        uint64_t v79 = (char *)v184;
        uint64_t v80 = *((void *)__p[1] - 1);
        if ((void)v184 == *((void *)&v184 + 1))
        {
          int64_t v81 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            else {
              unint64_t v87 = (uint64_t)(v184 - (unint64_t)__p[0]) >> 2;
            }
            __int128 v88 = (char *)sub_1011D4A98(v87);
            uint64_t v90 = (uint64_t *)__p[1];
            uint64_t v79 = &v88[8 * (v87 >> 2)];
            uint64_t v91 = v184 - (unint64_t)__p[1];
            float v6 = a2;
            if ((void *)v184 != __p[1])
            {
              uint64_t v79 = &v88[8 * (v87 >> 2) + (v91 & 0xFFFFFFFFFFFFFFF8LL)];
              uint64_t v92 = 8 * (v91 >> 3);
              unint64_t v93 = &v88[8 * (v87 >> 2)];
              do
              {
                uint64_t v94 = *v90++;
                *(void *)unint64_t v93 = v94;
                v93 += 8;
                v92 -= 8LL;
              }

              while (v92);
            }

            unint64_t v95 = __p[0];
            __p[0] = v88;
            __p[1] = &v88[8 * (v87 >> 2)];
            *(void *)&__int128 v184 = v79;
            *((void *)&v184 + 1) = &v88[8 * v89];
            if (v95) {
              operator delete(v95);
            }
          }

          else
          {
            uint64_t v82 = v81 >> 3;
            BOOL v20 = v81 >> 3 < -1;
            uint64_t v83 = (v81 >> 3) + 2;
            if (v20) {
              unint64_t v84 = v83;
            }
            else {
              unint64_t v84 = v82 + 1;
            }
            unint64_t v85 = v84 >> 1;
            uint64_t v86 = (char *)__p[1] - 8 * v85;
            uint64_t v79 = &v86[v184 - (unint64_t)__p[1]];
            __p[1] = v86;
            *(void *)&__int128 v184 = v79;
          }
        }

        *(void *)uint64_t v79 = v80;
        uint64_t v10 = (char *)(v184 + 8);
        *(void *)&__int128 v184 = v184 + 8;
        goto LABEL_94;
      }

      *(void *)uint64_t v10 = v26;
    }

    else
    {
      *(void *)&__int128 v185 = v8 - 1024;
      uint64_t v17 = *(void *)v9;
      int v15 = v9 + 8;
      uint64_t v16 = v17;
      __p[1] = v15;
      if (v10 == *((char **)&v184 + 1))
      {
        uint64_t v18 = v15 - (char *)__p[0];
        if (v15 <= __p[0])
        {
          if (v10 == __p[0]) {
            unint64_t v38 = 1LL;
          }
          else {
            unint64_t v38 = (v10 - (char *)__p[0]) >> 2;
          }
          uint64_t v39 = (char *)sub_1011D4A98(v38);
          uint64_t v41 = (uint64_t *)__p[1];
          uint64_t v10 = &v39[8 * (v38 >> 2)];
          uint64_t v42 = v184 - (unint64_t)__p[1];
          if ((void *)v184 != __p[1])
          {
            uint64_t v10 = &v39[8 * (v38 >> 2) + (v42 & 0xFFFFFFFFFFFFFFF8LL)];
            uint64_t v43 = 8 * (v42 >> 3);
            uint64_t v44 = &v39[8 * (v38 >> 2)];
            do
            {
              uint64_t v45 = *v41++;
              *(void *)uint64_t v44 = v45;
              v44 += 8;
              v43 -= 8LL;
            }

            while (v43);
          }

          uint64_t v46 = __p[0];
          __p[0] = v39;
          __p[1] = &v39[8 * (v38 >> 2)];
          *(void *)&__int128 v184 = v10;
          *((void *)&v184 + 1) = &v39[8 * v40];
          if (v46) {
            operator delete(v46);
          }
        }

        else
        {
          uint64_t v19 = v18 >> 3;
          BOOL v20 = v18 >> 3 < -1;
          uint64_t v21 = (v18 >> 3) + 2;
          if (v20) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = v19 + 1;
          }
          int v23 = &v15[-8 * (v22 >> 1)];
          int64_t v24 = v10 - v15;
          if (v10 != v15)
          {
            memmove(&v15[-8 * (v22 >> 1)], v15, v10 - v15);
            uint64_t v10 = v15;
          }

          float v25 = &v10[-8 * (v22 >> 1)];
          uint64_t v10 = &v23[v24];
          __p[1] = v25;
          *(void *)&__int128 v184 = &v23[v24];
        }
      }

      *(void *)uint64_t v10 = v16;
    }

    uint64_t v10 = (char *)(v184 + 8);
    *(void *)&__int128 v184 = v184 + 8;
    float v6 = a2;
LABEL_94:
    unint64_t v7 = *((void *)&v185 + 1);
    unint64_t v8 = v185;
    uint64_t v9 = (char *)__p[1];
    unint64_t v14 = v185 + *((void *)&v185 + 1);
LABEL_95:
    *(_DWORD *)(*(void *)&v9[(v14 >> 7) & 0x1FFFFFFFFFFFFF8LL] + 4 * (v14 & 0x3FF)) = v11[2].i32[0];
    *((void *)&v185 + 1) = ++v7;
    if (v11 == v6) {
      break;
    }
    __int32 v96 = v11[2].i32[0];
    unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v11) >> 2);
    do
    {
      unint64_t v98 = v97 >> 1;
      uint64_t v99 = (uint64_t)v11 + 20 * (v97 >> 1);
      int v100 = *(_DWORD *)(v99 + 16);
      unint64_t v101 = (float32x2_t *)(v99 + 20);
      v97 += ~(v97 >> 1);
      if (v100 <= v96) {
        unint64_t v11 = v101;
      }
      else {
        unint64_t v97 = v98;
      }
    }

    while (v97);
  }

  while (v11 != v6);
  __int16 v102 = &v9[8 * (v8 >> 10)];
  uint64_t v103 = *(char **)v102;
  __int16 v104 = (int *)(*(void *)v102 + 4 * (v8 & 0x3FF));
  uint64_t v105 = *(void *)&v9[((v8 + v7) >> 7) & 0x1FFFFFFFFFFFFF8LL] + 4 * ((v8 + v7) & 0x3FF);
  uint64_t v106 = a1;
  if (v104 != (int *)v105)
  {
    do
    {
      uint64_t v107 = v104 + 1;
      if ((char *)(v104 + 1) - v103 == 4096)
      {
        unint64_t v108 = (char *)*((void *)v102 + 1);
        v102 += 8;
        uint64_t v103 = v108;
        uint64_t v107 = (int *)v108;
      }

      int v109 = *v104;
      __int16 v104 = v107;
    }

    while (*v107 >= v109);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    int v110 = (os_log_s *)off_101934598;
    p_vtable = (void **)&OBJC_INSTANCE_METHODS_TRANSITPbTransitMacTile;
    __int16 v112 = "";
    uint64_t v113 = "std::is_sorted(rounds.begin(), rounds.end())";
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)__int16 v193 = 0;
      *(_WORD *)&v193[4] = 2082;
      *(void *)&v193[6] = "";
      *(_WORD *)&v193[14] = 2082;
      *(void *)&v193[16] = "assert";
      *(_WORD *)&v193[24] = 2081;
      *(void *)&v193[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v114 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)__int16 v193 = 0;
      *(_WORD *)&v193[4] = 2082;
      *(void *)&v193[6] = "";
      *(_WORD *)&v193[14] = 2082;
      *(void *)&v193[16] = "assert";
      *(_WORD *)&v193[24] = 2081;
      *(void *)&v193[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v114,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v115 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)__int16 v193 = 0;
      *(_WORD *)&v193[4] = 2082;
      *(void *)&v193[6] = "";
      *(_WORD *)&v193[14] = 2082;
      *(void *)&v193[16] = "assert";
      *(_WORD *)&v193[24] = 2081;
      *(void *)&v193[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  728,  "computeIntercept");
    __break(1u);
LABEL_216:
    dispatch_once(&qword_101934590, &stru_1018A29F8);
LABEL_211:
    int v168 = p_vtable[179];
    double v169 = *(float *)(a4 + 44);
    double v170 = *(float *)(a4 + 48);
    double v171 = *(float *)(a4 + 52);
    int v186 = 134218496;
    double v187 = v169;
    __int16 v188 = 2048;
    double v189 = v170;
    __int16 v190 = 2048;
    double v191 = v171;
    LODWORD(v173) = 32;
    __int16 v172 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v168,  1LL,  "ComputeIntercept: x,%f,y,%f,z,%f",  COERCE_DOUBLE(&v186),  v173,  v174);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLGyroCalibrationDatabaseLocalMultiRun::computeIntercept(const std::vector<BiasTemperatureRound>::cons t_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLM otionTypeGyroBiasFit &)",  "%s\n",  v172);
    goto LABEL_207;
  }

void sub_1011CE4D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1011D6008((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1011CE55C(uint64_t a1, float *a2, float *a3, __n128 a4, double a5)
{
  return sub_1011CCA60(a1 - 16, a2, a3, a4, a5);
}

BOOL sub_1011CE564(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 384);
  if (*(_BYTE *)(a1 + 384))
  {
    memcpy(__dst, (const void *)(a1 + 392), 0x140uLL);
    sub_1011CE5AC((double *)a1);
  }

  return v2 != 0;
}

void sub_1011CE5AC(double *a1)
{
  if (*((_DWORD *)a1 + 98) == 1)
  {
    uint64_t v1 = a1;
    if (qword_101934590 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    unint64_t v14 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)uint64_t v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      *(_WORD *)&v30[14] = 2082;
      *(void *)&v30[16] = "assert";
      *(_WORD *)&v30[24] = 2081;
      *(void *)&v30[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v15 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)uint64_t v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      *(_WORD *)&v30[14] = 2082;
      *(void *)&v30[16] = "assert";
      *(_WORD *)&v30[24] = 2081;
      *(void *)&v30[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v1 = (double *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)uint64_t v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      *(_WORD *)&v30[14] = 2082;
      *(void *)&v30[16] = "assert";
      *(_WORD *)&v30[24] = 2081;
      *(void *)&v30[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  282,  "logFit");
    __break(1u);
  }

  dispatch_once(&qword_101934590, &stru_1018A29F8);
LABEL_3:
  int v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
  {
    double v3 = *((float *)v1 + 106);
    double v4 = *((float *)v1 + 107);
    double v5 = *((float *)v1 + 108);
    double v6 = *((float *)v1 + 109);
    double v7 = *((float *)v1 + 110);
    double v8 = *((float *)v1 + 111);
    uint64_t v9 = *((void *)v1 + 50);
    *(_DWORD *)std::string buf = 134219520;
    *(double *)uint64_t v30 = v3;
    *(_WORD *)&v30[8] = 2048;
    *(double *)&v30[10] = v4;
    *(_WORD *)&v30[18] = 2048;
    *(double *)&v30[20] = v5;
    *(_WORD *)&v30[28] = 2048;
    *(double *)&v30[30] = v6;
    __int16 v31 = 2048;
    double v32 = v7;
    __int16 v33 = 2048;
    double v34 = v8;
    __int16 v35 = 2048;
    uint64_t v36 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f",  buf,  0x48u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    double v16 = *((float *)v1 + 106);
    double v17 = *((float *)v1 + 107);
    double v18 = *((float *)v1 + 108);
    double v19 = *((float *)v1 + 109);
    double v20 = *((float *)v1 + 110);
    double v21 = *((float *)v1 + 111);
    uint64_t v22 = *((void *)v1 + 50);
    *(_DWORD *)uint64_t v40 = 134219520;
    *(double *)&v40[4] = v16;
    *(_WORD *)&v40[12] = 2048;
    *(double *)&v40[14] = v17;
    *(_WORD *)&v40[22] = 2048;
    *(double *)&v40[24] = v18;
    *(_WORD *)&v40[32] = 2048;
    *(double *)&v40[34] = v19;
    *(_WORD *)&v40[42] = 2048;
    double v41 = v20;
    __int16 v42 = 2048;
    double v43 = v21;
    __int16 v44 = 2048;
    uint64_t v45 = v22;
    LODWORD(v24) = 72;
    int v23 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f",  COERCE_DOUBLE(v40),  v24,  v25,  v26,  __src,  v28);
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLGyroCalibrationDatabaseLocalMultiRun::logFit() const", "%s\n", v23);
  }

  if (*((_BYTE *)v1 + 712))
  {
    *(void *)uint64_t v40 = &off_101857958;
    *(void *)&v40[8] = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v40[20] = *(_OWORD *)(v1 + 53);
    *(double *)&v40[36] = v1[55];
    float v10 = v1[50];
    *(float *)&double v41 = v10;
    uint64_t v11 = sub_100E00E14();
    sub_100E022E0(v11, (uint64_t)v40);
    sub_101125260(buf);
    sub_10113A6E0(buf);
    v39 |= 1u;
    uint64_t v37 = *(void *)&v40[8];
    double __src = v1[53];
    LODWORD(v28) = *((_DWORD *)v1 + 108);
    sub_10004C5F8(v38 + 32, (char *)&__src, (uint64_t)&v28 + 4, 3uLL);
    double __src = *(double *)((char *)v1 + 436);
    LODWORD(v28) = *((_DWORD *)v1 + 111);
    sub_10004C5F8(v38 + 8, (char *)&__src, (uint64_t)&v28 + 4, 3uLL);
    uint64_t v12 = v38;
    float v13 = v1[50];
    v38[60] |= 1u;
    *((float *)v12 + 14) = v13;
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_1018A2A18);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
    }
    sub_101127D00((PB::Base *)buf);
  }

void sub_1011CEB5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_1011CEB84(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 368);
  if (*(_BYTE *)(a1 + 368))
  {
    double v3 = (double *)(a1 - 16);
    memcpy(__dst, (const void *)(a1 + 376), 0x140uLL);
    sub_1011CE5AC(v3);
  }

  return v2 != 0;
}

BOOL sub_1011CEBCC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 270);
  if (*(_BYTE *)(a1 + 270))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    int v2 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Wipe database during a build.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
      v15[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Wipe database during a build.",  v15,  2);
      double v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::wipeDatabase()",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }

    return v1 == 0;
  }

  *(void *)(a1 + 32sub_1011C5518(qword_1019A41A0, 0) = *(void *)(a1 + 312);
  double v6 = *(void ***)(a1 + 344);
  uint64_t v7 = *(void *)(a1 + 352);
  *(void *)(a1 + 376) = 0LL;
  unint64_t v8 = v7 - (void)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      uint64_t v9 = *(void *)(a1 + 352);
      double v6 = (void **)(*(void *)(a1 + 344) + 8LL);
      *(void *)(a1 + 344) = v6;
      unint64_t v8 = v9 - (void)v6;
    }

    while (v8 > 0x10);
  }

  if (v8 >> 3 == 1)
  {
    uint64_t v10 = 102LL;
  }

  else
  {
    if (v8 >> 3 != 2) {
      goto LABEL_18;
    }
    uint64_t v10 = 204LL;
  }

  *(void *)(a1 + 368) = v10;
LABEL_18:
  *(_BYTE *)(a1 + 384) = 0;
  sub_1003C0D54(a1 + 128, "DELETE FROM GyroMultiCalibration", buf);
  uint64_t v11 = *(void *)buf;
  uint64_t v12 = (sqlite3_stmt *)sub_100019240(*(uint64_t *)buf);
  sub_1003BB2BC(a1 + 128, v12);
  else {
    uint64_t v13 = *(void *)(a1 + 216);
  }
  sub_1003C1EC0(a1 + 128, v13);
  sub_1011CBF54(a1);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return v1 == 0;
}

void sub_1011CEE34(_Unwind_Exception *exception_object)
{
}

BOOL sub_1011CEE5C(uint64_t a1)
{
  return sub_1011CEBCC(a1 - 16);
}

uint64_t sub_1011CEE64(void *a1)
{
  unint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v13 = (uint64_t *)&v14;
  uint64_t v2 = a1[39];
  uint64_t v3 = a1[40];
  while (v2 != v3)
  {
    sub_1011D4ACC(&v13, (float *)(v2 + 12), (_DWORD *)(v2 + 12));
    v2 += 20LL;
  }

  uint64_t v4 = a1[43];
  if (a1[44] != v4)
  {
    unint64_t v5 = a1[46];
    uint64_t v6 = a1[47];
    uint64_t v7 = (void *)(v4 + 8 * (v5 / 0xCC));
    unint64_t v8 = *v7 + 20 * (v5 % 0xCC);
    unint64_t v9 = *(void *)(v4 + 8 * ((v6 + v5) / 0xCC)) + 20 * ((v6 + v5) % 0xCC);
    while (v8 != v9)
    {
      sub_1011D4ACC(&v13, (float *)(v8 + 12), (_DWORD *)(v8 + 12));
      v8 += 20LL;
      if (v8 - *v7 == 4080)
      {
        unint64_t v10 = v7[1];
        ++v7;
        unint64_t v8 = v10;
      }
    }
  }

  uint64_t v11 = v15;
  sub_100008390((uint64_t)&v13, v14);
  return v11;
}

void sub_1011CEF64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1011CEF80(uint64_t a1)
{
  return sub_1011CEE64((void *)(a1 - 16));
}

uint64_t sub_1011CEF88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3224);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
  return sub_1003954A0(a1 + 16);
}

uint64_t sub_1011CEFBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3208);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
  return sub_1003954A0(a1);
}

uint64_t sub_1011CEFF0(uint64_t a1)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  uint64_t v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalMultiRun::startFactoryGYTT()",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  uint64_t v3 = operator new(0x160uLL);
  sub_1011F6E44((uint64_t)v3, *(void **)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 3224);
  *(void *)(a1 + 3224) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    uint64_t v3 = *(void **)(a1 + 3224);
  }

  return (*(uint64_t (**)(void *))(*(void *)v3 + 248LL))(v3);
}

void sub_1011CF1C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1011CF1DC(uint64_t a1)
{
  return sub_1011CEFF0(a1 - 16);
}

unint64_t sub_1011CF1E4()
{
  return ((unint64_t)sub_1004F97F4() >> 13) & 1;
}

unint64_t sub_1011CF1FC()
{
  return ((unint64_t)sub_1004F97F4() >> 13) & 1;
}

uint64_t sub_1011CF214(uint64_t a1, void *a2)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  uint64_t v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::getLastMiniCalibration(CFAbsoluteTime &) const",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  *a2 = *(void *)(a1 + 3240);
  return 1LL;
}

uint64_t sub_1011CF3B4(uint64_t a1, void *a2)
{
  return 1LL;
}

void sub_1011CF3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    sub_10111D6A8(v4, a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

id *sub_1011CF408(unsigned int a1, uint64_t a2)
{
  if (a1 > 2) {
    uint64_t v4 = @"com.apple.CoreMotion.GyroCalibration.UnknownCal";
  }
  else {
    uint64_t v4 = *(&off_1018A2AB0 + (int)a1);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100518538(&v7, v4);
  sub_10051860C(&v7, (uint64_t)@"Intercept.X", (uint64_t)(*(float *)(a2 + 44) * 1000000.0));
  sub_10051860C(&v7, (uint64_t)@"Intercept.Y", (uint64_t)(*(float *)(a2 + 48) * 1000000.0));
  sub_10051860C(&v7, (uint64_t)@"Intercept.Z", (uint64_t)(*(float *)(a2 + 52) * 1000000.0));
  sub_10051860C(&v7, (uint64_t)@"Slope.X", (uint64_t)(*(float *)(a2 + 32) * 1000000.0));
  sub_10051860C(&v7, (uint64_t)@"Slope.Y", (uint64_t)(*(float *)(a2 + 36) * 1000000.0));
  sub_10051860C(&v7, (uint64_t)@"Slope.Z", (uint64_t)(*(float *)(a2 + 40) * 1000000.0));
  if (a1 == 1) {
    sub_10051860C(&v7, (uint64_t)@"TimeSinceLastCal", (uint64_t)(Current - *(double *)(a2 + 8)));
  }
  return sub_100518594(&v7);
}

void sub_1011CF568(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1011CF57C(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 128;
  sub_1003C0454(a1 + 128);
  if ((a2 & 0x80000000) == 0 && !*(_BYTE *)(a1 + 265))
  {
    sub_1003C0D54(v4, "DELETE FROM GyroMultiCalibration WHERE Round <= ? AND Round <> ?", &Current);
    uint64_t v5 = Current;
    uint64_t v6 = (sqlite3_stmt *)sub_100019240(Current);
    sub_1003C28BC(v6, 1, a2);
    id v7 = (sqlite3_stmt *)sub_100019240(v5);
    sub_1003C28BC(v7, 2, -1);
    unint64_t v8 = (sqlite3_stmt *)sub_100019240(v5);
    sub_1003BB2BC(v4, v8);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  v42[0] = *(_OWORD *)&off_1018A27F0;
  v42[1] = *(_OWORD *)&off_1018A2800;
  v42[2] = off_1018A2810;
  sub_1003C0C80(v4, "GyroMultiCalibration", (const char **)v42, 0, &Current);
  uint64_t v9 = Current;
  uint64_t v10 = *(void *)(a1 + 280);
  uint64_t v11 = *(void *)(a1 + 288);
  while (v10 != v11)
  {
    uint64_t v12 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003C28BC(v12, 1, *(_DWORD *)(v10 + 16));
    uint64_t v13 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003B7480(v13, 2, *(float *)(v10 + 12));
    unint64_t v14 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003B7480(v14, 3, *(float *)v10);
    uint64_t v15 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003B7480(v15, 4, *(float *)(v10 + 4));
    double v16 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003B7480(v16, 5, *(float *)(v10 + 8));
    double v17 = (sqlite3_stmt *)sub_100019240(v9);
    sub_1003BB2BC(v4, v17);
    v10 += 20LL;
  }

  sub_1003C05BC(v4);
  else {
    uint64_t v18 = *(void *)(a1 + 216);
  }
  uint64_t result = sub_1003C1EC0(v4, v18);
  if (*(void *)(a1 + 280) != *(void *)(a1 + 288))
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v38 = 0u;
    uint64_t v41 = 0LL;
    __int128 v37 = 0u;
    __int128 v36 = 0u;
    __int128 v35 = 0u;
    __int128 v34 = 0u;
    __int128 v33 = 0u;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    __int128 v27 = 0u;
    __int128 v26 = 0u;
    __int128 v25 = 0u;
    __int128 v24 = 0u;
    __int128 v23 = 0u;
    __int128 v22 = 0u;
    uint64_t Current = CFAbsoluteTimeGetCurrent();
    int v20 = 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)(a1 + 16)
                                                                                            + 152LL))( a1 + 16,  &v20,  &Current,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  if (v9) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return result;
}

void sub_1011CF80C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011CF844(uint64_t *a1, int a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v3 = a1[40];
    uint64_t v4 = (char *)sub_1011D58C4(a1[39], v3, a2);
    if (v4 != v5)
    {
      uint64_t v6 = v4;
      size_t v7 = v3 - (void)v5;
      if (v7) {
        memmove(v4, v5, v7);
      }
      v2[40] = (uint64_t)&v6[v7];
    }
  }

  unint64_t v8 = (__n128 *)v2[35];
  uint64_t v9 = (__n128 *)v2[36];
  unint64_t v10 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)v8) >> 2));
  if (v9 == v8) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_1011D4B84(v8, v9, v11, 1);
  p_vtable = (void **)v2[35];
  uint64_t v12 = (void **)v2[36];
  if (p_vtable == v12)
  {
LABEL_23:
    unint64_t v14 = (char *)v2[39];
    uint64_t v15 = (char *)v2[40];
    goto LABEL_25;
  }

  unint64_t v14 = (char *)v2[39];
  uint64_t v15 = (char *)v2[40];
  if (v14 != v15)
  {
    if (*((_DWORD *)v15 - 1) < *((_DWORD *)p_vtable + 4)) {
      goto LABEL_25;
    }
    p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    double v16 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      unint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    double v17 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      unint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v2 = (uint64_t *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      unint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  448,  "updatePoints");
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v15 = (char *)v2[39];
LABEL_25:
  uint64_t v18 = ((char *)v12 - (char *)p_vtable) / 20;
  uint64_t v19 = (v15 - v14) / 20;
  int v20 = &v14[20 * v19];
  uint64_t v21 = v2[41];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v21 - (uint64_t)v15) >> 2)) < v18)
  {
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (uint64_t)v14) >> 2);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= v19 + v18) {
      uint64_t v23 = v19 + v18;
    }
    if (v22 >= 0x666666666666666LL) {
      unint64_t v24 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      unint64_t v24 = (unint64_t)sub_1011D49A4(v24);
    }
    else {
      uint64_t v25 = 0LL;
    }
    unint64_t v33 = v24 + 20 * v19;
    __int128 v34 = (char *)(v33 + 20 * v18);
    uint64_t v35 = 20 * v18;
    unint64_t v36 = v33;
    do
    {
      __int128 v37 = *(_OWORD *)p_vtable;
      *(_DWORD *)(v36 + 16) = *((_DWORD *)p_vtable + 4);
      *(_OWORD *)unint64_t v36 = v37;
      v36 += 20LL;
      p_vtable = (void **)((char *)p_vtable + 20);
      v35 -= 20LL;
    }

    while (v35);
    __int128 v38 = (char *)v2[39];
    if (v38 == v20)
    {
      unint64_t v41 = v24 + 20 * v19;
    }

    else
    {
      __int128 v39 = v20;
      do
      {
        __int128 v40 = *(_OWORD *)(v39 - 20);
        unint64_t v41 = v33 - 20;
        *(_DWORD *)(v33 - 4) = *((_DWORD *)v39 - 1);
        *(_OWORD *)(v33 - 2sub_1011C5518(qword_1019A41A0, 0) = v40;
        v39 -= 20;
        v33 -= 20LL;
      }

      while (v39 != v38);
    }

    unint64_t v42 = v24 + 20 * v25;
    double v43 = (_BYTE *)v2[40];
    uint64_t v44 = v43 - v20;
    if (v43 != v20) {
      memmove(v34, v20, v43 - v20);
    }
    uint64_t v45 = (void *)v2[39];
    v2[39] = v41;
    v2[40] = (uint64_t)&v34[v44];
    v2[41] = v42;
    if (v45) {
      operator delete(v45);
    }
    goto LABEL_60;
  }

  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v15 - v20) >> 2)) >= v18)
  {
    __int128 v26 = (void **)((char *)p_vtable + 20 * v18);
    __int128 v28 = v15;
LABEL_41:
    __int128 v29 = &v20[20 * v18];
    unint64_t v30 = (unint64_t)&v28[-20 * v18];
    __int128 v31 = v28;
    if (v30 < (unint64_t)v15)
    {
      __int128 v31 = v28;
      do
      {
        __int128 v32 = *(_OWORD *)v30;
        *((_DWORD *)v31 + 4) = *(_DWORD *)(v30 + 16);
        *(_OWORD *)__int128 v31 = v32;
        v31 += 20;
        v30 += 20LL;
      }

      while (v30 < (unint64_t)v15);
    }

    v2[40] = (uint64_t)v31;
    if (v28 != v29) {
      memmove(&v20[20 * v18], v20, v28 - v29);
    }
    if (v26 != p_vtable) {
      memmove(v20, p_vtable, (char *)v26 - (char *)p_vtable);
    }
    goto LABEL_60;
  }

  __int128 v26 = (void **)((char *)p_vtable + 4 * ((v15 - v20) >> 2));
  int64_t v27 = (char *)v12 - (char *)v26;
  if (v12 != v26) {
    memmove(v15, (char *)p_vtable + 4 * ((v15 - v20) >> 2), (char *)v12 - (char *)v26);
  }
  __int128 v28 = &v15[v27];
  v2[40] = (uint64_t)&v15[v27];
  if (v15 - v20 >= 1) {
    goto LABEL_41;
  }
LABEL_60:
  v2[36] = v2[35];
  *((_DWORD *)v2 + 76) = 0;
}

uint64_t sub_1011CFDB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v1 == v2) {
    return 0LL;
  }
  LODWORD(result) = 0;
  do
  {
    int v4 = *(_DWORD *)(v1 + 16);
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v1) >> 2);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = v1 + 20 * (v5 >> 1);
      int v8 = *(_DWORD *)(v7 + 16);
      uint64_t v9 = v7 + 20;
      v5 += ~(v5 >> 1);
      if (v8 <= v4) {
        uint64_t v1 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }

    while (v5);
    uint64_t result = result + (v4 >= 0);
  }

  while (v1 != v2);
  return result;
}

uint64_t sub_1011CFE2C(uint64_t a1)
{
  return sub_1011CFDB8(a1 - 16);
}

uint64_t sub_1011CFE34(uint64_t a1)
{
  uint64_t result = sub_1003B747C(a1, "GyroMultiCalibration");
  if ((_DWORD)result)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    uint64_t v3 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dropping GyroMultiCalibration.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
      v5[0] = 0;
      int v4 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Dropping GyroMultiCalibration.",  v5,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLGyroCalibrationDatabaseLocalMultiRun::dropTableIfPresent(CLSqliteDatabase &)",  "%s\n",  v4);
    }

    return sub_1003C0200(a1, "GyroMultiCalibration");
  }

  return result;
}

void sub_1011CFFE4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 270))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    uint64_t v12 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      int64_t v27 = "assert";
      __int16 v28 = 2081;
      __int128 v29 = "!fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v13 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      int64_t v27 = "assert";
      __int16 v28 = 2081;
      __int128 v29 = "!fBuilding";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    unint64_t v14 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      int64_t v27 = "assert";
      __int16 v28 = 2081;
      __int128 v29 = "!fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  486,  "beginRun");
    goto LABEL_45;
  }

  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  *(_DWORD *)(a1 + 304) = 0;
  uint64_t v2 = *(void ***)(a1 + 344);
  uint64_t v3 = *(void *)(a1 + 352);
  *(void *)(a1 + 376) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 352);
      uint64_t v2 = (void **)(*(void *)(a1 + 344) + 8LL);
      *(void *)(a1 + 344) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 102LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 204LL;
  }

  *(void *)(a1 + 368) = v6;
LABEL_9:
  *(_BYTE *)(a1 + 27sub_1011C5518(qword_1019A41A0, 0) = 1;
  uint64_t v7 = *(void *)(a1 + 320);
  if (*(void *)(a1 + 312) != v7)
  {
    int v8 = *(_DWORD *)(v7 - 4);
    if (v8 > -2)
    {
      int v9 = v8 + 1;
      goto LABEL_13;
    }

    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    uint64_t v18 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      int64_t v27 = "assert";
      __int16 v28 = 2081;
      __int128 v29 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v19 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      int64_t v27 = "assert";
      __int16 v28 = 2081;
      __int128 v29 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v20 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2082;
      int64_t v27 = "assert";
      __int16 v28 = 2081;
      __int128 v29 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  493,  "beginRun");
LABEL_45:
    __break(1u);
  }

  int v9 = 0;
LABEL_13:
  *(_DWORD *)(a1 + 272) = v9;
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  unint64_t v10 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    int v11 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)std::string buf = 67109120;
    int v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fNextRound,%d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    int v15 = *(_DWORD *)(a1 + 272);
    v21[0] = 67109120;
    v21[1] = v15;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "fNextRound,%d",  v21);
    double v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalMultiRun::beginRun()",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

uint64_t sub_1011D0684(uint64_t result)
{
  if (!*(_BYTE *)(result + 270))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    uint64_t v1 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      int v9 = "assert";
      __int16 v10 = 2081;
      int v11 = "fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v2 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      int v9 = "assert";
      __int16 v10 = 2081;
      int v11 = "fBuilding";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v3 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      int v9 = "assert";
      __int16 v10 = 2081;
      int v11 = "fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  505,  "abortRun");
    __break(1u);
  }

  *(void *)(result + 288) = *(void *)(result + 280);
  *(_DWORD *)(result + 304) = 0;
  *(_BYTE *)(result + 27sub_1011C5518(qword_1019A41A0, 0) = 0;
  *(_DWORD *)(result + 272) = -2;
  return result;
}

uint64_t sub_1011D0904(float32x2_t **a1)
{
  if (!*((_BYTE *)a1 + 270))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    unint64_t v22 = (os_log_s *)off_101934598;
    p_vtable = (void **)"";
    int v9 = "fBuilding";
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v35 = 0;
      __int16 v36 = 2082;
      *(void *)__int128 v37 = "";
      *(_WORD *)&v37[8] = 2082;
      __int128 v38 = "assert";
      __int16 v39 = 2081;
      __int128 v40 = "fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v23 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v35 = 0;
      __int16 v36 = 2082;
      *(void *)__int128 v37 = "";
      *(_WORD *)&v37[8] = 2082;
      __int128 v38 = "assert";
      __int16 v39 = 2081;
      __int128 v40 = "fBuilding";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    uint64_t v1 = (float32x2_t **)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v35 = 0;
      __int16 v36 = 2082;
      *(void *)__int128 v37 = "";
      *(_WORD *)&v37[8] = 2082;
      __int128 v38 = "assert";
      __int16 v39 = 2081;
      __int128 v40 = "fBuilding";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  515,  "endRun");
    goto LABEL_37;
  }

  uint64_t v1 = a1;
  uint64_t v2 = v1[39];
  uint64_t v3 = v1[40];
  if (v3 == v2) {
    goto LABEL_11;
  }
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v3 - (char *)v2) >> 2);
  do
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (uint64_t)v2 + 20 * (v4 >> 1);
    int v7 = *(_DWORD *)(v6 + 16);
    __int16 v8 = (float32x2_t *)(v6 + 20);
    v4 += ~(v4 >> 1);
    if (v7 < 0) {
      uint64_t v2 = v8;
    }
    else {
      unint64_t v4 = v5;
    }
  }

  while (v4);
  if (v2 == v3) {
LABEL_11:
  }
    LODWORD(v9) = -1;
  else {
    LODWORD(v9) = v2[2].i32[0];
  }
  p_vtable = &OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934590 != -1) {
LABEL_37:
  }
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  int v11 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    int v12 = ((uint64_t (*)(float32x2_t **))(*v1)[17])(v1);
    *(_DWORD *)std::string buf = 67109632;
    int v35 = v12;
    __int16 v36 = 1024;
    *(_DWORD *)__int128 v37 = 6;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = (_DWORD)v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    __int16 v24 = off_101934598;
    int v25 = ((uint64_t (*)(float32x2_t **))(*v1)[17])(v1);
    v29[0] = 67109632;
    v29[1] = v25;
    __int16 v30 = 1024;
    int v31 = 6;
    __int16 v32 = 1024;
    int v33 = (int)v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  1LL,  "nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d",  v29,  20,  v28);
    int64_t v27 = (uint8_t *)v26;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::endRun()", "%s\n", v26);
    if (v27 != buf) {
      free(v27);
    }
  }

  sub_1011CF57C((uint64_t)v1, (int)v9);
  sub_1011CF844((uint64_t *)v1, (int)v9);
  uint64_t v13 = v1[39];
  unint64_t v14 = v1[40];
  if (v13 != v14 && v13[2].i32[0] == -1)
  {
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v14 - (char *)v13) >> 2);
    double v16 = v1[39];
    do
    {
      unint64_t v17 = v15 >> 1;
      uint64_t v18 = (char *)v16 + 20 * (v15 >> 1);
      int v19 = *((_DWORD *)v18 + 4);
      int v20 = (float32x2_t *)(v18 + 20);
      v15 += ~(v15 >> 1);
      if (v19 < 0) {
        double v16 = v20;
      }
      else {
        unint64_t v15 = v17;
      }
    }

    while (v15);
  }

  sub_1011CF408(1u, (uint64_t)(v1 + 49));
  *((_BYTE *)v1 + 384) = sub_1011CC3B0(v1[39], v1[40], v1 + 42, (uint64_t)(v1 + 49));
  ((void (*)(float32x2_t **, float32x2_t **))(*v1)[16])(v1, v1 + 50);
  sub_1011CF408(2u, (uint64_t)(v1 + 49));
  *((_BYTE *)v1 + 27sub_1011C5518(qword_1019A41A0, 0) = 0;
  *((_DWORD *)v1 + 68) = -2;
  return sub_1011CC900((uint64_t)v1);
}

uint64_t sub_1011D0E64(double *a1, double a2)
{
  a1[405] = a2;
  (*(void (**)(double *, double *))(*(void *)a1 + 128LL))(a1, a1 + 50);
  return sub_1011CC900((uint64_t)a1);
}

BOOL sub_1011D0E98(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(v28[0]) = 1;
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 384)) {
      return 0LL;
    }
    int v9 = *(float32x2_t **)(a1 + 312);
    __int16 v8 = *(float32x2_t **)(a1 + 320);
    if (v8 == v9)
    {
      int v9 = *(float32x2_t **)(a1 + 320);
    }

    else
    {
      unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 2);
      do
      {
        unint64_t v11 = v10 >> 1;
        int v12 = (char *)v9 + 20 * (v10 >> 1);
        int v13 = *((_DWORD *)v12 + 4);
        unint64_t v14 = (float32x2_t *)(v12 + 20);
        v10 += ~(v10 >> 1);
        if (v13 < 0) {
          int v9 = v14;
        }
        else {
          unint64_t v10 = v11;
        }
      }

      while (v10);
    }

    memcpy(v28, (const void *)(a1 + 392), sizeof(v28));
  }

  else
  {
    int v9 = (float32x2_t *)sub_1011D58C4(*(void *)(a1 + 312), *(void *)(a1 + 320), -1);
    __int16 v8 = v15;
    BOOL result = sub_1011CC3B0(v9, v15, 0LL, (uint64_t)v28);
    if (!result) {
      return result;
    }
  }

  *(void *)a3 = *(void *)&v28[2];
  *(_DWORD *)(a3 + 8) = DWORD2(v28[2]);
  __int128 v17 = v28[2];
  uint64_t v18 = *(void *)&v28[3];
  float v19 = *(float *)&v28[3] + (float)(*((float *)&v28[2] + 1) * 25.0);
  *a2 = *((float *)&v28[2] + 3) + (float)(*(float *)&v28[2] * 25.0);
  a2[1] = v19;
  a2[2] = *((float *)&v18 + 1) + (float)(*((float *)&v17 + 2) * 25.0);
  *(_DWORD *)(a4 + 8) = 0;
  *(void *)a4 = 0LL;
  if (v8 == v9) {
    return 0LL;
  }
  int v20 = 0;
  float v21 = 0.0;
  float v22 = 0.0;
  float v23 = 0.0;
  do
  {
    float v25 = v9[1].f32[0];
    float v24 = v9[1].f32[1];
    float v26 = v9->f32[0];
    float v27 = v9->f32[1];
    int v9 = (float32x2_t *)((char *)v9 + 20);
    float v21 = v21
    float v22 = v22
    *(float *)a4 = v21;
    *(float *)(a4 + 4) = v22;
    float v23 = v23
    *(float *)(a4 + 8) = v23;
    ++v20;
  }

  while (v9 != v8);
  *(float *)a4 = v21 / (float)v20;
  *(float *)(a4 + 4) = v22 / (float)v20;
  *(float *)(a4 + 8) = v23 / (float)v20;
  return 1LL;
}

BOOL sub_1011D1088(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1011D0E98(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_1011D1090(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v2 != v1)
  {
    unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v1) >> 2);
    do
    {
      unint64_t v4 = v3 >> 1;
      uint64_t v5 = v1 + 20 * (v3 >> 1);
      int v6 = *(_DWORD *)(v5 + 16);
      uint64_t v7 = v5 + 20;
      v3 += ~(v3 >> 1);
      if (v6 < 0) {
        uint64_t v1 = v7;
      }
      else {
        unint64_t v3 = v4;
      }
    }

    while (v3);
  }

  uint64_t result = 0x80000000LL;
  while (v1 != v2)
  {
    int v9 = (int)*(float *)(v1 + 12);
    else {
      uint64_t result = result;
    }
    v1 += 20LL;
  }

  return result;
}

uint64_t sub_1011D1104(uint64_t a1)
{
  return sub_1011D1090(a1 - 16);
}

uint64_t sub_1011D110C()
{
  return 1LL;
}

uint64_t sub_1011D1114()
{
  return 1LL;
}

uint64_t sub_1011D111C()
{
  return 1LL;
}

uint64_t sub_1011D1124()
{
  return 1LL;
}

float sub_1011D112C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if (*a1 == v1)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    unint64_t v11 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      int v20 = "!v.empty()";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v12 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      int v20 = "!v.empty()";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v13 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      int v20 = "!v.empty()";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  635,  "getMedians");
  }

  unint64_t v4 = (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1 - v2) >> 2)) >> 1;
  uint64_t v5 = (float *)(v2 + 12 * v4);
  *(void *)std::string buf = &stru_1018A2840;
  if (v5 == (float *)v1)
  {
    uint64_t v6 = v2;
  }

  else
  {
    sub_1011D59A8(v2, v2 + 12 * v4, v1, (uint64_t)buf);
    uint64_t v6 = *a1;
    unint64_t v1 = a1[1];
  }

  float v7 = *v5;
  *(void *)std::string buf = &stru_1018A2860;
  if (v5 != (float *)v1)
  {
    sub_1011D59A8(v6, v2 + 12 * v4, v1, (uint64_t)buf);
    uint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    *(void *)std::string buf = &stru_1018A2880;
  }

  return v7;
}

BOOL sub_1011D1464( id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var0 < a3->var0;
}

BOOL sub_1011D1478( id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var1 < a3->var1;
}

BOOL sub_1011D148C( id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var2 < a3->var2;
}

void sub_1011D14A0(uint64_t a1, int a2)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  unint64_t v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v16 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Starting gyro calibration, user initiated, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    v14[0] = 67109120;
    v14[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Starting gyro calibration, user initiated, %d",  v14);
    unint64_t v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalMultiRun::startCalibration(BOOL)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if (*(void *)(a1 + 3232))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    unint64_t v10 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      float v22 = "!fDeviceMotionDispatcher";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    unint64_t v11 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      float v22 = "!fDeviceMotionDispatcher";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A29F8);
      }
    }

    int v12 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      float v22 = "!fDeviceMotionDispatcher";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm",  795,  "startCalibration");
    __break(1u);
  }

  uint64_t v5 = -[CLDeviceMotionProperties initWithMode:]( objc_alloc(&OBJC_CLASS___CLDeviceMotionProperties),  "initWithMode:",  19LL);
  uint64_t v6 = operator new(0x38uLL);
  sub_1011C06A0(v6, *(void **)(a1 + 56), (uint64_t)nullsub_1280, a1, v5);
  *(void *)(a1 + 3232) = v6;

  uint64_t v7 = sub_1006E27E8();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1011D191C;
  v13[3] = &unk_10181D3D0;
  v13[4] = a1;
  sub_1006E2970(v7, (uint64_t)v13);
}

void sub_1011D18FC(_Unwind_Exception *a1)
{
}

void sub_1011D191C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100DDA4D4();
  sub_100DDAEA4(v2, *(void *)(v1 + 3232), 1.0);
}

void sub_1011D1944(uint64_t a1)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A29F8);
  }
  uint64_t v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped gyro calibration", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A29F8);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Stopped gyro calibration",  v7,  2);
    uint64_t v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::teardown()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (*(void *)(a1 + 3232))
  {
    uint64_t v3 = sub_100DDA4D4();
    sub_100DDB140(v3, *(void *)(a1 + 3232));
    uint64_t v4 = *(void *)(a1 + 3232);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *(void *)(a1 + 3232) = 0LL;
  }

uint64_t sub_1011D1B00(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (int *)v8;
  v8[0] = 0LL;
  v8[1] = 0LL;
  unint64_t v9 = a2;
  uint64_t v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  unint64_t v10 = (_DWORD *)(a1 + 104);
  uint64_t v4 = sub_10023311C((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_1012CF090, &v10);
  uint64_t v5 = (void *)v8[0];
  v4[8] = v9;
  uint64_t v2 = *v3;
  sub_100008390((uint64_t)&v7, v5);
  return v2;
}

void sub_1011D1BB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1011D1BC8(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        unint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A2A38);
      }
      unint64_t v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        unint64_t v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        __int16 v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_1018A2A38);
        }
        int v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        __int16 v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        unint64_t v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notifica tionData>::removeClient(int) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_ T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_1011D1E3C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1011D622C(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96LL))(a1, a2, &v10, v7);
  }

  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))(a1, a2, &v9);
  }

uint64_t sub_1011D1EBC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104LL))(a1, a2, &v4);
}

uint64_t sub_1011D1EE8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112LL))(a1, a2, &v4);
}

uint64_t sub_1011D1F14(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120LL))(a1, &v3);
}

uint64_t sub_1011D1F44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(&OBJC_CLASS___CLNotifierServiceAdapter);
    *(void *)(a1 + 48) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1LL);
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }

  return result;
}

uint64_t sub_1011D1F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_1019379E0);
}

uint64_t sub_1011D1FA4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)double v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          float v24 = (uint64_t *)v18;
        }
        else {
          float v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int128 v29 = (uint64_t *)v25;
        }
        else {
          __int128 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          __int16 v36 = sub_1011D6C68(buf);
          sub_1011D3E14((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_1019379E1;
        HIDWORD(v4sub_1011C5518(qword_1019A41A0, 0) = v17;
        *(void *)&buf[0] = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 8sub_1011C5518(qword_1019A41A0, 0) = v30;
        HIDWORD(v4sub_1011C5518(qword_1019A41A0, 0) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        int v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v4sub_1011C5518(qword_1019A41A0, 0) = *a3;
        *(void *)&buf[0] = (char *)&v40 + 4;
        int v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)&buf[0] = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A2A38);
  }
  unint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A2A38);
    }
    __int128 v37 = (void *)(a1 + 8);
    *(_DWORD *)double v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v4sub_1011C5518(qword_1019A41A0, 0) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    __int16 v39 = (char *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notification Data>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGyroCa librationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, Notif icationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    return 0LL;
  }

  return result;
}

BOOL sub_1011D242C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A2A38);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A2A38);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      float v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notificati onData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notific ation, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, Registr ationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1011D26AC(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A2A38);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                __int128 v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_1018A2A38);
                }
                __int128 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int128 v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                int v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type:: NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGyroCali brationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationD ata, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

void sub_1011D2A34(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }

    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32)) {
      sub_1000F0D38((void *)(v6 + 64));
    }
  }

uint64_t sub_1011D2A80(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  memcpy(__dst, v11, 0x140uLL);
  return 1LL;
}

uint64_t sub_1011D2AF0(uint64_t a1, int *a2, const void *a3)
{
  int v6 = operator new(0x158uLL);
  v6[1] = 0LL;
  v6[2] = 0LL;
  void *v6 = off_1018A2A88;
  memcpy(v6 + 3, a3, 0x140uLL);
  *(void *)&__int128 v13 = v6 + 3;
  *((void *)&v13 + 1) = v6;
  int v12 = *a2;
  uint64_t v14 = &v12;
  uint64_t v7 = sub_10023347C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_1012CF090, &v14);
  sub_10005F550((uint64_t)(v7 + 8), &v13);
  int v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1))
  {
    BOOL v9 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return 1LL;
}

void sub_1011D2BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1011D2BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_1011D2C7C(uint64_t a1, unsigned int *a2, const void *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    unint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A2A38);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v67 = 2082;
      __int128 v68 = v12;
      __int16 v69 = 2050;
      __int16 v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (__n128 *)(a1 + 64);
    uint64_t v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v71 = &v71[8];
      memset(&v71[8], 0, 24);
      __int128 v72 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v71);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v72;
      if (v72)
      {
        int v25 = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v71, *(void **)&v71[8]);
    }

    if (a4)
    {
      __int16 v27 = operator new(0x158uLL);
      v27[1] = 0LL;
      v27[2] = 0LL;
      *__int16 v27 = off_1018A2A88;
      memcpy(v27 + 3, a3, 0x140uLL);
      *(void *)std::string buf = v27 + 3;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      int v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int128 v29 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int16 v31 = sub_1011D39B8(a3);
    if (a5 == -1)
    {
      sub_1011D3A40((void *)a1, (int *)a2, v31);
    }

    else
    {
      uint64_t v32 = a1 + 88;
      uint64_t v33 = *(void *)(a1 + 88);
      if (!v33) {
        goto LABEL_48;
      }
      uint64_t v34 = a1 + 88;
      do
      {
        int v35 = *(_DWORD *)(v33 + 32);
        BOOL v36 = v35 < a5;
        if (v35 >= a5) {
          __int128 v37 = (uint64_t *)v33;
        }
        else {
          __int128 v37 = (uint64_t *)(v33 + 8);
        }
        if (!v36) {
          uint64_t v34 = v33;
        }
        uint64_t v33 = *v37;
      }

      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5) {
LABEL_48:
      }
        uint64_t v34 = a1 + 88;
      uint64_t v64 = v34;
      unint64_t v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v39 = *a2;
      uint64_t v40 = (__n128 *)(a1 + 64);
      do
      {
        int v41 = *(_DWORD *)(v38 + 32);
        BOOL v42 = v41 < v39;
        if (v41 >= v39) {
          double v43 = (unint64_t *)v38;
        }
        else {
          double v43 = (unint64_t *)(v38 + 8);
        }
        if (!v42) {
          uint64_t v40 = (__n128 *)v38;
        }
        unint64_t v38 = *v43;
      }

      while (*v43);
      if (v40 == v15 || v39 < (signed __int32)v40[2].n128_u32[0])
      {
LABEL_59:
        uint64_t v63 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_1018A2A38);
        }
        char v44 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          int v45 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v71, a1, a2);
          if (v71[23] >= 0) {
            uint64_t v46 = v71;
          }
          else {
            uint64_t v46 = *(_BYTE **)v71;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v71[23] & 0x80000000) != 0) {
            operator delete(*(void **)v71);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_1018A2A38);
          }
          int v47 = (void *)(a1 + 8);
          uint64_t v48 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v62 >= 0) {
            unint64_t v49 = __p;
          }
          else {
            unint64_t v49 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v71 = 136315650;
          *(void *)&v71[4] = v47;
          *(_WORD *)&v71[12] = 1024;
          *(_DWORD *)&v71[14] = a5;
          *(_WORD *)&v71[18] = 2080;
          *(void *)&v71[20] = v49;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v71,
            28,
            v60);
          uint64_t v51 = v50;
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notifi cationData>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Not ification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_T ype::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v51);
          if (v51 != buf) {
            free(v51);
          }
        }

        goto LABEL_83;
      }

      uint64_t v63 = v40;
      if (v34 == v32) {
        goto LABEL_60;
      }
      uint64_t v54 = v40[3].n128_i64[0];
      __int16 v52 = v40 + 3;
      uint64_t v53 = (__n128 *)v54;
      if (!v54) {
        goto LABEL_60;
      }
      int v55 = *(_DWORD *)(v34 + 32);
      uint64_t v56 = v52;
      do
      {
        int v57 = v53[1].n128_i32[3];
        BOOL v58 = v57 < v55;
        if (v57 >= v55) {
          uint64_t v59 = v53;
        }
        else {
          uint64_t v59 = (__n128 *)&v53->n128_i8[8];
        }
        if (!v58) {
          uint64_t v56 = v53;
        }
        uint64_t v53 = (__n128 *)v59->n128_u64[0];
      }

      while (v59->n128_u64[0]);
      sub_1011D3E14((_BYTE *)a1, (uint64_t)&v64, (uint64_t)&v63, v31);
    }

void sub_1011D32BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

uint64_t sub_1011D330C()
{
  return 1LL;
}

void sub_1011D3314(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A2A38);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      __int128 v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A2A38);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notificati onData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGy roCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A2A38);
    }
    uint64_t v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      __int128 v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A2A38);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      unint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notificati onData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGy roCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    unint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        int v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_1018A2A38);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              __int128 v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A2A38);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::No tificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, Notificat ionData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                int v12 = v18;
              }

              while (!v19);
            }

            int v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            unint64_t v10 = v26;
          }

          while (!v19);
        }

        unint64_t v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

uint64_t sub_1011D38BC()
{
  return 0LL;
}

void sub_1011D38C4(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_1011D38F4(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 102LL;
    goto LABEL_7;
  }

  if (v5 == 2)
  {
    uint64_t v6 = 204LL;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }

  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }

    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

CLCppContainer *sub_1011D39B8(const void *a1)
{
  uint64_t v2 = operator new(0x140uLL);
  memcpy(v2, a1, 0x140uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1011D3F4C;
  v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  320LL);
}

void sub_1011D3A40(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    unint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v51 = v9;
        id v13 = sub_1011D3F5C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v50 = v19;
              sub_1011D3E14(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int128 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int128 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v51 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                int v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    int v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      BOOL v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      BOOL v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  double v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      double v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      int v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              __int16 v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A2A38);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_1018A2A38);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                uint64_t v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::Notifica tionData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGyroCal ibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::Notification Data, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_1011D3E14(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_1011D3F5C(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    int v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_1011D3EF0(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1011D3F1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A2A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011D3F2C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A2A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1011D3F4C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_1011D3F5C(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppEncodableDataContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1011D3FD4(a1);
  }
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_1011D433C(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1011D3FD4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1011D46C8((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData , Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_1011D433C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    uint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    uint64_t v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    uint64_t v4 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData , Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_1011D46C8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5228))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)320)
    {
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018A2A58);
      }
      uint64_t v4 = (os_log_s *)qword_101934478;
      if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        unint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A2A58);
        }
      }

      unint64_t v5 = (os_log_s *)qword_101934478;
      if (os_signpost_enabled((os_log_t)qword_101934478))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        unint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A2A58);
        }
      }

      uint64_t v6 = (os_log_s *)qword_101934478;
      if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        unint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
    }

    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_1011D4978(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_1011D49A4(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_1000070D4();
  }
  return operator new(20 * a1);
}

uint64_t sub_1011D49E8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_1008E8D34(a2);
    }

    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31LL;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32LL;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_1008E8D34(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }

  return result;
}

void *sub_1011D4A98(unint64_t a1)
{
  if (a1 >> 61) {
    sub_1000070D4();
  }
  return operator new(8 * a1);
}

uint64_t **sub_1011D4ACC(uint64_t **a1, float *a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    float v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        float v9 = *((float *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = (uint64_t *)*v5;
        unsigned int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        unsigned int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

void sub_1011D4B84(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t v8 = (uint64_t)&a2[-2].n128_i64[1] + 4;
  uint64_t v99 = (uint64_t)&a2[-3].n128_i64[1];
  int v100 = a2;
  uint64_t v9 = (uint64_t)a2[-4].n128_i64 + 4;
  unint64_t v10 = (unint64_t)a1;
  while (2)
  {
    a1 = (__n128 *)v10;
    uint64_t v11 = (uint64_t)a2 - v10;
    uint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v10) >> 2);
    switch(v12)
    {
      case 0LL:
      case 1LL:
        return;
      case 2LL:
        if (sub_1011CB6C8(v8, (uint64_t)a1))
        {
          __n128 v43 = *a1;
          unsigned __int32 v104 = a1[1].n128_u32[0];
          __n128 v103 = v43;
          __n128 v44 = *(__n128 *)v8;
          a1[1].n128_u32[0] = *(_DWORD *)(v8 + 16);
          *a1 = v44;
          __n128 v45 = v103;
          *(_DWORD *)(v8 + 16) = v104;
          *(__n128 *)uint64_t v8 = v45;
        }

        return;
      case 3LL:
        sub_1011D5410((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, v8);
        return;
      case 4LL:
        sub_1011D56F0(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], v8);
        return;
      case 5LL:
        sub_1011D57BC(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a1[3].n128_i64[1] + 4, v8);
        return;
      default:
        if (v11 <= 479)
        {
          uint64_t v46 = (uint64_t)a1[1].n128_i64 + 4;
          BOOL v48 = a1 == a2 || v46 == (void)a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              uint64_t v49 = 0LL;
              uint64_t v50 = (uint64_t)a1;
              do
              {
                uint64_t v51 = v50;
                uint64_t v50 = v46;
                if (sub_1011CB6C8(v46, v51))
                {
                  __n128 v52 = *(__n128 *)v50;
                  unsigned __int32 v104 = *(_DWORD *)(v50 + 16);
                  __n128 v103 = v52;
                  uint64_t v53 = v49;
                  while (1)
                  {
                    __int16 v54 = (char *)a1 + v53;
                    *(__n128 *)(v54 + 2sub_1011C5518(qword_1019A41A0, 0) = *(__n128 *)((char *)a1 + v53);
                    *((_DWORD *)v54 + 9) = *(unsigned __int32 *)((char *)a1[1].n128_u32 + v53);
                    if (!v53) {
                      break;
                    }
                    v53 -= 20LL;
                    if (!sub_1011CB6C8((uint64_t)&v103, (uint64_t)a1 + v53))
                    {
                      uint64_t v55 = (uint64_t)a1[1].n128_i64 + v53 + 4;
                      goto LABEL_74;
                    }
                  }

                  uint64_t v55 = (uint64_t)a1;
LABEL_74:
                  __n128 v56 = v103;
                  *(_DWORD *)(v55 + 16) = v104;
                  *(__n128 *)uint64_t v55 = v56;
                }

                uint64_t v46 = v50 + 20;
                v49 += 20LL;
              }

              while ((__n128 *)(v50 + 20) != a2);
            }
          }

          else if (!v48)
          {
            unint64_t v93 = &a1[-2].n128_i8[12];
            do
            {
              uint64_t v94 = (uint64_t)a1;
              a1 = (__n128 *)v46;
              if (sub_1011CB6C8(v46, v94))
              {
                __n128 v95 = *a1;
                unsigned __int32 v104 = a1[1].n128_u32[0];
                __n128 v103 = v95;
                uint64_t v96 = (uint64_t)v93;
                do
                {
                  *(_OWORD *)(v96 + 4sub_1011C5518(qword_1019A41A0, 0) = *(_OWORD *)(v96 + 20);
                  *(_DWORD *)(v96 + 56) = *(_DWORD *)(v96 + 36);
                  BOOL v97 = sub_1011CB6C8((uint64_t)&v103, v96);
                  v96 -= 20LL;
                }

                while (v97);
                __n128 v98 = v103;
                *(_DWORD *)(v96 + 56) = v104;
                *(__n128 *)(v96 + 4sub_1011C5518(qword_1019A41A0, 0) = v98;
              }

              uint64_t v46 = (uint64_t)a1[1].n128_i64 + 4;
              v93 += 20;
            }

            while (&a1[1].n128_u8[4] != (unsigned __int8 *)a2);
          }

          return;
        }

        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v57 = (unint64_t)(v12 - 2) >> 1;
            int64_t v58 = v57;
            do
            {
              int64_t v59 = v58;
              if (v57 >= v58)
              {
                uint64_t v60 = (2 * v58) | 1;
                uint64_t v61 = (uint64_t)a1 + 20 * v60;
                if (2 * v58 + 2 < v12 && sub_1011CB6C8((uint64_t)a1 + 20 * v60, v61 + 20))
                {
                  v61 += 20LL;
                  uint64_t v60 = 2 * v59 + 2;
                }

                uint64_t v62 = (uint64_t)a1 + 20 * v59;
                if (!sub_1011CB6C8(v61, v62))
                {
                  __n128 v63 = *(__n128 *)v62;
                  unsigned __int32 v104 = *(_DWORD *)(v62 + 16);
                  __n128 v103 = v63;
                  do
                  {
                    uint64_t v64 = v61;
                    __int128 v65 = *(_OWORD *)v61;
                    *(_DWORD *)(v62 + 16) = *(_DWORD *)(v61 + 16);
                    *(_OWORD *)uint64_t v62 = v65;
                    if (v57 < v60) {
                      break;
                    }
                    uint64_t v66 = (2 * v60) | 1;
                    uint64_t v61 = (uint64_t)a1 + 20 * v66;
                    uint64_t v67 = 2 * v60 + 2;
                    if (v67 < v12 && sub_1011CB6C8((uint64_t)a1 + 20 * v66, v61 + 20))
                    {
                      v61 += 20LL;
                      uint64_t v66 = v67;
                    }

                    uint64_t v62 = v64;
                    uint64_t v60 = v66;
                  }

                  while (!sub_1011CB6C8(v61, (uint64_t)&v103));
                  __n128 v68 = v103;
                  *(_DWORD *)(v64 + 16) = v104;
                  *(__n128 *)uint64_t v64 = v68;
                }
              }

              int64_t v58 = v59 - 1;
            }

            while (v59);
            int64_t v69 = v11 / 0x14uLL;
            __int16 v70 = v100;
            do
            {
              uint64_t v71 = v70;
              uint64_t v72 = 0LL;
              __n128 v73 = *a1;
              unsigned __int32 v102 = a1[1].n128_u32[0];
              __n128 v101 = v73;
              uint64_t v74 = v69 - 2;
              if (v69 < 2) {
                uint64_t v74 = v69 - 1;
              }
              uint64_t v75 = v74 >> 1;
              uint64_t v76 = (uint64_t)a1;
              do
              {
                uint64_t v77 = v76 + 20 * v72 + 20;
                uint64_t v78 = (2 * v72) | 1;
                uint64_t v79 = 2 * v72 + 2;
                if (v79 < v69 && sub_1011CB6C8(v76 + 20 * v72 + 20, v76 + 20 * v72 + 40))
                {
                  v77 += 20LL;
                  uint64_t v78 = v79;
                }

                __n128 v80 = *(__n128 *)v77;
                *(_DWORD *)(v76 + 16) = *(_DWORD *)(v77 + 16);
                *(__n128 *)uint64_t v76 = v80;
                uint64_t v76 = v77;
                uint64_t v72 = v78;
              }

              while (v78 <= v75);
              __int16 v70 = (__n128 *)((char *)v71 - 20);
              if ((__n128 *)v77 == (__n128 *)((char *)&v71[-2].n128_f64[1] + 4))
              {
                __n128 v91 = v101;
                *(_DWORD *)(v77 + 16) = v102;
                *(__n128 *)uint64_t v77 = v91;
                int64_t v84 = v69 - 1;
              }

              else
              {
                __n128 v81 = *v70;
                *(_DWORD *)(v77 + 16) = v71[-1].n128_u32[3];
                *(__n128 *)uint64_t v77 = v81;
                __n128 v82 = v101;
                v71[-1].n128_u32[3] = v102;
                *__int16 v70 = v82;
                uint64_t v83 = v77 - (void)a1 + 20;
                int64_t v84 = v69 - 1;
                if (v83 >= 21)
                {
                  unint64_t v85 = (v83 / 0x14uLL - 2) >> 1;
                  uint64_t v86 = (uint64_t)a1 + 20 * v85;
                  if (sub_1011CB6C8(v86, v77))
                  {
                    __n128 v87 = *(__n128 *)v77;
                    unsigned __int32 v104 = *(_DWORD *)(v77 + 16);
                    __n128 v103 = v87;
                    do
                    {
                      uint64_t v88 = v86;
                      __int128 v89 = *(_OWORD *)v86;
                      *(_DWORD *)(v77 + 16) = *(_DWORD *)(v86 + 16);
                      *(_OWORD *)uint64_t v77 = v89;
                      if (!v85) {
                        break;
                      }
                      unint64_t v85 = (v85 - 1) >> 1;
                      uint64_t v86 = (uint64_t)a1 + 20 * v85;
                      uint64_t v77 = v88;
                    }

                    while (sub_1011CB6C8(v86, (uint64_t)&v103));
                    __n128 v90 = v103;
                    *(_DWORD *)(v88 + 16) = v104;
                    *(__n128 *)uint64_t v88 = v90;
                  }
                }
              }

              BOOL v92 = v69 <= 2;
              int64_t v69 = v84;
            }

            while (!v92);
          }

          return;
        }

        unint64_t v13 = (unint64_t)v12 >> 1;
        uint64_t v14 = (uint64_t)a1 + 20 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xA01)
        {
          sub_1011D5410(v14, (uint64_t)a1, v8);
        }

        else
        {
          sub_1011D5410((uint64_t)a1, v14, v8);
          uint64_t v15 = 5 * v13;
          sub_1011D5410((uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[-1] + 4 * v15 - 4, v99);
          sub_1011D5410((uint64_t)&a1[2].n128_i64[1], (uint64_t)a1[1].n128_i64 + 4 * v15 + 4, v9);
          sub_1011D5410((uint64_t)&a1[-1] + 4 * v15 - 4, v14, (uint64_t)a1[1].n128_i64 + 4 * v15 + 4);
          __n128 v16 = *a1;
          unsigned __int32 v104 = a1[1].n128_u32[0];
          __n128 v103 = v16;
          unsigned __int32 v17 = *(_DWORD *)(v14 + 16);
          *a1 = *(__n128 *)v14;
          a1[1].n128_u32[0] = v17;
          __n128 v18 = v103;
          *(_DWORD *)(v14 + 16) = v104;
          *(__n128 *)uint64_t v14 = v18;
        }

        --a3;
        if ((a4 & 1) == 0 && !sub_1011CB6C8((uint64_t)&a1[-2].n128_i64[1] + 4, (uint64_t)a1))
        {
          __n128 v33 = *a1;
          unsigned __int32 v102 = a1[1].n128_u32[0];
          __n128 v101 = v33;
          if (sub_1011CB6C8((uint64_t)&v101, v8))
          {
            unint64_t v10 = (unint64_t)a1;
            do
              v10 += 20LL;
            while (!sub_1011CB6C8((uint64_t)&v101, v10));
          }

          else
          {
            unint64_t v34 = (unint64_t)a1[1].n128_u64 + 4;
            do
            {
              unint64_t v10 = v34;
              BOOL v35 = sub_1011CB6C8((uint64_t)&v101, v34);
              unint64_t v34 = v10 + 20;
            }

            while (!v35);
          }

          unint64_t v36 = (unint64_t)a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v36 = (unint64_t)a2;
            do
              v36 -= 20LL;
            while (sub_1011CB6C8((uint64_t)&v101, v36));
          }

          while (v10 < v36)
          {
            __n128 v37 = *(__n128 *)v10;
            unsigned __int32 v104 = *(_DWORD *)(v10 + 16);
            __n128 v103 = v37;
            __int128 v38 = *(_OWORD *)v36;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v36 + 16);
            *(_OWORD *)unint64_t v10 = v38;
            __n128 v39 = v103;
            *(_DWORD *)(v36 + 16) = v104;
            *(__n128 *)unint64_t v36 = v39;
            do
              v10 += 20LL;
            while (!sub_1011CB6C8((uint64_t)&v101, v10));
            do
              v36 -= 20LL;
            while (sub_1011CB6C8((uint64_t)&v101, v36));
          }

          int v40 = (__n128 *)(v10 - 20);
          if ((__n128 *)(v10 - 20) != a1)
          {
            __n128 v41 = *v40;
            a1[1].n128_u32[0] = *(_DWORD *)(v10 - 4);
            *a1 = v41;
          }

          a4 = 0;
          __n128 v42 = v101;
          *(_DWORD *)(v10 - 4) = v102;
          *int v40 = v42;
          continue;
        }

        uint64_t v19 = 0LL;
        __n128 v20 = *a1;
        unsigned __int32 v102 = a1[1].n128_u32[0];
        __n128 v101 = v20;
        do
          v19 += 20LL;
        while (sub_1011CB6C8((uint64_t)a1 + v19, (uint64_t)&v101));
        BOOL v21 = (char *)a1 + v19;
        unint64_t v22 = (unint64_t)v100;
        if (v19 == 20)
        {
          unint64_t v22 = (unint64_t)v100;
          do
          {
            v22 -= 20LL;
          }

          while (!sub_1011CB6C8(v22, (uint64_t)&v101));
        }

        else
        {
          do
            v22 -= 20LL;
          while (!sub_1011CB6C8(v22, (uint64_t)&v101));
        }

        if ((unint64_t)v21 >= v22)
        {
          unint64_t v28 = (unint64_t)(v21 - 20);
        }

        else
        {
          unint64_t v23 = (unint64_t)a1->n128_u64 + v19;
          unint64_t v24 = v22;
          do
          {
            __n128 v25 = *(__n128 *)v23;
            unsigned __int32 v104 = *(_DWORD *)(v23 + 16);
            __n128 v103 = v25;
            __int128 v26 = *(_OWORD *)v24;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v24 + 16);
            *(_OWORD *)unint64_t v23 = v26;
            __n128 v27 = v103;
            *(_DWORD *)(v24 + 16) = v104;
            *(__n128 *)unint64_t v24 = v27;
            do
              v23 += 20LL;
            while (sub_1011CB6C8(v23, (uint64_t)&v101));
            do
              v24 -= 20LL;
            while (!sub_1011CB6C8(v24, (uint64_t)&v101));
          }

          while (v23 < v24);
          unint64_t v28 = v23 - 20;
        }

        if ((__n128 *)v28 != a1)
        {
          __n128 v29 = *(__n128 *)v28;
          a1[1].n128_u32[0] = *(_DWORD *)(v28 + 16);
          *a1 = v29;
        }

        __n128 v30 = v101;
        *(_DWORD *)(v28 + 16) = v102;
        *(__n128 *)unint64_t v28 = v30;
        BOOL v31 = (unint64_t)v21 >= v22;
        a2 = v100;
        if (!v31)
        {
LABEL_32:
          sub_1011D4B84(a1, v28, a3, a4 & 1);
          a4 = 0;
          unint64_t v10 = v28 + 20;
          continue;
        }

        BOOL v32 = sub_1011D552C(a1, (__n128 *)v28);
        unint64_t v10 = v28 + 20;
        if (!sub_1011D552C((__n128 *)(v28 + 20), v100))
        {
          if (v32) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = (__n128 *)v28;
        if (!v32) {
          goto LABEL_1;
        }
        return;
    }
  }

BOOL sub_1011D5410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = sub_1011CB6C8(a2, a1);
  BOOL result = sub_1011CB6C8(a3, a2);
  if (v6)
  {
    if (result)
    {
      int v8 = *(_DWORD *)(a1 + 16);
      __int128 v9 = *(_OWORD *)a1;
      int v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v10;
    }

    else
    {
      int v17 = *(_DWORD *)(a1 + 16);
      __int128 v18 = *(_OWORD *)a1;
      int v19 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v19;
      *(_OWORD *)a2 = v18;
      *(_DWORD *)(a2 + 16) = v17;
      BOOL result = sub_1011CB6C8(a3, a2);
      if (!result) {
        return result;
      }
      int v8 = *(_DWORD *)(a2 + 16);
      __int128 v9 = *(_OWORD *)a2;
      int v20 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v20;
    }

    *(_OWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = v8;
  }

  else if (result)
  {
    int v11 = *(_DWORD *)(a2 + 16);
    __int128 v12 = *(_OWORD *)a2;
    int v13 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(_DWORD *)(a3 + 16) = v11;
    BOOL result = sub_1011CB6C8(a2, a1);
    if (result)
    {
      int v14 = *(_DWORD *)(a1 + 16);
      __int128 v15 = *(_OWORD *)a1;
      int v16 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v16;
      *(_OWORD *)a2 = v15;
      *(_DWORD *)(a2 + 16) = v14;
    }
  }

  return result;
}

BOOL sub_1011D552C(__n128 *a1, __n128 *a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  BOOL result = 1LL;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 20);
      if (sub_1011CB6C8((uint64_t)&a2[-2].n128_i64[1] + 4, (uint64_t)a1))
      {
        unsigned __int32 v7 = a1[1].n128_u32[0];
        __n128 v8 = *a1;
        unsigned __int32 v9 = v6[1].n128_u32[0];
        *a1 = *v6;
        a1[1].n128_u32[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u32[0] = v7;
      }

      return 1LL;
    case 3uLL:
      sub_1011D5410((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1LL;
    case 4uLL:
      sub_1011D56F0(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1LL;
    case 5uLL:
      sub_1011D57BC( a1,  (uint64_t)a1[1].n128_i64 + 4,  (uint64_t)&a1[2].n128_i64[1],  (uint64_t)&a1[3].n128_i64[1] + 4,  (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1LL;
    default:
      uint64_t v10 = (uint64_t)&a1[2].n128_i64[1];
      sub_1011D5410((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1]);
      uint64_t v11 = (uint64_t)&a1[3].n128_i64[1] + 4;
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    if (sub_1011CB6C8(v11, v10))
    {
      __int128 v17 = *(_OWORD *)v11;
      int v18 = *(_DWORD *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        __int128 v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 6sub_1011C5518(qword_1019A41A0, 0) = *(__n128 *)((char *)a1 + v14 + 40);
        *((_DWORD *)v15 + 19) = *(unsigned __int32 *)((char *)&a1[3].n128_u32[2] + v14);
        if (v14 == -40) {
          break;
        }
        v14 -= 20LL;
        if (!sub_1011CB6C8((uint64_t)&v17, (uint64_t)(v15 + 20)))
        {
          uint64_t v16 = (uint64_t)&a1[3].n128_i64[1] + v14 + 4;
          goto LABEL_12;
        }
      }

      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(_DWORD *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 20 == (void)a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 20LL;
    v11 += 20LL;
    if ((__n128 *)v11 == a2) {
      return 1LL;
    }
  }

__n128 sub_1011D56F0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_1011CB6C8(a4, a3))
  {
    int v9 = *(_DWORD *)(a3 + 16);
    __int128 v10 = *(_OWORD *)a3;
    int v11 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (sub_1011CB6C8(a3, a2))
    {
      int v12 = *(_DWORD *)(a2 + 16);
      __n128 v13 = *(__n128 *)a2;
      int v14 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(_DWORD *)(a3 + 16) = v12;
      if (sub_1011CB6C8(a2, (uint64_t)a1))
      {
        unsigned __int32 v15 = a1[1].n128_u32[0];
        __n128 result = *a1;
        unsigned __int32 v16 = *(_DWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v16;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v15;
      }
    }
  }

  return result;
}

__n128 sub_1011D57BC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_1011CB6C8(a5, a4))
  {
    int v11 = *(_DWORD *)(a4 + 16);
    __int128 v12 = *(_OWORD *)a4;
    int v13 = *(_DWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_DWORD *)(a5 + 16) = v11;
    if (sub_1011CB6C8(a4, a3))
    {
      int v14 = *(_DWORD *)(a3 + 16);
      __int128 v15 = *(_OWORD *)a3;
      int v16 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_DWORD *)(a4 + 16) = v14;
      if (sub_1011CB6C8(a3, a2))
      {
        int v17 = *(_DWORD *)(a2 + 16);
        __n128 v18 = *(__n128 *)a2;
        int v19 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_DWORD *)(a3 + 16) = v17;
        if (sub_1011CB6C8(a2, (uint64_t)a1))
        {
          unsigned __int32 v20 = a1[1].n128_u32[0];
          __n128 result = *a1;
          unsigned __int32 v21 = *(_DWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v21;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v20;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1011D58C4(uint64_t result, uint64_t a2, int a3)
{
  if (a2 == result) {
    return result;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - result) >> 2);
  while (1)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 20 * (v3 >> 1);
    int v6 = *(_DWORD *)(v5 + 16);
    if (v6 >= a3) {
      break;
    }
    __n128 result = v5 + 20;
    unint64_t v4 = v3 + ~v4;
LABEL_7:
    unint64_t v3 = v4;
    if (!v4) {
      return result;
    }
  }

  if (v6 > a3)
  {
    a2 = result + 20 * (v3 >> 1);
    goto LABEL_7;
  }

  if (v3 >= 2)
  {
    do
    {
      unint64_t v7 = v4 >> 1;
      uint64_t v8 = result + 20 * (v4 >> 1);
      int v9 = *(_DWORD *)(v8 + 16);
      uint64_t v10 = v8 + 20;
      v4 += ~(v4 >> 1);
      if (v9 < a3) {
        __n128 result = v10;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    while (v4);
  }

  uint64_t v11 = v5 + 20;
  uint64_t v12 = a2 - (v5 + 20);
  if (v12)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 2);
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = v11 + 20 * (v13 >> 1);
      int v16 = *(_DWORD *)(v15 + 16);
      uint64_t v17 = v15 + 20;
      v13 += ~(v13 >> 1);
      if (v16 > a3) {
        unint64_t v13 = v14;
      }
      else {
        uint64_t v11 = v17;
      }
    }

    while (v13);
  }

  return result;
}

uint64_t sub_1011D59A8(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    unint64_t v5 = a3;
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v7) >> 2);
      if (v8 < 2) {
        break;
      }
      if (v8 == 3) {
        return sub_1011D5E6C((uint64_t *)v7, (uint64_t *)(v7 + 12), (uint64_t *)(v5 - 12), a4);
      }
      if (v8 == 2)
      {
        uint64_t v26 = *(void *)a4;
        __n128 v27 = (uint64_t *)(v5 - 12);
        __n128 result = (*(uint64_t (**)(void))(v26 + 16))();
        if ((_DWORD)result)
        {
          int v45 = *(_DWORD *)(v7 + 8);
          uint64_t v38 = *(void *)v7;
          uint64_t v28 = *v27;
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v5 - 4);
          *(void *)uint64_t v7 = v28;
          *(_DWORD *)(v5 - 4) = v45;
          *__n128 v27 = v38;
        }

        return result;
      }

      if ((uint64_t)(v5 - v7) <= 95)
      {
        while (v7 != v5 - 12)
        {
          uint64_t v29 = v7;
          v7 += 12LL;
          if (v29 != v5 && v7 != v5)
          {
            uint64_t v30 = v7;
            BOOL v31 = (uint64_t *)v29;
            do
            {
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
              if ((_DWORD)result) {
                BOOL v31 = (uint64_t *)v30;
              }
              v30 += 12LL;
            }

            while (v30 != v5);
            if (v31 != (uint64_t *)v29)
            {
              int v46 = *(_DWORD *)(v29 + 8);
              uint64_t v39 = *(void *)v29;
              uint64_t v32 = *v31;
              *(_DWORD *)(v29 + 8) = *((_DWORD *)v31 + 2);
              *(void *)uint64_t v29 = v32;
              *((_DWORD *)v31 + 2) = v46;
              *BOOL v31 = v39;
            }
          }
        }

        return result;
      }

      unint64_t v9 = v7 + 12 * (v8 >> 1);
      uint64_t v10 = (uint64_t *)(v5 - 12);
      int v11 = sub_1011D5E6C((uint64_t *)v7, (uint64_t *)v9, (uint64_t *)(v5 - 12), a4);
      __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
      if ((result & 1) != 0)
      {
        unint64_t v12 = v5 - 12;
LABEL_13:
        unint64_t v14 = v7 + 12;
        if (v7 + 12 < v12)
        {
          while (1)
          {
            unint64_t v15 = v14 - 12;
            do
              v15 += 12LL;
            while (((*(uint64_t (**)(void))(*(void *)a4 + 16LL))() & 1) != 0);
            unint64_t v14 = v15 + 12;
            do
            {
              v12 -= 12LL;
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
            }

            while (!(_DWORD)result);
            if (v15 >= v12) {
              break;
            }
            int v41 = *(_DWORD *)(v15 + 8);
            uint64_t v34 = *(void *)v15;
            uint64_t v16 = *(void *)v12;
            *(_DWORD *)(v15 + 8) = *(_DWORD *)(v12 + 8);
            *(void *)unint64_t v15 = v16;
            *(_DWORD *)(v12 + 8) = v41;
            *(void *)unint64_t v12 = v34;
            ++v11;
            if (v15 == v9) {
              unint64_t v9 = v12;
            }
          }

          unint64_t v14 = v15;
        }

        if (v14 != v9)
        {
          __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
          if ((_DWORD)result)
          {
            int v42 = *(_DWORD *)(v14 + 8);
            uint64_t v35 = *(void *)v14;
            uint64_t v17 = *(void *)v9;
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v9 + 8);
            *(void *)unint64_t v14 = v17;
            *(_DWORD *)(v9 + 8) = v42;
            *(void *)unint64_t v9 = v35;
            ++v11;
          }
        }

        if (v14 == a2) {
          return result;
        }
        if (!v11)
        {
          unint64_t v19 = v14;
          if (v14 <= a2)
          {
            while (1)
            {
              unint64_t v22 = v19 + 12;
              if (v19 + 12 == v5) {
                break;
              }
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
              unint64_t v19 = v22;
              if ((_DWORD)result) {
                goto LABEL_28;
              }
            }
          }

          else
          {
            uint64_t v20 = v7;
            while (1)
            {
              uint64_t v21 = v20 + 12;
              if (v20 + 12 == v14) {
                break;
              }
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
              uint64_t v20 = v21;
              if ((result & 1) != 0) {
                goto LABEL_28;
              }
            }
          }

          return result;
        }

uint64_t sub_1011D5E6C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8 = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result) {
      return result;
    }
    int v13 = *((_DWORD *)a2 + 2);
    uint64_t v14 = *a2;
    int v15 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v13;
    int v16 = *((_DWORD *)a1 + 2);
    uint64_t v17 = *a1;
    int v18 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    return 2LL;
  }

  if (!(_DWORD)result)
  {
    int v19 = *((_DWORD *)a1 + 2);
    uint64_t v20 = *a1;
    int v21 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_DWORD *)a2 + 2) = v19;
    int v22 = *((_DWORD *)a2 + 2);
    uint64_t v23 = *a2;
    int v24 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_DWORD *)a3 + 2) = v22;
    return 2LL;
  }

  int v10 = *((_DWORD *)a1 + 2);
  uint64_t v11 = *a1;
  int v12 = *((_DWORD *)a3 + 2);
  *a1 = *a3;
  *((_DWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_DWORD *)a3 + 2) = v10;
  return 1LL;
}

void *sub_1011D5FC4(unint64_t a1)
{
  if (a1 >= 0x1555555555555556LL) {
    sub_1000070D4();
  }
  return operator new(12 * a1);
}

uint64_t sub_1011D6008(uint64_t a1)
{
  id v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      id v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512LL;
    goto LABEL_7;
  }

  if (v5 == 2)
  {
    uint64_t v6 = 1024LL;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }

  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }

    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_1011D60CC(uint64_t **result, int *a2, int *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v14 = result;
    int v15 = v8;
    int v16 = v8;
    if (v8)
    {
      int v15 = sub_100115560((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_1002331E8(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          int v16 = v15;
          if (v15) {
            int v15 = sub_100115560((uint64_t)v15);
          }
          int v10 = (int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              int v10 = *(int **)v10;
            }

            while (v10);
          }

          else
          {
            do
            {
              a2 = (int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v11);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    uint64_t result = (uint64_t **)sub_1001155B4((uint64_t)&v14);
  }

  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1004C6FA8(v5, a2 + 7);
      int v12 = (int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          int v13 = v12;
          int v12 = *(int **)v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          int v13 = (int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }

        while (!v11);
      }

      a2 = v13;
    }

    while (v13 != a3);
  }

  return result;
}

void sub_1011D6218(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id sub_1011D622C(void *a1)
{
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___CLCppEncodableDataContainer);
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1011D62A4(a1);
  }
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_1011D661C(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1011D62A4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1011D69B8((uint64_t)&v10 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    unint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v13 = v2;
      __int16 v14 = 2048;
      uint64_t v15 = 0LL;
      __int16 v16 = 2080;
      uint64_t v17 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v11) = 134218498;
    HIDWORD(v11) = (_DWORD)v2;
    LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = 32;
    unint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v11,  v10,  v11);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    uint64_t v7 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v13 = v2;
      __int16 v14 = 2048;
      uint64_t v15 = 0LL;
      __int16 v16 = 2080;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v11) = 134218498;
    HIDWORD(v11) = (_DWORD)v2;
    LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = 32;
    unint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v11,  v10,  v11);
  }

  uint64_t v9 = (uint8_t *)v5;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callback = (lambda at /Library/Caches/com. apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v5);
  if (v9 != buf) {
    free(v9);
  }
  return 0LL;
}

id sub_1011D661C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    unint64_t v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v12 = v2;
      __int16 v13 = 2048;
      uint64_t v14 = 0LL;
      __int16 v15 = 2080;
      uint64_t v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = 134218498;
    HIDWORD(v1sub_1011C5518(qword_1019A41A0, 0) = (_DWORD)v2;
    unint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v10,  32,  v10);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    uint64_t v7 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v12 = v2;
      __int16 v13 = 2048;
      uint64_t v14 = 0LL;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A2A58);
    }
    LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = 134218498;
    HIDWORD(v1sub_1011C5518(qword_1019A41A0, 0) = (_DWORD)v2;
    unint64_t v5 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly becaus e the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v10,  32,  v10);
  }

  uint64_t v9 = (uint8_t *)v5;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callback = (lambda at /Library/Caches/com. apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v5);
  if (v9 != buf) {
    free(v9);
  }
  return 0LL;
}

id sub_1011D69B8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5228))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
    {
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018A2A58);
      }
      uint64_t v4 = (os_log_s *)qword_101934478;
      if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2082;
        id v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A2A58);
        }
      }

      unint64_t v5 = (os_log_s *)qword_101934478;
      if (os_signpost_enabled((os_log_t)qword_101934478))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2082;
        id v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A2A58);
        }
      }

      uint64_t v6 = (os_log_s *)qword_101934478;
      if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2082;
        id v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
    }

    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

CLCppContainer *sub_1011D6C68(const void *a1)
{
  id v2 = operator new(0x140uLL);
  memcpy(v2, a1, 0x140uLL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1011D6CF0;
  v4[3] = &unk_10181D3D0;
  v4[4] = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v2,  v4,  0LL,  320LL);
}

void sub_1011D6CF0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

void sub_1011D6DA4(id a1)
{
  qword_1019A0688 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLNearbydInterfaceManagerSilo");
}

void sub_1011D701C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2AE8);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#NearbydIfMgr IDS service failed to initialize, Error:%{public, location:escape_only}@}",  (uint8_t *)&v8,  0x1Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2AE8);
      }
    }

    unint64_t v5 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#NearbydIfMgr IDS service failed to initialize",  "{msg%{public}.0s:#NearbydIfMgr IDS service failed to initialize, Error:%{public, location:escape_only}@}",  (uint8_t *)&v8,  0x1Cu);
    }
  }

  else
  {
    [*(id *)(a1 + 32) setService:a2];
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2AE8);
    }
    uint64_t v7 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#NearbydIfMgr,IDS became available so resuming silo}",  (uint8_t *)&v8,  0x12u);
    }

    [*(id *)(a1 + 40) resume];
  }

void sub_1011D7444(_Unwind_Exception *a1)
{
}

void sub_1011D7498(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {

    sub_100352B38(*(void **)(v2 + 24));
    operator delete((void *)v2);
  }

void sub_1011D7A30(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1011D7A5C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013E4828;
      v1[3] = unk_1013E4838;
      v1[4] = xmmword_1013E4848;
      v1[0] = xmmword_1013E4808;
      v1[1] = unk_1013E4818;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1011D7B30(_Unwind_Exception *a1)
{
}

float sub_1011D7B48()
{
  unsigned __int8 v0 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:");
  uint64_t v1 = -[NSCalendar components:fromDate:]( +[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"),  "components:fromDate:",  252LL,  v0);
  id v2 = -[NSDateComponents copy](v1, "copy");
  [v2 setDay:1];
  [v2 setMonth:1];
  unint64_t v3 =  -[NSCalendar initWithCalendarIdentifier:]( objc_alloc(&OBJC_CLASS___NSCalendar),  "initWithCalendarIdentifier:",  NSCalendarIdentifierGregorian);
  uint64_t v4 = -[NSCalendar components:fromDate:toDate:options:]( v3,  "components:fromDate:toDate:options:",  16LL,  -[NSCalendar dateFromComponents:](v3, "dateFromComponents:", v2),  v0,  0LL);
  double v5 = (double)-[NSDateComponents year](v1, "year");
  double v6 = fabs((double)(-[NSDateComponents day](v4, "day") + 1));
  return v6 / dbl_1013E4860[(-[NSDateComponents year](v1, "year") & 3) == 0] + v5;
}

void sub_1011D7C48(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  uint64_t v31 = 0LL;
  double v6 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  else {
    uint64_t v7 = (uint64_t *)*a1;
  }
  int v8 = -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:]( v6,  "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",  +[NSURL fileURLWithPath:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7)),  0LL,  4LL,  &v31);
  if (v31)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2B08);
    }
    int v9 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      else {
        __int16 v10 = (uint64_t *)*a1;
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v38 = 2114;
      uint64_t v39 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Unable to list files at path: %{public}s, error, %{public}@",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018A2B08);
      }
      else {
        __int16 v11 = (uint64_t *)*a1;
      }
      int v33 = 136446466;
      uint64_t v34 = v11;
      __int16 v35 = 2114;
      uint64_t v36 = v31;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  1LL,  "Unable to list files at path: %{public}s, error, %{public}@",  &v33,  22);
      uint64_t v13 = (char *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static std::vector<std::string> CLLegacyFileManager::listFilesWithExt(const std::string &, const std::string &)",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }
  }

  else
  {
    uint64_t v14 = v8;
    else {
      __int16 v15 = (uint64_t *)*a2;
    }
    uint64_t v16 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15);
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    id v17 = -[NSArray countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v27,  v32,  16LL);
    if (v17)
    {
      uint64_t v18 = *(void *)v28;
      do
      {
        for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v18) {
            objc_enumerationMutation(v14);
          }
          uint64_t v20 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
          if (!objc_msgSend(objc_msgSend(v20, "pathExtension"), "compare:options:", v16, 1))
          {
            int v21 = (char *)[v20 fileSystemRepresentation];
            *(void *)std::string buf = v21;
            unint64_t v22 = a3[1];
            if (v22 >= a3[2])
            {
              uint64_t v23 = sub_101170764(a3, (char **)buf);
            }

            else
            {
              sub_1010DDBC0((void *)a3[1], v21);
              uint64_t v23 = v22 + 24;
              a3[1] = v22 + 24;
            }

            a3[1] = v23;
          }
        }

        id v17 = -[NSArray countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v27,  v32,  16LL);
      }

      while (v17);
    }

    int v24 = (const void **)a3[1];
    unint64_t v25 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *a3) >> 3));
    else {
      uint64_t v26 = v25;
    }
    sub_101170868(*a3, v24, (uint64_t)&v33, v26, 1);
  }

void sub_1011D7FDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void **a41)
{
}

void sub_1011D8018(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1011D8310(id a1)
{
  qword_1019A06A0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLInternalServiceSilo");
}

void sub_1011D8738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1011D8AC8(id a1)
{
  qword_1019A06B0 =  +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CLLocationInternalServiceProtocol);
  objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v2 = v1;
  objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v4 = v3;
  objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v6 = v5;
  objc_opt_class(&OBJC_CLASS___NSData);
  uint64_t v8 = v7;
  objc_opt_class(&OBJC_CLASS___NSDate);
  uint64_t v10 = v9;
  objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v12 = v11;
  *(void *)&double v13 = objc_opt_class(&OBJC_CLASS___CLLocation).n128_u64[0];
  __int16 v15 = +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v2, v13, v4, v6, v8, v10, v12, v14, 0LL);
  [(id)qword_1019A06B0 setClasses:v15 forSelector:"notifyPassKitPayment:transaction:info:" argumentIndex:2 ofReply:0];
}

void sub_1011D8BC8(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018A2D28);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Spi, Connection interrupted for process, process:%{public}d}",  (uint8_t *)v4,  0x18u);
  }

void sub_1011D8CB0(uint64_t a1)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018A2D28);
  }
  uint64_t v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Spi, Connection invalidated for process, process:%{public}d}",  (uint8_t *)v4,  0x18u);
  }

void sub_1011D8DD8(id a1)
{
  qword_1019A06C0 = objc_alloc_init(&OBJC_CLASS___CLIntersiloDelegate);
}

void sub_1011D8E3C(id a1)
{
  qword_1019A06D0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"MIGResponseSilo");
}

void sub_1011D91E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011D95A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011D9B1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011D9ED0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011D9F10(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    int v3 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.locationd.internalservice.errorDomain",  0LL,  0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_1011DA498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  if (__p) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1011DA9EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_1011DAF44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_1011DB384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011DBD5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *__p, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011DBE2C(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  __int16 v5 = (void **)(a1 + 24);
  __int128 v6 = *(__int128 *)((char *)a2 + 24);
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = *((void *)a2 + 5);
  *(_OWORD *)__int16 v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  __int16 v7 = (void **)(a1 + 48);
  __int128 v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)__int16 v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  uint64_t v9 = (void **)(a1 + 72);
  __int128 v10 = *(__int128 *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)uint64_t v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  char v11 = *((_BYTE *)a2 + 98);
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = v11;
  uint64_t v12 = (void **)(a1 + 104);
  __int128 v13 = *(__int128 *)((char *)a2 + 104);
  *(void *)(a1 + 12sub_1011C5518(qword_1019A41A0, 0) = *((void *)a2 + 15);
  *(_OWORD *)uint64_t v12 = v13;
  *((_BYTE *)a2 + 127) = 0;
  *((_BYTE *)a2 + 104) = 0;
  uint64_t v14 = (void **)(a1 + 128);
  __int128 v15 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)uint64_t v14 = v15;
  *((_BYTE *)a2 + 151) = 0;
  *((_BYTE *)a2 + 128) = 0;
  uint64_t v16 = (void **)(a1 + 152);
  __int128 v17 = *(__int128 *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)uint64_t v16 = v17;
  *((_BYTE *)a2 + 175) = 0;
  *((_BYTE *)a2 + 152) = 0;
  __int16 v18 = *((_WORD *)a2 + 88);
  *(_BYTE *)(a1 + 178) = *((_BYTE *)a2 + 178);
  *(_WORD *)(a1 + 176) = v18;
  return a1;
}

id sub_1011DBFBC(__int128 *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768LL;
  v3[2] = sub_1011F6C5C;
  v3[3] = &unk_1018480C0;
  sub_1011F69B0((char *)&v4, a1);
  id v1 = [v3 copy];
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  return v1;
}

void sub_1011DC0A8(_Unwind_Exception *a1)
{
}

void sub_1011DC490( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011DCCF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, os_activity_scope_state_s state, char a50)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1011F6920((uint64_t)&a50);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

id sub_1011DCD7C(uint64_t a1)
{
  id v1 = -[NSXPCConnection valueForEntitlement:]( +[NSXPCConnection currentConnection](&OBJC_CLASS___NSXPCConnection, "currentConnection"),  "valueForEntitlement:",  a1);
  if (v1 && (uint64_t v2 = v1, objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v2, v3) & 1) != 0)) {
    return [v2 BOOLValue];
  }
  else {
    return 0LL;
  }
}

void sub_1011DD1F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, os_activity_scope_state_s state, char a23)
{
  _Unwind_Resume(a1);
}

void sub_1011DD4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1011DD79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1011DDC00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011DE000( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011DE70C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, os_activity_scope_state_s state, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Unwind_Resume(a1);
}

void sub_1011DE8E8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011DEF90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Unwind_Resume(a1);
}

void sub_1011DF164(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011DF778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, os_activity_scope_state_s state, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
  _Unwind_Resume(a1);
}

void sub_1011DFB18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011E0138( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_1011E0508( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011E0850( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011E0BB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011E0DC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011E10B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_1011E1428( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, os_activity_scope_state_s state, char a21)
{
  _Unwind_Resume(a1);
}

void sub_1011E19B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_1011F6920((uint64_t)&a48);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1011E1DEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47, os_activity_scope_state_s state)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  sub_1011F6920(v49 - 256);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1011E1E5C(uint64_t a1, int a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018A2D28);
  }
  __int128 v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int128 v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#UsageWin, setting incidentalUseMode, to:%{public}d}",  (uint8_t *)v6,  0x18u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011E28DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, os_activity_scope_state_s state, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Unwind_Resume(a1);
}

double sub_1011E2990@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 151) < 0)
  {
    if (*(void *)(a1 + 136))
    {
LABEL_3:
      sub_100FE370C(a1);
      sub_10051050C((const void **)(a1 + 104), 40, (uint64_t)&v30);
      sub_100FE370C(a1);
      int v4 = *(char *)(a1 + 151);
      if (v4 >= 0) {
        char v5 = (const std::string::value_type *)(a1 + 128);
      }
      else {
        char v5 = *(const std::string::value_type **)(a1 + 128);
      }
      if (v4 >= 0) {
        std::string::size_type v6 = *(unsigned __int8 *)(a1 + 151);
      }
      else {
        std::string::size_type v6 = *(void *)(a1 + 136);
      }
      __int16 v7 = std::string::append(&v30, v5, v6);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      std::string::push_back(&v28, 41);
      v31[0] = v28.__r_.__value_.__l.__size_;
      std::string::size_type v9 = v28.__r_.__value_.__r.__words[0];
      *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 size = v28.__r_.__value_.__s.__size_;
      memset(&v28, 0, sizeof(v28));
      if ((char)__p.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v9;
        __p.__r_.__value_.__l.__size_ = v31[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
        __p.__r_.__value_.__s.__size_ = size;
      }

      else
      {
        __p.__r_.__value_.__r.__words[0] = v9;
        __p.__r_.__value_.__l.__size_ = v31[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v31 + 7);
        __p.__r_.__value_.__s.__size_ = size;
      }

      if ((char)v30.__r_.__value_.__s.__size_ < 0)
      {
        uint64_t v20 = (void *)v30.__r_.__value_.__r.__words[0];
        goto LABEL_38;
      }

      goto LABEL_44;
    }
  }

  else if (*(_BYTE *)(a1 + 151))
  {
    goto LABEL_3;
  }

  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 95)) {
      goto LABEL_14;
    }
LABEL_40:
    sub_100FE370C(a1);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(void *)(a1 + 112)) {
        goto LABEL_42;
      }
    }

    else if (*(_BYTE *)(a1 + 127))
    {
LABEL_42:
      sub_100FE370C(a1);
      int v21 = (const std::string *)(a1 + 104);
      goto LABEL_43;
    }

    int v21 = (const std::string *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      if (*(void *)(a1 + 56)) {
        goto LABEL_43;
      }
    }

    else if (*(_BYTE *)(a1 + 71))
    {
      goto LABEL_43;
    }

    int v21 = (const std::string *)(a1 + 24);
    else {
      uint64_t v26 = *(unsigned __int8 *)(a1 + 47);
    }
    if (!v26) {
      goto LABEL_44;
    }
LABEL_43:
    std::string::operator=(&__p, v21);
    goto LABEL_44;
  }

  if (!*(void *)(a1 + 80)) {
    goto LABEL_40;
  }
LABEL_14:
  else {
    size_t v11 = *(void *)(a1 + 56);
  }
  uint64_t v12 = &v28;
  sub_1000392EC((uint64_t)&v28, v11 + 2);
  if ((v28.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    else {
      char v13 = *(const void **)(a1 + 48);
    }
    memmove(v12, v13, v11);
  }

  strcpy((char *)v12 + v11, "::");
  int v14 = *(char *)(a1 + 95);
  if (v14 >= 0) {
    char v15 = (const std::string::value_type *)(a1 + 72);
  }
  else {
    char v15 = *(const std::string::value_type **)(a1 + 72);
  }
  if (v14 >= 0) {
    std::string::size_type v16 = *(unsigned __int8 *)(a1 + 95);
  }
  else {
    std::string::size_type v16 = *(void *)(a1 + 80);
  }
  char v17 = std::string::append(&v28, v15, v16);
  std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
  v30.__r_.__value_.__r.__words[0] = v17->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v19 = v17->__r_.__value_.__s.__size_;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  __p.__r_.__value_.__r.__words[0] = v18;
  __p.__r_.__value_.__l.__size_ = v30.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
  __p.__r_.__value_.__s.__size_ = v19;
  if ((char)v28.__r_.__value_.__s.__size_ < 0)
  {
    uint64_t v20 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_38:
    operator delete(v20);
  }

void sub_1011E2D34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011E2DA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011E3710( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, os_activity_scope_state_s state, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011E37C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011E4124( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, os_activity_scope_state_s state, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011E41D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011E4B30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, os_activity_scope_state_s state, void *a31, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011E4BE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011E4FAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, os_activity_scope_state_s state, char a26)
{
  _Unwind_Resume(a1);
}

void sub_1011E5000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_101171C7C(a3 - a2);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018A2D28);
  }
  __int16 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v8 = *(void **)(a1 + 32);
    if (v8) {
      [v8 currentToken];
    }
    else {
      memset(v10, 0, sizeof(v10));
    }
    sub_100F4B1DC((uint64_t)v10, (uint64_t)buf);
    sub_1011E2990((uint64_t)buf, &v11);
    if (v30 < 0) {
      operator delete(__p);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(*(void **)v19);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(*(void **)&v16[4]);
    }
    if ((v16[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::string::size_type v9 = &v11;
    if ((v11.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 68290306;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    int v14 = "";
    __int16 v15 = 2082;
    *(void *)std::string::size_type v16 = "elapsed";
    *(_WORD *)&v16[8] = 2050;
    *(void *)&v16[10] = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    *(_WORD *)unsigned __int8 v19 = 2050;
    *(double *)&v19[2] = v6;
    __int16 v20 = 2082;
    int v21 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Spi, triggered migration, event:%{public, location:escape_only}s, begin_mach:%{p ublic}llu, end_mach:%{public}llu, elapsed_s:%{public}.09f, clientName:%{public, location:escape_only}s}",  buf,  0x44u);
  }

void sub_1011E5200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1011E521C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1011E5290;
  v4[3] = &unk_101868498;
  __int128 v5 = *(_OWORD *)(a1 + 40);
  return [v2 performMigrationWithReply:v4];
}

uint64_t sub_1011E5290(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLDaemonStartedNotification, 0LL, 0LL, 1u);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1011E55A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_1011E589C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_1011E5D14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52)
{
  _Unwind_Resume(a1);
}

void sub_1011E6070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_1011E6C58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, os_activity_scope_state_s state, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  a39 = &a25;
  sub_1006684D8((void ***)&a39);
  sub_1011F6920((uint64_t)&a63);
  sub_1002A5590(&a32);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1011E740C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, os_activity_scope_state_s state, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
  _Unwind_Resume(a1);
}

void sub_1011E7FAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__n128 sub_1011E808C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x380], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 80);
  __int128 v4 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x380], 8) = v5;
  *(_OWORD *)(a1 + 8sub_1011C5518(qword_1019A41A0, 0) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v7 = *(_OWORD *)(a2 + 160);
  __int128 v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 18_Block_object_dispose(&STACK[0x380], 8) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 16sub_1011C5518(qword_1019A41A0, 0) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void sub_1011E80C4(uint64_t a1, int a2, uint64_t a3)
{
  (*(void (**)(void *__return_ptr, uint64_t))(a3 + 16))(v26, a3);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_1018A2D28);
  }
  __int128 v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 68289795LL;
    __int16 v28 = 2082;
    __int128 v29 = "";
    __int16 v30 = 1026;
    *(_DWORD *)uint64_t v31 = a2;
    *(_WORD *)&v31[4] = 1040;
    *(_DWORD *)&v31[6] = 156;
    __int16 v32 = 2097;
    int v33 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#SPI getLocation #cclp, gotLocation:%{public}hhd, location:%{private, location:CL ClientLocation}.*P}",  (uint8_t *)&buf,  0x28u);
  }

  if (a2 && *(double *)((char *)&v26[2] + 4) > 0.0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018A2D08);
    }
    double v6 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100FE3FB4(a1 + 48, (uint64_t)__p);
      __int128 v7 = v25 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282LL;
      __int16 v28 = 2082;
      __int128 v29 = "";
      __int16 v30 = 2082;
      *(void *)uint64_t v31 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:markReceivingLocationInformation, Client:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v8 = *(void **)(a1 + 32);
    sub_1011F69B0((char *)v10, (__int128 *)(a1 + 48));
    [v8 markReceivingLocationInformation:sub_1011DBFBC((__int128 *)v10)];
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v26, 156LL);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    std::string::size_type v9 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.locationd.internalservice.errorDomain",  0LL,  0LL);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1011E83BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1011E83D8(uint64_t a1, uint64_t a2)
{
  return sub_1011F69B0((char *)(a1 + 48), (__int128 *)(a2 + 48));
}

uint64_t sub_1011E83E4(uint64_t a1)
{
  return sub_1011F6920(a1 + 48);
}

__n128 sub_1011E83EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    [a2 clientLocation];
  }

  else
  {
    __int128 v12 = 0u;
    memset(v13, 0, 28);
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    __int128 v5 = 0u;
  }

  __int128 v3 = *(_OWORD **)(*(void *)(a1 + 40) + 8LL);
  v3[5] = v7;
  v3[10] = v12;
  v3[11] = v13[0];
  *(_OWORD *)((char *)v3 + 18_Block_object_dispose(&STACK[0x380], 8) = *(_OWORD *)((char *)v13 + 12);
  v3[6] = v8;
  v3[7] = v9;
  _WORD v3[8] = v10;
  v3[9] = v11;
  v3[3] = v5;
  void v3[4] = v6;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  return result;
}

void sub_1011E8C10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Unwind_Resume(a1);
}

void sub_1011E8CD8(uint64_t a1, uint64_t a2)
{
}

void sub_1011E8CE8(uint64_t a1)
{
}

void *sub_1011E8CF4(void *result, uint64_t a2, void *a3)
{
  *(void *)(*(void *)(result[4] + 8LL) + 40LL) = a2;
  if (!a2) {
    return [a3 getBytes:*(void *)(result[5] + 8) + 48 length:156];
  }
  return result;
}

void sub_1011E91D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011E96C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_1011E9BA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_1011EA3B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31, uint64_t a32, os_activity_scope_state_s state)
{
  if (__p) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1011EA9F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
  _Unwind_Resume(a1);
}

void sub_1011EADD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011EAE10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011EB1A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011EB1E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011EB524( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011EBC08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1011ED574( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011ED638(uint64_t a1)
{
  uint64_t v13 = 0LL;
  if ([*(id *)(a1 + 32) removeItemAtPath:*(void *)(a1 + 40) error:&v13])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018A2D28);
    }
    __int128 v2 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v19 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "getPipelinedCacheWithReply %@ deleted",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018A2D28);
      }
      uint64_t v4 = *(void *)(a1 + 40);
      int v14 = 138412290;
      uint64_t v15 = v4;
      double v5 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  1LL,  "getPipelinedCacheWithReply %@ deleted",  &v14,  12);
      __int128 v7 = v6;
      sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLInternalService getPipelinedCacheWithReply:]_block_invoke", "%s\n", v5);
LABEL_19:
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018A2D28);
    }
    __int128 v8 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v19 = v9;
      __int16 v20 = 2112;
      uint64_t v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "getPipelinedCacheWithReply removal of %@ FAILED with error %@",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018A2D28);
      }
      uint64_t v10 = *(void *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      double v11 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  16LL,  "getPipelinedCacheWithReply removal of %@ FAILED with error %@",  &v14,  22);
      __int128 v7 = v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLInternalService getPipelinedCacheWithReply:]_block_invoke",  "%s\n",  v11);
      goto LABEL_19;
    }
  }

void sub_1011EE3EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,os_activity_scope_state_s state,char a60)
{
  _Unwind_Resume(a1);
}

void sub_1011EECC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, os_activity_scope_state_s state, char a50)
{
  _Unwind_Resume(a1);
}

void sub_1011EF590( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, os_activity_scope_state_s state, char a50)
{
  _Unwind_Resume(a1);
}

void sub_1011EF7A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_1011EF7BC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v4 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", a3, 320LL);
  }
  else {
    uint64_t v4 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.locationd.internalservice.errorDomain",  0LL,  0LL);
  }
  double v5 = v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1011EFCD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F099C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1011F0E6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, os_activity_scope_state_s a14)
{
  _Unwind_Resume(a1);
}

void sub_1011F11D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_1011F1A74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_1011F2390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *__p, uint64_t a41, uint64_t a42, void *a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_1011F27A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F3148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, void *a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_1011F3520( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F3560(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018A2D28);
    }
    __int128 v7 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      uint64_t v19 = a3;
      __int16 v20 = 2048;
      uint64_t v21 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "TimeSyncWithReplyBlock received TimeSync machTimestamp,%llu,oscarTimestamp,%llu",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018A2D28);
      }
      int v14 = 134218240;
      uint64_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = a4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "TimeSyncWithReplyBlock received TimeSync machTimestamp,%llu,oscarTimestamp,%llu",  &v14,  22);
      double v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLInternalService getOscarTimeSyncWithReplyBlock:]_block_invoke",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018A2D28);
    }
    __int128 v8 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "TimeSyncWithReplyBlock error getting TimeSync",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018A2D28);
      }
      LOWORD(v14) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "TimeSyncWithReplyBlock error getting TimeSync",  &v14,  2);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLInternalService getOscarTimeSyncWithReplyBlock:]_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    uint64_t v9 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.locationd.internalservice.errorDomain",  0LL,  0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  _Block_release(*(const void **)(a1 + 40));
}

void sub_1011F3B04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  _Unwind_Resume(a1);
}

void sub_1011F3F4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F416C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011F4380( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011F471C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F4AD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F507C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F50C4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_1018A2D28);
    }
    uint64_t v3 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "#Spi, Unable to send configuration to Oscar",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018A2D28);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "#Spi, Unable to send configuration to Oscar",  v7,  2);
      __int128 v6 = (uint8_t *)v5;
      sub_10029211C("Generic", 1LL, 0, 0LL, "-[CLInternalService configure:replyBlock:]_block_invoke", "%s\n", v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    uint64_t v4 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"com.apple.locationd.internalservice.errorDomain",  0LL,  0LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  _Block_release(*(const void **)(a1 + 32));
}

void sub_1011F5580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F5858( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F5A48(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_1011F5EA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_1011F6820( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1011F68C8(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1011F68F4(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_1011F6920(uint64_t a1)
{
  return a1;
}

char *sub_1011F69B0(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_1010DD48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + _Block_object_dispose(&STACK[0x230], 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  if (*((char *)a2 + 95) < 0)
  {
    sub_1010DD48C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 72);
    *((void *)__dst + 1sub_1011C5518(qword_1019A41A0, 1) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }

  __int16 v8 = *((_WORD *)a2 + 48);
  __dst[98] = *((_BYTE *)a2 + 98);
  *((_WORD *)__dst + 4_Block_object_dispose(&STACK[0x230], 8) = v8;
  if (*((char *)a2 + 127) < 0)
  {
    sub_1010DD48C(__dst + 104, *((void **)a2 + 13), *((void *)a2 + 14));
  }

  else
  {
    __int128 v9 = *(__int128 *)((char *)a2 + 104);
    *((void *)__dst + 15) = *((void *)a2 + 15);
    *(_OWORD *)(__dst + 104) = v9;
  }

  if (*((char *)a2 + 151) < 0)
  {
    sub_1010DD48C(__dst + 128, *((void **)a2 + 16), *((void *)a2 + 17));
  }

  else
  {
    __int128 v10 = a2[8];
    *((void *)__dst + 1_Block_object_dispose(&STACK[0x230], 8) = *((void *)a2 + 18);
    *((_OWORD *)__dst + _Block_object_dispose(&STACK[0x230], 8) = v10;
  }

  double v11 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_1010DD48C(v11, *((void **)a2 + 19), *((void *)a2 + 20));
  }

  else
  {
    __int128 v12 = *(__int128 *)((char *)a2 + 152);
    *((void *)__dst + 2sub_1011C5518(qword_1019A41A0, 1) = *((void *)a2 + 21);
    *(_OWORD *)double v11 = v12;
  }

  __int16 v13 = *((_WORD *)a2 + 88);
  __dst[178] = *((_BYTE *)a2 + 178);
  *((_WORD *)__dst + 8_Block_object_dispose(&STACK[0x230], 8) = v13;
  return __dst;
}

void sub_1011F6B50(_Unwind_Exception *exception_object)
{
}

uint64_t *sub_1011F6BE4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = mach_absolute_time();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v3, v4);
  return a1;
}

void sub_1011F6C2C(id a1)
{
  qword_101934498 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

char *sub_1011F6C5C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1011F69B0(a2, (__int128 *)(a1 + 32));
}

void sub_1011F6C68()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_1011F6CCC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_1011F6D40(_Unwind_Exception *a1)
{
}

void sub_1011F6D58()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_1013E48B0;
      v1[3] = unk_1013E48C0;
      v1[4] = xmmword_1013E48D0;
      v1[0] = xmmword_1013E4890;
      v1[1] = unk_1013E48A0;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1011F6E2C(_Unwind_Exception *a1)
{
}

uint64_t sub_1011F6E44(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10120E684((unsigned __int8 *)a1, a2);
  *(void *)uint64_t v3 = off_1018A2D98;
  uint64_t v4 = (uint64_t)(v3 + 256);
  sub_100D4D420((uint64_t)(v3 + 256));
  *(_WORD *)(a1 + 344) = 0;
  int v5 = sub_1003BEE74(a1 + 112, "GyroCalibration", (uint64_t)"1475");
  uint64_t v6 = sub_1006E27E8();
  sub_100413284(v6, buf);
  int v7 = sub_1002A6F64(*(uint64_t *)buf, "SensorReplayMode", &v16) ^ 1;
  if (v16) {
    int v8 = v7;
  }
  else {
    int v8 = 1;
  }
  __int128 v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (sub_1003B59A0(a1 + 112, "GyroCalibration", (const char **)&off_1018A2F10, 0LL, v8))
  {
    sub_1011F8A74(v4);
    sub_1011F714C(a1);
LABEL_18:
    sub_100D4D3DC(v4);
    return a1;
  }

  if (v5)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    __int128 v12 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Removing outliers from database.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      v15[0] = 0;
      int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Removing outliers from database.",  v15,  2);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLGyroCalibrationDatabaseLocal::CLGyroCalibrationDatabaseLocal(id<CLIntersiloUniverse>)",  "%s\n",  v14);
    }

    sub_1011F77CC(a1, v4);
    sub_100D4D7D4(v4);
    sub_1011F714C(a1);
    sub_1003BFCA4(a1 + 112, "GyroCalibration");
    goto LABEL_18;
  }

  return a1;
}

void sub_1011F70FC(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1018A3778;
  sub_1003B3930(v1 + 14);
  sub_1003953A8(v1);
  _Unwind_Resume(a1);
}

void sub_1011F714C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 288))
  {
    sub_1003C0454(a1 + 112);
    sub_10000CE18((uint64_t)buf);
    uint64_t v2 = sub_10000CF44(&v36, (uint64_t)"DELETE FROM ", 12LL);
    sub_10000CF44(v2, (uint64_t)"GyroCalibration", 15LL);
    std::stringbuf::str((std::stringbuf::string_type *)v32, &v37);
    if (v32[23] >= 0) {
      uint64_t v3 = v32;
    }
    else {
      uint64_t v3 = *(char **)v32;
    }
    sub_1003C0D54(a1 + 112, v3, v27);
    uint64_t v4 = v27[0];
    v27[0] = 0LL;
    if ((v32[23] & 0x80000000) != 0) {
      operator delete(*(void **)v32);
    }
    int v5 = (sqlite3_stmt *)sub_100019240(v4);
    sub_1003BB2BC(a1 + 112, v5);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v36 = v6;
    std::streambuf::~streambuf(&v37);
    std::ios::~ios(&v38);
    *(_OWORD *)__int16 v32 = *(_OWORD *)&off_1018A2EC8;
    *(_OWORD *)&v32[16] = *(_OWORD *)&off_1018A2ED8;
    __int128 v33 = off_1018A2EE8;
    uint64_t v30 = sub_1003C0BC0(a1 + 112, "GyroCalibration", (const char **)v32, 0);
    uint64_t v31 = v7;
    if (sub_100B14D64(&v30))
    {
      sub_100B14CF8(&v30, &v29);
      sub_100D4E43C(a1 + 256, buf);
      sub_100D4E4BC(a1 + 256, v27);
      double v8 = 0.0;
      while (*(void *)buf != v27[0]
           || v35 != v27[1]
           || *(void *)buf != v35 && v37.__vftable != (std::stringbuf_vtbl *)v27[3])
      {
        __int128 v9 = (sqlite3_stmt *)sub_100019240(v29);
        sub_1011F88D8(buf);
        sub_1003B7480(v9, 1, *v10);
        unint64_t v11 = (sqlite3_stmt *)sub_100019240(v29);
        sub_1003B7480(v11, 2, v8);
        __int128 v12 = (sqlite3_stmt *)sub_100019240(v29);
        sub_1011F88D8(buf);
        sub_1003B7480(v12, 3, *(float *)(v13 + 4));
        int v14 = (sqlite3_stmt *)sub_100019240(v29);
        sub_1011F88D8(buf);
        sub_1003B7480(v14, 4, *(float *)(v15 + 8));
        BOOL v16 = (sqlite3_stmt *)sub_100019240(v29);
        sub_1011F88D8(buf);
        sub_1003B7480(v16, 5, *(float *)(v17 + 12));
        uint64_t v18 = (sqlite3_stmt *)sub_100019240(v29);
        sub_1003BB2BC(a1 + 112, v18);
        double v8 = v8 + 1.0;
        sub_1011F892C(buf);
      }

      char v22 = v28;
      __int16 v28 = 0LL;
      if (v22) {
        operator delete(v22);
      }
      locale = v37.__loc_.__locale_;
      v37.__loc_.__locale_ = 0LL;
      if (locale) {
        operator delete(locale);
      }
      uint64_t v24 = v29;
      uint64_t v29 = 0LL;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
      }
      sub_1003C1060(a1 + 112, v30, v31);
      sub_1003C05BC(a1 + 112);
      else {
        uint64_t v25 = *(void *)(a1 + 200);
      }
      sub_1003C1EC0(a1 + 112, v25);
    }

    else
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      __int16 v20 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "Could not prepare cached insert statement",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3030);
        }
        LOWORD(v27[0]) = 0;
        uint64_t v21 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Could not prepare cached insert statement",  v27,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocal::writeCacheToDatabase()",  "%s\n",  v21);
      }
    }
  }

  else if ((sub_1004F97F4() & 0x80000) != 0)
  {
    *(_BYTE *)(a1 + 344) = 1;
  }

  else
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    uint64_t v19 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Attempting to write zero entries to Gyro database.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      *(_WORD *)__int16 v32 = 0;
      char v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Attempting to write zero entries to Gyro database.",  v32,  2);
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLGyroCalibrationDatabaseLocal::writeCacheToDatabase()", "%s\n", v26);
    }

    *(_BYTE *)(a1 + 344) = 0;
  }

void sub_1011F7728( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8LL))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011F77CC(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 288) >= 1)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    uint64_t v4 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Reading database into non-empty cache.",  (uint8_t *)&buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      LOWORD(v52.__r_.__value_.__l.__data_) = 0;
      int v43 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Reading database into non-empty cache.",  &v52,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocal::cacheAllEntries(CLGyroCalibrationCache &)",  "%s\n",  (const char *)v43);
      if (v43 != &buf) {
        free(v43);
      }
    }
  }

  sub_10000CE18((uint64_t)&buf);
  int v5 = sub_10000CF44(&buf.__r_.__value_.__l.__cap_, (uint64_t)"SELECT ", 7LL);
  uint64_t v6 = sub_10000CF44(v5, (uint64_t)"Temperature", 11LL);
  int v7 = sub_10000CF44(v6, (uint64_t)", ", 2LL);
  double v8 = sub_10000CF44(v7, (uint64_t)"Time", 4LL);
  __int128 v9 = sub_10000CF44(v8, (uint64_t)", ", 2LL);
  __int128 v10 = sub_10000CF44(v9, (uint64_t)"BiasX", 5LL);
  unint64_t v11 = sub_10000CF44(v10, (uint64_t)", ", 2LL);
  __int128 v12 = sub_10000CF44(v11, (uint64_t)"BiasY", 5LL);
  uint64_t v13 = sub_10000CF44(v12, (uint64_t)", ", 2LL);
  int v14 = sub_10000CF44(v13, (uint64_t)"BiasZ", 5LL);
  uint64_t v15 = sub_10000CF44(v14, (uint64_t)" FROM ", 6LL);
  BOOL v16 = sub_10000CF44(v15, (uint64_t)"GyroCalibration", 15LL);
  uint64_t v17 = sub_10000CF44(v16, (uint64_t)" WHERE ", 7LL);
  uint64_t v18 = sub_10000CF44(v17, (uint64_t)"Temperature", 11LL);
  uint64_t v19 = sub_10000CF44(v18, (uint64_t)">=? AND ", 8LL);
  __int16 v20 = sub_10000CF44(v19, (uint64_t)"Temperature", 11LL);
  uint64_t v21 = sub_10000CF44(v20, (uint64_t)"<=? ORDER BY ", 13LL);
  char v22 = sub_10000CF44(v21, (uint64_t)"Temperature", 11LL);
  char v23 = sub_10000CF44(v22, (uint64_t)",", 1LL);
  sub_10000CF44(v23, (uint64_t)"Time", 4LL);
  std::stringbuf::str(&v52, &v50);
  if ((v52.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v24 = &v52;
  }
  else {
    uint64_t v24 = (std::stringbuf::string_type *)v52.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(a1 + 112, (char *)v24, v48);
  uint64_t v25 = *(void *)v48;
  *(void *)BOOL v48 = 0LL;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
  buf.__r_.__value_.__l.__cap_ = v26;
  std::streambuf::~streambuf(&v50);
  std::ios::~ios(&v51);
  __int128 v27 = (sqlite3_stmt *)sub_100019240(v25);
  sub_1003B7480(v27, 1, 1.17549435e-38);
  __int16 v28 = (sqlite3_stmt *)sub_100019240(v25);
  sub_1003B7480(v28, 2, 3.40282347e38);
  while (1)
  {
    uint64_t v29 = (sqlite3_stmt *)sub_100019240(v25);
    int v30 = sqlite3_step(v29);
    if (v30 != 100) {
      break;
    }
    uint64_t v31 = (sqlite3_stmt *)sub_100019240(v25);
    float v32 = sqlite3_column_double(v31, 2);
    *(float *)&buf.__r_.__value_.__l.__data_ = v32;
    __int128 v33 = (sqlite3_stmt *)sub_100019240(v25);
    float v34 = sqlite3_column_double(v33, 3);
    *((float *)buf.__r_.__value_.__r.__words + sub_1011C5518(qword_1019A41A0, 1) = v34;
    uint64_t v35 = (sqlite3_stmt *)sub_100019240(v25);
    float v36 = sqlite3_column_double(v35, 4);
    *(float *)&buf.__r_.__value_.__r.__words[1] = v36;
    std::stringbuf v37 = (sqlite3_stmt *)sub_100019240(v25);
    double v38 = sqlite3_column_double(v37, 0);
    *(float *)&double v38 = v38;
    sub_100D4D488(a2, (float32x2_t *)&buf, v38, v39);
  }

  if (v30 != 101)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    int v40 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      sub_1003C3A08(a1 + 112, &buf);
      int v41 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "SQL error: %{public}s", (uint8_t *)&v52, 0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      int v44 = off_101934598;
      sub_1003C3A08(a1 + 112, &v52);
      if ((v52.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v45 = &v52;
      }
      else {
        int v45 = (std::stringbuf::string_type *)v52.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)BOOL v48 = 136446210;
      *(void *)&v48[4] = v45;
      LODWORD(v47) = 12;
      int v46 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v44,  17LL,  "SQL error: %{public}s",  v48,  v47);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocal::cacheEntriesBetweenTemperatures(float, float, CLGyroCalibrationCache &)",  "%s\n",  (const char *)v46);
      if (v46 != &buf) {
        free(v46);
      }
    }
  }

  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  *(_BYTE *)(a1 + 344) = 1;
  return sub_1011F8230(a1);
}

void sub_1011F7DF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011F7E64(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4)
{
  float v4 = *(float *)&a3;
  if (!*(_BYTE *)(a1 + 344))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    int v7 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Insert into uncached database.", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      LOWORD(v2sub_1011C5518(qword_1019A41A0, 1) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Insert into uncached database.",  &v21,  2);
      int v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  if (fabsf(a2->f32[0]) > 75.0) {
    return 0LL;
  }
  if (fabsf(a2->f32[1]) > 75.0) {
    return 0LL;
  }
  a4.i32[0] = 1117126656;
  if (fabsf(a2[1].f32[0]) > 75.0) {
    return 0LL;
  }
  *(float *)&a3 = v4;
  sub_100D4D488(a1 + 256, a2, a3, a4);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3030);
  }
  __int128 v9 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = a2->f32[0];
    double v11 = a2->f32[1];
    double v12 = a2[1].f32[0];
    *(_DWORD *)std::string buf = 134349824;
    double v30 = v10;
    __int16 v31 = 2050;
    double v32 = v11;
    __int16 v33 = 2050;
    double v34 = v12;
    __int16 v35 = 2050;
    double v36 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CLGyroCalibrationDatabaseLocal insert x,%{public}f,y,%{public}f,z,%{public}f,temperature,%{public}f",  buf,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    double v15 = a2->f32[0];
    double v16 = a2->f32[1];
    double v17 = a2[1].f32[0];
    int v21 = 134349824;
    double v22 = v15;
    __int16 v23 = 2050;
    double v24 = v16;
    __int16 v25 = 2050;
    double v26 = v17;
    __int16 v27 = 2050;
    double v28 = v4;
    LODWORD(v2sub_1011C5518(qword_1019A41A0, 0) = 42;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "CLGyroCalibrationDatabaseLocal insert x,%{public}f,y,%{public}f,z,%{public}f,temperature,%{public}f",  &v21,  v20);
    uint64_t v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, float)",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  if (*(_BYTE *)(a1 + 345)) {
    sub_1011F714C(a1);
  }
  sub_1011F8230(a1);
  return 1LL;
}

uint64_t sub_1011F8230(uint64_t a1)
{
  int v4 = 1;
  unint64_t v5 = 0xFFEFFFFFFFFFFFFFLL;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 216LL))(a1, &v4);
  if ((_DWORD)result)
  {
    int v3 = 0;
    return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v3,  &v4,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

BOOL sub_1011F82D8(uint64_t a1, _DWORD *a2)
{
  if (!*(_BYTE *)(a1 + 344)) {
    sub_1011F77CC(a1, a1 + 256);
  }
  return sub_100D4D788(a1 + 256, a2);
}

uint64_t sub_1011F8314(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 344)) {
    *(_BYTE *)(a1 + 344) = 1;
  }
  sub_100D4D3DC(a1 + 256);
  return 1LL;
}

uint64_t sub_1011F8340(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 344)) {
    sub_1011F77CC(a1, a1 + 256);
  }
  return sub_10008CFEC(a1 + 256);
}

uint64_t sub_1011F8374(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 344)) {
    sub_1011F714C(a1);
  }
  return sub_1003954A0(a1);
}

uint64_t sub_1011F83A4(uint64_t result)
{
  *(_BYTE *)(result + 345) = 1;
  if (!*(_BYTE *)(result + 344)) {
    return sub_1011F77CC(result, result + 256);
  }
  return result;
}

uint64_t sub_1011F83C0(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    int v3 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Client registered, caching database", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      v7[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Client registered, caching database",  v7,  2);
      uint64_t v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGyroCalibrationDatabaseLocal::registerForNotificationInternal(const CLGyroCalibrationDatabase_Typ e::Notification &)",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    if (!*(_BYTE *)(a1 + 344)) {
      sub_1011F77CC(a1, a1 + 256);
    }
  }

  return 1LL;
}

uint64_t sub_1011F8570(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    int v3 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "No more clients, flushing cache to database",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      v11[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "No more clients, flushing cache to database",  v11,  2);
      int v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_T ype::Notification &)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    if (!*(_BYTE *)(a1 + 344))
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3030);
      }
      int v4 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Database should be cached", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3030);
        }
        v11[0] = 0;
        LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "Database should be cached",  v11,  v10);
        __int128 v9 = (uint8_t *)v8;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase _Type::Notification &)",  "%s\n",  v8);
        if (v9 != buf) {
          free(v9);
        }
      }

      sub_1011F714C(a1);
      sub_100D4D3DC(a1 + 256);
      *(_BYTE *)(a1 + 344) = 0;
    }
  }

  return 1LL;
}

uint64_t sub_1011F8850(uint64_t a1)
{
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 16) = v3;
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

float sub_1011F88D8(void *a1)
{
  if (!a1[4])
  {
    uint64_t v2 = (char *)operator new(0x10uLL);
    float result = (float)*(int *)(*a1 + 32LL);
    uint64_t v4 = (uint64_t *)a1[3];
    int v5 = *((_DWORD *)v4 + 2);
    uint64_t v6 = *v4;
    *(float *)uint64_t v2 = result;
    *(void *)(v2 + 4) = v6;
    *((_DWORD *)v2 + 3) = v5;
    a1[4] = v2;
  }

  return result;
}

void *sub_1011F892C(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = a1[3] + 12LL;
  a1[3] = v3;
  if (v3 - *v2 == 4092)
  {
    a1[2] = v2 + 1;
    uint64_t v3 = v2[1];
    a1[3] = v3;
  }

  uint64_t v4 = (void *)*a1;
  uint64_t v5 = *(void *)(*a1 + 48LL);
  if (*(void *)(*a1 + 56LL) == v5)
  {
    unint64_t v7 = 0LL;
  }

  else
  {
    unint64_t v6 = v4[10] + v4[9];
    unint64_t v7 = *(void *)(v5 + 8 * (v6 / 0x155)) + 12 * (v6 % 0x155);
  }

  if (v3 == v7)
  {
    double v8 = (void *)v4[1];
    if (v8)
    {
      do
      {
        __int128 v9 = v8;
        double v8 = (void *)*v8;
      }

      while (v8);
    }

    else
    {
      do
      {
        __int128 v9 = (void *)v4[2];
        BOOL v10 = *v9 == (void)v4;
        uint64_t v4 = v9;
      }

      while (!v10);
    }

    *a1 = v9;
    if (v9 != (void *)a1[1])
    {
      unint64_t v11 = v9[9];
      uint64_t v12 = v9[6];
      uint64_t v13 = (void *)(v12 + 8 * (v11 / 0x155));
      if (v9[7] == v12) {
        unint64_t v14 = 0LL;
      }
      else {
        unint64_t v14 = *v13 + 12 * (v11 % 0x155);
      }
      a1[2] = v13;
      a1[3] = v14;
    }
  }

  double v15 = (void *)a1[4];
  a1[4] = 0LL;
  if (v15) {
    operator delete(v15);
  }
  return a1;
}

void sub_1011F8A74(uint64_t a1)
{
  double v8 = 0LL;
  __int128 v9 = 0LL;
  uint64_t v10 = 0LL;
  sub_1006A42C8((void **)&v8);
  uint64_t v4 = v8;
  uint64_t v5 = v9;
  if (v8 != v9)
  {
    do
    {
      int v7 = *v4;
      unint64_t v6 = (float32x2_t *)(v4 + 1);
      LODWORD(v2) = v7;
      sub_100D4D488(a1, v6, v2, v3);
      uint64_t v4 = (_DWORD *)&v6[1] + 1;
    }

    while (v4 != v5);
    uint64_t v4 = v8;
  }

  if (v4)
  {
    __int128 v9 = v4;
    operator delete(v4);
  }

void sub_1011F8AEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011F8B0C(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    double v8 = 0LL;
    uint64_t v9 = a1 + 256;
  }

  else
  {
    double v8 = operator new(0x58uLL);
    sub_100D4D420((uint64_t)v8);
    sub_1011F8A74((uint64_t)v8);
    uint64_t v9 = (uint64_t)v8;
  }

  if (sub_100D4D788(v9, v19))
  {
    *a3 = v20;
    a3[1].f32[0] = v21;
    HIDWORD(v1sub_1011C5518(qword_1019A41A0, 0) = v20.i32[1];
    __asm { FMOV            V2.2S, #25.0 }

    *a2 = vmla_f32(v22, _D2, v20);
    *(float *)&double v10 = v23 + (float)(v21 * 25.0);
    a2[1].i32[0] = LODWORD(v10);
    uint64_t v16 = sub_100D4EB00(v9, a4, v10);
    if (!v8) {
      return v16;
    }
    goto LABEL_8;
  }

  uint64_t v16 = 0LL;
  if (v8)
  {
LABEL_8:
    double v17 = (void *)sub_100D4D440((uint64_t)v8);
    operator delete(v17);
  }

  return v16;
}

void sub_1011F8C28(_Unwind_Exception *a1)
{
}

uint64_t sub_1011F8C5C(uint64_t a1)
{
  uint64_t v1 = a1 + 256;
  sub_100D4E43C(a1 + 256, &v15);
  sub_100D4E4BC(v1, v13);
  uint64_t v2 = 0x80000000LL;
  while (v15 != v13[0] || v16 != v13[1] || v15 != v16 && v17 != v13[3])
  {
    sub_1011F88D8(&v15);
    uint64_t v4 = v3;
    float v5 = modff(fabsf(*(float *)(v3 + 4) * 256.0), &v19);
    float v6 = modff(fabsf(*(float *)(v4 + 8) * 256.0), &v19);
    float v7 = modff(fabsf(*(float *)(v4 + 12) * 256.0), &v19);
    if (v5 >= 0.001 && v5 <= 0.999 || v6 >= 0.001 && v6 <= 0.999 || v7 >= 0.001 && v7 <= 0.999)
    {
      sub_1011F88D8(&v15);
      int v9 = (int)*v8;
      else {
        uint64_t v2 = v2;
      }
    }

    sub_1011F892C(&v15);
  }

  double v10 = __p;
  std::string __p = 0LL;
  if (v10) {
    operator delete(v10);
  }
  unint64_t v11 = v18;
  uint64_t v18 = 0LL;
  if (v11) {
    operator delete(v11);
  }
  return v2;
}

void sub_1011F8DD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011F8E0C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1011F8E88;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019A0F78 != -1) {
    dispatch_once(&qword_1019A0F78, block);
  }
  return qword_1019A0F70;
}

void sub_1011F8E88(uint64_t a1)
{
  uint64_t v2 = sub_1006E27E8();
  sub_100413284(v2, &v15);
  HIBYTE(v14) = 0;
  char v3 = sub_1002A6F64(v15, "EnableGyroLinearCalibration", (BOOL *)&v14 + 7);
  BYTE6(v14) = 0;
  sub_1004F2598();
  int v4 = sub_1004F89A4();
  if ((sub_1002A6F64(v15, "EnableGyroNonlinearCalibration", (BOOL *)&v14 + 6) & 1) == 0) {
    BYTE6(v14) = v4 ^ 1;
  }
  BYTE5(v14) = 0;
  if ((sub_1002A6F64(v15, "EnableGyroMultiRunCalibration", (BOOL *)&v14 + 5) & 1) == 0) {
    BYTE5(v14) = v4 ^ 1;
  }
  unsigned int v5 = sub_1004F97F4();
  unsigned int v6 = v5;
  if ((v3 & 1) == 0) {
    HIBYTE(v14) = BYTE2(v5) & 1 & ~(_BYTE)v4;
  }
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3030);
  }
  float v7 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67241472;
    int v29 = v4;
    __int16 v30 = 1026;
    int v31 = BYTE6(v14);
    __int16 v32 = 1026;
    int v33 = HIBYTE(v14);
    __int16 v34 = 1026;
    int v35 = BYTE5(v14);
    __int16 v36 = 1026;
    int v37 = (v6 >> 17) & 1;
    __int16 v38 = 1026;
    int v39 = (v6 >> 14) & 1;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Creating GyroCalibrationDatabaseLocal with isNonUI,%{public}u, enableGyroNonlinearCalibration,%{public}u, enableGy roLinearCalibration,%{public}u,enableGyroMultiRunCalibration,%{public}u, gyroNonlinearity,%{public}u, gyroMultiRun Calibration,%{public}u",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3030);
    }
    v17[0] = 67241472;
    v17[1] = v4;
    __int16 v18 = 1026;
    int v19 = BYTE6(v14);
    __int16 v20 = 1026;
    int v21 = HIBYTE(v14);
    __int16 v22 = 1026;
    int v23 = BYTE5(v14);
    __int16 v24 = 1026;
    int v25 = (v6 >> 17) & 1;
    __int16 v26 = 1026;
    int v27 = (v6 >> 14) & 1;
    LODWORD(v14) = 38;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Creating GyroCalibrationDatabaseLocal with isNonUI,%{public}u, enableGyroNonlinearCalibration,%{publ ic}u, enableGyroLinearCalibration,%{public}u,enableGyroMultiRunCalibration,%{public}u, gyroNonlinear ity,%{public}u, gyroMultiRunCalibration,%{public}u",  v17,  v14);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLGyroCalibrationDatabase *CLGyroCalibrationDatabase::createInUniverse(id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v13);
  }

  if ((v6 & 0x20000) != 0 && BYTE6(v14))
  {
    double v8 = (char *)operator new(0x388uLL);
    sub_101219320((uint64_t)v8, *(void **)(a1 + 32));
LABEL_15:
    int v9 = v8 + 16;
    goto LABEL_22;
  }

  if (HIBYTE(v14))
  {
    int v9 = operator new(0x378uLL);
    sub_101221DB4((uint64_t)v9, *(void **)(a1 + 32));
  }

  else
  {
    if ((v6 & 0x4000) != 0 && BYTE5(v14))
    {
      double v8 = (char *)operator new(0xCB0uLL);
      sub_1011CB73C((uint64_t)v8, *(void **)(a1 + 32));
      goto LABEL_15;
    }

    int v9 = operator new(0x160uLL);
    sub_1011F6E44((uint64_t)v9, *(void **)(a1 + 32));
  }

void sub_1011F921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1011F9268(void *a1)
{
  uint64_t v1 = (void *)sub_1011F92C0(a1);
  operator delete(v1);
}

uint64_t sub_1011F927C()
{
  return 0LL;
}

uint64_t sub_1011F9284()
{
  return 0LL;
}

uint64_t sub_1011F928C()
{
  return 0LL;
}

void sub_1011F9294(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_1011F92C0(void *a1)
{
  *a1 = off_1018A2D98;
  sub_100D4D440((uint64_t)(a1 + 32));
  *a1 = off_1018A3778;
  sub_1003B3930(a1 + 14);
  return sub_1003953A8(a1);
}

void sub_1011F9A34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1011F9A70@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 getStartLocation];
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)((char *)a2 + 14sub_1011C5518(qword_1019A41A0, 0) = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }

  return result;
}

void sub_1011FA274( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  std::__shared_weak_count::~__shared_weak_count(v44);
  operator delete(v46);
  sub_1008EDE6C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1011FA45C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011FAFA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char *a24, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a24 = &a19;
  sub_1000129D4((void ***)&a24);
  _Unwind_Resume(a1);
}

void sub_1011FB6E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1011FBDA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_1011FC7B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1011FC8D4(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1011FC900(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A30A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011FC910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A30A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1011FC930(uint64_t a1)
{
  return sub_10111CCBC(a1 + 24);
}

uint64_t sub_1011FC93C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A06E0, (void *)&_mh_execute_header);
}

void sub_1011FCAF8(_Unwind_Exception *a1)
{
}

id sub_1011FCB0C(uint64_t a1, void *a2)
{
  return _[a2 onFaceCovered:a1];
}

id sub_1011FCB18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateMediatorNotification:a2 data:a3];
}

void sub_1011FCDE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1011FD1A4(id a1)
{
  qword_1019346A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_1011FD1D0(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_1018A3118;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1011FD2FC;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_1011FD310;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1011FD2D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1011FD2FC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1011FD310(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1011FD32C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011FD5D4(a1);
  operator delete(v1);
}

id sub_1011FD340(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3140);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v33 = (unint64_t)"N23CLWaterSubmersion_Types11FaceCoveredE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 24LL;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3140);
      }
      int v24 = 136315906;
      unint64_t v25 = (unint64_t)"N23CLWaterSubmersion_Types11FaceCoveredE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 24LL;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v24,  38,  v17,  LODWORD(v18[0]));
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::FaceCovered>::dispatchData(int, const voi d *, size_t) [T = CLWaterSubmersion_Types::FaceCovered]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1011FD628;
  v18[3] = &unk_10185F638;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v23;
  uint64_t v21 = v10;
  return [v13 async:v18];
}

uint64_t sub_1011FD5D4(uint64_t a1)
{
  *(void *)a1 = off_1018A3118;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1011FD628(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 72));
  }
  return result;
}

void sub_1011FD66C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1011FD698()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A06F8, (void *)&_mh_execute_header);
}

id sub_1011FDA4C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onElevationmetryNotification:a2 data:a3];
}

void sub_1011FDB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011FDC50(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_1011FDF18(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setIsCyclingWorkout:a2];
}

id sub_1011FE1FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessMachineNotification:a2 data:a3];
}

void sub_1011FE4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011FE68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011FE8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011FEA04(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1011FEE08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v20[47] < 0) {
    operator delete(*v21);
  }
  operator delete[](v20);
  sub_1011C07F8((uint64_t)v19);
  operator delete(v19);
  _Unwind_Resume(a1);
}

id sub_1011FEE6C(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAccessoryDeviceMotionData:a1 buffersize:a2];
}

id sub_1011FEE80(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAccessoryDeviceMotionConfig:a1 buffersize:a2];
}

void sub_1011FF584(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011FF720(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1011FF9D0(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_1011FF9FC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = off_1018A31D0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0LL;
  uint64_t v10 = (char *)operator new[](144LL * a4);
  if (a4)
  {
    uint64_t v11 = v10;
    do
    {
      *(void *)uint64_t v11 = 0LL;
      *((void *)v11 + sub_1011C5518(qword_1019A41A0, 1) = 0x3F80000000000000LL;
      *((_WORD *)v11 + 26) = 0;
      v11 += 144;
    }

    while (v11 != &v10[144 * a4]);
  }

  *(void *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x230], 8) = a4;
  v15[0] = 0LL;
  v15[1] = v15;
  v15[2] = 0x2020000000LL;
  char v16 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1011FFB74;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v15;
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = _Block_copy(aBlock);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _OWORD v13[2] = sub_1011FFB88;
  v13[3] = &unk_10182EFF0;
  void v13[4] = v15;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = _Block_copy(v13);
  _Block_object_dispose(v15, 8);
  return a1;
}

void sub_1011FFB4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1011FFB74(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1011FFB88(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1011FFBA4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011FFCBC(a1);
  operator delete(v1);
}

void *sub_1011FFBB8(void *result, uint64_t a2, _OWORD *a3)
{
  char v3 = (_OWORD *)(result[7] + 144LL * *((unsigned int *)result + 16));
  __int128 v4 = a3[4];
  __int128 v6 = a3[1];
  __int128 v5 = a3[2];
  v3[3] = a3[3];
  void v3[4] = v4;
  v3[1] = v6;
  v3[2] = v5;
  __int128 v7 = a3[8];
  __int128 v9 = a3[5];
  __int128 v8 = a3[6];
  v3[7] = a3[7];
  _WORD v3[8] = v7;
  v3[5] = v9;
  v3[6] = v8;
  _OWORD *v3 = *a3;
  unsigned int v10 = *((_DWORD *)result + 17);
  unsigned int v11 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v11;
  if (v11 >= v10)
  {
    uint64_t v12 = result;
    uint64_t v14 = result[3];
    uint64_t v13 = result[4];
    uint64_t v15 = result[6];
    uint64_t v16 = result[7];
    uint64_t v17 = (void *)result[2];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1011FFD1C;
    v20[3] = &unk_10184D6C8;
    v20[4] = v15;
    v20[5] = v14;
    unsigned int v21 = v11;
    v20[6] = v16;
    v20[7] = v13;
    [v17 async:v20];
    uint64_t v18 = *((unsigned int *)v12 + 17);
    uint64_t result = operator new[](144 * v18);
    if ((_DWORD)v18)
    {
      __int128 v19 = result;
      do
      {
        void *v19 = 0LL;
        v19[1] = 0x3F80000000000000LL;
        *((_WORD *)v19 + 26) = 0;
        v19 += 18;
      }

      while (v19 != &result[18 * v18]);
    }

    v12[7] = result;
    *((_DWORD *)v12 + 16) = 0;
  }

  return result;
}

uint64_t sub_1011FFCB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1011FFCBC(uint64_t a1)
{
  *(void *)a1 = off_1018A31D0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_1011FFD1C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

uint64_t sub_1011FFD6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1011FFDAC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1011FFDC0(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1011FFDDC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1011FFF88(a1);
  operator delete(v1);
}

void *sub_1011FFDF0(void *result, uint64_t a2, _OWORD *a3)
{
  char v3 = (_OWORD *)(result[7] + 96LL * *((unsigned int *)result + 16));
  __int128 v4 = a3[5];
  __int128 v6 = a3[2];
  __int128 v5 = a3[3];
  void v3[4] = a3[4];
  v3[5] = v4;
  v3[2] = v6;
  v3[3] = v5;
  __int128 v7 = a3[1];
  _OWORD *v3 = *a3;
  v3[1] = v7;
  unsigned int v8 = *((_DWORD *)result + 17);
  unsigned int v9 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v9;
  if (v9 >= v8)
  {
    unsigned int v10 = result;
    uint64_t v12 = result[3];
    uint64_t v11 = result[4];
    uint64_t v13 = result[6];
    uint64_t v14 = result[7];
    uint64_t v15 = (void *)result[2];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    _OWORD v21[2] = sub_101200040;
    v21[3] = &unk_10184D6C8;
    _DWORD v21[4] = v13;
    v21[5] = v12;
    unsigned int v22 = v9;
    v21[6] = v14;
    v21[7] = v11;
    [v15 async:v21];
    uint64_t v16 = *((unsigned int *)v10 + 17);
    uint64_t v17 = 3 * v16;
    uint64_t result = operator new[]((96 * v16) | 0x10);
    uint64_t v18 = result;
    *uint64_t result = 96LL;
    result[1] = v16;
    if ((_DWORD)v16)
    {
      uint64_t v19 = 0LL;
      do
      {
        LODWORD(v18[v19 + 2]) = 0;
        sub_1010DDBC0(&v18[v19 + 3], "N/A");
        uint64_t result = sub_1010DDBC0(&v18[v19 + 6], "N/A");
        uint64_t v20 = &v18[v19];
        v20[9] = 0LL;
        v20[10] = 0LL;
        *((_DWORD *)v20 + 22) = 1065353216;
        v19 += 12LL;
        v20[12] = 0LL;
        v20[13] = 0x3F80000000000000LL;
      }

      while (4 * v17 != v19);
    }

    v10[7] = v18 + 2;
    *((_DWORD *)v10 + 16) = 0;
  }

  return result;
}

void sub_1011FFF38(_Unwind_Exception *a1)
{
  if (v1[v2 + 47] < 0) {
    operator delete(*(void **)&v1[v2 + 24]);
  }
  for (; v2; v2 -= 96LL)
    sub_1011FFD6C((uint64_t)&v1[v2 - 80]);
  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011FFF80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1011FFF88(uint64_t a1)
{
  *(void *)a1 = off_1018A3208;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 96 * v3;
      do
      {
        uint64_t v5 = v2 + v4;
        v4 -= 96LL;
      }

      while (v4);
    }

    operator delete[]((void *)(v2 - 16));
  }

  return sub_1011C07F8(a1);
}

void sub_101200040(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 96 * v3;
      do
      {
        uint64_t v5 = v2 + v4;
        v4 -= 96LL;
      }

      while (v4);
    }

    operator delete[]((void *)(v2 - 16));
  }

uint64_t sub_1012000E4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10120E684((unsigned __int8 *)a1, a2);
  *(void *)uint64_t v3 = off_1018A3258;
  *(_DWORD *)(v3 + 254) = 0;
  *(void *)(a1 + 264) = [*((id *)v3 + 5) newTimer];
  *(void *)(a1 + 272) = [*(id *)(a1 + 40) newTimer];
  *(_OWORD *)(a1 + 28sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = (char **)(a1 + 288);
  _DWORD v4[2] = 0LL;
  v4[3] = &off_101862F40;
  *uint64_t v4 = off_1018A35C8;
  v4[1] = 0LL;
  *(void *)(a1 + 312) = v4 + 3;
  *(void *)(a1 + 32sub_1011C5518(qword_1019A41A0, 0) = v4;
  v68[0].__r_.__value_.__r.__words[0] = 0x40CC200000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 328), "GyroNonlinearTargetExpirationAge", v68, 0);
  v68[0].__r_.__value_.__r.__words[0] = 0x411FA40000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 352), "GyroNonlinearMaxExpirationAge", v68, 0);
  v68[0].__r_.__value_.__r.__words[0] = 0x410FA40000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 376), "GyroNonlinearFactoryDataAge", v68, 0);
  v68[0].__r_.__value_.__r.__words[0] = 0x4082C00000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 400), "GyroNonlinearFlushTimeout", v68, 0);
  v68[0].__r_.__value_.__r.__words[0] = 0x405E000000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 424), "GyroNonlinearFirstPruneTimeout", v68, 0);
  v68[0].__r_.__value_.__r.__words[0] = 0x40AC200000000000LL;
  sub_101204164((unsigned __int8 *)(a1 + 448), "GyroNonlinearPruneTimeout", v68, 0);
  v68[0].__r_.__value_.__s.__data_[0] = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 472), "LogGyroNonFactoryCalOnStartup", (unsigned __int8 *)v68, 0);
  *(void *)(a1 + 512) = 0LL;
  *(_OWORD *)(a1 + 48sub_1011C5518(qword_1019A41A0, 0) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 52sub_1011C5518(qword_1019A41A0, 0) = 0x8000007F7FFFFFLL;
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  sub_100B14CF0((void *)(a1 + 536), 0LL, 0LL);
  sub_1004F2598();
  *(_BYTE *)(a1 + 255) = sub_1004FCB90();
  uint64_t v6 = sub_1006E27E8();
  sub_100413284(v6, v68);
  sub_1002A6F64((uint64_t)v68[0].__r_.__value_.__l.__data_, "EnableGyroFitRMSError", (BOOL *)(a1 + 255));
  unsigned __int8 size = (std::__shared_weak_count *)v68[0].__r_.__value_.__l.__size_;
  if (v68[0].__r_.__value_.__l.__size_)
  {
    unsigned int v8 = (unint64_t *)(v68[0].__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472LL;
  v61[2] = sub_101200E10;
  v61[3] = &unk_10181D3D0;
  v61[4] = a1;
  [*(id *)(a1 + 264) setHandler:v61];
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472LL;
  v60[2] = sub_101201BC8;
  v60[3] = &unk_10181D3D0;
  v60[4] = a1;
  [*(id *)(a1 + 272) setHandler:v60];
  sub_1011CFE34(a1 + 112);
  if (sub_1003B747C(a1 + 112, "GyroNonlinearCalibration"))
  {
    if (sub_1003B747C(a1 + 112, "GyroPointCalibration"))
    {
      sub_1003C0200(a1 + 112, "GyroNonlinearCalibration");
    }

    else
    {
      sub_1003C0454(a1 + 112);
      sub_10000CE18((uint64_t)v68);
      unsigned int v10 = sub_10000CF44(&v68[0].__r_.__value_.__l.__cap_, (uint64_t)"ALTER TABLE GyroNonlinearCalibration", 36LL);
      uint64_t v11 = sub_10000CF44(v10, (uint64_t)" RENAME TO ", 11LL);
      uint64_t v12 = sub_10000CF44(v11, (uint64_t)"GyroPointCalibration", 20LL);
      sub_10000CF44(v12, (uint64_t)";", 1LL);
      std::stringbuf::str((std::stringbuf::string_type *)v62, (const std::stringbuf *)&v68[1]);
      if (v62[23] >= 0) {
        uint64_t v13 = v62;
      }
      else {
        uint64_t v13 = *(char **)v62;
      }
      sub_1003C0D54(a1 + 112, v13, &buf);
      uint64_t v14 = buf.__r_.__value_.__r.__words[0];
      buf.__r_.__value_.__r.__words[0] = 0LL;
      if ((v62[23] & 0x80000000) != 0) {
        operator delete(*(void **)v62);
      }
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v14);
      sub_1003BB2BC(a1 + 112, v15);
      sub_1003BF200(a1 + 112, "GyroPointCalibration");
      sub_1003C05BC(a1 + 112);
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
      }
      *(std::string::size_type *)((char *)v68[0].__r_.__value_.__r.__words
      v68[0].__r_.__value_.__l.__cap_ = v16;
      if (SHIBYTE(v72) < 0) {
        operator delete(*((void **)&v71 + 1));
      }
      std::streambuf::~streambuf(&v68[1]);
      std::ios::~ios(v74);
    }
  }

  *(_OWORD *)uint64_t v62 = *(_OWORD *)off_1018A33A8;
  *(_OWORD *)&v62[16] = *(_OWORD *)off_1018A33B8;
  __int128 v63 = *(_OWORD *)off_1018A33C8;
  uint64_t v64 = 0LL;
  if (sub_1003B59A0(a1 + 112, "GyroPointCalibration", (const char **)&off_1018A33F8, 0LL, 1))
  {
    *(void *)(a1 + 536) = sub_1003C0BC0(a1 + 112, "GyroPointCalibration", (const char **)v62, 0);
    *(void *)(a1 + 544) = v17;
    sub_1012023A4(a1);
    *(_BYTE *)(a1 + 254) = 1;
    memset(v74, 0, 192);
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v69 = 0u;
    memset(v68, 0, sizeof(v68));
    v68[0].__r_.__value_.__s.__data_[0] = 1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 1;
    (*(void (**)(uint64_t, std::string *, std::string *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &buf,  v68,  1LL,  0xFFFFFFFFLL,  0LL);
    *(_BYTE *)(a1 + 257) = 1;
    id v18 = [*(id *)(a1 + 40) newTimer];
    *(void *)(a1 + 48sub_1011C5518(qword_1019A41A0, 0) = v18;
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472LL;
    v59[2] = sub_10120260C;
    v59[3] = &unk_10181D3D0;
    v59[4] = a1;
    [v18 setHandler:v59];
    [*(id *)(a1 + 480) setNextFireDelay:1800.0];
  }

  else
  {
    *(void *)(a1 + 536) = sub_1003C0BC0(a1 + 112, "GyroPointCalibration", (const char **)v62, 0);
    *(void *)(a1 + 544) = v19;
    if ((sub_1003B747C(a1 + 112, "GyroPointCalibration") & 1) == 0)
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
      uint64_t v53 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        v68[0].__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v68[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v68[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v68[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&v68[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"assert";
        WORD2(v68[1].__r_.__value_.__r.__words[0]) = 2081;
        *(std::string::size_type *)((char *)v68[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"fDb.tableExists(GyroPointCalibration)";
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:db doesn't exist, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  (uint8_t *)v68,  0x26u);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
      }

      __int16 v54 = (os_log_s *)off_101934598;
      if (os_signpost_enabled((os_log_t)off_101934598))
      {
        v68[0].__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v68[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v68[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v68[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&v68[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"assert";
        WORD2(v68[1].__r_.__value_.__r.__words[0]) = 2081;
        *(std::string::size_type *)((char *)v68[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"fDb.tableExists(GyroPointCalibration)";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v54,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "db doesn't exist",  "{msg%{public}.0s:db doesn't exist, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  (uint8_t *)v68,  0x26u);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
      }

      uint64_t v55 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
      {
        v68[0].__r_.__value_.__r.__words[0] = 68289539LL;
        LOWORD(v68[0].__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v68[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(v68[0].__r_.__value_.__r.__words[2]) = 2082;
        *(std::string::size_type *)((char *)&v68[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)"assert";
        WORD2(v68[1].__r_.__value_.__r.__words[0]) = 2081;
        *(std::string::size_type *)((char *)v68[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)"fDb.tableExists(GyroPointCalibration)";
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:db doesn't exist, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  (uint8_t *)v68,  0x26u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalShared.mm",  274,  "cacheFactoryIfMissing");
      __break(1u);
    }

    memset(v68, 0, 24);
    sub_101202E34(a1, (void **)&v68[0].__r_.__value_.__l.__data_);
    uint64_t v20 = (void *)v68[0].__r_.__value_.__r.__words[0];
    if (v68[0].__r_.__value_.__r.__words[0] == v68[0].__r_.__value_.__l.__size_)
    {
      memset(&buf, 0, sizeof(buf));
      sub_101203418(a1, (void **)&buf.__r_.__value_.__l.__data_);
      if (buf.__r_.__value_.__r.__words[0]) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = (void *)v68[0].__r_.__value_.__r.__words[0];
    }

    if (v20)
    {
      v68[0].__r_.__value_.__l.__size_ = (std::string::size_type)v20;
      operator delete(v20);
    }

    *(void *)(a1 + 296) = *(void *)(a1 + 288);
    sub_1012029D0((char **)(a1 + 288));
    *(void *)(a1 + 504) = *(void *)(a1 + 496);
    sub_1012029D0((char **)(a1 + 496));
    sub_1003C0D54( a1 + 112,  "SELECT Id, Timestamp, Temperature, BiasX, BiasY, BiasZ FROM GyroPointCalibration WHERE Active = ?",  v68);
    uint64_t v21 = v68[0].__r_.__value_.__r.__words[0];
    unsigned int v22 = (sqlite3_stmt *)sub_100019240((uint64_t)v68[0].__r_.__value_.__l.__data_);
    sub_1003C28BC(v22, 1, 1);
    while (1)
    {
      uint64_t v23 = (sqlite3_stmt *)sub_100019240(v21);
      int v24 = sqlite3_step(v23);
      if (v24 != 100) {
        break;
      }
      unint64_t v25 = (sqlite3_stmt *)sub_100019240(v21);
      int v26 = sqlite3_column_int(v25, 0);
      double v27 = sqlite3_column_double(v25, 1);
      double v28 = sqlite3_column_double(v25, 2);
      double v29 = sqlite3_column_double(v25, 3);
      double v30 = sqlite3_column_double(v25, 4);
      double v31 = sqlite3_column_double(v25, 5);
      uint64_t v32 = v26;
      float v33 = v28;
      float v34 = v29;
      float v35 = v30;
      float v36 = v31;
      unint64_t v37 = *(void *)(a1 + 296);
      unint64_t v38 = *(void *)(a1 + 304);
      if (v37 >= v38)
      {
        uint64_t v40 = (uint64_t)(v37 - (void)*v5) >> 5;
        unint64_t v41 = v40 + 1;
        uint64_t v42 = v38 - (void)*v5;
        if (v42 >> 4 > v41) {
          unint64_t v41 = v42 >> 4;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43) {
          unint64_t v43 = (unint64_t)sub_1012051C8(v43);
        }
        else {
          uint64_t v44 = 0LL;
        }
        unint64_t v45 = v43 + 32 * v40;
        *(float *)unint64_t v45 = v33;
        *(float *)(v45 + 4) = v34;
        *(float *)(v45 + _Block_object_dispose(va, 8) = v35;
        *(float *)(v45 + 12) = v36;
        *(double *)(v45 + 16) = v27;
        *(void *)(v45 + 24) = v32;
        uint64_t v47 = *(char **)(a1 + 288);
        int v46 = *(char **)(a1 + 296);
        unint64_t v48 = v45;
        if (v46 != v47)
        {
          do
          {
            __int128 v49 = *((_OWORD *)v46 - 1);
            *(_OWORD *)(v48 - 32) = *((_OWORD *)v46 - 2);
            *(_OWORD *)(v48 - 16) = v49;
            v48 -= 32LL;
            v46 -= 32;
          }

          while (v46 != v47);
          int v46 = *v5;
        }

        unint64_t v39 = v45 + 32;
        *(void *)(a1 + 28_Block_object_dispose(va, 8) = v48;
        *(void *)(a1 + 296) = v45 + 32;
        *(void *)(a1 + 304) = v43 + 32 * v44;
        if (v46) {
          operator delete(v46);
        }
      }

      else
      {
        *(float *)unint64_t v37 = v33;
        *(float *)(v37 + 4) = v34;
        *(float *)(v37 + _Block_object_dispose(va, 8) = v35;
        *(float *)(v37 + 12) = v36;
        *(double *)(v37 + 16) = v27;
        unint64_t v39 = v37 + 32;
        *(void *)(v37 + 24) = v32;
      }

      *(void *)(a1 + 296) = v39;
    }

    if (v24 != 101)
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
      std::stringbuf v50 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        sub_1003C3A08(a1 + 112, v68);
        uint64_t v51 = (v68[0].__r_.__value_.__s.__size_ & 0x80u) == 0 ? v68 : (std::string *)v68[0].__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_FAULT,  "Point gyro database load, SQL error: %{public}s",  (uint8_t *)&buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(v68, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
        __n128 v56 = off_101934598;
        sub_1003C3A08(a1 + 112, &buf);
        if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v66 = 136446210;
        uint64_t v67 = p_buf;
        int64_t v58 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  v68,  1628LL,  &_mh_execute_header,  v56,  17LL,  "Point gyro database load, SQL error: %{public}s",  &v66,  12);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalShared::loadFromDatabase()",  "%s\n",  (const char *)v58);
        if (v58 != v68) {
          free(v58);
        }
      }
    }

    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
  }

  [*(id *)(a1 + 272) setNextFireDelay:*(double *)(a1 + 432)];
  return a1;
}

void sub_101200CA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45)
{
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  }
  std::stringbuf v50 = *v47;
  if (*v47)
  {
    v45[63] = v50;
    operator delete(v50);
  }

  uint64_t v51 = v45[61];
  v45[61] = 0LL;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
  }
  sub_10000AE14((uint64_t)(v45 + 39));
  std::stringbuf::string_type v52 = *v46;
  if (*v46)
  {
    v45[37] = v52;
    operator delete(v52);
  }

  *unint64_t v45 = off_1018A3778;
  sub_1003B3930(v45 + 14);
  sub_1003953A8(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_101200E10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_101200E48(v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 304LL))(v1);
  return sub_101201B2C(v1);
}

void sub_101200E48(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 528);
  unint64_t v4 = vcvtps_u32_f32((float)(*(float *)(a1 + 524) - *(float *)(a1 + 520)) * 0.5);
  buf.__r_.__value_.__r.__words[0] = 0LL;
  sub_10001E524(&__p, v4, &buf);
  uint64_t v5 = *(float **)(a1 + 288);
  uint64_t v6 = *(float **)(a1 + 296);
  if (v5 != v6)
  {
    float v7 = *(float *)(a1 + 520);
    unsigned int v8 = __p;
    do
    {
      uint64_t v9 = (int)(float)((float)(*v5 - v7) * 0.5);
      v5 += 8;
    }

    while (v5 != v6);
  }

  buf.__r_.__value_.__r.__words[0] = 0LL;
  sub_10001E524(&v90, v4, &buf);
  unsigned int v10 = *(float **)(a1 + 288);
  uint64_t v11 = *(float **)(a1 + 296);
  if (v10 != v11)
  {
    float v12 = *(float *)(a1 + 520);
    std::string::size_type v13 = v90.__r_.__value_.__r.__words[0];
    do
    {
      uint64_t v14 = (int)(float)((float)(*v10 - v12) * 0.5);
      v10 += 8;
    }

    while (v10 != v11);
  }

  double v15 = vabdd_f64(Current, v3);
  uint64_t v17 = *(float **)(a1 + 496);
  std::string::size_type v16 = *(float **)(a1 + 504);
  if (v17 == v16) {
    goto LABEL_33;
  }
  float v18 = v15 / *(double *)(a1 + 336) * 30.0;
  uint64_t v19 = *(float **)(a1 + 504);
  while (1)
  {
    uint64_t v20 = (int)(float)((float)(*v17 - *(float *)(a1 + 520)) * 0.5);
    if ((v20 & 0x80000000) != 0) {
      break;
    }
    if (*((void *)__p + v20) >= 6uLL)
    {
      unint64_t v21 = *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * v20);
    }

    v17 += 8;
    if (v17 == v16) {
      goto LABEL_34;
    }
  }

  if (v17 != v16)
  {
    unsigned int v22 = v17 + 8;
    if (v17 + 8 != v16)
    {
      uint64_t v19 = v17;
      do
      {
        uint64_t v23 = (int)(float)((float)(*v22 - *(float *)(a1 + 520)) * 0.5);
        if ((v23 & 0x80000000) == 0 && v4 > v23)
        {
          if (*((void *)__p + v23) < 6uLL
            || (unint64_t v24 = *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * v23),
                (float)((float)(v18 / (float)v24) * 4295000000.0) >= (float)(*(unsigned int (**)(void))(**(void **)(a1 + 312) + 8LL))(*(void *)(a1 + 312))))
          {
            __int128 v25 = *((_OWORD *)v22 + 1);
            *(_OWORD *)uint64_t v19 = *(_OWORD *)v22;
            *((_OWORD *)v19 + sub_1011C5518(qword_1019A41A0, 1) = v25;
            v19 += 8;
          }
        }

        v22 += 8;
      }

      while (v22 != v16);
      goto LABEL_34;
    }

void sub_101201AA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8LL))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101201B2C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 216LL))(a1, __src);
  if ((_DWORD)result)
  {
    memcpy(__dst, __src, sizeof(__dst));
    int v3 = 0;
    return (*(uint64_t (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v3,  __dst,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

void sub_101201BC8(uint64_t a1)
{
}

void sub_101201BD0(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  int v3 = *(double **)(a1 + 288);
  unint64_t v4 = *(double **)(a1 + 296);
  unint64_t v5 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 5);
  *(double *)std::string buf = Current;
  if (v4 == v3) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_1012051FC(v3, v4, (double *)buf, v6, 1);
  unint64_t v7 = vcvtps_u32_f32((float)(*(float *)(a1 + 524) - *(float *)(a1 + 520)) * 0.5);
  *(void *)std::string buf = 0LL;
  sub_10001E524(&v58, v7, buf);
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v10 = *(void *)(a1 + 296);
  if (v9 != v10)
  {
LABEL_5:
    float v11 = *(float *)(a1 + 520);
    float v12 = v58;
    unint64_t v13 = (v59 - (_BYTE *)v58) >> 3;
    while (1)
    {
      uint64_t v14 = (int)(float)((float)(*(float *)v9 - v11) * 0.5);
      double v15 = vabdd_f64(Current, *(double *)(v9 + 16));
      unint64_t v16 = v12[v14];
      if (v16 > 0x50)
      {
        uint64_t v17 = @"Overpopulated";
        goto LABEL_17;
      }

      if (v16 >= 6 && v15 > *(double *)(a1 + 336))
      {
        uint64_t v17 = @"NormalAgeOut";
        goto LABEL_17;
      }

      v12[v14] = v16 + 1;
      v9 += 32LL;
      if (v9 == v10)
      {
        uint64_t v9 = v10;
        goto LABEL_29;
      }
    }

    uint64_t v17 = @"MaxAgeOut";
LABEL_17:
    (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320LL))(a1, v17, 1LL);
LABEL_18:
    v10 -= 32LL;
    if (v9 == v10) {
      goto LABEL_29;
    }
    do
    {
      unint64_t v18 = (int)(float)((float)(*(float *)v10 - *(float *)(a1 + 520)) * 0.5);
      if ((v18 & 0x80000000) == 0 && v18 < (v59 - (_BYTE *)v58) >> 3)
      {
        double v19 = vabdd_f64(Current, *(double *)(v10 + 16));
        uint64_t v20 = @"MaxAgeOut";
        if (v19 <= *(double *)(a1 + 360))
        {
          unint64_t v21 = *((void *)v58 + v18);
          uint64_t v20 = @"Overpopulated";
          if (v21 <= 0x50)
          {
            if (v21 < 6 || (uint64_t v20 = @"NormalAgeOut", v19 <= *(double *)(a1 + 336)))
            {
              *((void *)v58 + v1_Block_object_dispose(va, 8) = v21 + 1;
              __int128 v22 = *(_OWORD *)(v9 + 16);
              *(_OWORD *)std::string buf = *(_OWORD *)v9;
              *(_OWORD *)&uint8_t buf[16] = v22;
              __int128 v23 = *(_OWORD *)(v10 + 16);
              *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
              *(_OWORD *)(v9 + 16) = v23;
              v9 += 32LL;
              v8.n128_u64[1] = *(void *)&buf[8];
              __int128 v24 = *(_OWORD *)&buf[16];
              *(_OWORD *)uint64_t v10 = *(_OWORD *)buf;
              *(_OWORD *)(v10 + 16) = v24;
              if (v10 == v9) {
                break;
              }
              goto LABEL_5;
            }
          }
        }

        (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320LL))(a1, v20, 1LL);
      }

      v10 -= 32LL;
    }

    while (v10 != v9);
  }

void sub_10120231C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012023A4(uint64_t a1)
{
  if (*(void *)(a1 + 496) != *(void *)(a1 + 504))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    uint64_t v1 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 2082;
      uint64_t v9 = "assert";
      __int16 v10 = 2081;
      float v11 = "fPendingSamples.empty()";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:initialization function expected with no pending samples, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
    }

    uint64_t v2 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 2082;
      uint64_t v9 = "assert";
      __int16 v10 = 2081;
      float v11 = "fPendingSamples.empty()";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "initialization function expected with no pending samples",  "{msg%{public}.0s:initialization function expected with no pending samples, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
    }

    int v3 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 2082;
      uint64_t v9 = "assert";
      __int16 v10 = 2081;
      float v11 = "fPendingSamples.empty()";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:initialization function expected with no pending samples, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalShared.mm",  288,  "initializeWithFactoryData");
  }

  sub_101203418(a1, (void **)(a1 + 496));
}

uint64_t sub_10120260C(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  v1[257] = 0;
  return (*(uint64_t (**)(_BYTE *))(*(void *)v1 + 312LL))(v1);
}

uint64_t sub_101202620(uint64_t a1, float *a2, float *a3, __n128 a4, __n128 a5)
{
  double v5 = a5.n128_f64[0];
  float v6 = a4.n128_f32[0];
  uint64_t v10 = *(void *)(a1 + 488);
  if (v10) {
    (*(void (**)(uint64_t, float *, float *, __n128, __n128))(*(void *)v10 + 208LL))(v10, a2, a3, a4, a5);
  }
  if (fabsf(*a2) > 75.0 || fabsf(a2[1]) > 75.0 || fabsf(a2[2]) > 75.0) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if (*a3 <= 0.01 && a3[1] <= 0.01 && a3[2] <= 0.01)
  {
    uint64_t v12 = *(void *)(a1 + 504);
    if (*(void *)(a1 + 496) != v12
      && vabdd_f64(*(double *)(v12 - 16), v5) < 30.0
      && vabds_f32(*(float *)(v12 - 32), v6) < 2.0)
    {
      return 0LL;
    }

    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v49 = 0u;
    uint64_t v52 = 0LL;
    __int128 v48 = 0u;
    __int128 v47 = 0u;
    __int128 v46 = 0u;
    __int128 v45 = 0u;
    __int128 v44 = 0u;
    __int128 v43 = 0u;
    __int128 v42 = 0u;
    __int128 v41 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    double v32 = v5;
    *(float *)&__int128 v33 = v6;
    int v31 = 3;
    (*(void (**)(uint64_t, int *, double *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v31,  &v32,  1LL,  0xFFFFFFFFLL,  0LL);
    float v14 = *a2;
    int v13 = *((_DWORD *)a2 + 1);
    int v15 = *((_DWORD *)a2 + 2);
    unint64_t v16 = *(void *)(a1 + 504);
    unint64_t v17 = *(void *)(a1 + 512);
    if (v16 >= v17)
    {
      uint64_t v19 = *(void *)(a1 + 496);
      uint64_t v20 = (uint64_t)(v16 - v19) >> 5;
      unint64_t v21 = v20 + 1;
      uint64_t v22 = v17 - v19;
      if (v22 >> 4 > v21) {
        unint64_t v21 = v22 >> 4;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23) {
        unint64_t v23 = (unint64_t)sub_1012051C8(v23);
      }
      else {
        uint64_t v24 = 0LL;
      }
      unint64_t v25 = v23 + 32 * v20;
      unint64_t v26 = v23 + 32 * v24;
      *(float *)unint64_t v25 = v6;
      *(float *)(v25 + 4) = v14;
      *(_DWORD *)(v25 + _Block_object_dispose(va, 8) = v13;
      *(_DWORD *)(v25 + 12) = v15;
      *(double *)(v25 + 16) = v5;
      *(void *)(v25 + 24) = 0LL;
      unint64_t v18 = v25 + 32;
      float v28 = *(char **)(a1 + 496);
      uint64_t v27 = *(char **)(a1 + 504);
      if (v27 != v28)
      {
        do
        {
          __int128 v29 = *((_OWORD *)v27 - 1);
          *(_OWORD *)(v25 - 32) = *((_OWORD *)v27 - 2);
          *(_OWORD *)(v25 - 16) = v29;
          v25 -= 32LL;
          v27 -= 32;
        }

        while (v27 != v28);
        uint64_t v27 = *(char **)(a1 + 496);
      }

      *(void *)(a1 + 496) = v25;
      *(void *)(a1 + 504) = v18;
      *(void *)(a1 + 512) = v26;
      if (v27) {
        operator delete(v27);
      }
    }

    else
    {
      *(float *)unint64_t v16 = v6;
      *(float *)(v16 + 4) = v14;
      *(_DWORD *)(v16 + _Block_object_dispose(va, 8) = v13;
      *(_DWORD *)(v16 + 12) = v15;
      *(double *)(v16 + 16) = v5;
      unint64_t v18 = v16 + 32;
      *(void *)(v16 + 24) = 0LL;
    }

    *(void *)(a1 + 504) = v18;
    [*(id *)(a1 + 264) nextFireDelay];
    if (v30 == 1.79769313e308) {
      [*(id *)(a1 + 264) setNextFireDelay:*(double *)(a1 + 408)];
    }
    return 1LL;
  }

  return result;
}

uint64_t sub_1012028F0(uint64_t a1)
{
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  sub_1012029D0((char **)(a1 + 288));
  *(void *)(a1 + 504) = *(void *)(a1 + 496);
  sub_1012029D0((char **)(a1 + 496));
  *(_BYTE *)(a1 + 256) = 0;
  sub_1003C0D54(a1 + 112, "DELETE FROM GyroPointCalibration", &v6);
  uint64_t v2 = v6;
  int v3 = (sqlite3_stmt *)sub_100019240(v6);
  sub_1003BB2BC(a1 + 112, v3);
  else {
    uint64_t v4 = *(void *)(a1 + 200);
  }
  sub_1003C1EC0(a1 + 112, v4);
  sub_1012023A4(a1);
  sub_101200E48(a1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return 1LL;
}

void sub_1012029B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012029D0(char **a1)
{
  uint64_t v2 = a1[2];
  int v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - v3) >> 5;
  if (v5 < (v2 - v3) >> 5)
  {
    if (v4 == v3)
    {
      uint64_t v10 = 0LL;
      uint64_t v8 = 32 * v5;
    }

    else
    {
      uint64_t v6 = (char *)sub_1012051C8((v4 - v3) >> 5);
      unint64_t v7 = *a1;
      int v3 = a1[1];
      uint64_t v8 = (uint64_t)&v6[32 * v5];
      uint64_t v10 = &v6[32 * v9];
      if (v3 != *a1)
      {
        uint64_t v11 = v8;
        do
        {
          __int128 v12 = *((_OWORD *)v3 - 1);
          *(_OWORD *)(v11 - 32) = *((_OWORD *)v3 - 2);
          *(_OWORD *)(v11 - 16) = v12;
          v11 -= 32LL;
          v3 -= 32;
        }

        while (v3 != v7);
        int v3 = *a1;
        goto LABEL_9;
      }
    }

    uint64_t v11 = v8;
LABEL_9:
    *a1 = (char *)v11;
    a1[1] = (char *)v8;
    a1[2] = v10;
    if (v3) {
      operator delete(v3);
    }
  }

uint64_t sub_101202A88(uint64_t a1)
{
  unint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v6 = (uint64_t *)&v7;
  uint64_t v1 = *(float **)(a1 + 288);
  uint64_t v2 = *(float **)(a1 + 296);
  if (v1 == v2)
  {
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
  }

  else
  {
    do
    {
      sub_1011D4ACC(&v6, v1, v1);
      v1 += 8;
    }

    while (v1 != v2);
    uint64_t v3 = v8;
    uint64_t v4 = v7;
  }

  sub_100008390((uint64_t)&v6, v4);
  return v3;
}

void sub_101202B00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

unint64_t sub_101202B18()
{
  return ((unint64_t)sub_1004F97F4() >> 13) & 1;
}

uint64_t sub_101202B30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 488);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
  [*(id *)(a1 + 264) invalidate];
  [*(id *)(a1 + 272) invalidate];
  [*(id *)(a1 + 480) invalidate];
  sub_101200E48(a1);
  return sub_1003954A0(a1);
}

uint64_t sub_101202B84(uint64_t a1)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3578);
  }
  uint64_t v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Start factory GYTT", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Start factory GYTT",  v8,  2);
    unint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalShared::startFactoryGYTT()",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  uint64_t v3 = operator new(0x160uLL);
  sub_1011F6E44((uint64_t)v3, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 488);
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    uint64_t v3 = *(void **)(a1 + 488);
  }

  return (*(uint64_t (**)(void *))(*(void *)v3 + 248LL))(v3);
}

void sub_101202D54(_Unwind_Exception *a1)
{
}

uint64_t sub_101202D70(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 280);
  return 1LL;
}

void sub_101202D80(uint64_t a1)
{
  char v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 280LL))(a1);
  uint64_t v2 = sub_1006E27E8();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_101202DEC;
  v3[3] = &unk_101833840;
  char v4 = v1;
  sub_1006E2970(v2, (uint64_t)v3);
}

uint64_t sub_101202DEC(uint64_t a1)
{
  uint64_t result = sub_1008FA854(0);
  if (result)
  {
    uint64_t v3 = sub_1008FA854(0);
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 152LL))(v3, *(unsigned __int8 *)(a1 + 32));
  }

  return result;
}

void sub_101202E34(uint64_t a1, void **a2)
{
  uint64_t v35 = a1 + 112;
  sub_1003C0D54( a1 + 112,  "SELECT Id, Timestamp, Temperature, BiasX, BiasY, BiasZ FROM GyroPointCalibration WHERE Active = ?",  &buf);
  uint64_t v3 = buf.__r_.__value_.__r.__words[0];
  char v4 = (sqlite3_stmt *)sub_100019240((uint64_t)buf.__r_.__value_.__l.__data_);
  sub_1003C28BC(v4, 1, -1);
  while (1)
  {
    unint64_t v5 = (sqlite3_stmt *)sub_100019240(v3);
    int v6 = sqlite3_step(v5);
    if (v6 != 100) {
      break;
    }
    unint64_t v7 = (sqlite3_stmt *)sub_100019240(v3);
    double v8 = sqlite3_column_double(v7, 1);
    float v9 = sqlite3_column_double(v7, 2);
    float v10 = sqlite3_column_double(v7, 3);
    float v11 = sqlite3_column_double(v7, 4);
    float v12 = sqlite3_column_double(v7, 5);
    int v13 = (char *)a2[1];
    float v14 = (char *)a2[2];
    if (v13 >= v14)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a2) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*a2) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555LL) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        uint64_t v20 = (char *)sub_10000701C((uint64_t)(a2 + 2), v19);
      }
      else {
        uint64_t v20 = 0LL;
      }
      unint64_t v21 = (float *)&v20[24 * v16];
      *unint64_t v21 = v9;
      v21[1] = v10;
      _OWORD v21[2] = v11;
      v21[3] = v12;
      *((double *)v21 + 2) = v8;
      unint64_t v23 = (char *)*a2;
      uint64_t v22 = (char *)a2[1];
      uint64_t v24 = v21;
      if (v22 != *a2)
      {
        do
        {
          __int128 v25 = *(_OWORD *)(v22 - 24);
          *((void *)v24 - sub_1011C5518(qword_1019A41A0, 1) = *((void *)v22 - 1);
          *(_OWORD *)(v24 - 6) = v25;
          v24 -= 6;
          v22 -= 24;
        }

        while (v22 != v23);
        uint64_t v22 = (char *)*a2;
      }

      int v15 = (char *)(v21 + 6);
      *a2 = v24;
      a2[1] = v21 + 6;
      a2[2] = &v20[24 * v19];
      if (v22) {
        operator delete(v22);
      }
    }

    else
    {
      *(float *)int v13 = v9;
      *((float *)v13 + sub_1011C5518(qword_1019A41A0, 1) = v10;
      *((float *)v13 + 2) = v11;
      *((float *)v13 + 3) = v12;
      int v15 = v13 + 24;
      *((double *)v13 + 2) = v8;
    }

    a2[1] = v15;
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    unint64_t v26 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      double v43 = v11;
      __int16 v44 = 2048;
      double v45 = v12;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%f,%f,%f,%f", (uint8_t *)&buf, 0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
      LODWORD(v38.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)v38.__r_.__value_.__r.__words + 4) = v9;
      WORD2(v38.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v38.__r_.__value_.__r.__words[1] + 6) = v10;
      HIWORD(v38.__r_.__value_.__r.__words[2]) = 2048;
      double v39 = v11;
      __int16 v40 = 2048;
      double v41 = v12;
      LODWORD(v33) = 42;
      uint64_t v27 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "%f,%f,%f,%f",  COERCE_DOUBLE(&v38),  v33,  v34,  *(double *)&v35);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationDatabaseLocalShared::readFactoryDataFromDatabase(std::vector<CLGyroBiasFitter::Sample> &)",  "%s\n",  (const char *)v27);
      if (v27 != &buf) {
        free(v27);
      }
    }
  }

  if (v6 != 101)
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    float v28 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      sub_1003C3A08(v35, &buf);
      __int128 v29 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v38.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_FAULT,  "Point gyro database load, SQL error: %{public}s",  (uint8_t *)&v38,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
      double v30 = off_101934598;
      sub_1003C3A08(v35, &v38);
      if ((v38.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v31 = &v38;
      }
      else {
        int v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      int v36 = 136446210;
      __int128 v37 = v31;
      LODWORD(v33) = 12;
      double v32 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v30,  17LL,  "Point gyro database load, SQL error: %{public}s",  &v36,  *(void *)&v33);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalShared::readFactoryDataFromDatabase(std::vector<CLGyroBiasFitter::Sample> &)",  "%s\n",  (const char *)v32);
      if (v32 != &buf) {
        free(v32);
      }
    }
  }

  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
}

void sub_1012033C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101203418(uint64_t a1, void **a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 384);
  double v41 = 0LL;
  __int128 v42 = 0LL;
  uint64_t v43 = 0LL;
  sub_1006A42C8(&v41);
  int v6 = (int *)v41;
  unint64_t v7 = v42;
  if (v41 != v42)
  {
    double v8 = Current - v5;
    float v9 = (char *)a2[1];
    do
    {
      int v11 = *v6;
      int v10 = v6[1];
      int v13 = v6[2];
      int v12 = v6[3];
      float v14 = (char *)a2[2];
      if (v9 >= v14)
      {
        uint64_t v15 = (v9 - (_BYTE *)*a2) >> 5;
        uint64_t v16 = v14 - (_BYTE *)*a2;
        uint64_t v17 = v16 >> 4;
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_1012051C8(v18);
        }
        else {
          uint64_t v19 = 0LL;
        }
        unint64_t v20 = v18 + 32 * v15;
        *(_DWORD *)unint64_t v20 = v11;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + _Block_object_dispose(va, 8) = v13;
        *(_DWORD *)(v20 + 12) = v12;
        *(double *)(v20 + 16) = v8;
        *(void *)(v20 + 24) = 0LL;
        uint64_t v22 = (char *)*a2;
        unint64_t v21 = (char *)a2[1];
        unint64_t v23 = (char *)v20;
        if (v21 != *a2)
        {
          do
          {
            __int128 v24 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v23 - sub_1011C5518(qword_1019A41A0, 1) = v24;
            v23 -= 32;
            v21 -= 32;
          }

          while (v21 != v22);
          unint64_t v21 = (char *)*a2;
        }

        float v9 = (char *)(v20 + 32);
        *a2 = v23;
        a2[1] = (void *)(v20 + 32);
        a2[2] = (void *)(v18 + 32 * v19);
        if (v21) {
          operator delete(v21);
        }
      }

      else
      {
        *(_DWORD *)float v9 = v11;
        *((_DWORD *)v9 + sub_1011C5518(qword_1019A41A0, 1) = v10;
        *((_DWORD *)v9 + 2) = v13;
        *((_DWORD *)v9 + 3) = v12;
        *((double *)v9 + 2) = v8;
        *((void *)v9 + 3) = 0LL;
        v9 += 32;
      }

      a2[1] = v9;
      v6 += 4;
    }

    while (v6 != v7);
  }

  uint64_t v25 = a1 + 112;
  sub_1003C0454(a1 + 112);
  sub_100B14CF8((uint64_t *)(a1 + 536), &v40);
  unint64_t v26 = (char *)*a2;
  uint64_t v27 = (char *)a2[1];
  if (*a2 != v27)
  {
    do
    {
      if (sub_1012039C0( v40,  -1,  *((double *)v26 + 2),  *(float *)v26,  *((float *)v26 + 1),  *((float *)v26 + 2),  *((float *)v26 + 3)))
      {
        float v28 = (sqlite3_stmt *)sub_100019240(v40);
        sub_1003BB2BC(v25, v28);
      }

      else
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
        __int128 v29 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
        {
          sub_1003C3A08(v25, __p);
          double v30 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
              ? __p
              : (std::string *)__p[0].__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_FAULT,  "flushPendingError: %{public}s",  (uint8_t *)&buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_1018A3578);
          }
          int v31 = off_101934598;
          sub_1003C3A08(v25, &buf);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          int v45 = 136446210;
          __int128 v46 = p_buf;
          LODWORD(v39) = 12;
          double v33 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v31,  17LL,  "flushPendingError: %{public}s",  &v45,  v39);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalShared::persistFactoryPointsInDatabase(std::vector<Sample> &)",  "%s\n",  (const char *)v33);
          if (v33 != __p) {
            free(v33);
          }
        }
      }

      v26 += 32;
    }

    while (v26 != v27);
  }

  sub_1003C05BC(v25);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3578);
  }
  double v34 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Factory data persisted in gyro database, %zu samples added.",  (uint8_t *)__p,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    uint64_t v37 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v37;
    std::string v38 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Factory data persisted in gyro database, %zu samples added.",  (size_t)&buf);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationDatabaseLocalShared::persistFactoryPointsInDatabase(std::vector<Sample> &)",  "%s\n",  (const char *)v38);
    if (v38 != __p) {
      free(v38);
    }
  }

  uint64_t v36 = v40;
  uint64_t v40 = 0LL;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
  }
  if (v41)
  {
    __int128 v42 = (int *)v41;
    operator delete(v41);
  }

void sub_101203964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8LL))(a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1012039C0(uint64_t a1, int a2, double a3, float a4, float a5, float a6, float a7)
{
  int v13 = (sqlite3_stmt *)sub_100019240(a1);
  return sub_1003C28BC(v13, 1, a2)
      && sub_1003B7480(v13, 2, a3)
      && sub_1003B7480(v13, 3, a4)
      && sub_1003B7480(v13, 4, a5)
      && sub_1003B7480(v13, 5, a6)
      && sub_1003B7480(v13, 6, a7);
}

uint64_t sub_101203A98(uint64_t a1)
{
  *(void *)a1 = off_1018A3258;

  *(void *)(a1 + 264) = 0LL;
  *(void *)(a1 + 272) = 0LL;

  *(void *)(a1 + 48sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  uint64_t v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(void *)(a1 + 504) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void *)(a1 + 488);
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_10000AE14(a1 + 312);
  char v4 = *(void **)(a1 + 288);
  if (v4)
  {
    *(void *)(a1 + 296) = v4;
    operator delete(v4);
  }

  *(void *)a1 = off_1018A3778;
  sub_1003B3930(a1 + 112);
  return sub_1003953A8(a1);
}

void sub_101203B48(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 473))
  {
    float v2 = *(float *)(a1 + 524);
    float v3 = *(float *)(a1 + 520);
    BOOL v4 = v3 == 3.4028e38 || v2 == 1.1755e-38;
    if (v4 || (float v6 = v2 - v3, v6 <= 0.0))
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
      double v5 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to log gyro non factory cal from db because the temperature range is either uninitialized or invalid.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
        *(_WORD *)__int128 v47 = 0;
        int v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  16LL,  "Failed to log gyro non factory cal from db because the temperature range is either uninitialized or invalid.",  v47,  2);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalShared::logGyroNonFactoryCalIfNecessary()",  "%s\n",  v11);
        goto LABEL_49;
      }
    }

    else
    {
      unint64_t v7 = 30 * vcvtps_u32_f32(v6 * 0.5);
      if (v7 >= (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5)
      {
        sub_101125260(buf);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        v46 |= 1u;
        CFAbsoluteTime v44 = Current;
        sub_10113942C(buf);
        int v13 = *(__int128 **)(a1 + 288);
        for (uint64_t i = *(__int128 **)(a1 + 296); v13 != i; v13 += 2)
        {
          __int128 v35 = *v13;
          uint64_t v15 = *((void *)v13 + 2);
          sub_101094374((uint64_t)&v36);
          v39 |= 1u;
          uint64_t v38 = v15;
          sub_101094768(&v36);
          uint64_t v16 = v37;
          *(_BYTE *)(v37 + 24) |= 0xFu;
          *(_OWORD *)(v16 + _Block_object_dispose(va, 8) = v35;
          uint64_t v17 = v45;
          unint64_t v18 = operator new(0x20uLL);
          sub_101094480(v18, &v36);
          unint64_t v19 = v17[3];
          unint64_t v20 = (void *)v17[2];
          if ((unint64_t)v20 >= v19)
          {
            uint64_t v22 = v17[1];
            uint64_t v23 = ((uint64_t)v20 - v22) >> 3;
            uint64_t v24 = v19 - v22;
            uint64_t v25 = v24 >> 2;
            else {
              unint64_t v26 = v25;
            }
            __int128 v49 = v17 + 3;
            if (v26) {
              uint64_t v27 = (char *)sub_1000071BC((uint64_t)(v17 + 3), v26);
            }
            else {
              uint64_t v27 = 0LL;
            }
            float v28 = &v27[8 * v23];
            __int128 v29 = &v27[8 * v26];
            __int128 v48 = v29;
            *(void *)float v28 = v18;
            unint64_t v21 = v28 + 8;
            *(void *)&v47[16] = v28 + 8;
            int v31 = (void *)v17[1];
            double v30 = (void *)v17[2];
            if (v30 == v31)
            {
              int64x2_t v33 = vdupq_n_s64((unint64_t)v30);
            }

            else
            {
              do
              {
                uint64_t v32 = *--v30;
                *double v30 = 0LL;
                *((void *)v28 - sub_1011C5518(qword_1019A41A0, 1) = v32;
                v28 -= 8;
              }

              while (v30 != v31);
              int64x2_t v33 = *(int64x2_t *)(v17 + 1);
              unint64_t v21 = *(void **)&v47[16];
              __int128 v29 = v48;
            }

            v17[1] = v28;
            _DWORD v17[2] = v21;
            *(int64x2_t *)&v47[8] = v33;
            double v34 = (char *)v17[3];
            v17[3] = v29;
            __int128 v48 = v34;
            *(void *)__int128 v47 = v33.i64[0];
            sub_1004CAE9C((uint64_t)v47);
          }

          else
          {
            *unint64_t v20 = v18;
            unint64_t v21 = v20 + 1;
          }

          _DWORD v17[2] = v21;
          sub_101094388((PB::Base *)&v36);
        }

        if (qword_1019A1D00 != -1) {
          dispatch_once(&qword_1019A1D00, &stru_1018A3598);
        }
        if (qword_1019A1D08) {
          sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
        }
        sub_101127D00((PB::Base *)buf);
      }

      else
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
        double v8 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5;
          *(_DWORD *)std::string buf = 134218240;
          uint64_t v41 = v9;
          __int16 v42 = 2048;
          unint64_t v43 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to log gyro non factory cal because the number of samples (%zu) exceeds the max limit (%zu).",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_1018A3578);
          }
          uint64_t v10 = (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5;
          *(_DWORD *)__int128 v47 = 134218240;
          *(void *)&v47[4] = v10;
          *(_WORD *)&v47[12] = 2048;
          *(void *)&v47[14] = v7;
          int v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  16LL,  "Failed to log gyro non factory cal because the number of samples (%zu) exceeds the max limit (%zu).",  (size_t)v47,  22);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalShared::logGyroNonFactoryCalIfNecessary()",  "%s\n",  v11);
LABEL_49:
        }
      }
    }
  }

void sub_10120408C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1012040D8()
{
  return 1LL;
}

uint64_t sub_1012040E0()
{
  return 1LL;
}

void sub_1012040F4(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_101204124(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A35C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101204134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A35C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_101204154(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
}

unsigned __int8 *sub_101204164(unsigned __int8 *a1, const char *a2, void *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((void *)a1 + sub_1011C5518(qword_1019A41A0, 1) = *a3;
  float v6 = (double *)(a1 + 8);
  a1[16] = a4;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  *a1 = sub_1002A82BC(*(uint64_t *)buf, a2, v6);
  double v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10000CE18((uint64_t)v33);
  std::ostream::operator<<(*v6);
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v36, &v34);
        uint64_t v17 = v36[23] >= 0 ? v36 : *(_BYTE **)v36;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        __int16 v38 = 2080;
        char v39 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v36[23] & 0x80000000) != 0) {
          operator delete(*(void **)v36);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v18 = qword_1019344B8;
      int v19 = *a1;
      std::stringbuf::str(&v32, &v34);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v20 = &v32;
      }
      else {
        unint64_t v20 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v36 = 136315650;
      *(void *)&v36[4] = a2;
      *(_WORD *)&v36[12] = 1024;
      *(_DWORD *)&_BYTE v36[14] = v19;
      *(_WORD *)&v36[18] = 2080;
      *(void *)&v36[20] = v20;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "motion default,%s,set,%d,value,%s",  v36,  28,  v32.__r_.__value_.__l.__data_);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v24 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        int v25 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v36, &v34);
        unint64_t v26 = v36[23] >= 0 ? v36 : *(_BYTE **)v36;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        __int16 v38 = 2080;
        char v39 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v36[23] & 0x80000000) != 0) {
          operator delete(*(void **)v36);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v29 = qword_1019344B8;
      int v30 = *a1;
      std::stringbuf::str(&v32, &v34);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v31 = &v32;
      }
      else {
        int v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v36 = 136315650;
      *(void *)&v36[4] = a2;
      *(_WORD *)&v36[12] = 1024;
      *(_DWORD *)&_BYTE v36[14] = v30;
      *(_WORD *)&v36[18] = 2080;
      *(void *)&v36[20] = v31;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "motion default,%s,set,%d,value,%s",  v36,  28,  v32.__r_.__value_.__l.__data_);
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_53;
    }
    goto LABEL_64;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3608);
    }
    int v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      int v13 = *a1;
      *(_DWORD *)int v36 = 136315394;
      *(void *)&v36[4] = a2;
      *(_WORD *)&v36[12] = 1024;
      *(_DWORD *)&_BYTE v36[14] = v13;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v36,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]",  "%s\n",  v14);
      goto LABEL_42;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3608);
    }
    unint64_t v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      int v23 = *a1;
      *(_DWORD *)int v36 = 136315394;
      *(void *)&v36[4] = a2;
      *(_WORD *)&v36[12] = 1024;
      *(_DWORD *)&_BYTE v36[14] = v23;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v36,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]",  "%s\n",  v14);
LABEL_42:
      if (v14 == buf) {
        goto LABEL_53;
      }
LABEL_64:
      free(v14);
    }
  }

void sub_101204934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_101204980(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_1012049AC(unsigned __int8 *a1, const char *a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  *a1 = 0;
  a1[1] = *a3;
  float v6 = (BOOL *)(a1 + 1);
  a1[2] = a4;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  *a1 = sub_1002A6F64(*(uint64_t *)buf, a2, v6);
  double v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10000CE18((uint64_t)v33);
  std::ostream::operator<<(&v34, *v6);
  if (!a1[2])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        uint64_t v17 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        __int16 v39 = 2080;
        uint64_t v40 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v18 = qword_1019344B8;
      int v19 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v20 = &v32;
      }
      else {
        unint64_t v20 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v19;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v20;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v24 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        int v25 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        unint64_t v26 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        __int16 v39 = 2080;
        uint64_t v40 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      uint64_t v29 = qword_1019344B8;
      int v30 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v31 = &v32;
      }
      else {
        int v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v30;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v31;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_53;
    }
    goto LABEL_64;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3608);
    }
    int v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      int v13 = *a1;
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v13;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]",  "%s\n",  v14);
      goto LABEL_42;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3608);
    }
    unint64_t v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3608);
      }
      int v23 = *a1;
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v23;
      float v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]",  "%s\n",  v14);
LABEL_42:
      if (v14 == buf) {
        goto LABEL_53;
      }
LABEL_64:
      free(v14);
    }
  }

void sub_10120517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_1012051C8(unint64_t a1)
{
  if (a1 >> 59) {
    sub_1000070D4();
  }
  return operator new(32 * a1);
}

void sub_1012051FC(double *a1, double *a2, double *a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v10 = a1;
  while (2)
  {
    a1 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = ((char *)a2 - (char *)v10) >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, v10[2]))
        {
          __int128 v120 = *(_OWORD *)v10;
          __int128 v129 = *((_OWORD *)v10 + 1);
          __int128 v52 = *((_OWORD *)a2 - 1);
          *(_OWORD *)unint64_t v10 = *((_OWORD *)a2 - 2);
          *((_OWORD *)v10 + sub_1011C5518(qword_1019A41A0, 1) = v52;
          *((_OWORD *)a2 - 2) = v120;
          *((_OWORD *)a2 - sub_1011C5518(qword_1019A41A0, 1) = v129;
        }

        return;
      case 3uLL:
        sub_101205AE0(v10, v10 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        sub_101205E34(v10, v10 + 4, v10 + 8, (uint64_t)(a2 - 4), a3);
        return;
      case 5uLL:
        uint64_t v53 = (__int128 *)(v10 + 4);
        uint64_t v54 = (__int128 *)(v10 + 8);
        std::string::size_type v55 = (__int128 *)(v10 + 12);
        sub_101205E34(v10, v10 + 4, v10 + 8, (uint64_t)(v10 + 12), a3);
        if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, v10[14]))
        {
          __int128 v56 = *v55;
          __int128 v130 = *((_OWORD *)v10 + 7);
          __int128 v57 = *((_OWORD *)a2 - 1);
          __int128 *v55 = *((_OWORD *)a2 - 2);
          *((_OWORD *)v10 + 7) = v57;
          *((_OWORD *)a2 - 2) = v56;
          *((_OWORD *)a2 - sub_1011C5518(qword_1019A41A0, 1) = v130;
          if (vabdd_f64(*a3, v10[14]) < vabdd_f64(*a3, v10[10]))
          {
            __int128 v59 = *v54;
            __int128 v58 = *((_OWORD *)v10 + 5);
            __int128 v60 = *((_OWORD *)v10 + 7);
            *uint64_t v54 = *v55;
            *((_OWORD *)v10 + 5) = v60;
            __int128 *v55 = v59;
            *((_OWORD *)v10 + 7) = v58;
            if (vabdd_f64(*a3, v10[10]) < vabdd_f64(*a3, v10[6]))
            {
              __int128 v62 = *v53;
              __int128 v61 = *((_OWORD *)v10 + 3);
              __int128 v63 = *((_OWORD *)v10 + 5);
              __int128 *v53 = *v54;
              *((_OWORD *)v10 + 3) = v63;
              *uint64_t v54 = v62;
              *((_OWORD *)v10 + 5) = v61;
              if (vabdd_f64(*a3, v10[6]) < vabdd_f64(*a3, v10[2]))
              {
                __int128 v121 = *(_OWORD *)v10;
                __int128 v131 = *((_OWORD *)v10 + 1);
                __int128 v64 = *((_OWORD *)v10 + 3);
                *(_OWORD *)unint64_t v10 = *v53;
                *((_OWORD *)v10 + sub_1011C5518(qword_1019A41A0, 1) = v64;
                __int128 *v53 = v121;
                *((_OWORD *)v10 + 3) = v131;
              }
            }
          }
        }

        return;
      default:
        if (v11 <= 767)
        {
          __int128 v65 = v10 + 4;
          BOOL v67 = v10 == a2 || v65 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              uint64_t v68 = 0LL;
              double v69 = *a3;
              __int128 v70 = v10;
              do
              {
                __int128 v71 = v65;
                double v72 = v70[6];
                if (vabdd_f64(v69, v72) < vabdd_f64(v69, v70[2]))
                {
                  __int128 v122 = *(_OWORD *)v65;
                  uint64_t v73 = *((void *)v70 + 7);
                  uint64_t v74 = v68;
                  while (1)
                  {
                    __int128 v75 = (char *)v10 + v74;
                    __int128 v76 = *(_OWORD *)((char *)v10 + v74 + 16);
                    *((_OWORD *)v75 + 2) = *(_OWORD *)((char *)v10 + v74);
                    *((_OWORD *)v75 + 3) = v76;
                    if (!v74) {
                      break;
                    }
                    v74 -= 32LL;
                    if (vabdd_f64(*a3, v72) >= vabdd_f64(*a3, *((double *)v75 - 2)))
                    {
                      uint64_t v77 = (uint64_t)v10 + v74 + 32;
                      goto LABEL_79;
                    }
                  }

                  uint64_t v77 = (uint64_t)v10;
LABEL_79:
                  *(_OWORD *)uint64_t v77 = v122;
                  *(double *)(v77 + 16) = v72;
                  *(void *)(v77 + 24) = v73;
                  double v69 = *a3;
                }

                __int128 v65 = v71 + 4;
                v68 += 32LL;
                __int128 v70 = v71;
              }

              while (v71 + 4 != a2);
            }
          }

          else if (!v67)
          {
            double v108 = *a3;
            do
            {
              int v109 = v65;
              double v110 = a1[6];
              if (vabdd_f64(v108, v110) < vabdd_f64(v108, a1[2]))
              {
                __int128 v125 = *(_OWORD *)v65;
                uint64_t v111 = *((void *)a1 + 7);
                do
                {
                  __int128 v112 = *((_OWORD *)v65 - 1);
                  *(_OWORD *)__int128 v65 = *((_OWORD *)v65 - 2);
                  *((_OWORD *)v65 + sub_1011C5518(qword_1019A41A0, 1) = v112;
                  double v113 = *(v65 - 6);
                  v65 -= 4;
                }

                while (vabdd_f64(*a3, v110) < vabdd_f64(*a3, v113));
                *(_OWORD *)__int128 v65 = v125;
                v65[2] = v110;
                *((void *)v65 + 3) = v111;
                double v108 = *a3;
              }

              __int128 v65 = v109 + 4;
              a1 = v109;
            }

            while (v109 + 4 != a2);
          }

          return;
        }

        if (!a4)
        {
          if (v10 != a2)
          {
            int64_t v78 = (v12 - 2) >> 1;
            int64_t v79 = v78;
            do
            {
              int64_t v80 = v79;
              if (v78 >= v79)
              {
                uint64_t v81 = (2 * v79) | 1;
                __int128 v82 = &v10[4 * v81];
                double v83 = *a3;
                if (2 * v80 + 2 < (uint64_t)v12 && vabdd_f64(v83, v82[2]) < vabdd_f64(v83, v82[6]))
                {
                  v82 += 4;
                  uint64_t v81 = 2 * v80 + 2;
                }

                uint64_t v84 = &v10[4 * v80];
                double v85 = v84[2];
                if (vabdd_f64(v83, v82[2]) >= vabdd_f64(v83, v85))
                {
                  __int128 v123 = *(_OWORD *)v84;
                  uint64_t v86 = *((void *)v84 + 3);
                  do
                  {
                    __int16 v87 = v84;
                    uint64_t v84 = v82;
                    __int128 v88 = *((_OWORD *)v82 + 1);
                    *(_OWORD *)__int16 v87 = *(_OWORD *)v82;
                    *((_OWORD *)v87 + sub_1011C5518(qword_1019A41A0, 1) = v88;
                    if (v78 < v81) {
                      break;
                    }
                    uint64_t v89 = 2 * v81;
                    uint64_t v81 = (2 * v81) | 1;
                    __int128 v82 = &v10[4 * v81];
                    uint64_t v90 = v89 + 2;
                    double v91 = *a3;
                    if (v90 < (uint64_t)v12 && vabdd_f64(v91, v82[2]) < vabdd_f64(v91, v82[6]))
                    {
                      v82 += 4;
                      uint64_t v81 = v90;
                    }
                  }

                  while (vabdd_f64(v91, v82[2]) >= vabdd_f64(v91, v85));
                  *(_OWORD *)uint64_t v84 = v123;
                  v84[2] = v85;
                  *((void *)v84 + 3) = v86;
                }
              }

              int64_t v79 = v80 - 1;
            }

            while (v80);
            uint64_t v92 = (unint64_t)v11 >> 5;
            do
            {
              uint64_t v93 = 0LL;
              __int128 v124 = *(_OWORD *)v10;
              __int128 v132 = *((_OWORD *)v10 + 1);
              uint64_t v94 = v10;
              do
              {
                __n128 v95 = v94;
                v94 += 4 * v93 + 4;
                uint64_t v96 = 2 * v93;
                uint64_t v93 = (2 * v93) | 1;
                uint64_t v97 = v96 + 2;
                if (v97 < v92 && vabdd_f64(*a3, v94[2]) < vabdd_f64(*a3, v94[6]))
                {
                  v94 += 4;
                  uint64_t v93 = v97;
                }

                __int128 v98 = *((_OWORD *)v94 + 1);
                *(_OWORD *)__n128 v95 = *(_OWORD *)v94;
                *((_OWORD *)v95 + sub_1011C5518(qword_1019A41A0, 1) = v98;
              }

              while (v93 <= (uint64_t)((unint64_t)(v92 - 2) >> 1));
              a2 -= 4;
              if (v94 == a2)
              {
                *(_OWORD *)uint64_t v94 = v124;
                *((_OWORD *)v94 + sub_1011C5518(qword_1019A41A0, 1) = v132;
              }

              else
              {
                __int128 v99 = *((_OWORD *)a2 + 1);
                *(_OWORD *)uint64_t v94 = *(_OWORD *)a2;
                *((_OWORD *)v94 + sub_1011C5518(qword_1019A41A0, 1) = v99;
                *(_OWORD *)a2 = v124;
                *((_OWORD *)a2 + sub_1011C5518(qword_1019A41A0, 1) = v132;
                uint64_t v100 = (char *)v94 - (char *)v10 + 32;
                if (v100 >= 33)
                {
                  unint64_t v101 = (((unint64_t)v100 >> 5) - 2) >> 1;
                  unsigned __int32 v102 = &v10[4 * v101];
                  double v103 = v94[2];
                  if (vabdd_f64(*a3, v102[2]) < vabdd_f64(*a3, v103))
                  {
                    __int128 v116 = *(_OWORD *)v94;
                    uint64_t v104 = *((void *)v94 + 3);
                    do
                    {
                      uint64_t v105 = v94;
                      uint64_t v94 = v102;
                      __int128 v106 = *((_OWORD *)v102 + 1);
                      *(_OWORD *)uint64_t v105 = *(_OWORD *)v102;
                      *((_OWORD *)v105 + sub_1011C5518(qword_1019A41A0, 1) = v106;
                      if (!v101) {
                        break;
                      }
                      unint64_t v101 = (v101 - 1) >> 1;
                      unsigned __int32 v102 = &v10[4 * v101];
                    }

                    while (vabdd_f64(*a3, v102[2]) < vabdd_f64(*a3, v103));
                    *(_OWORD *)uint64_t v94 = v116;
                    v94[2] = v103;
                    *((void *)v94 + 3) = v104;
                  }
                }
              }
            }

            while (v92-- > 2);
          }

          return;
        }

        unint64_t v13 = v12 >> 1;
        float v14 = &v10[4 * (v12 >> 1)];
        if ((unint64_t)v11 <= 0x1000)
        {
          sub_101205AE0(&a1[4 * (v12 >> 1)], a1, a2 - 4, a3);
        }

        else
        {
          sub_101205AE0(a1, &a1[4 * (v12 >> 1)], a2 - 4, a3);
          sub_101205AE0(a1 + 4, v14 - 4, a2 - 8, a3);
          sub_101205AE0(a1 + 8, &a1[4 * v13 + 4], a2 - 12, a3);
          sub_101205AE0(v14 - 4, v14, &a1[4 * v13 + 4], a3);
          __int128 v117 = *(_OWORD *)a1;
          __int128 v126 = *((_OWORD *)a1 + 1);
          __int128 v15 = *((_OWORD *)v14 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *((_OWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = v15;
          *(_OWORD *)float v14 = v117;
          *((_OWORD *)v14 + sub_1011C5518(qword_1019A41A0, 1) = v126;
        }

        --a4;
        if ((a5 & 1) == 0)
        {
          double v17 = *a3;
          double v16 = a1[2];
          double v18 = vabdd_f64(*a3, v16);
          if (vabdd_f64(*a3, *(a1 - 2)) < v18) {
            goto LABEL_11;
          }
          __int128 v115 = *(_OWORD *)a1;
          if (v18 >= vabdd_f64(v17, *(a2 - 2)))
          {
            __int16 v39 = a1 + 4;
            do
            {
              unint64_t v10 = v39;
              if (v39 >= a2) {
                break;
              }
              double v40 = vabdd_f64(v17, v39[2]);
              v39 += 4;
            }

            while (v18 >= v40);
          }

          else
          {
            uint64_t v37 = a1;
            do
            {
              unint64_t v10 = v37 + 4;
              double v38 = vabdd_f64(v17, v37[6]);
              v37 += 4;
            }

            while (v18 >= v38);
          }

          uint64_t v41 = a2;
          if (v10 < a2)
          {
            __int16 v42 = a2;
            do
            {
              uint64_t v41 = v42 - 4;
              double v43 = vabdd_f64(v17, *(v42 - 2));
              v42 -= 4;
            }

            while (v18 < v43);
          }

          uint64_t v44 = *((void *)a1 + 3);
          while (v10 < v41)
          {
            __int128 v119 = *(_OWORD *)v10;
            __int128 v128 = *((_OWORD *)v10 + 1);
            __int128 v45 = *((_OWORD *)v41 + 1);
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v41;
            *((_OWORD *)v10 + sub_1011C5518(qword_1019A41A0, 1) = v45;
            *(_OWORD *)uint64_t v41 = v119;
            *((_OWORD *)v41 + sub_1011C5518(qword_1019A41A0, 1) = v128;
            double v46 = *a3;
            double v47 = vabdd_f64(*a3, v16);
            do
            {
              double v48 = v10[6];
              v10 += 4;
            }

            while (v47 >= vabdd_f64(v46, v48));
            do
            {
              double v49 = *(v41 - 2);
              v41 -= 4;
            }

            while (v47 < vabdd_f64(v46, v49));
          }

          __int128 v50 = v10 - 4;
          if (v10 - 4 != a1)
          {
            __int128 v51 = *((_OWORD *)v10 - 1);
            *(_OWORD *)a1 = *(_OWORD *)v50;
            *((_OWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = v51;
          }

          a5 = 0;
          *(_OWORD *)__int128 v50 = v115;
          *(v10 - 2) = v16;
          *((void *)v10 - sub_1011C5518(qword_1019A41A0, 1) = v44;
          continue;
        }

        double v16 = a1[2];
        double v17 = *a3;
        double v18 = vabdd_f64(*a3, v16);
LABEL_11:
        uint64_t v19 = 0LL;
        __int128 v114 = *(_OWORD *)a1;
        uint64_t v20 = *((void *)a1 + 3);
        do
        {
          double v21 = vabdd_f64(v17, a1[v19 + 6]);
          v19 += 4LL;
        }

        while (v21 < v18);
        int v22 = &a1[v19];
        int v23 = a2;
        if (v19 == 4)
        {
          unint64_t v26 = a2;
          while (v22 < v26)
          {
            uint64_t v24 = v26 - 4;
            double v27 = vabdd_f64(v17, *(v26 - 2));
            v26 -= 4;
            if (v27 < v18) {
              goto LABEL_21;
            }
          }

          uint64_t v24 = v26;
        }

        else
        {
          do
          {
            uint64_t v24 = v23 - 4;
            double v25 = vabdd_f64(v17, *(v23 - 2));
            v23 -= 4;
          }

          while (v25 >= v18);
        }

double *sub_101205AE0(double *result, double *a2, double *a3, double *a4)
{
  double v4 = vabdd_f64(*a4, a2[2]);
  double v5 = vabdd_f64(*a4, a3[2]);
  if (v4 >= vabdd_f64(*a4, result[2]))
  {
    if (v5 < v4)
    {
      __int128 v10 = *(_OWORD *)a2;
      __int128 v9 = *((_OWORD *)a2 + 1);
      __int128 v11 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + sub_1011C5518(qword_1019A41A0, 1) = v11;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + sub_1011C5518(qword_1019A41A0, 1) = v9;
      if (vabdd_f64(*a4, a2[2]) < vabdd_f64(*a4, result[2]))
      {
        __int128 v13 = *(_OWORD *)result;
        __int128 v12 = *((_OWORD *)result + 1);
        __int128 v14 = *((_OWORD *)a2 + 1);
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *((_OWORD *)result + sub_1011C5518(qword_1019A41A0, 1) = v14;
        *(_OWORD *)a2 = v13;
        *((_OWORD *)a2 + sub_1011C5518(qword_1019A41A0, 1) = v12;
      }
    }
  }

  else
  {
    if (v5 >= v4)
    {
      __int128 v16 = *(_OWORD *)result;
      __int128 v15 = *((_OWORD *)result + 1);
      __int128 v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      *((_OWORD *)result + sub_1011C5518(qword_1019A41A0, 1) = v17;
      *(_OWORD *)a2 = v16;
      *((_OWORD *)a2 + sub_1011C5518(qword_1019A41A0, 1) = v15;
      if (vabdd_f64(*a4, a3[2]) >= vabdd_f64(*a4, a2[2])) {
        return result;
      }
      __int128 v7 = *(_OWORD *)a2;
      __int128 v6 = *((_OWORD *)a2 + 1);
      __int128 v18 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + sub_1011C5518(qword_1019A41A0, 1) = v18;
    }

    else
    {
      __int128 v7 = *(_OWORD *)result;
      __int128 v6 = *((_OWORD *)result + 1);
      __int128 v8 = *((_OWORD *)a3 + 1);
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
      *((_OWORD *)result + sub_1011C5518(qword_1019A41A0, 1) = v8;
    }

    *(_OWORD *)a3 = v7;
    *((_OWORD *)a3 + sub_1011C5518(qword_1019A41A0, 1) = v6;
  }

  return result;
}

BOOL sub_101205BAC(double *a1, double *a2, double *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, a1[2]))
      {
        __int128 v9 = *(_OWORD *)a1;
        __int128 v8 = *((_OWORD *)a1 + 1);
        __int128 v10 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 2);
        *((_OWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = v10;
        *((_OWORD *)a2 - 2) = v9;
        *((_OWORD *)a2 - sub_1011C5518(qword_1019A41A0, 1) = v8;
      }

      return result;
    case 3LL:
      sub_101205AE0(a1, a1 + 4, a2 - 4, a3);
      return 1LL;
    case 4LL:
      sub_101205E34(a1, a1 + 4, a1 + 8, (uint64_t)(a2 - 4), a3);
      return 1LL;
    case 5LL:
      int v22 = (__int128 *)(a1 + 4);
      int v23 = (__int128 *)(a1 + 8);
      uint64_t v24 = (__int128 *)(a1 + 12);
      sub_101205E34(a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), a3);
      if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, a1[14]))
      {
        __int128 v26 = *v24;
        __int128 v25 = *((_OWORD *)a1 + 7);
        __int128 v27 = *((_OWORD *)a2 - 1);
        *uint64_t v24 = *((_OWORD *)a2 - 2);
        *((_OWORD *)a1 + 7) = v27;
        *((_OWORD *)a2 - 2) = v26;
        *((_OWORD *)a2 - sub_1011C5518(qword_1019A41A0, 1) = v25;
        if (vabdd_f64(*a3, a1[14]) < vabdd_f64(*a3, a1[10]))
        {
          __int128 v29 = *v23;
          __int128 v28 = *((_OWORD *)a1 + 5);
          __int128 v30 = *((_OWORD *)a1 + 7);
          *int v23 = *v24;
          *((_OWORD *)a1 + 5) = v30;
          *uint64_t v24 = v29;
          *((_OWORD *)a1 + 7) = v28;
          if (vabdd_f64(*a3, a1[10]) < vabdd_f64(*a3, a1[6]))
          {
            __int128 v32 = *v22;
            __int128 v31 = *((_OWORD *)a1 + 3);
            __int128 v33 = *((_OWORD *)a1 + 5);
            *int v22 = *v23;
            *((_OWORD *)a1 + 3) = v33;
            *int v23 = v32;
            *((_OWORD *)a1 + 5) = v31;
            if (vabdd_f64(*a3, a1[6]) < vabdd_f64(*a3, a1[2]))
            {
              __int128 v35 = *(_OWORD *)a1;
              __int128 v34 = *((_OWORD *)a1 + 1);
              __int128 v36 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *v22;
              *((_OWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = v36;
              *int v22 = v35;
              *((_OWORD *)a1 + 3) = v34;
            }
          }
        }
      }

      return 1LL;
    default:
      __int128 v11 = a1 + 8;
      sub_101205AE0(a1, a1 + 4, a1 + 8, a3);
      __int128 v12 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1LL;
      }
      uint64_t v13 = 0LL;
      int v14 = 0;
      double v15 = *a3;
      break;
  }

  while (1)
  {
    double v16 = v12[2];
    if (vabdd_f64(v15, v16) < vabdd_f64(v15, v11[2])) {
      break;
    }
LABEL_15:
    __int128 v11 = v12;
    v13 += 32LL;
    v12 += 4;
    if (v12 == a2) {
      return 1LL;
    }
  }

  __int128 v37 = *(_OWORD *)v12;
  uint64_t v17 = *((void *)v12 + 3);
  uint64_t v18 = v13;
  while (1)
  {
    uint64_t v19 = (char *)a1 + v18;
    __int128 v20 = *(_OWORD *)((char *)a1 + v18 + 80);
    *((_OWORD *)v19 + 6) = *(_OWORD *)((char *)a1 + v18 + 64);
    *((_OWORD *)v19 + 7) = v20;
    if (v18 == -64) {
      break;
    }
    v18 -= 32LL;
    if (vabdd_f64(*a3, v16) >= vabdd_f64(*a3, *((double *)v19 + 6)))
    {
      uint64_t v21 = (uint64_t)a1 + v18 + 96;
      goto LABEL_13;
    }
  }

  uint64_t v21 = (uint64_t)a1;
LABEL_13:
  *(_OWORD *)uint64_t v21 = v37;
  *(double *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v17;
  if (++v14 != 8)
  {
    double v15 = *a3;
    goto LABEL_15;
  }

  return v12 + 4 == a2;
}

__n128 sub_101205E34(double *a1, double *a2, double *a3, uint64_t a4, double *a5)
{
  result.n128_f64[0] = vabdd_f64(*a5, a3[2]);
  if (vabdd_f64(*a5, *(double *)(a4 + 16)) < result.n128_f64[0])
  {
    __int128 v11 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 2);
    __int128 v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + sub_1011C5518(qword_1019A41A0, 1) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    result.n128_f64[0] = vabdd_f64(*a5, a2[2]);
    if (vabdd_f64(*a5, a3[2]) < result.n128_f64[0])
    {
      __int128 v13 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 2);
      __int128 v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + sub_1011C5518(qword_1019A41A0, 1) = v14;
      *(_OWORD *)a3 = v13;
      *((__n128 *)a3 + sub_1011C5518(qword_1019A41A0, 1) = result;
      result.n128_f64[0] = vabdd_f64(*a5, a1[2]);
      if (vabdd_f64(*a5, a2[2]) < result.n128_f64[0])
      {
        __int128 v15 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 2);
        __int128 v16 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = v16;
        *(_OWORD *)a2 = v15;
        *((__n128 *)a2 + sub_1011C5518(qword_1019A41A0, 1) = result;
      }
    }
  }

  return result;
}

uint64_t sub_101205F04(uint64_t a1)
{
  uint64_t v2 = sub_1002F8DDC();
  float v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  else {
    return 1LL;
  }
}

uint64_t sub_101205F60(uint64_t a1, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v3 = sub_1002F8DDC();
  double v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  sub_1002ABC7C(v3, v4, &v7);
  uint64_t v5 = sub_1002F8DDC();
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944LL))(v5);
}

uint64_t sub_101205FC0(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
  sub_101206440(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_101206020(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  sub_101206440(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_101206080(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
  sub_1012049AC(v5, v2, &v4, 0);
  return v5[1];
}

uint64_t sub_1012060E0(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
  sub_1012049AC(v5, v2, &v4, 0);
  return v5[1];
}

double sub_101206140(uint64_t a1)
{
  double v9 = (*(double (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
  uint64_t v2 = sub_1002F8DDC();
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  sub_1002A82BC(v2, v3, &v9);
  if (qword_101934670 != -1) {
    dispatch_once(&qword_101934670, &stru_1018A3628);
  }
  unsigned __int8 v4 = (os_log_s *)qword_101934678;
  if (os_log_type_enabled((os_log_t)qword_101934678, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    v13[0] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLRecordingSettings: Getting server Sampling Rate in CLDaemonCache: %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934670 != -1) {
      dispatch_once(&qword_101934670, &stru_1018A3628);
    }
    int v10 = 134217984;
    double v11 = v9;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934678,  2LL,  "CLRecordingSettings: Getting server Sampling Rate in CLDaemonCache: %f",  COERCE_DOUBLE(&v10));
    __int128 v8 = (uint8_t *)v7;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLRecordingSettings::getRecordingRateLimitingSamplingRate()",  "%s\n",  v7);
    if (v8 != buf) {
      free(v8);
    }
  }

  uint64_t v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  sub_101204164(buf, v5, &v9, 0);
  return *(double *)((char *)v13 + 4);
}

uint64_t sub_101206354(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216LL))(a1);
  sub_1012049AC(v5, v2, &v4, 0);
  return v5[1];
}

uint64_t sub_1012063B4(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
  sub_1012049AC(v5, v2, &v4, 0);
  return v5[1];
}

void sub_101206414(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

unsigned __int8 *sub_101206440(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_DWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = *a3;
  unsigned int v6 = a1 + 4;
  a1[8] = a4;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  *a1 = sub_1002A775C(*(uint64_t *)buf, a2, v6);
  __int128 v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10000CE18((uint64_t)v33);
  std::ostream::operator<<(&v34, *v6);
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      __int128 v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        uint64_t v17 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        __int16 v39 = 2080;
        double v40 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      uint64_t v18 = qword_1019344B8;
      int v19 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v20 = &v32;
      }
      else {
        __int128 v20 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v19;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v20;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      uint64_t v24 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        int v25 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        __int128 v26 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        __int16 v39 = 2080;
        double v40 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      uint64_t v29 = qword_1019344B8;
      int v30 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v31 = &v32;
      }
      else {
        __int128 v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v30;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v31;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_53;
    }
    goto LABEL_64;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3648);
    }
    double v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      int v13 = *a1;
      *(_DWORD *)__int128 v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v13;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]",  "%s\n",  v14);
      goto LABEL_42;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3648);
    }
    uint64_t v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      int v23 = *a1;
      *(_DWORD *)__int128 v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v23;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]",  "%s\n",  v14);
LABEL_42:
      if (v14 == buf) {
        goto LABEL_53;
      }
LABEL_64:
      free(v14);
    }
  }

void sub_101206C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_101206C5C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_101206C88(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_DWORD *)a1 + sub_1011C5518(qword_1019A41A0, 1) = *a3;
  unsigned int v6 = (float *)(a1 + 4);
  a1[8] = a4;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  *a1 = sub_1002A81F8(*(uint64_t *)buf, a2, v6);
  __int128 v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10000CE18((uint64_t)v33);
  std::ostream::operator<<(&v34, *v6);
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      __int128 v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        uint64_t v17 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        __int16 v39 = 2080;
        double v40 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      uint64_t v18 = qword_1019344B8;
      int v19 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v20 = &v32;
      }
      else {
        __int128 v20 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v19;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v20;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      uint64_t v24 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        int v25 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        __int128 v26 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        __int16 v39 = 2080;
        double v40 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      uint64_t v29 = qword_1019344B8;
      int v30 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v31 = &v32;
      }
      else {
        __int128 v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int128 v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v30;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v31;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_53;
    }
    goto LABEL_64;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3648);
    }
    double v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      int v13 = *a1;
      *(_DWORD *)__int128 v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v13;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]",  "%s\n",  v14);
      goto LABEL_42;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3648);
    }
    uint64_t v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3648);
      }
      int v23 = *a1;
      *(_DWORD *)__int128 v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v23;
      __int128 v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]",  "%s\n",  v14);
LABEL_42:
      if (v14 == buf) {
        goto LABEL_53;
      }
LABEL_64:
      free(v14);
    }
  }

void sub_101207458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_101207570()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A0710, (void *)&_mh_execute_header);
}

void sub_101207658(id a1)
{
  qword_1019A0740 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLWorkoutRecorderSilo");
}

void sub_101207CF8(_Unwind_Exception *a1)
{
}

id sub_101207D14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onDataProtectionNotification:a2 data:a3];
}

id sub_101207D24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onLocationNotification:a2 data:a3];
}

void sub_1012099FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120A184(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

BOOL *sub_10120A1B0(BOOL *a1, const char *a2, __int128 *a3, unsigned __int8 a4)
{
  *a1 = 0;
  uint64_t v7 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(a1 + 8, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v8 = *a3;
    *((void *)a1 + 3) = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }

  a1[32] = a4;
  uint64_t v9 = sub_1006E27E8();
  sub_100413284(v9, buf);
  *a1 = sub_1002A8560(*(uint64_t *)buf, a2, v7);
  unint64_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    double v11 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  sub_10000CE18((uint64_t)v42);
  int v13 = a1[31];
  if (v13 >= 0) {
    uint64_t v14 = (uint64_t)v7;
  }
  else {
    uint64_t v14 = *((void *)a1 + 1);
  }
  if (v13 >= 0) {
    uint64_t v15 = a1[31];
  }
  else {
    uint64_t v15 = *((void *)a1 + 2);
  }
  sub_10000CF44(&v43, v14, v15);
  if (!a1[32])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v21 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v22 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v46, &v44);
        int v23 = v46[23] >= 0 ? v46 : *(_BYTE **)v46;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v22;
        __int16 v48 = 2080;
        double v49 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v46[23] & 0x80000000) != 0) {
          operator delete(*(void **)v46);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_62;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v24 = qword_1019344B8;
      BOOL v25 = *a1;
      std::stringbuf::str(&v41, &v44);
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v26 = &v41;
      }
      else {
        __int128 v26 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)double v46 = 136315650;
      *(void *)&v46[4] = a2;
      *(_WORD *)&v46[12] = 1024;
      *(_DWORD *)&v46[14] = v25;
      *(_WORD *)&v46[18] = 2080;
      *(void *)&v46[20] = v26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v24,  0LL,  "motion default,%s,set,%d,value,%s",  v46,  28,  v41.__r_.__value_.__l.__data_);
      __int128 v20 = v27;
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      std::stringbuf::string_type v32 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        BOOL v33 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v46, &v44);
        uint64_t v34 = v46[23] >= 0 ? v46 : *(_BYTE **)v46;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v33;
        __int16 v48 = 2080;
        double v49 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v46[23] & 0x80000000) != 0) {
          operator delete(*(void **)v46);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_62;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v37 = qword_1019344B8;
      BOOL v38 = *a1;
      std::stringbuf::str(&v41, &v44);
      if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v39 = &v41;
      }
      else {
        __int16 v39 = (std::stringbuf::string_type *)v41.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)double v46 = 136315650;
      *(void *)&v46[4] = a2;
      *(_WORD *)&v46[12] = 1024;
      *(_DWORD *)&v46[14] = v38;
      *(_WORD *)&v46[18] = 2080;
      *(void *)&v46[20] = v39;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v37,  1LL,  "motion default,%s,set,%d,value,%s",  v46,  28,  v41.__r_.__value_.__l.__data_);
      __int128 v20 = v40;
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]",  "%s\n",  v20);
    if (v20 == buf) {
      goto LABEL_62;
    }
    goto LABEL_73;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A36A8);
    }
    int v16 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v17 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      BOOL v18 = *a1;
      *(_DWORD *)double v46 = 136315394;
      *(void *)&v46[4] = a2;
      *(_WORD *)&v46[12] = 1024;
      *(_DWORD *)&v46[14] = v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v46,  18);
      __int128 v20 = (char *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]",  "%s\n",  v19);
      goto LABEL_51;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A36A8);
    }
    __int128 v28 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      BOOL v29 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      BOOL v30 = *a1;
      *(_DWORD *)double v46 = 136315394;
      *(void *)&v46[4] = a2;
      *(_WORD *)&v46[12] = 1024;
      *(_DWORD *)&v46[14] = v30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v46,  18);
      __int128 v20 = (char *)v31;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]",  "%s\n",  v31);
LABEL_51:
      if (v20 == buf) {
        goto LABEL_62;
      }
LABEL_73:
      free(v20);
    }
  }

void sub_10120A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_10120AA18(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_10120AA44(unsigned __int8 *a1, const char *a2, void *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((void *)a1 + sub_1011C5518(qword_1019A41A0, 1) = *a3;
  uint64_t v6 = a1 + 8;
  a1[16] = a4;
  uint64_t v7 = sub_1006E27E8();
  sub_100413284(v7, buf);
  *a1 = sub_1002A7A0C(*(uint64_t *)buf, a2, v6);
  __int128 v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10000CE18((uint64_t)v33);
  std::ostream::operator<<(&v34, *v6);
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v15 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        BOOL v17 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        __int16 v39 = 2080;
        double v40 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v18 = qword_1019344B8;
      int v19 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v20 = &v32;
      }
      else {
        __int128 v20 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v19;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v20;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v18,  0LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    else
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v24 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        int v25 = *a1;
        std::stringbuf::str((std::stringbuf::string_type *)v37, &v35);
        __int128 v26 = v37[23] >= 0 ? v37 : *(_BYTE **)v37;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        __int16 v39 = 2080;
        double v40 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "motion default,%s,set,%d,value,%s",  buf,  0x1Cu);
        if ((v37[23] & 0x80000000) != 0) {
          operator delete(*(void **)v37);
        }
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      uint64_t v29 = qword_1019344B8;
      int v30 = *a1;
      std::stringbuf::str(&v32, &v35);
      if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v31 = &v32;
      }
      else {
        __int128 v31 = (std::stringbuf::string_type *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v30;
      *(_WORD *)&v37[18] = 2080;
      *(void *)&v37[20] = v31;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v29,  1LL,  "motion default,%s,set,%d,value,%s",  v37,  28,  v32.__r_.__value_.__l.__data_);
    }

    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]",  "%s\n",  v14);
    if (v14 == buf) {
      goto LABEL_53;
    }
    goto LABEL_64;
  }

  if (*a1)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A36A8);
    }
    double v11 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      int v13 = *a1;
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v13;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]",  "%s\n",  v14);
      goto LABEL_42;
    }
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A36A8);
    }
    uint64_t v21 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      int v22 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A36A8);
      }
      int v23 = *a1;
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)&v37[4] = a2;
      *(_WORD *)&v37[12] = 1024;
      *(_DWORD *)&v37[14] = v23;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "motion default,%s,set,%d",  v37,  18);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]",  "%s\n",  v14);
LABEL_42:
      if (v14 == buf) {
        goto LABEL_53;
      }
LABEL_64:
      free(v14);
    }
  }

void sub_10120B214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_10120B260()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A0728, (void *)&_mh_execute_header);
}

id sub_10120B620(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onOdometerNotification:a2 data:a3];
}

void sub_10120B8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10120BB88(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_10120BF88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onCalorimetryNotification:a2 data:a3];
}

void sub_10120C194( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120C354(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10120C408(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

BOOL sub_10120C434(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32)
      && *(float *)(a1 + 36) == *(float *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(float *)(a1 + 44) == *(float *)(a2 + 44)
      && *(float *)(a1 + 52) == *(float *)(a2 + 52)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
      && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
}

uint64_t sub_10120C550()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A0750, (void *)&_mh_execute_header);
}

void sub_10120C638(id a1)
{
  qword_1019A0780 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLPrivacyManagerSilo");
}

void sub_10120C97C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120C9B8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_1011F69B0((char *)v7, (__int128 *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_10120CA80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10120CFD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

id sub_10120CFEC(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  return _[*(id *)(a1 + 32) vacuumAll];
}

BOOL sub_10120D178(void *a1)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018A3728);
  }
  uint64_t v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    char v18 = "";
    __int16 v19 = 2114;
    char v20 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Vacuuming database, class:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  if ([a1 isEqualToString:@"B"])
  {
    sub_1010DDBC0(v8, "");
    uint64_t v10 = 0x100000002LL;
    __int16 v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_1010DD48C(&__p, v8[0], (unint64_t)v8[1]);
    }

    else
    {
      __int128 __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }

    uint64_t v14 = 0LL;
    sub_1003B35F4(buf, &v10);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }

  else if ([a1 isEqualToString:@"C"])
  {
    sub_1010DDBC0(v8, "");
    uint64_t v10 = 0x100000003LL;
    __int16 v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_1010DD48C(&__p, v8[0], (unint64_t)v8[1]);
    }

    else
    {
      __int128 __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }

    uint64_t v14 = 0LL;
    sub_1003B35F4(buf, &v10);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }

  else
  {
    if (![a1 isEqualToString:@"D"])
    {
      if (qword_101934980 != -1) {
        goto LABEL_42;
      }
      while (1)
      {
        uint64_t v5 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 68289795;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2114;
          char v20 = a1;
          __int16 v21 = 2082;
          int v22 = "assert";
          __int16 v23 = 2081;
          uint64_t v24 = "0";
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected encryption class, class:%{public, location:escape_only}@, event: %{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018A3728);
          }
        }

        uint64_t v6 = (os_log_s *)qword_101934988;
        if (os_signpost_enabled((os_log_t)qword_101934988))
        {
          *(_DWORD *)std::string buf = 68289795;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2114;
          char v20 = a1;
          __int16 v21 = 2082;
          int v22 = "assert";
          __int16 v23 = 2081;
          uint64_t v24 = "0";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected encryption class",  "{msg%{public}.0s:Unexpected encryption class, class:%{public, location:escape_only}@, event: %{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018A3728);
          }
        }

        uint64_t v7 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 68289795;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2114;
          char v20 = a1;
          __int16 v21 = 2082;
          int v22 = "assert";
          __int16 v23 = 2081;
          uint64_t v24 = "0";
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Unexpected encryption class, class:%{public, location:escape_only}@, event: %{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
        }

        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/PrivacyManager/CLPrivacyManager.mm",  128,  "vacuumEncryptionClass");
        __break(1u);
LABEL_42:
        dispatch_once(&qword_101934980, &stru_1018A3728);
      }
    }

    sub_1010DDBC0(v8, "");
    uint64_t v10 = 0x200000000LL;
    __int16 v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_1010DD48C(&__p, v8[0], (unint64_t)v8[1]);
    }

    else
    {
      __int128 __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }

    uint64_t v14 = 0LL;
    sub_1003B35F4(buf, &v10);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }

  BOOL v3 = sub_1003C1160((uint64_t)buf);
  sub_1003B3930(buf);
  return v3;
}

void sub_10120D678( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10120D6DC(uint64_t a1)
{
  id result = (id)sub_10120D178(@"D");
  return result;
}

id sub_10120D798(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10120D80C;
  v7[3] = &unk_10181A2D8;
  uint64_t v5 = *(void *)(a1 + 40);
  v7[4] = *(void *)(a1 + 32);
  void v7[5] = a2;
  v7[6] = v5;
  return [v4 sync:v7];
}

id sub_10120D80C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onActivity:*(void *)(a1 + 40) withIdentifier:*(void *)(a1 + 48)];
}

void sub_10120E484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_10120E4F0(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10120E51C(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

CLCppContainer *sub_10120E548(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  BOOL v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1010DD48C(v2, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
    v2[2] = *(void *)(a1 + 16);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10120E600;
  unsigned __int8 v5[3] = &unk_10181D3D0;
  unsigned __int8 v5[4] = v3;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:",  v3,  v5,  0LL,  24LL);
}

void sub_10120E5EC(_Unwind_Exception *a1)
{
}

void sub_10120E600(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    operator delete((void *)v1);
  }

uint64_t sub_10120E640()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &stru_1019A0768, (void *)&_mh_execute_header);
}

unsigned __int8 *sub_10120E684(unsigned __int8 *a1, void *a2)
{
  BOOL v3 = sub_1003952E0((uint64_t)a1, a2);
  void *v3 = off_1018A3778;
  id v4 = v3 + 14;
  sub_10120E774((uint64_t)v6);
  sub_1003B35F4(v4, v6);
  if (v8 < 0) {
    operator delete(__p);
  }
  v6[0] = 0;
  sub_1012049AC(a1 + 248, "KeepAllSensorCalibrationRoundsInDb", v6, 0);
  v6[0] = 0;
  sub_1012049AC(a1 + 251, "LogGyroFactoryCalOnStartup", v6, 0);
  if (a1[252]) {
    sub_10120EBB0();
  }
  return a1;
}

void sub_10120E730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_10120E774(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x400000000LL;
  *(_WORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  if (SHIBYTE(v18) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 16), __p[0], (unint64_t)__p[1]);
    int v2 = SHIBYTE(v18);
    *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = 0LL;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  }

  memset(&__str, 0, sizeof(__str));
  uint64_t v3 = sub_1006E27E8();
  sub_100413284(v3, __p);
  BOOL v4 = sub_1002A8560((uint64_t)__p[0], "GyroCalDbFile", &__str);
  BOOL v5 = v4;
  uint64_t v6 = (std::__shared_weak_count *)__p[1];
  if (!__p[1]) {
    goto LABEL_9;
  }
  uint64_t v7 = (unint64_t *)((char *)__p[1] + 8);
  do
    unint64_t v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
    {
LABEL_10:
      std::string::operator=((std::string *)(a1 + 16), &__str);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A38C0);
      }
      uint64_t v9 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
      {
        else {
          uint64_t v10 = *(void **)(a1 + 16);
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Using gyroCal database file: %s.",  (uint8_t *)__p,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A38C0);
        }
        else {
          uint64_t v11 = *(void *)(a1 + 16);
        }
        int v15 = 136315138;
        uint64_t v16 = v11;
        char v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Using gyroCal database file: %s.",  (const char *)&v15);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()",  "%s\n",  v12);
LABEL_36:
        goto LABEL_30;
      }

      goto LABEL_30;
    }
  }

  else
  {
LABEL_9:
    if (v4) {
      goto LABEL_10;
    }
  }

  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A38C0);
  }
  uint64_t v13 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "No gyroCal database file set in preferences. Using the default database.",  (uint8_t *)__p,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A38C0);
    }
    LOWORD(v15) = 0;
    char v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "No gyroCal database file set in preferences. Using the default database.",  &v15,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()",  "%s\n",  v12);
    goto LABEL_36;
  }

void sub_10120EB4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120EBB0()
{
  uint64_t v27 = 0LL;
  __int128 v28 = 0LL;
  uint64_t v29 = 0LL;
  sub_1006A42C8((void **)&v27);
  sub_101125260(v25);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v26 |= 1u;
  *(CFAbsoluteTime *)&v25[77] = Current;
  sub_101139480(v25);
  uint64_t v1 = v27;
  for (uint64_t i = v28; v1 != i; ++v1)
  {
    sub_101093F1C((uint64_t)v22);
    __int128 v3 = *v1;
    v24 |= 0xFu;
    __int128 v23 = v3;
    BOOL v4 = (void *)v25[149];
    BOOL v5 = operator new(0x20uLL);
    sub_101093FD0((uint64_t)v5, (uint64_t)v22);
    unint64_t v6 = v4[3];
    uint64_t v7 = (void *)v4[2];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = v4[1];
      uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
      uint64_t v11 = v6 - v9;
      uint64_t v12 = v11 >> 2;
      else {
        unint64_t v13 = v12;
      }
      BOOL v33 = v4 + 3;
      if (v13) {
        uint64_t v14 = (char *)sub_1000071BC((uint64_t)(v4 + 3), v13);
      }
      else {
        uint64_t v14 = 0LL;
      }
      int v15 = &v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      std::stringbuf::string_type v32 = v16;
      *(void *)int v15 = v5;
      unint64_t v8 = v15 + 8;
      v31.i64[1] = (uint64_t)(v15 + 8);
      uint64_t v18 = (void *)v4[1];
      uint64_t v17 = (void *)v4[2];
      if (v17 == v18)
      {
        int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
      }

      else
      {
        do
        {
          uint64_t v19 = *--v17;
          void *v17 = 0LL;
          *((void *)v15 - sub_1011C5518(qword_1019A41A0, 1) = v19;
          v15 -= 8;
        }

        while (v17 != v18);
        int64x2_t v20 = *(int64x2_t *)(v4 + 1);
        unint64_t v8 = (void *)v31.i64[1];
        uint64_t v16 = v32;
      }

      v4[1] = v15;
      _DWORD v4[2] = v8;
      int64x2_t v31 = v20;
      __int16 v21 = (char *)v4[3];
      v4[3] = v16;
      std::stringbuf::string_type v32 = v21;
      uint64_t v30 = v20.i64[0];
      sub_1004CAE9C((uint64_t)&v30);
    }

    else
    {
      void *v7 = v5;
      unint64_t v8 = v7 + 1;
    }

    _DWORD v4[2] = v8;
    PB::Base::~Base((PB::Base *)v22);
  }

  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_1018A38E0);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v25);
  }
  sub_101127D00((PB::Base *)v25);
  if (v27)
  {
    __int128 v28 = v27;
    operator delete(v27);
  }

void sub_10120EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unint64_t v8 = *(void **)(v6 - 144);
  if (v8)
  {
    *(void *)(v6 - 136) = v8;
    operator delete(v8);
  }

  _Unwind_Resume(a1);
}

NSString *sub_10120EE14(uint64_t a1, uint64_t a2)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A38C0);
  }
  BOOL v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Dumping gyro calibration database",  (uint8_t *)buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A38C0);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Dumping gyro calibration database",  &__p,  2);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual NSString *CLGyroCalibrationDatabaseLocalBase::dumpDatabase(NSString *)",  "%s\n",  v9);
  }

  sub_10120E774((uint64_t)buf);
  sub_1003B50F0(buf, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p);
  if (v14 < 0) {
    operator delete(v13);
  }
  uint64_t v7 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@.db",  -[NSString stringByDeletingPathExtension](v6, "stringByDeletingPathExtension"),  a2);
  if (sub_1003BD864(a1 + 112, -[NSString UTF8String](v7, "UTF8String"))) {
    return v7;
  }
  else {
    return 0LL;
  }
}

void sub_10120F040( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120F084(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_10120F0B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_100E28910();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10120F130;
  v9[3] = &unk_1018A3930;
  v9[4] = a2;
  v9[5] = a4;
  sub_100E29370(v8, a1, a3, (uint64_t)v9);
}

uint64_t sub_10120F130(uint64_t a1, uint64_t a2)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3968);
  }
  BOOL v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "GyroBias received by DeviceMotion in daemon",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3968);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "GyroBias received by DeviceMotion in daemon",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroBiasEstimatorClientLocal::registerWithGyroBiasEstimatorPrivate(CLGyroBiasEstimatorClientCallbac k, BOOL, void *)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return (*(uint64_t (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
}

void sub_10120F2D0(uint64_t a1)
{
  uint64_t v2 = sub_100E28910();
  sub_100E29370(v2, a1, 0, 0LL);
}

uint64_t sub_10120F2FC()
{
  uint64_t result = sub_1006FE6A0();
  if (result)
  {
    uint64_t v1 = operator new(8uLL);
    uint64_t result = (uint64_t)sub_10093B3A4(v1);
    *uint64_t v1 = &off_1018A3910;
    qword_1019A1870 = (uint64_t)v1;
  }

  return result;
}

void sub_10120F344(_Unwind_Exception *a1)
{
}

void sub_10120F35C(uint64_t a1)
{
}

void sub_10120F370(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

id sub_10120F77C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWatchOrientationNotification:a2 data:a3];
}

void sub_10120F8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10120FA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10120FB18(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_10120FC38(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) recordWorkoutSessionEvent:a2];
}

id sub_10120FCE8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateMediatorNotification:a2 data:a3];
}

void sub_101210630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_101210A84(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_101210AB0(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }

    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return 0LL;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0LL;
  v12[1] = v5;
  _DWORD v12[2] = a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1LL);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }

  BOOL v15 = 1LL;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1LL)
  {
    int8x8_t prime = (int8x8_t)2LL;
  }

  else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }

  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }

    else
    {
      uint64_t v27 = 1LL << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }

    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }

    if (!*(void *)&prime)
    {
      uint64_t v34 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0LL;
      *((void *)a1 + sub_1011C5518(qword_1019A41A0, 1) = 0LL;
      goto LABEL_60;
    }
  }

  if (*(void *)&prime >> 61) {
    sub_1000070D4();
  }
  uint64_t v19 = operator new(8LL * *(void *)&prime);
  int64x2_t v20 = *(void **)a1;
  *(void *)a1 = v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0LL;
  *((int8x8_t *)a1 + sub_1011C5518(qword_1019A41A0, 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v21++) = 0LL;
  while (*(void *)&prime != v21);
  int v22 = (void *)*((void *)a1 + 2);
  if (v22)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }

    else
    {
      v23 &= *(void *)&prime - 1LL;
    }

    *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
    __int128 v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }

        else
        {
          v29 &= *(void *)&prime - 1LL;
        }

        if (v29 != v23)
        {
          if (!*(void *)(*(void *)a1 + 8 * v29))
          {
            *(void *)(*(void *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }

          *int v22 = *v28;
          *__int128 v28 = **(void **)(*(void *)a1 + 8 * v29);
          **(void **)(*(void *)a1 + 8 * v29) = v28;
          __int128 v28 = v22;
        }

        unint64_t v29 = v23;
LABEL_56:
        int v22 = v28;
        __int128 v28 = (void *)*v28;
        unint64_t v23 = v29;
      }

      while (v28);
    }
  }

  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }

  else
  {
    v5 &= v7 - 1;
  }

void sub_101210E88(_Unwind_Exception *a1)
{
}

void sub_1012110D4(_Unwind_Exception *a1)
{
}

id sub_10121110C(uint64_t a1, void *a2)
{
  return _[a2 onCompassCalibrationData:a1];
}

void sub_101211708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1012118C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10121196C(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101211998(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_1012119C4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1012119D8(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1012119F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_101211CCC(a1);
  operator delete(v1);
}

id sub_101211A08(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x59) {
    size_t v8 = 89LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x5A)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3AA8);
    }
    uint64_t v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v37 = (unint64_t)"N24CMMotionCoprocessorReply18CompassCalibrationE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v38 = 2048;
      uint64_t v39 = 89LL;
      __int16 v40 = 2048;
      unint64_t v41 = a4;
      __int16 v42 = 1024;
      int v43 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3AA8);
      }
      int v28 = 136315906;
      unint64_t v29 = (unint64_t)"N24CMMotionCoprocessorReply18CompassCalibrationE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 89LL;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v28,  38,  (size_t)v15,  v16);
      float v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CMMotionCoprocessorReply::CompassCalibration>::dispatchData(int, c onst void *, size_t) [T = CMMotionCoprocessorReply::CompassCalibration]",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void **)(a1 + 32);
  BOOL v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  unint64_t v17 = sub_101211D20;
  uint64_t v18 = &unk_1018A3A88;
  uint64_t v19 = v10;
  __int128 v23 = __dst[2];
  __int128 v24 = __dst[3];
  *(_OWORD *)unint64_t v25 = *(_OWORD *)v27;
  *(_OWORD *)&v25[9] = *(_OWORD *)&v27[9];
  __int128 v21 = __dst[0];
  __int128 v22 = __dst[1];
  __int128 v20 = *(_OWORD *)(a1 + 16);
  return [v11 async:&v15];
}

uint64_t sub_101211CCC(uint64_t a1)
{
  *(void *)a1 = off_1018A3A40;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_101211D20(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 56, *(void *)(a1 + 48));
  }
  return result;
}

void sub_101211D60(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101211EC0(_Unwind_Exception *a1)
{
}

id sub_101211ED4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAccelerometer800Data:a1 count:a2];
}

void sub_1012122A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_101212354(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_101212380(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  *(void *)a1 = off_1018A2210;
  *(void *)a1 = &off_1018A3AF8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  id v9 = a2;
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 56) = operator new[](224LL * a4);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = a4;
  v13[0] = 0LL;
  v13[1] = v13;
  _OWORD v13[2] = 0x2020000000LL;
  char v14 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_1012124C8;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v13;
  *(void *)(a1 + 4sub_1011C5518(qword_1019A41A0, 0) = _Block_copy(aBlock);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1012124DC;
  v11[3] = &unk_10182EFF0;
  v11[4] = v13;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = _Block_copy(v11);
  _Block_object_dispose(v13, 8);
  return a1;
}

void sub_1012124A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1012124C8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_1012124DC(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_1012124F8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1012125F8(a1);
  operator delete(v1);
}

void *sub_10121250C(void *result, uint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (_OWORD *)(result[7] + 224LL * *((unsigned int *)result + 16));
  __int128 v4 = a3[5];
  __int128 v6 = a3[2];
  __int128 v5 = a3[3];
  void v3[4] = a3[4];
  v3[5] = v4;
  v3[2] = v6;
  v3[3] = v5;
  __int128 v7 = a3[9];
  __int128 v9 = a3[6];
  __int128 v8 = a3[7];
  _WORD v3[8] = a3[8];
  v3[9] = v7;
  v3[6] = v9;
  v3[7] = v8;
  __int128 v10 = a3[13];
  __int128 v12 = a3[10];
  __int128 v11 = a3[11];
  v3[12] = a3[12];
  v3[13] = v10;
  v3[10] = v12;
  v3[11] = v11;
  __int128 v13 = a3[1];
  _OWORD *v3 = *a3;
  v3[1] = v13;
  unsigned int v14 = *((_DWORD *)result + 17);
  unsigned int v15 = *((_DWORD *)result + 16) + 1;
  *((_DWORD *)result + 16) = v15;
  if (v15 >= v14)
  {
    uint64_t v16 = result;
    uint64_t v18 = result[3];
    uint64_t v17 = result[4];
    uint64_t v19 = result[6];
    uint64_t v20 = result[7];
    __int128 v21 = (void *)result[2];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_101212658;
    v22[3] = &unk_10184D6C8;
    v22[4] = v19;
    v22[5] = v18;
    unsigned int v23 = v15;
    v22[6] = v20;
    v22[7] = v17;
    [v21 async:v22];
    uint64_t result = operator new[](224LL * *((unsigned int *)v16 + 17));
    v16[7] = result;
    *((_DWORD *)v16 + 16) = 0;
  }

  return result;
}

uint64_t sub_1012125F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1012125F8(uint64_t a1)
{
  *(void *)a1 = &off_1018A3AF8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  uint64_t v2 = *(void **)(a1 + 56);
  if (v2) {
    operator delete[](v2);
  }
  return sub_1011C07F8(a1);
}

void sub_101212658(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16LL))()) {
    (*(void (**)(void, void, void))(a1 + 40))( *(void *)(a1 + 48),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56));
  }
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete[](v2);
  }
}

void sub_101212A94(_Unwind_Exception *a1)
{
}

id sub_101212AB0(uint64_t a1, void *a2)
{
  return _[a2 onAccelerometerData:a1];
}

void sub_101212D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_101212D60(uint64_t a1, uint64_t a2)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 72),  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  (*(void *)(a2 + 7824) & 0xFF0000FF00) != 0),  @"SensorRecordingActiveAndEnabled");
}

void sub_101212E50(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void *sub_101212E7C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_1018A3B50;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_101212FA8;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_101212FBC;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101212F80(_Unwind_Exception *a1)
{
}

uint64_t sub_101212FA8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_101212FBC(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_101212FD8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_101213280(a1);
  operator delete(v1);
}

id sub_101212FEC(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3B78);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v33 = (unint64_t)"N15CLAccelerometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 24LL;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A3B78);
      }
      int v24 = 136315906;
      unint64_t v25 = (unint64_t)"N15CLAccelerometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 24LL;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v24,  38,  v17,  LODWORD(v18[0]));
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLAccelerometer::Sample>::dispatchData(int, const void *, size_t) [T = CLAccelerometer::Sample]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int128 v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_1012132D4;
  v18[3] = &unk_10185F638;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v23;
  uint64_t v21 = v10;
  return [v13 async:v18];
}

uint64_t sub_101213280(uint64_t a1)
{
  *(void *)a1 = off_1018A3B50;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_1012132D4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 72));
  }
  return result;
}

void sub_101213318(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101213344()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1019A0790, (void *)&_mh_execute_header);
}

void sub_101213388(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A3C98);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v14 = 1;
    __int128 v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLGeomagneticModelProviderDaemon::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    __int128 v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      uint64_t v20 = "activity";
      __int16 v21 = 2050;
      __int128 v22 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLGeomagneticModelProviderDaemon::onStatusNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v14 = 0;
  }

  if (*a2 == 2)
  {
    *(_DWORD *)std::string buf = 0;
    (*((void (**)(id *, uint8_t *))*a4 + 22))(a4, buf);
  }

  else if (*a2 == 3 && !*((_BYTE *)a4 + 108))
  {
    size_t v8 = (char *)a4[8];
    if (v8)
    {
      id v9 = (int *)(a4 + 8);
      do
      {
        int v10 = *((_DWORD *)v8 + 8);
        BOOL v11 = v10 < 0;
        if (v10 >= 0) {
          uint64_t v12 = (id *)v8;
        }
        else {
          uint64_t v12 = (id *)(v8 + 8);
        }
        if (!v11) {
          id v9 = (int *)v8;
        }
        size_t v8 = (char *)*v12;
      }

      while (*v12);
      if (v9 != (int *)(a4 + 8) && v9[8] <= 0 && v9[14])
      {
        *(_DWORD *)std::string buf = 0;
        (*((void (**)(id *, uint8_t *))*a4 + 21))(a4, buf);
      }
    }
  }

  if (v14) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012135C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012135E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A3C98);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    __int128 v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLGeomagneticModelProviderDaemon::onClientNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    size_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      uint64_t v20 = "activity";
      __int16 v21 = 2050;
      uint64_t v22 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLGeomagneticModelProviderDaemon::onClientNotification, event:%{public, location:es cape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v13 = 0;
  }

  if (*a2 == 4 && *(_DWORD *)(a3 + 188) != 1)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    id v9 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "location services is now disabled; invalidating geomagnetic field data",
        buf,
        2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      v14[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "location services is now disabled; invalidating geomagnetic field data",
        v14,
        2);
      BOOL v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::onClientNotification(int, const CLClientManager_Type::Notification &, con st CLClientManager_Type::NotificationData &)",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    sub_101215C38(a4);
  }

  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012138E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101213904(uint64_t a1)
{
}

void sub_10121390C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 416);
  double v4 = v3 * 0.5;
  double v5 = *(double *)(a1 + 168);
  if (v5 >= 0.0 && Current - v5 < v4)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    BOOL v11 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 168);
      *(_DWORD *)std::string buf = 134218240;
      uint64_t v19 = v12;
      __int16 v20 = 2048;
      double v21 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "current location is still fresh, not requesting coarse location for computing geomagnetic data, gmmTimestamp %.1 f gmmFreshnessDuration %.1f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "current location is still fresh, not requesting coarse location for computing geomagnetic data, gmmTimestamp %.1 f gmmFreshnessDuration %.1f");
      goto LABEL_22;
    }
  }

  else
  {
    double v7 = v3 * 0.4;
    if (Current - *(double *)(a1 + 424) >= v3 * 0.4)
    {
      if (!*(_BYTE *)(a1 + 408) && *(void *)(a1 + 400))
      {
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        char v14 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "requesting coarse location for computing geomagnetic data",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          LOWORD(v17) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "requesting coarse location for computing geomagnetic data",  &v17,  2);
          int v16 = (uint8_t *)v15;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::startCoarseLocationUpdates()",  "%s\n",  v15);
          if (v16 != buf) {
            free(v16);
          }
        }

        [*(id *)(*(void *)(a1 + 400) + 16) register:*(void *)(*(void *)(a1 + 400) + 8) forNotification:2 registrationInfo:0];
        *(_BYTE *)(a1 + 40_Block_object_dispose(va, 8) = 1;
        *(double *)(a1 + 424) = Current;
        [*(id *)(a1 + 376) setNextFireDelay:20.0];
      }
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      size_t v8 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 424);
        *(_DWORD *)std::string buf = 134218240;
        uint64_t v19 = v9;
        __int16 v20 = 2048;
        double v21 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "avoiding frequent coarse location request for computing geomagnetic data, fLastCoarseLocationRequestTimestamp %.1f minimumLocationRequestInterval %.1f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "avoiding frequent coarse location request for computing geomagnetic data, fLastCoarseLocationRequestTimestamp %.1f minimumLocationRequestInterval %.1f");
LABEL_22:
        char v13 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::startCoarseLocationUpdates()",  "%s\n",  v10);
        if (v13 != buf) {
          free(v13);
        }
      }
    }
  }

id sub_101213DB0(uint64_t a1)
{
  return sub_101213DB8(*(void *)(a1 + 32));
}

id sub_101213DB8(uint64_t a1)
{
  id result = [*(id *)(a1 + 376) setNextFireDelay:1.79769313e308];
  if (*(_BYTE *)(a1 + 408))
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    double v3 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "stopping coarse location for computing geomagnetic data",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      v6[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "stopping coarse location for computing geomagnetic data",  v6,  2);
      double v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::stopCoarseLocationUpdates()",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    id result = [*(id *)(*(void *)(a1 + 400) + 16) unregister:*(void *)(*(void *)(a1 + 400) + 8) forNotification:2];
    *(_BYTE *)(a1 + 40_Block_object_dispose(va, 8) = 0;
  }

  return result;
}

uint64_t sub_101213F74(void *a1)
{
  *a1 = off_1018A3BA8;
  sub_101214010((uint64_t)a1);
  uint64_t v2 = a1[50];
  a1[50] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[49];
  a1[49] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = a1[48];
  a1[48] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  sub_1008AF1C4((uint64_t)(a1 + 22));
  return sub_100A15AF4(a1);
}

void sub_101213FFC(void *a1)
{
  uint64_t v1 = (void *)sub_101213F74(a1);
  operator delete(v1);
}

void sub_101214010(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 400);
  *(void *)(a1 + 40sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
}

__n128 sub_101214084@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 144);
  __int128 v4 = *(_OWORD *)(a1 + 160);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v4;
  return result;
}

void sub_101214098(uint64_t a1)
{
  if (*(double *)(a1 + 168) >= 0.0)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    double v5 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "loadGeomagneticDataFromCache already loaded",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      LOWORD(v2_Block_object_dispose(va, 8) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "loadGeomagneticDataFromCache already loaded",  &v28,  2);
      goto LABEL_19;
    }
  }

  else
  {
    int v2 = sub_1008B1A38(a1 + 176);
    if ((v2 - 1) > 1)
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      double v7 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "loadGeomagneticDataFromCache loading with authorization status %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        int v28 = 67240192;
        LODWORD(v29) = v2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "loadGeomagneticDataFromCache loading with authorization status %{public}d",  &v28,  8);
        uint64_t v23 = (uint8_t *)v22;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()",  "%s\n",  v22);
        if (v23 != buf) {
          free(v23);
        }
      }

      uint64_t v27 = 0LL;
      uint64_t v8 = sub_1002F8DDC();
      if (sub_1002AA610(v8, @"GeomagneticModel", (CFTypeRef *)&v27) && [v27 count] == (id)4)
      {
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 0), "doubleValue");
        uint64_t v10 = v9;
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 1), "doubleValue");
        double v12 = v11;
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 2), "doubleValue");
        double v14 = v13;
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 3), "doubleValue");
        double v16 = v15;
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        int v17 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134349056;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "recovered geomagnetic information @ %{public}.3f",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          int v28 = 134349056;
          uint64_t v29 = v10;
          LODWORD(v26) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "recovered geomagnetic information @ %{public}.3f",  &v28,  v26);
          unint64_t v25 = (uint8_t *)v24;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()",  "%s\n",  v24);
          if (v25 != buf) {
            free(v25);
          }
        }

        *(double *)(a1 + 16sub_1011C5518(qword_1019A41A0, 0) = v16;
        *(void *)(a1 + 16_Block_object_dispose(va, 8) = v10;
        *(double *)(a1 + 136) = v12;
        *(double *)(a1 + 152) = v14;
        __double2 v18 = __sincos_stret(v16 * 0.0174532924);
        *(double *)(a1 + 144) = v12 * v18.__cosval;
        __double2 v19 = __sincos_stret(v14 * 0.0174532924);
        *(double *)(a1 + 112) = v19.__cosval * (v12 * v18.__cosval);
        *(double *)(a1 + 12sub_1011C5518(qword_1019A41A0, 0) = v19.__sinval * (v12 * v18.__cosval);
        *(double *)(a1 + 12_Block_object_dispose(va, 8) = v12 * v18.__sinval;
        __int128 v20 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 112);
        __int128 v31 = v20;
        __int128 v21 = *(_OWORD *)(a1 + 160);
        __int128 v32 = *(_OWORD *)(a1 + 144);
        __int128 v33 = v21;
        int v28 = 0;
        (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v28,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
        [*(id *)(a1 + 368) setNextFireDelay:*(double *)(a1 + 416)];
      }
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      uint64_t v3 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "loadGeomagneticDataFromCache not loading because deauthorized (%{public}d)",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        int v28 = 67240192;
        LODWORD(v29) = v2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "loadGeomagneticDataFromCache not loading because deauthorized (%{public}d)",  &v28,  8);
LABEL_19:
        __int128 v6 = (uint8_t *)v4;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()",  "%s\n",  v4);
        if (v6 != buf) {
          free(v6);
        }
      }
    }
  }

uint64_t sub_1012146D8(uint64_t a1, int *a2)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_1018A3CB8);
  }
  __int128 v4 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client requested notification %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    int v11 = *a2;
    v16[0] = 67109120;
    v16[1] = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Client requested notification %d",  v16);
    double v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Ty pe::Notification &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  if (!*(void *)(a1 + 400))
  {
    sub_100AEB408(a1 + 176, (uint64_t)sub_101214A5C, a1, *(void **)(a1 + 32), buf);
    uint64_t v6 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    uint64_t v7 = *(void *)(a1 + 400);
    *(void *)(a1 + 40sub_1011C5518(qword_1019A41A0, 0) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      uint64_t v8 = *(void *)buf;
      *(void *)std::string buf = 0LL;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
      }
    }

    [*(id *)(*(void *)(a1 + 400) + 16) register:*(void *)(*(void *)(a1 + 400) + 8) forNotification:14 registrationInfo:0];
  }

  if (!*a2)
  {
    sub_101214098(a1);
    sub_10121390C(a1);
    [*(id *)(*(void *)(a1 + 400) + 16) register:*(void *)(*(void *)(a1 + 400) + 8) forNotification:4 registrationInfo:0];
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    uint64_t v9 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "registered as location spectator to compute geomagnetic data",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "registered as location spectator to compute geomagnetic data",  v16,  2);
      double v15 = (uint8_t *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_ Type::Notification &)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }
  }

  return 1LL;
}

void sub_101214A5C(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A3C98);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    LOBYTE(v102) = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLGeomagneticModelProviderDaemon::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      *(_WORD *)&_BYTE buf[28] = 2050;
      *(void *)&buf[30] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLGeomagneticModelProviderDaemon::onLocationNotification, event:%{public, location: escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    LOBYTE(v102) = 0;
  }

  HIDWORD(v1sub_1011C5518(qword_1019A41A0, 0) = *a2;
  LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = *a2;
  unsigned int v9 = v10 >> 1;
  if (v9 >= 3)
  {
    if (v9 == 7)
    {
      int v27 = sub_1008B1A38(a4 + 176);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      int v28 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "new location authorization status for geomagnetic model: %{public}d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        *(_DWORD *)double v103 = 67240192;
        *(_DWORD *)&v103[4] = v27;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "new location authorization status for geomagnetic model: %{public}d",  v103,  8);
        double v72 = (char *)v71;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v71);
        if (v72 != buf) {
          free(v72);
        }
      }

      if ((v27 - 3) < 2)
      {
        sub_101214098(a4);
        sub_10121390C(a4);
      }

      else if ((v27 - 1) <= 1)
      {
        sub_101215C38(a4);
      }
    }
  }

  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (*(double *)((char *)a3 + 20) >= 0.0
      && ((double v12 = a3[11], v12 < 0.0) || Current <= v12 + *(double *)((char *)a3 + 76) + *(double *)(a4 + 416))
      && sub_1002958AC() == 1)
    {
      sub_101213DB8(a4);
      double v13 = *(double *)(a4 + 168);
      if (v13 < 0.0 || *(double *)((char *)a3 + 76) - v13 >= *(double *)(a4 + 416) * 0.5)
      {
        float v29 = sub_1011D7B48();
        float v30 = *(double *)((char *)a3 + 4);
        float v31 = *(double *)((char *)a3 + 12);
        float v32 = *(double *)((char *)a3 + 28);
        if (sub_1003688DC((uint64_t)v103, v30, v31, v32, v29))
        {
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          __int128 v33 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
          {
            uint64_t v34 = *(void *)((char *)a3 + 76);
            *(_DWORD *)std::string buf = 134349312;
            *(void *)&uint8_t buf[4] = v34;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(double *)&buf[14] = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "declination calculation failed @ %{public}lf (%{public}f)",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_1018A3CB8);
            }
            uint64_t v73 = *(void *)((char *)a3 + 76);
            int v121 = 134349312;
            uint64_t v122 = v73;
            __int16 v123 = 2050;
            double v124 = v29;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "declination calculation failed @ %{public}lf (%{public}f)",  &v121,  22);
            __int128 v75 = (char *)v74;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLGeomagneticModelProviderDaemon::getGeomagneticField(const CLDaemonLocation &)",  "%s\n",  v74);
            if (v75 != buf) {
              free(v75);
            }
          }

          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          uint64_t v35 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v36 = *(void *)((char *)a3 + 4);
            uint64_t v37 = *(void *)((char *)a3 + 12);
            uint64_t v38 = *(void *)((char *)a3 + 28);
            *(_DWORD *)std::string buf = 134218496;
            *(void *)&uint8_t buf[4] = v36;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v37;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_1018A3CB8);
            }
            uint64_t v39 = *(void *)((char *)a3 + 4);
            uint64_t v40 = *(void *)((char *)a3 + 12);
            uint64_t v41 = *(void *)((char *)a3 + 28);
            *(_DWORD *)double v103 = 134218496;
            *(void *)&v103[4] = v39;
            *(_WORD *)&v103[12] = 2048;
            *(void *)&v103[14] = v40;
            *(_WORD *)&v103[22] = 2048;
            uint64_t v104 = v41;
            LODWORD(v99) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>",  COERCE_DOUBLE(v103),  v99,  v100);
            double v16 = (char *)v42;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)",  "%s\n",  v42);
            goto LABEL_32;
          }
        }

        else
        {
          float64x2_t v43 = vcvtq_f64_f32(*(float32x2_t *)&v103[8]);
          *(float64x2_t *)(a4 + 112) = vcvtq_f64_f32(*(float32x2_t *)v103);
          *(float64x2_t *)(a4 + 12_Block_object_dispose(va, 8) = v43;
          *(float64x2_t *)(a4 + 144) = vcvtq_f64_f32(*(float32x2_t *)&v103[16]);
          *(double *)(a4 + 16sub_1011C5518(qword_1019A41A0, 0) = *(float *)&v104;
          *(double *)(a4 + 16_Block_object_dispose(va, 8) = *(double *)((char *)a3 + 76);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          std::stringbuf v44 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v45 = *(void *)((char *)a3 + 4);
            uint64_t v46 = *(void *)((char *)a3 + 12);
            uint64_t v47 = *(void *)((char *)a3 + 28);
            double v48 = *(double *)((char *)a3 + 76);
            uint64_t v49 = *(void *)(a4 + 152);
            uint64_t v50 = *(void *)(a4 + 160);
            double v51 = v48 + *(double *)(a4 + 416);
            *(_DWORD *)std::string buf = 134219520;
            *(void *)&uint8_t buf[4] = v45;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v46;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = v47;
            *(_WORD *)&_BYTE buf[32] = 2048;
            *(double *)&buf[34] = v48;
            *(_WORD *)&buf[42] = 2048;
            *(void *)&buf[44] = v49;
            *(_WORD *)&buf[52] = 2048;
            *(void *)&buf[54] = v50;
            *(_WORD *)&buf[62] = 2048;
            double v126 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f",  buf,  0x48u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_1018A3CB8);
            }
            uint64_t v76 = *(void *)((char *)a3 + 4);
            uint64_t v77 = *(void *)((char *)a3 + 12);
            uint64_t v78 = *(void *)((char *)a3 + 28);
            double v79 = *(double *)((char *)a3 + 76);
            uint64_t v80 = *(void *)(a4 + 152);
            uint64_t v81 = *(void *)(a4 + 160);
            double v82 = v79 + *(double *)(a4 + 416);
            *(_DWORD *)double v103 = 134219520;
            *(void *)&v103[4] = v76;
            *(_WORD *)&v103[12] = 2048;
            *(void *)&v103[14] = v77;
            *(_WORD *)&v103[22] = 2048;
            uint64_t v104 = v78;
            __int16 v105 = 2048;
            double v106 = v79;
            __int16 v107 = 2048;
            uint64_t v108 = v80;
            __int16 v109 = 2048;
            uint64_t v110 = v81;
            __int16 v111 = 2048;
            double v112 = v82;
            LODWORD(v99) = 72;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f",  COERCE_DOUBLE(v103),  v99,  v100,  *(double *)state.opaque,  *(double *)&state.opaque[1],  v102);
            uint64_t v84 = (char *)v83;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)",  "%s\n",  v83);
            if (v84 != buf) {
              free(v84);
            }
          }

          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          __int128 v52 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v53 = *(void *)((char *)a3 + 4);
            uint64_t v54 = *(void *)((char *)a3 + 12);
            uint64_t v55 = *(void *)((char *)a3 + 28);
            uint64_t v56 = *(void *)(a4 + 112);
            uint64_t v57 = *(void *)(a4 + 120);
            double v58 = *(double *)(a4 + 128);
            uint64_t v59 = *(void *)(a4 + 136);
            uint64_t v60 = *(void *)(a4 + 144);
            uint64_t v61 = *(void *)(a4 + 152);
            uint64_t v62 = *(void *)(a4 + 160);
            *(_DWORD *)std::string buf = 136317698;
            *(void *)&uint8_t buf[4] = "Compass-Geomagnetic";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v53;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = v54;
            *(_WORD *)&_BYTE buf[32] = 2048;
            *(void *)&buf[34] = v55;
            *(_WORD *)&buf[42] = 2048;
            *(void *)&buf[44] = v56;
            *(_WORD *)&buf[52] = 2048;
            *(void *)&buf[54] = v57;
            *(_WORD *)&buf[62] = 2048;
            double v126 = v58;
            __int16 v127 = 2048;
            uint64_t v128 = v59;
            __int16 v129 = 2048;
            uint64_t v130 = v60;
            __int16 v131 = 2048;
            uint64_t v132 = v61;
            __int16 v133 = 2048;
            uint64_t v134 = v62;
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,",  buf,  0x70u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_1018A3CB8);
            }
            uint64_t v85 = *(void *)((char *)a3 + 4);
            uint64_t v86 = *(void *)((char *)a3 + 12);
            double v87 = *(double *)((char *)a3 + 28);
            uint64_t v88 = *(void *)(a4 + 112);
            uint64_t v89 = *(void *)(a4 + 120);
            double v90 = *(double *)(a4 + 128);
            uint64_t v91 = *(void *)(a4 + 136);
            uint64_t v92 = *(void *)(a4 + 144);
            uint64_t v93 = *(void *)(a4 + 152);
            uint64_t v94 = *(void *)(a4 + 160);
            *(_DWORD *)double v103 = 136317698;
            *(void *)&v103[4] = "Compass-Geomagnetic";
            *(_WORD *)&v103[12] = 2048;
            *(void *)&v103[14] = v85;
            *(_WORD *)&v103[22] = 2048;
            uint64_t v104 = v86;
            __int16 v105 = 2048;
            double v106 = v87;
            __int16 v107 = 2048;
            uint64_t v108 = v88;
            __int16 v109 = 2048;
            uint64_t v110 = v89;
            __int16 v111 = 2048;
            double v112 = v90;
            __int16 v113 = 2048;
            uint64_t v114 = v91;
            __int16 v115 = 2048;
            uint64_t v116 = v92;
            __int16 v117 = 2048;
            uint64_t v118 = v93;
            __int16 v119 = 2048;
            uint64_t v120 = v94;
            LODWORD(v99) = 112;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,",  v103,  v99,  v100,  *(double *)state.opaque,  *(double *)&state.opaque[1],  v102);
            uint64_t v96 = (char *)v95;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)",  "%s\n",  v95);
            if (v96 != buf) {
              free(v96);
            }
          }

          __int128 v63 = *(_OWORD *)(a4 + 128);
          *(_OWORD *)std::string buf = *(_OWORD *)(a4 + 112);
          *(_OWORD *)&uint8_t buf[16] = v63;
          __int128 v64 = *(_OWORD *)(a4 + 160);
          *(_OWORD *)&_BYTE buf[32] = *(_OWORD *)(a4 + 144);
          *(_OWORD *)&buf[48] = v64;
          *(_DWORD *)double v103 = 0;
          (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a4 + 152LL))( a4,  v103,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
          [*(id *)(a4 + 368) setNextFireDelay:*(double *)(a4 + 416)];
          double v66 = *(double *)(a4 + 160);
          double v65 = *(double *)(a4 + 168);
          double v67 = *(double *)(a4 + 136);
          double v68 = *(double *)(a4 + 152);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          double v69 = (os_log_s *)qword_101934588;
          if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 134349056;
            *(double *)&uint8_t buf[4] = v65;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "caching geomagnetic information @ %{public}.3f",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934580 != -1) {
              dispatch_once(&qword_101934580, &stru_1018A3CB8);
            }
            *(_DWORD *)double v103 = 134349056;
            *(double *)&v103[4] = v65;
            LODWORD(v99) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "caching geomagnetic information @ %{public}.3f",  v103,  *(void *)&v99);
            __int128 v98 = (char *)v97;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::storeGeomagneticDataToCache()",  "%s\n",  v97);
            if (v98 != buf) {
              free(v98);
            }
          }

          uint64_t v70 = sub_1002F8DDC();
          *(void *)std::string buf = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v65);
          *(void *)&uint8_t buf[8] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", round(v67));
          *(void *)&uint8_t buf[16] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", round(v68));
          *(void *)&buf[24] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", round(v66));
          +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 4LL);
          sub_1002AB3DC(v70);
        }
      }

      else
      {
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        double v14 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "current location is still fresh, geomagnetic data is not re-calculated",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_1018A3CB8);
          }
          *(_WORD *)double v103 = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "current location is still fresh, geomagnetic data is not re-calculated",  v103,  2);
          double v16 = (char *)v15;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)",  "%s\n",  v15);
LABEL_32:
          if (v16 != buf) {
            free(v16);
          }
        }
      }
    }

    else
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      int v17 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)((char *)a3 + 4);
        uint64_t v19 = *(void *)((char *)a3 + 12);
        uint64_t v20 = *(void *)((char *)a3 + 28);
        uint64_t v21 = *(void *)((char *)a3 + 76);
        *(_DWORD *)std::string buf = 134218752;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v20;
        *(_WORD *)&_BYTE buf[32] = 2048;
        *(void *)&buf[34] = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        uint64_t v22 = *(void *)((char *)a3 + 4);
        uint64_t v23 = *(void *)((char *)a3 + 12);
        uint64_t v24 = *(void *)((char *)a3 + 28);
        double v25 = *(double *)((char *)a3 + 76);
        *(_DWORD *)double v103 = 134218752;
        *(void *)&v103[4] = v22;
        *(_WORD *)&v103[12] = 2048;
        *(void *)&v103[14] = v23;
        *(_WORD *)&v103[22] = 2048;
        uint64_t v104 = v24;
        __int16 v105 = 2048;
        double v106 = v25;
        LODWORD(v99) = 42;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f",  COERCE_DOUBLE(v103),  v99,  v100,  *(double *)state.opaque);
        double v16 = (char *)v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)",  "%s\n",  v26);
        goto LABEL_32;
      }
    }
  }

  if (LOBYTE(v102)) {
    os_activity_scope_leave(&state);
  }
}

void sub_101215A54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101215A74(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
  {
    sub_101213DB8(a1);
    uint64_t v3 = *(void *)(a1 + 400);
    if (v3)
    {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:4];
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      __int128 v4 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "unregistered as location spectator to compute geomagnetic data",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_1018A3CB8);
        }
        v8[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "unregistered as location spectator to compute geomagnetic data",  v8,  2);
        uint64_t v7 = (uint8_t *)v6;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeomagneticModelProviderDaemon::unregisterForNotificationInternal(const CLGeomagneticModelProvi der_Type::Notification &)",  "%s\n",  v6);
        if (v7 != buf) {
          free(v7);
        }
      }
    }

    [*(id *)(a1 + 368) setNextFireDelay:1.79769313e308];
  }

  return 1LL;
}

void sub_101215C38(uint64_t a1)
{
  *(void *)(a1 + 424) = 0LL;
  if (*(double *)(a1 + 168) >= 0.0)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    int v5 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "invalidateGeomagneticField invalidating",  buf,  2u);
    }

    uint64_t v6 = (_OWORD *)(a1 + 112);
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "invalidateGeomagneticField invalidating",  v15,  2);
      double v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }

    [*(id *)(a1 + 368) setNextFireDelay:1.79769313e308];
    *(void *)(a1 + 16sub_1011C5518(qword_1019A41A0, 0) = 0LL;
    *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    _OWORD *v6 = 0u;
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0xBFF0000000000000LL;
    __int128 v7 = *(_OWORD *)(a1 + 128);
    v15[0] = *v6;
    v15[1] = v7;
    __int128 v8 = *(_OWORD *)(a1 + 160);
    v15[2] = *(_OWORD *)(a1 + 144);
    __int128 v16 = v8;
    uint64_t v9 = sub_1002F8DDC();
    sub_1002A66DC(v9);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    unint64_t v10 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v20 = *((void *)&v16 + 1);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Geomagnetic model data invalidated. Sending notification with timestamp %f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      int v17 = 134217984;
      uint64_t v18 = *((void *)&v16 + 1);
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Geomagnetic model data invalidated. Sending notification with timestamp %f",  COERCE_DOUBLE(&v17));
      double v14 = (uint8_t *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()",  "%s\n",  v13);
      if (v14 != buf) {
        free(v14);
      }
    }

    *(_DWORD *)std::string buf = 0;
    (*(void (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v15,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  else
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_1018A3CB8);
    }
    uint64_t v1 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "invalidateGeomagneticField already invalid",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_1018A3CB8);
      }
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "invalidateGeomagneticField already invalid",  v15,  2);
      uint64_t v3 = (uint8_t *)v2;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()",  "%s\n",  v2);
      if (v3 != buf) {
        free(v3);
      }
    }
  }

uint64_t sub_1012160C8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_101216140;
  block[3] = &unk_10181A288;
  block[4] = a1;
  if (qword_1019A07A8 != -1) {
    dispatch_once(&qword_1019A07A8, block);
  }
  return qword_1019A19A0;
}

void sub_101216140(uint64_t a1)
{
  int v2 = (char *)operator new(0x1B0uLL);
  sub_100A15A2C((uint64_t)v2, *(void **)(a1 + 32));
  *(void *)int v2 = off_1018A3BA8;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((void *)v2 + 2sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  *((void *)v2 + 2sub_1011C5518(qword_1019A41A0, 1) = 0xBFF0000000000000LL;
  sub_100AEB404(v2 + 176, "CompassCalibration", *((void *)v2 + 4));
  *((void *)v2 + 46) = [*((id *)v2 + 5) newTimer];
  uint64_t v3 = v2 + 384;
  *((void *)v2 + 47) = [*((id *)v2 + 5) newTimer];
  *((void *)v2 + 4_Block_object_dispose(va, 8) = 0LL;
  *((void *)v2 + 49) = 0LL;
  *((void *)v2 + 5sub_1011C5518(qword_1019A41A0, 0) = 0LL;
  v2[408] = 0;
  sub_1002F0B04(&v24);
  else {
    double v4 = 9000.0;
  }
  unsigned __int8 size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    uint64_t v6 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

  *((double *)v2 + 52) = v4;
  *((void *)v2 + 53) = 0LL;
  sub_10030A238(&v24);
  sub_1010DDBC0(&__p, "WMM.dat");
  if (SHIBYTE(v21) >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (SHIBYTE(v21) >= 0) {
    std::string::size_type v9 = HIBYTE(v21);
  }
  else {
    std::string::size_type v9 = v20;
  }
  unint64_t v10 = std::string::append(&v24, p_p, v9);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t cap = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)int v27 = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  if (cap >= 0) {
    double v12 = (char *)v27;
  }
  else {
    double v12 = (char *)v27[0];
  }
  sub_1003688C8(v12);
  sub_1003CC884((uint64_t)sub_101213388, (uint64_t)v2, *((void **)v2 + 4), &v24);
  std::string::size_type v13 = v24.__r_.__value_.__r.__words[0];
  v24.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v14 = *(void *)v3;
  *(void *)uint64_t v3 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    std::string::size_type v15 = v24.__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = 0LL;
    if (v15) {
      (*(void (**)(std::string::size_type))(*(void *)v15 + 8LL))(v15);
    }
  }

  [*(id *)(*(void *)v3 + 16) register:*(void *)(*(void *)v3 + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)v3 + 16) register:*(void *)(*(void *)v3 + 8) forNotification:3 registrationInfo:0];
  sub_100583844((uint64_t)sub_1012135E4, (uint64_t)v2, *((void **)v2 + 4), &v24);
  std::string::size_type v16 = v24.__r_.__value_.__r.__words[0];
  v24.__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v17 = *((void *)v2 + 49);
  *((void *)v2 + 49) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    std::string::size_type v18 = v24.__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = 0LL;
    if (v18) {
      (*(void (**)(std::string::size_type))(*(void *)v18 + 8LL))(v18);
    }
  }

  [*(id *)(*((void *)v2 + 49) + 16) register:*(void *)(*((void *)v2 + 49) + 8) forNotification:4 registrationInfo:0];
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  v24.__r_.__value_.__l.__size_ = 3221225472LL;
  v24.__r_.__value_.__l.__cap_ = (std::string::size_type)sub_101213904;
  double v25 = &unk_10181D3D0;
  uint64_t v26 = v2;
  [*((id *)v2 + 46) setHandler:&v24];
  *(double *)&std::string __p = COERCE_DOUBLE(_NSConcreteStackBlock);
  uint64_t v20 = 3221225472LL;
  uint64_t v21 = sub_101213DB0;
  uint64_t v22 = &unk_10181D3D0;
  uint64_t v23 = v2;
  [*((id *)v2 + 47) setHandler:&__p];
  if (SHIBYTE(cap) < 0) {
    operator delete(v27[0]);
  }
  qword_1019A19A0 = (uint64_t)v2;
}

void sub_101216444( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  uint64_t v34 = v30[50];
  v30[50] = 0LL;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  uint64_t v35 = v30[49];
  v30[49] = 0LL;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  uint64_t v36 = *v32;
  *float v32 = 0LL;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
  }
  sub_1008AF1C4(v31);
  sub_100A15AF4(v30);
  operator delete(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_101216538(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = (int *)v8;
  v8[0] = 0LL;
  v8[1] = 0LL;
  std::string::size_type v9 = a2;
  uint64_t v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  unint64_t v10 = (_DWORD *)(a1 + 104);
  double v4 = sub_10023311C((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_1012CF090, &v10);
  int v5 = (void *)v8[0];
  v4[8] = v9;
  uint64_t v2 = *v3;
  sub_100008390((uint64_t)&v7, v5);
  return v2;
}

void sub_1012165E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_101216600(uint64_t a1, uint64_t a2)
{
  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      else {
        std::string::size_type v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }

    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28LL);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
      }

      sub_100233254(v5, (int *)&v15 + 1);
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A3C98);
      }
      unint64_t v10 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        __int128 v11 = (void *)(a1 + 8);
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v21 = v11;
        __int16 v22 = 1026;
        int v23 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_1018A3C98);
        }
        double v12 = (void *)(a1 + 8);
        int v16 = 136446466;
        uint64_t v17 = v12;
        __int16 v18 = 1026;
        int v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        uint64_t v14 = (uint8_t *)v13;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Notifi cationData>::removeClient(int) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationDa ta_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v13);
        if (v14 != buf) {
          free(v14);
        }
      }
    }
  }

uint64_t sub_101216874(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1011D622C(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96LL))(a1, a2, &v10, v7);
  }

  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))(a1, a2, &v9);
  }

uint64_t sub_1012168F4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104LL))(a1, a2, &v4);
}

uint64_t sub_101216920(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112LL))(a1, a2, &v4);
}

uint64_t sub_10121694C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120LL))(a1, &v3);
}

uint64_t sub_101216978(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(&OBJC_CLASS___CLNotifierServiceAdapter);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1LL);
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }

  return result;
}

uint64_t sub_1012169C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_10198ECE8);
}

uint64_t sub_1012169D8(uint64_t a1, int a2, int *a3, char *a4)
{
  int v42 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        std::string::size_type v13 = (uint64_t *)v7;
      }
      else {
        std::string::size_type v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)float64x2_t v43 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          std::string v24 = (uint64_t *)v18;
        }
        else {
          std::string v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          float v29 = (uint64_t *)v25;
        }
        else {
          float v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v41 = v26;
        uint64_t v34 = *(void *)(v26 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v35;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          uint64_t v36 = sub_101219288(buf);
          sub_101218724((_BYTE *)a1, (uint64_t)v43, (uint64_t)&v41, v36);
        }

        if (v34) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        uint64_t v41 = a1 + 64;
        char v30 = byte_10198ECE9;
        HIDWORD(v4sub_1011C5518(qword_1019A41A0, 0) = v17;
        *(void *)std::string buf = (char *)&v40 + 4;
        *((_BYTE *)sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 8sub_1011C5518(qword_1019A41A0, 0) = v30;
        HIDWORD(v4sub_1011C5518(qword_1019A41A0, 0) = *a3;
        *(void *)std::string buf = (char *)&v40 + 4;
        uint64_t v31 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        sub_1000F0D38(v31 + 8);
        char v32 = *a4;
        HIDWORD(v4sub_1011C5518(qword_1019A41A0, 0) = *a3;
        *(void *)std::string buf = (char *)&v40 + 4;
        __int128 v33 = sub_10023347C((uint64_t **)(a1 + 56), (int *)&v40 + 1, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)std::string buf = &v42;
        *((_BYTE *)sub_1004EF3D4(v33 + 5, &v42, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v32;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v43 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A3C98);
  }
  uint64_t v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    uint64_t v37 = (void *)(a1 + 8);
    *(_DWORD *)float64x2_t v43 = 136446466;
    *(void *)&v43[4] = v37;
    __int16 v44 = 1026;
    int v45 = a2;
    LODWORD(v4sub_1011C5518(qword_1019A41A0, 0) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v43,
      v40);
    uint64_t v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Notificati onData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGeom agneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, N otificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_101216E38(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136446466;
      char v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A3C98);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      std::string v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Notifica tionData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Noti fication, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, Reg istrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1012170B8(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        std::string::size_type v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            std::string::size_type v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A3C98);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                uint64_t v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_1018A3C98);
                }
                float v29 = a1 + 8;
                if (a1[31] < 0) {
                  float v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                uint64_t v40 = v29;
                __int16 v41 = 2082;
                int v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                __int128 v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type ::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGeomag neticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::Notificat ionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

void sub_101217440(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }

    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32)) {
      sub_1000F0D38((void *)(v6 + 64));
    }
  }

uint64_t sub_10121748C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(__int128 **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  __int128 v12 = *v11;
  __int128 v13 = v11[1];
  __int128 v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  return 1LL;
}

uint64_t sub_1012174F4(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x58uLL);
  __int128 v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 4sub_1011C5518(qword_1019A41A0, 0) = v7;
  __int128 v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((void *)v6 + sub_1011C5518(qword_1019A41A0, 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  *(void *)int v6 = off_1018A3CE8;
  *(_OWORD *)(v6 + 72) = v8;
  *(void *)&__int128 v15 = v6 + 24;
  *((void *)&v15 + sub_1011C5518(qword_1019A41A0, 1) = v6;
  int v14 = *a2;
  uint64_t v16 = &v14;
  BOOL v9 = sub_10023347C((uint64_t **)(a1 + 56), &v14, (uint64_t)&unk_1012CF090, &v16);
  sub_10005F550((uint64_t)(v9 + 8), &v15);
  BOOL v10 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    int v11 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return 1LL;
}

void sub_1012175D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1012175E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  v5,  a3,  a4,  0LL);
}

void sub_101217628(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    int v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v12 = (void *)(a1 + 8);
      __int128 v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      __int16 v69 = 2082;
      uint64_t v70 = v12;
      __int16 v71 = 2050;
      double v72 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    __int128 v15 = (__n128 *)(a1 + 64);
    int v14 = *(__n128 **)(a1 + 64);
    if (!v14) {
      goto LABEL_18;
    }
    signed __int32 v16 = *a2;
    int v17 = (__n128 *)(a1 + 64);
    do
    {
      signed __int32 v18 = v14[2].n128_i32[0];
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (__n128 **)v14;
      }
      else {
        uint64_t v20 = (__n128 **)&v14->n128_u64[1];
      }
      if (!v19) {
        int v17 = v14;
      }
      int v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(void *)uint64_t v73 = &v73[8];
      memset(&v73[8], 0, 24);
      uint64_t v74 = 0LL;
      sub_1002343E4((uint64_t)buf, a2, (uint64_t)v73);
      int v17 = sub_1002342A4((uint64_t **)(a1 + 56), (__n128 *)buf);
      int v21 = v72;
      if (v72)
      {
        p_shared_owners = (unint64_t *)&v72->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      BOOL v24 = v74;
      if (v74)
      {
        int v25 = (unint64_t *)&v74->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      sub_100008390((uint64_t)v73, *(void **)&v73[8]);
    }

    if (a4)
    {
      __int16 v27 = (char *)operator new(0x58uLL);
      __int128 v28 = a3[1];
      *(_OWORD *)(v27 + 24) = *a3;
      *(_OWORD *)(v27 + 4sub_1011C5518(qword_1019A41A0, 0) = v28;
      __int128 v29 = a3[3];
      *(_OWORD *)(v27 + 56) = a3[2];
      *((void *)v27 + sub_1011C5518(qword_1019A41A0, 1) = 0LL;
      *((void *)v27 + 2) = 0LL;
      *(void *)__int16 v27 = off_1018A3CE8;
      *(_OWORD *)(v27 + 72) = v29;
      *(void *)std::string buf = v27 + 24;
      *(void *)&uint8_t buf[8] = v27;
      sub_10005F550((uint64_t)&v17[4], (__int128 *)buf);
      uint64_t v30 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v31 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }

    else
    {
      sub_1000F0D38((__n128 *)v17[4].n128_u64);
    }

    if (!v17[3].n128_u64[1]) {
      goto LABEL_83;
    }
    __int128 v33 = sub_1012182C8(a3);
    if (a5 == -1)
    {
      sub_101218350((void *)a1, (int *)a2, v33);
    }

    else
    {
      uint64_t v34 = a1 + 88;
      uint64_t v35 = *(void *)(a1 + 88);
      if (!v35) {
        goto LABEL_48;
      }
      uint64_t v36 = a1 + 88;
      do
      {
        int v37 = *(_DWORD *)(v35 + 32);
        BOOL v38 = v37 < a5;
        if (v37 >= a5) {
          int v39 = (uint64_t *)v35;
        }
        else {
          int v39 = (uint64_t *)(v35 + 8);
        }
        if (!v38) {
          uint64_t v36 = v35;
        }
        uint64_t v35 = *v39;
      }

      while (*v39);
      if (v36 == v34 || *(_DWORD *)(v36 + 32) > a5) {
LABEL_48:
      }
        uint64_t v36 = a1 + 88;
      uint64_t v66 = v36;
      unint64_t v40 = v15->n128_u64[0];
      if (!v15->n128_u64[0]) {
        goto LABEL_59;
      }
      int v41 = *a2;
      int v42 = (__n128 *)(a1 + 64);
      do
      {
        int v43 = *(_DWORD *)(v40 + 32);
        BOOL v44 = v43 < v41;
        if (v43 >= v41) {
          int v45 = (unint64_t *)v40;
        }
        else {
          int v45 = (unint64_t *)(v40 + 8);
        }
        if (!v44) {
          int v42 = (__n128 *)v40;
        }
        unint64_t v40 = *v45;
      }

      while (*v45);
      if (v42 == v15 || v41 < (signed __int32)v42[2].n128_u32[0])
      {
LABEL_59:
        double v65 = (__n128 *)(a1 + 64);
LABEL_60:
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_1018A3C98);
        }
        uint64_t v46 = (os_log_s *)qword_1019349D8;
        if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
        {
          __int128 v47 = (void *)(a1 + 8);
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v73, a1, a2);
          if (v73[23] >= 0) {
            __int128 v48 = v73;
          }
          else {
            __int128 v48 = *(_BYTE **)v73;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v47;
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v73[23] & 0x80000000) != 0) {
            operator delete(*(void **)v73);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_1018A3C98);
          }
          uint64_t v49 = (void *)(a1 + 8);
          uint64_t v50 = qword_1019349D8;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
          if (v64 >= 0) {
            double v51 = __p;
          }
          else {
            double v51 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t v73 = 136315650;
          *(void *)&v73[4] = v49;
          *(_WORD *)&v73[12] = 1024;
          *(_DWORD *)&v73[14] = a5;
          *(_WORD *)&v73[18] = 2080;
          *(void *)&v73[20] = v51;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v50,  2LL,  "%s; client %d has deregistered, not notifying %s",
            v73,
            28,
            v62);
          uint64_t v53 = v52;
          if (v64 < 0) {
            operator delete(__p[0]);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Noti ficationData>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [N otification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvid er_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v53);
          if (v53 != buf) {
            free(v53);
          }
        }

        goto LABEL_83;
      }

      double v65 = v42;
      if (v36 == v34) {
        goto LABEL_60;
      }
      uint64_t v56 = v42[3].n128_i64[0];
      uint64_t v54 = v42 + 3;
      uint64_t v55 = (__n128 *)v56;
      if (!v56) {
        goto LABEL_60;
      }
      int v57 = *(_DWORD *)(v36 + 32);
      double v58 = v54;
      do
      {
        int v59 = v55[1].n128_i32[3];
        BOOL v60 = v59 < v57;
        if (v59 >= v57) {
          uint64_t v61 = v55;
        }
        else {
          uint64_t v61 = (__n128 *)&v55->n128_i8[8];
        }
        if (!v60) {
          double v58 = v55;
        }
        uint64_t v55 = (__n128 *)v61->n128_u64[0];
      }

      while (v61->n128_u64[0]);
      sub_101218724((_BYTE *)a1, (uint64_t)&v66, (uint64_t)&v65, v33);
    }

void sub_101217C70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

uint64_t sub_101217CC0()
{
  return 1LL;
}

void sub_101217CC8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315138;
      int v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A3C98);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      __int128 v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Notifica tionData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = C LGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A3C98);
    }
    __int128 v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      __int128 v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A3C98);
      }
      __int16 v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      __int128 v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Notifica tionData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = C LGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      int v11 = (void *)(a1 + 8);
      do
      {
        unint64_t v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_1018A3C98);
            }
            __int128 v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              int v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A3C98);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              __int128 v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              BOOL v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type:: NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, Notifi cationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed __int32 v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed __int32 v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                unint64_t v12 = v18;
              }

              while (!v19);
            }

            unint64_t v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            unint64_t v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            unint64_t v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_101218270(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10121829C(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

CLCppContainer *sub_1012182C8(_OWORD *a1)
{
  uint64_t v2 = operator new(0x40uLL);
  __int128 v3 = a1[1];
  *uint64_t v2 = *a1;
  v2[1] = v3;
  __int128 v4 = a1[3];
  v2[2] = a1[2];
  v2[3] = v4;
  int v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  __int128 v8 = sub_101218830;
  uint64_t v9 = &unk_10181D3D0;
  BOOL v10 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_101218350(void *a1, int *a2, void *a3)
{
  if (!*((_BYTE *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }

      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        double v51 = v9;
        id v13 = sub_101218840(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184LL))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          int v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            BOOL v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                BOOL v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }

            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v50 = v19;
              sub_101218724(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int128 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int128 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }

              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              double v51 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }

                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }

                  while (*v42);
                }

                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      int v43 = (void *)*v43;
                    }

                    while (v43);
                  }

                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }

                    while (!v44);
                  }
                }
              }
            }

            else
            {
LABEL_25:
              uint64_t v50 = a1 + 11;
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A3C98);
              }
              BOOL v24 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                int v57 = v25;
                __int16 v58 = 1026;
                int v59 = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_1018A3C98);
                }
                int v45 = a1 + 1;
                int v46 = *((_DWORD *)v14 + 7);
                int v52 = 136446466;
                uint64_t v53 = v45;
                __int16 v54 = 1026;
                int v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                __int128 v48 = (uint8_t *)v47;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::Notifi cationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGeoma gneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::Notifica tionData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v47);
                if (v48 != buf) {
                  free(v48);
                }
              }
            }
          }

          while (v14 != v51 + 6);
        }
      }
    }
  }

_BYTE *sub_101218724(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_101218840(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40LL);
    int v14 = (int *)(*(void *)a2 + 32LL);
    unint64_t v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

void sub_101218800(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A3CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101218810(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A3CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_101218830(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_101218840(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0) {
    return sub_1012188B8(a1);
  }
  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v4) & 1) != 0) {
    return sub_101218C20(a1);
  }
  else {
    return 0LL;
  }
}

id sub_1012188B8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101218FAC((uint64_t)&v8 + 7, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    __int128 v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v11 = v2;
      __int16 v12 = 2048;
      uint64_t v13 = 0LL;
      __int16 v14 = 2080;
      unint64_t v15 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v_Block_object_dispose(va, 8) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v9,  v8,  v9);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGeomagneticModelProvider_Type::NotificationDat a, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_101218C20(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return [a1 cppObjectPtr];
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    __int128 v3 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  else
  {
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    int v6 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v10 = v2;
      __int16 v11 = 2048;
      uint64_t v12 = 0LL;
      __int16 v13 = 2080;
      unint64_t v14 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
    }

    if (!sub_1002921D0(115, 0)) {
      return 0LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934470 != -1) {
      dispatch_once(&qword_101934470, &stru_1018A3D10);
    }
    LODWORD(v_Block_object_dispose(va, 8) = 134218498;
    HIDWORD(v_Block_object_dispose(va, 8) = (_DWORD)v2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has c hanged on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v8,  32,  v8);
  }

  uint64_t v7 = (uint8_t *)v4;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGeomagneticModelProvider_Type::NotificationDat a, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v4);
  if (v7 != buf) {
    free(v7);
  }
  return 0LL;
}

id sub_101218FAC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1018D5258))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)64)
    {
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018A3D10);
      }
      uint64_t v4 = (os_log_s *)qword_101934478;
      if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        unint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A3D10);
        }
      }

      uint64_t v5 = (os_log_s *)qword_101934478;
      if (os_signpost_enabled((os_log_t)qword_101934478))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        unint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A3D10);
        }
      }

      int v6 = (os_log_s *)qword_101934478;
      if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        unint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same.,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      }

      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
    }

    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }

  return [a2 cppObjectPtr];
}

void sub_10121925C(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_101219288(_OWORD *a1)
{
  id v2 = operator new(0x40uLL);
  __int128 v3 = a1[1];
  *id v2 = *a1;
  v2[1] = v3;
  __int128 v4 = a1[3];
  v2[2] = a1[2];
  v2[3] = v4;
  int v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  int v8 = sub_101219310;
  __int16 v9 = &unk_10181D3D0;
  id v10 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

void sub_101219310(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t sub_101219320(uint64_t a1, void *a2)
{
  __int128 v4 = sub_100E44F04((void *)a1, a2) + 2;
  sub_1012000E4((uint64_t)v4, a2);
  *(void *)a1 = off_1018A3D40;
  *(void *)(a1 + 16) = off_1018A3DC0;
  sub_100518538((void *)(a1 + 568), @"com.apple.CoreMotion.NonlinearGyro");
  *(void *)(a1 + 576) = 0LL;
  *(void *)(a1 + 536) = 0x428C000000000000LL;
  sub_101203B48((uint64_t)v4);
  if (*(_BYTE *)(a1 + 270))
  {
    sub_101200E48((uint64_t)v4);
    *(_BYTE *)(a1 + 27sub_1011C5518(qword_1019A41A0, 0) = 0;
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  sub_101201B2C((uint64_t)v4);
  sub_101202D80((uint64_t)v4);
  return a1;
}

void sub_1012193D4(_Unwind_Exception *a1)
{
}

BOOL sub_101219408(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 272);
  if (*(_BYTE *)(a1 + 272)) {
    memcpy(__dst, (const void *)(a1 + 584), 0x140uLL);
  }
  return v2 != 0;
}

BOOL sub_101219444(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 256);
  if (*(_BYTE *)(a1 + 256)) {
    memcpy(__dst, (const void *)(a1 + 568), 0x140uLL);
  }
  return v2 != 0;
}

void sub_101219480(uint64_t a1, int a2)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3F48);
  }
  __int128 v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v16 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Starting gyro calibration, user initiated, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3F48);
    }
    v14[0] = 67109120;
    v14[1] = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Starting gyro calibration, user initiated, %d",  v14);
    __int16 v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalNonlinear::startCalibration(BOOL)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  if (*(void *)(a1 + 576))
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3F48);
    }
    id v10 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      int v22 = "!fDeviceMotionDispatcher";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3F48);
      }
    }

    __int16 v11 = (os_log_s *)off_101934598;
    if (os_signpost_enabled((os_log_t)off_101934598))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      int v22 = "!fDeviceMotionDispatcher";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3F48);
      }
    }

    uint64_t v12 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      int v22 = "!fDeviceMotionDispatcher";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalNonlinear.mm",  51,  "startCalibration");
    __break(1u);
  }

  uint64_t v5 = -[CLDeviceMotionProperties initWithMode:]( objc_alloc(&OBJC_CLASS___CLDeviceMotionProperties),  "initWithMode:",  19LL);
  int v6 = operator new(0x38uLL);
  sub_1011C06A0(v6, *(void **)(a1 + 56), (uint64_t)nullsub_1288, a1, v5);
  *(void *)(a1 + 576) = v6;

  uint64_t v7 = sub_1006E27E8();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _OWORD v13[2] = sub_1012198FC;
  void v13[3] = &unk_10181D3D0;
  void v13[4] = a1;
  sub_1006E2970(v7, (uint64_t)v13);
}

void sub_1012198DC(_Unwind_Exception *a1)
{
}

void sub_1012198FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100DDA4D4();
  sub_100DDAEA4(v2, *(void *)(v1 + 576), 1.0);
}

void sub_101219924(uint64_t a1)
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3F48);
  }
  uint64_t v2 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped gyro calibration", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3F48);
    }
    v7[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Stopped gyro calibration",  v7,  2);
    int v6 = (uint8_t *)v5;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalNonlinear::teardown()",  "%s\n",  v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  if (*(void *)(a1 + 576))
  {
    uint64_t v3 = sub_100DDA4D4();
    sub_100DDB140(v3, *(void *)(a1 + 576));
    uint64_t v4 = *(void *)(a1 + 576);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *(void *)(a1 + 576) = 0LL;
  }

uint64_t sub_101219AE4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

id sub_101219AF0(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  sub_101200E48(a1 + 16);
  sub_101201BD0(v2);
  [*(id *)(a1 + 280) setNextFireDelay:1.79769313e308];
  return [*(id *)(a1 + 288) setNextFireDelay:1.79769313e308];
}

uint64_t sub_101219B44(uint64_t a1, double a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(void *)(a1 + 16);
  *(double *)(a1 + 296) = a2;
  (*(void (**)(uint64_t, uint64_t))(v2 + 288))(a1 + 16, a1 + 592);
  return sub_101201B2C(v3);
}

void sub_101219B7C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(void *)(a1 + 304);
  uint64_t v4 = *(void *)(a1 + 312);
  int v5 = *(unsigned __int8 *)(a1 + 271);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 336);
  uint64_t v29 = v6;
  int v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    uint64_t v32 = v6;
    uint64_t v33 = v7;
    do
      unint64_t v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v32 = *(void *)(a1 + 328);
    uint64_t v33 = 0LL;
  }

  sub_10121A114(v3, v4, &v32, (uint64_t)&__p);
  sub_100F30EDC((float **)&__p, v5 != 0, (uint64_t)__src);
  if (__p)
  {
    uint64_t v35 = (char *)__p;
    operator delete(__p);
  }

  __int16 v11 = v33;
  if (v33)
  {
    uint64_t v12 = (unint64_t *)&v33->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  std::string __p = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  if (v4 != v3)
  {
    sub_100006E1C(&__p, (v4 - v3) >> 5);
    uint64_t v14 = 0LL;
    unint64_t v15 = v35;
    do
    {
      int v16 = &v15[v14];
      __int128 v17 = *(_OWORD *)v3;
      *((void *)v16 + 2) = *(void *)(v3 + 16);
      *(_OWORD *)int v16 = v17;
      v3 += 32LL;
      v14 += 24LL;
    }

    while (v3 != v4);
    uint64_t v35 = &v15[v14];
  }

  sub_100F3127C((uint64_t)__src, (uint64_t *)&__p, v5 != 0, Current);
  if (__p)
  {
    uint64_t v35 = (char *)__p;
    operator delete(__p);
  }

  if (v30)
  {
    int v18 = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  *(_DWORD *)(a1 + 584) = 2;
  *(void *)(a1 + 592) = *(void *)(a1 + 296);
  *(double *)(a1 + 60sub_1011C5518(qword_1019A41A0, 0) = Current;
  int v20 = *(float **)(a1 + 304);
  __int16 v21 = *(float **)(a1 + 312);
  if (v20 == v21)
  {
    float v23 = 3.4028e38;
    float v22 = 1.1755e-38;
  }

  else
  {
    float v22 = 1.1755e-38;
    float v23 = 3.4028e38;
    do
    {
      float v24 = *v20;
      v20 += 8;
      float v25 = v24;
      if (v24 < v23) {
        float v23 = v25;
      }
      if (v25 > v22) {
        float v22 = v25;
      }
    }

    while (v20 != v21);
  }

  *(float *)(a1 + 60_Block_object_dispose(va, 8) = v23;
  *(float *)(a1 + 612) = v22;
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a1 + 273);
  memcpy((void *)(a1 + 617), __src, 0x11AuLL);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3F48);
  }
  int v26 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Nonlinear gyro database computed fit.",  (uint8_t *)&__p,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3F48);
    }
    LOWORD(v32) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Nonlinear gyro database computed fit.",  &v32,  2,  v29);
    int v28 = (void **)v27;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalNonlinear::computeFit()",  "%s\n",  v27);
    if (v28 != &__p) {
      free(v28);
    }
  }

  *(_BYTE *)(a1 + 272) = 1;
}

void sub_101219F08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,void *__p,uint64_t a52)
{
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_10000AE14((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_101219F60(uint64_t a1)
{
}

_BYTE *sub_101219F68(_BYTE *result)
{
  if (result[272])
  {
    result[616] = result[273];
    return (_BYTE *)sub_101201B2C((uint64_t)(result + 16));
  }

  return result;
}

uint64_t sub_101219F88(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 256))
  {
    *(_BYTE *)(a1 + 60sub_1011C5518(qword_1019A41A0, 0) = *(_BYTE *)(a1 + 257);
    return sub_101201B2C(a1);
  }

  return a1;
}

void sub_101219FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_101219FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_101219FB0(uint64_t a1, uint64_t a2, double a3)
{
}

void sub_101219FB8(uint64_t a1, uint64_t a2, double a3)
{
}

void *sub_101219FC0(uint64_t a1)
{
  *(void *)a1 = off_1018A3D40;
  *(void *)(a1 + 16) = off_1018A3DC0;
  uint64_t v2 = a1 + 16;
  sub_100518594((id *)(a1 + 568));
  sub_101203A98(v2);
  return sub_100E450D4((void *)a1);
}

void sub_10121A008(uint64_t a1)
{
  *(void *)a1 = off_1018A3D40;
  *(void *)(a1 + 16) = off_1018A3DC0;
  uint64_t v2 = a1 + 16;
  sub_100518594((id *)(a1 + 568));
  sub_101203A98(v2);
  uint64_t v3 = sub_100E450D4((void *)a1);
  operator delete(v3);
}

void *sub_10121A054(uint64_t a1)
{
  *(void *)(a1 - 16) = off_1018A3D40;
  uint64_t v2 = (void *)(a1 - 16);
  *(void *)a1 = off_1018A3DC0;
  sub_100518594((id *)(a1 + 552));
  sub_101203A98(a1);
  return sub_100E450D4(v2);
}

void sub_10121A09C(uint64_t a1)
{
  *(void *)(a1 - 16) = off_1018A3D40;
  uint64_t v2 = (void *)(a1 - 16);
  *(void *)a1 = off_1018A3DC0;
  sub_100518594((id *)(a1 + 552));
  sub_101203A98(a1);
  uint64_t v3 = sub_100E450D4(v2);
  operator delete(v3);
}

void sub_10121A0E8(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_10121A114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  for (; a1 != a2; a1 += 32LL)
  {
    unsigned int v8 = (int)(float)(*(float *)a1 * 0.5);
    if (v8 <= 0x22)
    {
      unsigned int v9 = *((_DWORD *)v25 + v8);
      *((_DWORD *)v25 + v_Block_object_dispose(va, 8) = v9 + 1;
      if (v9 < 5 || (unsigned int v9 = (**(uint64_t (***)(void))*a3)(*a3), v9 <= 4))
      {
        unint64_t v10 = v9 + 5 * v8;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) <= v10)
        {
          if (qword_101934590 != -1) {
            goto LABEL_19;
          }
          while (1)
          {
            uint64_t v14 = (os_log_s *)off_101934598;
            if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)std::string buf = 68289539;
              int v18 = 0;
              __int16 v19 = 2082;
              int v20 = "";
              __int16 v21 = 2082;
              float v22 = "assert";
              __int16 v23 = 2081;
              float v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{p rivate, location:escape_only}s}",  buf,  0x26u);
              if (qword_101934590 != -1) {
                dispatch_once(&qword_101934590, &stru_1018A3F48);
              }
            }

            unint64_t v15 = (os_log_s *)off_101934598;
            if (os_signpost_enabled((os_log_t)off_101934598))
            {
              *(_DWORD *)std::string buf = 68289539;
              int v18 = 0;
              __int16 v19 = 2082;
              int v20 = "";
              __int16 v21 = 2082;
              float v22 = "assert";
              __int16 v23 = 2081;
              float v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{p rivate, location:escape_only}s}",  buf,  0x26u);
              if (qword_101934590 != -1) {
                dispatch_once(&qword_101934590, &stru_1018A3F48);
              }
            }

            int v16 = (os_log_s *)off_101934598;
            if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 68289539;
              int v18 = 0;
              __int16 v19 = 2082;
              int v20 = "";
              __int16 v21 = 2082;
              float v22 = "assert";
              __int16 v23 = 2081;
              float v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{p rivate, location:escape_only}s}",  buf,  0x26u);
            }

            abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasFitter.h",  83,  "stratifiedRandomSample");
            __break(1u);
LABEL_19:
            dispatch_once(&qword_101934590, &stru_1018A3F48);
          }
        }

        uint64_t v11 = *(void *)a4 + 24LL * v10;
        *(_DWORD *)uint64_t v11 = *(_DWORD *)a1;
        *(_DWORD *)(v11 + 4) = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(v11 + _Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(a1 + 12);
        *(void *)(v11 + 16) = *(void *)(a1 + 16);
      }
    }
  }

  *(_DWORD *)std::string buf = 0;
  uint64_t v12 = sub_10121A4EC(*(__int128 **)a4, *(__int128 **)(a4 + 8), (unsigned int *)buf, (uint64_t)v25);
  return sub_10121A5A0(a4, (uint64_t)v12, *(void *)(a4 + 8));
}

void sub_10121A4C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

__int128 *sub_10121A4EC(__int128 *result, __int128 *a2, unsigned int *a3, uint64_t a4)
{
  if (result != a2)
  {
    for (unsigned int i = *a3; ; ++i)
    {
      *a3 = i + 1;
      if (i % 5 >= *(_DWORD *)(a4 + 4 * (i / 5uLL))) {
        break;
      }
      BOOL result = (__int128 *)((char *)result + 24);
      if (result == a2) {
        return a2;
      }
    }
  }

  if (result != a2)
  {
    for (j = (__int128 *)((char *)result + 24); j != a2; j = (__int128 *)((char *)j + 24))
    {
      unint64_t v6 = *a3 / 5uLL;
      unsigned int v7 = *a3 % 5;
      ++*a3;
      if (v7 < *(_DWORD *)(a4 + 4 * v6))
      {
        __int128 v8 = *j;
        *((void *)result + 2) = *((void *)j + 2);
        *BOOL result = v8;
        BOOL result = (__int128 *)((char *)result + 24);
      }
    }
  }

  return result;
}

uint64_t sub_10121A5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 8 * ((a3 - a2) >> 3);
      uint64_t v4 = a2;
      do
      {
        __int128 v6 = *(_OWORD *)(v4 + v5);
        *(void *)(v4 + 16) = *(void *)(v4 + v5 + 16);
        *(_OWORD *)uint64_t v4 = v6;
        v4 += 24LL;
      }

      while (v4 + v5 != v3);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  }

  return a2;
}

void *sub_10121A608(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100006E1C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }

  return a1;
}

void sub_10121A684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_10121A6A4(void *a1)
{
  uint64_t v1 = sub_100A8756C(a1);
  operator delete(v1);
}

BOOL sub_10121A6B8(uint64_t a1, uint64_t *a2)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_1018A3FD0);
  }
  uint64_t v3 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    *(_DWORD *)std::string buf = 136315394;
    int v16 = "PreviousCoverOpenTimestamp";
    __int16 v17 = 2048;
    uint64_t v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Setting property %s to %f", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3FD0);
    }
    uint64_t v7 = *a2;
    int v11 = 136315394;
    uint64_t v12 = "PreviousCoverOpenTimestamp";
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    LODWORD(v1sub_1011C5518(qword_1019A41A0, 0) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Setting property %s to %f",  (const char *)&v11,  v10);
    unsigned int v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLCoverStateDaemon::setLastCoverStateChangeTimestamp(const CFAbsoluteTime &)",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  uint64_t v5 = sub_1002F8DDC();
  return sub_1002AC7B8(v5, "PreviousCoverOpenTimestamp", a2);
}

double sub_10121A8A4()
{
  uint64_t v0 = sub_1002F8DDC();
  if ((sub_1002A82BC(v0, "PreviousCoverOpenTimestamp", &v5) & 1) == 0) {
    double v5 = -1.0;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_1018A3FD0);
  }
  uint64_t v1 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Last cover open timestamp = %f", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A3FD0);
    }
    int v6 = 134217984;
    double v7 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Last cover open timestamp = %f",  COERCE_DOUBLE(&v6));
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CFAbsoluteTime CLCoverStateDaemon::getLastCoverStateChangeTimestamp()",  "%s\n",  v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  return v5;
}

void *sub_10121AA70()
{
  uint64_t v0 = operator new(0x30uLL);
  BOOL result = sub_100A87538((uint64_t)v0);
  void *v0 = &off_1018A3F78;
  qword_1019A1B70 = (uint64_t)v0;
  return result;
}

void sub_10121AAB0(_Unwind_Exception *a1)
{
}

double sub_10121AAC4()
{
  return -1.0;
}

double sub_10121AACC()
{
  return -1.0;
}

void sub_10121AAD8(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10121AC6C(id a1)
{
  qword_1019A07C0 = -[CLDispatchSilo initWithIdentifier:]( objc_alloc(&OBJC_CLASS___CLDispatchSilo),  "initWithIdentifier:",  @"CLMotionHintLoggerSilo");
}

void sub_10121B0A4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A4120);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v32 = 1;
    double v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionHintLogger::onDaemonStatus",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    __int128 v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289538LL;
      __int16 v45 = 2082;
      int v46 = "";
      __int16 v47 = 2082;
      __int128 v48 = "activity";
      __int16 v49 = 2050;
      uint64_t v50 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionHintLogger::onDaemonStatus, event:%{public, location:escape_only}s, this :%{public}p}",  (uint8_t *)&buf,  0x26u);
    }
  }

  else
  {
    char v32 = 0;
  }

  v34[0] = &off_101858810;
  uint64_t v9 = mach_absolute_time();
  double v10 = sub_101171C7C(v9);
  *(double *)&v34[3] = v10;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)&v34[1] = Current;
  sub_101125260(&buf);
  sub_10113AAD0(&buf);
  v53 |= 1u;
  CFAbsoluteTime v51 = Current;
  uint64_t v12 = v52;
  *(_BYTE *)(v52 + 24) |= 1u;
  *(double *)(v12 + _Block_object_dispose(va, 8) = v10;
  switch(*a2)
  {
    case 2:
      __int16 v35 = 4;
      uint64_t v13 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v13 + 16) = 4;
      uint64_t v14 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v14 + 2sub_1011C5518(qword_1019A41A0, 0) = 0;
      goto LABEL_39;
    case 3:
      int v22 = sysctlbyname("kern.wakereason", __big, &v33, 0LL, 0LL);
      HIBYTE(v35) = 1;
      uint64_t v23 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v23 + 2sub_1011C5518(qword_1019A41A0, 0) = 1;
      if (v22 < 0) {
        goto LABEL_38;
      }
      if (strstr(__big, "hold"))
      {
        int v24 = 2;
      }

      else if (strstr(__big, "menu"))
      {
        int v24 = 3;
      }

      else if (strstr(__big, "rtc"))
      {
        int v24 = 4;
      }

      else if (strstr(__big, "wlan"))
      {
        int v24 = 5;
      }

      else
      {
        if (!strstr(__big, "baseband")) {
          goto LABEL_38;
        }
        int v24 = 6;
      }

      HIBYTE(v35) = v24;
      uint64_t v28 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v28 + 2sub_1011C5518(qword_1019A41A0, 0) = v24;
LABEL_38:
      LOBYTE(v35) = 4;
      uint64_t v29 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v29 + 16) = 4;
LABEL_39:
      uint64_t v30 = sub_100E00E14();
      sub_100E022E0(v30, (uint64_t)v34);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_1018A4160);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)&buf);
      }
LABEL_43:
      sub_101127D00((PB::Base *)&buf);
      if (v32) {
        os_activity_scope_leave(&state);
      }
      return;
    case 7:
      if (*((_DWORD *)a3 + 3) == 4) {
        int v15 = 13;
      }
      else {
        int v15 = 3;
      }
      LOBYTE(v35) = v15;
      uint64_t v16 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v16 + 16) = v15;
      HIBYTE(v35) = a3[9];
      int v17 = HIBYTE(v35);
      uint64_t v18 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v18 + 2sub_1011C5518(qword_1019A41A0, 0) = v17;
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4140);
      }
      __int16 v19 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v39 = 67240448;
        int v40 = v15;
        __int16 v41 = 1026;
        int v42 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "#Notice gesture charging type %{public}d value %{public}d",  v39,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(v39, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018A4140);
        }
        v36[0] = 67240448;
        v36[1] = v15;
        __int16 v37 = 1026;
        int v38 = v17;
        _os_log_send_and_compose_impl( 2LL,  0LL,  v39,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "#Notice gesture charging type %{public}d value %{public}d",  v36,  14);
        __int16 v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionHintLogger::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_T ype::NotificationData &)",  "%s\n",  v20);
        if (v21 != v39) {
          free(v21);
        }
      }

      goto LABEL_39;
    case 0xA:
      int v25 = 6;
      goto LABEL_28;
    case 0xB:
      int v25 = 7;
LABEL_28:
      LOBYTE(v35) = v25;
      HIBYTE(v35) = *a3;
      uint64_t v26 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v26 + 16) = v25;
      uint64_t v27 = v52;
      LODWORD(v26) = *a3;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v27 + 2sub_1011C5518(qword_1019A41A0, 0) = v26;
      goto LABEL_39;
    default:
      goto LABEL_43;
  }

void sub_10121B674( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

void sub_10121B6D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)sub_10071542C();
  uint64_t v6 = 0x10000000BLL;
  char v7 = 0;
  sub_10121B774(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_10005F550(v1 + 152, &v8);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  sub_100719D78(*(uint64_t **)(v1 + 152), (uint64_t)sub_10121B834, v1);
}

void sub_10121B774(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v13 = a1;
  sub_10029D318((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v13, a3);
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  uint64_t v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  sub_100715828(a1, &v11);
  __int128 v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_10121B818( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10121B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue(a4, 196608LL);
    uint64_t result = IOHIDEventGetIntegerValue(a4, 196609LL);
    if (IntegerValue == 12)
    {
      int v7 = result;
      uint64_t v8 = IOHIDEventGetIntegerValue(a4, 196610LL);
      unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
      double v10 = sub_101171C7C(TimeStamp);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4140);
      }
      uint64_t v11 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67240448;
        HIDWORD(buf) = v7;
        __int16 v21 = 1026;
        BOOL v22 = v8 == 1;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Notice gesture button %{public}d down %{public}d",  (uint8_t *)&buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_1018A4140);
        }
        LODWORD(v26) = 67240448;
        HIDWORD(v26) = v7;
        LOWORD(v27) = 1026;
        *(_DWORD *)((char *)&v27 + 2) = v8 == 1;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice gesture button %{public}d down %{public}d",  &v26,  14);
        __int16 v19 = (char *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionHintLogger::onButton(int, BOOL, const CFTimeInterval)",  "%s\n",  v18);
      }

      uint64_t v26 = &off_101858810;
      double v28 = v10;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFAbsoluteTime v27 = Current;
      BOOL v30 = v8 == 1;
      sub_101125260(&buf);
      sub_10113AAD0(&buf);
      v25 |= 1u;
      CFAbsoluteTime v23 = Current;
      uint64_t v13 = v24;
      *(_BYTE *)(v24 + 24) |= 1u;
      *(double *)(v13 + _Block_object_dispose(va, 8) = v10;
      uint64_t v14 = v24;
      *(_BYTE *)(v24 + 24) |= 4u;
      *(_DWORD *)(v14 + 2sub_1011C5518(qword_1019A41A0, 0) = v8 == 1;
      if (v7 == 48) {
        int v15 = 2;
      }
      else {
        int v15 = v7 == 64;
      }
      char v29 = v15;
      uint64_t v16 = v24;
      *(_BYTE *)(v24 + 24) |= 2u;
      *(_DWORD *)(v16 + 16) = v15;
      uint64_t v17 = sub_100E00E14();
      sub_100E022E0(v17, (uint64_t)&v26);
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_1018A4160);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)&buf);
      }
      return sub_101127D00((PB::Base *)&buf);
    }
  }

  return result;
}

void sub_10121BB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10121BBA8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A4120);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v25 = 1;
    uint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLMotionHintLogger::onTelephonyNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    int v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289538LL;
      __int16 v33 = 2082;
      uint64_t v34 = "";
      __int16 v35 = 2082;
      uint64_t v36 = "activity";
      __int16 v37 = 2050;
      uint64_t v38 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLMotionHintLogger::onTelephonyNotification, event:%{public, location:escape_only}s , this:%{public}p}",  (uint8_t *)&buf,  0x26u);
    }
  }

  else
  {
    char v25 = 0;
  }

  uint64_t v8 = (const void *)sub_100320878(a2);
  if (CFEqual(v8, kCTCallStatusChangeNotification))
  {
    char v30 = 1;
    unsigned int v9 = objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a4 + 32), "vendor"),  "proxyForService:",  @"CLTelephonyService"),  "syncgetActiveCall:",  &v30);
    v27[0] = &off_101858810;
    uint64_t v10 = mach_absolute_time();
    double v11 = sub_101171C7C(v10);
    *(double *)&v27[3] = v11;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)&v27[1] = Current;
    char v28 = 5;
    sub_101125260(&buf);
    sub_10113AAD0(&buf);
    v41 |= 1u;
    CFAbsoluteTime v39 = Current;
    uint64_t v13 = v40;
    *(_BYTE *)(v40 + 24) |= 1u;
    *(double *)(v13 + _Block_object_dispose(va, 8) = v11;
    uint64_t v14 = v40;
    *(_BYTE *)(v40 + 24) |= 2u;
    *(_DWORD *)(v14 + 16) = 5;
    if (v30) {
      unsigned int v15 = v9;
    }
    else {
      unsigned int v15 = 0;
    }
    if (v15 == 1)
    {
      char v29 = 1;
      uint64_t v16 = v40;
      *(_BYTE *)(v40 + 24) |= 4u;
      *(_DWORD *)(v16 + 2sub_1011C5518(qword_1019A41A0, 0) = 1;
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4140);
      }
      uint64_t v17 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Notice gesture IN CALL", v31, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_27;
      }
      bzero(v31, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4140);
      }
      v26[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  v31,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice gesture IN CALL",  v26,  2);
      __int16 v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionHintLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTel ephonyService_Type::NotificationData &)",  "%s\n",  v18);
    }

    else
    {
      char v29 = 0;
      uint64_t v20 = v40;
      *(_BYTE *)(v40 + 24) |= 4u;
      *(_DWORD *)(v20 + 2sub_1011C5518(qword_1019A41A0, 0) = 0;
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4140);
      }
      __int16 v21 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Notice gesture OUT OF CALL", v31, 2u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_27;
      }
      bzero(v31, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4140);
      }
      v26[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  v31,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice gesture OUT OF CALL",  v26,  2);
      __int16 v19 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionHintLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTel ephonyService_Type::NotificationData &)",  "%s\n",  v23);
    }

    if (v19 != v31) {
      free(v19);
    }
LABEL_27:
    uint64_t v22 = sub_100E00E14();
    sub_100E022E0(v22, (uint64_t)v27);
    if (qword_1019A1D00 != -1) {
      dispatch_once(&qword_1019A1D00, &stru_1018A4160);
    }
    if (qword_1019A1D08) {
      sub_1011CF3D0(qword_1019A1D08, (uint64_t)&buf);
    }
    sub_101127D00((PB::Base *)&buf);
  }

  if (v25) {
    os_activity_scope_leave(&state);
  }
}

void sub_10121C120( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10121C15C(uint64_t *a1)
{
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_1018A4140);
  }
  uint64_t v2 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)a1 + 2);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "#Notice proximity detection mask %{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A4140);
    }
    int v10 = *((_DWORD *)a1 + 2);
    LODWORD(v17) = 67240192;
    HIDWORD(v17) = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice proximity detection mask %{public}d",  &v17,  8);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMotionHintLogger::onProximity(const CLProximityNotifier::Sample *)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  uint64_t v17 = &off_101857BC0;
  uint64_t v19 = *a1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v20 = *((_DWORD *)a1 + 2);
  uint64_t v4 = sub_100E00E14();
  sub_100E022E0(v4, (uint64_t)&v17);
  sub_101125260(buf);
  sub_10113A8D8(buf);
  v16 |= 1u;
  CFAbsoluteTime v14 = Current;
  uint64_t v5 = v15;
  uint64_t v6 = *a1;
  *(_BYTE *)(v15 + 20) |= 1u;
  *(void *)(v5 + _Block_object_dispose(va, 8) = v6;
  uint64_t v7 = v15;
  int v8 = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v15 + 20) |= 2u;
  *(_DWORD *)(v7 + 16) = v8;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_1018A4160);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)buf);
  }
  return sub_101127D00((PB::Base *)buf);
}

void sub_10121C3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10121C400()
{
  int v10 = &off_101858810;
  uint64_t v0 = mach_absolute_time();
  double v12 = sub_101171C7C(v0);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  __int16 v13 = 8;
  uint64_t v1 = sub_100E00E14();
  sub_100E022E0(v1, (uint64_t)&v10);
  sub_101125260(v7);
  sub_10113AAD0(v7);
  double v2 = v12;
  *(CFAbsoluteTime *)&v7[77] = Current;
  v9 |= 1u;
  uint64_t v3 = v8;
  *(_BYTE *)(v8 + 24) |= 1u;
  *(double *)(v3 + _Block_object_dispose(va, 8) = v2;
  uint64_t v4 = v8;
  *(_BYTE *)(v8 + 24) |= 2u;
  *(_DWORD *)(v4 + 16) = 8;
  uint64_t v5 = v8;
  *(_BYTE *)(v8 + 24) |= 4u;
  *(_DWORD *)(v5 + 2sub_1011C5518(qword_1019A41A0, 0) = 0;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_1018A4160);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v7);
  }
  return sub_101127D00((PB::Base *)v7);
}

void sub_10121C508( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10121C520(unsigned __int8 *a1)
{
  int v1 = *a1;
  sub_101125260(v9);
  sub_10113AAD0(v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  uint64_t v3 = v10;
  uint64_t v4 = mach_absolute_time();
  double v5 = sub_101171C7C(v4);
  *(_BYTE *)(v3 + 24) |= 1u;
  *(double *)(v3 + _Block_object_dispose(va, 8) = v5;
  uint64_t v6 = v10;
  if (v1) {
    int v7 = 9;
  }
  else {
    int v7 = 10;
  }
  *(_BYTE *)(v10 + 24) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_1018A4160);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v9);
  }
  return sub_101127D00((PB::Base *)v9);
}

void sub_10121C5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10121C610(unsigned __int8 *a1)
{
  int v1 = *a1;
  sub_101125260(v9);
  sub_10113AAD0(v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  uint64_t v3 = v10;
  uint64_t v4 = mach_absolute_time();
  double v5 = sub_101171C7C(v4);
  *(_BYTE *)(v3 + 24) |= 1u;
  *(double *)(v3 + _Block_object_dispose(va, 8) = v5;
  uint64_t v6 = v10;
  if (v1) {
    int v7 = 11;
  }
  else {
    int v7 = 12;
  }
  *(_BYTE *)(v10 + 24) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_1019A1D00 != -1) {
    dispatch_once(&qword_1019A1D00, &stru_1018A4160);
  }
  if (qword_1019A1D08) {
    sub_1011CF3D0(qword_1019A1D08, (uint64_t)v9);
  }
  return sub_101127D00((PB::Base *)v9);
}

void sub_10121C6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10121C700(uint64_t a1)
{
  *(void *)a1 = off_1018A4190;
  [*(id *)(a1 + 48) invalidate];

  sub_10121F280(*(void **)(a1 + 88));
  sub_10121F2C4(*(void **)(a1 + 64));
  return a1;
}

uint64_t sub_10121C768(void *a1)
{
  *a1 = off_1018A4020;
  if (*((_BYTE *)a1 + 109))
  {
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:7];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:2];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:3];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:10];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:11];
    sub_1000F0D38(a1 + 19);
    uint64_t v2 = a1[15];
    sub_100320874(&v13, kCTCallStatusChangeNotification);
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:sub_100320924(&v13)];
    uint64_t v3 = sub_1007FA4C8();
    sub_1006DD2A0(v3, 0, a1[16]);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  a1,  @"com.apple.CoreMotion.PocketState.queryStart",  0LL);
    uint64_t v5 = sub_100A874F4();
    sub_1006DD2A0(v5, 0, a1[17]);
    sub_1004F2598();
    if (sub_1004FBF20())
    {
      uint64_t v6 = sub_10099F510();
      sub_1006DD2A0(v6, 0, a1[18]);
    }
  }

  sub_10000AE14((uint64_t)(a1 + 19));
  uint64_t v7 = a1[18];
  a1[18] = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = a1[17];
  a1[17] = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = a1[16];
  a1[16] = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = a1[15];
  a1[15] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = a1[14];
  a1[14] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  return sub_10121C700((uint64_t)a1);
}

void sub_10121C918(void *a1)
{
  int v1 = (void *)sub_10121C768(a1);
  operator delete(v1);
}

void sub_10121C92C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)operator new(0xA8uLL);
  uint64_t v3 = *(void **)(a1 + 32);
  *uint64_t v2 = (uint64_t)off_1018A4190;
  sub_1010DDBC0(v2 + 1, "CLMotionHintLogger");
  v2[4] = (uint64_t)v3;
  v2[5] = (uint64_t)[v3 silo];
  v2[6] = 0LL;
  v2[8] = 0LL;
  v2[7] = (uint64_t)(v2 + 8);
  v2[12] = 0LL;
  v2[11] = 0LL;
  v2[9] = 0LL;
  v2[10] = (uint64_t)(v2 + 11);
  *((_DWORD *)v2 + 26) = 0;
  *((_WORD *)v2 + 54) = 0;
  *uint64_t v2 = (uint64_t)off_1018A4020;
  *((_OWORD *)v2 + 7) = 0u;
  uint64_t v4 = v2 + 14;
  *((_OWORD *)v2 + _Block_object_dispose(va, 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  v2[20] = 0LL;
  uint64_t v5 = sub_1006E27E8();
  sub_100413284(v5, &v39);
  uint64_t v6 = (char *)v2 + 109;
  char v7 = sub_1002A6F64((uint64_t)v39, "EnableMotionHintLogging", (BOOL *)v2 + 109);
  char v8 = v7;
  uint64_t v9 = v40;
  if (!v40) {
    goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_5:
    if ((v7 & 1) != 0) {
      goto LABEL_6;
    }
LABEL_29:
    _BYTE *v6 = 0;
    goto LABEL_30;
  }

  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if ((v8 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_6:
  if (*v6)
  {
    sub_1003CC884((uint64_t)sub_10121B0A4, (uint64_t)v2, (void *)v2[4], &v39);
    double v12 = v39;
    CFAbsoluteTime v39 = 0LL;
    uint64_t v13 = *v4;
    *uint64_t v4 = (uint64_t)v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
      CFAbsoluteTime v14 = v39;
      CFAbsoluteTime v39 = 0LL;
      if (v14) {
        (*((void (**)(id *))*v14 + 1))(v14);
      }
    }

    [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:7 registrationInfo:0];
    [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:2 registrationInfo:0];
    [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:3 registrationInfo:0];
    [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:10 registrationInfo:0];
    [*(id *)(*v4 + 16) register:*(void *)(*v4 + 8) forNotification:11 registrationInfo:0];
    uint64_t v15 = sub_1006E27E8();
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_10121B6D8;
    v38[3] = &unk_10181D3D0;
    uint8_t v38[4] = v2;
    sub_1006E28B8(v15, (uint64_t)v38);
    sub_100328B0C((uint64_t)sub_10121BBA8, (uint64_t)v2, (void *)v2[4], &v39);
    char v16 = v39;
    CFAbsoluteTime v39 = 0LL;
    uint64_t v17 = v2[15];
    v2[15] = (uint64_t)v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
      uint64_t v18 = v39;
      CFAbsoluteTime v39 = 0LL;
      if (v18) {
        (*((void (**)(id *))*v18 + 1))(v18);
      }
    }

    uint64_t v19 = v2[15];
    sub_100320874(&v39, kCTCallStatusChangeNotification);
    [*(id *)(v19 + 16) register:*(void *)(v19 + 8) forNotification:sub_100320924((unsigned int *)&v39) registrationInfo:0];
    int v20 = operator new(0x20uLL);
    *int v20 = off_1018A2210;
    *int v20 = &off_1018A42A8;
    v20[1] = 0LL;
    v20[2] = sub_10121C15C;
    v20[3] = v2;
    uint64_t v21 = v2[16];
    v2[16] = (uint64_t)v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    uint64_t v22 = sub_1007FA4C8();
    sub_1006DCB40(v22, 0, v2[16], -1.0);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  v2,  (CFNotificationCallback)sub_10121C400,  @"com.apple.CoreMotion.PocketState.queryStart",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    uint64_t v24 = operator new(0x20uLL);
    *uint64_t v24 = off_1018A2210;
    *uint64_t v24 = &off_1018A42E0;
    v24[1] = 0LL;
    v24[2] = sub_10121C520;
    v24[3] = v2;
    uint64_t v25 = v2[17];
    v2[17] = (uint64_t)v24;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
    uint64_t v26 = sub_100A874F4();
    sub_1006DCB40(v26, 0, v2[17], -1.0);
    sub_1004F2598();
    if (sub_1004FBF20())
    {
      CFAbsoluteTime v27 = operator new(0x20uLL);
      *CFAbsoluteTime v27 = off_1018A2210;
      *CFAbsoluteTime v27 = &off_1018A42E0;
      v27[1] = 0LL;
      v27[2] = sub_10121C610;
      v27[3] = v2;
      uint64_t v28 = v2[18];
      v2[18] = (uint64_t)v27;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
      }
      uint64_t v29 = sub_10099F510();
      sub_1006DCB40(v29, 0, v2[18], -1.0);
      uint64_t v30 = sub_10099F510();
      int v31 = sub_1009A03D4(v30);
      sub_101125260(&v39);
      sub_10113AAD0(&v39);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v43 |= 1u;
      CFAbsoluteTime v41 = Current;
      uint64_t v33 = v42;
      uint64_t v34 = mach_absolute_time();
      double v35 = sub_101171C7C(v34);
      *(_BYTE *)(v33 + 24) |= 1u;
      *(double *)(v33 + _Block_object_dispose(va, 8) = v35;
      uint64_t v36 = v42;
      *(_BYTE *)(v42 + 24) |= 2u;
      if (v31 == 2) {
        int v37 = 11;
      }
      else {
        int v37 = 12;
      }
      *(_DWORD *)(v36 + 16) = v37;
      if (qword_1019A1D00 != -1) {
        dispatch_once(&qword_1019A1D00, &stru_1018A4160);
      }
      if (qword_1019A1D08) {
        sub_1011CF3D0(qword_1019A1D08, (uint64_t)&v39);
      }
      sub_101127D00((PB::Base *)&v39);
    }
  }

void sub_10121CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v9 = v6[18];
  v6[18] = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = v6[17];
  v6[17] = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = v6[16];
  unsigned __int8 v6[16] = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = v6[15];
  v6[15] = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *v7;
  uint64_t *v7 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  sub_10121C700((uint64_t)v6);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void *sub_10121CF00@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, __str);
}

uint64_t sub_10121CF78()
{
  return 1LL;
}

uint64_t sub_10121CF80()
{
  return 1LL;
}

uint64_t sub_10121CF88(uint64_t result)
{
  *(_BYTE *)(result + 10_Block_object_dispose(va, 8) = 1;
  return result;
}

uint64_t sub_10121CF94(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = (int *)v16;
  v16[0] = 0LL;
  v16[1] = 0LL;
  uint64_t v17 = a2;
  uint64_t v5 = (uint64_t **)(a1 + 88);
  uint64_t v4 = *(uint64_t **)(a1 + 88);
  int v6 = *(_DWORD *)(a1 + 104);
  int v7 = v6 + 1;
  *(_DWORD *)(a1 + 104) = v6 + 1;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v4;
        int v9 = *((_DWORD *)v4 + 8);
        if (v9 <= v7) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_11;
        }
      }

      if (v9 > v6) {
        break;
      }
      uint64_t v4 = v8[1];
      if (!v4)
      {
        uint64_t v5 = v8 + 1;
        goto LABEL_11;
      }
    }

    uint64_t v10 = (char *)v8;
  }

  else
  {
    char v8 = (uint64_t **)(a1 + 88);
LABEL_11:
    uint64_t v10 = (char *)operator new(0x48uLL);
    *((_DWORD *)v10 + _Block_object_dispose(va, 8) = v7;
    *((void *)v10 + 7) = 0LL;
    *((void *)v10 + _Block_object_dispose(va, 8) = 0LL;
    *((void *)v10 + 6) = 0LL;
    *((void *)v10 + 5) = v10 + 48;
    *(void *)uint64_t v10 = 0LL;
    *((void *)v10 + sub_1011C5518(qword_1019A41A0, 1) = 0LL;
    *((void *)v10 + 2) = v8;
    *uint64_t v5 = (uint64_t *)v10;
    uint64_t v11 = **(void **)(a1 + 80);
    uint64_t v12 = (uint64_t *)v10;
    if (v11)
    {
      *(void *)(a1 + 8sub_1011C5518(qword_1019A41A0, 0) = v11;
      uint64_t v12 = *v5;
    }

    sub_100008650(*(uint64_t **)(a1 + 88), v12);
    ++*(void *)(a1 + 96);
  }

  uint64_t v13 = (void *)v16[0];
  *((void *)v10 + _Block_object_dispose(va, 8) = v17;
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  sub_100008390((uint64_t)&v15, v13);
  return v2;
}

void sub_10121D0D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_10121D0EC(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    uint64_t v5 = (uint64_t **)(a1 + 88);
    uint64_t v4 = *(uint64_t **)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    int v6 = v5;
    int v7 = v4;
    do
    {
      int v8 = *((_DWORD *)v7 + 8);
      BOOL v9 = v8 < (int)a2;
      else {
        uint64_t v10 = (uint64_t **)(v7 + 1);
      }
      if (!v9) {
        int v6 = (uint64_t **)v7;
      }
      int v7 = *v10;
    }

    while (*v10);
    if (v6 != v5 && *((_DWORD *)v6 + 8) <= (int)a2)
    {
      if (v6[7])
      {
        do
        {
          *(_DWORD *)uint64_t buf = *((_DWORD *)v6[5] + 7);
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112LL))(a1, a2, buf);
        }

        while (v6[7]);
        uint64_t v4 = *v5;
      }

      if (v4)
      {
        uint64_t v13 = v5;
        CFAbsoluteTime v14 = v4;
        do
        {
          int v15 = *((_DWORD *)v14 + 8);
          BOOL v16 = v15 < (int)a2;
          else {
            uint64_t v17 = (uint64_t **)(v14 + 1);
          }
          if (!v16) {
            uint64_t v13 = (uint64_t **)v14;
          }
          CFAbsoluteTime v14 = *v17;
        }

        while (*v17);
        if (v13 != v5 && *((_DWORD *)v13 + 8) <= (int)a2)
        {
          uint64_t v18 = v13[1];
          if (v18)
          {
            do
            {
              uint64_t v19 = v18;
              uint64_t v18 = (uint64_t *)*v18;
            }

            while (v18);
          }

          else
          {
            int v20 = v13;
            do
            {
              uint64_t v19 = v20[2];
              BOOL v21 = *v19 == (void)v20;
              int v20 = (uint64_t **)v19;
            }

            while (!v21);
          }

          --*(void *)(a1 + 96);
          sub_100008858(v4, (uint64_t *)v13);
          sub_100008390((uint64_t)(v13 + 5), v13[6]);
          operator delete(v13);
        }
      }
    }

    else
    {
LABEL_12:
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A4120);
      }
      uint64_t v11 = (os_log_s *)qword_1019349D8;
      if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v12 = (void *)(a1 + 8);
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v30 = v12;
        __int16 v31 = 1026;
        int v32 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019349D0 != -1) {
          dispatch_once(&qword_1019349D0, &stru_1018A4120);
        }
        uint64_t v22 = (void *)(a1 + 8);
        int v25 = 136446466;
        uint64_t v26 = v22;
        __int16 v27 = 1026;
        int v28 = a2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
          &v25,
          18);
        uint64_t v24 = (uint8_t *)v23;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::rem oveClient(int) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogge r_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
        if (v24 != buf) {
          free(v24);
        }
      }
    }
  }

uint64_t sub_10121D400(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1011D622C(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96LL))(a1, a2, &v10, v7);
  }

  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))(a1, a2, &v9);
  }

uint64_t sub_10121D480(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104LL))(a1, a2, &v4);
}

uint64_t sub_10121D4AC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112LL))(a1, a2, &v4);
}

uint64_t sub_10121D4D8(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120LL))(a1, &v3);
}

uint64_t sub_10121D504(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(&OBJC_CLASS___CLNotifierServiceAdapter);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1LL);
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }

  return result;
}

uint64_t sub_10121D550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96LL))( a1,  a2,  a3,  &unk_1019A07B0);
}

uint64_t sub_10121D564(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(_BYTE *)(a1 + 108)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)CFAbsoluteTime v41 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }

      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }

      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v39 = v26;
        uint64_t v33 = *(void *)(v26 + 56);
        char v34 = *a4;
        *(void *)uint64_t buf = &v40;
        *((_BYTE *)sub_1004EF3D4((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(void *)a1 + 128LL))(a1, a3, buf))
        {
          double v35 = sub_10121F410(buf[0]);
          sub_10121F48C((_BYTE *)a1, (uint64_t)v41, (uint64_t)&v39, v35);
        }

        if (v33) {
          goto LABEL_44;
        }
      }

      else
      {
LABEL_42:
        *(_DWORD *)uint64_t buf = *a3;
        *((_BYTE *)sub_10121F568((uint64_t **)(a1 + 56), v17, buf) + 8sub_1011C5518(qword_1019A41A0, 0) = 0;
        *(_DWORD *)uint64_t buf = *a3;
        uint64_t v30 = sub_10121F568((uint64_t **)(a1 + 56), *(int *)buf, buf);
        sub_1000F0D38(v30 + 8);
        char v31 = *a4;
        LODWORD(v39) = *a3;
        int v32 = sub_10121F568((uint64_t **)(a1 + 56), v39, &v39);
        *(void *)uint64_t buf = &v40;
        *((_BYTE *)sub_1004EF3D4(v32 + 5, &v40, (uint64_t)&unk_1012CF090, (_DWORD **)buf) + 32) = v31;
      }

      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168LL))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_10004A8FC((uint64_t **)(*(void *)v41 + 40LL), (int *)buf, buf);
      }

      return 1LL;
    }
  }

  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_1018A4120);
  }
  CFAbsoluteTime v14 = (os_log_s *)qword_1019349D8;
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v45 = 1026;
    int v46 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }

  BOOL v16 = sub_1002921D0(115, 0);
  uint64_t result = 0LL;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    uint64_t v36 = (void *)(a1 + 8);
    *(_DWORD *)CFAbsoluteTime v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
      v41,
      18);
    uint64_t v38 = (char *)v37;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::registe rForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionHintLogger_Typ e::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, Regist rationInfo_T = char]",  "%s\n",  v37);
    if (v38 != buf) {
      free(v38);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_10121D970(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }

  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }

    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }

  else
  {
LABEL_11:
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    uint64_t v10 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v30 = v11;
      __int16 v31 = 1026;
      int v32 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }

    BOOL v12 = sub_1002921D0(115, 0);
    BOOL result = 0LL;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A4120);
      }
      int v22 = (void *)(a1 + 8);
      int v25 = 136446466;
      uint64_t v26 = v22;
      __int16 v27 = 1026;
      int v28 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      uint64_t v24 = (uint8_t *)v23;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::clien tRegistered(int, const Notification_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationDa ta_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
      return 0LL;
    }
  }

  return result;
}

BOOL sub_10121DBF0(char *a1, int a2, int *a3)
{
  HIDWORD(v34) = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }

      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }

          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1004EF494((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                int v25 = (uint64_t *)v20;
              }
              else {
                int v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }

            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1004EF494((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176LL))(a1, a3);
              }
            }

            else
            {
LABEL_33:
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A4120);
              }
              uint64_t v26 = (os_log_s *)qword_1019349D8;
              if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160LL))(__p, a1, a3);
                if (v44 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v36 = 2082;
                int v37 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1019349D0 != -1) {
                  dispatch_once(&qword_1019349D0, &stru_1018A4120);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                uint64_t v30 = qword_1019349D8;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(void *)a1 + 160LL))(buf, a1, a3);
                if (v38 >= 0) {
                  __int16 v31 = buf;
                }
                else {
                  __int16 v31 = *(_BYTE **)buf;
                }
                int v39 = 136446466;
                int v40 = v29;
                __int16 v41 = 2082;
                __int16 v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v30,  17LL,  "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                uint64_t v33 = v32;
                if (v38 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationDa ta>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionHintLogger_Type: :Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = ch ar, RegistrationInfo_T = char]",  "%s\n",  v33);
              }
            }
          }
        }
      }
    }
  }

  return v3 == 0;
}

void sub_10121DF78(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }

    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32)) {
      sub_1000F0D38((void *)(v6 + 64));
    }
  }

uint64_t sub_10121DFC4(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0LL;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 == v3) {
    return 0LL;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  int v11 = *(_BYTE **)(v7 + 64);
  if (!v11) {
    return 0LL;
  }
  *a3 = *v11;
  return 1LL;
}

uint64_t sub_10121E024(uint64_t a1, int *a2, char *a3)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0LL;
  _DWORD v6[2] = 0LL;
  void *v6 = off_1018A4338;
  char v7 = *a3;
  *((void *)&v14 + sub_1011C5518(qword_1019A41A0, 1) = v6;
  *((_BYTE *)v6 + 24) = v7;
  *(void *)&__int128 v14 = v6 + 3;
  int v13 = *a2;
  int v8 = sub_10121F568((uint64_t **)(a1 + 56), v13, &v13);
  sub_10005F550((uint64_t)(v8 + 8), &v14);
  BOOL v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    BOOL v10 = (unint64_t *)(*((void *)&v14 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  return 1LL;
}

void sub_10121E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10121E0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a2,  &v5,  a3,  a4,  0LL);
}

void sub_10121E128(uint64_t a1, unsigned int *a2, _BYTE *a3, int a4, int a5)
{
  if (!*(_BYTE *)(a1 + 108))
  {
    BOOL v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: notifyClientsWithData (Fallback)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    unint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v12 = (void *)(a1 + 8);
      uint64_t v13 = *a2;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&_BYTE buf[18] = 2082;
      *(void *)&buf[20] = "activity";
      *(_WORD *)&_BYTE buf[28] = 2082;
      *(void *)&buf[30] = v12;
      *(_WORD *)&buf[38] = 2050;
      *(void *)&buf[40] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:notifyClientsWithData, event:%{public, location:escape_only}s, name:%{public, l ocation:escape_only}s, notification:%{public}lld}",  buf,  0x30u);
    }

    int v15 = (uint64_t **)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 64);
    signed int v16 = *a2;
    if (!v14) {
      goto LABEL_18;
    }
    int v17 = (uint64_t **)(a1 + 64);
    do
    {
      signed int v18 = *(_DWORD *)(v14 + 32);
      BOOL v19 = v18 < v16;
      if (v18 >= v16) {
        uint64_t v20 = (uint64_t *)v14;
      }
      else {
        uint64_t v20 = (uint64_t *)(v14 + 8);
      }
      if (!v19) {
        int v17 = (uint64_t **)v14;
      }
      uint64_t v14 = *v20;
    }

    while (*v20);
    if (v17 == v15 || v16 < *((_DWORD *)v17 + 8))
    {
LABEL_18:
      *(void *)std::string __p = &__p[8];
      memset(&__p[8], 0, 24);
      uint64_t v128 = 0LL;
      *(_DWORD *)uint64_t buf = v16;
      sub_100234440((uint64_t *)&buf[8], (uint64_t)__p);
      int v21 = a2;
      *(void *)&uint8_t buf[32] = *(void *)&__p[24];
      *(void *)&buf[40] = v128;
      if (v128)
      {
        p_shared_owners = (unint64_t *)&v128->__shared_owners_;
        do
          unint64_t v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }

      char v24 = v129;
      char v131 = v129;
      int v25 = operator new(0x58uLL);
      int v17 = (uint64_t **)v25;
      int v26 = *(_DWORD *)buf;
      uint64_t v28 = *(void *)&buf[8];
      uint64_t v27 = *(void *)&buf[16];
      v25[6] = *(void *)&buf[16];
      uint64_t v29 = (char *)(v25 + 6);
      *((_DWORD *)v25 + _Block_object_dispose(va, 8) = v26;
      v25[5] = v28;
      uint64_t v30 = v25 + 5;
      uint64_t v31 = *(void *)&buf[24];
      v25[7] = *(void *)&buf[24];
      if (v31)
      {
        *(void *)(v27 + 16) = v29;
        *(void *)&uint8_t buf[8] = &buf[16];
        *(_OWORD *)&uint8_t buf[16] = 0uLL;
      }

      else
      {
        *uint64_t v30 = v29;
      }

      *((_OWORD *)v25 + 4) = *(_OWORD *)&buf[32];
      uint64_t v32 = (uint64_t)(v25 + 8);
      *(void *)&uint8_t buf[32] = 0LL;
      *(void *)&buf[40] = 0LL;
      *((_BYTE *)v17 + 8sub_1011C5518(qword_1019A41A0, 0) = v24;
      uint64_t v33 = *v15;
      uint64_t v34 = (uint64_t **)(a1 + 64);
      double v35 = (uint64_t **)(a1 + 64);
      if (*v15)
      {
        while (1)
        {
          while (1)
          {
            double v35 = (uint64_t **)v33;
            int v36 = *((_DWORD *)v33 + 8);
            if (v26 >= v36) {
              break;
            }
            uint64_t v33 = *v35;
            uint64_t v34 = v35;
            if (!*v35) {
              goto LABEL_31;
            }
          }

          if (v36 >= v26) {
            break;
          }
          uint64_t v33 = v35[1];
          if (!v33)
          {
            uint64_t v34 = v35 + 1;
            goto LABEL_31;
          }
        }

        sub_10000AE14(v32);
        sub_100008390((uint64_t)v30, v17[6]);
        operator delete(v17);
        int v17 = v35;
      }

      else
      {
LABEL_31:
        sub_1000085FC((uint64_t **)(a1 + 56), (uint64_t)v35, v34, (uint64_t *)v17);
      }

      int v37 = *(std::__shared_weak_count **)&buf[40];
      a2 = v21;
      if (*(void *)&buf[40])
      {
        char v38 = (unint64_t *)(*(void *)&buf[40] + 8LL);
        do
          unint64_t v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }

      sub_100008390((uint64_t)&buf[8], *(void **)&buf[16]);
      int v40 = v128;
      if (v128)
      {
        __int16 v41 = (unint64_t *)&v128->__shared_owners_;
        do
          unint64_t v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }

      sub_100008390((uint64_t)__p, *(void **)&__p[8]);
    }

    if (a4)
    {
      int v43 = operator new(0x20uLL);
      v43[1] = 0LL;
      v43[2] = 0LL;
      *int v43 = off_1018A4338;
      *((_BYTE *)v43 + 24) = *a3;
      *(void *)uint64_t buf = v43 + 3;
      *(void *)&uint8_t buf[8] = v43;
      sub_10005F550((uint64_t)(v17 + 8), (__int128 *)buf);
      char v44 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        __int16 v45 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }

    else
    {
      sub_1000F0D38(v17 + 8);
    }

    if (v17[7])
    {
      char v47 = *a3;
      __int128 v48 = operator new(1uLL);
      *__int128 v48 = v47;
      *(void *)uint64_t buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10121FF58;
      *(void *)&buf[24] = &unk_10181D3D0;
      *(void *)&uint8_t buf[32] = v48;
      __int16 v49 = +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
      uint64_t v50 = v49;
      if (a5 == -1)
      {
        if (!*(_BYTE *)(a1 + 108))
        {
          double v79 = *v15;
          if (*v15)
          {
            uint64_t v80 = a2;
            signed int v81 = *a2;
            double v82 = (uint64_t *)(a1 + 64);
            do
            {
              signed int v83 = *((_DWORD *)v79 + 8);
              BOOL v84 = v83 < v81;
              if (v83 >= v81) {
                uint64_t v85 = (uint64_t **)v79;
              }
              else {
                uint64_t v85 = (uint64_t **)(v79 + 1);
              }
              if (!v84) {
                double v82 = v79;
              }
              double v79 = *v85;
            }

            while (*v85);
            if (v82 != (uint64_t *)v15 && v81 >= *((_DWORD *)v82 + 8))
            {
              v122[0] = v82;
              id v86 = sub_10121F638(v49);
              (*(void (**)(uint64_t, unsigned int *, id, uint64_t *))(*(void *)a1 + 184LL))( a1,  a2,  v86,  v82 + 10);
              double v87 = (uint64_t *)v82[5];
              if (v87 != v82 + 6)
              {
                uint64_t v88 = (uint64_t *)(a1 + 88);
                uint64_t v89 = (uint64_t *)(a1 + 8);
                do
                {
                  uint64_t v90 = *v88;
                  if (!*v88) {
                    goto LABEL_132;
                  }
                  int v91 = *((_DWORD *)v87 + 7);
                  uint64_t v92 = a1 + 88;
                  do
                  {
                    int v93 = *(_DWORD *)(v90 + 32);
                    BOOL v94 = v93 < v91;
                    if (v93 >= v91) {
                      __n128 v95 = (uint64_t *)v90;
                    }
                    else {
                      __n128 v95 = (uint64_t *)(v90 + 8);
                    }
                    if (!v94) {
                      uint64_t v92 = v90;
                    }
                    uint64_t v90 = *v95;
                  }

                  while (*v95);
                  if ((uint64_t *)v92 != v88 && (int v96 = *(_DWORD *)(v92 + 32), v91 >= v96))
                  {
                    uint64_t v126 = v92;
                    sub_10121F48C((_BYTE *)a1, (uint64_t)&v126, (uint64_t)v122, v50);
                    double v100 = *v15;
                    if (!*v15) {
                      break;
                    }
                    signed int v101 = *v80;
                    double v82 = (uint64_t *)(a1 + 64);
                    do
                    {
                      int v102 = *((_DWORD *)v100 + 8);
                      BOOL v103 = v102 < v101;
                      if (v102 >= v101) {
                        uint64_t v104 = (uint64_t **)v100;
                      }
                      else {
                        uint64_t v104 = (uint64_t **)(v100 + 1);
                      }
                      if (!v103) {
                        double v82 = v100;
                      }
                      double v100 = *v104;
                    }

                    while (*v104);
                    v122[0] = v82;
                    double v87 = v82 + 6;
                    uint64_t v105 = v82[6];
                    if (v105)
                    {
                      double v106 = v82 + 6;
                      uint64_t v107 = v82[6];
                      do
                      {
                        int v108 = *(_DWORD *)(v107 + 28);
                        BOOL v109 = v108 < v96;
                        if (v108 >= v96) {
                          uint64_t v110 = (uint64_t *)v107;
                        }
                        else {
                          uint64_t v110 = (uint64_t *)(v107 + 8);
                        }
                        if (!v109) {
                          double v106 = (uint64_t *)v107;
                        }
                        uint64_t v107 = *v110;
                      }

                      while (*v110);
                      if (v106 == v87 || v96 < *((_DWORD *)v106 + 7))
                      {
                        do
                        {
                          int v111 = *(_DWORD *)(v105 + 28);
                          BOOL v112 = v96 < v111;
                          if (v96 >= v111) {
                            __int16 v113 = (uint64_t *)(v105 + 8);
                          }
                          else {
                            __int16 v113 = (uint64_t *)v105;
                          }
                          if (v112) {
                            double v87 = (uint64_t *)v105;
                          }
                          uint64_t v105 = *v113;
                        }

                        while (*v113);
                      }

                      else
                      {
                        uint64_t v114 = (uint64_t *)v106[1];
                        if (v114)
                        {
                          do
                          {
                            double v87 = v114;
                            uint64_t v114 = (uint64_t *)*v114;
                          }

                          while (v114);
                        }

                        else
                        {
                          do
                          {
                            __int16 v115 = v106;
                            double v106 = (uint64_t *)v106[2];
                          }

                          while ((uint64_t *)*v106 != v115);
                          double v87 = v106;
                        }
                      }
                    }
                  }

                  else
                  {
LABEL_132:
                    uint64_t v126 = a1 + 88;
                    if (qword_1019349D0 != -1) {
                      dispatch_once(&qword_1019349D0, &stru_1018A4120);
                    }
                    uint64_t v97 = (os_log_s *)qword_1019349D8;
                    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
                    {
                      uint64_t v98 = a1 + 8;
                      int v99 = *((_DWORD *)v87 + 7);
                      *(_DWORD *)uint64_t buf = 136446466;
                      *(void *)&uint8_t buf[4] = v98;
                      *(_WORD *)&_BYTE buf[12] = 1026;
                      *(_DWORD *)&buf[14] = v99;
                      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_FAULT,  "%{public}s; unknown client %{public}d",
                        buf,
                        0x12u);
                    }

                    if (sub_1002921D0(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1019349D0 != -1) {
                        dispatch_once(&qword_1019349D0, &stru_1018A4120);
                      }
                      uint64_t v116 = a1 + 8;
                      int v117 = *((_DWORD *)v87 + 7);
                      *(_DWORD *)std::string __p = 136446466;
                      *(void *)&__p[4] = v116;
                      *(_WORD *)&__p[12] = 1026;
                      *(_DWORD *)&__p[14] = v117;
                      LODWORD(v12sub_1011C5518(qword_1019A41A0, 0) = 18;
                      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  17LL,  "%{public}s; unknown client %{public}d",
                        __p,
                        v120);
                      __int16 v119 = (char *)v118;
                      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData >::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionHin tLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, Noti ficationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v118);
                      if (v119 != buf) {
                        free(v119);
                      }
                    }
                  }
                }

                while (v87 != v82 + 6);
              }
            }
          }
        }
      }

      else
      {
        uint64_t v51 = a1 + 88;
        uint64_t v52 = *(void *)(a1 + 88);
        if (!v52) {
          goto LABEL_63;
        }
        uint64_t v53 = a1 + 88;
        do
        {
          int v54 = *(_DWORD *)(v52 + 32);
          BOOL v55 = v54 < a5;
          if (v54 >= a5) {
            uint64_t v56 = (uint64_t *)v52;
          }
          else {
            uint64_t v56 = (uint64_t *)(v52 + 8);
          }
          if (!v55) {
            uint64_t v53 = v52;
          }
          uint64_t v52 = *v56;
        }

        while (*v56);
        if (v53 == v51 || *(_DWORD *)(v53 + 32) > a5) {
LABEL_63:
        }
          uint64_t v53 = a1 + 88;
        uint64_t v126 = v53;
        int v57 = *v15;
        if (!*v15) {
          goto LABEL_85;
        }
        signed int v58 = *a2;
        int v59 = (uint64_t *)(a1 + 64);
        do
        {
          signed int v60 = *((_DWORD *)v57 + 8);
          BOOL v61 = v60 < v58;
          if (v60 >= v58) {
            uint64_t v62 = (uint64_t **)v57;
          }
          else {
            uint64_t v62 = (uint64_t **)(v57 + 1);
          }
          if (!v61) {
            int v59 = v57;
          }
          int v57 = *v62;
        }

        while (*v62);
        if (v58 < *((_DWORD *)v59 + 8)) {
          goto LABEL_85;
        }
        double v124 = v59;
        if (v53 == v51) {
          goto LABEL_85;
        }
        uint64_t v65 = v59[6];
        __int128 v63 = v59 + 6;
        uint64_t v64 = v65;
        if (!v65) {
          goto LABEL_85;
        }
        int v66 = *(_DWORD *)(v53 + 32);
        double v67 = v63;
        do
        {
          int v68 = *(_DWORD *)(v64 + 28);
          BOOL v69 = v68 < v66;
          if (v68 >= v66) {
            uint64_t v70 = (uint64_t *)v64;
          }
          else {
            uint64_t v70 = (uint64_t *)(v64 + 8);
          }
          if (!v69) {
            double v67 = (uint64_t *)v64;
          }
          uint64_t v64 = *v70;
        }

        while (*v70);
        if (v67 == v63 || v66 < *((_DWORD *)v67 + 7))
        {
LABEL_85:
          if (qword_1019349D0 != -1) {
            dispatch_once(&qword_1019349D0, &stru_1018A4120);
          }
          __int16 v71 = (os_log_s *)qword_1019349D8;
          if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
          {
            double v72 = (void *)(a1 + 8);
            (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(__p, a1, a2);
            if (__p[23] >= 0) {
              uint64_t v73 = __p;
            }
            else {
              uint64_t v73 = *(_BYTE **)__p;
            }
            *(_DWORD *)uint64_t buf = 136315650;
            *(void *)&uint8_t buf[4] = v72;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = a5;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v73;
            _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "%s; client %d has deregistered, not notifying %s",
              buf,
              0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_1018A4120);
            }
            uint64_t v74 = (void *)(a1 + 8);
            uint64_t v75 = qword_1019349D8;
            (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(void *)a1 + 160LL))(v122, a1, a2);
            if (v123 >= 0) {
              uint64_t v76 = v122;
            }
            else {
              uint64_t v76 = (void **)v122[0];
            }
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = v74;
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = a5;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&__p[20] = v76;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v75,  2LL,  "%s; client %d has deregistered, not notifying %s",
              __p,
              28,
              v121);
            uint64_t v78 = v77;
            if (v123 < 0) {
              operator delete(v122[0]);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>: :notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_ T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v78);
            if (v78 != buf) {
              free(v78);
            }
          }
        }

        else
        {
          sub_10121F48C((_BYTE *)a1, (uint64_t)&v126, (uint64_t)&v124, v49);
        }
      }
    }

    os_activity_scope_leave(&state);
  }

void sub_10121EC18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

uint64_t sub_10121EC6C()
{
  return 1LL;
}

void sub_10121EC74(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 136315138;
      int v37 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A4120);
      }
      uint64_t v4 = (void *)(a1 + 8);
      int v32 = 136315138;
      uint64_t v33 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; already shutdown; not listing clients",
        (const char *)&v32);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listC lients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  else
  {
    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_1018A4120);
    }
    char v7 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v37 = v8;
      __int16 v38 = 2048;
      v39[0] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018A4120);
      }
      uint64_t v27 = (void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 96);
      int v32 = 136315394;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      uint64_t v30 = (uint8_t *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listC lients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type:: NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v29);
      if (v30 != buf) {
        free(v30);
      }
    }

    BOOL v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = (void *)(a1 + 8);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1019349D0 != -1) {
              dispatch_once(&qword_1019349D0, &stru_1018A4120);
            }
            uint64_t v13 = (os_log_s *)qword_1019349D8;
            if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = (void *)(a1 + 8);
              int v15 = *((_DWORD *)v10 + 8);
              int v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v37 = v14;
              __int16 v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019349D0 != -1) {
                dispatch_once(&qword_1019349D0, &stru_1018A4120);
              }
              uint64_t v20 = (void *)(a1 + 8);
              int v21 = *((_DWORD *)v10 + 8);
              int v22 = *((_DWORD *)v12 + 7);
              int v32 = 136315650;
              uint64_t v33 = v20;
              __int16 v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019349D8,  2LL,  "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              char v24 = (uint8_t *)v23;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData >::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionH intLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]",  "%s\n",  v23);
              if (v24 != buf) {
                free(v24);
              }
            }

            int v17 = (void *)v12[1];
            if (v17)
            {
              do
              {
                signed int v18 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                signed int v18 = (void *)v12[2];
                BOOL v19 = *v18 == (void)v12;
                BOOL v12 = v18;
              }

              while (!v19);
            }

            BOOL v12 = v18;
          }

          while (v18 != v10 + 6);
        }

        int v25 = (void *)v10[1];
        if (v25)
        {
          do
          {
            int v26 = v25;
            int v25 = (void *)*v25;
          }

          while (v25);
        }

        else
        {
          do
          {
            int v26 = (void *)v10[2];
            BOOL v19 = *v26 == (void)v10;
            BOOL v10 = v26;
          }

          while (!v19);
        }

        BOOL v10 = v26;
      }

      while (v26 != (void *)(a1 + 88));
    }
  }

void sub_10121F21C(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10121F248(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10121F280(void *a1)
{
  if (a1)
  {
    sub_10121F280(*a1);
    sub_10121F280(a1[1]);
    sub_100008390((uint64_t)(a1 + 5), (void *)a1[6]);
    operator delete(a1);
  }

void sub_10121F2C4(void *a1)
{
  if (a1)
  {
    sub_10121F2C4(*a1);
    sub_10121F2C4(a1[1]);
    sub_10000AE14((uint64_t)(a1 + 8));
    sub_100008390((uint64_t)(a1 + 5), (void *)a1[6]);
    operator delete(a1);
  }

void *sub_10121F314(void *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = off_1018A4270;
  sub_100719CA8((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_10121F358(_Unwind_Exception *a1)
{
}

void sub_10121F36C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A4270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10121F37C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A4270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10121F3A0(uint64_t a1)
{
  int v1 = (void *)sub_1011C07F8(a1);
  operator delete(v1);
}

uint64_t sub_10121F3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_10121F3C4(uint64_t a1)
{
  int v1 = (void *)sub_1011C07F8(a1);
  operator delete(v1);
}

uint64_t sub_10121F3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_10121F3E4(id a1)
{
  qword_101934478 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

CLCppContainer *sub_10121F410(char a1)
{
  uint64_t v2 = operator new(1uLL);
  *uint64_t v2 = a1;
  uint64_t v4 = _NSConcreteStackBlock;
  uint64_t v5 = 3221225472LL;
  int v6 = sub_10121F628;
  char v7 = &unk_10181D3D0;
  int v8 = v2;
  return +[CLCppContainer containerWithObject:destructor:binaryVersion:typeSize:]( &OBJC_CLASS___CLCppContainer,  "containerWithObject:destructor:binaryVersion:typeSize:");
}

_BYTE *sub_10121F48C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    char v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32LL);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32LL);
    id v9 = sub_10121F638(a4);
    uint64_t v10 = *(void *)a3 + 80LL;
    unint64_t v11 = (uint64_t **)(*(void *)a3 + 40LL);
    uint64_t v14 = (int *)(*(void *)a2 + 32LL);
    BOOL v12 = sub_1004EF3D4(v11, v14, (uint64_t)&unk_1012CF090, &v14);
    BOOL result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192LL))( v7,  v8,  &v13,  v9,  v10,  v12 + 4);
    if ((_DWORD)result) {
      return objc_msgSend( *(id *)(*(void *)a2 + 64),  "onNotification:withData:",  *(unsigned int *)(*(void *)a3 + 32),  a4,  v13);
    }
  }

  return result;
}

uint64_t **sub_10121F568(uint64_t **a1, int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        char v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    char v7 = a1 + 1;
LABEL_9:
    id v9 = operator new(0x58uLL);
    _WORD v9[8] = *a3;
    *((_OWORD *)v9 + 4) = 0u;
    *((void *)v9 + 9) = 0LL;
    *((void *)v9 + 1sub_1011C5518(qword_1019A41A0, 0) = 0LL;
    *((_OWORD *)v9 + 3) = 0u;
    *((void *)v9 + 5) = v9 + 12;
    *((void *)v9 + _Block_object_dispose(va, 8) = 0LL;
    sub_1000085FC(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }

  return v7;
}

void sub_10121F628(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_10121F638(void *a1)
{
  if ((objc_opt_isKindOfClass(a1, v2) & 1) != 0)
  {
    id v3 = [a1 binaryVersion];
    [a1 sizeOfType];
    if (v3)
    {
      if (getenv("_INTERSILO_UNIT_TEST"))
      {
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        uint64_t v4 = (os_log_s *)qword_101934478;
        if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218498;
          *(void *)char v24 = v3;
          *(_WORD *)&v24[8] = 2048;
          *(void *)&v24[10] = 0LL;
          *(_WORD *)&v24[18] = 2080;
          *(void *)&v24[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
        }

        if (!sub_1002921D0(115, 0)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        int v17 = 134218498;
        id v18 = v3;
        __int16 v19 = 2048;
        uint64_t v20 = 0LL;
        __int16 v21 = 2080;
        unint64_t v22 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version h as changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v17,  32);
      }

      else
      {
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        unint64_t v11 = (os_log_s *)qword_101934478;
        if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 134218498;
          *(void *)char v24 = v3;
          *(_WORD *)&v24[8] = 2048;
          *(void *)&v24[10] = 0LL;
          *(_WORD *)&v24[18] = 2080;
          *(void *)&v24[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
        }

        if (!sub_1002921D0(115, 0)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        int v17 = 134218498;
        id v18 = v3;
        __int16 v19 = 2048;
        uint64_t v20 = 0LL;
        __int16 v21 = 2080;
        unint64_t v22 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version h as changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v17,  32);
      }

      BOOL v12 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionHintLogger_Type::NotificationData, C allback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]",  "%s\n",  v5);
      goto LABEL_47;
    }

    if (![a1 cppObjectPtr]
      && objc_msgSend(objc_msgSend(a1, "compatibilityInfo"), "isEqual:", &off_1018D5270))
    {
      if (objc_msgSend(objc_msgSend(a1, "serialized"), "length") != (id)1)
      {
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        uint64_t v14 = (os_log_s *)qword_101934478;
        if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)char v24 = 0;
          *(_WORD *)&int v24[4] = 2082;
          *(void *)&v24[6] = "";
          *(_WORD *)&v24[14] = 2082;
          *(void *)&v24[16] = "assert";
          *(_WORD *)&v24[24] = 2081;
          *(void *)&v24[26] = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
          if (qword_101934470 != -1) {
            dispatch_once(&qword_101934470, &stru_1018A4308);
          }
        }

        int v15 = (os_log_s *)qword_101934478;
        if (os_signpost_enabled((os_log_t)qword_101934478))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)char v24 = 0;
          *(_WORD *)&int v24[4] = 2082;
          *(void *)&v24[6] = "";
          *(_WORD *)&v24[14] = 2082;
          *(void *)&v24[16] = "assert";
          *(_WORD *)&v24[24] = 2081;
          *(void *)&v24[26] = "sizeof(Object_T) == podContainer.serialized.length";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
          if (qword_101934470 != -1) {
            dispatch_once(&qword_101934470, &stru_1018A4308);
          }
        }

        int v16 = (os_log_s *)qword_101934478;
        if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)char v24 = 0;
          *(_WORD *)&int v24[4] = 2082;
          *(void *)&v24[6] = "";
          *(_WORD *)&v24[14] = 2082;
          *(void *)&v24[16] = "assert";
          *(_WORD *)&v24[24] = 2081;
          *(void *)&v24[26] = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
        }

        abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
      }

      objc_msgSend(a1, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a1, "serialized"), "bytes"));
    }

    return [a1 cppObjectPtr];
  }

  objc_opt_class(&OBJC_CLASS___CLCppContainer);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
  {
    id v7 = [a1 binaryVersion];
    [a1 sizeOfType];
    if (v7)
    {
      if (getenv("_INTERSILO_UNIT_TEST"))
      {
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        int v8 = (os_log_s *)qword_101934478;
        if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218498;
          *(void *)char v24 = v7;
          *(_WORD *)&v24[8] = 2048;
          *(void *)&v24[10] = 0LL;
          *(_WORD *)&v24[18] = 2080;
          *(void *)&v24[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
        }

        if (!sub_1002921D0(115, 0)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        int v17 = 134218498;
        id v18 = v7;
        __int16 v19 = 2048;
        uint64_t v20 = 0LL;
        __int16 v21 = 2080;
        unint64_t v22 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  16LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version h as changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v17,  32);
      }

      else
      {
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        uint64_t v13 = (os_log_s *)qword_101934478;
        if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 134218498;
          *(void *)char v24 = v7;
          *(_WORD *)&v24[8] = 2048;
          *(void *)&v24[10] = 0LL;
          *(_WORD *)&v24[18] = 2080;
          *(void *)&v24[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  buf,  0x20u);
        }

        if (!sub_1002921D0(115, 0)) {
          return 0LL;
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934470 != -1) {
          dispatch_once(&qword_101934470, &stru_1018A4308);
        }
        int v17 = 134218498;
        id v18 = v7;
        __int16 v19 = 2048;
        uint64_t v20 = 0LL;
        __int16 v21 = 2080;
        unint64_t v22 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934478,  17LL,  "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version h as changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly",  &v17,  32);
      }

      BOOL v12 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionHintLogger_Type::NotificationData, C allback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]",  "%s\n",  v9);
LABEL_47:
      if (v12 != buf) {
        free(v12);
      }
      return 0LL;
    }

    return [a1 cppObjectPtr];
  }

  return 0LL;
}

void sub_10121FF20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1018A4338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10121FF30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1018A4338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_10121FF58(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  if (v1) {
    operator delete(v1);
  }
}

id sub_1012202D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onHeartRateNotification:a2 data:a3];
}

void sub_10122047C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_101220530(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_101220698(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWifiScanNotification:a2 data:a3];
}

uint64_t sub_1012207E0(uint64_t a1, uint64_t a2)
{
  v30 |= 1u;
  v28[77] = v4;
  sub_1011390E4(v28);
  sub_10116EB10(v29);
  if (a2)
  {
    uint64_t v5 = v29;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(a2 + 16))(&v26, a2);
    uint64_t v6 = *((void *)&v26 + 1);
    for (uint64_t i = v27; v6 != i; v6 += 88LL)
    {
      *(void *)uint64_t buf = *(void *)v6;
      id v8 = (id)sub_1005B46E8((uint64_t)buf);
      unint64_t v9 = 0LL;
      signed int v10 = -1;
      while ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 56) count] > v9)
      {
        if (objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "objectAtIndexedSubscript:", v9),  "unsignedLongLongValue") == v8) {
          signed int v10 = v9;
        }
        ++v9;
      }

      if (v10 == -1)
      {
        objc_msgSend( *(id *)(*(void *)(a1 + 32) + 56),  "addObject:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v8));
        signed int v10 = [*(id *)(*(void *)(a1 + 32) + 56) count] - 1;
      }

      sub_1011694AC((char **)(v5[1] + 8LL));
      uint64_t v11 = *(void *)(*(void *)(v5[1] + 16LL) - 8LL);
      char v12 = *(_BYTE *)(v11 + 32);
      *(_BYTE *)(v11 + 32) = v12 | 1;
      *(void *)(v11 + _Block_object_dispose(va, 8) = v10;
      int v13 = *(_DWORD *)(v6 + 32);
      *(_BYTE *)(v11 + 32) = v12 | 5;
      *(_DWORD *)(v11 + 24) = v13;
      uint64_t v14 = *(void *)(v6 + 56);
      *(_BYTE *)(v11 + 32) = v12 | 7;
      *(void *)(v11 + 16) = v14;
      LOBYTE(v13) = *(_BYTE *)(v6 + 65);
      *(_BYTE *)(v11 + 32) = v12 | 0xF;
      *(_BYTE *)(v11 + 2_Block_object_dispose(va, 8) = v13;
      if (qword_101934670 != -1) {
        dispatch_once(&qword_101934670, &stru_1018A43C0);
      }
      int v15 = (os_log_s *)qword_101934678;
      if (os_log_type_enabled((os_log_t)qword_101934678, OS_LOG_TYPE_DEBUG))
      {
        int v16 = *(_DWORD *)(v11 + 24);
        uint64_t v17 = *(void *)(v11 + 16);
        int v18 = *(unsigned __int8 *)(v11 + 28);
        *(_DWORD *)uint64_t buf = 67109889;
        *(_DWORD *)&uint8_t buf[4] = v10;
        __int16 v39 = 1024;
        int v40 = v16;
        __int16 v41 = 2048;
        uint64_t v42 = v17;
        __int16 v43 = 1025;
        int v44 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "WiFi scan entry,id,%d,rssi,%d,timestamp,%f,isMoving,%{private}d",  buf,  0x1Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934670 != -1) {
          dispatch_once(&qword_101934670, &stru_1018A43C0);
        }
        int v19 = *(_DWORD *)(v11 + 24);
        uint64_t v20 = *(void *)(v11 + 16);
        int v21 = *(unsigned __int8 *)(v11 + 28);
        v31[0] = 67109889;
        v31[1] = v10;
        __int16 v32 = 1024;
        int v33 = v19;
        __int16 v34 = 2048;
        uint64_t v35 = v20;
        __int16 v36 = 1025;
        int v37 = v21;
        LODWORD(v25) = 30;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934678,  2LL,  "WiFi scan entry,id,%d,rssi,%d,timestamp,%f,isMoving,%{private}d",  v31,  v25);
        unint64_t v23 = (uint8_t *)v22;
        sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLWMWifiScans onWifiScanNotification:data:]_block_invoke", "%s\n", v22);
        if (v23 != buf) {
          free(v23);
        }
      }
    }
  }

  else
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
  }

  sub_10111D6A8(*(void *)(*(void *)(a1 + 32) + 16LL), (uint64_t)v28);
  *(void *)uint64_t buf = (char *)&v26 + 8;
  sub_100023498((void ***)buf);
  return sub_101127D00((PB::Base *)v28);
}

void sub_101220BD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  STACK[0xEA0] = a5;
  sub_100023498((void ***)&STACK[0xEA0]);
  sub_101127D00((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101220CA8(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101220E44(_Unwind_Exception *a1)
{
}

id sub_101220E58(uint64_t a1, void *a2)
{
  return _[a2 onPressureData:a1];
}

void sub_10122113C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1012211F0(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void *sub_10122121C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_1018A2210;
  id v9 = a5;
  *a1 = off_1018A4410;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0LL;
  a1[4] = v10;
  a1[6] = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  void v14[2] = 0x2020000000LL;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472LL;
  aBlock[2] = sub_101221348;
  aBlock[3] = &unk_10182EFC8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  _DWORD v12[2] = sub_10122135C;
  v12[3] = &unk_10182EFF0;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101221320(_Unwind_Exception *a1)
{
}

uint64_t sub_101221348(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_10122135C(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_101221378(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10122161C(a1);
  operator delete(v1);
}

id sub_10122138C(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A4438);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      unint64_t v31 = (unint64_t)"N10CLPressure6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 16LL;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4438);
      }
      int v22 = 136315906;
      unint64_t v23 = (unint64_t)"N10CLPressure6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 16LL;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v22,  38,  v17,  LODWORD(v18[0]));
      int v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLPressure::Sample>::dispatchData(int, const void *, size_t) [T = CLPressure::Sample]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  int v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_101221670;
  v18[3] = &unk_101861860;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v10;
  return [v13 async:v18];
}

uint64_t sub_10122161C(uint64_t a1)
{
  *(void *)a1 = off_1018A4410;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_101221670(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 64));
  }
  return result;
}

void sub_1012216B4(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101221BD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101221DB4(uint64_t a1, void *a2)
{
  id v3 = (void *)sub_1012000E4(a1, a2);
  void *v3 = off_1018A4468;
  sub_101221E44((uint64_t)v3);
  *(void *)(a1 + 52sub_1011C5518(qword_1019A41A0, 0) = 0x4220000041C80000LL;
  sub_101203B48(a1);
  if (*(_BYTE *)(a1 + 254))
  {
    sub_101200E48(a1);
    *(_BYTE *)(a1 + 254) = 0;
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  sub_101201B2C(a1);
  sub_101202D80(a1);
  return a1;
}

void sub_101221E30(_Unwind_Exception *a1)
{
}

void sub_101221E44(uint64_t a1)
{
  std::string __p = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  sub_101202E34(a1, &__p);
  sub_10078B390((float *)__p, v6, 0LL, 0LL, (float *)&v3);
  int v2 = v4;
  *(void *)(a1 + 552) = v3;
  *(_DWORD *)(a1 + 56sub_1011C5518(qword_1019A41A0, 0) = v2;
  if (__p)
  {
    uint64_t v6 = (float *)__p;
    operator delete(__p);
  }

void sub_101221EAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101221ECC(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 256);
  if (*(_BYTE *)(a1 + 256)) {
    memcpy(__dst, (const void *)(a1 + 568), 0x140uLL);
  }
  return v2 != 0;
}

void sub_101221F08(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 320);
  uint64_t v23 = *(void *)(a1 + 312);
  __int16 v24 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  sub_10121A114(v3, v4, &v23, (uint64_t)&__p);
  size_t v8 = v24;
  if (v24)
  {
    id v9 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_10078B390( (float *)__p,  v26,  *(void *)(a1 + 552),  *(unsigned int *)(a1 + 560) | (unint64_t)&_mh_execute_header,  (float *)&v21);
  *(_DWORD *)(a1 + 56_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 576) = *(void *)(a1 + 280);
  *(CFAbsoluteTime *)(a1 + 584) = Current;
  uint64_t v11 = *(float **)(a1 + 288);
  uint64_t v12 = *(float **)(a1 + 296);
  if (v11 == v12)
  {
    float v14 = 3.4028e38;
    float v13 = 1.1755e-38;
  }

  else
  {
    float v13 = 1.1755e-38;
    float v14 = 3.4028e38;
    do
    {
      float v15 = *v11;
      v11 += 8;
      float v16 = v15;
      if (v15 < v14) {
        float v14 = v16;
      }
      if (v16 > v13) {
        float v13 = v16;
      }
    }

    while (v11 != v12);
  }

  *(float *)(a1 + 592) = v14;
  *(float *)(a1 + 596) = v13;
  *(_OWORD *)(a1 + 60sub_1011C5518(qword_1019A41A0, 0) = v21;
  *(void *)(a1 + 616) = v22;
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A45D0);
  }
  uint64_t v17 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Linear gyro database computed fit.", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A45D0);
    }
    v20[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "Linear gyro database computed fit.",  v20,  2);
    __int128 v19 = (uint8_t *)v18;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLGyroCalibrationDatabaseLocalLinear::computeFit()",  "%s\n",  v18);
    if (v19 != buf) {
      free(v19);
    }
  }

  *(_BYTE *)(a1 + 256) = 1;
  if (__p)
  {
    __int16 v26 = (float *)__p;
    operator delete(__p);
  }

void sub_1012221BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012221F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_101203A98(a1);
  operator delete(v1);
}

uint64_t sub_101222208()
{
  return 0LL;
}

uint64_t sub_101222210()
{
  return 1LL;
}

void sub_101222218(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1012226C0(_Unwind_Exception *a1)
{
}

id sub_101222700(uint64_t a1, void *a2)
{
  return _[a2 onMagnetometerData:a1];
}

void sub_1012229F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_101222AA8(id a1)
{
  qword_101934678 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_101222AD4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

BOOL sub_101222AE8(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

void sub_101222B04(uint64_t a1)
{
  uint64_t v1 = (void *)sub_101222DAC(a1);
  operator delete(v1);
}

id sub_101222B18(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24LL;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_1018A4660);
    }
    id v9 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      unint64_t v33 = (unint64_t)"N14CLMagnetometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 24LL;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018A4660);
      }
      int v24 = 136315906;
      unint64_t v25 = (unint64_t)"N14CLMagnetometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 24LL;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d",  (const char *)&v24,  38,  v17,  LODWORD(v18[0]));
      float v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLMotionNotifier::SiloDispatcher<CLMagnetometer::Sample>::dispatchData(int, const void *, size_t) [ T = CLMagnetometer::Sample]",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  float v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_101222E00;
  v18[3] = &unk_10185F638;
  v18[4] = v12;
  v18[5] = v11;
  __int128 v19 = __dst;
  uint64_t v20 = v23;
  uint64_t v21 = v10;
  return [v13 async:v18];
}

uint64_t sub_101222DAC(uint64_t a1)
{
  *(void *)a1 = off_1018A4620;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1011C07F8(a1);
}

uint64_t sub_101222E00(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, void))(a1 + 40))(a1 + 48, *(void *)(a1 + 72));
  }
  return result;
}

void sub_101222E44(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101222E70()
{
  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101818710);
  }
  if (sub_100008DAC())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:min_dist should not be infinity, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v7);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101818710);
    }
  }

  if (sub_100008DF0())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "min_dist should not be infinity",  "{msg%{public}.0s:min_dist should not be infinity, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v7);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101818710);
    }
  }

  if (sub_100008DE0())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:min_dist should not be infinity, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v7);
  }

void sub_101222FE0()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100008DAC())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:distanceThresholdVector must not be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101818710);
      }
    }

    if (sub_100008DF0())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "distanceThresholdVector must not be empty",  "{msg%{public}.0s:distanceThresholdVector must not be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101818710);
      }
    }

    if (sub_100008DE0())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:distanceThresholdVector must not be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MachineLearning/CLHierarchicalClustering.mm",  146,  "getClusterLabels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_101818710);
  }

void sub_101223160()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100008DAC())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:minNumCluster must be greater than zero, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101818710);
      }
    }

    if (sub_100008DF0())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "minNumCluster must be greater than zero",  "{msg%{public}.0s:minNumCluster must be greater than zero, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101818710);
      }
    }

    if (sub_100008DE0())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:minNumCluster must be greater than zero, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MachineLearning/CLHierarchicalClustering.mm",  147,  "getClusterLabels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_101818710);
  }

void sub_1012232E0()
{
  __assert_rtn("operator()", "CLDistanceFunction.h", 26, "a.size() == b.size()");
}

void sub_101223308()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Cannot localize on invalid model!, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Cannot localize on invalid model!",  "{msg%{public}.0s:Cannot localize on invalid model!, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818830);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Cannot localize on invalid model!, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationCosineSimilarityLocalize.mm",  21,  "localize");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101818830);
  }

void sub_1012234E0()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Expecting some clientIDs to be passed in, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Expecting some clientIDs to be passed in",  "{msg%{public}.0s:Expecting some clientIDs to be passed in, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Expecting some clientIDs to be passed in, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecordingLabelsTable.mm",  327,  "deleteRecordingLabelsForClients");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101818888);
  }

void sub_101223654()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818888);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  267,  "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101818888);
  }

void sub_1012237C8()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101818CC8);
  }
  int v0 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Error, localization probabilities were not sorted in descending order, event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
  }

  int v1 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Error, localization probabilities were not sorted in descending order",  "{msg%{public}.0s:Error, localization probabilities were not sorted in descending order, event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101818CC8);
    }
  }

  int v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Error, localization probabilities were not sorted in descending order, event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_10122398C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CFType must be a CFArrayRef to convert to a const char*, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CFType must be a CFArrayRef to convert to a const char*",  "{msg%{public}.0s:CFType must be a CFArrayRef to convert to a const char*, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CFType must be a CFArrayRef to convert to a const char*, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h",  1303,  "CFValueToNativeValue");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101818F30);
  }

void sub_101223B00()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Unable to get the value from a CFNumber, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Unable to get the value from a CFNumber",  "{msg%{public}.0s:Unable to get the value from a CFNumber, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Unable to get the value from a CFNumber, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h",  1277,  "CFValueToNativeValue");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101818F30);
  }

void sub_101223C6C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CFType must be a CFNumber to convert to an int, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CFType must be a CFNumber to convert to an int",  "{msg%{public}.0s:CFType must be a CFNumber to convert to an int, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101818F30);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CFType must be a CFNumber to convert to an int, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h",  1273,  "CFValueToNativeValue");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101818F30);
  }

void sub_101223DD8()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  int v0 = (os_log_s *)qword_1019348D8;
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:invalid file protection class requested for the default CoreLocation Database, event: %{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "invalid file protection class requested for the default CoreLocation Database",  "{msg%{public}.0s:invalid file protection class requested for the default CoreLocation Database, event: %{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101819198);
    }
  }

  int v4 = (os_log_s *)qword_1019348D8;
  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:invalid file protection class requested for the default CoreLocation Database, event: %{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
  }

void sub_101223F64(void *a1, uint64_t a2, void **a3)
{
  *a3 = __cxa_begin_catch(a1);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }
  if (sub_10003981C())
  {
    sub_10003980C();
    sub_1000397F0( (void *)&_mh_execute_header,  v3,  v4,  "Error converting database values. %{public}s",  v5,  v6,  v7,  v8,  2u);
  }

  sub_100039828();
}

void sub_101224018()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348D8;
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:RowId not expected as timestamp column, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v5);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "RowId not expected as timestamp column",  "{msg%{public}.0s:RowId not expected as timestamp column, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v5);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819198);
      }
    }

    uint64_t v4 = (os_log_s *)qword_1019348D8;
    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:RowId not expected as timestamp column, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.mm",  993,  "exportRecordsUsingPaging");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101819198);
  }

void sub_1012241B4(uint64_t a1)
{
}

#error "101224244: call analysis failed (funcsize=72)"
void sub_101224330()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_1018192B0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  195,  "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_1018192B0);
  }

#error "101224518: call analysis failed (funcsize=70)"
#error "101224678: call analysis failed (funcsize=70)"
#error "1012247D8: call analysis failed (funcsize=70)"
void sub_1012248C4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  os_log_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018194A8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Couldn't find key: onesided_jaccard, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  &a9);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v27,  v28,  "Couldn't find key: onesided_jaccard",  "{msg%{public}.0s:Couldn't find key: onesided_jaccard, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  &a9);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Couldn't find key: onesided_jaccard, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_101224A2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  __int16 v30 = v29;
  sub_100042DC0();
  if (!v31) {
    dispatch_once(&qword_1019348D0, &stru_1018194A8);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:No per_source_params provided in dictionary, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v25 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v32,  v33,  "No per_source_params provided in dictionary",  "{msg%{public}.0s:No per_source_params provided in dictionary, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v25 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  __int16 v34 = *(os_log_s **)(v26 + 2264);
  if (sub_100042D04(v34))
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:No per_source_params provided in dictionary, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  *__int16 v30 = 79;
  sub_100042D70();
}

void sub_101224B9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  __int16 v30 = v29;
  sub_100042DC0();
  if (!v31) {
    dispatch_once(&qword_1019348D0, &stru_1018194A8);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:No e2j_kernel_thr provided in dictionary, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v25 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v32,  v33,  "No e2j_kernel_thr provided in dictionary",  "{msg%{public}.0s:No e2j_kernel_thr provided in dictionary, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v25 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  __int16 v34 = *(os_log_s **)(v26 + 2264);
  if (sub_100042D04(v34))
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:No e2j_kernel_thr provided in dictionary, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  &a9);
  }

  *__int16 v30 = 76;
  sub_100042D70();
}

void sub_101224D0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  __int16 v30 = v29;
  sub_100042DC0();
  if (!v31) {
    dispatch_once(&qword_1019348D0, &stru_1018194A8);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:No jaccard_scale_factor provided in dictionary, event:%{public, location:escape_only} s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v25 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v32,  v33,  "No jaccard_scale_factor provided in dictionary",  "{msg%{public}.0s:No jaccard_scale_factor provided in dictionary, event:%{public, location:escape_only} s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v25 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_1018194A8);
    }
  }

  __int16 v34 = *(os_log_s **)(v26 + 2264);
  if (sub_100042D04(v34))
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:No jaccard_scale_factor provided in dictionary, event:%{public, location:escape_only} s, condition:%{private, location:escape_only}s}",  &a9);
  }

  *__int16 v30 = 73;
  sub_100042D70();
}

#error "101224EF0: call analysis failed (funcsize=71)"
#error "101225058: call analysis failed (funcsize=71)"
#error "1012251C0: call analysis failed (funcsize=71)"
#error "101225408: call analysis failed (funcsize=85)"
#error "1012254D8: call analysis failed (funcsize=75)"
#error "101225650: call analysis failed (funcsize=75)"
#error "1012257CC: call analysis failed (funcsize=78)"
#error "101225944: call analysis failed (funcsize=71)"
#error "101225AAC: call analysis failed (funcsize=71)"
#error "101225C14: call analysis failed (funcsize=71)"
#error "101225D7C: call analysis failed (funcsize=71)"
#error "101225EE4: call analysis failed (funcsize=71)"
#error "10122604C: call analysis failed (funcsize=71)"
#error "1012261BC: call analysis failed (funcsize=75)"
#error "10122632C: call analysis failed (funcsize=70)"
#error "10122648C: call analysis failed (funcsize=70)"
void sub_101226578()
{
  __assert_rtn("CLGaussianKernelFunction", "CLKernelFunction.h", 37, "sigma > 0.0");
}

void sub_1012265A0()
{
}

void sub_1012265C8()
{
}

void sub_1012265F0()
{
}

void sub_101226618()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:semi-supervised model has no clientId value, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "semi-supervised model has no clientId value",  "{msg%{public}.0s:semi-supervised model has no clientId value, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819BB8);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:semi-supervised model has no clientId value, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLocalizationController.mm",  178,  "localizationRequestResultsPerModelInternal");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101819BB8);
  }

void sub_1012267EC()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819C40);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  195,  "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101819C40);
  }

void sub_101226960(void *a1, void *a2)
{
  int v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101819EF0);
  }
  int v4 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 16LL))(v3);
    int v6 = 136446210;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Error converting database values. %{public}s",  (uint8_t *)&v6,  0xCu);
  }

void sub_101226A40()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assigning a negative value to an unsigned type is probably not what you intended, eve nt:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assigning a negative value to an unsigned type is probably not what you intended",  "{msg%{public}.0s:Assigning a negative value to an unsigned type is probably not what you intended, eve nt:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assigning a negative value to an unsigned type is probably not what you intended, eve nt:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  244,  "convert");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101819DB0);
  }

void sub_101226BAC()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Trying to assign a value that is bigger than the provided type can hold, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Trying to assign a value that is bigger than the provided type can hold",  "{msg%{public}.0s:Trying to assign a value that is bigger than the provided type can hold, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101819DB0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Trying to assign a value that is bigger than the provided type can hold, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  245,  "convert");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101819DB0);
  }

void sub_101226D18(uint64_t a1)
{
}

void sub_101226D38()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:must have fingerprints distance function, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A1F0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "must have fingerprints distance function",  "{msg%{public}.0s:must have fingerprints distance function, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A1F0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:must have fingerprints distance function, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNearestNeighborAlgorithm.mm",  29,  "localize");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181A1F0);
  }

void sub_101226EAC()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A1F0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181A1F0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNearestNeighborAlgorithm.mm",  28,  "localize");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181A1F0);
  }

void sub_101227020(_DWORD *a1)
{
  if (!v2) {
    dispatch_once(&qword_1019348D0, &stru_10181A260);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_10005D608( (void *)&_mh_execute_header,  v3,  v4,  "{msg%{public}.0s:cluster distance threshold must not be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5,  v6,  v7,  v8,  v20);
    sub_10005D630();
    if (!v2) {
      dispatch_once(&qword_1019348D0, &stru_10181A260);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_10005D5E8( (void *)&_mh_execute_header,  v9,  v10,  v11,  "cluster distance threshold must not be empty",  "{msg%{public}.0s:cluster distance threshold must not be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v12,  v13,  v20);
    sub_10005D630();
    if (!v2) {
      dispatch_once(&qword_1019348D0, &stru_10181A260);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_10005D61C( (void *)&_mh_execute_header,  v14,  v15,  "{msg%{public}.0s:cluster distance threshold must not be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v16,  v17,  v18,  v19,  v20);
  }

  *a1 = 30;
  sub_100042D70();
}

void sub_101227170(_DWORD *a1)
{
  if (!v2) {
    dispatch_once(&qword_1019348D0, &stru_10181A260);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_10005D608( (void *)&_mh_execute_header,  v3,  v4,  "{msg%{public}.0s:fingerprintVector must be non-empty, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v5,  v6,  v7,  v8,  v20);
    sub_10005D630();
    if (!v2) {
      dispatch_once(&qword_1019348D0, &stru_10181A260);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_10005D5E8( (void *)&_mh_execute_header,  v9,  v10,  v11,  "fingerprintVector must be non-empty",  "{msg%{public}.0s:fingerprintVector must be non-empty, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v12,  v13,  v20);
    sub_10005D630();
    if (!v2) {
      dispatch_once(&qword_1019348D0, &stru_10181A260);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_10005D61C( (void *)&_mh_execute_header,  v14,  v15,  "{msg%{public}.0s:fingerprintVector must be non-empty, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v16,  v17,  v18,  v19,  v20);
  }

  *a1 = 35;
  sub_100042D70();
}

void sub_1012272C0(_DWORD *a1)
{
  if (!v2) {
    dispatch_once(&qword_1019348D0, &stru_10181A260);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_10005D608( (void *)&_mh_execute_header,  v3,  v4,  "{msg%{public}.0s:prune threshold must be less than or equal to clusterDistance threshold, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5,  v6,  v7,  v8,  v20);
    sub_10005D630();
    if (!v2) {
      dispatch_once(&qword_1019348D0, &stru_10181A260);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_10005D5E8( (void *)&_mh_execute_header,  v9,  v10,  v11,  "prune threshold must be less than or equal to clusterDistance threshold",  "{msg%{public}.0s:prune threshold must be less than or equal to clusterDistance threshold, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v12,  v13,  v20);
    sub_10005D630();
    if (!v2) {
      dispatch_once(&qword_1019348D0, &stru_10181A260);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_10005D61C( (void *)&_mh_execute_header,  v14,  v15,  "{msg%{public}.0s:prune threshold must be less than or equal to clusterDistance threshold, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v16,  v17,  v18,  v19,  v20);
  }

  *a1 = 33;
  sub_100042D70();
}

void sub_101227410( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  sub_10005D630();
  if (!v29) {
    dispatch_once(&qword_1019348D0, &stru_10181A3F8);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_10005D630();
    if (!v29) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v30,  v31,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_10005D630();
    if (!v29) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  *uint64_t v28 = 48;
  sub_100042D70();
}

void sub_101227578( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  sub_10005D630();
  if (!v29) {
    dispatch_once(&qword_1019348D0, &stru_10181A3F8);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_10005D630();
    if (!v29) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v30,  v31,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_10005D630();
    if (!v29) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  *uint64_t v28 = 47;
  sub_100042D70();
}

void sub_1012276E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_100060434();
  if (!v27) {
    dispatch_once(&qword_1019348D0, &stru_10181A3F8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_100060434();
    if (!v27) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_100060434();
    if (!v27) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10122783C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_100060434();
  if (!v27) {
    dispatch_once(&qword_1019348D0, &stru_10181A3F8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_100060434();
    if (!v27) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_100060434();
    if (!v27) {
      dispatch_once(&qword_1019348D0, &stru_10181A3F8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_101227998()
{
}

void sub_1012279C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10008D2BC("down_cast", "common.h", a3, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void sub_1012279E4()
{
}

void sub_101227A0C()
{
}

void sub_101227A34()
{
}

void sub_101227A5C()
{
}

void sub_101227A84()
{
}

void sub_101227AAC()
{
}

void sub_101227AD4()
{
}

void sub_101227AFC()
{
}

void sub_101227B24()
{
}

void sub_101227B4C()
{
}

void sub_101227B74()
{
}

void sub_101227B9C()
{
}

void sub_101227BC4()
{
}

void sub_101227BEC()
{
}

void sub_101227C14()
{
}

void sub_101227C3C()
{
}

void sub_101227C64()
{
}

void sub_101227C8C()
{
}

void sub_101227CB4()
{
}

void sub_101227CDC()
{
}

void sub_101227D04()
{
}

void sub_101227D2C()
{
}

void sub_101227D54()
{
}

void sub_101227D7C()
{
}

void sub_101227DA4()
{
}

void sub_101227DCC()
{
}

void sub_101227DF4()
{
}

void sub_101227E1C()
{
}

void sub_101227E44()
{
}

void sub_101227E6C()
{
}

void sub_101227E94()
{
}

void sub_101227EBC()
{
}

void sub_101227EE4()
{
}

void sub_101227F0C()
{
}

void sub_101227F34()
{
}

void sub_101227F5C()
{
}

void sub_101227F84()
{
}

void sub_101227FAC()
{
}

void sub_101227FD4()
{
}

void sub_101227FFC()
{
}

void sub_101228024()
{
}

void sub_10122804C()
{
}

void sub_101228074()
{
}

void sub_10122809C()
{
}

void sub_1012280C4()
{
}

void sub_1012280EC()
{
}

void sub_101228114()
{
}

void sub_10122813C()
{
}

void sub_101228164()
{
}

void sub_10122818C()
{
}

void sub_1012281B4()
{
}

void sub_1012281DC()
{
}

void sub_101228204()
{
}

void sub_10122822C()
{
}

void sub_101228254()
{
}

void sub_10122827C()
{
}

void sub_1012282A4()
{
}

void sub_1012282CC()
{
}

void sub_1012282F4()
{
}

void sub_10122831C()
{
}

void sub_101228344()
{
}

void sub_10122836C()
{
}

void sub_101228394()
{
}

void sub_1012283BC()
{
}

void sub_1012283E4()
{
}

void sub_10122840C()
{
  if (!v1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match numbe r of clusters, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters",  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match numbe r of clusters, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match numbe r of clusters, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9);
  }

  sub_100042D70();
}

void sub_10122855C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Model get prediction classes unknown model type, modelType:%{public}d, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
    }

    char v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_100042C80();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Model get prediction classes unknown model type",  "{msg%{public}.0s:Model get prediction classes unknown model type, modelType:%{public}d, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Model get prediction classes unknown model type, modelType:%{public}d, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationModel.mm",  242,  "getPredictionClasses");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }

void sub_101228740()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:mapped cluster identifer already exists, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "mapped cluster identifer already exists",  "{msg%{public}.0s:mapped cluster identifer already exists, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:mapped cluster identifer already exists, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationModel.mm",  305,  "mapIdentifiers");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }

void sub_1012288C0()
{
  if (!v1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Similarity List Model Learning, Localizer must not return empty results, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "Similarity List Model Learning, Localizer must not return empty results",  "{msg%{public}.0s:Similarity List Model Learning, Localizer must not return empty results, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:Similarity List Model Learning, Localizer must not return empty results, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9);
  }

  sub_100042D70();
}

void sub_101228A10(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2) {
    operator delete[](v2);
  }
}

#error "101228AA0: call analysis failed (funcsize=73)"
#error "101228C10: call analysis failed (funcsize=73)"
#error "101228D80: call analysis failed (funcsize=72)"
void sub_101228E70()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181D7B8);
  }
  uint64_t v0 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#LoiRecordingManager Tried to initialize with an invalid queue, event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181D7B8);
    }
  }

  char v1 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#LoiRecordingManager Tried to initialize with an invalid queue",  "{msg%{public}.0s:#LoiRecordingManager Tried to initialize with an invalid queue, event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181D7B8);
    }
  }

  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#LoiRecordingManager Tried to initialize with an invalid queue, event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

uint64_t sub_101229034()
{
  uint64_t v0 = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationStateMachine.h",  57,  "stateFunction");
  return sub_101229068(v0);
}

#error "1012290E0: call analysis failed (funcsize=71)"
#error "101229244: call analysis failed (funcsize=72)"
#error "1012293B8: call analysis failed (funcsize=79)"
#error "101229538: call analysis failed (funcsize=71)"
#error "10122969C: call analysis failed (funcsize=71)"
void sub_101229788(uint64_t a1)
{
}

void sub_10122979C()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181DD88);
  }
  uint64_t v0 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid model index, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181DD88);
    }
  }

  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    sub_100008D64();
    sub_1000C8500();
    _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181DD88);
    }
  }

  uint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid model index, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  0x26u);
  }

void sub_101229954()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100042CF0())
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unsupported distance function type, type:%{public}u, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181DD88);
      }
    }

    if (sub_100042D9C())
    {
      sub_100042C1C();
      sub_1000C8500();
      _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181DD88);
      }
    }

    if (sub_10005D63C())
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Unsupported distance function type, type:%{public}u, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.mm",  122,  "getFingerprintDistanceFunctionParamsForType");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181DD88);
  }

void sub_101229B04(uint64_t *a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181DD88);
  }
  if (sub_100042CF0())
  {
    sub_1000C84CC();
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Failed to get a long value for key, key:%{public, location:escape_only}s, event:% {public, location:escape_only}s, condition:%{private, location:escape_only}s}",  (uint8_t *)v10,  0x30u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181DD88);
    }
  }

  if (sub_100042D9C())
  {
    sub_1000C84CC();
    sub_1000C8500();
    _os_signpost_emit_with_name_impl(v3, v4, v5, v6, v7, v8, v9, 0x30u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181DD88);
    }
  }

  if (sub_10005D63C())
  {
    v10[0] = 68289795;
    v10[1] = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = a1;
    __int16 v15 = 2082;
    uint64_t v16 = "assert";
    __int16 v17 = 2081;
    uint64_t v18 = "res";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Failed to get a long value for key, key:%{public, location:escape_only}s, event:% {public, location:escape_only}s, condition:%{private, location:escape_only}s}",  (uint8_t *)v10,  0x30u);
  }

#error "101229D68: call analysis failed (funcsize=71)"
#error "101229ED0: call analysis failed (funcsize=70)"
#error "10122A030: call analysis failed (funcsize=71)"
void sub_10122A124()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[56];
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid type chosen, enum value:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EC68);
      }
    }

    char v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_100042C1C();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid type chosen",  "{msg%{public}.0s:Invalid type chosen, enum value:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EC68);
      }
    }

    os_log_t v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid type chosen, enum value:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintDataSources.mm",  26,  "create");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EC68);
  }

void sub_10122A2FC()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Optional Model must have value here, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v7);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181EDA0);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Optional Model must have value here",  "{msg%{public}.0s:Optional Model must have value here, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v7);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181EDA0);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Optional Model must have value here, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v7);
  }

void sub_10122A47C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:All services released their models and shared_ptr count is more than expected, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "All services released their models and shared_ptr count is more than expected",  "{msg%{public}.0s:All services released their models and shared_ptr count is more than expected, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:All services released their models and shared_ptr count is more than expected, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoServiceManager.mm",  313,  "releaseAllModels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }

void sub_10122A60C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:enable MiLo at current location called for a service which is not currently connected, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "enable MiLo at current location called for a service which is not currently connected",  "{msg%{public}.0s:enable MiLo at current location called for a service which is not currently connected, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:enable MiLo at current location called for a service which is not currently connected, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoServiceManager.mm",  865,  "enableMiLoAtCurrentLocation");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }

void sub_10122A79C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_1000396F8();
      sub_100039750( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:DatabaseFreeSpacePercentage needs to be a valid percentage, percentage:%{public}d, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
      }
    }

    if (sub_1000ECE18())
    {
      sub_1000396F8();
      sub_100039730( (void *)&_mh_execute_header,  v6,  v7,  v8,  "DatabaseFreeSpacePercentage needs to be a valid percentage",  "{msg%{public}.0s:DatabaseFreeSpacePercentage needs to be a valid percentage, percentage:%{public}d, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
      }
    }

    if (sub_1000397C4())
    {
      sub_1000396F8();
      sub_100039764( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:DatabaseFreeSpacePercentage needs to be a valid percentage, percentage:%{public}d, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.h",  450,  "minimumNumRowsFree");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EDA0);
  }

void sub_10122A924()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Expecting a wifi channel histogram, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EF70);
      }
    }

    int v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Expecting a wifi channel histogram",  "{msg%{public}.0s:Expecting a wifi channel histogram, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EF70);
      }
    }

    int v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Expecting a wifi channel histogram, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWiFiChannelHist ogramAnalyzer.mm",  66,  "histogramFromProtobuf");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EF70);
  }

void sub_10122AAF8()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EF90);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EF90);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintDistanceFunction.mm",  27,  "computeDifference");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EF90);
  }

void sub_10122AC64()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:configured e2jKernelThr illegal value, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EF90);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "configured e2jKernelThr illegal value",  "{msg%{public}.0s:configured e2jKernelThr illegal value, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EF90);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:configured e2jKernelThr illegal value, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintDistanceFunction.mm",  327,  "weightedEuclideanJaccardDistance");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EF90);
  }

void sub_10122ADD0()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_1000EFD78();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:index out of bounds, ii:%{public}llu, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EFF0);
      }
    }

    int v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_1000EFD78();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "index out of bounds",  "{msg%{public}.0s:index out of bounds, ii:%{public}llu, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181EFF0);
      }
    }

    int v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_1000EFD78();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:index out of bounds, ii:%{public}llu, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x30u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintVector.mm",  38,  "operator[]");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181EFF0);
  }

#error "10122B018: call analysis failed (funcsize=72)"
#error "10122B184: call analysis failed (funcsize=72)"
void sub_10122B278()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[56];
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid type chosen, enum value:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F050);
      }
    }

    int v1 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      sub_100042C1C();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid type chosen",  "{msg%{public}.0s:Invalid type chosen, enum value:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F050);
      }
    }

    int v2 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid type chosen, enum value:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationAlgorithms.h",  177,  "createReducerFunction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F050);
  }

#error "10122B4C8: call analysis failed (funcsize=72)"
#error "10122B634: call analysis failed (funcsize=72)"
#error "10122B7A0: call analysis failed (funcsize=72)"
void sub_10122B894()
{
  __assert_rtn("minimumValueSorted", "CLReducerFunction.h", 38, "container.size()>0");
}

void sub_10122B8BC()
{
}

void sub_10122B8E4()
{
}

void sub_10122B90C()
{
}

void sub_10122B934()
{
}

void sub_10122B95C()
{
}

void sub_10122B984()
{
}

void sub_10122B9AC()
{
}

void sub_10122B9D4()
{
  __assert_rtn( "parameterizedTruncatedMeanValueSorted",  "CLReducerFunction.h",  61,  "minPercentile >= 0 && minPercentile <= 1 && maxPercentile >= minPercentile && maxPercentile <= 1");
}

void sub_10122B9FC()
{
}

void sub_10122BA24()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100042CF0())
    {
      sub_100042C80();
      sub_100042D48( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Unsupported Service Type, ServiceType:%{public}d, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    if (sub_100042D9C())
    {
      sub_100042C80();
      sub_100042CD0( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Unsupported Service Type",  "{msg%{public}.0s:Unsupported Service Type, ServiceType:%{public}d, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    if (sub_10005D63C())
    {
      sub_100042C80();
      sub_100042D5C( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Unsupported Service Type, ServiceType:%{public}d, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm",  32,  "settingsString");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F1A0);
  }

void sub_10122BBA0()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348D8;
    if (sub_1000F9274((os_log_s *)qword_1019348D8))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Error converting uint to location types: Value does not fit into bitset, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    int v1 = (os_log_s *)qword_1019348D8;
    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Error converting uint to location types: Value does not fit into bitset",  "{msg%{public}.0s:Error converting uint to location types: Value does not fit into bitset, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    int v4 = (os_log_s *)qword_1019348D8;
    if (sub_100042D04((os_log_s *)qword_1019348D8))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Error converting uint to location types: Value does not fit into bitset, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm",  252,  "uint64ToLocationTypesBitset");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F1A0);
  }

void sub_10122BD44(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    int v1 = (os_log_s *)qword_1019348D8;
    if (sub_1000F9274((os_log_s *)qword_1019348D8))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Update model - got null pointer, event:%{public, location:escape_only}s, conditio n:%{private, location:escape_only}s}",  v6);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019348D8;
    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Update model - got null pointer",  "{msg%{public}.0s:Update model - got null pointer, event:%{public, location:escape_only}s, conditio n:%{private, location:escape_only}s}",  v6);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    int v5 = (os_log_s *)qword_1019348D8;
    if (sub_100042D04((os_log_s *)qword_1019348D8))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Update model - got null pointer, event:%{public, location:escape_only}s, conditio n:%{private, location:escape_only}s}",  v6);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm",  266,  "updateModel");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F1A0);
  }

void sub_10122BEE8()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100042CF0())
    {
      sub_100042C1C();
      sub_100042D48( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Service Type unsupported , service type:%{public}d, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  buf);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    if (sub_100042D9C())
    {
      sub_100042C1C();
      sub_100042CD0( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Service Type unsupported ",  "{msg%{public}.0s:Service Type unsupported , service type:%{public}d, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  buf);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F1A0);
      }
    }

    if (sub_10005D63C()) {
      sub_100042D5C( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Service Type unsupported , service type:%{public}d, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  3u);
    }
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm",  416,  "modelTypeByServiceAndLocationType");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F1A0);
  }

void sub_10122C080(_DWORD *a1)
{
  if (!v4) {
    dispatch_once(&qword_1019348D0, &stru_10181F1A0);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:If run state is runnimg then suspend reason must be empty, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v7);
    if (*(void *)(v2 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v5,  v6,  "If run state is runnimg then suspend reason must be empty",  "{msg%{public}.0s:If run state is runnimg then suspend reason must be empty, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v7);
    if (*(void *)(v2 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:If run state is runnimg then suspend reason must be empty, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v7);
  }

  *a1 = 708;
  sub_100042D70();
}

void sub_10122C1F0(_DWORD *a1)
{
  if (!v4) {
    dispatch_once(&qword_1019348D0, &stru_10181F1A0);
  }
  if (sub_100042CF0())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:If run state is suspended then suspend reason cannot be empty, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    if (*(void *)(v2 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
  }

  if (sub_100042D9C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v5,  v6,  "If run state is suspended then suspend reason cannot be empty",  "{msg%{public}.0s:If run state is suspended then suspend reason cannot be empty, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    if (*(void *)(v2 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_10181F1A0);
    }
  }

  if (sub_10005D63C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:If run state is suspended then suspend reason cannot be empty, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
  }

  *a1 = 706;
  sub_100042D70();
}

void sub_10122C360(uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 16)) {
    (**((void (***)(char *))__p + 4))(__p + 32);
  }
  operator delete(__p);
}

void sub_10122C39C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:WifiBridge, shouldn't request scanner when scan activity is not set, event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F830);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "WifiBridge, shouldn't request scanner when scan activity is not set",  "{msg%{public}.0s:WifiBridge, shouldn't request scanner when scan activity is not set, event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F830);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:WifiBridge, shouldn't request scanner when scan activity is not set, event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWifiBridge.mm",  209,  "getWifiScannerForScanActivity");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F830);
  }

void sub_10122C508()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F830);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension",  "{msg%{public}.0s:WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181F830);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWifiBridge.mm",  108,  "extendWifiScanTimer");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181F830);
  }

#error "10122C6EC: call analysis failed (funcsize=72)"
#error "10122C858: call analysis failed (funcsize=72)"
#error "10122C9C4: call analysis failed (funcsize=71)"
#error "10122CB28: call analysis failed (funcsize=72)"
#error "10122CC94: call analysis failed (funcsize=72)"
void sub_10122CD88()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 80, "container.size()>0");
}

void sub_10122CDB0()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 81, "prctile >= 0.0 && prctile <= 1.0");
}

void sub_10122CDD8()
{
  __assert_rtn( "parametrizedPercentileSorted",  "CLReducerFunction.h",  93,  "(startIndex >= 0) && (startIndex <= static_cast<int>(container.size()) - 2)");
}

#error "10122CE78: call analysis failed (funcsize=72)"
#error "10122CFE4: call analysis failed (funcsize=72)"
void sub_10122D0D8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, no current transaction when recording batch of measurementWrappers,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed, no current transaction when recording batch of measurementWrappers",  "{msg%{public}.0s:Assertion failed, no current transaction when recording batch of measurementWrappers,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, no current transaction when recording batch of measurementWrappers,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecorder.mm",  285,  "recordMeasurementBatch");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181FA48);
  }

void sub_10122D254()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, no current transaction when recording an event, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed, no current transaction when recording an event",  "{msg%{public}.0s:Assertion failed, no current transaction when recording an event, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FA48);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, no current transaction when recording an event, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecorder.mm",  301,  "recordEvent");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181FA48);
  }

void sub_10122D3D8()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Already monitoring App In Focus events, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FCF8);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Already monitoring App In Focus events",  "{msg%{public}.0s:Already monitoring App In Focus events, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FCF8);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Already monitoring App In Focus events, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBiomeMonitor.mm",  96,  "startMonitoringBiomeEvents");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181FCF8);
  }

void sub_10122D544()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Already monitoring Now Playing events, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FCF8);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Already monitoring Now Playing events",  "{msg%{public}.0s:Already monitoring Now Playing events, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181FCF8);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Already monitoring Now Playing events, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBiomeMonitor.mm",  82,  "startMonitoringBiomeEvents");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10181FCF8);
  }

uint64_t sub_10122D6B0()
{
  uint64_t v0 = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  78,  "setScanActivity");
  return sub_10122D6E4(v0);
}

uint64_t sub_10122D6E4()
{
  uint64_t v0 = abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  87,  "setScanActivity");
  return sub_10122D718(v0);
}

void sub_10122D718()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:# MiLo Logic -- tried to initialize with an invalid queue, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v7);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "# MiLo Logic -- tried to initialize with an invalid queue",  "{msg%{public}.0s:# MiLo Logic -- tried to initialize with an invalid queue, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v7);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101820170);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:# MiLo Logic -- tried to initialize with an invalid queue, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v7);
  }

void sub_10122D888()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:MiLo must be enabled, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "MiLo must be enabled",  "{msg%{public}.0s:MiLo must be enabled, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:MiLo must be enabled, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  449,  "onStartRecordingOrLocalizing");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }

void sub_10122DA08()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Must contain valid scan activity, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Must contain valid scan activity",  "{msg%{public}.0s:Must contain valid scan activity, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Must contain valid scan activity, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm",  452,  "onStartRecordingOrLocalizing");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }

void sub_10122DB88()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CFType must be a CFString to convert to a std::string, event:%{public, location:esc ape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "CFType must be a CFString to convert to a std::string",  "{msg%{public}.0s:CFType must be a CFString to convert to a std::string, event:%{public, location:esc ape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820170);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:CFType must be a CFString to convert to a std::string, event:%{public, location:esc ape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h",  1265,  "CFValueToNativeValue");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101820170);
  }

void sub_10122DD00()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_1018205A0);
  }
  uint64_t v0 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:json string is invalid, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018205A0);
    }
  }

  uint64_t v1 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "json string is invalid",  "{msg%{public}.0s:json string is invalid, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_1018205A0);
    }
  }

  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:json string is invalid, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v3,  0x26u);
  }

void sub_10122DEC4()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820780);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  195,  "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101820780);
  }

void sub_10122E038()
{
  if (!v0) {
    dispatch_once(&qword_1019348D0, &stru_101820920);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_10013E560( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:number of measurements still exceeds maximum, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18);
    sub_100060434();
    if (!v0) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_10013E540( (void *)&_mh_execute_header,  v7,  v8,  v9,  "number of measurements still exceeds maximum",  "{msg%{public}.0s:number of measurements still exceeds maximum, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v10,  v11,  v18);
    sub_100060434();
    if (!v0) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_10013E574( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:number of measurements still exceeds maximum, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18);
  }

  sub_100042D70();
}

void sub_10122E17C()
{
  if (!v0) {
    dispatch_once(&qword_1019348D0, &stru_101820920);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_10013E560( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  v4,  v5,  v6,  v18);
    sub_100060434();
    if (!v0) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_10013E540( (void *)&_mh_execute_header,  v7,  v8,  v9,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v10,  v11,  v18);
    sub_100060434();
    if (!v0) {
      dispatch_once(&qword_1019348D0, &stru_101820920);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_10013E574( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v14,  v15,  v16,  v17,  v18);
  }

  sub_100042D70();
}

void sub_10122E2C0()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assigning a negative value to an unsigned type is probably not what you intended, eve nt:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assigning a negative value to an unsigned type is probably not what you intended",  "{msg%{public}.0s:Assigning a negative value to an unsigned type is probably not what you intended, eve nt:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assigning a negative value to an unsigned type is probably not what you intended, eve nt:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  244,  "convert");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101820CD0);
  }

void sub_10122E42C()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Trying to assign a value that is bigger than the provided type can hold, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Trying to assign a value that is bigger than the provided type can hold",  "{msg%{public}.0s:Trying to assign a value that is bigger than the provided type can hold, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101820CD0);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Trying to assign a value that is bigger than the provided type can hold, event:%{pu blic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h",  245,  "convert");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101820CD0);
  }

#error "10122E610: call analysis failed (funcsize=72)"
#error "10122E77C: call analysis failed (funcsize=72)"
void sub_10122E870(void *a1, void *a2)
{
  void *v3;
  os_log_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101820EA0);
  }
  int v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    int v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 16LL))(v3);
    int v6 = 136446210;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Error converting database values. %{public}s",  (uint8_t *)&v6,  0xCu);
  }

#error "10122E9C8: call analysis failed (funcsize=72)"
void sub_10122EABC(_BYTE *a1, uint64_t a2)
{
  if (*a1)
  {
  }

#error "10122EB58: call analysis failed (funcsize=72)"
#error "10122ECC4: call analysis failed (funcsize=72)"
#error "10122EE30: call analysis failed (funcsize=72)"
void sub_10122EF24()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821940);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101821940);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationTimeUtils.mm",  34,  "getTimeDeltaDaysAgo");
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_101821940);
  }

#error "10122F108: call analysis failed (funcsize=72)"
#error "10122F274: call analysis failed (funcsize=72)"
#error "10122F3E0: call analysis failed (funcsize=72)"
#error "10122F54C: call analysis failed (funcsize=72)"
#error "10122F6B8: call analysis failed (funcsize=72)"
void sub_10122F7AC()
{
  __assert_rtn( "set_health",  "CLPRavenOutput.pb.h",  5184,  "::CLP::LogEntry::Raven::EstimatorHealth_EstimatorHealthType_IsValid(value)");
}

void sub_10122F7D4()
{
}

void sub_10122F7FC()
{
}

void sub_10122F824()
{
}

void sub_10122F84C()
{
}

void sub_10122F874()
{
}

void sub_10122F89C()
{
}

void sub_10122F8C4()
{
}

void sub_10122F8EC()
{
}

void sub_10122F914()
{
}

void sub_10122F93C()
{
}

void sub_10122F964()
{
}

void sub_10122F98C()
{
}

void sub_10122F9B4()
{
}

void sub_10122F9DC()
{
}

void sub_10122FA04()
{
}

void sub_10122FA2C()
{
}

void sub_10122FA54()
{
}

void sub_10122FA7C()
{
}

void sub_10122FAA4()
{
}

void sub_10122FACC()
{
}

void sub_10122FAF4()
{
}

void sub_10122FB1C()
{
}

void sub_10122FB44()
{
}

void sub_10122FB6C()
{
}

void sub_10122FB94()
{
}

void sub_10122FBBC()
{
}

void sub_10122FBE4()
{
}

void sub_10122FC0C()
{
}

void sub_10122FC34()
{
}

void sub_10122FC5C()
{
}

void sub_10122FC84()
{
}

void sub_10122FCAC()
{
}

void sub_10122FCD4()
{
}

void sub_10122FCFC()
{
}

void sub_10122FD24()
{
}

void sub_10122FD4C()
{
}

void sub_10122FD74()
{
}

void sub_10122FD9C()
{
}

void sub_10122FDC4()
{
}

void sub_10122FDEC()
{
}

void sub_10122FE14()
{
}

void sub_10122FE3C()
{
}

void sub_10122FE64()
{
}

void sub_10122FE8C()
{
}

void sub_10122FEB4()
{
}

void sub_10122FEDC()
{
}

void sub_10122FF04()
{
}

void sub_10122FF2C()
{
}

void sub_10122FF54()
{
}

void sub_10122FF7C()
{
}

void sub_10122FFA4()
{
}

void sub_10122FFCC()
{
}

void sub_10122FFF4()
{
}

void sub_10123001C()
{
}

void sub_101230044()
{
}

void sub_10123006C()
{
}

void sub_101230094()
{
}

void sub_1012300BC()
{
}

void sub_1012300E4()
{
}

void sub_10123010C()
{
}

void sub_101230134()
{
}

void sub_10123015C()
{
}

void sub_101230184()
{
}

void sub_1012301AC()
{
}

void sub_1012301D4()
{
}

void sub_1012301FC()
{
}

void sub_101230224()
{
}

void sub_10123024C()
{
}

void sub_101230274()
{
}

void sub_10123029C()
{
}

void sub_1012302C4()
{
}

void sub_1012302EC()
{
}

void sub_101230314()
{
}

void sub_10123033C()
{
}

void sub_101230364()
{
}

void sub_10123038C()
{
}

void sub_1012303B4()
{
}

void sub_1012303DC()
{
}

void sub_101230404()
{
}

void sub_10123042C()
{
}

void sub_101230454()
{
}

void sub_10123047C()
{
}

void sub_1012304A4()
{
}

void sub_1012304CC()
{
}

void sub_1012304F4()
{
  if (qword_1019344E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100211CC4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10182B200);
      }
    }

    if (sub_100211CE8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10182B200);
      }
    }

    if (sub_100211CD8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm",  675,  "addTurn");
LABEL_11:
    dispatch_once(&qword_1019344E0, &stru_10182B200);
  }

void sub_101230660()
{
  if (qword_1019344E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100211CC4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10182B200);
      }
    }

    if (sub_100211CE8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10182B200);
      }
    }

    if (sub_100211CD8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm",  866,  "updateDistribution");
LABEL_11:
    dispatch_once(&qword_1019344E0, &stru_10182B200);
  }

void sub_1012307CC()
{
  if (qword_1019344E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100211CC4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10182B200);
      }
    }

    if (sub_100211CE8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10182B200);
      }
    }

    if (sub_100211CD8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm",  992,  "addLap");
LABEL_11:
    dispatch_once(&qword_1019344E0, &stru_10182B200);
  }

void sub_101230938()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10182B5F0);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182B5F0);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10182B5F0);
    }
  }

  if (sub_100223780())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
  }

void sub_101230AB8()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182B5F0);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182B5F0);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm",  1359,  "addTile");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10182B5F0);
  }

void sub_101230C48()
{
  if (qword_101934990 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100229234())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Cannot set workout state when overall source state isn't Workout., event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182B748);
      }
    }

    if (sub_100229258())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Cannot set workout state when overall source state isn't Workout.",  "{msg%{public}.0s:Cannot set workout state when overall source state isn't Workout., event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182B748);
      }
    }

    if (sub_100229248())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Cannot set workout state when overall source state isn't Workout., event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamingAwareLocationProviderLocalGP SStateMachine.mm",  35,  "changeWorkoutState");
LABEL_11:
    dispatch_once(&qword_101934990, &stru_10182B748);
  }

void sub_101230DB4()
{
  if (qword_101934990 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100229234())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:This function must only be called in workout scenarios., event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182B748);
      }
    }

    if (sub_100229258())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "This function must only be called in workout scenarios.",  "{msg%{public}.0s:This function must only be called in workout scenarios., event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182B748);
      }
    }

    if (sub_100229248())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:This function must only be called in workout scenarios., event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamingAwareLocationProviderLocalGP SStateMachine.mm",  396,  "setWorkoutStateBasedOnMotionCompatibility");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934990, &stru_10182B748);
  }

void sub_101230F28()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182BA08);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182BA08);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/HealthAssessment/CLHealthAssessmentNotifier.mm",  67,  "-[CLHealthAssessmentNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10182BA08);
  }

void sub_1012310A8(std::__shared_weak_count *a1)
{
  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    unint64_t v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }

void sub_1012310F4()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10182BBB8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10182BBB8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10182BBB8);
  }

void sub_10123126C(void *a1)
{
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_10182BEE0);
  }
  int v1 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_ERROR))
  {
    sub_10023DDA0();
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:MaxMETs,Failed to receive correct MET minutes stats compute time.}",  v3,  0x12u);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10182BEE0);
    }
  }

  int v2 = (os_log_s *)qword_1019345D8;
  if (os_signpost_enabled((os_log_t)qword_1019345D8))
  {
    sub_10023DDA0();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "MaxMETs,Failed to receive correct MET minutes stats compute time.",  "{msg%{public}.0s:MaxMETs,Failed to receive correct MET minutes stats compute time.}",  v3,  0x12u);
  }

  objc_end_catch();
}

void sub_1012313BC()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182C2D8);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182C2D8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm",  64,  "-[CLStreamedLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10182C2D8);
  }

void sub_10123153C()
{
  if (qword_101934990 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100247C9C())
    {
      sub_100247C44();
      sub_100247CB0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Unexpected registration, notification:%{public, location:CLLocationProvider_Type::N otification}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182C2F8);
      }
    }

    if (sub_100247CE8())
    {
      sub_100247C44();
      sub_100247C7C( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Unexpected registration",  "{msg%{public}.0s:Unexpected registration, notification:%{public, location:CLLocationProvider_Type::N otification}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182C2F8);
      }
    }

    if (sub_100247CD8())
    {
      sub_100247C44();
      sub_100247CC4( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Unexpected registration, notification:%{public, location:CLLocationProvider_Type::N otification}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm",  281,  "registerForNotificationInternal");
LABEL_11:
    dispatch_once(&qword_101934990, &stru_10182C2F8);
  }

void sub_1012316B8()
{
  if (qword_101934990 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100247C9C())
    {
      sub_100247C44();
      sub_100247CB0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Unexpected registration, notification:%{public, location:CLLocationProvider_Type::N otification}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182C2F8);
      }
    }

    if (sub_100247CE8())
    {
      sub_100247C44();
      sub_100247C7C( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Unexpected registration",  "{msg%{public}.0s:Unexpected registration, notification:%{public, location:CLLocationProvider_Type::N otification}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182C2F8);
      }
    }

    if (sub_100247CD8())
    {
      sub_100247C44();
      sub_100247CC4( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Unexpected registration, notification:%{public, location:CLLocationProvider_Type::N otification}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm",  326,  "unregisterForNotificationInternal");
LABEL_11:
    dispatch_once(&qword_101934990, &stru_10182C2F8);
  }

void sub_101231834()
{
  if (qword_101934990 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#Multiclient must pass a non-nil target device, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182C2F8);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_101934998))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#Multiclient must pass a non-nil target device",  "{msg%{public}.0s:#Multiclient must pass a non-nil target device, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10182C2F8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#Multiclient must pass a non-nil target device, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm",  591,  "registerForStreamingClientNotifications");
LABEL_11:
    dispatch_once(&qword_101934990, &stru_10182C2F8);
  }

void sub_1012319B4()
{
  __assert_rtn("-[ALMotionState writeTo:]", "ALMotionState.m", 157, "self->_motion != nil");
}

#error "101231A54: call analysis failed (funcsize=72)"
#error "101231BC0: call analysis failed (funcsize=72)"
#error "101231D2C: call analysis failed (funcsize=72)"
#error "101231E98: call analysis failed (funcsize=72)"
#error "101232004: call analysis failed (funcsize=72)"
void sub_1012320F8()
{
  __assert_rtn("-[ALActivityOverrideMsg writeTo:]", "ALActivityOverrideMsg.m", 108, "self->_activity != nil");
}

void sub_101232120()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10027C134())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:attempting to construct policies without controller, event:%{public, location:escap e_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10182D2C0);
      }
    }

    if (sub_10027C158())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "attempting to construct policies without controller",  "{msg%{public}.0s:attempting to construct policies without controller, event:%{public, location:escap e_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10182D2C0);
      }
    }

    if (sub_10027C148())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:attempting to construct policies without controller, event:%{public, location:escap e_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Service/CLHarvesterService.mm",  189,  "-[CLHarvesterService constructPolicies]");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10182D2C0);
  }

void sub_101232294()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10027C134())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:attempting to construct policies without gps monitor, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10182D2C0);
      }
    }

    if (sub_10027C158())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "attempting to construct policies without gps monitor",  "{msg%{public}.0s:attempting to construct policies without gps monitor, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10182D2C0);
      }
    }

    if (sub_10027C148())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:attempting to construct policies without gps monitor, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Service/CLHarvesterService.mm",  190,  "-[CLHarvesterService constructPolicies]");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10182D2C0);
  }

void sub_101232408()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182D748);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182D748);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Odometer/CLOdometerNotifier.mm",  27,  "-[CLOdometerNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10182D748);
  }

void sub_101232590()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10182DC28);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10182DC28);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10182DC28);
  }

void sub_101232700()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182E260);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10182E260);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Utilities/CLCommon.mm",  2218,  "determineClientServiceTypeMasks");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10182E260);
  }

#error "101232944: call analysis failed (funcsize=72)"
#error "101232AB0: call analysis failed (funcsize=72)"
#error "101232C1C: call analysis failed (funcsize=72)"
#error "101232D88: call analysis failed (funcsize=72)"
#error "101232EF4: call analysis failed (funcsize=72)"
void sub_101232FE8()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019344A0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:[CLSPUEclipseInterface] Service required, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_10182E7C0);
      }
    }

    int v1 = (os_log_s *)qword_1019344A8;
    if (os_signpost_enabled((os_log_t)qword_1019344A8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "[CLSPUEclipseInterface] Service required",  "{msg%{public}.0s:[CLSPUEclipseInterface] Service required, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344A0 != -1) {
        dispatch_once(&qword_1019344A0, &stru_10182E7C0);
      }
    }

    int v2 = (os_log_s *)qword_1019344A8;
    if (os_log_type_enabled((os_log_t)qword_1019344A8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:[CLSPUEclipseInterface] Service required, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Eclipse/CLSPUEclipseInterface.mm",  39,  "sendCommand");
LABEL_11:
    dispatch_once(&qword_1019344A0, &stru_10182E7C0);
  }

uint64_t sub_1012331B4(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0LL;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1012331D4()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182F5D0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10182F5D0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/SedentaryTimer/CLSedentaryTimerNotifier.mm",  43,  "-[CLSedentaryTimerNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10182F5D0);
  }

void sub_101233354()
{
}

void sub_10123337C()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10182FAD0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10182FAD0);
      }
    }

    if (sub_1002CAB20())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10182FAD0);
  }

#error "10123355C: call analysis failed (funcsize=70)"
#error "1012336BC: call analysis failed (funcsize=70)"
#error "10123381C: call analysis failed (funcsize=70)"
#error "10123397C: call analysis failed (funcsize=70)"
#error "101233ADC: call analysis failed (funcsize=70)"
#error "101233C3C: call analysis failed (funcsize=70)"
#error "101233D9C: call analysis failed (funcsize=70)"
void sub_101233E88(uint64_t a1)
{
  void *v2;
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

void sub_101233EA0(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

void sub_101233EB8(void **a1)
{
}

#error "101233F3C: call analysis failed (funcsize=70)"
#error "10123409C: call analysis failed (funcsize=70)"
#error "1012341FC: call analysis failed (funcsize=70)"
#error "10123435C: call analysis failed (funcsize=70)"
#error "1012344BC: call analysis failed (funcsize=70)"
#error "10123461C: call analysis failed (funcsize=70)"
void sub_101234708()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018307C8);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018307C8);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLLocationStreamingConnectionManager.mm",  532,  "-[CLLocationStreamingConnectionManager service:account:identifier:didSendWithSuccess:error:]");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_1018307C8);
  }

void sub_1012348D4()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018313D8);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPreferences.mm",  394,  "setFileAttributes");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_1018313D8);
  }

void sub_101234AA0()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018321D8);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentStore.mm",  371,  "setStoreInterval");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_1018321D8);
  }

void sub_101234C6C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832348);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832348);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/HomeKitProvider/CLHomeKitProvider.mm",  82,  "-[CLHomeKitProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101832348);
  }

void sub_101234DE8()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
    {
      sub_10031C624();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:SystemService not found in kSystemServicesUsedInHarvesting, SystemService:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
    }

    int v1 = (os_log_s *)qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      sub_10031C624();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "SystemService not found in kSystemServicesUsedInHarvesting",  "{msg%{public}.0s:SystemService not found in kSystemServicesUsedInHarvesting, SystemService:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101832930);
      }
    }

    int v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      sub_10031C624();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:SystemService not found in kSystemServicesUsedInHarvesting, SystemService:%{public, location:escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Controller/CLHarvestController.mm",  985,  "updateClientAuthorization");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_101832930);
  }

void sub_101234FF0()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CLTelephonyServiceNotifier Assertion failed, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832D18);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CLTelephonyServiceNotifier Assertion failed",  "{msg%{public}.0s:CLTelephonyServiceNotifier Assertion failed, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101832D18);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CLTelephonyServiceNotifier Assertion failed, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm",  249,  "-[CLTelephonyServiceAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101832D18);
  }

void sub_10123516C()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101832DD8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm",  612,  "operator int");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101832DD8);
  }

void sub_1012352E8()
{
}

void sub_101235310()
{
}

#error "10123546C: call analysis failed (funcsize=78)"
void sub_1012354B8(uint64_t a1)
{
  void *v2;
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

void sub_1012354DC()
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:WifiService, dispatchQ, Assertion failed, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v7);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "WifiService, dispatchQ, Assertion failed",  "{msg%{public}.0s:WifiService, dispatchQ, Assertion failed, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v7);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:WifiService, dispatchQ, Assertion failed, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v7);
  }

  sub_100042D70();
}

void sub_101235648()
{
  if (!v1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v9);
    if (*(void *)(v0 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v9);
    if (*(void *)(v0 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v9);
  }

  sub_100042D70();
}

#error "1012358DC: call analysis failed (funcsize=79)"
void sub_101235930()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];
  sub_1003545C4();
  if (!v1) {
    dispatch_once(&qword_101934A70, &stru_1018335B8);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v9);
    if (*(void *)(v0 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v9);
    if (*(void *)(v0 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_1018335B8);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v9);
  }

  sub_100042D70();
}

#error "101235BC4: call analysis failed (funcsize=79)"
#error "101235D4C: call analysis failed (funcsize=79)"
void sub_101235DA0(uint64_t a1)
{
}

void sub_101235DB4(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_101834538);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_101834538);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_101834538);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 112;
  sub_100042D70();
}

void sub_101235F24(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_101834538);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_101834538);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_101834538);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 107;
  sub_100042D70();
}

void sub_101236094()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101834558);
      }
    }

    char v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101834558);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  258,  "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101834558);
  }

void sub_10123624C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101834850);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101834850);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Context/CLMotionState.mm",  56,  "-[CLMotionStateAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101834850);
  }

void sub_1012363D4()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018349C0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018349C0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_1018349C0);
  }

void sub_101236544()
{
}

void sub_10123656C()
{
}

void sub_101236594()
{
}

void sub_1012365BC()
{
}

void sub_1012365E4()
{
}

void sub_10123660C()
{
}

void sub_101236634()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_101834BC0);
  }
  int v0 = (os_log_s *)qword_1019348D8;
  if (sub_1000397B8())
  {
    sub_10023DDA0();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Exception while decoding locationTypes}",  v2,  0x12u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101834BC0);
    }
  }

  int v1 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    sub_10023DDA0();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Exception while decoding locationTypes",  "{msg%{public}.0s:Exception while decoding locationTypes}",  v2,  0x12u);
  }

  objc_end_catch();
}

void sub_101236778()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934478;
    if (sub_1000397B8())
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101834C00);
      }
    }

    int v1 = (os_log_s *)qword_101934478;
    if (os_signpost_enabled((os_log_t)qword_101934478))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101834C00);
      }
    }

    int v2 = (os_log_s *)qword_101934478;
    if (os_log_type_enabled((os_log_t)qword_101934478, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101834C00);
  }

void sub_10123693C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101835130);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101835130);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabase.mm",  23,  "-[CLGyroCalibrationDatabaseLocationdAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101835130);
  }

void sub_101236AC4(std::__shared_weak_count *a1)
{
  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    unint64_t v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }

void sub_101236B18(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100399740())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101835468);
      }
    }

    if (sub_100399764())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v7,  v8,  v9,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v10,  v11,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101835468);
      }
    }

    if (sub_100399754())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTransitMacTile.mm",  57,  "traverseTileFile");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101835468);
  }

void sub_101236C84(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100399740())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101835468);
      }
    }

    if (sub_100399764())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v7,  v8,  v9,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v10,  v11,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101835468);
      }
    }

    if (sub_100399754())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTransitMacTile.mm",  131,  "extractTransitMacAddresses");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101835468);
  }

#error "101236E70: call analysis failed (funcsize=75)"
#error "101236FE4: call analysis failed (funcsize=75)"
#error "101237158: call analysis failed (funcsize=75)"
#error "101237374: call analysis failed (funcsize=75)"
void sub_1012373C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101835C50);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Destination name should not be NULL, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v7);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
  }

  if (sub_1003C49B4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Destination name should not be NULL",  "{msg%{public}.0s:Destination name should not be NULL, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v7);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Destination name should not be NULL, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v7);
  }

  sub_100042D70();
}

#error "101237650: call analysis failed (funcsize=76)"
#error "1012377D4: call analysis failed (funcsize=77)"
void sub_101237820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101835C70);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  v7);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101835C70);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  v7);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101835C70);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{private , location:escape_only}s}",  v7);
  }

  sub_100042D70();
}

#error "101237A00: call analysis failed (funcsize=75)"
#error "101237B74: call analysis failed (funcsize=75)"
#error "101237CE8: call analysis failed (funcsize=75)"
#error "101237E54: call analysis failed (funcsize=72)"
#error "101237FBC: call analysis failed (funcsize=72)"
#error "101238124: call analysis failed (funcsize=72)"
#error "10123828C: call analysis failed (funcsize=72)"
void sub_10123837C()
{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101836C20);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101836C20);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101836C20);
    }
  }

  if (sub_100223780())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
  }

#error "10123857C: call analysis failed (funcsize=72)"
void sub_10123866C()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101836EC0);
  }
  int v0 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#luLive locationData serilization should only give 1 location, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101836EC0);
    }
  }

  int v1 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#luLive locationData serilization should only give 1 location",  "{msg%{public}.0s:#luLive locationData serilization should only give 1 location, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101836EC0);
    }
  }

  int v2 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#luLive locationData serilization should only give 1 location, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

#error "1012388A8: call analysis failed (funcsize=72)"
#error "101238A14: call analysis failed (funcsize=72)"
#error "101238B80: call analysis failed (funcsize=72)"
#error "101238CEC: call analysis failed (funcsize=72)"
#error "101238E58: call analysis failed (funcsize=72)"
void sub_101238F4C()
{
  __assert_rtn( "-[CLCompanionSyncInterestZone writeTo:]",  "CLCompanionSyncInterestZone.m",  323,  "nil != self->_zoneIdentifier");
}

void sub_101238F74()
{
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101837958);
  }
  int v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101837958);
    }
  }

  int v1 = (os_log_s *)qword_101934A78;
  if (os_signpost_enabled((os_log_t)qword_101934A78))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101837958);
    }
  }

  int v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
  }

#error "1012391B8: call analysis failed (funcsize=75)"
#error "101239324: call analysis failed (funcsize=73)"
#error "101239498: call analysis failed (funcsize=76)"
#error "101239614: call analysis failed (funcsize=75)"
void sub_101239708()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101838BE0);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101838BE0);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/LocationController/CLLocationController.mm",  159,  "-[CLLocationControllerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101838BE0);
  }

void sub_1012398D4(void *a1, void *a2, void *__p)
{
  if ((void *)*a1 == a2)
  {
    uint64_t v4 = 4LL;
    goto LABEL_5;
  }

  if (*a1)
  {
    uint64_t v4 = 5LL;
    a2 = (void *)*a1;
LABEL_5:
    (*(void (**)(void *))(*a2 + 8 * v4))(a2);
  }

  operator delete(__p);
}

void sub_101239928()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101839320);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101839320);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiLocationProvider.mm",  31,  "-[CLWifiLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101839320);
  }

void sub_101239AA8(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:should not send out an empty container of batched wifi locations, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v7,  v8,  v9,  "should not send out an empty container of batched wifi locations",  "{msg%{public}.0s:should not send out an empty container of batched wifi locations, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v10,  v11,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101839340);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:should not send out an empty container of batched wifi locations, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiLocationProvider.mm",  963,  "handleLogicOutput");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101839340);
  }

#error "101239CB0: call analysis failed (funcsize=80)"
#error "101239E28: call analysis failed (funcsize=71)"
#error "101239F8C: call analysis failed (funcsize=71)"
#error "10123A0F0: call analysis failed (funcsize=71)"
#error "10123A254: call analysis failed (funcsize=71)"
void sub_10123A340()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101839A18);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101839A18);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm",  160,  "-[CLMotionStateMediatorAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101839A18);
  }

void sub_10123A4C8()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100478F50())
    {
      sub_100042C80();
      sub_100042D48( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018399D8);
      }
    }

    if (sub_100478F74())
    {
      sub_100042C80();
      sub_100042CD0( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Wiring bug, should not be subscribed to ",  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018399D8);
      }
    }

    if (sub_100478F64())
    {
      sub_100042C80();
      sub_100042D5C( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm",  2134,  "onDaemonStatus");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_1018399D8);
  }

void sub_10123A644()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100478F50())
    {
      sub_100042C80();
      sub_100042D48( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018399D8);
      }
    }

    if (sub_100478F74())
    {
      sub_100042C80();
      sub_100042CD0( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Wiring bug, should not be subscribed to ",  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_1018399D8);
      }
    }

    if (sub_100478F64())
    {
      sub_100042C80();
      sub_100042D5C( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm",  2235,  "onMotionStateObserverNotification");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_1018399D8);
  }

void sub_10123A7C0()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10183B0C0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10183B0C0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10183B0C0);
  }

void sub_10123A930()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10183BEE8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10183BEE8);
      }
    }

    if (sub_1002CAB20())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10183BEE8);
  }

void sub_10123AA9C()
{
  if (!v0) {
    dispatch_once(&qword_101934A20, &stru_10183C108);
  }
  if (sub_10049C830())
  {
    sub_100008D64();
    sub_10013E560( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:failure to bind row_id, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18);
    sub_10049C844();
    if (!v0) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
  }

  if (sub_1003C49B4())
  {
    sub_100008D64();
    sub_10013E540( (void *)&_mh_execute_header,  v7,  v8,  v9,  "failure to bind row_id",  "{msg%{public}.0s:failure to bind row_id, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v10,  v11,  v18);
    sub_10049C844();
    if (!v0) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
  }

  if (sub_10049C850())
  {
    sub_100008D64();
    sub_10013E574( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:failure to bind row_id, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18);
  }

  sub_100042D70();
}

void sub_10123ABE0()
{
  if (!v0) {
    dispatch_once(&qword_101934A20, &stru_10183C108);
  }
  if (sub_10049C830())
  {
    sub_100008D64();
    sub_10013E560( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:failure to bind, event:%{public, location:escape_only}s, condition:%{private, loc ation:escape_only}s}",  v3,  v4,  v5,  v6,  v18);
    sub_10049C844();
    if (!v0) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
  }

  if (sub_1003C49B4())
  {
    sub_100008D64();
    sub_10013E540( (void *)&_mh_execute_header,  v7,  v8,  v9,  "failure to bind",  "{msg%{public}.0s:failure to bind, event:%{public, location:escape_only}s, condition:%{private, loc ation:escape_only}s}",  v10,  v11,  v18);
    sub_10049C844();
    if (!v0) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
  }

  if (sub_10049C850())
  {
    sub_100008D64();
    sub_10013E574( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:failure to bind, event:%{public, location:escape_only}s, condition:%{private, loc ation:escape_only}s}",  v14,  v15,  v16,  v17,  v18);
  }

  sub_100042D70();
}

void sub_10123AD24()
{
  if (!v0) {
    dispatch_once(&qword_101934A20, &stru_10183C108);
  }
  if (sub_10049C830())
  {
    sub_100008D64();
    sub_10013E560( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:failure to bind mac when deleting by mac!, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18);
    sub_10049C844();
    if (!v0) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
  }

  if (sub_1003C49B4())
  {
    sub_100008D64();
    sub_10013E540( (void *)&_mh_execute_header,  v7,  v8,  v9,  "failure to bind mac when deleting by mac!",  "{msg%{public}.0s:failure to bind mac when deleting by mac!, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v10,  v11,  v18);
    sub_10049C844();
    if (!v0) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
  }

  if (sub_10049C850())
  {
    sub_100008D64();
    sub_10013E574( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:failure to bind mac when deleting by mac!, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18);
  }

  sub_100042D70();
}

#error "10123AEE8: call analysis failed (funcsize=76)"
void sub_10123AFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10183C380);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v7);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10183C380);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v7);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10183C380);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v7);
  }

  sub_100042D70();
}

#error "10123B1B8: call analysis failed (funcsize=73)"
#error "10123B324: call analysis failed (funcsize=73)"
#error "10123B490: call analysis failed (funcsize=73)"
#error "10123B5FC: call analysis failed (funcsize=73)"
void sub_10123B6F0(_DWORD *a1)
{
  os_log_s *v2;
  os_log_s *v3;
  os_log_s *v4;
  uint8_t v5[40];
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10183C3C0);
  }
  uint64_t v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
  {
    sub_100042C54();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Nearby request complete without keys for the tag, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v5,  0x26u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10183C3C0);
    }
  }

  uint64_t v3 = (os_log_s *)qword_101934878;
  if (os_signpost_enabled((os_log_t)qword_101934878))
  {
    sub_100042C54();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Nearby request complete without keys for the tag",  "{msg%{public}.0s:Nearby request complete without keys for the tag, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v5,  0x26u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10183C3C0);
    }
  }

  uint64_t v4 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    sub_100042C54();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Nearby request complete without keys for the tag, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v5,  0x26u);
  }

  *a1 = 2253;
  sub_100042D70();
}

void sub_10123B8AC()
{
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_10183C400);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Partial numer of ALS aps saved, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v7);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183C400);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Partial numer of ALS aps saved",  "{msg%{public}.0s:Partial numer of ALS aps saved, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v7);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183C400);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Partial numer of ALS aps saved, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v7);
  }

  sub_100042D70();
}

#error "10123BA98: call analysis failed (funcsize=76)"
void sub_10123BB90()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019345C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:[AccessoryProximity] Incorrect optical and temperature size., event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10183C728);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019345C8;
    if (os_signpost_enabled((os_log_t)qword_1019345C8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "[AccessoryProximity] Incorrect optical and temperature size.",  "{msg%{public}.0s:[AccessoryProximity] Incorrect optical and temperature size., event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019345C0 != -1) {
        dispatch_once(&qword_1019345C0, &stru_10183C728);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019345C8;
    if (os_log_type_enabled((os_log_t)qword_1019345C8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:[AccessoryProximity] Incorrect optical and temperature size., event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLAccessoryProximity.mm",  178,  "onEventData");
LABEL_11:
    dispatch_once(&qword_1019345C0, &stru_10183C728);
  }

void sub_10123BD5C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10183CAB0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10183CAB0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Accessory/CLAccessoryLocationProvider.mm",  59,  "-[CLAccessoryLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10183CAB0);
  }

void sub_10123BF28()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10183D568);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10183D568);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLFilteredLocationController.mm",  52,  "-[CLFilteredLocationControllerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10183D568);
  }

void sub_10123C0F4(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10183D680);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10183D680);
      }
    }

    uint64_t v3 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLRegionPreloadManifestTile.mm",  56,  "traverseTileFile");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10183D680);
  }

void sub_10123C2C0()
{
}

void sub_10123C2E8()
{
}

void sub_10123C310()
{
}

void sub_10123C338()
{
}

void sub_10123C360()
{
}

void sub_10123C388()
{
}

void sub_10123C3B0()
{
  if (qword_101934560 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Service required, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_10183E4C0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934568;
    if (os_signpost_enabled((os_log_t)qword_101934568))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Service required",  "{msg%{public}.0s:Service required, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_10183E4C0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Service required, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Utilities/CLDeviceMotionControl.mm",  84,  "sendCommand");
LABEL_11:
    dispatch_once(&qword_101934560, &stru_10183E4C0);
  }

void sub_10123C57C()
{
  if (qword_101934830 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CLC: Enable CLRouteListener when already enabled, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10183E788);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934838;
    if (os_signpost_enabled((os_log_t)qword_101934838))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLC: Enable CLRouteListener when already enabled",  "{msg%{public}.0s:CLC: Enable CLRouteListener when already enabled, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10183E788);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLC: Enable CLRouteListener when already enabled, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Transit/CLRouteListener.mm",  84,  "-[CLRouteListener enable]");
LABEL_11:
    dispatch_once(&qword_101934830, &stru_10183E788);
  }

void sub_10123C748()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      sub_1005315D8();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Usage of incorrect column to update timestamp, column:%{private, location:escape_on ly}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10183F120);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934868;
    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      sub_1005315D8();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Usage of incorrect column to update timestamp",  "{msg%{public}.0s:Usage of incorrect column to update timestamp, column:%{private, location:escape_on ly}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10183F120);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      sub_1005315D8();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Usage of incorrect column to update timestamp, column:%{private, location:escape_on ly}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLWifiTileHeaderDatabase.mm",  293,  "updateTimestampByTileXY");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_10183F120);
  }

void sub_10123C950()
{
}

#error "10123CA7C: call analysis failed (funcsize=73)"
#error "10123CBE8: call analysis failed (funcsize=73)"
void sub_10123CC34()
{
  os_log_s *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  os_log_s *v8;
  uint8_t v9[56];
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  uint64_t v0 = (os_log_s *)qword_101934988;
  if (sub_1000F9274((os_log_s *)qword_101934988))
  {
    sub_10058AD6C();
    sub_1000C84CC();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Connection to #CoreLocationAgent already exists, User:%{public, location:escape_only} s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  0x30u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058AD80())
  {
    sub_10058AD6C();
    sub_1000C84CC();
    sub_10058AD8C();
    _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x30u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  uint64_t v8 = (os_log_s *)qword_101934988;
  if (sub_100042D04((os_log_s *)qword_101934988))
  {
    sub_10058AD6C();
    sub_1000C84CC();
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Connection to #CoreLocationAgent already exists, User:%{public, location:escape_only} s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  0x30u);
  }

#error "10123CF08: call analysis failed (funcsize=74)"
#error "10123D07C: call analysis failed (funcsize=74)"
#error "10123D1F0: call analysis failed (funcsize=74)"
#error "10123D364: call analysis failed (funcsize=74)"
#error "10123D4D8: call analysis failed (funcsize=73)"
#error "10123D644: call analysis failed (funcsize=74)"
void sub_10123D698( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_10058AD44();
  if (!v27) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  if (sub_10058ACD0())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:Path must not be the empty string here, event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACF4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "Path must not be the empty string here",  "{msg%{public}.0s:Path must not be the empty string here, event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACE4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:Path must not be the empty string here, event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10123D7E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_10058AD44();
  if (!v27) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  if (sub_10058ACD0())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:dynamic_pointer_cast must never fail in this context, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACF4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "dynamic_pointer_cast must never fail in this context",  "{msg%{public}.0s:dynamic_pointer_cast must never fail in this context, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACE4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:dynamic_pointer_cast must never fail in this context, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "10123DA48: call analysis failed (funcsize=74)"
void sub_10123DA9C()
{
  os_log_s *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  os_log_s *v8;
  uint8_t buf[72];
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934988;
    if (sub_1000F9274((os_log_s *)qword_101934988))
    {
      sub_10058ADA4();
      sub_10058AD00();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:destroying disconnected #dic - not found, ClientKey:%{public, location:escape_only} @, this:%{public}p, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
    }

    if (sub_10058AD80())
    {
      sub_10058ADA4();
      sub_10058AD00();
      sub_10058AD8C();
      _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x3Au);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
    }

    uint64_t v8 = (os_log_s *)qword_101934988;
    if (sub_100042D04((os_log_s *)qword_101934988))
    {
      sub_10058ADA4();
      sub_10058AD00();
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:destroying disconnected #dic - not found, ClientKey:%{public, location:escape_only} @, this:%{public}p, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm",  3520,  "destroyDaemonIdentifiableClient");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }

void sub_10123DC68()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934988;
    if (sub_1000F9274((os_log_s *)qword_101934988))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor unable to create storage token, error:%{public}d, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
    }

    if (sub_10058AD80())
    {
      sub_100042C1C();
      sub_10058AD8C();
      _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x2Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
    }

    uint64_t v8 = (os_log_s *)qword_101934988;
    if (sub_100042D04((os_log_s *)qword_101934988))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#monitor unable to create storage token, error:%{public}d, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm",  6231,  "createStorageTokenOrGetIfExists");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }

#error "10123DF40: call analysis failed (funcsize=74)"
void sub_10123DF94( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_10058AD44();
  if (!v27) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  if (sub_10058ACD0())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:info.plist zone registration, zone-to-reconcile should be identical to registered zone,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACF4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "info.plist zone registration, zone-to-reconcile should be identical to registered zone",  "{msg%{public}.0s:info.plist zone registration, zone-to-reconcile should be identical to registered zone,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACE4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:info.plist zone registration, zone-to-reconcile should be identical to registered zone,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10123E0DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_10058AD44();
  if (!v27) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  if (sub_10058ACD0())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:info.plist zone registration, zone-to-reconcile should exists in clients.plist, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACF4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "info.plist zone registration, zone-to-reconcile should exists in clients.plist",  "{msg%{public}.0s:info.plist zone registration, zone-to-reconcile should exists in clients.plist, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2432) != -1LL) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
  }

  if (sub_10058ACE4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:info.plist zone registration, zone-to-reconcile should exists in clients.plist, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "10123E350: call analysis failed (funcsize=76)"
#error "10123E4D0: call analysis failed (funcsize=78)"
#error "10123E63C: call analysis failed (funcsize=74)"
void sub_10123E690( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  sub_100042DD4();
  a23 = v24;
  a24 = v25;
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101840220);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v26,  v27,  "{msg%{public}.0s:destruction without invalidation, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  &a9);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101840220);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v28,  v29,  v30,  "destruction without invalidation",  "{msg%{public}.0s:destruction without invalidation, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  &a9);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101840220);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v31,  v32,  "{msg%{public}.0s:destruction without invalidation, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10123E7F4()
{
  __assert_rtn( "onStatusBarNotification",  "CLClientManager.mm",  5469,  "data.entity == CLStatusBarIconManager_Type::kEntityClassSystemService");
}

void sub_10123E81C()
{
  __assert_rtn( "onStatusBarNotification",  "CLClientManager.mm",  5473,  "data.entity == CLStatusBarIconManager_Type::kEntityClassFindMyiPhone");
}

void sub_10123E844()
{
  __assert_rtn( "onStatusBarNotification",  "CLClientManager.mm",  5477,  "data.entity == CLStatusBarIconManager_Type::kEntityClassEmergencyService");
}

void sub_10123E86C()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018405D0);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018405D0);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm",  227,  "startThreads");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934570, &stru_1018405D0);
  }

void sub_10123E9E0()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018405D0);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018405D0);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm",  246,  "stopThreads");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934570, &stru_1018405D0);
  }

void sub_10123EB54()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018405D0);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018405D0);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm",  76,  "setLoad");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934570, &stru_1018405D0);
  }

#error "10123ED40: call analysis failed (funcsize=72)"
#error "10123EEAC: call analysis failed (funcsize=72)"
#error "10123F018: call analysis failed (funcsize=72)"
#error "10123F184: call analysis failed (funcsize=72)"
#error "10123F2F0: call analysis failed (funcsize=72)"
void sub_10123F3E4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058ACD0())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#slv programmer error.  Only call this function after setting client interest to PendingD elete, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101840D40);
      }
    }

    if (sub_10058ACF4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#slv programmer error.  Only call this function after setting client interest to PendingDelete",  "{msg%{public}.0s:#slv programmer error.  Only call this function after setting client interest to PendingD elete, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101840D40);
      }
    }

    if (sub_10058ACE4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#slv programmer error.  Only call this function after setting client interest to PendingD elete, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantVisitManager.mm",  555,  "-[CLSignificantVisitManager actOnPendingDeleteForClientKey:]");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101840D40);
  }

void sub_10123F550()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058ACD0())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#slv Visit must be non-nil, event:%{public, location:escape_only}s, condition:% {private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101840D40);
      }
    }

    if (sub_10058ACF4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#slv Visit must be non-nil",  "{msg%{public}.0s:#slv Visit must be non-nil, event:%{public, location:escape_only}s, condition:% {private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101840D40);
      }
    }

    if (sub_10058ACE4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#slv Visit must be non-nil, event:%{public, location:escape_only}s, condition:% {private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantVisitManager.mm",  598,  "-[CLSignificantVisitManager notifyClientsOfVisit:]");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101840D40);
  }

void sub_10123F6BC()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018414C0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018414C0);
      }
    }

    if (sub_1002CAB20())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_1018414C0);
  }

void sub_10123F828()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor unknown variant of condition is received, event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018415E8);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor unknown variant of condition is received",  "{msg%{public}.0s:#monitor unknown variant of condition is received, event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018415E8);
      }
    }

    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#monitor unknown variant of condition is received, event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemon MonitoringRecord.mm",  142,  "-[CLDaemonMonitoringRecord setupDaemonPartOfConditionWithAuthContext:clientKeyPath:universe:identifier:stopMonitor ing:callbackHandler:]");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_1018415E8);
  }

#error "10123FA6C: call analysis failed (funcsize=72)"
#error "10123FBD8: call analysis failed (funcsize=72)"
#error "10123FD44: call analysis failed (funcsize=72)"
#error "10123FEB0: call analysis failed (funcsize=72)"
#error "10124001C: call analysis failed (funcsize=72)"
void sub_101240110()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101841C98);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101841C98);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/BacklightState/CLBacklightStateNotifier.mm",  30,  "-[CLBacklightStateNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101841C98);
  }

void sub_101240290()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101842368);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101842368);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/WatchOrientationSettings/CLWatchOrientationSettingsNotifier.mm",  34,  "-[CLWatchOrientationSettingsNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101842368);
  }

void sub_101240418()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018424D8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018424D8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_1018424D8);
  }

void sub_101240588(void **a1, void **a2, void **a3)
{
  int v6 = *a1;
  *a1 = 0LL;
  if (v6) {
    operator delete(v6);
  }
  int v7 = *a2;
  *a2 = 0LL;
  if (v7) {
    operator delete(v7);
  }
  int v8 = *a3;
  *a3 = 0LL;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1012405E4()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101842D30);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101842D30);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLCorrectiveCompensatedLocationProvider.mm",  51,  "-[CLCorrectiveCompensatedLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101842D30);
  }

void sub_101240764()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#cclp notifying clients when CompensationTimer is scheduled. Not Allowed., event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101842D50);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.",  "{msg%{public}.0s:#cclp notifying clients when CompensationTimer is scheduled. Not Allowed., event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101842D50);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#cclp notifying clients when CompensationTimer is scheduled. Not Allowed., event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLCorrectiveCompensatedLocationProvider.mm",  359,  "notifyClientsWithData");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101842D50);
  }

#error "101240964: call analysis failed (funcsize=75)"
#error "101240AD8: call analysis failed (funcsize=75)"
#error "101240C4C: call analysis failed (funcsize=75)"
void sub_101240D40()
{
  __assert_rtn( "set_geofence_control_event",  "CLPPrivateDataCapture.pb.h",  2842,  "::CLP::LogEntry::RegionMonitoring::RegionMonitoringControl_IsValid(value)");
}

void sub_101240D68()
{
  __assert_rtn("down_cast", "common.h", 348, "f == NULL || dynamic_cast<To>(f) != NULL");
}

uint64_t sub_101240D90(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  int v7 = *a1;
  if (v7)
  {
    *(void *)(a4 + 104) = v7;
    operator delete(v7);
  }

  int v8 = *a2;
  if (*a2)
  {
    *(void *)(a4 + 8sub_1011C5518(qword_1019A41A0, 0) = v8;
    operator delete(v8);
  }

  return sub_10000AE14(a3);
}

void sub_101240DE0()
{
  if (qword_101934510 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101843B48);
      }
    }

    int v1 = (os_log_s *)qword_101934518;
    if (os_signpost_enabled((os_log_t)qword_101934518))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101843B48);
      }
    }

    int v2 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/StrideCalibration/CMStrideCalibrator.mm",  301,  "-[CMStrideCalibrator attemptForcedLocation]");
LABEL_11:
    dispatch_once(&qword_101934510, &stru_101843B48);
  }

void sub_101240FAC()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100603DB8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:tile id doesn't exist in tiles map, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101843BF8);
      }
    }

    if (sub_100603DDC())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "tile id doesn't exist in tiles map",  "{msg%{public}.0s:tile id doesn't exist in tiles map, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101843BF8);
      }
    }

    if (sub_100603DCC())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:tile id doesn't exist in tiles map, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesMap.mm",  97,  "unprotectedErase");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101843BF8);
  }

void sub_101241120()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100603DB8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:tile id doesn't exist in tiles map, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101843BF8);
      }
    }

    if (sub_100603DDC())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "tile id doesn't exist in tiles map",  "{msg%{public}.0s:tile id doesn't exist in tiles map, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101843BF8);
      }
    }

    if (sub_100603DCC())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:tile id doesn't exist in tiles map, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesMap.mm",  112,  "unprotectedAdd");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101843BF8);
  }

void sub_101241294()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101843EF0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101843EF0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FitnessTracking/CLFitnessTrackingNotifier.mm",  36,  "-[CLFitnessTrackingNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101843EF0);
  }

void sub_10124141C()
{
}

void sub_101241444()
{
}

void sub_10124146C()
{
}

void sub_101241494()
{
}

void sub_1012414BC()
{
}

void sub_1012414E4()
{
}

void sub_10124150C()
{
}

void sub_101241534()
{
}

void sub_10124155C()
{
}

void sub_101241584()
{
}

void sub_1012415AC()
{
}

void sub_1012415D4()
{
}

void sub_1012415FC()
{
}

void sub_101241624()
{
}

void sub_10124164C()
{
}

void sub_101241674()
{
}

void sub_10124169C()
{
}

void sub_1012416C4()
{
}

void sub_1012416EC()
{
}

void sub_101241714()
{
}

void sub_10124173C()
{
}

void sub_101241764()
{
}

void sub_10124178C()
{
}

void sub_1012417B4()
{
}

void sub_1012417DC()
{
}

void sub_101241804()
{
}

void sub_10124182C()
{
}

void sub_101241854()
{
}

void sub_10124187C()
{
}

void sub_1012418A4()
{
}

void sub_1012418CC()
{
}

void sub_1012418F4()
{
}

void sub_10124191C()
{
}

void sub_101241944()
{
}

void sub_10124196C()
{
}

void sub_101241994()
{
}

void sub_1012419BC()
{
}

void sub_1012419E4()
{
}

void sub_101241A0C()
{
}

void sub_101241A34()
{
}

void sub_101241A5C()
{
}

void sub_101241A84()
{
}

void sub_101241AAC()
{
}

void sub_101241AD4()
{
}

void sub_101241AFC()
{
}

void sub_101241B24()
{
}

void sub_101241B4C()
{
}

void sub_101241B74()
{
}

void sub_101241B9C()
{
}

void sub_101241BC4()
{
}

void sub_101241BEC()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101847D20);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101847D20);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceManager.mm",  51,  "-[CLFenceManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101847D20);
  }

void sub_101241D80()
{
  if (qword_101934870 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10066A324())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Attempting to send fence transition, but state unknown, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
    }

    if (sub_10066A358())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Attempting to send fence transition, but state unknown",  "{msg%{public}.0s:Attempting to send fence transition, but state unknown, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101847D40);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Attempting to send fence transition, but state unknown, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceManager.mm",  911,  "notifyFenceEntryExitForAuthorizedFence");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934870, &stru_101847D40);
  }

void sub_101241F04()
{
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101847D40);
  }
  if (sub_10066A324())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:onAuthorizationNotification fence without key, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v7);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
  }

  if (sub_10066A358())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "onAuthorizationNotification fence without key",  "{msg%{public}.0s:onAuthorizationNotification fence without key, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v7);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101847D40);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:onAuthorizationNotification fence without key, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v7);
  }

void sub_101242078()
{
  if (v1 < 0) {
    sub_10066A348();
  }
  else {
    sub_10066A340();
  }
}

#error "101242144: call analysis failed (funcsize=76)"
#error "1012422C0: call analysis failed (funcsize=76)"
#error "10124243C: call analysis failed (funcsize=75)"
void sub_101242530()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101848778);
  }
  uint64_t v0 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Input expected to contain all APs with valid locations, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
  }

  int v1 = (os_log_s *)qword_101934868;
  if (os_signpost_enabled((os_log_t)qword_101934868))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Input expected to contain all APs with valid locations",  "{msg%{public}.0s:Input expected to contain all APs with valid locations, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101848778);
    }
  }

  uint64_t v2 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Input expected to contain all APs with valid locations, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

#error "101242760: call analysis failed (funcsize=63)"
void sub_101242830()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101848BD8);
  }
  uint64_t v0 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:expecting 1 to 1, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101848BD8);
    }
  }

  int v1 = (os_log_s *)qword_101934838;
  if (os_signpost_enabled((os_log_t)qword_101934838))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "expecting 1 to 1",  "{msg%{public}.0s:expecting 1 to 1, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101848BD8);
    }
  }

  uint64_t v2 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:expecting 1 to 1, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
  }

#error "101242A6C: call analysis failed (funcsize=72)"
#error "101242BD8: call analysis failed (funcsize=72)"
#error "101242D44: call analysis failed (funcsize=72)"
#error "101242EB0: call analysis failed (funcsize=72)"
#error "10124301C: call analysis failed (funcsize=72)"
void sub_101243110()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100008DAC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101849618);
      }
    }

    if (sub_100008DF0())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101849618);
      }
    }

    if (sub_100008DE0())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm",  52,  "-[CLPersistentTimerInternal initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:]");
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_101849618);
  }

void sub_10124327C()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100008DAC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101849618);
      }
    }

    if (sub_100008DF0())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101849618);
      }
    }

    if (sub_100008DE0())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm",  135,  "-[CLPersistentTimerInternal dealloc]");
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_101849618);
  }

void sub_1012433E8()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100008DAC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101849618);
      }
    }

    if (sub_100008DF0())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101849618);
      }
    }

    if (sub_100008DE0())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm",  131,  "-[CLPersistentTimerInternal dealloc]");
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_101849618);
  }

void sub_101243554()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101849AD8);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101849AD8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/MotionAlarm/CLMotionAlarmNotifier.mm",  53,  "-[CLMotionAlarmNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101849AD8);
  }

void sub_1012436DC()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101849C18);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101849C18);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101849C18);
  }

void sub_10124384C()
{
}

void sub_101243874()
{
}

void sub_10124389C()
{
}

void sub_1012438C4()
{
}

void sub_1012438EC()
{
}

void sub_101243914()
{
}

void sub_10124393C()
{
}

void sub_101243964()
{
}

void sub_10124398C()
{
}

void sub_1012439B4()
{
}

void sub_1012439DC()
{
}

void sub_101243A04()
{
}

void sub_101243A2C()
{
}

void sub_101243A54()
{
}

void sub_101243A7C()
{
}

void sub_101243AA4()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10184AA10);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10184AA10);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Simulation/CLSimulatedLocationProvider.mm",  20,  "-[CLSimulatedLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10184AA10);
  }

void sub_101243C70()
{
  if (qword_1019348D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100014168())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:localization results vector cannot be empty, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v4);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10184AA30);
      }
    }

    if (sub_10001418C())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "localization results vector cannot be empty",  "{msg%{public}.0s:localization results vector cannot be empty, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v4);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10184AA30);
      }
    }

    if (sub_10001417C())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:localization results vector cannot be empty, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  v4);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationPublishHelper.mm",  34,  "biomePublicEventsFromLocalizationResultMeasurement");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348D0, &stru_10184AA30);
  }

void sub_101243E00()
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10184AA30);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:localization results vector cannot be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10184AA30);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "localization results vector cannot be empty",  "{msg%{public}.0s:localization results vector cannot be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10184AA30);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:localization results vector cannot be empty, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
  }

#error "101243FF8: call analysis failed (funcsize=72)"
#error "101244164: call analysis failed (funcsize=72)"
#error "1012442D0: call analysis failed (funcsize=72)"
#error "10124443C: call analysis failed (funcsize=72)"
#error "1012445A8: call analysis failed (funcsize=72)"
void sub_10124469C()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Not running on motion thread!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AFF8);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Not running on motion thread!",  "{msg%{public}.0s:Not running on motion thread!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184AFF8);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Not running on motion thread!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/CLMotionCore.mm",  184,  "assertOnMotionThread");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_10184AFF8);
  }

void sub_101244868()
{
}

#error "101244908: call analysis failed (funcsize=72)"
#error "101244A74: call analysis failed (funcsize=72)"
#error "101244BE0: call analysis failed (funcsize=72)"
#error "101244D4C: call analysis failed (funcsize=72)"
#error "101244EB8: call analysis failed (funcsize=72)"
#error "101245024: call analysis failed (funcsize=72)"
#error "101245190: call analysis failed (funcsize=72)"
#error "1012452FC: call analysis failed (funcsize=72)"
#error "101245468: call analysis failed (funcsize=72)"
#error "1012455D4: call analysis failed (funcsize=72)"
void sub_1012456C8()
{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  uint8_t v5[40];
  if (qword_1019345F0 != -1) {
    dispatch_once(&qword_1019345F0, &stru_10184BF50);
  }
  int v0 = (os_log_s *)qword_1019345F8;
  if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v5,  0x26u);
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_10184BF50);
    }
  }

  if (os_signpost_enabled((os_log_t)qword_1019345F8))
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v5);
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_10184BF50);
    }
  }

  int v4 = (os_log_s *)qword_1019345F8;
  if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v5,  0x26u);
  }

#error "1012458EC: call analysis failed (funcsize=73)"
#error "101245A5C: call analysis failed (funcsize=73)"
#error "101245BCC: call analysis failed (funcsize=73)"
#error "101245D3C: call analysis failed (funcsize=73)"
#error "101245EAC: call analysis failed (funcsize=73)"
void sub_101245FA4()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_10184C2D0);
  }
  int v0 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results., event:%{public, lo cation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10184C2D0);
    }
  }

  uint64_t v1 = (os_log_s *)qword_1019344D8;
  if (os_signpost_enabled((os_log_t)qword_1019344D8))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.",  "{msg%{public}.0s:VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results., event:%{public, lo cation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10184C2D0);
    }
  }

  uint64_t v2 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results., event:%{public, lo cation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_101246168()
{
  if (qword_101934870 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10066A324())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CombinedFence addFence without key, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184C310);
      }
    }

    if (sub_10066A358())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CombinedFence addFence without key",  "{msg%{public}.0s:CombinedFence addFence without key, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10184C310);
      }
    }

    if (sub_10069BAE8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CombinedFence addFence without key, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLCombinedFence.mm",  237,  "addFence");
LABEL_11:
    dispatch_once(&qword_101934870, &stru_10184C310);
  }

void sub_1012462D4(uint64_t a1)
{
}

void sub_101246338()
{
}

void sub_101246360()
{
}

void sub_101246388()
{
}

void sub_1012463B0()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184C7A0);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184C7A0);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLOldWifiScanner.mm",  146,  "onLocationNotification");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10184C7A0);
  }

void sub_10124651C()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184C7A0);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10184C7A0);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLOldWifiScanner.mm",  193,  "onWifiNotification");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10184C7A0);
  }

void sub_101246688()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10184CBF8);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10184CBF8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Catherine/CLCatherineNotifier.mm",  57,  "-[CLCatherineNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10184CBF8);
  }

void sub_101246810()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10184CD68);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10184CD68);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10184CD68);
  }

#error "1012469F4: call analysis failed (funcsize=70)"
#error "101246B54: call analysis failed (funcsize=71)"
#error "101246CBC: call analysis failed (funcsize=71)"
#error "101246E24: call analysis failed (funcsize=71)"
#error "101246F8C: call analysis failed (funcsize=71)"
#error "1012470F4: call analysis failed (funcsize=71)"
#error "10124725C: call analysis failed (funcsize=70)"
#error "1012473C0: call analysis failed (funcsize=74)"
#error "101247530: call analysis failed (funcsize=70)"
#error "101247690: call analysis failed (funcsize=71)"
#error "1012477FC: call analysis failed (funcsize=74)"
#error "10124796C: call analysis failed (funcsize=70)"
#error "101247AD0: call analysis failed (funcsize=74)"
#error "101247C40: call analysis failed (funcsize=70)"
#error "101247DA4: call analysis failed (funcsize=74)"
#error "101247F14: call analysis failed (funcsize=70)"
#error "10124807C: call analysis failed (funcsize=74)"
#error "1012481EC: call analysis failed (funcsize=74)"
#error "10124835C: call analysis failed (funcsize=74)"
#error "1012484CC: call analysis failed (funcsize=74)"
#error "10124863C: call analysis failed (funcsize=74)"
#error "1012487AC: call analysis failed (funcsize=74)"
#error "101248914: call analysis failed (funcsize=70)"
#error "101248A74: call analysis failed (funcsize=70)"
#error "101248BD4: call analysis failed (funcsize=70)"
#error "101248D3C: call analysis failed (funcsize=74)"
#error "101248EAC: call analysis failed (funcsize=74)"
#error "10124901C: call analysis failed (funcsize=74)"
#error "101249184: call analysis failed (funcsize=70)"
void sub_101249270()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#PersistentDictionary invalid to init with nil filename, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10184D0F8);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#PersistentDictionary invalid to init with nil filename",  "{msg%{public}.0s:#PersistentDictionary invalid to init with nil filename, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10184D0F8);
      }
    }

    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#PersistentDictionary invalid to init with nil filename, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentDictionary.mm",  32,  "-[CLPersistentDictionary initWithFilename:withDataProtectionClass:]");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_10184D0F8);
  }

void sub_10124943C()
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184D1B0);
  }
  int v0 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CLCompass7 requires deviceMotionService, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184D1B0);
    }
  }

  int v1 = (os_log_s *)qword_101934588;
  if (os_signpost_enabled((os_log_t)qword_101934588))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLCompass7 requires deviceMotionService",  "{msg%{public}.0s:CLCompass7 requires deviceMotionService, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184D1B0);
    }
  }

  int v2 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLCompass7 requires deviceMotionService, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_101249600()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000F9274((os_log_s *)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10184D518);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10184D518);
      }
    }

    if (sub_100042D04((os_log_s *)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallNotifier.mm",  374,  "-[CLFallNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10184D518);
  }

void sub_101249784(void *a1)
{
  if (!v1) {
    dispatch_once(&qword_1019345D0, &stru_10184D4F8);
  }
  if (sub_100741770())
  {
    sub_10023DDA0();
    sub_100741798( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Failed to read the timestamp.}",  v4,  v5,  v6,  v7,  v13);
    sub_1007417AC();
    if (!v1) {
      dispatch_once(&qword_1019345D0, &stru_10184D4F8);
    }
  }

  if (sub_1000ECE18())
  {
    sub_10023DDA0();
    sub_100741750( (void *)&_mh_execute_header,  v8,  v9,  v10,  "Failed to read the timestamp.",  "{msg%{public}.0s:Failed to read the timestamp.}",  v11,  v12,  v13);
  }

  objc_end_catch();
  sub_100741784();
}

void sub_10124987C()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344B8;
    if (sub_1000F9274((os_log_s *)qword_1019344B8))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184D538);
      }
    }

    char v1 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      sub_100042C80();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Wiring bug, should not be subscribed to ",  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10184D538);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019344B8;
    if (sub_100042D04((os_log_s *)qword_1019344B8))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallNotifier.mm",  3592,  "onWatchOrientationSettingsNotification");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_10184D538);
  }

void sub_101249A50(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    char v1 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Compass should only be reset from locationd, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184DAB0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934588;
    if (os_signpost_enabled((os_log_t)qword_101934588))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Compass should only be reset from locationd",  "{msg%{public}.0s:Compass should only be reset from locationd, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184DAB0);
      }
    }

    uint64_t v3 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Compass should only be reset from locationd, event:%{public, location:escape_only}s , condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/Compass/CLCompass.mm",  401,  "onDaemonStatus");
LABEL_11:
    dispatch_once(&qword_101934580, &stru_10184DAB0);
  }

#error "101249C8C: call analysis failed (funcsize=74)"
#error "101249E00: call analysis failed (funcsize=73)"
#error "101249F70: call analysis failed (funcsize=74)"
#error "10124A0E4: call analysis failed (funcsize=73)"
#error "10124A254: call analysis failed (funcsize=73)"
#error "10124A3C4: call analysis failed (funcsize=73)"
#error "10124A534: call analysis failed (funcsize=73)"
void sub_10124A62C()
{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10184E0C0);
  }
  if (sub_100783FC0())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184E0C0);
    }
  }

  if (sub_100783FE4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10184E0C0);
    }
  }

  if (sub_100783FD4())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
  }

void sub_10124A7B4()
{
  if (qword_101934590 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10078B8F0())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10184E9B8);
      }
    }

    if (sub_10078B914())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10184E9B8);
      }
    }

    if (sub_10078B904())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasFitter.cpp",  26,  "computeLinearFit");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934590, &stru_10184E9B8);
  }

void sub_10124A944()
{
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_10184E9B8);
  }
  if (sub_10078B8F0())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10184E9B8);
    }
  }

  if (sub_10078B914())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10184E9B8);
    }
  }

  if (sub_10078B904())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
  }

void sub_10124AAC4()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Event is nil, event:%{public, location:escape_only}s, condition:%{private, loca tion:escape_only}s}",  buf,  0x26u);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10184EB80);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A48;
    if (os_signpost_enabled((os_log_t)qword_101934A48))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Event is nil",  "{msg%{public}.0s:Event is nil, event:%{public, location:escape_only}s, condition:%{private, loca tion:escape_only}s}",  buf,  0x26u);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10184EB80);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Event is nil, event:%{public, location:escape_only}s, condition:%{private, loca tion:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Duet/CLDuetMonitor.mm",  223,  "-[CLDuetMonitor eventTypeFromNSNumber:]");
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_10184EB80);
  }

void sub_10124AC90()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10079517C())
    {
      sub_1000EFD78();
      sub_100247CB0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Invalid event value, eventType:%{public}ld, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10184EB80);
      }
    }

    if (sub_1007951A0())
    {
      sub_1000EFD78();
      sub_100247C7C( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Invalid event value",  "{msg%{public}.0s:Invalid event value, eventType:%{public}ld, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10184EB80);
      }
    }

    if (sub_100795190())
    {
      sub_1000EFD78();
      sub_100247CC4( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Invalid event value, eventType:%{public}ld, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Duet/CLDuetMonitor.mm",  226,  "-[CLDuetMonitor eventTypeFromNSNumber:]");
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_10184EB80);
  }

void sub_10124AE00()
{
}

void sub_10124AE28(uint64_t a1, os_log_s *a2)
{
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s",  (uint8_t *)&v2,  0xCu);
}

void sub_10124AE9C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101850220);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101850220);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/VDR/CLVDRNotifier.mm",  26,  "-[CLVDRNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101850220);
  }

#error "10124B09C: call analysis failed (funcsize=72)"
#error "10124B208: call analysis failed (funcsize=72)"
#error "10124B374: call analysis failed (funcsize=72)"
#error "10124B4E0: call analysis failed (funcsize=72)"
#error "10124B64C: call analysis failed (funcsize=72)"
void sub_10124B740()
{
  __assert_rtn( "getSize",  "CLBinaryLogTypes.h",  1588,  "false && changing version requires setting kSize accordingly");
}

void sub_10124B768()
{
}

void sub_10124B790()
{
}

void sub_10124B7B8()
{
}

void sub_10124B7E0()
{
}

void sub_10124B808()
{
}

void sub_10124B830()
{
}

void sub_10124B858()
{
}

void sub_10124B880()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor Unable to determine the path to store conditions, event:%{public, location :escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018599D8);
      }
    }

    int v1 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor Unable to determine the path to store conditions",  "{msg%{public}.0s:#monitor Unable to determine the path to store conditions, event:%{public, location :escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018599D8);
      }
    }

    int v2 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#monitor Unable to determine the path to store conditions, event:%{public, location :escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm",  199,  "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_1018599D8);
  }

void sub_10124BA4C()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100827F08())
    {
      sub_100827ED0();
      sub_100247CB0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#monitor Unable to create dir, path:%{public, location:escape_only}@, event:%{p ublic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018599D8);
      }
    }

    if (sub_100827F2C())
    {
      sub_100827ED0();
      sub_100247C7C( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#monitor Unable to create dir",  "{msg%{public}.0s:#monitor Unable to create dir, path:%{public, location:escape_only}@, event:%{p ublic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018599D8);
      }
    }

    if (sub_100827F1C())
    {
      sub_100827ED0();
      sub_100247CC4( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#monitor Unable to create dir, path:%{public, location:escape_only}@, event:%{p ublic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm",  195,  "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_1018599D8);
  }

void sub_10124BBBC()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100827F08())
    {
      sub_100827ED0();
      sub_100247CB0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#monitor Unable to create intermediate dir, path:%{public, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018599D8);
      }
    }

    if (sub_100827F2C())
    {
      sub_100827ED0();
      sub_100247C7C( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#monitor Unable to create intermediate dir",  "{msg%{public}.0s:#monitor Unable to create intermediate dir, path:%{public, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018599D8);
      }
    }

    if (sub_100827F1C())
    {
      sub_100827ED0();
      sub_100247CC4( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#monitor Unable to create intermediate dir, path:%{public, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm",  186,  "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_1018599D8);
  }

#error "10124BDA4: call analysis failed (funcsize=72)"
#error "10124BF10: call analysis failed (funcsize=72)"
#error "10124C07C: call analysis failed (funcsize=72)"
#error "10124C1E8: call analysis failed (funcsize=72)"
#error "10124C354: call analysis failed (funcsize=72)"
#error "10124C5BC: call analysis failed (funcsize=94)"
#error "10124C688: call analysis failed (funcsize=76)"
#error "10124C804: call analysis failed (funcsize=76)"
#error "10124C980: call analysis failed (funcsize=76)"
void sub_10124CA7C()
{
  __assert_rtn( "apply",  "normalize_spheroidal_coordinates.hpp",  312,  "! math::larger(longitude, constants::max_longitude())");
}

void sub_10124CAA4()
{
}

void sub_10124CACC()
{
}

void sub_10124CAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10124CB18()
{
}

void sub_10124CB40()
{
  __assert_rtn("compute_box_corners", "envelope_segment.hpp", 161, "lon1 <= lon2");
}

void sub_10124CB68()
{
}

void sub_10124CB90()
{
}

void sub_10124CBB8()
{
}

void sub_10124CBE0()
{
}

void sub_10124CC08()
{
}

void sub_10124CC30()
{
}

void sub_10124CC58()
{
}

void sub_10124CC80()
{
}

void sub_10124CCA8()
{
}

void sub_10124CCD0()
{
}

void sub_10124CCF8()
{
}

void sub_10124CD20()
{
}

void sub_10124CD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1008656B8("pos", "range.hpp", a3, "i <= boost::size(rng)");
}

void sub_10124CD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10124CD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1008656B0("apply", "segment_ratio.hpp", a3, "lhs.denominator() != Type(0)");
}

void sub_10124CDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1008656A8("apply", "segment_ratio.hpp", a3, "rhs.denominator() != Type(0)");
}

void sub_10124CDD8()
{
  __assert_rtn("apply", "get_turn_info.hpp", 1033, "arrival_p != 0");
}

void sub_10124CE00()
{
  __assert_rtn("get", "pointing_segment.hpp", 101, "s.first != __null");
}

void sub_10124CE28()
{
  __assert_rtn("get", "pointing_segment.hpp", 124, "s.second != __null");
}

void sub_10124CE50()
{
  __assert_rtn("apply", "segment_ratio.hpp", 89, "lhs.denominator() != Type(0)");
}

void sub_10124CE78()
{
  __assert_rtn("apply", "segment_ratio.hpp", 90, "rhs.denominator() != Type(0)");
}

#error "10124CF20: call analysis failed (funcsize=76)"
void sub_10124D01C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;
  sub_1008ACAE0();
  if (!v0) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  if (sub_1000F9274((os_log_s *)qword_101934978))
  {
    sub_1008ACA58();
    sub_1008AC9E8();
    sub_1008ACAA0( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:CLClientManager should always hand back a non-null, valid subscription pointer, isNonNu ll:%{public}hhd, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18);
    sub_1008ACAE0();
    if (!v0) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  if (sub_100827F2C())
  {
    sub_1008ACA58();
    sub_1008AC9E8();
    sub_1008ACA68( (void *)&_mh_execute_header,  v7,  v8,  v9,  "CLClientManager should always hand back a non-null, valid subscription pointer",  "{msg%{public}.0s:CLClientManager should always hand back a non-null, valid subscription pointer, isNonNu ll:%{public}hhd, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v10,  v11,  v18);
    sub_1008ACAE0();
    if (!v0) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  if (sub_100042D04((os_log_s *)qword_101934978))
  {
    sub_1008ACA58();
    sub_1008AC9E8();
    sub_1008ACAB4( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:CLClientManager should always hand back a non-null, valid subscription pointer, isNonNu ll:%{public}hhd, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18);
  }

  sub_1008ACA88();
}

void sub_10124D184( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_1008ACAC8(v27);
  if (!v28) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  if (sub_1008AC988())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v29,  v30,  "{msg%{public}.0s:dynamic_pointer_cast must never fail in this context, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2416) != -1LL) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  if (sub_1008AC9BC())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v31,  v32,  v33,  "dynamic_pointer_cast must never fail in this context",  "{msg%{public}.0s:dynamic_pointer_cast must never fail in this context, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2416) != -1LL) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  if (sub_1008AC99C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v34,  v35,  "{msg%{public}.0s:dynamic_pointer_cast must never fail in this context, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "10124D340: call analysis failed (funcsize=71)"
#error "10124D4A8: call analysis failed (funcsize=71)"
#error "10124D61C: call analysis failed (funcsize=76)"
void sub_10124D718()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;
  sub_1008ACA4C();
  do
    sub_1008AC9AC(v0);
  while (v2);
  if (!v1)
  {
    sub_1008AC9D8();
    sub_1008ACA44();
  }

  sub_10066A340();
}

#error "10124D7B8: call analysis failed (funcsize=71)"
#error "10124D920: call analysis failed (funcsize=71)"
#error "10124DA88: call analysis failed (funcsize=70)"
#error "10124DBE8: call analysis failed (funcsize=70)"
#error "10124DD48: call analysis failed (funcsize=71)"
#error "10124DEB0: call analysis failed (funcsize=71)"
#error "10124E018: call analysis failed (funcsize=71)"
#error "10124E180: call analysis failed (funcsize=71)"
#error "10124E2E8: call analysis failed (funcsize=71)"
#error "10124E450: call analysis failed (funcsize=71)"
#error "10124E5B8: call analysis failed (funcsize=71)"
#error "10124E720: call analysis failed (funcsize=71)"
#error "10124E888: call analysis failed (funcsize=71)"
#error "10124E9F0: call analysis failed (funcsize=71)"
#error "10124EB58: call analysis failed (funcsize=71)"
#error "10124ECC0: call analysis failed (funcsize=71)"
#error "10124EE28: call analysis failed (funcsize=71)"
#error "10124EF90: call analysis failed (funcsize=71)"
#error "10124F0F8: call analysis failed (funcsize=71)"
#error "10124F260: call analysis failed (funcsize=71)"
#error "10124F3C8: call analysis failed (funcsize=71)"
#error "10124F530: call analysis failed (funcsize=71)"
#error "10124F698: call analysis failed (funcsize=71)"
#error "10124F800: call analysis failed (funcsize=71)"
#error "10124F968: call analysis failed (funcsize=71)"
#error "10124FAD0: call analysis failed (funcsize=71)"
#error "10124FC38: call analysis failed (funcsize=71)"
#error "10124FDA0: call analysis failed (funcsize=71)"
#error "10124FF08: call analysis failed (funcsize=71)"
#error "101250070: call analysis failed (funcsize=71)"
#error "1012501D8: call analysis failed (funcsize=71)"
#error "101250340: call analysis failed (funcsize=71)"
#error "1012504A8: call analysis failed (funcsize=71)"
#error "101250610: call analysis failed (funcsize=71)"
#error "101250778: call analysis failed (funcsize=71)"
#error "1012508E0: call analysis failed (funcsize=71)"
#error "101250A48: call analysis failed (funcsize=71)"
#error "101250BB0: call analysis failed (funcsize=71)"
#error "101250D18: call analysis failed (funcsize=71)"
#error "101250E80: call analysis failed (funcsize=71)"
#error "101250FE8: call analysis failed (funcsize=71)"
#error "101251150: call analysis failed (funcsize=71)"
#error "1012512B8: call analysis failed (funcsize=71)"
#error "101251420: call analysis failed (funcsize=71)"
#error "101251588: call analysis failed (funcsize=71)"
#error "1012516F0: call analysis failed (funcsize=71)"
#error "101251858: call analysis failed (funcsize=71)"
#error "1012519C0: call analysis failed (funcsize=71)"
#error "101251B28: call analysis failed (funcsize=71)"
#error "101251C90: call analysis failed (funcsize=71)"
#error "101251DF8: call analysis failed (funcsize=71)"
#error "101251F60: call analysis failed (funcsize=71)"
#error "1012520C8: call analysis failed (funcsize=71)"
#error "101252230: call analysis failed (funcsize=71)"
#error "101252398: call analysis failed (funcsize=71)"
#error "101252500: call analysis failed (funcsize=71)"
#error "101252668: call analysis failed (funcsize=71)"
#error "1012527D0: call analysis failed (funcsize=71)"
#error "101252938: call analysis failed (funcsize=71)"
#error "101252AA0: call analysis failed (funcsize=71)"
void sub_101252B94()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;
  sub_1008AC9C8();
  do
    sub_1008AC9AC(v0);
  while (v2);
  if (!v1)
  {
    sub_10003980C();
    sub_1008ACA20();
  }

  sub_1008ACA28();
  sub_10066A340();
}

#error "101252C38: call analysis failed (funcsize=70)"
#error "101252D98: call analysis failed (funcsize=70)"
void sub_101252E84()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[56];
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Received unknown type. CLAccessoryMonitor should be validating this for us!, type:% {public}d, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
    }

    int v1 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      sub_100042C80();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Received unknown type. CLAccessoryMonitor should be validating this for us!",  "{msg%{public}.0s:Received unknown type. CLAccessoryMonitor should be validating this for us!, type:% {public}d, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
    }

    int v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received unknown type. CLAccessoryMonitor should be validating this for us!, type:% {public}d, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Utilities/CLMotionLogger.mm",  4044,  "onAccessoryMonitorLogEvent");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_10185E910);
  }

void sub_101253068()
{
}

void sub_101253090()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10185FEE0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10185FEE0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/BluetoothService/CLBluetoothService.mm",  25,  "-[CLBluetoothServiceAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10185FEE0);
  }

void sub_101253210(uint64_t a1, void **a2)
{
}

void sub_10125324C()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (sub_1000397B8())
    {
      sub_1008FF9E8();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Invalid assertion level, AssertionLevel:%{public, location:CLClientInUseLeve l}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_1008FF9E8();
      sub_100865630( (void *)&_mh_execute_header,  v1,  v2,  v3,  "#CLIUA Invalid assertion level",  "{msg%{public}.0s:#CLIUA Invalid assertion level, AssertionLevel:%{public, location:CLClientInUseLeve l}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    int v4 = (os_log_s *)qword_101934988;
    if (sub_1000397C4())
    {
      sub_1008FF9E8();
      sub_1008FFA20( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLIUA Invalid assertion level, AssertionLevel:%{public, location:CLClientInUseLeve l}lld, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm",  248,  "markBalancedClientInUseTransition");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101860838);
  }

void sub_1012533F4()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      sub_100827ED0();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Records should not be stored unless they have active assertions, key:%{publi c, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100827ED0();
      sub_100865630( (void *)&_mh_execute_header,  v1,  v2,  v3,  "#CLIUA Records should not be stored unless they have active assertions",  "{msg%{public}.0s:#CLIUA Records should not be stored unless they have active assertions, key:%{publi c, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    int v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100827ED0();
      sub_1008FFA20( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLIUA Records should not be stored unless they have active assertions, key:%{publi c, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm",  177,  "getAssertedInUseLevelForClient");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101860838);
  }

void sub_1012535B0()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (sub_1000397B8())
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#CLIUA Over-release detected, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#CLIUA Over-release detected",  "{msg%{public}.0s:#CLIUA Over-release detected, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101860838);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934988;
    if (sub_1000397C4())
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#CLIUA Over-release detected, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm",  305,  "decrementCountForLevel");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101860838);
  }

void sub_10125376C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101860A38);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101860A38);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/OnBody/CLOnBodyNotifier.mm",  28,  "-[CLOnBodyNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101860A38);
  }

void sub_1012538F4()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101860B60);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101860B60);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101860B60);
  }

void sub_101253A64()
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101860E58);
  }
  int v0 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#monitor should be all cleared for migration but it isn't, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860E58);
    }
  }

  int v1 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#monitor should be all cleared for migration but it isn't",  "{msg%{public}.0s:#monitor should be all cleared for migration but it isn't, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101860E58);
    }
  }

  int v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#monitor should be all cleared for migration but it isn't, event:%{public, location:e scape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_101253C28()
{
  *(void *)(v5 + 3sub_1011C5518(qword_1019A41A0, 0) = "assert";
  *(_WORD *)(v5 + 3_Block_object_dispose(va, 8) = 2081;
  *(void *)(v5 + 4sub_1011C5518(qword_1019A41A0, 0) = "subPath";
  sub_1009227A4( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:#monitor unable to get identifiable name from client key, name:%{public, location:escap e_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
}

uint64_t sub_101253CA4(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  *a1 = 0LL;
  if (v10) {
    sub_100931258(v10);
  }
  uint64_t result = *a2;
  *a2 = 0LL;
  if (result) {
    uint64_t result = sub_100931258(result);
  }
  *(void *)a5 = a3;
  *(_DWORD *)(a5 + _Block_object_dispose(va, 8) = a4;
  return result;
}

void sub_101253D00()
{
  __assert_rtn("-[CLCompanionSyncAuthObject writeTo:]", "CLCompanionSyncAuthObject.m", 347, "nil != self->_clientKey");
}

#error "101253DA8: call analysis failed (funcsize=75)"
#error "101253F1C: call analysis failed (funcsize=76)"
#error "101254098: call analysis failed (funcsize=76)"
#error "101254214: call analysis failed (funcsize=75)"
void sub_101254308()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101861E70);
  }
  uint64_t v0 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:FenceCal: Where did you come from, event:%{public, location:escape_only}s, conditio n:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101861E70);
    }
  }

  uint64_t v1 = (os_log_s *)qword_101934878;
  if (os_signpost_enabled((os_log_t)qword_101934878))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "FenceCal: Where did you come from",  "{msg%{public}.0s:FenceCal: Where did you come from, event:%{public, location:escape_only}s, conditio n:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101861E70);
    }
  }

  uint64_t v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:FenceCal: Where did you come from, event:%{public, location:escape_only}s, conditio n:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_1012544CC()
{
}

void sub_1012544F4()
{
}

void sub_10125451C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101862070);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101862070);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantChangeManager.mm",  60,  "-[CLSignificantChangeManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101862070);
  }

#error "101254768: call analysis failed (funcsize=76)"
#error "1012548D4: call analysis failed (funcsize=70)"
uint64_t sub_1012549C0(uint64_t *a1)
{
  uint64_t result;
  uint64_t result = *a1;
  *a1 = 0LL;
  if (result) {
    return sub_100931258(result);
  }
  return result;
}

#error "101254A58: call analysis failed (funcsize=71)"
#error "101254BC0: call analysis failed (funcsize=71)"
#error "101254D2C: call analysis failed (funcsize=72)"
#error "101254E98: call analysis failed (funcsize=72)"
#error "101255004: call analysis failed (funcsize=72)"
#error "101255170: call analysis failed (funcsize=72)"
#error "1012552DC: call analysis failed (funcsize=72)"
void sub_1012553D0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101863A08);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101863A08);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLMagneticAccessory.mm",  56,  "-[CLMagneticAccessoryAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101863A08);
  }

void sub_101255558()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101863BB8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101863BB8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101863BB8);
  }

void sub_1012556C8()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101863E48);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101863E48);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService_Type.mm",  199,  "toHostedNetwork");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101863E48);
  }

void sub_10125583C()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101863E48);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101863E48);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService_Type.mm",  200,  "toHostedNetwork");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101863E48);
  }

#error "101255A28: call analysis failed (funcsize=72)"
#error "101255B94: call analysis failed (funcsize=72)"
#error "101255D00: call analysis failed (funcsize=72)"
#error "101255E6C: call analysis failed (funcsize=72)"
#error "101255FD8: call analysis failed (funcsize=72)"
#error "101256144: call analysis failed (funcsize=72)"
#error "1012562B0: call analysis failed (funcsize=72)"
#error "10125641C: call analysis failed (funcsize=72)"
#error "101256588: call analysis failed (funcsize=72)"
#error "1012566F4: call analysis failed (funcsize=72)"
#error "101256860: call analysis failed (funcsize=72)"
#error "1012569CC: call analysis failed (funcsize=72)"
#error "101256B38: call analysis failed (funcsize=72)"
#error "101256CA4: call analysis failed (funcsize=72)"
#error "101256E10: call analysis failed (funcsize=72)"
#error "101256F7C: call analysis failed (funcsize=72)"
#error "1012570E8: call analysis failed (funcsize=72)"
#error "101257254: call analysis failed (funcsize=72)"
#error "1012573C0: call analysis failed (funcsize=72)"
#error "10125752C: call analysis failed (funcsize=72)"
void sub_101257620(char a1)
{
  os_log_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  uint8_t v6[40];
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_101934870, &stru_101866538);
  }
  int v1 = (os_log_s *)qword_101934878;
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:addFencesForDataDownload fence without key, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v6);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866538);
    }
  }

  if (os_signpost_enabled((os_log_t)qword_101934878))
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "addFencesForDataDownload fence without key",  "{msg%{public}.0s:addFencesForDataDownload fence without key, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v6);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866538);
    }
  }

  int v5 = (os_log_s *)qword_101934878;
  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:addFencesForDataDownload fence without key, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v6);
  }

#error "1012578EC: call analysis failed (funcsize=81)"
#error "101257A78: call analysis failed (funcsize=82)"
void sub_101257ACC( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  os_log_s *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_1009EBD60();
  if (!v27) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  if (sub_1009EBD4C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD7C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD6C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_1009EBD88(569);
  sub_100042D70();
}

void sub_101257C30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_1009EBD60();
  if (!v27) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  if (sub_1009EBD4C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD7C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD6C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_1009EBD88(551);
  sub_100042D70();
}

void sub_101257D94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_1009EBD60();
  if (!v27) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  if (sub_1009EBD4C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD7C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD6C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_1009EBD88(411);
  sub_100042D70();
}

void sub_101257EF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_1009EBD60();
  if (!v27) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  if (sub_1009EBD4C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD7C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD6C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_1009EBD88(376);
  sub_100042D70();
}

void sub_10125805C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_1009EBD60();
  if (!v27) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  if (sub_1009EBD4C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Auth notification fence without key, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD7C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Auth notification fence without key",  "{msg%{public}.0s:Auth notification fence without key, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD6C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Auth notification fence without key, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  &a9);
  }

  sub_1009EBD88(461);
  sub_100042D70();
}

void sub_1012581C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_1009EBD60();
  if (!v27) {
    dispatch_once(&qword_101934870, &stru_101866908);
  }
  if (sub_1009EBD4C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Auth notification same bundle fence without key, event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD7C())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v24,  v28,  v29,  "Auth notification same bundle fence without key",  "{msg%{public}.0s:Auth notification same bundle fence without key, event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  &a9);
    sub_1009EBD60();
    if (!v27) {
      dispatch_once(&qword_101934870, &stru_101866908);
    }
  }

  if (sub_1009EBD6C())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Auth notification same bundle fence without key, event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_1009EBD88(455);
  sub_100042D70();
}

#error "101258464: call analysis failed (funcsize=81)"
#error "1012585F0: call analysis failed (funcsize=82)"
#error "1012586B8: call analysis failed (funcsize=71)"
#error "101258820: call analysis failed (funcsize=71)"
#error "10125899C: call analysis failed (funcsize=81)"
#error "101258B18: call analysis failed (funcsize=71)"
#error "101258C80: call analysis failed (funcsize=71)"
#error "101258DE8: call analysis failed (funcsize=71)"
#error "101258F50: call analysis failed (funcsize=70)"
void sub_10125903C()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_101934870 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Wifi startMonitoring fence without key, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101867068);
      }
    }

    int v1 = (os_log_s *)qword_101934878;
    if (os_signpost_enabled((os_log_t)qword_101934878))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Wifi startMonitoring fence without key",  "{msg%{public}.0s:Wifi startMonitoring fence without key, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101867068);
      }
    }

    int v2 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Wifi startMonitoring fence without key, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceMonitorWifi.mm",  93,  "addFence");
LABEL_11:
    dispatch_once(&qword_101934870, &stru_101867068);
  }

void sub_101259208(uint64_t a1)
{
}

void sub_101259228()
{
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101867118);
  }
  int v0 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:invalid db pointer, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101867118);
    }
  }

  int v1 = (os_log_s *)off_101934A28;
  if (os_signpost_enabled((os_log_t)off_101934A28))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "invalid db pointer",  "{msg%{public}.0s:invalid db pointer, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101867118);
    }
  }

  int v2 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:invalid db pointer, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_1012593EC()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101867518);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101867518);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Compass/CLGeomagneticModelProvider.mm",  33,  "-[CLGeomagneticModelProviderLocationdAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101867518);
  }

void sub_101259574()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018678E0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018678E0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/SignalEnvironment/CLSignalEnvironmentProvider.mm",  47,  "-[CLSignalEnvironmentProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_1018678E0);
  }

void sub_1012596F4()
{
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101867DE0);
  }
  int v0 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:indeterminate wifi power state, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101867DE0);
    }
  }

  int v1 = (os_log_s *)qword_101934868;
  if (os_signpost_enabled((os_log_t)qword_101934868))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "indeterminate wifi power state",  "{msg%{public}.0s:indeterminate wifi power state, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101867DE0);
    }
  }

  int v2 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:indeterminate wifi power state, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_1012598B8()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101868348);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101868348);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Cell/CLUnifiedCellLocationProvider.mm",  48,  "-[CLUnifiedCellLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101868348);
  }

void sub_101259A84()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101868518);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101868518);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorCalibrationStaticDetector.mm",  60,  "CLSensorCalibrationStaticDetectorMotionCoprocessor");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934570, &stru_101868518);
  }

void sub_101259C04()
{
  if (qword_101934570 != -1) {
    dispatch_once(&qword_101934570, &stru_101868518);
  }
  if (sub_10058B8FC())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v7);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101868518);
    }
  }

  if (sub_10058B920())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v7);
    if (qword_101934570 != -1) {
      dispatch_once(&qword_101934570, &stru_101868518);
    }
  }

  if (sub_10058B910())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v7);
  }

void sub_101259D74()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101868518);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_101868518);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorCalibrationStaticDetector.mm",  255,  "onAccelerometerData");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934570, &stru_101868518);
  }

void sub_101259EF4()
{
  if (qword_1019344E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_1018686D0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019344E8;
    if (os_signpost_enabled((os_log_t)qword_1019344E8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_1018686D0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019344E8;
    if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimLapDetect.cpp",  301,  "prctile");
LABEL_11:
    dispatch_once(&qword_1019344E0, &stru_1018686D0);
  }

void sub_10125A0C0()
{
}

void sub_10125A0E8()
{
}

void sub_10125A110()
{
}

void sub_10125A138()
{
}

void sub_10125A160()
{
}

void sub_10125A188()
{
}

void sub_10125A1B0()
{
}

void sub_10125A1D8()
{
}

void sub_10125A200()
{
}

void sub_10125A228()
{
}

void sub_10125A250()
{
}

void sub_10125A278()
{
}

void sub_10125A2A0()
{
}

void sub_10125A2C8()
{
}

void sub_10125A2F0()
{
}

void sub_10125A318()
{
}

void sub_10125A340()
{
}

void sub_10125A368()
{
}

void sub_10125A390()
{
}

void sub_10125A3B8()
{
}

void sub_10125A3E0()
{
}

void sub_10125A408()
{
}

void sub_10125A430()
{
}

void sub_10125A458()
{
}

void sub_10125A480()
{
}

#error "10125A530: call analysis failed (funcsize=81)"
#error "10125A6B0: call analysis failed (funcsize=72)"
#error "10125A81C: call analysis failed (funcsize=72)"
#error "10125A988: call analysis failed (funcsize=72)"
#error "10125AAF4: call analysis failed (funcsize=72)"
#error "10125AC60: call analysis failed (funcsize=72)"
void sub_10125AD54()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_101934680 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100A8740C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
    }

    if (sub_100A87430())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?",  "{msg%{public}.0s:In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186B648);
      }
    }

    if (sub_100A87420())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/CLWorkoutPredictor.mm",  1121,  "retractStopAlert");
LABEL_11:
    dispatch_once(&qword_101934680, &stru_10186B648);
  }

void sub_10125AEC0()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186C0D0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186C0D0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Skiing/CLSkiNotifierAdapter.mm",  20,  "-[CLSkiNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10186C0D0);
  }

#error "10125B104: call analysis failed (funcsize=72)"
#error "10125B270: call analysis failed (funcsize=72)"
#error "10125B3DC: call analysis failed (funcsize=72)"
#error "10125B548: call analysis failed (funcsize=72)"
#error "10125B6B4: call analysis failed (funcsize=72)"
void sub_10125B7A8(_DWORD *a1)
{
  os_log_s *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];
  sub_100364228();
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D200);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D200);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D200);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 112;
  sub_100042D70();
}

void sub_10125B918(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D200);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D200);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D200);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 107;
  sub_100042D70();
}

void sub_10125BA88()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D220);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D220);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  258,  "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10186D220);
  }

void sub_10125BC40(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D290);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D290);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D290);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 112;
  sub_100042D70();
}

void sub_10125BDB0(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D290);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D290);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D290);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 107;
  sub_100042D70();
}

void sub_10125BF20()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D2B0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D2B0);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  258,  "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10186D2B0);
  }

void sub_10125C0D8(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D340);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D340);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D340);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 112;
  sub_100042D70();
}

void sub_10125C248(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D340);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D340);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D340);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 107;
  sub_100042D70();
}

void sub_10125C3B8()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D360);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D360);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  258,  "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10186D360);
  }

#error "10125C5E8: call analysis failed (funcsize=72)"
#error "10125C754: call analysis failed (funcsize=72)"
#error "10125C8C0: call analysis failed (funcsize=72)"
#error "10125CA2C: call analysis failed (funcsize=72)"
#error "10125CB98: call analysis failed (funcsize=72)"
void sub_10125CC8C(_DWORD *a1)
{
  os_log_s *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];
  sub_100364228();
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D9A8);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D9A8);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D9A8);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 112;
  sub_100042D70();
}

void sub_10125CDFC(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934830, &stru_10186D9A8);
  }
  if (sub_100364234())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D9A8);
    }
  }

  if (sub_100364258())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v4,  v5,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
    sub_100364228();
    if (!v3) {
      dispatch_once(&qword_101934830, &stru_10186D9A8);
    }
  }

  if (sub_100364248())
  {
    sub_100042C54();
    sub_100039804( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v6);
  }

  *a1 = 107;
  sub_100042D70();
}

void sub_10125CF6C()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D9C8);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      sub_100042C04( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186D9C8);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h",  258,  "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10186D9C8);
  }

void sub_10125D124()
{
  if (qword_101934680 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Requested end index must not exceed end of array - 1, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186DA08);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934688;
    if (os_signpost_enabled((os_log_t)qword_101934688))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Requested end index must not exceed end of array - 1",  "{msg%{public}.0s:Requested end index must not exceed end of array - 1, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10186DA08);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Requested end index must not exceed end of array - 1, event:%{public, location:esca pe_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/CLWorkoutOutdoorCycl ingClassifierFeaturesCalculator.cpp",  52,  "findIndexOfMaxPeak");
LABEL_11:
    dispatch_once(&qword_101934680, &stru_10186DA08);
  }

#error "10125D368: call analysis failed (funcsize=72)"
#error "10125D4D4: call analysis failed (funcsize=72)"
#error "10125D640: call analysis failed (funcsize=72)"
#error "10125D7AC: call analysis failed (funcsize=72)"
#error "10125D918: call analysis failed (funcsize=72)"
void sub_10125DA0C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E060);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E060);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/DataProtectionManager/CLDataProtectionManager.mm",  44,  "-[CLDataProtectionManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10186E060);
  }

void sub_10125DB94()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10186E1F0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10186E1F0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10186E1F0);
  }

void sub_10125DD04()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CLStatusBarIconManagerNotifier Assertion failed, event:%{public, location:escape_on ly}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E628);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CLStatusBarIconManagerNotifier Assertion failed",  "{msg%{public}.0s:CLStatusBarIconManagerNotifier Assertion failed, event:%{public, location:escape_on ly}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186E628);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CLStatusBarIconManagerNotifier Assertion failed, event:%{public, location:escape_on ly}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/StatusBarIcon/CLStatusBarIconManager.mm",  95,  "-[CLStatusBarIconManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10186E628);
  }

void sub_10125DE8C()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10186E798);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10186E798);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10186E798);
  }

void sub_10125DFFC()
{
  if (qword_101934A40 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:The capabilities cache has been accessed before being populated!, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E948);
      }
    }

    int v1 = (os_log_s *)qword_101934A48;
    if (os_signpost_enabled((os_log_t)qword_101934A48))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The capabilities cache has been accessed before being populated!",  "{msg%{public}.0s:The capabilities cache has been accessed before being populated!, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_10186E948);
      }
    }

    int v2 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:The capabilities cache has been accessed before being populated!, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Utilities/CLLocationDictionaryUtilities.mm",  524,  "_CLLocationDictionaryUtilitiesHasCapability");
LABEL_11:
    dispatch_once(&qword_101934A40, &stru_10186E948);
  }

void sub_10125E1C8()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008AC988())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:I must have already been invalidated by CLDaemonInUseAssertion, event:%{public, loc ation:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
    }

    if (sub_1008AC9BC())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "I must have already been invalidated by CLDaemonInUseAssertion",  "{msg%{public}.0s:I must have already been invalidated by CLDaemonInUseAssertion, event:%{public, loc ation:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
    }

    if (sub_1008AC99C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:I must have already been invalidated by CLDaemonInUseAssertion, event:%{public, loc ation:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonInUseAssertion.mm",  33,  "-[CLDaemonInUseAssertionAdapter dealloc]");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_10186EA90);
  }

void sub_10125E334()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008AC988())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already bee n set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion , event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
    }

    if (sub_1008AC9BC())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentia lly a major privacy leak and is likely indicative of a memory leak or a double-assertion",  "{msg%{public}.0s:#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already bee n set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion , event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10186EA90);
      }
    }

    if (sub_1008AC99C())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already bee n set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion , event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonInUseAssertion.mm",  145,  "handleMessageInUseAssertion_block_invoke");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_10186EA90);
  }

void sub_10125E4A0()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186EDF0);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10186EDF0);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Streaming/CLStreamingAwareLocationProvider.mm",  65,  "-[CLStreamingAwareLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10186EDF0);
  }

void sub_10125E66C()
{
  if (qword_101934990 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_FAULT))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid location source, source:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10186EE10);
      }
    }

    int v1 = (os_log_s *)qword_101934998;
    if (os_signpost_enabled((os_log_t)qword_101934998))
    {
      sub_100042C1C();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid location source",  "{msg%{public}.0s:Invalid location source, source:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934990 != -1) {
        dispatch_once(&qword_101934990, &stru_10186EE10);
      }
    }

    int v2 = (os_log_s *)qword_101934998;
    if (os_log_type_enabled((os_log_t)qword_101934998, OS_LOG_TYPE_INFO))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid location source, source:%{public}d, event:%{public, location:escape_onl y}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Streaming/CLStreamingAwareLocationProvider.mm",  420,  "setLocationRegistration");
LABEL_11:
    dispatch_once(&qword_101934990, &stru_10186EE10);
  }

uint64_t sub_10125E83C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *a1 = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return sub_100AF3264(a2);
}

void sub_10125E87C()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186F430);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10186F430);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabaseManager.mm",  82,  "openDatabase");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_10186F430);
  }

#error "10125EAC8: call analysis failed (funcsize=72)"
#error "10125EC34: call analysis failed (funcsize=72)"
#error "10125EDA0: call analysis failed (funcsize=72)"
#error "10125EF0C: call analysis failed (funcsize=72)"
#error "10125F078: call analysis failed (funcsize=72)"
#error "10125F1E4: call analysis failed (funcsize=72)"
#error "10125F350: call analysis failed (funcsize=72)"
#error "10125F4BC: call analysis failed (funcsize=72)"
#error "10125F628: call analysis failed (funcsize=72)"
#error "10125F794: call analysis failed (funcsize=72)"
void sub_10125F888()
{
  __assert_rtn( "set_fusion_state",  "CLPLocationController.pb.h",  6175,  "::CLP::LogEntry::PrivateData::LCFusionState_IsValid(value)");
}

void sub_10125F8B0()
{
}

void sub_10125F8D8()
{
}

void sub_10125F900()
{
}

void sub_10125F928()
{
}

void sub_10125F950()
{
}

void sub_10125F978()
{
}

void sub_10125F9A0()
{
}

void sub_10125F9C8()
{
}

void sub_10125F9F0()
{
}

void sub_10125FA18()
{
}

void sub_10125FA40()
{
}

void sub_10125FA68()
{
}

void sub_10125FA90()
{
}

void sub_10125FAB8()
{
}

void sub_10125FAE0()
{
}

void sub_10125FB08()
{
}

void sub_10125FB30()
{
}

void sub_10125FB58()
{
}

void sub_10125FB80()
{
}

void sub_10125FBA8()
{
}

void sub_10125FBD0()
{
}

void sub_10125FBF8()
{
}

void sub_10125FC20()
{
}

void sub_10125FC48()
{
}

void sub_10125FC70()
{
}

void sub_10125FC98()
{
}

void sub_10125FCC0()
{
}

void sub_10125FCE8()
{
}

void sub_10125FD10()
{
}

void sub_10125FD38()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101872C00);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101872C00);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Loi/CLLoiLocationProvider.mm",  64,  "-[CLLoiLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101872C00);
  }

void sub_10125FF04()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Using a persistent subscription that has been invalidated!, event:%{public, locatio n:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101873320);
      }
    }

    int v1 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Using a persistent subscription that has been invalidated!",  "{msg%{public}.0s:Using a persistent subscription that has been invalidated!, event:%{public, locatio n:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101873320);
      }
    }

    int v2 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Using a persistent subscription that has been invalidated!, event:%{public, locatio n:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLPersistentSubscription.h",  196,  "assertValid");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_101873320);
  }

#error "101260150: call analysis failed (funcsize=75)"
#error "1012602B8: call analysis failed (funcsize=71)"
#error "101260420: call analysis failed (funcsize=71)"
#error "101260588: call analysis failed (funcsize=71)"
#error "1012606F0: call analysis failed (funcsize=71)"
#error "101260858: call analysis failed (funcsize=70)"
#error "1012609B8: call analysis failed (funcsize=70)"
#error "101260B18: call analysis failed (funcsize=70)"
#error "101260C78: call analysis failed (funcsize=70)"
#error "101260DDC: call analysis failed (funcsize=74)"
#error "101260F4C: call analysis failed (funcsize=71)"
#error "1012610B4: call analysis failed (funcsize=71)"
#error "10126121C: call analysis failed (funcsize=71)"
#error "101261390: call analysis failed (funcsize=75)"
void sub_101261484()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100603DB8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Can't have a scan of no channels, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DDC())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Can't have a scan of no channels",  "{msg%{public}.0s:Can't have a scan of no channels, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DCC())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Can't have a scan of no channels, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm",  143,  "setChannels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101873DD8);
  }

void sub_1012615F8()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100603DB8())
    {
      sub_100B77128(@"SCAN_CHANNELS");
      sub_100B770E0();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Expected key in the dictionary, key:%{private, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DDC())
    {
      sub_100B77128(@"SCAN_CHANNELS");
      sub_100B770E0();
      sub_100865630( (void *)&_mh_execute_header,  v0,  v1,  v2,  "Expected key in the dictionary",  "{msg%{public}.0s:Expected key in the dictionary, key:%{private, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DCC())
    {
      sub_100B77128(@"SCAN_CHANNELS");
      sub_100B770E0();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Expected key in the dictionary, key:%{private, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm",  187,  "fromDictionary");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101873DD8);
  }

void sub_1012617B0()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100B77114())
    {
      sub_100B77074();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Expected key in the dictionary, key:%{private, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100B77144())
    {
      sub_100B77074();
      sub_100865630( (void *)&_mh_execute_header,  v0,  v1,  v2,  "Expected key in the dictionary",  "{msg%{public}.0s:Expected key in the dictionary, key:%{private, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100B77134())
    {
      sub_100B77074();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Expected key in the dictionary, key:%{private, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm",  173,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101873DD8);
  }

void sub_101261940()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100B77114())
    {
      sub_100B77074();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Expected to be able to get an int value from the CFNumber, key:%{private, location: escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100B77144())
    {
      sub_100B77074();
      sub_100865630( (void *)&_mh_execute_header,  v0,  v1,  v2,  "Expected to be able to get an int value from the CFNumber",  "{msg%{public}.0s:Expected to be able to get an int value from the CFNumber, key:%{private, location: escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100B77134())
    {
      sub_100B77074();
      sub_1008FFA20( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Expected to be able to get an int value from the CFNumber, key:%{private, location: escape_only}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm",  178,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101873DD8);
  }

void sub_101261AD0(float a1)
{
  *(float *)&double v2 = a1;
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    double v2 = *(float *)&v2;
    if (sub_100603DB8())
    {
      sub_100B770A8();
      sub_1008FFA20( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Duty cycle percentage should be between 0 and 1, dutyCycle:%{private}f, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DDC())
    {
      sub_100B770A8();
      sub_100865630( (void *)&_mh_execute_header,  v1,  v3,  v4,  "Duty cycle percentage should be between 0 and 1",  "{msg%{public}.0s:Duty cycle percentage should be between 0 and 1, dutyCycle:%{private}f, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DCC())
    {
      sub_100B770A8();
      sub_1008FFA20( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Duty cycle percentage should be between 0 and 1, dutyCycle:%{private}f, event :%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v5);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm",  15,  "computeExpectedScanDelay");
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101873DD8);
  }

void sub_101261C68()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100603DB8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Duty cycle is NaN, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DDC())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Duty cycle is NaN",  "{msg%{public}.0s:Duty cycle is NaN, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101873DD8);
      }
    }

    if (sub_100603DCC())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Duty cycle is NaN, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm",  17,  "computeExpectedScanDelay");
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101873DD8);
  }

void sub_101261DD4()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:attempting to access moving ap info when never set, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101874268);
      }
    }

    int v1 = (os_log_s *)qword_101934868;
    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "attempting to access moving ap info when never set",  "{msg%{public}.0s:attempting to access moving ap info when never set, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101874268);
      }
    }

    int v2 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:attempting to access moving ap info when never set, event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/CLWifi1Types.mm",  78,  "isMovingAp");
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101874268);
  }

#error "101262028: call analysis failed (funcsize=80)"
void sub_101262128( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_10009D0B8();
  if (!v27) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:Create service - No error code but response descriptor not available , event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "Create service - No error code but response descriptor not available ",  "{msg%{public}.0s:Create service - No error code but response descriptor not available , event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:Create service - No error code but response descriptor not available , event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "1012622E4: call analysis failed (funcsize=71)"
void sub_1012623D8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_10009D0B8();
  if (!v27) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:Delete service - No error code but response descriptor not available , event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "Delete service - No error code but response descriptor not available ",  "{msg%{public}.0s:Delete service - No error code but response descriptor not available , event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:Delete service - No error code but response descriptor not available , event:%{public , location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "101262594: call analysis failed (funcsize=71)"
#error "1012626FC: call analysis failed (funcsize=71)"
#error "101262864: call analysis failed (funcsize=71)"
#error "1012629CC: call analysis failed (funcsize=71)"
#error "101262B34: call analysis failed (funcsize=71)"
#error "101262C9C: call analysis failed (funcsize=71)"
#error "101262E04: call analysis failed (funcsize=71)"
#error "101262F6C: call analysis failed (funcsize=71)"
#error "1012630D4: call analysis failed (funcsize=70)"
#error "101263234: call analysis failed (funcsize=70)"
#error "101263394: call analysis failed (funcsize=70)"
#error "1012634F4: call analysis failed (funcsize=70)"
#error "101263654: call analysis failed (funcsize=70)"
#error "1012637B4: call analysis failed (funcsize=70)"
#error "101263914: call analysis failed (funcsize=70)"
void sub_101263A00( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_10009D0B8();
  if (!v27) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:request removing labels without request identifier, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "request removing labels without request identifier",  "{msg%{public}.0s:request removing labels without request identifier, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:request removing labels without request identifier, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "101263BBC: call analysis failed (funcsize=71)"
#error "101263D24: call analysis failed (funcsize=71)"
#error "101263E8C: call analysis failed (funcsize=71)"
#error "101263FF4: call analysis failed (funcsize=71)"
#error "10126415C: call analysis failed (funcsize=71)"
void sub_101264250( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_10009D0B8();
  if (!v27) {
    dispatch_once(&qword_1019348D0, &stru_101874AF8);
  }
  if (sub_100014168())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:request stop updateing MicroLocation without request identifier, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001418C())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "request stop updateing MicroLocation without request identifier",  "{msg%{public}.0s:request stop updateing MicroLocation without request identifier, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2256) != -1LL) {
      dispatch_once(&qword_1019348D0, &stru_101874AF8);
    }
  }

  if (sub_10001417C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:request stop updateing MicroLocation without request identifier, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "10126440C: call analysis failed (funcsize=70)"
#error "10126456C: call analysis failed (funcsize=70)"
#error "1012646CC: call analysis failed (funcsize=70)"
#error "10126482C: call analysis failed (funcsize=71)"
#error "101264994: call analysis failed (funcsize=71)"
#error "101264AFC: call analysis failed (funcsize=71)"
void sub_101264BF0()
{
  __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
}

void sub_101264C18()
{
}

void sub_101264C40()
{
}

void sub_101264C68()
{
}

void sub_101264C90()
{
}

void sub_101264CB8()
{
}

void sub_101264CE0()
{
}

void sub_101264D08()
{
}

void sub_101264D30()
{
}

void sub_101264D58()
{
}

void sub_101264D80()
{
}

void sub_101264DA8()
{
}

void sub_101264DD0()
{
}

void sub_101264DF8()
{
}

void sub_101264E20()
{
}

void sub_101264E48()
{
}

void sub_101264E70()
{
}

void sub_101264E98()
{
}

void sub_101264EC0()
{
  __assert_rtn("-[ALSWirelessAP writeTo:]", "ALSWirelessAP.m", 154, "nil != self->_macID");
}

void sub_101264EE8(uint64_t a1, uint64_t a2)
{
  *(void *)(v5 + 3sub_1011C5518(qword_1019A41A0, 0) = "assert";
  *(_WORD *)(v5 + 3_Block_object_dispose(va, 8) = 2081;
  *(void *)(v5 + 4sub_1011C5518(qword_1019A41A0, 0) = "ledgerName";
  sub_1009227A4( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:#monitor missing ledger name, LedgerName:%{public, location:escape_only}s, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
}

void sub_101264F48(uint64_t a1, uint64_t a2)
{
  *(void *)(v5 + 3sub_1011C5518(qword_1019A41A0, 0) = "assert";
  *(_WORD *)(v5 + 3_Block_object_dispose(va, 8) = 2081;
  *(void *)(v5 + 4sub_1011C5518(qword_1019A41A0, 0) = "clientStorageToken";
  sub_1009227A4( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:#monitor client doesn't have the storage token, clientKey:%{public, location:escape_onl y}s, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
}

#error "101265024: call analysis failed (funcsize=72)"
#error "10126518C: call analysis failed (funcsize=73)"
#error "1012652FC: call analysis failed (funcsize=73)"
#error "10126546C: call analysis failed (funcsize=73)"
#error "1012655DC: call analysis failed (funcsize=72)"
void sub_1012656C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + _Block_object_dispose(va, 8) = a3;
}

void sub_101265730()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018787B0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018787B0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Autopause/CLAutopauseProvider.mm",  20,  "-[CLAutopauseProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_1018787B0);
  }

void sub_1012658B8()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018788D8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018788D8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_1018788D8);
  }

#error "101265AA8: call analysis failed (funcsize=75)"
#error "101265C10: call analysis failed (funcsize=71)"
#error "101265D78: call analysis failed (funcsize=71)"
#error "101265EE0: call analysis failed (funcsize=71)"
#error "101266048: call analysis failed (funcsize=71)"
#error "1012661B0: call analysis failed (funcsize=71)"
#error "101266318: call analysis failed (funcsize=71)"
#error "101266480: call analysis failed (funcsize=70)"
#error "1012665E0: call analysis failed (funcsize=71)"
#error "101266748: call analysis failed (funcsize=71)"
#error "1012668B0: call analysis failed (funcsize=70)"
#error "101266A10: call analysis failed (funcsize=71)"
void sub_101266B04(char a1)
{
  os_log_s *v1;
  os_log_s *v2;
  os_log_s *v3;
  uint8_t v4[40];
  if ((a1 & 1) == 0) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  int v1 = (os_log_s *)qword_101934838;
  if (sub_1000397B8())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
  }

  int v2 = (os_log_s *)qword_101934838;
  if (sub_1000ECE18())
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
  }

  int v3 = (os_log_s *)qword_101934838;
  if (sub_1000397C4())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
  }

#error "101266D20: call analysis failed (funcsize=71)"
#error "101266E88: call analysis failed (funcsize=71)"
void sub_101266F7C()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879400);
  }
  int v0 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:No root directory set for tile type, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879400);
    }
  }

  int v1 = (os_log_s *)qword_101934858;
  if (os_signpost_enabled((os_log_t)qword_101934858))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "No root directory set for tile type",  "{msg%{public}.0s:No root directory set for tile type, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879400);
    }
  }

  int v2 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:No root directory set for tile type, event:%{public, location:escape_only}s, condit ion:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_101267140()
{
}

void sub_10126714C()
{
}

void sub_101267158()
{
}

void sub_101267164()
{
}

void sub_101267170()
{
}

void sub_10126717C()
{
}

void sub_101267188()
{
}

void sub_101267194()
{
}

void sub_1012671A0()
{
}

void sub_1012671AC()
{
}

void sub_1012671B8()
{
}

void sub_1012671C4()
{
}

void sub_1012671D0()
{
}

void sub_1012671DC()
{
}

void sub_1012671E8()
{
}

void sub_1012671F4()
{
}

void sub_101267200()
{
}

void sub_10126720C()
{
}

void sub_101267218()
{
}

void sub_101267224()
{
}

void sub_101267230()
{
}

void sub_10126723C()
{
}

void sub_101267248()
{
}

void sub_101267254()
{
}

void sub_101267260()
{
}

void sub_10126726C()
{
}

void sub_101267278()
{
}

void sub_101267284()
{
}

void sub_101267290()
{
}

void sub_10126729C()
{
}

void sub_1012672A8()
{
}

void sub_1012672B4()
{
}

void sub_1012672C0()
{
}

void sub_1012672CC()
{
}

void sub_1012672D8()
{
}

void sub_1012672E4()
{
}

void sub_1012672F0()
{
}

void sub_1012672FC()
{
}

void sub_101267308()
{
}

void sub_101267314()
{
}

void sub_101267320()
{
}

void sub_10126732C()
{
}

void sub_101267338()
{
}

void sub_101267344()
{
}

void sub_101267350()
{
}

void sub_10126735C()
{
}

void sub_101267368()
{
}

void sub_101267374()
{
}

void sub_101267380()
{
}

void sub_10126738C()
{
}

void sub_101267398()
{
}

void sub_1012673A4()
{
}

void sub_1012673B0()
{
}

void sub_1012673BC()
{
}

void sub_1012673C8()
{
}

void sub_1012673D4()
{
}

void sub_1012673E0()
{
}

void sub_1012673EC()
{
}

void sub_1012673F8()
{
}

void sub_101267404()
{
}

void sub_101267410()
{
}

void sub_10126741C()
{
}

void sub_101267428()
{
}

void sub_101267434()
{
}

void sub_101267440()
{
}

void sub_10126744C()
{
}

void sub_101267458()
{
}

void sub_101267464()
{
}

void sub_101267470()
{
}

void sub_10126747C()
{
}

void sub_101267488()
{
}

void sub_101267494()
{
}

void sub_1012674A0()
{
}

void sub_1012674AC()
{
}

void sub_1012674B8()
{
}

void sub_1012674C4()
{
}

void sub_1012674D0()
{
}

void sub_1012674DC()
{
}

void sub_1012674E8()
{
}

void sub_1012674F4()
{
}

void sub_101267500()
{
}

void sub_10126750C()
{
}

void sub_101267518()
{
}

void sub_101267524()
{
}

void sub_101267530()
{
}

void sub_10126753C()
{
}

void sub_101267548()
{
}

void sub_101267554()
{
}

void sub_101267560()
{
}

void sub_10126756C()
{
}

void sub_101267578()
{
}

void sub_101267584()
{
}

void sub_101267590()
{
}

void sub_10126759C()
{
}

void sub_1012675A8()
{
}

void sub_1012675B4()
{
}

void sub_1012675C0()
{
}

void sub_1012675CC()
{
}

void sub_1012675D8()
{
}

void sub_1012675E4()
{
}

void sub_1012675F0()
{
}

void sub_1012675FC()
{
}

void sub_101267608()
{
}

void sub_101267614()
{
}

void sub_101267620()
{
}

void sub_10126762C()
{
}

void sub_101267638()
{
}

void sub_101267644()
{
}

void sub_101267650()
{
}

void sub_10126765C()
{
}

void sub_101267668()
{
}

#error "1012676FC: call analysis failed (funcsize=80)"
#error "101267874: call analysis failed (funcsize=72)"
#error "1012679E0: call analysis failed (funcsize=72)"
#error "101267B4C: call analysis failed (funcsize=72)"
#error "101267CB8: call analysis failed (funcsize=72)"
#error "101267E24: call analysis failed (funcsize=72)"
void sub_101267F18()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_1018799C8);
  }
  int v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
  }

  int v1 = (os_log_s *)qword_101934A78;
  if (os_signpost_enabled((os_log_t)qword_101934A78))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_1018799C8);
    }
  }

  int v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
  }

void sub_1012680DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100C579D4(v3, v4, v5);
  sub_100C57A14(v6, v7, v8);
  *(void *)(v9 + 5sub_1011C5518(qword_1019A41A0, 0) = "(!keyPath || (!_os_feature_enabled_impl(CoreLocation, cl_pula) || keyPath.userName))";
  sub_100C579F4( (void *)&_mh_execute_header,  v11,  v9,  "{msg%{public}.0s:#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled ., userName:%{public, location:escape_only}@, ClientKeyPath:%{public, location:escape_only}@, event:%{ public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v10);
}

void sub_10126813C()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      sub_100C57A24();
      sub_100C57994();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula ena bled., userName:%{public, location:escape_only}@, ClientKeyPath:%{public, location:escape_only}@, ev ent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101879AA8);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100C57A24();
      sub_100C57994();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula enabled.",  "{msg%{public}.0s:#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula ena bled., userName:%{public, location:escape_only}@, ClientKeyPath:%{public, location:escape_only}@, ev ent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x3Au);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101879AA8);
      }
    }

    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100C57A24();
      sub_100C57994();
      sub_100C579F4( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:#AuthorizationDatabase requires userName be present in the clientKeyPath with cl_pula ena bled., userName:%{public, location:escape_only}@, ClientKeyPath:%{public, location:escape_only}@, ev ent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLAuthorizationDatabase.mm",  830,  "-[CLAuthorizationDatabase readonlyStoreAtKeyPath:]");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101879AA8);
  }

void sub_101268310()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101879D80);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWifiScanner.mm",  150,  "onWifiNotification");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101879D80);
  }

#error "10126855C: call analysis failed (funcsize=73)"
#error "1012686CC: call analysis failed (funcsize=73)"
void sub_1012687C4()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019348B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed,fGEOMapFeatureAccess==nil, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
    }

    int v1 = (os_log_s *)qword_1019348B8;
    if (os_signpost_enabled((os_log_t)qword_1019348B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed,fGEOMapFeatureAccess==nil",  "{msg%{public}.0s:Assertion failed,fGEOMapFeatureAccess==nil, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10187A7C8);
      }
    }

    int v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed,fGEOMapFeatureAccess==nil, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLGeoMapFeatureAccessGeometry.mm",  46,  "initializeMapsAPI");
LABEL_11:
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }

void sub_101268990(void *a1)
{
  do
  {
    int v2 = (void *)*a1;
    sub_10000AE14((uint64_t)(a1 + 2));
    operator delete(a1);
    a1 = v2;
  }

  while (v2);
}

void sub_1012689C8()
{
  if (qword_101934540 != -1) {
    dispatch_once(&qword_101934540, &stru_10187AF90);
  }
  if (sub_100C88814())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Service required to send command, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v4);
    if (qword_101934540 != -1) {
      dispatch_once(&qword_101934540, &stru_10187AF90);
    }
  }

  if (sub_100C88838())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Service required to send command",  "{msg%{public}.0s:Service required to send command, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v4);
    if (qword_101934540 != -1) {
      dispatch_once(&qword_101934540, &stru_10187AF90);
    }
  }

  if (sub_100C88828())
  {
    sub_100008D64();
    sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Service required to send command, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v4);
  }

void sub_101268B48()
{
  if (qword_101934540 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100C88814())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
      if (qword_101934540 != -1) {
        dispatch_once(&qword_101934540, &stru_10187AF90);
      }
    }

    if (sub_100C88838())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
      if (qword_101934540 != -1) {
        dispatch_once(&qword_101934540, &stru_10187AF90);
      }
    }

    if (sub_100C88828())
    {
      sub_100008D38();
      sub_100039804( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v4);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLGestureService.mm",  346,  "numberOfSpectatorsChanged");
LABEL_11:
    dispatch_once(&qword_101934540, &stru_10187AF90);
  }

void sub_101268CD0()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187B288);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187B288);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLPressureBias.mm",  23,  "-[CLPressureBiasAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10187B288);
  }

void sub_101268E58()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10187B3F8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10187B3F8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10187B3F8);
  }

#error "101269048: call analysis failed (funcsize=76)"
#error "1012691BC: call analysis failed (funcsize=73)"
#error "101269330: call analysis failed (funcsize=76)"
#error "1012694AC: call analysis failed (funcsize=75)"
#error "101269620: call analysis failed (funcsize=75)"
#error "10126978C: call analysis failed (funcsize=72)"
#error "1012698F8: call analysis failed (funcsize=72)"
#error "101269A64: call analysis failed (funcsize=72)"
#error "101269BD0: call analysis failed (funcsize=72)"
#error "101269D3C: call analysis failed (funcsize=72)"
void sub_101269E30()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187D218);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187D218);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/ProxPDPAndALSPhone/CLProxPDPAndALSPhoneNotifier.mm",  13,  "-[CLProxPDPAndALSPhoneNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10187D218);
  }

void sub_101269FB8()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10187D388);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10187D388);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10187D388);
  }

void sub_10126A128()
{
  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_10187D4C0);
  }
  int v0 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Got a different mac from database query!, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
  }

  int v1 = (os_log_s *)off_101934A28;
  if (os_signpost_enabled((os_log_t)off_101934A28))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Got a different mac from database query!",  "{msg%{public}.0s:Got a different mac from database query!, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10187D4C0);
    }
  }

  int v2 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Got a different mac from database query!, event:%{public, location:escape_only}s, c ondition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_10126A2EC()
{
  if (qword_101934750 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Iterator indices are outside of the buffer range., event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10187D4E0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_101934758))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Iterator indices are outside of the buffer range.",  "{msg%{public}.0s:Iterator indices are outside of the buffer range., event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934750 != -1) {
        dispatch_once(&qword_101934750, &stru_10187D4E0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Iterator indices are outside of the buffer range., event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/IndoorOutdoor/CLIndoorOutdoorGPSModel.mm",  349,  "computeScalarDistanceFromFixedQueue");
LABEL_11:
    dispatch_once(&qword_101934750, &stru_10187D4E0);
  }

void sub_10126A46C()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:We should have picked at least one of the windows., event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D500);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "We should have picked at least one of the windows.",  "{msg%{public}.0s:We should have picked at least one of the windows., event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187D500);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:We should have picked at least one of the windows., event:%{public, location:escape _only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/IndoorOutdoor/CLIndoorOutdoorGPSModel.mm",  511,  "calculateDirectionResiduals");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_10187D500);
  }

void sub_10126A5EC()
{
  if (qword_101934550 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:[CLMagicMountInterface] Service required, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
    }

    int v1 = (os_log_s *)qword_101934558;
    if (os_signpost_enabled((os_log_t)qword_101934558))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "[CLMagicMountInterface] Service required",  "{msg%{public}.0s:[CLMagicMountInterface] Service required, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934550 != -1) {
        dispatch_once(&qword_101934550, &stru_10187D968);
      }
    }

    int v2 = (os_log_s *)qword_101934558;
    if (os_log_type_enabled((os_log_t)qword_101934558, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:[CLMagicMountInterface] Service required, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/MagicMount/CLSPUMagicMountInterface.mm",  29,  "sendCommand");
LABEL_11:
    dispatch_once(&qword_101934550, &stru_10187D968);
  }

#error "10126A830: call analysis failed (funcsize=72)"
#error "10126A99C: call analysis failed (funcsize=72)"
#error "10126AB08: call analysis failed (funcsize=72)"
#error "10126AC74: call analysis failed (funcsize=72)"
#error "10126ADE0: call analysis failed (funcsize=72)"
void sub_10126AED4()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_10187EC90);
  }
  int v0 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187EC90);
    }
  }

  int v1 = (os_log_s *)qword_101934A78;
  if (os_signpost_enabled((os_log_t)qword_101934A78))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10187EC90);
    }
  }

  int v2 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
  }

#error "10126B120: call analysis failed (funcsize=80)"
#error "10126B298: call analysis failed (funcsize=72)"
#error "10126B404: call analysis failed (funcsize=72)"
#error "10126B570: call analysis failed (funcsize=72)"
#error "10126B6DC: call analysis failed (funcsize=72)"
#error "10126B848: call analysis failed (funcsize=72)"
void sub_10126B93C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10027C134())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#proactive Could not release power assertion., event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
    }

    if (sub_10027C158())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#proactive Could not release power assertion.",  "{msg%{public}.0s:#proactive Could not release power assertion., event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
    }

    if (sub_10027C148())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#proactive Could not release power assertion., event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Policies/Proactive/CLPolicyProactive.mm",  232,  "proactiveHarvesting");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }

void sub_10126BAB0()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10027C134())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#proactive Could not release power assertion., event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
    }

    if (sub_10027C158())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "#proactive Could not release power assertion.",  "{msg%{public}.0s:#proactive Could not release power assertion., event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10187F1C8);
      }
    }

    if (sub_10027C148())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:#proactive Could not release power assertion., event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Policies/Proactive/CLPolicyProactive.mm",  131,  "extendProactiveAttempt");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10187F1C8);
  }

void sub_10126BC24()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001BA3B4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:[FastPathDevice] initializeFastPath should be running on motion thread, event:%{pub lic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F368);
      }
    }

    if (sub_1001BA3D8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "[FastPathDevice] initializeFastPath should be running on motion thread",  "{msg%{public}.0s:[FastPathDevice] initializeFastPath should be running on motion thread, event:%{pub lic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10187F368);
      }
    }

    if (sub_1001BA3C8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:[FastPathDevice] initializeFastPath should be running on motion thread, event:%{pub lic, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidFastPathDevice.mm",  24,  "initializeFastPath");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_10187F368);
  }

void *sub_10126BD90(void *result)
{
  int v1 = (void *)result[3];
  if (v1 == result)
  {
    uint64_t v2 = 4LL;
  }

  else
  {
    if (!v1) {
      return result;
    }
    uint64_t v2 = 5LL;
    uint64_t result = (void *)result[3];
  }

  return (void *)sub_100D1FBB8(result, v2);
}

void *sub_10126BDC4(void *result)
{
  int v1 = (void *)result[3];
  if (v1 == result)
  {
    uint64_t v2 = 4LL;
  }

  else
  {
    if (!v1) {
      return result;
    }
    uint64_t v2 = 5LL;
    uint64_t result = (void *)result[3];
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_10126BDF4()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187FF78);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10187FF78);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Vehicle/CLVehicleConnectionNotifier.mm",  240,  "-[CLVehicleConnectionNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10187FF78);
  }

void sub_10126BF7C()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101880118);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101880118);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101880118);
  }

void sub_10126C0EC()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880348);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880348);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/MotionSync/CLMotionSyncStore.mm",  28,  "-[CLMotionSyncStoreAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101880348);
  }

void sub_10126C26C(void *a1, void *a2)
{
  id v3 = objc_begin_catch(a1);
  *a2 = v3;
  if (qword_101934600 != -1) {
    dispatch_once(&qword_101934600, &stru_101880388);
  }
  int v4 = (os_log_s *)qword_101934608;
  if (os_log_type_enabled((os_log_t)qword_101934608, OS_LOG_TYPE_FAULT))
  {
    int v5 = 138543362;
    id v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Unable to decode pedometer data: %{public}@",  (uint8_t *)&v5,  0xCu);
  }

void sub_10126C33C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880610);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880610);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Awareness/CLLocationAwarenessProvider.mm",  16,  "-[CLLocationAwarenessProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101880610);
  }

void sub_10126C508()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880A60);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101880A60);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FitnessMachine/CLFitnessMachineNotifier.mm",  24,  "-[CLFitnessMachineNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101880A60);
  }

void sub_10126C690()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101880BB0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101880BB0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101880BB0);
  }

void sub_10126C800()
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_101880DE0);
  }
  if (sub_1008AC988())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#luHistorical routine monitor should not be empty, event:%{public, location:escape_on ly}s, condition:%{private, location:escape_only}s}",  v7);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101880DE0);
    }
  }

  if (sub_1008AC9BC())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "#luHistorical routine monitor should not be empty",  "{msg%{public}.0s:#luHistorical routine monitor should not be empty, event:%{public, location:escape_on ly}s, condition:%{private, location:escape_only}s}",  v7);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101880DE0);
    }
  }

  if (sub_1008AC99C())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:#luHistorical routine monitor should not be empty, event:%{public, location:escape_on ly}s, condition:%{private, location:escape_only}s}",  v7);
  }

void sub_10126C970()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008AC988())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#luHistorical entitlementDict for wilderness entitlement should not be nil, event:% {public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101880DE0);
      }
    }

    if (sub_1008AC9BC())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "#luHistorical entitlementDict for wilderness entitlement should not be nil",  "{msg%{public}.0s:#luHistorical entitlementDict for wilderness entitlement should not be nil, event:% {public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101880DE0);
      }
    }

    if (sub_1008AC99C())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:#luHistorical entitlementDict for wilderness entitlement should not be nil, event:% {public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemon LocationUpdaterHistorical.mm",  324,  "rehydrationPayload");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_101880DE0);
  }

void sub_10126CAE8()
{
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1008AC988())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:#luHistorical entitlementDict for transcriptSession entitlement should not be nil, ev ent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101880DE0);
      }
    }

    if (sub_1008AC9BC())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "#luHistorical entitlementDict for transcriptSession entitlement should not be nil",  "{msg%{public}.0s:#luHistorical entitlementDict for transcriptSession entitlement should not be nil, ev ent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_101880DE0);
      }
    }

    if (sub_1008AC99C())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:#luHistorical entitlementDict for transcriptSession entitlement should not be nil, ev ent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemon LocationUpdaterHistorical.mm",  325,  "rehydrationPayload");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_101880DE0);
  }

#error "10126CCE8: call analysis failed (funcsize=80)"
#error "10126CE60: call analysis failed (funcsize=72)"
#error "10126CFCC: call analysis failed (funcsize=72)"
#error "10126D138: call analysis failed (funcsize=72)"
#error "10126D2A4: call analysis failed (funcsize=72)"
#error "10126D410: call analysis failed (funcsize=72)"
void sub_10126D504()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#dic fConnection should not be nil when checking entitlements, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
    }

    uint64_t v1 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#dic fConnection should not be nil when checking entitlements",  "{msg%{public}.0s:#dic fConnection should not be nil when checking entitlements, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_1018817D0);
      }
    }

    uint64_t v2 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#dic fConnection should not be nil when checking entitlements, event:%{public, loca tion:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemon IdentifiableClient.mm",  398,  "isEntitled");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_1018817D0);
  }

void sub_10126D6D0()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101881C00);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101881C00);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLPencilState.mm",  35,  "-[CLPencilStateAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101881C00);
  }

void sub_10126D858()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101881D50);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101881D50);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101881D50);
  }

void sub_10126D9C8()
{
  if (qword_1019348B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CLMMLE,LaneEstimator,Assertion failed, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881F60);
      }
    }

    int v1 = (os_log_s *)qword_1019348B8;
    if (os_signpost_enabled((os_log_t)qword_1019348B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLMMLE,LaneEstimator,Assertion failed",  "{msg%{public}.0s:CLMMLE,LaneEstimator,Assertion failed, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881F60);
      }
    }

    int v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLMMLE,LaneEstimator,Assertion failed, event:%{public, location:escape_only}s, co ndition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLMapMatchingEngine.mm",  45,  "setEnableLaneEstimation");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019348B0, &stru_101881F60);
  }

#error "10126DC0C: call analysis failed (funcsize=65)"
#error "10126DD50: call analysis failed (funcsize=65)"
#error "10126DE94: call analysis failed (funcsize=65)"
#error "10126DFD8: call analysis failed (funcsize=65)"
#error "10126E11C: call analysis failed (funcsize=65)"
#error "10126E260: call analysis failed (funcsize=65)"
#error "10126E3A4: call analysis failed (funcsize=65)"
void sub_10126E478( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_100D8A0C4();
  if (!v27) {
    dispatch_once(&qword_101934860, &stru_1018820E8);
  }
  if (sub_100603DB8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:mismatch of mac addresses, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2144) != -1LL) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
  }

  if (sub_100603DDC())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "mismatch of mac addresses",  "{msg%{public}.0s:mismatch of mac addresses, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2144) != -1LL) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
  }

  if (sub_100603DCC())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:mismatch of mac addresses, event:%{public, location:escape_only}s, condition:%{pr ivate, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10126E5C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  sub_100D8A0C4();
  if (!v27) {
    dispatch_once(&qword_101934860, &stru_1018820E8);
  }
  if (sub_100603DB8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:size of batched locations and scan buffer groups must be equal, event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2144) != -1LL) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
  }

  if (sub_100603DDC())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "size of batched locations and scan buffer groups must be equal",  "{msg%{public}.0s:size of batched locations and scan buffer groups must be equal, event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2144) != -1LL) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
  }

  if (sub_100603DCC())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:size of batched locations and scan buffer groups must be equal, event:%{public, locat ion:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "10126E77C: call analysis failed (funcsize=71)"
void sub_10126E86C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001BA3B4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Need to override getTableName in order to use default definition of aggregateRecords,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101882168);
      }
    }

    if (sub_1001BA3D8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Need to override getTableName in order to use default definition of aggregateRecords",  "{msg%{public}.0s:Need to override getTableName in order to use default definition of aggregateRecords,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101882168);
      }
    }

    if (sub_1001BA3C8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Need to override getTableName in order to use default definition of aggregateRecords,  event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm",  191,  "aggregateRecords");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_101882168);
  }

void sub_10126E9E0()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001BA3B4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Need to override getTableName in order to use default definition of getNumberOfRecords, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101882168);
      }
    }

    if (sub_1001BA3D8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Need to override getTableName in order to use default definition of getNumberOfRecords",  "{msg%{public}.0s:Need to override getTableName in order to use default definition of getNumberOfRecords, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101882168);
      }
    }

    if (sub_1001BA3C8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Need to override getTableName in order to use default definition of getNumberOfRecords, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm",  217,  "getNumberOfRecords");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_101882168);
  }

void sub_10126EB54()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1001BA3B4())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Need to override getTableName in order to use default definition of deleteAllRecordsUL, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101882168);
      }
    }

    if (sub_1001BA3D8())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Need to override getTableName in order to use default definition of deleteAllRecordsUL",  "{msg%{public}.0s:Need to override getTableName in order to use default definition of deleteAllRecordsUL, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101882168);
      }
    }

    if (sub_1001BA3C8())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Need to override getTableName in order to use default definition of deleteAllRecordsUL, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm",  239,  "deleteAllRecordsUL");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_101882168);
  }

void sub_10126ECC8()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000F9274((os_log_s *)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101882468);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101882468);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/AppMonitor/CLAppMonitor.mm",  127,  "-[CLAppMonitorAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101882468);
  }

void sub_10126EE4C()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (sub_1000F9274((os_log_s *)qword_101934988))
    {
      sub_100827ED0();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:_CFBundleCreateUnique returned a nil result, url:%{public, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101882448);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100827ED0();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "_CFBundleCreateUnique returned a nil result",  "{msg%{public}.0s:_CFBundleCreateUnique returned a nil result, url:%{public, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101882448);
      }
    }

    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100827ED0();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:_CFBundleCreateUnique returned a nil result, url:%{public, location:escape_only}@, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x30u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/AppMonitor/CLAppMonitor.mm",  1805,  "bundleFromBundleId");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101882448);
  }

#error "10126F0A0: call analysis failed (funcsize=80)"
#error "10126F218: call analysis failed (funcsize=72)"
#error "10126F384: call analysis failed (funcsize=72)"
#error "10126F4F0: call analysis failed (funcsize=72)"
#error "10126F65C: call analysis failed (funcsize=72)"
#error "10126F7C8: call analysis failed (funcsize=72)"
void sub_10126F8BC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101882C58);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101882C58);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/MotionState/CLMotionStateObserver.mm",  33,  "-[CLMotionStateObserverAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101882C58);
  }

void sub_10126FA44()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:This callback should only be invoked once, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101882DC0);
      }
    }

    int v1 = (os_log_s *)qword_101934868;
    if (os_signpost_enabled((os_log_t)qword_101934868))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "This callback should only be invoked once",  "{msg%{public}.0s:This callback should only be invoked once, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101882DC0);
      }
    }

    int v2 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:This callback should only be invoked once, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiTileDataRepository.mm",  95,  "operator()");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_101882DC0);
  }

void sub_10126FC18(void *a1)
{
  uint64_t p_vtable = (uint64_t)&OBJC_METACLASS___CLPrivacyManager.vtable;
  if (qword_101934970 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v3 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      sub_100DBD580();
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Can't swap status bar assertions when both sides have values, newValue:%{public}hhd , oldValue:%{public}hhd, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x32u);
      if (*(void *)(p_vtable + 2416) != -1LL) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
    }

    int v4 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      sub_100DBD580();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Can't swap status bar assertions when both sides have values",  "{msg%{public}.0s:Can't swap status bar assertions when both sides have values, newValue:%{public}hhd , oldValue:%{public}hhd, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x32u);
      if (*(void *)(p_vtable + 2416) != -1LL) {
        dispatch_once(&qword_101934970, &stru_101883130);
      }
    }

    int v5 = (os_log_s *)qword_101934978;
    uint64_t p_vtable = 1LL;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = *a1 != 0LL;
      *(_DWORD *)uint8_t buf = 68290051;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 1026;
      int v12 = 1;
      __int16 v13 = 1026;
      BOOL v14 = v6;
      __int16 v15 = 2082;
      int v16 = "assert";
      __int16 v17 = 2081;
      uint64_t v18 = "(!!value) != (!!fVisibilityAssertion)";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Can't swap status bar assertions when both sides have values, newValue:%{public}hhd , oldValue:%{public}hhd, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x32u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLLocationSubscription.mm",  1004,  "swapVisibilityAssertion");
LABEL_11:
    dispatch_once(&qword_101934970, &stru_101883130);
  }

#error "10126FEC0: call analysis failed (funcsize=75)"
#error "101270028: call analysis failed (funcsize=71)"
#error "101270198: call analysis failed (funcsize=76)"
#error "101270308: call analysis failed (funcsize=72)"
#error "101270474: call analysis failed (funcsize=72)"
void sub_10127056C()
{
  os_log_s *v0;
  uint64_t v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101883660);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101883660);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v0,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101883660);
    }
  }

  int v2 = *(os_log_s **)(v1 + 2680);
  if (sub_1000397C4())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v3,  0x26u);
  }

void sub_101270710()
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101883C20);
  }
  int v0 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
  {
    sub_100DDA3C4();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Attempting to assert invalid tile type., tileType:%{public}d, event:%{public, loc ation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x2Cu);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101883C20);
    }
  }

  int v1 = (os_log_s *)qword_101934858;
  if (os_signpost_enabled((os_log_t)qword_101934858))
  {
    sub_100DDA3C4();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Attempting to assert invalid tile type.",  "{msg%{public}.0s:Attempting to assert invalid tile type., tileType:%{public}d, event:%{public, loc ation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x2Cu);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101883C20);
    }
  }

  int v2 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    sub_100DDA3C4();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Attempting to assert invalid tile type., tileType:%{public}d, event:%{public, loc ation:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  0x2Cu);
  }

#error "101270A00: call analysis failed (funcsize=76)"
#error "101270B78: call analysis failed (funcsize=76)"
#error "101270CF8: call analysis failed (funcsize=78)"
void sub_101270D44()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];
  sub_100DDD614();
  if (!v1) {
    dispatch_once(&qword_101934560, &stru_101883CD8);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Device motion service 3 is not supported on this platform!, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 1376) != -1LL) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "Device motion service 3 is not supported on this platform!",  "{msg%{public}.0s:Device motion service 3 is not supported on this platform!, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 1376) != -1LL) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:Device motion service 3 is not supported on this platform!, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  v9);
  }

  sub_100042D70();
}

void sub_101270EA4()
{
  if (!v1) {
    dispatch_once(&qword_101934560, &stru_101883CD8);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Device motion service 6 is not supported on this platform!, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 1376) != -1LL) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "Device motion service 6 is not supported on this platform!",  "{msg%{public}.0s:Device motion service 6 is not supported on this platform!, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 1376) != -1LL) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:Device motion service 6 is not supported on this platform!, event:%{public, location: escape_only}s, condition:%{private, location:escape_only}s}",  v9);
  }

  sub_100042D70();
}

void sub_101271004()
{
  if (!v1) {
    dispatch_once(&qword_101934560, &stru_101883CD8);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Device motion service is not supported on this platform!, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 1376) != -1LL) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v4,  v5,  v6,  "Device motion service is not supported on this platform!",  "{msg%{public}.0s:Device motion service is not supported on this platform!, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v9);
    if (*(void *)(v0 + 1376) != -1LL) {
      dispatch_once(&qword_101934560, &stru_101883CD8);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v7,  v8,  "{msg%{public}.0s:Device motion service is not supported on this platform!, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v9);
  }

  sub_100042D70();
}

void sub_101271164(void *a1)
{
  do
  {
    a1 -= 3;
  }

  while (a1 != qword_10199EAA8);
}

#error "1012712D8: call analysis failed (funcsize=78)"
void sub_101271324( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_1003545C4();
  if (!v27) {
    dispatch_once(&qword_101934A70, &stru_101884558);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
  }

  if (sub_100223780())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "10127158C: call analysis failed (funcsize=74)"
uint64_t sub_1012715E0(uint64_t *a1)
{
  uint64_t result;
  uint64_t result = *a1;
  if (result) {
    return sub_100931258(result);
  }
  return result;
}

#error "10127171C: call analysis failed (funcsize=74)"
#error "1012718A4: call analysis failed (funcsize=79)"
void sub_1012718F8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sub_100042DD4();
  a23 = v25;
  a24 = v26;
  sub_1003545C4();
  if (!v27) {
    dispatch_once(&qword_101934A70, &stru_101884558);
  }
  if (sub_10022376C())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v28,  v29,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
  }

  if (sub_100223790())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v30,  v31,  v32,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    if (*(void *)(v24 + 2672) != -1LL) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
  }

  if (sub_100223780())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v33,  v34,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "101271B60: call analysis failed (funcsize=74)"
void sub_101271BB4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint8_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  sub_100042DD4();
  a23 = v24;
  a24 = v25;
  if ((v26 & 1) == 0) {
    dispatch_once(&qword_101934A70, &stru_101884558);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v27,  v28,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v29,  v30,  v31,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101884558);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v32,  v33,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

#error "101271E30: call analysis failed (funcsize=74)"
#error "101271FA4: call analysis failed (funcsize=74)"
void sub_101271FF8(void *a1, uint64_t a2, uint64_t *a3)
{
  os_log_s *v4;
  uint64_t *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t *v10;
  __cxa_begin_catch(a1);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101884578);
  }
  uint64_t v4 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    else {
      uint64_t v5 = (uint64_t *)*a3;
    }
    v6[0] = 68289283;
    v6[1] = 0;
    uint64_t v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2081;
    int v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:invalid wifi #tile encountered. now deleting., filepath:%{private, location:escape_only}s}",  (uint8_t *)v6,  0x1Cu);
  }

#error "101272210: call analysis failed (funcsize=74)"
void sub_101272264()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101884858);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101884858);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Logging/CLBinaryLog.mm",  192,  "close");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101884858);
  }

void sub_1012723D0()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101884858);
      }
    }

    if (sub_100223790())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "CSI assertion failed",  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101884858);
      }
    }

    if (sub_100223780())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:CSI assertion failed, event:%{public, location:escape_only}s, condition:%{priva te, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Logging/CLBinaryLog.mm",  182,  "open");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101884858);
  }

void sub_10127253C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101884E40);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101884E40);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Calorimetry/CLNatalimetryNotifier.mm",  77,  "-[CLNatalimetryNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101884E40);
  }

void sub_1012726BC()
{
  if (qword_101934590 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:AOP/SPU gyro bias not available on this platform, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101886570);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "AOP/SPU gyro bias not available on this platform",  "{msg%{public}.0s:AOP/SPU gyro bias not available on this platform, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_101886570);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:AOP/SPU gyro bias not available on this platform, event:%{public, location:escape_o nly}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasEstimator.mm",  336,  "prepareSPUGyroBiasAndVarianceDispatcher");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934590, &stru_101886570);
  }

void *sub_101272848(void *result, void *a2)
{
  if ((void *)*result == a2)
  {
    uint64_t v2 = 4LL;
  }

  else
  {
    if (!*result) {
      return result;
    }
    uint64_t v2 = 5LL;
    a2 = (void *)*result;
  }

  return (void *)(*(uint64_t (**)(void *))(*a2 + 8 * v2))(a2);
}

void sub_101272888()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101886B68);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101886B68);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLRunningBufferStats.h",  169,  "getMax");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101886B68);
  }

void sub_1012729FC()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10022376C())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101886B68);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101886B68);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLRunningBufferStats.h",  175,  "getMin");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101886B68);
  }

void sub_101272B70()
{
  if (qword_1019344C0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:CLSPUHIDDriverInterface calls must be made on motion thread, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101886B88);
      }
    }

    int v1 = (os_log_s *)qword_1019344C8;
    if (os_signpost_enabled((os_log_t)qword_1019344C8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLSPUHIDDriverInterface calls must be made on motion thread",  "{msg%{public}.0s:CLSPUHIDDriverInterface calls must be made on motion thread, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344C0 != -1) {
        dispatch_once(&qword_1019344C0, &stru_101886B88);
      }
    }

    int v2 = (os_log_s *)qword_1019344C8;
    if (os_log_type_enabled((os_log_t)qword_1019344C8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLSPUHIDDriverInterface calls must be made on motion thread, event:%{public, locati on:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLSPUHIDDriverInterface.mm",  185,  "assertOnMotionThread");
LABEL_11:
    dispatch_once(&qword_1019344C0, &stru_101886B88);
  }

#error "101272DB4: call analysis failed (funcsize=71)"
#error "101272F18: call analysis failed (funcsize=71)"
#error "10127307C: call analysis failed (funcsize=71)"
#error "1012731E0: call analysis failed (funcsize=72)"
#error "10127334C: call analysis failed (funcsize=72)"
#error "1012734B8: call analysis failed (funcsize=72)"
#error "101273624: call analysis failed (funcsize=72)"
#error "101273790: call analysis failed (funcsize=72)"
void sub_101273884()
{
  __assert_rtn( "set_confidence",  "CLPOutdoorEstimatorLogEntry.pb.h",  2250,  "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorConfidence_IsValid(value)");
}

void sub_1012738AC()
{
}

void sub_1012738D4()
{
}

void sub_1012738FC()
{
}

void sub_101273924()
{
}

void sub_10127394C()
{
}

#error "1012739EC: call analysis failed (funcsize=74)"
#error "101273B60: call analysis failed (funcsize=73)"
#error "101273CD0: call analysis failed (funcsize=74)"
#error "101273E44: call analysis failed (funcsize=73)"
#error "101273FB4: call analysis failed (funcsize=73)"
#error "101274124: call analysis failed (funcsize=73)"
#error "101274294: call analysis failed (funcsize=73)"
void sub_10127438C()
{
  os_log_s *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101887F60);
  }
  if (sub_100783FC0())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101887F60);
    }
  }

  if (sub_100783FE4())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v1,  v2,  v3,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101887F60);
    }
  }

  if (sub_100783FD4())
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, lo cation:escape_only}s}",  v4,  0x26u);
  }

void sub_101274514()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#SubArchiving not enabled. Inactive sub-archives cannot be determined., event:%{pub lic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101888098);
      }
    }

    int v1 = (os_log_s *)qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#SubArchiving not enabled. Inactive sub-archives cannot be determined.",  "{msg%{public}.0s:#SubArchiving not enabled. Inactive sub-archives cannot be determined., event:%{pub lic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_101888098);
      }
    }

    int v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#SubArchiving not enabled. Inactive sub-archives cannot be determined., event:%{pub lic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHRequestStore.m",  582,  "-[CLHRequestArchive inactiveSubArchives]");
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_101888098);
  }

uint64_t sub_1012746E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = 0LL;
  if (v4) {
    sub_100931258(v4);
  }
  uint64_t result = *a2;
  *a2 = 0LL;
  if (result) {
    return sub_100931258(result);
  }
  return result;
}

void sub_101274720()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018884F0);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_1018884F0);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLAppTileDataProvider.mm",  224,  "-[CLAppTileDataProvider fetchAppsForAreaAtLatitude:longitude:radius:includeRegionalApps:marqueeAppsOnly:withReply:]");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_1018884F0);
  }

void sub_1012748EC()
{
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:[CLAccessoryNotifier] getConfig should be running on motion thread, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101888620);
      }
    }

    int v1 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "[CLAccessoryNotifier] getConfig should be running on motion thread",  "{msg%{public}.0s:[CLAccessoryNotifier] getConfig should be running on motion thread, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101888620);
      }
    }

    int v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:[CLAccessoryNotifier] getConfig should be running on motion thread, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLAccessoryNotifier.mm",  313,  "getConfig");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_101888620);
  }

void sub_101274AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100E74348( "onTraversingSection",  "CLKeyLatLonTileTemplate.h",  a3,  "offsetEntries + numOfEntries <= entriesHeader.numOfEntries");
}

void sub_101274ADC()
{
  if (qword_101934830 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
    {
      sub_100E7A6A0();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid TileType value., tileType:%{private}d, event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101888FD8);
      }
    }

    int v1 = (os_log_s *)qword_101934838;
    if (os_signpost_enabled((os_log_t)qword_101934838))
    {
      sub_100E7A6A0();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid TileType value.",  "{msg%{public}.0s:Invalid TileType value., tileType:%{private}d, event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101888FD8);
      }
    }

    int v2 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
    {
      sub_100E7A6A0();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid TileType value., tileType:%{private}d, event:%{public, location:escape_ only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesSet.mm",  121,  "getTilesSet");
LABEL_11:
    dispatch_once(&qword_101934830, &stru_101888FD8);
  }

void sub_101274CAC()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101889308);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101889308);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/SensorRecorder/CLSensorRecorderNotifier.mm",  55,  "-[CLSensorRecorderNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101889308);
  }

void sub_101274E34()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018894A8);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_1018894A8);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_1018894A8);
  }

void sub_101274FA4()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018896A0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_1018896A0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BTLEBeaconProvider/CLBTLEBeaconProviderMock.mm",  17,  "-[CLBTLEBeaconProviderMockAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_1018896A0);
  }

void sub_101275124(void *a1)
{
  do
  {
    int v2 = (void *)*a1;
    sub_100527C2C((uint64_t)(a1 + 2));
    sub_100E8869C();
    a1 = v2;
  }

  while (v2);
  sub_10066A340();
}

void sub_101275154()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101889A78);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101889A78);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLBTLEFenceManager.mm",  18,  "-[CLBTLEFenceManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101889A78);
  }

#error "1012753A0: call analysis failed (funcsize=75)"
#error "101275514: call analysis failed (funcsize=76)"
#error "101275690: call analysis failed (funcsize=75)"
#error "10127580C: call analysis failed (funcsize=80)"
#error "101275984: call analysis failed (funcsize=72)"
#error "101275AF0: call analysis failed (funcsize=72)"
#error "101275C5C: call analysis failed (funcsize=72)"
#error "101275DC8: call analysis failed (funcsize=72)"
#error "101275F34: call analysis failed (funcsize=72)"
void sub_101276028(_DWORD *a1)
{
  os_log_s *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18[40];
  sub_100EA5E68();
  if (!v3) {
    dispatch_once(&qword_101934840, &stru_10188A778);
  }
  if (sub_100EA5E54())
  {
    sub_100042C54();
    sub_10005D608( (void *)&_mh_execute_header,  v4,  v5,  "{msg%{public}.0s:Just cofirming definitionMask on fault, event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  v6,  v7,  v8,  v9,  v18[0]);
    sub_100EA5E68();
    if (!v3) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
  }

  if (sub_100EA5E84())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v10,  v11,  "Just cofirming definitionMask on fault",  "{msg%{public}.0s:Just cofirming definitionMask on fault, event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  v18);
    sub_100EA5E68();
    if (!v3) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
  }

  if (sub_100EA5E74())
  {
    sub_100042C54();
    sub_10005D61C( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Just cofirming definitionMask on fault, event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18[0]);
  }

  *a1 = 266;
  sub_100042D70();
}

void sub_101276180(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934840, &stru_10188A778);
  }
  if (sub_100EA5E54())
  {
    sub_100042C54();
    sub_10005D608( (void *)&_mh_execute_header,  v4,  v5,  "{msg%{public}.0s:Just cofirming minor on fault, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  v6,  v7,  v8,  v9,  v18[0]);
    sub_100EA5E68();
    if (!v3) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
  }

  if (sub_100EA5E84())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v10,  v11,  "Just cofirming minor on fault",  "{msg%{public}.0s:Just cofirming minor on fault, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  v18);
    sub_100EA5E68();
    if (!v3) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
  }

  if (sub_100EA5E74())
  {
    sub_100042C54();
    sub_10005D61C( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Just cofirming minor on fault, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18[0]);
  }

  *a1 = 265;
  sub_100042D70();
}

void sub_1012762D8(_DWORD *a1)
{
  if (!v3) {
    dispatch_once(&qword_101934840, &stru_10188A778);
  }
  if (sub_100EA5E54())
  {
    sub_100042C54();
    sub_10005D608( (void *)&_mh_execute_header,  v4,  v5,  "{msg%{public}.0s:Just cofirming major on fault, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  v6,  v7,  v8,  v9,  v18[0]);
    sub_100EA5E68();
    if (!v3) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
  }

  if (sub_100EA5E84())
  {
    sub_100042C54();
    sub_100042C04( (void *)&_mh_execute_header,  v1,  v10,  v11,  "Just cofirming major on fault",  "{msg%{public}.0s:Just cofirming major on fault, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  v18);
    sub_100EA5E68();
    if (!v3) {
      dispatch_once(&qword_101934840, &stru_10188A778);
    }
  }

  if (sub_100EA5E74())
  {
    sub_100042C54();
    sub_10005D61C( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Just cofirming major on fault, event:%{public, location:escape_only}s, condition: %{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18[0]);
  }

  *a1 = 264;
  sub_100042D70();
}

void sub_101276430()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10027C134())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:HTTP header val must be string, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10188A7E0);
      }
    }

    if (sub_10027C158())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "HTTP header val must be string",  "{msg%{public}.0s:HTTP header val must be string, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10188A7E0);
      }
    }

    if (sub_10027C148())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:HTTP header val must be string, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHNetworkController.m",  77,  "-[CLHUploadRequest URLRequest]_block_invoke");
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10188A7E0);
  }

void sub_10127659C()
{
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10027C134())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:HTTP header key must be string, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10188A7E0);
      }
    }

    if (sub_10027C158())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "HTTP header key must be string",  "{msg%{public}.0s:HTTP header key must be string, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10188A7E0);
      }
    }

    if (sub_10027C148())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:HTTP header key must be string, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHNetworkController.m",  76,  "-[CLHUploadRequest URLRequest]_block_invoke");
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10188A7E0);
  }

void sub_101276708(void **a1, uint64_t a2, void **a3, uint64_t a4)
{
  int v7 = *a1;
  if (v7)
  {
    *(void *)(a4 + 216) = v7;
    operator delete(v7);
  }

  sub_10000AE14(a2);
  int v8 = *a3;
  if (*a3)
  {
    *(void *)(a4 + 96) = v8;
    operator delete(v8);
  }

void sub_101276768(void *a1)
{
  do
  {
    int v2 = (void *)*a1;
    sub_10000AE14((uint64_t)(a1 + 4));
    operator delete(a1);
    a1 = v2;
  }

  while (v2);
}

void sub_1012767A0()
{
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10188A900);
  }
  int v0 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:expecting results to correspond one-to-one with input, event:%{public, location:escap e_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10188A900);
    }
  }

  int v1 = (os_log_s *)qword_101934868;
  if (os_signpost_enabled((os_log_t)qword_101934868))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "expecting results to correspond one-to-one with input",  "{msg%{public}.0s:expecting results to correspond one-to-one with input, event:%{public, location:escap e_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10188A900);
    }
  }

  int v2 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:expecting results to correspond one-to-one with input, event:%{public, location:escap e_only}s, condition:%{private, location:escape_only}s}",  v3,  0x26u);
  }

void sub_101276964()
{
  if (qword_101934840 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100ECEF50())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:If zone specified minor, the entry minor must be equal, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188A9E0);
      }
    }

    if (sub_100ECEF74())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "If zone specified minor, the entry minor must be equal",  "{msg%{public}.0s:If zone specified minor, the entry minor must be equal, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188A9E0);
      }
    }

    if (sub_100ECEF64())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:If zone specified minor, the entry minor must be equal, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWPBridge.mm",  458,  "-[CLWPBridge _didTransitionZoneWithData:trueMajor:trueMinor:state:]_block_invoke");
LABEL_11:
    dispatch_once(&qword_101934840, &stru_10188A9E0);
  }

void sub_101276AD0()
{
  if (qword_101934840 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100ECEF50())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:If zone specified major, the entry major must be equal, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188A9E0);
      }
    }

    if (sub_100ECEF74())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "If zone specified major, the entry major must be equal",  "{msg%{public}.0s:If zone specified major, the entry major must be equal, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10188A9E0);
      }
    }

    if (sub_100ECEF64())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:If zone specified major, the entry major must be equal, event:%{public, location:es cape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWPBridge.mm",  456,  "-[CLWPBridge _didTransitionZoneWithData:trueMajor:trueMinor:state:]_block_invoke");
LABEL_11:
    dispatch_once(&qword_101934840, &stru_10188A9E0);
  }

void sub_101276C3C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188ABB0);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188ABB0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGpsAssistant.mm",  26,  "-[CLGpsAssistantAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10188ABB0);
  }

void sub_101276DC4()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10188AD20);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10188AD20);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10188AD20);
  }

void sub_101276F34(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v1,  v2,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v3,  v4,  v5,  v6,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_10188AF00);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v7,  v8,  v9,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v10,  v11,  v18,  v19,  v20,  v21,  v22);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_10188AF00);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v12,  v13,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm",  60,  "-[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]");
LABEL_11:
    dispatch_once(&qword_101934500, &stru_10188AF00);
  }

void sub_1012770A8()
{
  if (qword_101934500 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_10188AF00);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_10188AF00);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm",  97,  "-[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:]");
LABEL_11:
    dispatch_once(&qword_101934500, &stru_10188AF00);
  }

void sub_101277224()
{
  if (qword_101934500 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_10188AF00);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934500 != -1) {
        dispatch_once(&qword_101934500, &stru_10188AF00);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm",  127,  "-[CMActivityAlarmLocal initWithTrigger:duration:onRunLoop:withHandler:]");
LABEL_11:
    dispatch_once(&qword_101934500, &stru_10188AF00);
  }

#error "101277418: call analysis failed (funcsize=72)"
#error "101277584: call analysis failed (funcsize=72)"
#error "1012776F0: call analysis failed (funcsize=72)"
#error "10127785C: call analysis failed (funcsize=72)"
#error "1012779C8: call analysis failed (funcsize=72)"
void sub_101277ABC()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188B568);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188B568);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BTLEBeaconProvider/CLBTLEBeaconProvider.mm",  18,  "-[CLBTLEBeaconProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10188B568);
  }

void sub_101277C88()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188B738);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188B738);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/DarwinNotifier/CLDarwinNotifier.mm",  56,  "-[CLDarwinNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10188B738);
  }

void sub_101277E10()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10188B8E0);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10188B8E0);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10188B8E0);
  }

void sub_101277F80()
{
  if (qword_1019348B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed,fGEOMapFeatureAccess==nil, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
    }

    int v1 = (os_log_s *)qword_1019348B8;
    if (os_signpost_enabled((os_log_t)qword_1019348B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed,fGEOMapFeatureAccess==nil",  "{msg%{public}.0s:Assertion failed,fGEOMapFeatureAccess==nil, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188BA18);
      }
    }

    int v2 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed,fGEOMapFeatureAccess==nil, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLGeoMapFeatureAccessGeometryPedestrian.mm",  50,  "initializeMapsAPI");
LABEL_11:
    dispatch_once(&qword_1019348B0, &stru_10188BA18);
  }

void sub_10127814C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188C188);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188C188);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLBeaconFenceAuthorizationManager.mm",  19,  "-[CLBeaconFenceAuthorizationManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10188C188);
  }

void sub_101278318(void (***a1)(uint64_t))
{
  do
  {
    int v2 = *a1;
    (*a1[2])((uint64_t)(a1 + 2));
    operator delete(a1);
    a1 = (void (***)(uint64_t))v2;
  }

  while (v2);
}

void sub_101278358()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188CA08);
      }
    }

    int v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188CA08);
      }
    }

    int v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLBTLERangeManager.mm",  16,  "-[CLBTLERangeManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10188CA08);
  }

void sub_101278524()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188D198);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_10188D198);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Context/CLTurnState.mm",  28,  "-[CLTurnStateAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_10188D198);
  }

void sub_1012786AC()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10188D308);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_10188D308);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_10188D308);
  }

void sub_10127881C()
{
  if (qword_101934590 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10078B8F0())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10188D398);
      }
    }

    if (sub_10078B914())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10188D398);
      }
    }

    if (sub_10078B904())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp",  47,  "nearestSample");
LABEL_11:
    dispatch_once(&qword_101934590, &stru_10188D398);
  }

void sub_101278988()
{
  if (qword_101934590 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10078B8F0())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10188D398);
      }
    }

    if (sub_10078B914())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10188D398);
      }
    }

    if (sub_10078B904())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp",  198,  "windowFit");
LABEL_11:
    dispatch_once(&qword_101934590, &stru_10188D398);
  }

#error "101278B68: call analysis failed (funcsize=70)"
#error "101278CC8: call analysis failed (funcsize=70)"
#error "101278E28: call analysis failed (funcsize=70)"
#error "101278F88: call analysis failed (funcsize=70)"
#error "1012790E8: call analysis failed (funcsize=70)"
#error "101279248: call analysis failed (funcsize=70)"
#error "1012793A8: call analysis failed (funcsize=70)"
void sub_101279494()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_101934680 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#gfc Failed to stop monitoring before dealloc, event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10188DD20);
      }
    }

    int v1 = (os_log_s *)qword_101934688;
    if (os_signpost_enabled((os_log_t)qword_101934688))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#gfc Failed to stop monitoring before dealloc",  "{msg%{public}.0s:#gfc Failed to stop monitoring before dealloc, event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_10188DD20);
      }
    }

    int v2 = (os_log_s *)qword_101934688;
    if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#gfc Failed to stop monitoring before dealloc, event:%{public, location:escape_only }s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/Stop/CLWorkoutGeoFenceController.m",  124,  "-[CLWorkoutGeoFenceController dealloc]");
LABEL_11:
    dispatch_once(&qword_101934680, &stru_10188DD20);
  }

void sub_101279660()
{
  __assert_rtn("operator[]", "iterator_range_core.hpp", 389, "at >= 0");
}

void sub_101279688()
{
}

#error "101279728: call analysis failed (funcsize=72)"
#error "101279894: call analysis failed (funcsize=72)"
#error "101279A00: call analysis failed (funcsize=72)"
#error "101279B6C: call analysis failed (funcsize=72)"
#error "101279CD8: call analysis failed (funcsize=72)"
#error "101279E40: call analysis failed (funcsize=70)"
#error "101279FA0: call analysis failed (funcsize=71)"
#error "10127A108: call analysis failed (funcsize=71)"
#error "10127A270: call analysis failed (funcsize=71)"
#error "10127A3D8: call analysis failed (funcsize=71)"
#error "10127A540: call analysis failed (funcsize=71)"
void sub_10127A634()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[40];
  if (qword_1019349B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:missing completion handler, event:%{public, location:escape_only}s, condition:% {private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10188EE80);
      }
    }

    int v1 = (os_log_s *)qword_1019349B8;
    if (os_signpost_enabled((os_log_t)qword_1019349B8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "missing completion handler",  "{msg%{public}.0s:missing completion handler, event:%{public, location:escape_only}s, condition:% {private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349B0 != -1) {
        dispatch_once(&qword_1019349B0, &stru_10188EE80);
      }
    }

    int v2 = (os_log_s *)qword_1019349B8;
    if (os_log_type_enabled((os_log_t)qword_1019349B8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:missing completion handler, event:%{public, location:escape_only}s, condition:% {private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHLocationClassifier.m",  118,  "-[CLHLocationClassifier fetchLocationsOfInterestIfPossibleWithCompletionHandler:]");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1019349B0, &stru_10188EE80);
  }

void sub_10127A808()
{
  if (qword_1019345D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100F715F0())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Wrist State History should always be guaranteed to be non-empty., event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10188EEA0);
      }
    }

    if (sub_100F71614())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Wrist State History should always be guaranteed to be non-empty.",  "{msg%{public}.0s:Wrist State History should always be guaranteed to be non-empty., event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10188EEA0);
      }
    }

    if (sub_100F71604())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Wrist State History should always be guaranteed to be non-empty., event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallWristState.mm",  44,  "updateChargerAndWristState");
LABEL_11:
    dispatch_once(&qword_1019345D0, &stru_10188EEA0);
  }

void sub_10127A974()
{
  if (qword_1019345D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100F715F0())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Lock State History should always be guaranteed to be non-empty., event:%{public, lo cation:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10188EEA0);
      }
    }

    if (sub_100F71614())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Lock State History should always be guaranteed to be non-empty.",  "{msg%{public}.0s:Lock State History should always be guaranteed to be non-empty., event:%{public, lo cation:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10188EEA0);
      }
    }

    if (sub_100F71604())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Lock State History should always be guaranteed to be non-empty., event:%{public, lo cation:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallWristState.mm",  67,  "updateLockState");
LABEL_11:
    dispatch_once(&qword_1019345D0, &stru_10188EEA0);
  }

void sub_10127AAE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v24;
  a24 = v25;
  sub_100F81A54();
  if (!v26) {
    dispatch_once(&qword_101934830, &stru_10188FC48);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v27,  v28,  "{msg%{public}.0s:expecting mac to be in intermediate_results, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    sub_100F81A54();
    if (!v26) {
      dispatch_once(&qword_101934830, &stru_10188FC48);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v29,  v30,  v31,  "expecting mac to be in intermediate_results",  "{msg%{public}.0s:expecting mac to be in intermediate_results, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
    sub_100F81A54();
    if (!v26) {
      dispatch_once(&qword_101934830, &stru_10188FC48);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v32,  v33,  "{msg%{public}.0s:expecting mac to be in intermediate_results, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10127AC38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v24;
  a24 = v25;
  sub_100F81A54();
  if (!v26) {
    dispatch_once(&qword_101934830, &stru_10188FC48);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v27,  v28,  "{msg%{public}.0s:input-output lengths are not equal, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  &a9);
    sub_100F81A54();
    if (!v26) {
      dispatch_once(&qword_101934830, &stru_10188FC48);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v29,  v30,  v31,  "input-output lengths are not equal",  "{msg%{public}.0s:input-output lengths are not equal, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  &a9);
    sub_100F81A54();
    if (!v26) {
      dispatch_once(&qword_101934830, &stru_10188FC48);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v32,  v33,  "{msg%{public}.0s:input-output lengths are not equal, event:%{public, location:escape_only}s, conditi on:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10127AD90()
{
  if (!v1) {
    dispatch_once(&qword_101934860, &stru_10188FC28);
  }
  if (sub_100B77114())
  {
    sub_1008AC9E8();
    sub_1008ACAA0( (void *)&_mh_execute_header,  v2,  v3,  "{msg%{public}.0s:Invalid tile type, tileType:%{public}d, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v4,  v5,  v6,  v7,  v19);
    sub_100F81A60();
    if (!v1) {
      dispatch_once(&qword_101934860, &stru_10188FC28);
    }
  }

  if (sub_100B77144())
  {
    sub_1008AC9E8();
    sub_1008ACA68( (void *)&_mh_execute_header,  v8,  v9,  v10,  "Invalid tile type",  "{msg%{public}.0s:Invalid tile type, tileType:%{public}d, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v11,  v12,  v19);
    sub_100F81A60();
    if (!v1) {
      dispatch_once(&qword_101934860, &stru_10188FC28);
    }
  }

  if (sub_100042D04(*(os_log_s **)(v0 + 2152)))
  {
    sub_1008AC9E8();
    sub_1008ACAB4( (void *)&_mh_execute_header,  v13,  v14,  "{msg%{public}.0s:Invalid tile type, tileType:%{public}d, event:%{public, location:escape_only}s,  condition:%{private, location:escape_only}s}",  v15,  v16,  v17,  v18,  v19);
  }

  sub_1008ACA88();
}

void sub_10127AEEC()
{
  if (qword_101934860 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_1000397B8())
    {
      sub_100008D38();
      sub_100008DC0( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Fence key vector must have content, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v7);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10188FC28);
      }
    }

    if (sub_1000ECE18())
    {
      sub_100008D38();
      sub_100008D90( (void *)&_mh_execute_header,  v2,  v3,  v4,  "Fence key vector must have content",  "{msg%{public}.0s:Fence key vector must have content, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v7);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10188FC28);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100008DD0( (void *)&_mh_execute_header,  v5,  v6,  "{msg%{public}.0s:Fence key vector must have content, event:%{public, location:escape_only}s, condi tion:%{private, location:escape_only}s}",  v7);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm",  544,  "saveAlsAccessPoints");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_101934860, &stru_10188FC28);
  }

void sub_10127B07C(void *a1, void **a2)
{
  *a2 = __cxa_begin_catch(a1);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10188FC28);
  }
  if (sub_10003981C())
  {
    sub_10003980C();
    sub_1000397F0((void *)&_mh_execute_header, v2, v3, "sqlite error, %{private}s", v4, v5, v6, v7, 3u);
  }

  sub_100039828();
}

void sub_10127B130( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v24;
  a24 = v25;
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10188FC28);
  }
  if (sub_1000397B8())
  {
    sub_100008D64();
    sub_100008DC0( (void *)&_mh_execute_header,  v26,  v27,  "{msg%{public}.0s:invalid #tile header table connection., event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  &a9);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10188FC28);
    }
  }

  if (sub_1000ECE18())
  {
    sub_100008D64();
    sub_100008D90( (void *)&_mh_execute_header,  v28,  v29,  v30,  "invalid #tile header table connection.",  "{msg%{public}.0s:invalid #tile header table connection., event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  &a9);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10188FC28);
    }
  }

  if (sub_1000397C4())
  {
    sub_100008D64();
    sub_100008DD0( (void *)&_mh_execute_header,  v31,  v32,  "{msg%{public}.0s:invalid #tile header table connection., event:%{public, location:escape_only}s, con dition:%{private, location:escape_only}s}",  &a9);
  }

  sub_100042D70();
}

void sub_10127B294(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10127B2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

#error "10127B364: call analysis failed (funcsize=80)"
#error "10127B4DC: call analysis failed (funcsize=72)"
#error "10127B648: call analysis failed (funcsize=72)"
#error "10127B7B4: call analysis failed (funcsize=72)"
#error "10127B920: call analysis failed (funcsize=72)"
#error "10127BA8C: call analysis failed (funcsize=72)"
void sub_10127BB80(void ***a1)
{
  void **v1;
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1) {
    sub_100223734((int)a1, v1);
  }
}

void sub_10127BBA0()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101890A20);
      }
    }

    uint64_t v1 = (os_log_s *)qword_1019349D8;
    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101890A20);
      }
    }

    uint64_t v2 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierClientAdapter.mm",  48,  "-[CLNotifierClientAdapter onNotification:withData:]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101890A20);
  }

void sub_10127BD6C()
{
}

void sub_10127BD94()
{
}

void sub_10127BDBC()
{
}

void sub_10127BDE4()
{
}

void sub_10127BE0C()
{
}

void sub_10127BE34()
{
}

void sub_10127BE5C()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Invalid child event payload!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018910B0);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Invalid child event payload!",  "{msg%{public}.0s:Invalid child event payload!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018910B0);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Invalid child event payload!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm",  28,  "sensorTimeFromHidChildEvent");
LABEL_11:
    dispatch_once(&qword_101934570, &stru_1018910B0);
  }

void sub_10127BFC8()
{
  if (qword_101934570 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_10058B8FC())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Unexpected sensor time length!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018910B0);
      }
    }

    if (sub_10058B920())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Unexpected sensor time length!",  "{msg%{public}.0s:Unexpected sensor time length!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934570 != -1) {
        dispatch_once(&qword_101934570, &stru_1018910B0);
      }
    }

    if (sub_10058B910())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Unexpected sensor time length!, event:%{public, location:escape_only}s, condition :%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm",  29,  "sensorTimeFromHidChildEvent");
LABEL_11:
    dispatch_once(&qword_101934570, &stru_1018910B0);
  }

#error "10127C1A8: call analysis failed (funcsize=71)"
#error "10127C310: call analysis failed (funcsize=71)"
#error "10127C478: call analysis failed (funcsize=71)"
#error "10127C5E0: call analysis failed (funcsize=71)"
#error "10127C748: call analysis failed (funcsize=71)"
#error "10127C8B0: call analysis failed (funcsize=71)"
#error "10127CA1C: call analysis failed (funcsize=72)"
#error "10127CB88: call analysis failed (funcsize=72)"
#error "10127CCF4: call analysis failed (funcsize=72)"
#error "10127CE60: call analysis failed (funcsize=72)"
#error "10127CFCC: call analysis failed (funcsize=72)"
void sub_10127D0C0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100FBE604())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101892290);
      }
    }

    if (sub_100FBE628())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101892290);
      }
    }

    if (sub_100FBE618())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm",  58,  "-[CLNotifierServiceAdapter setAdaptedNotifier:]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101892290);
  }

void sub_10127D22C()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100FBE604())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101892290);
      }
    }

    if (sub_100FBE628())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101892290);
      }
    }

    if (sub_100FBE618())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm",  48,  "-[CLNotifierServiceAdapter setAdaptedNotifier:]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101892290);
  }

void sub_10127D398()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100FBE604())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101892290);
      }
    }

    if (sub_100FBE628())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101892290);
      }
    }

    if (sub_100FBE618())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm",  100,  "-[CLNotifierServiceAdapter notifierClientNumForCoparty:]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101892290);
  }

void sub_10127D504()
{
}

void sub_10127D52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

#error "10127D5D8: call analysis failed (funcsize=80)"
#error "10127D750: call analysis failed (funcsize=72)"
#error "10127D8BC: call analysis failed (funcsize=72)"
#error "10127DA28: call analysis failed (funcsize=72)"
#error "10127DB94: call analysis failed (funcsize=72)"
#error "10127DD00: call analysis failed (funcsize=72)"
#error "10127DE6C: call analysis failed (funcsize=72)"
#error "10127DFD8: call analysis failed (funcsize=72)"
#error "10127E144: call analysis failed (funcsize=72)"
#error "10127E2B0: call analysis failed (funcsize=72)"
#error "10127E41C: call analysis failed (funcsize=72)"
void sub_10127E510()
{
  __assert_rtn("Initialize", "hmm.h", 345, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_10127E538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100FE2D4C("operator double", "cnmatrixbase.h", a3, "num_elements_ == 1");
}

void sub_10127E55C()
{
  __assert_rtn( "Initialize",  "hmm.h",  341,  "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_10127E584()
{
}

void sub_10127E5AC()
{
}

void sub_10127E5D4()
{
  __assert_rtn("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
}

void sub_10127E5FC()
{
  __assert_rtn("Update", "hmm.h", 669, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_10127E624()
{
  __assert_rtn("Update", "hmm.h", 657, "Length(eArgs) == ne_u32");
}

void sub_10127E64C()
{
  __assert_rtn("Update", "hmm.h", 656, "Length(eFuncs) == ne_u32");
}

void sub_10127E674()
{
  __assert_rtn( "Update",  "hmm.h",  650,  "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_10127E69C()
{
  __assert_rtn("Update", "hmm.h", 641, "Length(xbar) == nx_u32");
}

void sub_10127E6C4()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2337, "in_nr >= 0");
}

void sub_10127E6EC()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2339, "in_nr <= max_nr");
}

void sub_10127E714()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2340, "in_nc >= 0");
}

void sub_10127E73C()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2342, "in_nc <= max_nc");
}

void sub_10127E764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100FE2D14("TransposeDataFootprint", "cnmatrix.h", a3, "scratch != nullptr");
}

void sub_10127E788(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10127E7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100FE2D44("operator()", "cnmatrixbase.h", a3, "data_ != __null");
}

void sub_10127E7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100FE2D3C("operator()", "cnmatrixbase.h", a3, "idx >= 0");
}

void sub_10127E7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10127E818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100FE2D2C("operator()", "cnmatrixbase.h", a3, "data_ != __null");
}

void sub_10127E83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100FE2D24("operator()", "cnmatrixbase.h", a3, "idx >= 0");
}

void sub_10127E860(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10127E884()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4900, "d == 1 || d == 2");
}

void sub_10127E8AC()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4904, "B.max_num_cols_ >= A.num_cols_");
}

void sub_10127E8D4()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4908, "B.max_num_rows_ >= A.num_rows_");
}

void sub_10127E8FC()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3818, "&(B) != &(C)");
}

void sub_10127E924()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2294, "in_nr >= 0");
}

void sub_10127E94C()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2295, "in_nc >= 0");
}

void sub_10127E974()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2300, "in_nr <= max_nr");
}

void sub_10127E99C()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2302, "in_nc <= max_nc");
}

void sub_10127E9C4()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2297, "in_nr*in_nc == A.num_elements_");
}

void sub_10127E9EC()
{
  __assert_rtn("operator=", "cnmatrixbase.h", 619, "this->max_num_rows_ >= A.num_rows_");
}

void sub_10127EA14()
{
  __assert_rtn("operator=", "cnmatrixbase.h", 620, "this->max_num_cols_ >= A.num_cols_");
}

void sub_10127EA3C()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 913, "data_ != __null");
}

void sub_10127EA64()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 914, "idx >= 0");
}

void sub_10127EA8C()
{
}

void sub_10127EAB4()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2378, "in_nr <= max_nr");
}

void sub_10127EADC()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2379, "in_nc >= 0");
}

void sub_10127EB04()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2381, "in_nc <= max_nc");
}

void sub_10127EB2C()
{
  __assert_rtn("WriteValue", "cnmatrixbase.h", 1104, "data_ != __null");
}

void sub_10127EB54()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 881, "data_ != __null");
}

void sub_10127EB7C()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 882, "idx >= 0");
}

void sub_10127EBA4()
{
}

void sub_10127EBCC()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2456, "in_nr <= max_nr");
}

void sub_10127EBF4()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2458, "in_nc <= max_nc");
}

void sub_10127EC1C()
{
}

void sub_10127EC44()
{
  __assert_rtn("Predict", "hmm.h", 438, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_10127EC6C()
{
  __assert_rtn( "Predict",  "hmm.h",  425,  "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_10127EC94()
{
  __assert_rtn("Predict", "hmm.h", 416, "Length(x) == nx_u32");
}

void sub_10127ECBC()
{
}

void sub_10127ECE4()
{
  __assert_rtn("TransitionProbabilitiesAreValid", "hmm.h", 113, "tMat.NumRows() == nx_u32 && tMat.NumCols() == nx_u32");
}

void sub_10127ED0C()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 815, "data_ != __null");
}

void sub_10127ED34()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 816, "idx >= 0");
}

void sub_10127ED5C()
{
}

void sub_10127ED84()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3887, "&(A) != &(C)");
}

void sub_10127EDAC()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3888, "&(B) != &(C)");
}

void sub_10127EDD4()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3885, "A.num_cols_ == B.num_rows_");
}

void sub_10127EDFC()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:unknown in-useness level enum passed to encodeInUseLevelAsInteger, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101893800);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "unknown in-useness level enum passed to encodeInUseLevelAsInteger",  "{msg%{public}.0s:unknown in-useness level enum passed to encodeInUseLevelAsInteger, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101893800);
      }
    }

    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:unknown in-useness level enum passed to encodeInUseLevelAsInteger, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Type.mm",  380,  "encodeInUseLevelAsInteger");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101893800);
  }

void sub_10127EFC8()
{
  if (qword_101934980 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:level int is out of range for in-use level, level:%{public}d, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101893800);
      }
    }

    int v1 = (os_log_s *)qword_101934988;
    if (os_signpost_enabled((os_log_t)qword_101934988))
    {
      sub_100042C1C();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "level int is out of range for in-use level",  "{msg%{public}.0s:level int is out of range for in-use level, level:%{public}d, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_101893800);
      }
    }

    int v2 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      sub_100042C1C();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:level int is out of range for in-use level, level:%{public}d, event:%{public, l ocation:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Type.mm",  385,  "decodeInUseLevelFromInteger");
LABEL_11:
    dispatch_once(&qword_101934980, &stru_101893800);
  }

#error "10127F218: call analysis failed (funcsize=75)"
#error "10127F38C: call analysis failed (funcsize=75)"
void sub_10127F480()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t v3[40];
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101893DE8);
  }
  int v0 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Fence: combined, no key, event:%{public, location:escape_only}s, condition:%{priv ate, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
  }

  int v1 = (os_log_s *)qword_101934878;
  if (os_signpost_enabled((os_log_t)qword_101934878))
  {
    sub_100008D64();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Fence: combined, no key",  "{msg%{public}.0s:Fence: combined, no key, event:%{public, location:escape_only}s, condition:%{priv ate, location:escape_only}s}",  v3,  0x26u);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101893DE8);
    }
  }

  int v2 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_INFO))
  {
    sub_100008D64();
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Fence: combined, no key, event:%{public, location:escape_only}s, condition:%{priv ate, location:escape_only}s}",  v3,  0x26u);
  }

void sub_10127F644()
{
  if (qword_101934A70 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101893EC8);
      }
    }

    int v1 = (os_log_s *)qword_101934A78;
    if (os_signpost_enabled((os_log_t)qword_101934A78))
    {
      sub_100008D38();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101893EC8);
      }
    }

    int v2 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_INFO))
    {
      sub_100008D38();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x26u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Transit/CLTransitTilePreloaderExternal.mm",  37,  "requestTileDownload");
LABEL_11:
    dispatch_once(&qword_101934A70, &stru_101893EC8);
  }

void sub_10127F810()
{
  if (qword_1019349D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_FAULT))
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101894018);
      }
    }

    if (os_signpost_enabled((os_log_t)qword_1019349D8))
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "Assertion failed",  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_1019349D0 != -1) {
        dispatch_once(&qword_1019349D0, &stru_101894018);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:Assertion failed, event:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Vehicle/CLVehicleStateNotifier.mm",  108,  "-[CLVehicleStateNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1019349D0, &stru_101894018);
  }

void sub_10127F998()
{
  if (qword_101934470 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100281AA8())
    {
      sub_100008D38();
      sub_100014140( (void *)&_mh_execute_header,  v0,  v1,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v2,  v3,  v4,  v5,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101894240);
      }
    }

    if (sub_1002344A4())
    {
      sub_100008D38();
      sub_100014120( (void *)&_mh_execute_header,  v6,  v7,  v8,  "The total size of the POD types on the 2 architectures is expected to be the same.",  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v9,  v10,  v17,  v18,  v19,  v20,  v21);
      if (qword_101934470 != -1) {
        dispatch_once(&qword_101934470, &stru_101894240);
      }
    }

    if (sub_1000397C4())
    {
      sub_100008D38();
      sub_100014154( (void *)&_mh_execute_header,  v11,  v12,  "{msg%{public}.0s:The total size of the POD types on the 2 architectures is expected to be the same., e vent:%{public, location:escape_only}s, condition:%{private, location:escape_only}s}",  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h",  244,  "operator()");
LABEL_11:
    dispatch_once(&qword_101934470, &stru_101894240);
  }

void sub_10127FB08()
{
  __assert_rtn( "onTraversingSection",  "CLKeyLatLonTileTemplate.h",  1073,  "offsetEntries + numOfEntries <= entriesHeader.numOfEntries");
}

#error "10127FBA4: call analysis failed (funcsize=71)"
#error "10127FD0C: call analysis failed (funcsize=70)"
#error "10127FE6C: call analysis failed (funcsize=70)"
#error "10127FFCC: call analysis failed (funcsize=70)"
#error "10128012C: call analysis failed (funcsize=70)"
#error "10128028C: call analysis failed (funcsize=70)"
#error "1012803EC: call analysis failed (funcsize=70)"
#error "101280560: call analysis failed (funcsize=80)"
#error "1012806D8: call analysis failed (funcsize=72)"
#error "101280844: call analysis failed (funcsize=72)"
#error "1012809B0: call analysis failed (funcsize=72)"
#error "101280B1C: call analysis failed (funcsize=72)"
#error "101280C88: call analysis failed (funcsize=72)"
#error "101280DFC: call analysis failed (funcsize=75)"
void sub_101280EF0()
{
  __assert_rtn("addAggregationRule", "CLActivityAggregator.h", 62, "fRules.back().timeFromCurrentS < timeFromCurrentS");
}

void sub_101280F18()
{
}

#error "101280FC0: call analysis failed (funcsize=75)"
#error "101281134: call analysis failed (funcsize=75)"
#error "1012812A8: call analysis failed (funcsize=75)"
#error "10128141C: call analysis failed (funcsize=75)"
#error "101281590: call analysis failed (funcsize=75)"
#error "101281704: call analysis failed (funcsize=75)"
#error "101281878: call analysis failed (funcsize=75)"
void sub_10128196C()
{
  os_log_s *v0;
  os_log_s *v1;
  os_log_s *v2;
  uint8_t buf[56];
  if (qword_1019344B0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    int v0 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895CF0);
      }
    }

    int v1 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      sub_100042C80();
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v1,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Wiring bug, should not be subscribed to ",  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101895CF0);
      }
    }

    int v2 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      sub_100042C80();
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Wiring bug, should not be subscribed to , notification:%{public}d, event:%{publ ic, location:escape_only}s, condition:%{private, location:escape_only}s}",  buf,  0x2Cu);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimNotifier.mm",  720,  "onWatchOrientationSettingsNotification");
LABEL_11:
    dispatch_once(&qword_1019344B0, &stru_101895CF0);
  }

#error "101281BC8: call analysis failed (funcsize=75)"
void sub_101281CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;
  sub_10104FCD8(__stack_chk_guard);
  sub_10104FCC4();
  sub_10104FCB4( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "ERROR,Die,Time,%.3f,Function,%s,fForestSize is 0\n",  v1,  v2,  v3,  v4,  v5);
  sub_10104FCE0();
}

void sub_101281D30()
{
}

void sub_101281DA4()
{
}

void sub_101281E18()
{
}

void sub_101281E8C()
{
}

#error "101281F78: call analysis failed (funcsize=72)"
#error "1012820E4: call analysis failed (funcsize=72)"
#error "101282250: call analysis failed (funcsize=72)"
#error "1012823BC: call analysis failed (funcsize=72)"
#error "101282528: call analysis failed (funcsize=72)"
void sub_10128261C()
{
  __assert_rtn( "setFlushTimeoutSeconds_block_invoke",  "MSLWriter.cpp",  56,  "(fFd == -1) && (Writer::setFlushTimeout() must be called before ::open().)");
}

void sub_101282644(uint64_t a1, void *a2, os_log_t log)
{
  int v3 = 136446210;
  uint64_t v4 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Unable to create directory at path: %{public}s",  (uint8_t *)&v3,  0xCu);
}

uint64_t sub_1012826C8(os_log_t log)
{
  int v2 = 136315650;
  int v3 = "assert";
  __int16 v4 = 2080;
  uint8_t v5 = "fValid";
  __int16 v6 = 2080;
  int v7 = "On call to writeItem client should check if the logger was opened";
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Event: %s\n Condition: %s\n Message: %s",  (uint8_t *)&v2,  0x20u);
  if (qword_1019A0590 == -1) {
    return 1LL;
  }
  dispatch_once(&qword_1019A0590, &stru_10189D320);
  return 0LL;
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return _[a1 App];
}

id objc_msgSend_BMIFromHeight_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BMIFromHeight:weight:");
}

id objc_msgSend_CLMotionActivityTypeFromCMWorkoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLMotionActivityTypeFromCMWorkoutType:");
}

id objc_msgSend_CLMotionTimeRangeFromCMMotionTimeRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLMotionTimeRangeFromCMMotionTimeRange:");
}

id objc_msgSend_CMSwimWorkoutLocationFromCMWorkoutLocationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CMSwimWorkoutLocationFromCMWorkoutLocationType:");
}

id objc_msgSend_CMWorkoutTypeFromCLMotionActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CMWorkoutTypeFromCLMotionActivityType:");
}

id objc_msgSend_DSLPublisher(void *a1, const char *a2, ...)
{
  return _[a1 DSLPublisher];
}

id objc_msgSend_F01(void *a1, const char *a2, ...)
{
  return _[a1 F01];
}

id objc_msgSend_ID(void *a1, const char *a2, ...)
{
  return _[a1 ID];
}

id objc_msgSend_ISOcountryCode(void *a1, const char *a2, ...)
{
  return _[a1 ISOcountryCode];
}

id objc_msgSend_InFocus(void *a1, const char *a2, ...)
{
  return _[a1 InFocus];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_Location(void *a1, const char *a2, ...)
{
  return _[a1 Location];
}

id objc_msgSend_Media(void *a1, const char *a2, ...)
{
  return _[a1 Media];
}

id objc_msgSend_MicroLocationVisit(void *a1, const char *a2, ...)
{
  return _[a1 MicroLocationVisit];
}

id objc_msgSend_NowPlaying(void *a1, const char *a2, ...)
{
  return _[a1 NowPlaying];
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return _[a1 RSSI];
}

id objc_msgSend_SleepMode(void *a1, const char *a2, ...)
{
  return _[a1 SleepMode];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLBagForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLBagForContext:");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLRequest(void *a1, const char *a2, ...)
{
  return _[a1 URLRequest];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLsForDirectory_inDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLsForDirectory:inDomains:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_UUIDWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDWithString:");
}

id objc_msgSend_UserFocus(void *a1, const char *a2, ...)
{
  return _[a1 UserFocus];
}

id objc_msgSend_VO2MaxInputFromCMVO2MaxInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "VO2MaxInputFromCMVO2MaxInputs:");
}

id objc_msgSend__CLCommonIsBundleSystemService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_CLCommonIsBundleSystemService:");
}

id objc_msgSend___imHexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imHexString");
}

id objc_msgSend__addLogger_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addLogger:type:");
}

id objc_msgSend__alignElevationArray_andLocationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alignElevationArray:andLocationArray:");
}

id objc_msgSend__backwardProcessingWithKFEstimatesBuffer_andKSEstimatesBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backwardProcessingWithKFEstimatesBuffer:andKSEstimatesBuffer:");
}

id objc_msgSend__cacheAlternativeIdentities(void *a1, const char *a2, ...)
{
  return _[a1 _cacheAlternativeIdentities];
}

id objc_msgSend__cacheSystemServicesMap(void *a1, const char *a2, ...)
{
  return _[a1 _cacheSystemServicesMap];
}

id objc_msgSend__calculateTimeStartEndDistanceGpsPed(void *a1, const char *a2, ...)
{
  return _[a1 _calculateTimeStartEndDistanceGpsPed];
}

id objc_msgSend__ckpToAccessGivenKey_andInputKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ckpToAccessGivenKey:andInputKeyPath:");
}

id objc_msgSend__cl_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_initWithFileDescriptor:");
}

id objc_msgSend__clearBuffers(void *a1, const char *a2, ...)
{
  return _[a1 _clearBuffers];
}

id objc_msgSend__closeCurrentTrack(void *a1, const char *a2, ...)
{
  return _[a1 _closeCurrentTrack];
}

id objc_msgSend__closeTrackCheckGpsLocation(void *a1, const char *a2, ...)
{
  return _[a1 _closeTrackCheckGpsLocation];
}

id objc_msgSend__closeTrackCheckGpsOdometer(void *a1, const char *a2, ...)
{
  return _[a1 _closeTrackCheckGpsOdometer];
}

id objc_msgSend__closeTrackCheckPedometer(void *a1, const char *a2, ...)
{
  return _[a1 _closeTrackCheckPedometer];
}

id objc_msgSend__currentFilename(void *a1, const char *a2, ...)
{
  return _[a1 _currentFilename];
}

id objc_msgSend__decimateElevationsWithStartTime_andEndTime_andLocationArray_andElevationArray_andAggregatedLocationArray_andRawElevationArray_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_decimateElevationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andAggregatedLocationArray:and RawElevationArray:");
}

id objc_msgSend__decimateLocationsWithStartTime_andEndTime_andLocationArray_andElevationArray_andRawLocationArray_andRawElevationArray_andTaskType_andVisitArray_andVisitSearchStartIndex_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_decimateLocationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andRawLocationArray:andRawEleva tionArray:andTaskType:andVisitArray:andVisitSearchStartIndex:");
}

id objc_msgSend__deriveAndCacheSystemServicesMap(void *a1, const char *a2, ...)
{
  return _[a1 _deriveAndCacheSystemServicesMap];
}

id objc_msgSend__dictionaryForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dictionaryForKey:atKeyPath:");
}

id objc_msgSend__didTransitionZoneWithData_trueMajor_trueMinor_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didTransitionZoneWithData:trueMajor:trueMinor:state:");
}

id objc_msgSend__doSigningWhenReady(void *a1, const char *a2, ...)
{
  return _[a1 _doSigningWhenReady];
}

id objc_msgSend__elevationBatchProcessingWithStartTime_andEndTime_andLocationBuffer_andKSEstimatesBuffer_andTaskType_andCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:");
}

id objc_msgSend__extremaRemovedMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extremaRemovedMean:");
}

id objc_msgSend__feedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedLocation:");
}

id objc_msgSend__fetchPlaceInferencesWithFidelityPolicy_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPlaceInferencesWithFidelityPolicy:handler:");
}

id objc_msgSend__filterGpsLocationBuffer(void *a1, const char *a2, ...)
{
  return _[a1 _filterGpsLocationBuffer];
}

id objc_msgSend__forEachLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachLogger:");
}

id objc_msgSend__forEachLoggerWithType_logItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachLoggerWithType:logItem:");
}

id objc_msgSend__forwardProcessingWithLocationArray_andElevationArray_andKFEstimatesBuffer_andKeepAllLocations_andTaskType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_forwardProcessingWithLocationArray:andElevationArray:andKFEstimatesBuffer:andKeepAllLocations:andTaskType:");
}

id objc_msgSend__gatherLocationArray_andElevationArray_andTaskType_withStartTime_andEndTime_andVisitArray_andVisitSearchStartIndex_andCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStart Index:andCompletionBlock:");
}

id objc_msgSend__getDefaultDeniedSystemServices(void *a1, const char *a2, ...)
{
  return _[a1 _getDefaultDeniedSystemServices];
}

id objc_msgSend__getElevationStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getElevationStartIndex:");
}

id objc_msgSend__getLastPredictionIndexWithKFEstimatesBuffer_fromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getLastPredictionIndexWithKFEstimatesBuffer:fromIndex:");
}

id objc_msgSend__getTimestampWithElevationArray_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getTimestampWithElevationArray:atIndex:");
}

id objc_msgSend__getTimestampWithLocationArray_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getTimestampWithLocationArray:atIndex:");
}

id objc_msgSend__initKalmanFilter_withLocationArray_andElevationArray_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initKalmanFilter:withLocationArray:andElevationArray:andTaskType:");
}

id objc_msgSend__initWithRTPlaceInference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithRTPlaceInference:");
}

id objc_msgSend__initWithUUID_major_minor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithUUID:major:minor:");
}

id objc_msgSend__initializeMescalWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeMescalWithCompletion:");
}

id objc_msgSend__insertSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertSample:");
}

id objc_msgSend__internalMigrationClearUnknownKeys(void *a1, const char *a2, ...)
{
  return _[a1 _internalMigrationClearUnknownKeys];
}

id objc_msgSend__internalMigrationLegacyKeys(void *a1, const char *a2, ...)
{
  return _[a1 _internalMigrationLegacyKeys];
}

id objc_msgSend__internalMigrationRegisterAllClients(void *a1, const char *a2, ...)
{
  return _[a1 _internalMigrationRegisterAllClients];
}

id objc_msgSend__interpolatePressureValuesWithElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpolatePressureValuesWithElevationArray:");
}

id objc_msgSend__invalidateSpeedEstimate(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateSpeedEstimate];
}

id objc_msgSend__isBundlePathReachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBundlePathReachable:");
}

id objc_msgSend__isStoreConnected(void *a1, const char *a2, ...)
{
  return _[a1 _isStoreConnected];
}

id objc_msgSend__isValidAuthLimitedKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidAuthLimitedKeyPath:");
}

id objc_msgSend__kalmanSmootherUpdateWithKFEstimatesBuffer_andKSEstimatesBuffer_andCurrPredictionIndex_andNextPredictionIndex_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_kalmanSmootherUpdateWithKFEstimatesBuffer:andKSEstimatesBuffer:andCurrPredictionIndex:andNextPredictionIndex:");
}

id objc_msgSend__logValuesOfFilteredLocations_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logValuesOfFilteredLocations:andTaskType:");
}

id objc_msgSend__logValuesOfLocationArray_andElevationArray_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logValuesOfLocationArray:andElevationArray:andTaskType:");
}

id objc_msgSend__loiIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _loiIdentifier];
}

id objc_msgSend__measurementUpdate_withLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_measurementUpdate:withLocation:");
}

id objc_msgSend__mescalSignerNSURLSession(void *a1, const char *a2, ...)
{
  return _[a1 _mescalSignerNSURLSession];
}

id objc_msgSend__onBluetoothServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onBluetoothServiceNotification:data:");
}

id objc_msgSend__onDaemonStatusNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onDaemonStatusNotification:data:");
}

id objc_msgSend__onWifiServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onWifiServiceNotification:data:");
}

id objc_msgSend__outputStream(void *a1, const char *a2, ...)
{
  return _[a1 _outputStream];
}

id objc_msgSend__placeInference(void *a1, const char *a2, ...)
{
  return _[a1 _placeInference];
}

id objc_msgSend__predictionUpdate_withElevation_withNextElevation_withTravelVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predictionUpdate:withElevation:withNextElevation:withTravelVelocity:");
}

id objc_msgSend__queryVisitStateByTimestamp_withHistoricalVisits_andVisitSearchStartIndex_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryVisitStateByTimestamp:withHistoricalVisits:andVisitSearchStartIndex:");
}

id objc_msgSend__recomputeCoexImpactedStateAndNotifyClients(void *a1, const char *a2, ...)
{
  return _[a1 _recomputeCoexImpactedStateAndNotifyClients];
}

id objc_msgSend__registerForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForNotifications];
}

id objc_msgSend__rejectOutlyingLocation_withKFEstimates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rejectOutlyingLocation:withKFEstimates:");
}

id objc_msgSend__removeAdditionalInconsistentSpeedPedometerEntries(void *a1, const char *a2, ...)
{
  return _[a1 _removeAdditionalInconsistentSpeedPedometerEntries];
}

id objc_msgSend__removeDictionaryAtKeyPath_shouldLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDictionaryAtKeyPath:shouldLog:");
}

id objc_msgSend__removeInVisitLocation_withVisitArray_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeInVisitLocation:withVisitArray:andVisitSearchStartIndex:");
}

id objc_msgSend__sendElevationsFromEstimates_startIndex_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendElevationsFromEstimates:startIndex:withCompletionBlock:");
}

id objc_msgSend__sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer_andCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer:andCompletionBlock:");
}

id objc_msgSend__sendMessage_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:identifier:error:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setResponseSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setResponseSilo:");
}

id objc_msgSend__setUpDefaultDeniedSystemServices(void *a1, const char *a2, ...)
{
  return _[a1 _setUpDefaultDeniedSystemServices];
}

id objc_msgSend__setXPCCriteriaForActivity_withDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setXPCCriteriaForActivity:withDescription:");
}

id objc_msgSend__setupSystemServiceDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _setupSystemServiceDictionaries];
}

id objc_msgSend__shouldRotate(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRotate];
}

id objc_msgSend__shouldRotateToHour_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRotateToHour:date:");
}

id objc_msgSend__startAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 _startAdvertising];
}

id objc_msgSend__stopLoggingOnQueue(void *a1, const char *a2, ...)
{
  return _[a1 _stopLoggingOnQueue];
}

id objc_msgSend__unboostingRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 _unboostingRemoteObjectProxy];
}

id objc_msgSend__unregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterForNotifications];
}

id objc_msgSend__updateGpsLocationBufferFiltered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGpsLocationBufferFiltered:");
}

id objc_msgSend__updateLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocation:");
}

id objc_msgSend__valueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:atKeyPath:");
}

id objc_msgSend__visitWithVisit_authDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visitWithVisit:authDate:");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isManagedAppleID");
}

id objc_msgSend_absoluteAltitudeUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteAltitudeUpdate:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_acceleration(void *a1, const char *a2, ...)
{
  return _[a1 acceleration];
}

id objc_msgSend_accelerometerDataFromDate_toDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accelerometerDataFromDate:toDate:");
}

id objc_msgSend_accountChangeEvent(void *a1, const char *a2, ...)
{
  return _[a1 accountChangeEvent];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _[a1 accountStatus];
}

id objc_msgSend_accountTypeWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithIdentifier:completion:");
}

id objc_msgSend_accountsWithAccountType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsWithAccountType:completion:");
}

id objc_msgSend_accuracy(void *a1, const char *a2, ...)
{
  return _[a1 accuracy];
}

id objc_msgSend_acknowledgeAlarm_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeAlarm:withReply:");
}

id objc_msgSend_acquireTokenWithSettings_publisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireTokenWithSettings:publisher:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_actOnPendingDeleteForClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actOnPendingDeleteForClientKey:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateClientDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateClientDevice:");
}

id objc_msgSend_activateRapportLinkIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 activateRapportLinkIfNecessary];
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activeAccessory(void *a1, const char *a2, ...)
{
  return _[a1 activeAccessory];
}

id objc_msgSend_activeClients(void *a1, const char *a2, ...)
{
  return _[a1 activeClients];
}

id objc_msgSend_activeDeviceNearbyStatus(void *a1, const char *a2, ...)
{
  return _[a1 activeDeviceNearbyStatus];
}

id objc_msgSend_activeDeviceSelectorBlock(void *a1, const char *a2, ...)
{
  return _[a1 activeDeviceSelectorBlock];
}

id objc_msgSend_activeDevices(void *a1, const char *a2, ...)
{
  return _[a1 activeDevices];
}

id objc_msgSend_activeFenceSessions(void *a1, const char *a2, ...)
{
  return _[a1 activeFenceSessions];
}

id objc_msgSend_activeIntervalEvents(void *a1, const char *a2, ...)
{
  return _[a1 activeIntervalEvents];
}

id objc_msgSend_activeOdometryClients(void *a1, const char *a2, ...)
{
  return _[a1 activeOdometryClients];
}

id objc_msgSend_activeRequestCleanupTimer(void *a1, const char *a2, ...)
{
  return _[a1 activeRequestCleanupTimer];
}

id objc_msgSend_activeRequests(void *a1, const char *a2, ...)
{
  return _[a1 activeRequests];
}

id objc_msgSend_activeStreamingClients(void *a1, const char *a2, ...)
{
  return _[a1 activeStreamingClients];
}

id objc_msgSend_activeSyncSession(void *a1, const char *a2, ...)
{
  return _[a1 activeSyncSession];
}

id objc_msgSend_activeTime(void *a1, const char *a2, ...)
{
  return _[a1 activeTime];
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _[a1 activity];
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return _[a1 activityAlarmAvailable];
}

id objc_msgSend_activityAttribution(void *a1, const char *a2, ...)
{
  return _[a1 activityAttribution];
}

id objc_msgSend_activityDuration(void *a1, const char *a2, ...)
{
  return _[a1 activityDuration];
}

id objc_msgSend_activityEndTime(void *a1, const char *a2, ...)
{
  return _[a1 activityEndTime];
}

id objc_msgSend_activityLoggerLogStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityLoggerLogStrideCalEntry:");
}

id objc_msgSend_activityOverrideMsg(void *a1, const char *a2, ...)
{
  return _[a1 activityOverrideMsg];
}

id objc_msgSend_adamId(void *a1, const char *a2, ...)
{
  return _[a1 adamId];
}

id objc_msgSend_adaptee(void *a1, const char *a2, ...)
{
  return _[a1 adaptee];
}

id objc_msgSend_adapter(void *a1, const char *a2, ...)
{
  return _[a1 adapter];
}

id objc_msgSend_addAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAlarm:");
}

id objc_msgSend_addCdmaCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCdmaCellTower:");
}

id objc_msgSend_addCdmaEvdoTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCdmaEvdoTower:");
}

id objc_msgSend_addCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCellTower:");
}

id objc_msgSend_addClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClient:");
}

id objc_msgSend_addClient_prepareSessionEndForSessionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClient:prepareSessionEndForSessionType:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDiscoveryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDiscoveryType:");
}

id objc_msgSend_addElevations_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addElevations:handler:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntry:");
}

id objc_msgSend_addEvent_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEvent:atTime:");
}

id objc_msgSend_addFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFence:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addInertialData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInertialData:");
}

id objc_msgSend_addInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInputs:");
}

id objc_msgSend_addInterestZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInterestZones:");
}

id objc_msgSend_addLatestCalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLatestCalData:");
}

id objc_msgSend_addLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocation:");
}

id objc_msgSend_addLocationFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocationFingerprint:");
}

id objc_msgSend_addLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLogger:");
}

id objc_msgSend_addLteCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLteCellTower:");
}

id objc_msgSend_addMacModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMacModes:");
}

id objc_msgSend_addMacs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMacs:");
}

id objc_msgSend_addMarkets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMarkets:");
}

id objc_msgSend_addModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addModes:");
}

id objc_msgSend_addMonitoredRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitoredRegion:");
}

id objc_msgSend_addMonitoringPeriodFrom_until_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitoringPeriodFrom:until:");
}

id objc_msgSend_addMonitoringRecord_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitoringRecord:forIdentifier:");
}

id objc_msgSend_addNr5GCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNr5GCellTower:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObject_withSyncSessionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:withSyncSessionReason:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addPendingDatabaseChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingDatabaseChanges:");
}

id objc_msgSend_addPendingRecordChanges_forZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordChanges:forZoneName:");
}

id objc_msgSend_addPendingRecordDeleteChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordDeleteChanges:");
}

id objc_msgSend_addPendingRecordSaveChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordSaveChanges:");
}

id objc_msgSend_addPendingRecordZoneChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordZoneChanges:");
}

id objc_msgSend_addPersistentStoreWithDescription_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPersistentStoreWithDescription:completionHandler:");
}

id objc_msgSend_addRecordIDsForSessionId_shouldUploadToOutputZone_shouldUploadToInputZone_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordIDsForSessionId:shouldUploadToOutputZone:shouldUploadToInputZone:");
}

id objc_msgSend_addRecordIDsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordIDsToSave:recordIDsToDelete:");
}

id objc_msgSend_addRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_addRegulatoryDomainEstimates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRegulatoryDomainEstimates:");
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequest:");
}

id objc_msgSend_addRequesterWithOutstandingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequesterWithOutstandingRequest:");
}

id objc_msgSend_addResponseListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResponseListener:");
}

id objc_msgSend_addRhythmicGnssClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRhythmicGnssClient:");
}

id objc_msgSend_addScdmaCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScdmaCellTower:");
}

id objc_msgSend_addSummaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSummaries:");
}

id objc_msgSend_addSurroundingWifiBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSurroundingWifiBands:");
}

id objc_msgSend_addTiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTiles:");
}

id objc_msgSend_addVectorClocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVectorClocks:");
}

id objc_msgSend_addWifiBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWifiBands:");
}

id objc_msgSend_addWirelessAP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWirelessAP:");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return _[a1 address];
}

id objc_msgSend_adjustMonitoringAccordingToClientLedgerDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustMonitoringAccordingToClientLedgerDictionary:");
}

id objc_msgSend_administrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 administrativeArea];
}

id objc_msgSend_advertisementData(void *a1, const char *a2, ...)
{
  return _[a1 advertisementData];
}

id objc_msgSend_advertiser(void *a1, const char *a2, ...)
{
  return _[a1 advertiser];
}

id objc_msgSend_afterInterval_async_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterInterval:async:");
}

id objc_msgSend_age(void *a1, const char *a2, ...)
{
  return _[a1 age];
}

id objc_msgSend_ageOutElevationArray(void *a1, const char *a2, ...)
{
  return _[a1 ageOutElevationArray];
}

id objc_msgSend_ageOutFormMetrics(void *a1, const char *a2, ...)
{
  return _[a1 ageOutFormMetrics];
}

id objc_msgSend_ageOutMotionStateArray(void *a1, const char *a2, ...)
{
  return _[a1 ageOutMotionStateArray];
}

id objc_msgSend_ageOutStepArray(void *a1, const char *a2, ...)
{
  return _[a1 ageOutStepArray];
}

id objc_msgSend_aggregateFilteredLocations_andAddTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateFilteredLocations:andAddTo:");
}

id objc_msgSend_aggregateRecords(void *a1, const char *a2, ...)
{
  return _[a1 aggregateRecords];
}

id objc_msgSend_aggregateStatsFromPacket_to_useAOPDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateStatsFromPacket:to:useAOPDuration:");
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _[a1 airplaneMode];
}

id objc_msgSend_airplaySolo(void *a1, const char *a2, ...)
{
  return _[a1 airplaySolo];
}

id objc_msgSend_alarmId(void *a1, const char *a2, ...)
{
  return _[a1 alarmId];
}

id objc_msgSend_alertElevationAlertClientsOnChange(void *a1, const char *a2, ...)
{
  return _[a1 alertElevationAlertClientsOnChange];
}

id objc_msgSend_algorithmVersion(void *a1, const char *a2, ...)
{
  return _[a1 algorithmVersion];
}

id objc_msgSend_aliveAgainThrottleTimer(void *a1, const char *a2, ...)
{
  return _[a1 aliveAgainThrottleTimer];
}

id objc_msgSend_allArchiveURLs(void *a1, const char *a2, ...)
{
  return _[a1 allArchiveURLs];
}

id objc_msgSend_allDayHeartRate(void *a1, const char *a2, ...)
{
  return _[a1 allDayHeartRate];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allKeysForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeysForObject:");
}

id objc_msgSend_allMonitoringIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 allMonitoringIdentifiers];
}

id objc_msgSend_allMonitoringRecordsByIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 allMonitoringRecordsByIdentifier];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowNetworkTileLoad(void *a1, const char *a2, ...)
{
  return _[a1 allowNetworkTileLoad];
}

id objc_msgSend_allowSimulatedLocations(void *a1, const char *a2, ...)
{
  return _[a1 allowSimulatedLocations];
}

id objc_msgSend_allowStaleData(void *a1, const char *a2, ...)
{
  return _[a1 allowStaleData];
}

id objc_msgSend_alternateIdentitiesMap(void *a1, const char *a2, ...)
{
  return _[a1 alternateIdentitiesMap];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_analyticsManager(void *a1, const char *a2, ...)
{
  return _[a1 analyticsManager];
}

id objc_msgSend_anchorKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 anchorKeyPath];
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_announceMostRecentForcedGPS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceMostRecentForcedGPS:");
}

id objc_msgSend_anySubscribedToSensorRecorder(void *a1, const char *a2, ...)
{
  return _[a1 anySubscribedToSensorRecorder];
}

id objc_msgSend_aopSubmersionState(void *a1, const char *a2, ...)
{
  return _[a1 aopSubmersionState];
}

id objc_msgSend_appId(void *a1, const char *a2, ...)
{
  return _[a1 appId];
}

id objc_msgSend_appLaunchedByAppLifecycleManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appLaunchedByAppLifecycleManager:");
}

id objc_msgSend_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "append:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applicationExtensionRecords(void *a1, const char *a2, ...)
{
  return _[a1 applicationExtensionRecords];
}

id objc_msgSend_applicationIsInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIsInstalled:");
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return _[a1 applicationType];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areCentroidDbAndMetadataDbValid(void *a1, const char *a2, ...)
{
  return _[a1 areCentroidDbAndMetadataDbValid];
}

id objc_msgSend_areWalkingSteadinessNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 areWalkingSteadinessNotificationsEnabled];
}

id objc_msgSend_areasOfInterest(void *a1, const char *a2, ...)
{
  return _[a1 areasOfInterest];
}

id objc_msgSend_arfcn(void *a1, const char *a2, ...)
{
  return _[a1 arfcn];
}

id objc_msgSend_armed(void *a1, const char *a2, ...)
{
  return _[a1 armed];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_arrayForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:defaultValue:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrivalDate(void *a1, const char *a2, ...)
{
  return _[a1 arrivalDate];
}

id objc_msgSend_assertInside(void *a1, const char *a2, ...)
{
  return _[a1 assertInside];
}

id objc_msgSend_assertOutside(void *a1, const char *a2, ...)
{
  return _[a1 assertOutside];
}

id objc_msgSend_associatedTo2GHzWiFi(void *a1, const char *a2, ...)
{
  return _[a1 associatedTo2GHzWiFi];
}

id objc_msgSend_async_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "async:");
}

id objc_msgSend_attemptForcedLocation(void *a1, const char *a2, ...)
{
  return _[a1 attemptForcedLocation];
}

id objc_msgSend_attemptReconciliationWithAddress_advertisementData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptReconciliationWithAddress:advertisementData:");
}

id objc_msgSend_attitude(void *a1, const char *a2, ...)
{
  return _[a1 attitude];
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeWithDomain:name:");
}

id objc_msgSend_attributedEntity(void *a1, const char *a2, ...)
{
  return _[a1 attributedEntity];
}

id objc_msgSend_attributesOfFileSystemForPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfFileSystemForPath:error:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_attributionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 attributionIdentifier];
}

id objc_msgSend_attributionTimer(void *a1, const char *a2, ...)
{
  return _[a1 attributionTimer];
}

id objc_msgSend_attributions(void *a1, const char *a2, ...)
{
  return _[a1 attributions];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authStatus(void *a1, const char *a2, ...)
{
  return _[a1 authStatus];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_authorizationContext(void *a1, const char *a2, ...)
{
  return _[a1 authorizationContext];
}

id objc_msgSend_authorizationContextByANDingServiceMaskTuple_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationContextByANDingServiceMaskTuple:");
}

id objc_msgSend_authorizationDatabaseWithFilename_withDataProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationDatabaseWithFilename:withDataProtectionClass:");
}

id objc_msgSend_authorizationDateForClientWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationDateForClientWithKey:");
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _[a1 authorizationStatus];
}

id objc_msgSend_authorizeLocationInReplay(void *a1, const char *a2, ...)
{
  return _[a1 authorizeLocationInReplay];
}

id objc_msgSend_authorized(void *a1, const char *a2, ...)
{
  return _[a1 authorized];
}

id objc_msgSend_authorizedForWidgetUpdates(void *a1, const char *a2, ...)
{
  return _[a1 authorizedForWidgetUpdates];
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return _[a1 automotive];
}

id objc_msgSend_averageIntensity(void *a1, const char *a2, ...)
{
  return _[a1 averageIntensity];
}

id objc_msgSend_awdLogDistance_status_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awdLogDistance:status:description:");
}

id objc_msgSend_awdMotionFitnessStrideCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awdMotionFitnessStrideCalibration:");
}

id objc_msgSend_bandclass(void *a1, const char *a2, ...)
{
  return _[a1 bandclass];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseHeight(void *a1, const char *a2, ...)
{
  return _[a1 baseHeight];
}

id objc_msgSend_batteryData(void *a1, const char *a2, ...)
{
  return _[a1 batteryData];
}

id objc_msgSend_batterySaverModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 batterySaverModeEnabled];
}

id objc_msgSend_becameFatallyBlocked_index_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becameFatallyBlocked:index:");
}

id objc_msgSend_beepOnMoveHigh(void *a1, const char *a2, ...)
{
  return _[a1 beepOnMoveHigh];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginTime(void *a1, const char *a2, ...)
{
  return _[a1 beginTime];
}

id objc_msgSend_beginWorkoutSession_withOverview_enableWorkoutChangeDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginWorkoutSession:withOverview:enableWorkoutChangeDetection:");
}

id objc_msgSend_betaBlockerUse(void *a1, const char *a2, ...)
{
  return _[a1 betaBlockerUse];
}

id objc_msgSend_biasInMeters(void *a1, const char *a2, ...)
{
  return _[a1 biasInMeters];
}

id objc_msgSend_bikeableSide(void *a1, const char *a2, ...)
{
  return _[a1 bikeableSide];
}

id objc_msgSend_binArrayToArchivedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binArrayToArchivedData:");
}

id objc_msgSend_binForConvergingUsageMetricCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForConvergingUsageMetricCount:");
}

id objc_msgSend_binIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binIndex:");
}

id objc_msgSend_binIndexForValueIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binIndexForValueIn:");
}

id objc_msgSend_binIntervalForRawSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binIntervalForRawSpeed:");
}

id objc_msgSend_binaryVersion(void *a1, const char *a2, ...)
{
  return _[a1 binaryVersion];
}

id objc_msgSend_bleAdvertisementTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 bleAdvertisementTimestamp];
}

id objc_msgSend_bleChannel(void *a1, const char *a2, ...)
{
  return _[a1 bleChannel];
}

id objc_msgSend_bleRSSI(void *a1, const char *a2, ...)
{
  return _[a1 bleRSSI];
}

id objc_msgSend_bluetoothAudioActive(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothAudioActive];
}

id objc_msgSend_bodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 bodyMetrics];
}

id objc_msgSend_bomScanEnabled(void *a1, const char *a2, ...)
{
  return _[a1 bomScanEnabled];
}

id objc_msgSend_BOOLForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_BOOLForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:defaultValue:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_boundaryType(void *a1, const char *a2, ...)
{
  return _[a1 boundaryType];
}

id objc_msgSend_boundedIncrementBetweenStart_andStop_withCurrent_withIncrement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundedIncrementBetweenStart:andStop:withCurrent:withIncrement:");
}

id objc_msgSend_boutClients(void *a1, const char *a2, ...)
{
  return _[a1 boutClients];
}

id objc_msgSend_boutType(void *a1, const char *a2, ...)
{
  return _[a1 boutType];
}

id objc_msgSend_bsid(void *a1, const char *a2, ...)
{
  return _[a1 bsid];
}

id objc_msgSend_btAddressData(void *a1, const char *a2, ...)
{
  return _[a1 btAddressData];
}

id objc_msgSend_buffer(void *a1, const char *a2, ...)
{
  return _[a1 buffer];
}

id objc_msgSend_bufferedDevices(void *a1, const char *a2, ...)
{
  return _[a1 bufferedDevices];
}

id objc_msgSend_buildingID(void *a1, const char *a2, ...)
{
  return _[a1 buildingID];
}

id objc_msgSend_bulkUploadRecordIDsShouldReupload_shouldUploadToOutputZone_shouldUploadToInputZone_shouldThrottle_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "bulkUploadRecordIDsShouldReupload:shouldUploadToOutputZone:shouldUploadToInputZone:shouldThrottle:");
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return _[a1 bundle];
}

id objc_msgSend_bundleContainerURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleContainerURL];
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _[a1 bundleId];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIds(void *a1, const char *a2, ...)
{
  return _[a1 bundleIds];
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _[a1 bundlePath];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cacheEmergencyAWDStatistics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheEmergencyAWDStatistics:");
}

id objc_msgSend_cacheInfoPlistKeysForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheInfoPlistKeysForClient:");
}

id objc_msgSend_cachedPlaceInferences(void *a1, const char *a2, ...)
{
  return _[a1 cachedPlaceInferences];
}

id objc_msgSend_cadence(void *a1, const char *a2, ...)
{
  return _[a1 cadence];
}

id objc_msgSend_cadenceMean(void *a1, const char *a2, ...)
{
  return _[a1 cadenceMean];
}

id objc_msgSend_calTrackHandler(void *a1, const char *a2, ...)
{
  return _[a1 calTrackHandler];
}

id objc_msgSend_calculateAndSendAltitudeFromLocation(void *a1, const char *a2, ...)
{
  return _[a1 calculateAndSendAltitudeFromLocation];
}

id objc_msgSend_calculateDepthFromPressure_withSurfacePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateDepthFromPressure:withSurfacePressure:");
}

id objc_msgSend_calculateDistance_b_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateDistance:b:");
}

id objc_msgSend_calculateFilterSurfaceCal_withSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateFilterSurfaceCal:withSuccess:");
}

id objc_msgSend_calculateRelativeElevation(void *a1, const char *a2, ...)
{
  return _[a1 calculateRelativeElevation];
}

id objc_msgSend_calendarWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarWithIdentifier:");
}

id objc_msgSend_calibrationTrackCallback(void *a1, const char *a2, ...)
{
  return _[a1 calibrationTrackCallback];
}

id objc_msgSend_callbackAdapter(void *a1, const char *a2, ...)
{
  return _[a1 callbackAdapter];
}

id objc_msgSend_callbackHandler(void *a1, const char *a2, ...)
{
  return _[a1 callbackHandler];
}

id objc_msgSend_calorieData(void *a1, const char *a2, ...)
{
  return _[a1 calorieData];
}

id objc_msgSend_canAddToMonitor(void *a1, const char *a2, ...)
{
  return _[a1 canAddToMonitor];
}

id objc_msgSend_canPublish(void *a1, const char *a2, ...)
{
  return _[a1 canPublish];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelTimers(void *a1, const char *a2, ...)
{
  return _[a1 cancelTimers];
}

id objc_msgSend_capAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capAccuracy:");
}

id objc_msgSend_capabilityChangeClients(void *a1, const char *a2, ...)
{
  return _[a1 capabilityChangeClients];
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_catalogWorkoutId(void *a1, const char *a2, ...)
{
  return _[a1 catalogWorkoutId];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_catherine(void *a1, const char *a2, ...)
{
  return _[a1 catherine];
}

id objc_msgSend_cdmaCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaCellTowerAtIndex:");
}

id objc_msgSend_cdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 cdmaCellTowers];
}

id objc_msgSend_cdmaCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 cdmaCellTowersCount];
}

id objc_msgSend_cdmaEvdoTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaEvdoTowerAtIndex:");
}

id objc_msgSend_cdmaEvdoTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 cdmaEvdoTowersCount];
}

id objc_msgSend_cellID(void *a1, const char *a2, ...)
{
  return _[a1 cellID];
}

id objc_msgSend_cellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellTowerAtIndex:");
}

id objc_msgSend_cellTowers(void *a1, const char *a2, ...)
{
  return _[a1 cellTowers];
}

id objc_msgSend_cellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 cellTowersCount];
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_centralManager(void *a1, const char *a2, ...)
{
  return _[a1 centralManager];
}

id objc_msgSend_centroidOfLocationVector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centroidOfLocationVector:");
}

id objc_msgSend_changeReason(void *a1, const char *a2, ...)
{
  return _[a1 changeReason];
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return _[a1 channel];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_checkApplications_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkApplications:withReply:");
}

id objc_msgSend_checkAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 checkAuthorization];
}

id objc_msgSend_checkCoreAnalyticsPermissions_rawPaceForLUT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkCoreAnalyticsPermissions:rawPaceForLUT:");
}

id objc_msgSend_checkDailyResetEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDailyResetEligible:");
}

id objc_msgSend_checkDeferMobilityCompanionSyncActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDeferMobilityCompanionSyncActivity:");
}

id objc_msgSend_checkDeferRequestForBoutsActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDeferRequestForBoutsActivity:");
}

id objc_msgSend_checkDeferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDeferral:");
}

id objc_msgSend_checkDiminishedMode(void *a1, const char *a2, ...)
{
  return _[a1 checkDiminishedMode];
}

id objc_msgSend_checkForBoutsReadyToProcessWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForBoutsReadyToProcessWithCompletion:activity:");
}

id objc_msgSend_checkForDeletionOfVO2MaxData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForDeletionOfVO2MaxData:");
}

id objc_msgSend_checkForHistoricalComputeTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForHistoricalComputeTrigger:");
}

id objc_msgSend_checkForLocationStateTransition(void *a1, const char *a2, ...)
{
  return _[a1 checkForLocationStateTransition];
}

id objc_msgSend_checkForMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 checkForMonitoring];
}

id objc_msgSend_checkInForActivityWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkInForActivityWithIdentifier:");
}

id objc_msgSend_checkLocationAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 checkLocationAuthorization];
}

id objc_msgSend_checkLocationServicesStatus(void *a1, const char *a2, ...)
{
  return _[a1 checkLocationServicesStatus];
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkSubmissionAtPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSubmissionAtPeriod:");
}

id objc_msgSend_checkToSendDistancePercentageCoreAnalytics_mobilityDistance_rawSpeed_rawDist_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkToSendDistancePercentageCoreAnalytics:mobilityDistance:rawSpeed:rawDist:");
}

id objc_msgSend_checkValidTrack_associatedEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkValidTrack:associatedEntry:");
}

id objc_msgSend_checkWeakPersistentClientWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkWeakPersistentClientWithIdentifier:");
}

id objc_msgSend_chooseUncertaintyDuringWorkout_withAltitude_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chooseUncertaintyDuringWorkout:withAltitude:atTime:");
}

id objc_msgSend_choreaDetectionService(void *a1, const char *a2, ...)
{
  return _[a1 choreaDetectionService];
}

id objc_msgSend_ckp(void *a1, const char *a2, ...)
{
  return _[a1 ckp];
}

id objc_msgSend_cl_deepCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cl_deepCopy");
}

id objc_msgSend_cl_deepMutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cl_deepMutableCopy");
}

id objc_msgSend_classifyLoiTypeForLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifyLoiTypeForLocation:");
}

id objc_msgSend_classifySteadinessWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifySteadinessWithCompletion:activity:");
}

id objc_msgSend_cleanCache(void *a1, const char *a2, ...)
{
  return _[a1 cleanCache];
}

id objc_msgSend_cleanHistoricalMslpArrayForForceRebase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanHistoricalMslpArrayForForceRebase:");
}

id objc_msgSend_cleanUp(void *a1, const char *a2, ...)
{
  return _[a1 cleanUp];
}

id objc_msgSend_cleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUp:");
}

id objc_msgSend_cleanUpIncludingDerivedFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpIncludingDerivedFeatures:");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_cleanupPackets(void *a1, const char *a2, ...)
{
  return _[a1 cleanupPackets];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAllLogs(void *a1, const char *a2, ...)
{
  return _[a1 clearAllLogs];
}

id objc_msgSend_clearAllTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearAllTiles];
}

id objc_msgSend_clearBuildingTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearBuildingTiles];
}

id objc_msgSend_clearCalibrations(void *a1, const char *a2, ...)
{
  return _[a1 clearCalibrations];
}

id objc_msgSend_clearCdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearCdmaCellTowers];
}

id objc_msgSend_clearCdmaEvdoTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearCdmaEvdoTowers];
}

id objc_msgSend_clearCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearCellTowers];
}

id objc_msgSend_clearExitAndEntryScanNetworks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearExitAndEntryScanNetworks:");
}

id objc_msgSend_clearFence(void *a1, const char *a2, ...)
{
  return _[a1 clearFence];
}

id objc_msgSend_clearFence_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFence:forClient:");
}

id objc_msgSend_clearFence_inSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFence:inSession:");
}

id objc_msgSend_clearInVisitRebasedMslpInPlist(void *a1, const char *a2, ...)
{
  return _[a1 clearInVisitRebasedMslpInPlist];
}

id objc_msgSend_clearInputs(void *a1, const char *a2, ...)
{
  return _[a1 clearInputs];
}

id objc_msgSend_clearInterestZones(void *a1, const char *a2, ...)
{
  return _[a1 clearInterestZones];
}

id objc_msgSend_clearLocationData(void *a1, const char *a2, ...)
{
  return _[a1 clearLocationData];
}

id objc_msgSend_clearLocationFingerprints(void *a1, const char *a2, ...)
{
  return _[a1 clearLocationFingerprints];
}

id objc_msgSend_clearLogs(void *a1, const char *a2, ...)
{
  return _[a1 clearLogs];
}

id objc_msgSend_clearLongAggressiveTimeoutBlockForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLongAggressiveTimeoutBlockForClient:");
}

id objc_msgSend_clearLteCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearLteCellTowers];
}

id objc_msgSend_clearMacModes(void *a1, const char *a2, ...)
{
  return _[a1 clearMacModes];
}

id objc_msgSend_clearMacs(void *a1, const char *a2, ...)
{
  return _[a1 clearMacs];
}

id objc_msgSend_clearMarkets(void *a1, const char *a2, ...)
{
  return _[a1 clearMarkets];
}

id objc_msgSend_clearMeanSeaLevelPressureArrayInPlist(void *a1, const char *a2, ...)
{
  return _[a1 clearMeanSeaLevelPressureArrayInPlist];
}

id objc_msgSend_clearModes(void *a1, const char *a2, ...)
{
  return _[a1 clearModes];
}

id objc_msgSend_clearNr5GCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearNr5GCellTowers];
}

id objc_msgSend_clearRecentMeanSeaLevelPressureArrayInPlist(void *a1, const char *a2, ...)
{
  return _[a1 clearRecentMeanSeaLevelPressureArrayInPlist];
}

id objc_msgSend_clearRegulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _[a1 clearRegulatoryDomainEstimates];
}

id objc_msgSend_clearRoadTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearRoadTiles];
}

id objc_msgSend_clearScdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 clearScdmaCellTowers];
}

id objc_msgSend_clearShouldAlert(void *a1, const char *a2, ...)
{
  return _[a1 clearShouldAlert];
}

id objc_msgSend_clearStepArray(void *a1, const char *a2, ...)
{
  return _[a1 clearStepArray];
}

id objc_msgSend_clearSummaries(void *a1, const char *a2, ...)
{
  return _[a1 clearSummaries];
}

id objc_msgSend_clearSurroundingWifiBands(void *a1, const char *a2, ...)
{
  return _[a1 clearSurroundingWifiBands];
}

id objc_msgSend_clearTiles(void *a1, const char *a2, ...)
{
  return _[a1 clearTiles];
}

id objc_msgSend_clearUUID(void *a1, const char *a2, ...)
{
  return _[a1 clearUUID];
}

id objc_msgSend_clearVectorClocks(void *a1, const char *a2, ...)
{
  return _[a1 clearVectorClocks];
}

id objc_msgSend_clearWifiBands(void *a1, const char *a2, ...)
{
  return _[a1 clearWifiBands];
}

id objc_msgSend_clearWirelessAPs(void *a1, const char *a2, ...)
{
  return _[a1 clearWirelessAPs];
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _[a1 client];
}

id objc_msgSend_client_didChangeUsageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:didChangeUsageData:");
}

id objc_msgSend_client_didChangeUsageDataInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:didChangeUsageDataInternal:");
}

id objc_msgSend_clientAnchor(void *a1, const char *a2, ...)
{
  return _[a1 clientAnchor];
}

id objc_msgSend_clientAnchorWithType(void *a1, const char *a2, ...)
{
  return _[a1 clientAnchorWithType];
}

id objc_msgSend_clientAuthDate(void *a1, const char *a2, ...)
{
  return _[a1 clientAuthDate];
}

id objc_msgSend_clientAuthorizationCache(void *a1, const char *a2, ...)
{
  return _[a1 clientAuthorizationCache];
}

id objc_msgSend_clientCondition(void *a1, const char *a2, ...)
{
  return _[a1 clientCondition];
}

id objc_msgSend_clientConnected_withNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientConnected:withNotification:");
}

id objc_msgSend_clientCount(void *a1, const char *a2, ...)
{
  return _[a1 clientCount];
}

id objc_msgSend_clientDevices(void *a1, const char *a2, ...)
{
  return _[a1 clientDevices];
}

id objc_msgSend_clientEvent(void *a1, const char *a2, ...)
{
  return _[a1 clientEvent];
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentifier];
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _[a1 clientInfoHeader];
}

id objc_msgSend_clientInterest(void *a1, const char *a2, ...)
{
  return _[a1 clientInterest];
}

id objc_msgSend_clientInterestStoreSetValueForClientKey_parameterKey_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInterestStoreSetValueForClientKey:parameterKey:value:");
}

id objc_msgSend_clientKey(void *a1, const char *a2, ...)
{
  return _[a1 clientKey];
}

id objc_msgSend_clientKeyPathFromName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathFromName:");
}

id objc_msgSend_clientKeyPathFromName_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathFromName:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithClientAnchor_anchorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithClientAnchor:anchorType:");
}

id objc_msgSend_clientKeyPathWithClientAnchor_anchorType_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithClientKey:");
}

id objc_msgSend_clientKeyPathWithLegacyClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithLegacyClientKey:");
}

id objc_msgSend_clientKeyPathWithReplacementSubIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithUserName_clientAnchor_anchorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithUserName:clientAnchor:anchorType:");
}

id objc_msgSend_clientKeyPathWithUserName_clientAnchor_anchorType_subIdentityId_subIdentityType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyToAuthContextMap(void *a1, const char *a2, ...)
{
  return _[a1 clientKeyToAuthContextMap];
}

id objc_msgSend_clientKeyToClientInfoMap(void *a1, const char *a2, ...)
{
  return _[a1 clientKeyToClientInfoMap];
}

id objc_msgSend_clientLocation(void *a1, const char *a2, ...)
{
  return _[a1 clientLocation];
}

id objc_msgSend_clientManager(void *a1, const char *a2, ...)
{
  return _[a1 clientManager];
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return _[a1 clientName];
}

id objc_msgSend_clientRegistry(void *a1, const char *a2, ...)
{
  return _[a1 clientRegistry];
}

id objc_msgSend_clientState(void *a1, const char *a2, ...)
{
  return _[a1 clientState];
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return _[a1 clients];
}

id objc_msgSend_clientsInSession(void *a1, const char *a2, ...)
{
  return _[a1 clientsInSession];
}

id objc_msgSend_clockWithClockIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clockWithClockIdentifier:");
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return _[a1 closeFile];
}

id objc_msgSend_coarseElevation(void *a1, const char *a2, ...)
{
  return _[a1 coarseElevation];
}

id objc_msgSend_coarseMetadata(void *a1, const char *a2, ...)
{
  return _[a1 coarseMetadata];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_coefficientsUpdated(void *a1, const char *a2, ...)
{
  return _[a1 coefficientsUpdated];
}

id objc_msgSend_collect_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collect:isLocal:");
}

id objc_msgSend_collectMapDataOfType_aroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_callSynchronously_WithReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:");
}

id objc_msgSend_columns(void *a1, const char *a2, ...)
{
  return _[a1 columns];
}

id objc_msgSend_combinedSecret(void *a1, const char *a2, ...)
{
  return _[a1 combinedSecret];
}

id objc_msgSend_companionHeartbeat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionHeartbeat:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compatibilityInfo(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityInfo];
}

id objc_msgSend_compatibilityObject(void *a1, const char *a2, ...)
{
  return _[a1 compatibilityObject];
}

id objc_msgSend_completeIntervalEventForClient_endingAt_setNew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeIntervalEventForClient:endingAt:setNew:");
}

id objc_msgSend_completeMigration(void *a1, const char *a2, ...)
{
  return _[a1 completeMigration];
}

id objc_msgSend_completedSessionsAwaitingPackets(void *a1, const char *a2, ...)
{
  return _[a1 completedSessionsAwaitingPackets];
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeBOMScanBackoffOfDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeBOMScanBackoffOfDate:");
}

id objc_msgSend_computeHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_andCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:");
}

id objc_msgSend_computeIntervalDistributionsForPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeIntervalDistributionsForPeriod:");
}

id objc_msgSend_computeMD5_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeMD5:");
}

id objc_msgSend_computeMeanSeaLevelPressureWithRebasingLocationData_referenceMap_andLocationType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeMeanSeaLevelPressureWithRebasingLocationData:referenceMap:andLocationType:");
}

id objc_msgSend_computeModeSubmissionForPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeModeSubmissionForPeriod:");
}

id objc_msgSend_computePercentageAndSubmit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computePercentageAndSubmit:");
}

id objc_msgSend_computeWalkRunSigma_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeWalkRunSigma:");
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _[a1 condition];
}

id objc_msgSend_conditionLimitExceeded(void *a1, const char *a2, ...)
{
  return _[a1 conditionLimitExceeded];
}

id objc_msgSend_conditionUnsupported(void *a1, const char *a2, ...)
{
  return _[a1 conditionUnsupported];
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _[a1 confidence];
}

id objc_msgSend_configureInitializeAndStartRavenSupervisorWithPlatformInfo_withParametersOverrideString_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "configureInitializeAndStartRavenSupervisorWithPlatformInfo:withParametersOverrideString:withCompletion:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _[a1 connect];
}

id objc_msgSend_connectToMediaService_uploadConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToMediaService:uploadConfig:");
}

id objc_msgSend_connectToServiceForClient_withServiceIdentifier_withConnectionToken_forUser_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_connectToStore(void *a1, const char *a2, ...)
{
  return _[a1 connectToStore];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connectionUpdateHandler(void *a1, const char *a2, ...)
{
  return _[a1 connectionUpdateHandler];
}

id objc_msgSend_considerPerformingAForcedFullSync(void *a1, const char *a2, ...)
{
  return _[a1 considerPerformingAForcedFullSync];
}

id objc_msgSend_constructController(void *a1, const char *a2, ...)
{
  return _[a1 constructController];
}

id objc_msgSend_constructMonitors(void *a1, const char *a2, ...)
{
  return _[a1 constructMonitors];
}

id objc_msgSend_constructPolicies(void *a1, const char *a2, ...)
{
  return _[a1 constructPolicies];
}

id objc_msgSend_constructSubHarvesters(void *a1, const char *a2, ...)
{
  return _[a1 constructSubHarvesters];
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 containerIdentifier];
}

id objc_msgSend_containerURLForClientWithClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerURLForClientWithClientKey:");
}

id objc_msgSend_containerWithObject_destructor_binaryVersion_typeSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithObject:destructor:binaryVersion:typeSize:");
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _[a1 containingBundleRecord];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_continueSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSync:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_convertAPToWifiData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertAPToWifiData:");
}

id objc_msgSend_convertCLAvengerScannerPolicyScanTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertCLAvengerScannerPolicyScanTypeToString:");
}

id objc_msgSend_convertCLAvengerScannerScanParametersToWPObjectDiscoveryOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertCLAvengerScannerScanParametersToWPObjectDiscoveryOptions:");
}

id objc_msgSend_convertDataBlob_toBoundStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertDataBlob:toBoundStatement:");
}

id objc_msgSend_convertFromDomainToMachAbsoluteTime_withFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFromDomainToMachAbsoluteTime:withFlags:");
}

id objc_msgSend_convertStatementToDataBlobs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertStatementToDataBlobs:");
}

id objc_msgSend_convertToCLFitnessMachineData_deviceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToCLFitnessMachineData:deviceId:");
}

id objc_msgSend_convertToCMPedometerBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToCMPedometerBins:");
}

id objc_msgSend_convertToCMStrideCalibrationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToCMStrideCalibrationData:");
}

id objc_msgSend_convertToObjectDiscoveryDataWithAdvertisementData_rssi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToObjectDiscoveryDataWithAdvertisementData:rssi:");
}

id objc_msgSend_convertToSkiEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToSkiEntry:");
}

id objc_msgSend_convertToSpringTrackerEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToSpringTrackerEntry:");
}

id objc_msgSend_convertToSwimEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToSwimEntry:");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _[a1 coordinate];
}

id objc_msgSend_coordinateCount(void *a1, const char *a2, ...)
{
  return _[a1 coordinateCount];
}

id objc_msgSend_coordinates(void *a1, const char *a2, ...)
{
  return _[a1 coordinates];
}

id objc_msgSend_coordinates3d(void *a1, const char *a2, ...)
{
  return _[a1 coordinates3d];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAdrPublicKeyData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAdrPublicKeyData:");
}

id objc_msgSend_copyBins(void *a1, const char *a2, ...)
{
  return _[a1 copyBins];
}

id objc_msgSend_copyCurrentBias(void *a1, const char *a2, ...)
{
  return _[a1 copyCurrentBias];
}

id objc_msgSend_copyDataBuffersForTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDataBuffersForTrack:");
}

id objc_msgSend_copyDataFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDataFrom:to:");
}

id objc_msgSend_copyHistory(void *a1, const char *a2, ...)
{
  return _[a1 copyHistory];
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyPublicKeyFromPrivateKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPublicKeyFromPrivateKey:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_correspondingApplicationRecord(void *a1, const char *a2, ...)
{
  return _[a1 correspondingApplicationRecord];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_countMatchesInA_andB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countMatchesInA:andB:");
}

id objc_msgSend_countriesAreUnchanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countriesAreUnchanged:");
}

id objc_msgSend_country(void *a1, const char *a2, ...)
{
  return _[a1 country];
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_countryCodeDebounceInterval(void *a1, const char *a2, ...)
{
  return _[a1 countryCodeDebounceInterval];
}

id objc_msgSend_course(void *a1, const char *a2, ...)
{
  return _[a1 course];
}

id objc_msgSend_cppClientKey(void *a1, const char *a2, ...)
{
  return _[a1 cppClientKey];
}

id objc_msgSend_cppObjectPtr(void *a1, const char *a2, ...)
{
  return _[a1 cppObjectPtr];
}

id objc_msgSend_createAggPeriodIfApplicable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAggPeriodIfApplicable:");
}

id objc_msgSend_createCKRecordForInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCKRecordForInput:");
}

id objc_msgSend_createCKRecordForOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCKRecordForOutput:");
}

id objc_msgSend_createConnection(void *a1, const char *a2, ...)
{
  return _[a1 createConnection];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createIntervalEventStartingAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIntervalEventStartingAt:");
}

id objc_msgSend_createKeyFromExternalRepresentationString_keyClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createKeyFromExternalRepresentationString:keyClass:");
}

id objc_msgSend_createLongAggressiveTimeoutBlockForClient_seconds_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLongAggressiveTimeoutBlockForClient:seconds:withBlock:");
}

id objc_msgSend_createManagedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 createManagedObjectContext];
}

id objc_msgSend_createPrivacyTimeOffset(void *a1, const char *a2, ...)
{
  return _[a1 createPrivacyTimeOffset];
}

id objc_msgSend_createRandomP256PrivateKey(void *a1, const char *a2, ...)
{
  return _[a1 createRandomP256PrivateKey];
}

id objc_msgSend_createRequestFromCachedDict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestFromCachedDict:error:");
}

id objc_msgSend_createRequestFromDict_baseURL_sessionID_partnerAdrPublicKeyData_deviceSessionPrivateKey_deviceSessionSecret_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:");
}

id objc_msgSend_createServiceForClient_withServiceType_locationTypes_connectionToken_forUser_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createServiceForClient:withServiceType:locationTypes:connectionToken:forUser:");
}

id objc_msgSend_createVO2MaxInputZone(void *a1, const char *a2, ...)
{
  return _[a1 createVO2MaxInputZone];
}

id objc_msgSend_createVO2MaxOutputZone(void *a1, const char *a2, ...)
{
  return _[a1 createVO2MaxOutputZone];
}

id objc_msgSend_createWorkingDirectory(void *a1, const char *a2, ...)
{
  return _[a1 createWorkingDirectory];
}

id objc_msgSend_createZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createZone:");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_crossEntropyOfreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossEntropyOfreference:");
}

id objc_msgSend_cumulateReference_andRefAltitude_andRefVariance_andBaroElevation_andType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cumulateReference:andRefAltitude:andRefVariance:andBaroElevation:andType:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentCountrySupportsFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCountrySupportsFeature:");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentDevice];
}

id objc_msgSend_currentDirectoryPath(void *a1, const char *a2, ...)
{
  return _[a1 currentDirectoryPath];
}

id objc_msgSend_currentEstimate(void *a1, const char *a2, ...)
{
  return _[a1 currentEstimate];
}

id objc_msgSend_currentEstimates(void *a1, const char *a2, ...)
{
  return _[a1 currentEstimates];
}

id objc_msgSend_currentFilename(void *a1, const char *a2, ...)
{
  return _[a1 currentFilename];
}

id objc_msgSend_currentGranularity(void *a1, const char *a2, ...)
{
  return _[a1 currentGranularity];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentLatchedAbsoluteTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 currentLatchedAbsoluteTimestamp];
}

id objc_msgSend_currentLatitude(void *a1, const char *a2, ...)
{
  return _[a1 currentLatitude];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentLocation(void *a1, const char *a2, ...)
{
  return _[a1 currentLocation];
}

id objc_msgSend_currentLongitude(void *a1, const char *a2, ...)
{
  return _[a1 currentLongitude];
}

id objc_msgSend_currentScanParameters(void *a1, const char *a2, ...)
{
  return _[a1 currentScanParameters];
}

id objc_msgSend_currentScanType(void *a1, const char *a2, ...)
{
  return _[a1 currentScanType];
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _[a1 currentSession];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentToken(void *a1, const char *a2, ...)
{
  return _[a1 currentToken];
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _[a1 currentUser];
}

id objc_msgSend_currentVisitHorizontalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 currentVisitHorizontalUncertainty];
}

id objc_msgSend_currentVisitLocation(void *a1, const char *a2, ...)
{
  return _[a1 currentVisitLocation];
}

id objc_msgSend_currentWPState(void *a1, const char *a2, ...)
{
  return _[a1 currentWPState];
}

id objc_msgSend_currentWorkoutActiveStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentWorkoutActiveStateWithReply:");
}

id objc_msgSend_currentlyActiveDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentlyActiveDevice];
}

id objc_msgSend_currentlyScheduled(void *a1, const char *a2, ...)
{
  return _[a1 currentlyScheduled];
}

id objc_msgSend_cycleTime(void *a1, const char *a2, ...)
{
  return _[a1 cycleTime];
}

id objc_msgSend_daemonCondition(void *a1, const char *a2, ...)
{
  return _[a1 daemonCondition];
}

id objc_msgSend_daemonEvent(void *a1, const char *a2, ...)
{
  return _[a1 daemonEvent];
}

id objc_msgSend_daemonLocationPrivate(void *a1, const char *a2, ...)
{
  return _[a1 daemonLocationPrivate];
}

id objc_msgSend_daemonState(void *a1, const char *a2, ...)
{
  return _[a1 daemonState];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataFieldKey(void *a1, const char *a2, ...)
{
  return _[a1 dataFieldKey];
}

id objc_msgSend_dataForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_dataIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 dataIdentifier];
}

id objc_msgSend_dataPayload(void *a1, const char *a2, ...)
{
  return _[a1 dataPayload];
}

id objc_msgSend_dataProtection(void *a1, const char *a2, ...)
{
  return _[a1 dataProtection];
}

id objc_msgSend_dataSize(void *a1, const char *a2, ...)
{
  return _[a1 dataSize];
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _[a1 dataType];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateInterval(void *a1, const char *a2, ...)
{
  return _[a1 dateInterval];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _[a1 day];
}

id objc_msgSend_debounceTime(void *a1, const char *a2, ...)
{
  return _[a1 debounceTime];
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeFloatForKey:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrementAttributionCountForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrementAttributionCountForServiceType:");
}

id objc_msgSend_deepThreshold(void *a1, const char *a2, ...)
{
  return _[a1 deepThreshold];
}

id objc_msgSend_deepestDepthForHK(void *a1, const char *a2, ...)
{
  return _[a1 deepestDepthForHK];
}

id objc_msgSend_defaultBins(void *a1, const char *a2, ...)
{
  return _[a1 defaultBins];
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return _[a1 defaultCStringEncoding];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultFileManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultFileManager];
}

id objc_msgSend_defaultForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultForKey:defaultValue:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultModelsDirectory(void *a1, const char *a2, ...)
{
  return _[a1 defaultModelsDirectory];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultStoresDirectory(void *a1, const char *a2, ...)
{
  return _[a1 defaultStoresDirectory];
}

id objc_msgSend_defaultUseCase(void *a1, const char *a2, ...)
{
  return _[a1 defaultUseCase];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return _[a1 delegateQueue];
}

id objc_msgSend_deleteAllRecords(void *a1, const char *a2, ...)
{
  return _[a1 deleteAllRecords];
}

id objc_msgSend_deleteCloudKitRecords(void *a1, const char *a2, ...)
{
  return _[a1 deleteCloudKitRecords];
}

id objc_msgSend_deleteDefaultStoreFileFromDisk(void *a1, const char *a2, ...)
{
  return _[a1 deleteDefaultStoreFileFromDisk];
}

id objc_msgSend_deleteHealthKitSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHealthKitSamples:");
}

id objc_msgSend_deleteInterestZoneWithId_registeredForClientKey_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteInterestZoneWithId:registeredForClientKey:withReply:");
}

id objc_msgSend_deleteLedgerFile(void *a1, const char *a2, ...)
{
  return _[a1 deleteLedgerFile];
}

id objc_msgSend_deleteLocalVO2MaxData(void *a1, const char *a2, ...)
{
  return _[a1 deleteLocalVO2MaxData];
}

id objc_msgSend_deleteObject_withSyncSessionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:withSyncSessionReason:");
}

id objc_msgSend_deleteRecordByMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordByMac:");
}

id objc_msgSend_deleteRecordByMac_sync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordByMac:sync:");
}

id objc_msgSend_deleteRecordsOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordsOlderThan:");
}

id objc_msgSend_deleteRecordsWithEntityName_byAndPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordsWithEntityName:byAndPredicates:");
}

id objc_msgSend_deleteServiceForClient_withServiceIdentifier_withConnectionToken_forUser_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_deleteSessionsFromHealthKit_withRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSessionsFromHealthKit:withRetry:");
}

id objc_msgSend_deleteStoreFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStoreFile:");
}

id objc_msgSend_deleteSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _[a1 deleteSyncEngineMetadata];
}

id objc_msgSend_deleteZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteZone:");
}

id objc_msgSend_deletedRecordIDs(void *a1, const char *a2, ...)
{
  return _[a1 deletedRecordIDs];
}

id objc_msgSend_deletedZoneIDs(void *a1, const char *a2, ...)
{
  return _[a1 deletedZoneIDs];
}

id objc_msgSend_deletions(void *a1, const char *a2, ...)
{
  return _[a1 deletions];
}

id objc_msgSend_deliverAndReleaseNotification_withFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverAndReleaseNotification:withFlags:");
}

id objc_msgSend_deliverVisit_toClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverVisit:toClient:");
}

id objc_msgSend_deltaActiveTime(void *a1, const char *a2, ...)
{
  return _[a1 deltaActiveTime];
}

id objc_msgSend_deltaDistance(void *a1, const char *a2, ...)
{
  return _[a1 deltaDistance];
}

id objc_msgSend_deltaDistanceAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 deltaDistanceAccuracy];
}

id objc_msgSend_deltaElevation(void *a1, const char *a2, ...)
{
  return _[a1 deltaElevation];
}

id objc_msgSend_deltaPositionX(void *a1, const char *a2, ...)
{
  return _[a1 deltaPositionX];
}

id objc_msgSend_deltaPositionY(void *a1, const char *a2, ...)
{
  return _[a1 deltaPositionY];
}

id objc_msgSend_deltaPositionZ(void *a1, const char *a2, ...)
{
  return _[a1 deltaPositionZ];
}

id objc_msgSend_deltaSteps(void *a1, const char *a2, ...)
{
  return _[a1 deltaSteps];
}

id objc_msgSend_deltaVelocityX(void *a1, const char *a2, ...)
{
  return _[a1 deltaVelocityX];
}

id objc_msgSend_deltaVelocityY(void *a1, const char *a2, ...)
{
  return _[a1 deltaVelocityY];
}

id objc_msgSend_deltaVelocityZ(void *a1, const char *a2, ...)
{
  return _[a1 deltaVelocityZ];
}

id objc_msgSend_demoDepthUpdate_bounce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "demoDepthUpdate_bounce");
}

id objc_msgSend_departureDate(void *a1, const char *a2, ...)
{
  return _[a1 departureDate];
}

id objc_msgSend_depth(void *a1, const char *a2, ...)
{
  return _[a1 depth];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_deserializeMeta_fromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializeMeta:fromData:");
}

id objc_msgSend_desiredAggressiveDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredAggressiveDiscoveryScanParameters:");
}

id objc_msgSend_desiredBTFindingDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredBTFindingDiscoveryScanParameters:");
}

id objc_msgSend_desiredCoexFriendlyAggressiveDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredCoexFriendlyAggressiveDiscoveryScanParameters:");
}

id objc_msgSend_desiredDefaultScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredDefaultScanParameters:");
}

id objc_msgSend_desiredHawkeyeLowEnergyScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredHawkeyeLowEnergyScanParameters:");
}

id objc_msgSend_desiredWatchAdvertisementBufferScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredWatchAdvertisementBufferScanParameters:");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _[a1 destination];
}

id objc_msgSend_destinationDevice(void *a1, const char *a2, ...)
{
  return _[a1 destinationDevice];
}

id objc_msgSend_destinationName(void *a1, const char *a2, ...)
{
  return _[a1 destinationName];
}

id objc_msgSend_detectionDate(void *a1, const char *a2, ...)
{
  return _[a1 detectionDate];
}

id objc_msgSend_determineStateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineStateWithContext:");
}

id objc_msgSend_developerType(void *a1, const char *a2, ...)
{
  return _[a1 developerType];
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return _[a1 deviceFlags];
}

id objc_msgSend_deviceId(void *a1, const char *a2, ...)
{
  return _[a1 deviceId];
}

id objc_msgSend_deviceNearbyHandler(void *a1, const char *a2, ...)
{
  return _[a1 deviceNearbyHandler];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_deviceWithEffectiveID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithEffectiveID:");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_diagnosticMask(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticMask];
}

id objc_msgSend_diagnosticMaskIfMonitoringIsNonFunctional(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticMaskIfMonitoringIsNonFunctional];
}

id objc_msgSend_diagnosticMaskIfNonFunctional(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticMaskIfNonFunctional];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryExistsAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryExistsAtKeyPath:");
}

id objc_msgSend_dictionaryForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_dictionaryForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:defaultValue:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryToSecItemFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryToSecItemFormat:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didCauseWake(void *a1, const char *a2, ...)
{
  return _[a1 didCauseWake];
}

id objc_msgSend_didExitFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didExitFence:");
}

id objc_msgSend_didExitGeoFence(void *a1, const char *a2, ...)
{
  return _[a1 didExitGeoFence];
}

id objc_msgSend_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFailWithError:");
}

id objc_msgSend_didFetchRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 didFetchRecordZoneChangesEvent];
}

id objc_msgSend_didSendChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 didSendChangesEvent];
}

id objc_msgSend_didTimeoutGeoFence(void *a1, const char *a2, ...)
{
  return _[a1 didTimeoutGeoFence];
}

id objc_msgSend_didUpdateDataBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateDataBuffer:");
}

id objc_msgSend_didUpdateFireTime(void *a1, const char *a2, ...)
{
  return _[a1 didUpdateFireTime];
}

id objc_msgSend_didUpdateInertialData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateInertialData:");
}

id objc_msgSend_didUpdateLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateLocations:");
}

id objc_msgSend_didUpdateLocations_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateLocations:withReply:");
}

id objc_msgSend_didUpdateSource_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateSource:withData:");
}

id objc_msgSend_didUpdateWeather_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateWeather:");
}

id objc_msgSend_diminishedMode(void *a1, const char *a2, ...)
{
  return _[a1 diminishedMode];
}

id objc_msgSend_dingAllActiveTranscriptSubscriptions(void *a1, const char *a2, ...)
{
  return _[a1 dingAllActiveTranscriptSubscriptions];
}

id objc_msgSend_directory(void *a1, const char *a2, ...)
{
  return _[a1 directory];
}

id objc_msgSend_directoryExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directoryExists:");
}

id objc_msgSend_dirty(void *a1, const char *a2, ...)
{
  return _[a1 dirty];
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return _[a1 disable];
}

id objc_msgSend_disableSource(void *a1, const char *a2, ...)
{
  return _[a1 disableSource];
}

id objc_msgSend_disableSources_forContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableSources:forContext:");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _[a1 disconnect];
}

id objc_msgSend_disconnectToServiceForClient_withServiceIdentifier_withConnectionToken_forUser_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_discoveryFlags(void *a1, const char *a2, ...)
{
  return _[a1 discoveryFlags];
}

id objc_msgSend_dispatchEnableBomScanAfterBackoff(void *a1, const char *a2, ...)
{
  return _[a1 dispatchEnableBomScanAfterBackoff];
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _[a1 dispatchQueue];
}

id objc_msgSend_disputedTerritoryName(void *a1, const char *a2, ...)
{
  return _[a1 disputedTerritoryName];
}

id objc_msgSend_dist(void *a1, const char *a2, ...)
{
  return _[a1 dist];
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _[a1 distance];
}

id objc_msgSend_distanceFromLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceFromLocation:");
}

id objc_msgSend_distanceGPS(void *a1, const char *a2, ...)
{
  return _[a1 distanceGPS];
}

id objc_msgSend_distanceGps(void *a1, const char *a2, ...)
{
  return _[a1 distanceGps];
}

id objc_msgSend_distanceRawPed(void *a1, const char *a2, ...)
{
  return _[a1 distanceRawPed];
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_doAsync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doAsync:");
}

id objc_msgSend_doAsync_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doAsync:withReply:");
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_dominantMotionActivity(void *a1, const char *a2, ...)
{
  return _[a1 dominantMotionActivity];
}

id objc_msgSend_donateTruthTagLabelForClient_truthLabelUUID_betweenDate_andDate_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateTruthTagLabelForClient:truthLabelUUID:betweenDate:andDate:withReply:");
}

id objc_msgSend_donateTruthTagLabelForClient_truthLabelUUID_recordingTriggerUUID_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateTruthTagLabelForClient:truthLabelUUID:recordingTriggerUUID:withReply:");
}

id objc_msgSend_dontcollect_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dontcollect:isLocal:");
}

id objc_msgSend_doubleForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_doubleForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:defaultValue:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downgradedDuringCoexFriendlyAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 downgradedDuringCoexFriendlyAggressiveDiscoveryScan];
}

id objc_msgSend_downloadAndDecompressFrom_toDecompressedDestination_withTimeout_withCompletionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadAndDecompressFrom:toDecompressedDestination:withTimeout:withCompletionHandler:");
}

id objc_msgSend_downloadIfNeeded_signalQuality_allowCenterOverCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeeded:signalQuality:allowCenterOverCellular:");
}

id objc_msgSend_downloadPayloadSize(void *a1, const char *a2, ...)
{
  return _[a1 downloadPayloadSize];
}

id objc_msgSend_downloadTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTaskWithRequest:completionHandler:");
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return _[a1 drain];
}

id objc_msgSend_dropStreaming(void *a1, const char *a2, ...)
{
  return _[a1 dropStreaming];
}

id objc_msgSend_dumpDatabase_onCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpDatabase:onCompletion:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_durationInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 durationInSeconds];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_effectiveBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveBundleIdentifier];
}

id objc_msgSend_effectiveIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 effectiveIdentifier];
}

id objc_msgSend_effectiveServiceMask(void *a1, const char *a2, ...)
{
  return _[a1 effectiveServiceMask];
}

id objc_msgSend_elevation(void *a1, const char *a2, ...)
{
  return _[a1 elevation];
}

id objc_msgSend_elevationAscended(void *a1, const char *a2, ...)
{
  return _[a1 elevationAscended];
}

id objc_msgSend_elevationDescended(void *a1, const char *a2, ...)
{
  return _[a1 elevationDescended];
}

id objc_msgSend_eligibleForCalorimetry(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForCalorimetry];
}

id objc_msgSend_eligibleForDataCollection(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForDataCollection];
}

id objc_msgSend_eligibleForHealthKit(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForHealthKit];
}

id objc_msgSend_emergencyEnablementAssertionActive(void *a1, const char *a2, ...)
{
  return _[a1 emergencyEnablementAssertionActive];
}

id objc_msgSend_emergencySettingsChange_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencySettingsChange:withReason:");
}

id objc_msgSend_emergencyStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyStateChange:");
}

id objc_msgSend_enable(void *a1, const char *a2, ...)
{
  return _[a1 enable];
}

id objc_msgSend_enableCollection(void *a1, const char *a2, ...)
{
  return _[a1 enableCollection];
}

id objc_msgSend_enableMiLoAtCurrentLocationWithServiceIdentifier_withRequestIdentifier_connectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableMiLoAtCurrentLocationWithServiceIdentifier:withRequestIdentifier:connectionToken:");
}

id objc_msgSend_enableSource(void *a1, const char *a2, ...)
{
  return _[a1 enableSource];
}

id objc_msgSend_enableSources_forContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableSources:forContext:");
}

id objc_msgSend_encodeBinaryLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBinaryLog:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeFilteredPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFilteredPressure:");
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFloat:forKey:");
}

id objc_msgSend_encodeHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeHeartRate:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodePressure:");
}

id objc_msgSend_encodeSystemFieldsWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeSystemFieldsWithCoder:");
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWithCoder:");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _[a1 encodedData];
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValues];
}

id objc_msgSend_encryptedValuesByKey(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValuesByKey];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_endJunction(void *a1, const char *a2, ...)
{
  return _[a1 endJunction];
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return _[a1 endSession];
}

id objc_msgSend_endSessionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionForClient:");
}

id objc_msgSend_endSessionForClient_startingAtTime_stoppingAtTime_sequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionForClient:startingAtTime:stoppingAtTime:sequenceNumber:");
}

id objc_msgSend_endSessionMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionMetrics:");
}

id objc_msgSend_endTime(void *a1, const char *a2, ...)
{
  return _[a1 endTime];
}

id objc_msgSend_endWorkoutSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endWorkoutSession:");
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return _[a1 endowmentNamespaces];
}

id objc_msgSend_ensureMonitoringWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureMonitoringWithType:");
}

id objc_msgSend_ensureServiceIsRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureServiceIsRunning:");
}

id objc_msgSend_ensureStop(void *a1, const char *a2, ...)
{
  return _[a1 ensureStop];
}

id objc_msgSend_entityClass_didChangeArrowState_dueToDeauthorization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityClass:didChangeArrowState:dueToDeauthorization:");
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityForName:inManagedObjectContext:");
}

id objc_msgSend_entry(void *a1, const char *a2, ...)
{
  return _[a1 entry];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateStoredLocationsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStoredLocationsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateStoredLocationsWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStoredLocationsWithOptions:withReply:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_eraseAllData(void *a1, const char *a2, ...)
{
  return _[a1 eraseAllData];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorMergePolicy(void *a1, const char *a2, ...)
{
  return _[a1 errorMergePolicy];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_estimate(void *a1, const char *a2, ...)
{
  return _[a1 estimate];
}

id objc_msgSend_estimatedHRRecoveryParam(void *a1, const char *a2, ...)
{
  return _[a1 estimatedHRRecoveryParam];
}

id objc_msgSend_estimatedHRResponseParam(void *a1, const char *a2, ...)
{
  return _[a1 estimatedHRResponseParam];
}

id objc_msgSend_estimatedVo2Max(void *a1, const char *a2, ...)
{
  return _[a1 estimatedVo2Max];
}

id objc_msgSend_evaluateMotionAlarmState(void *a1, const char *a2, ...)
{
  return _[a1 evaluateMotionAlarmState];
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _[a1 eventBody];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_eventnum(void *a1, const char *a2, ...)
{
  return _[a1 eventnum];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executable(void *a1, const char *a2, ...)
{
  return _[a1 executable];
}

id objc_msgSend_executableIdentity(void *a1, const char *a2, ...)
{
  return _[a1 executableIdentity];
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _[a1 executablePath];
}

id objc_msgSend_executableURL(void *a1, const char *a2, ...)
{
  return _[a1 executableURL];
}

id objc_msgSend_executeCardioChangeEstimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeCardioChangeEstimation:");
}

id objc_msgSend_executeDailyAggregateFeatureCompute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeDailyAggregateFeatureCompute:");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_executeRetrocomputePreprocessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRetrocomputePreprocessing:");
}

id objc_msgSend_executeRiskModelFeatureCompute(void *a1, const char *a2, ...)
{
  return _[a1 executeRiskModelFeatureCompute];
}

id objc_msgSend_exit(void *a1, const char *a2, ...)
{
  return _[a1 exit];
}

id objc_msgSend_exitVisitTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 exitVisitTimestamp];
}

id objc_msgSend_expectedEndDate(void *a1, const char *a2, ...)
{
  return _[a1 expectedEndDate];
}

id objc_msgSend_expensivelyGetIdentifyingInformation_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expensivelyGetIdentifyingInformation:forClient:");
}

id objc_msgSend_expirationAgeSecs(void *a1, const char *a2, ...)
{
  return _[a1 expirationAgeSecs];
}

id objc_msgSend_exportMicroLocationDataForMigrationWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exportMicroLocationDataForMigrationWithReply:");
}

id objc_msgSend_exportMicroLocationDatabaseTablesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exportMicroLocationDatabaseTablesWithReply:");
}

id objc_msgSend_extendSelectorInfoWithProtocol_bases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendSelectorInfoWithProtocol:bases:");
}

id objc_msgSend_extensionItemForDict_withName_withPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionItemForDict:withName:withPayload:");
}

id objc_msgSend_externalSubmersionState(void *a1, const char *a2, ...)
{
  return _[a1 externalSubmersionState];
}

id objc_msgSend_extractComponentFromCharPtr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractComponentFromCharPtr:");
}

id objc_msgSend_fADR(void *a1, const char *a2, ...)
{
  return _[a1 fADR];
}

id objc_msgSend_fAggregateRecordsTimer(void *a1, const char *a2, ...)
{
  return _[a1 fAggregateRecordsTimer];
}

id objc_msgSend_fCovariance(void *a1, const char *a2, ...)
{
  return _[a1 fCovariance];
}

id objc_msgSend_fEndTime(void *a1, const char *a2, ...)
{
  return _[a1 fEndTime];
}

id objc_msgSend_fH(void *a1, const char *a2, ...)
{
  return _[a1 fH];
}

id objc_msgSend_fIsRegisteredForTileDownload(void *a1, const char *a2, ...)
{
  return _[a1 fIsRegisteredForTileDownload];
}

id objc_msgSend_fNextTrackStartTime(void *a1, const char *a2, ...)
{
  return _[a1 fNextTrackStartTime];
}

id objc_msgSend_fNotification(void *a1, const char *a2, ...)
{
  return _[a1 fNotification];
}

id objc_msgSend_fP(void *a1, const char *a2, ...)
{
  return _[a1 fP];
}

id objc_msgSend_fQ(void *a1, const char *a2, ...)
{
  return _[a1 fQ];
}

id objc_msgSend_fSensorRecorderQueryTimer(void *a1, const char *a2, ...)
{
  return _[a1 fSensorRecorderQueryTimer];
}

id objc_msgSend_fSensorRecorderSubscribeTimer(void *a1, const char *a2, ...)
{
  return _[a1 fSensorRecorderSubscribeTimer];
}

id objc_msgSend_fStartTime(void *a1, const char *a2, ...)
{
  return _[a1 fStartTime];
}

id objc_msgSend_fState(void *a1, const char *a2, ...)
{
  return _[a1 fState];
}

id objc_msgSend_fType(void *a1, const char *a2, ...)
{
  return _[a1 fType];
}

id objc_msgSend_failedRecordDeletes(void *a1, const char *a2, ...)
{
  return _[a1 failedRecordDeletes];
}

id objc_msgSend_failedRecordSaves(void *a1, const char *a2, ...)
{
  return _[a1 failedRecordSaves];
}

id objc_msgSend_failedZoneDeletes(void *a1, const char *a2, ...)
{
  return _[a1 failedZoneDeletes];
}

id objc_msgSend_failedZoneSaves(void *a1, const char *a2, ...)
{
  return _[a1 failedZoneSaves];
}

id objc_msgSend_familiarityIndex(void *a1, const char *a2, ...)
{
  return _[a1 familiarityIndex];
}

id objc_msgSend_feedAccelSample_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedAccelSample:time:");
}

id objc_msgSend_feedBodyMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedBodyMetrics:");
}

id objc_msgSend_feedElevationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedElevationData:");
}

id objc_msgSend_feedFitnessMachineData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedFitnessMachineData:");
}

id objc_msgSend_feedGyroSample_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedGyroSample:time:");
}

id objc_msgSend_feedInertialOdometryPacket_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedInertialOdometryPacket:atTime:");
}

id objc_msgSend_feedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedLocation:");
}

id objc_msgSend_feedStepCountUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedStepCountUpdate:");
}

id objc_msgSend_feedWeatherData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedWeatherData:");
}

id objc_msgSend_feedWorkoutEffortEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedWorkoutEffortEstimate:");
}

id objc_msgSend_feelsLikeTemperature(void *a1, const char *a2, ...)
{
  return _[a1 feelsLikeTemperature];
}

id objc_msgSend_fenceHistoryPerSession(void *a1, const char *a2, ...)
{
  return _[a1 fenceHistoryPerSession];
}

id objc_msgSend_fenceID(void *a1, const char *a2, ...)
{
  return _[a1 fenceID];
}

id objc_msgSend_fenceIDToIndex(void *a1, const char *a2, ...)
{
  return _[a1 fenceIDToIndex];
}

id objc_msgSend_fenceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 fenceIdentifier];
}

id objc_msgSend_fenceMetadata(void *a1, const char *a2, ...)
{
  return _[a1 fenceMetadata];
}

id objc_msgSend_fenceNotifier(void *a1, const char *a2, ...)
{
  return _[a1 fenceNotifier];
}

id objc_msgSend_fetchAccessoryBitSetWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryBitSetWithReply:");
}

id objc_msgSend_fetchAccessoryPASCDTransmissionStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryPASCDTransmissionStateWithReply:");
}

id objc_msgSend_fetchAllEntries(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllEntries];
}

id objc_msgSend_fetchAllFencesCountWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllFencesCountWithReply:");
}

id objc_msgSend_fetchAllRecordZonesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllRecordZonesWithCompletionHandler:");
}

id objc_msgSend_fetchAllRecords(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllRecords];
}

id objc_msgSend_fetchAllRecordsForMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllRecordsForMac:");
}

id objc_msgSend_fetchBackgroundInertialOdometrySamplesWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBackgroundInertialOdometrySamplesWithOptions:handler:");
}

id objc_msgSend_fetchCachedPlaceInferencesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCachedPlaceInferencesWithReply:");
}

id objc_msgSend_fetchChangesForZoneIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchChangesForZoneIDs:completionHandler:");
}

id objc_msgSend_fetchCoarseEquivalentForLocation_callbackQueue_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCoarseEquivalentForLocation:callbackQueue:callback:");
}

id objc_msgSend_fetchDataAvailabilityWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDataAvailabilityWithReply:");
}

id objc_msgSend_fetchDedupedLocationOfInterestIdentifiersWithIdentifier_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDedupedLocationOfInterestIdentifiersWithIdentifier:withReply:");
}

id objc_msgSend_fetchElevationsWithStartTime_andEndTime_andBatchSize_andElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchElevationsWithStartTime:andEndTime:andBatchSize:andElevationArray:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEstimatedLocationAtDate:handler:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEstimatedLocationAtDate:options:handler:");
}

id objc_msgSend_fetchFamiliarityIndexResultsWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFamiliarityIndexResultsWithOptions:handler:");
}

id objc_msgSend_fetchFilteredLocations_withElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFilteredLocations:withElevationArray:");
}

id objc_msgSend_fetchFormattedAddress_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFormattedAddress:queue:");
}

id objc_msgSend_fetchFormattedPostalAddressesFromMeCardWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFormattedPostalAddressesFromMeCardWithReply:");
}

id objc_msgSend_fetchGEOBuildingDataAroundCoordinate_inRadius_tileSetStyle_allowNetwork_clearTiles_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "fetchGEOBuildingDataAroundCoordinate:inRadius:tileSetStyle:allowNetwork:clearTiles:withReply:");
}

id objc_msgSend_fetchGEORoadDataAroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "fetchGEORoadDataAroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:withReply:");
}

id objc_msgSend_fetchHasConnectedDevicesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHasConnectedDevicesWithReply:");
}

id objc_msgSend_fetchIsAccessoryConnectedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAccessoryConnectedWithReply:");
}

id objc_msgSend_fetchIsAirplaneModeEnabledWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAirplaneModeEnabledWithReply:");
}

id objc_msgSend_fetchIsAssociatedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAssociatedWithReply:");
}

id objc_msgSend_fetchIsBatteryConnectedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsBatteryConnectedWithReply:");
}

id objc_msgSend_fetchIsCellAvailableWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsCellAvailableWithReply:");
}

id objc_msgSend_fetchIsDeviceVehicle_deviceType_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsDeviceVehicle:deviceType:withReply:");
}

id objc_msgSend_fetchIsWifiAvailableWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsWifiAvailableWithReply:");
}

id objc_msgSend_fetchLOIVisitAtStart(void *a1, const char *a2, ...)
{
  return _[a1 fetchLOIVisitAtStart];
}

id objc_msgSend_fetchLastSignificantLocationDistanceAndLatencyWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLastSignificantLocationDistanceAndLatencyWithReply:");
}

id objc_msgSend_fetchLocationOfInterestAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestAtLocation:");
}

id objc_msgSend_fetchLocationOfInterestAtLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestAtLocation:withReply:");
}

id objc_msgSend_fetchLocationOfInterestForRegion_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestForRegion:withReply:");
}

id objc_msgSend_fetchLocationOfInterestWithIdentifier_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestWithIdentifier:withReply:");
}

id objc_msgSend_fetchLocationWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationWithReply:");
}

id objc_msgSend_fetchLocationsOfInterestIfPossibleWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsOfInterestIfPossibleWithCompletionHandler:");
}

id objc_msgSend_fetchLocationsOfInterestOfType_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsOfInterestOfType:withReply:");
}

id objc_msgSend_fetchLocationsOfInterestWithinDistance_ofLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:");
}

id objc_msgSend_fetchLocationsWithStartTime_andEndTime_andBatchSize_andLocationArray_andVisitSearchStartIndex_andCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "fetchLocationsWithStartTime:andEndTime:andBatchSize:andLocationArray:andVisitSearchStartIndex:andCompletionBlock:");
}

id objc_msgSend_fetchLoiFromId_atTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLoiFromId:atTimestamp:");
}

id objc_msgSend_fetchMacAddressesAmong_nearLatitude_longitude_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMacAddressesAmong:nearLatitude:longitude:withReply:");
}

id objc_msgSend_fetchMostRecentConnectionWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMostRecentConnectionWithReply:");
}

id objc_msgSend_fetchMostRecentInVehicleStartAndExitTimesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMostRecentInVehicleStartAndExitTimesWithReply:");
}

id objc_msgSend_fetchPlaceInferenceAtCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 fetchPlaceInferenceAtCurrentLocation];
}

id objc_msgSend_fetchPlaceInferencesWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPlaceInferencesWithOptions:withReply:");
}

id objc_msgSend_fetchPossibleTerritoriesForLocation_responseQueue_responseBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPossibleTerritoriesForLocation:responseQueue:responseBlock:");
}

id objc_msgSend_fetchReachabilityWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchReachabilityWithReply:");
}

id objc_msgSend_fetchRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecord:");
}

id objc_msgSend_fetchRecordsWithEntityName_byAndPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithEntityName:byAndPredicates:");
}

id objc_msgSend_fetchRelatedLoisForLoi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRelatedLoisForLoi:");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchScanResultWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchScanResultWithReply:");
}

id objc_msgSend_fetchStoredVisitsWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchStoredVisitsWithOptions:handler:");
}

id objc_msgSend_fetchStoredVisitsWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchStoredVisitsWithOptions:withReply:");
}

id objc_msgSend_fetchUserRecordIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordIDWithCompletionHandler:");
}

id objc_msgSend_fetchVehicularDndOperatorStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularDndOperatorStateWithReply:");
}

id objc_msgSend_fetchVehicularDndStateAndHintsAndOperatorStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularDndStateAndHintsAndOperatorStateWithReply:");
}

id objc_msgSend_fetchVehicularDndStateAndHintsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularDndStateAndHintsWithReply:");
}

id objc_msgSend_fetchVehicularFalsePositiveSuppressionStatusWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularFalsePositiveSuppressionStatusWithReply:");
}

id objc_msgSend_fetchVisitStatusAtStart(void *a1, const char *a2, ...)
{
  return _[a1 fetchVisitStatusAtStart];
}

id objc_msgSend_fetchWirelessModemClientCountWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWirelessModemClientCountWithReply:");
}

id objc_msgSend_fetchedDatabaseChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 fetchedDatabaseChangesEvent];
}

id objc_msgSend_fetchedRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 fetchedRecordZoneChangesEvent];
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 fileDescriptor];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForReadingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingAtPath:");
}

id objc_msgSend_fileHandleForWritingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForWritingAtPath:");
}

id objc_msgSend_fileManager(void *a1, const char *a2, ...)
{
  return _[a1 fileManager];
}

id objc_msgSend_filePosixPermissions(void *a1, const char *a2, ...)
{
  return _[a1 filePosixPermissions];
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPathComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPathComponents:");
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _[a1 filename];
}

id objc_msgSend_fillFallThresholds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillFallThresholds:");
}

id objc_msgSend_fillModesUptoTime_atChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillModesUptoTime:atChange:");
}

id objc_msgSend_fillOtherFallModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillOtherFallModel:");
}

id objc_msgSend_fillSlipFallModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillSlipFallModel:");
}

id objc_msgSend_fillTripFallModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillTripFallModel:");
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredElevation_absAltUncertainty_withTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredElevation:absAltUncertainty:withTimestamp:");
}

id objc_msgSend_filteredPressure(void *a1, const char *a2, ...)
{
  return _[a1 filteredPressure];
}

id objc_msgSend_filteredVo2Max(void *a1, const char *a2, ...)
{
  return _[a1 filteredVo2Max];
}

id objc_msgSend_findBuildingsNear_radius_tileSetStyle_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:");
}

id objc_msgSend_findCandidateServersWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findCandidateServersWithCompletion:");
}

id objc_msgSend_findComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findComponent:");
}

id objc_msgSend_findMyAppDidBackgroundOrExitHandler(void *a1, const char *a2, ...)
{
  return _[a1 findMyAppDidBackgroundOrExitHandler];
}

id objc_msgSend_findRoadsNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findRoadsNear:radius:handler:completionHandler:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return _[a1 finishDecoding];
}

id objc_msgSend_finishEncoding(void *a1, const char *a2, ...)
{
  return _[a1 finishEncoding];
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return _[a1 finishTasksAndInvalidate];
}

id objc_msgSend_finished(void *a1, const char *a2, ...)
{
  return _[a1 finished];
}

id objc_msgSend_finished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finished:");
}

id objc_msgSend_fire(void *a1, const char *a2, ...)
{
  return _[a1 fire];
}

id objc_msgSend_fireAlarm_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireAlarm:error:");
}

id objc_msgSend_fireEventAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireEventAlarm:");
}

id objc_msgSend_fireMotionAlarm(void *a1, const char *a2, ...)
{
  return _[a1 fireMotionAlarm];
}

id objc_msgSend_firmwareRevision(void *a1, const char *a2, ...)
{
  return _[a1 firmwareRevision];
}

id objc_msgSend_firstAlarm(void *a1, const char *a2, ...)
{
  return _[a1 firstAlarm];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstStepTime(void *a1, const char *a2, ...)
{
  return _[a1 firstStepTime];
}

id objc_msgSend_fitnessPlusWorkoutInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fitnessPlusWorkoutInstance:");
}

id objc_msgSend_fitnessTracking(void *a1, const char *a2, ...)
{
  return _[a1 fitnessTracking];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_floor(void *a1, const char *a2, ...)
{
  return _[a1 floor];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_flushAll(void *a1, const char *a2, ...)
{
  return _[a1 flushAll];
}

id objc_msgSend_flushAuthDates(void *a1, const char *a2, ...)
{
  return _[a1 flushAuthDates];
}

id objc_msgSend_flushData_userProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushData:userProfile:");
}

id objc_msgSend_flushInMemoryDataWithCompletionQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushInMemoryDataWithCompletionQueue:completionBlock:");
}

id objc_msgSend_flushInterest(void *a1, const char *a2, ...)
{
  return _[a1 flushInterest];
}

id objc_msgSend_flushToFile(void *a1, const char *a2, ...)
{
  return _[a1 flushToFile];
}

id objc_msgSend_forceCompanionHeartbeat(void *a1, const char *a2, ...)
{
  return _[a1 forceCompanionHeartbeat];
}

id objc_msgSend_forceGPSIfSurfaceCalStale(void *a1, const char *a2, ...)
{
  return _[a1 forceGPSIfSurfaceCalStale];
}

id objc_msgSend_forceLocationAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceLocationAtTime:");
}

id objc_msgSend_forceTriggerIgneous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceTriggerIgneous:");
}

id objc_msgSend_forget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forget:");
}

id objc_msgSend_formOfWay(void *a1, const char *a2, ...)
{
  return _[a1 formOfWay];
}

id objc_msgSend_formattedAddressLines(void *a1, const char *a2, ...)
{
  return _[a1 formattedAddressLines];
}

id objc_msgSend_formattedText(void *a1, const char *a2, ...)
{
  return _[a1 formattedText];
}

id objc_msgSend_fractionalGrade(void *a1, const char *a2, ...)
{
  return _[a1 fractionalGrade];
}

id objc_msgSend_fsm_didTransitionFromState_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fsm:didTransitionFromState:toState:");
}

id objc_msgSend_fsm_didUpdateLocationAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fsm:didUpdateLocationAtTime:");
}

id objc_msgSend_fsm_didUpdateSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fsm:didUpdateSource:");
}

id objc_msgSend_fuzzPrivacyHours_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fuzzPrivacyHours:");
}

id objc_msgSend_gaussianProcess_withMslpArray_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gaussianProcess:withMslpArray:withType:");
}

id objc_msgSend_generateLocationManagerNotAvailableError(void *a1, const char *a2, ...)
{
  return _[a1 generateLocationManagerNotAvailableError];
}

id objc_msgSend_generateNewSubArchive(void *a1, const char *a2, ...)
{
  return _[a1 generateNewSubArchive];
}

id objc_msgSend_generationTimeSecs(void *a1, const char *a2, ...)
{
  return _[a1 generationTimeSecs];
}

id objc_msgSend_genericEventDescription(void *a1, const char *a2, ...)
{
  return _[a1 genericEventDescription];
}

id objc_msgSend_genericPasswordQuery(void *a1, const char *a2, ...)
{
  return _[a1 genericPasswordQuery];
}

id objc_msgSend_genericWorkoutInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genericWorkoutInstance:");
}

id objc_msgSend_geoMapItemHandle(void *a1, const char *a2, ...)
{
  return _[a1 geoMapItemHandle];
}

id objc_msgSend_geocodeAddressString_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geocodeAddressString:completionHandler:");
}

id objc_msgSend_geofenceID(void *a1, const char *a2, ...)
{
  return _[a1 geofenceID];
}

id objc_msgSend_getAbsoluteAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 getAbsoluteAltitudeUncertainty];
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 getActivePairedDevice];
}

id objc_msgSend_getAllDevicesWithArchivedDevicesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllDevicesWithArchivedDevicesMatching:");
}

id objc_msgSend_getAndSendCurrentEstimateMeanSeaLevelPressureFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAndSendCurrentEstimateMeanSeaLevelPressureFrom:");
}

id objc_msgSend_getAppsForAreaAtLatitude_longitude_radius_includeRegionalApps_marqueeAppsOnly_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppsForAreaAtLatitude:longitude:radius:includeRegionalApps:marqueeAppsOnly:");
}

id objc_msgSend_getAsyncResponseSilo(void *a1, const char *a2, ...)
{
  return _[a1 getAsyncResponseSilo];
}

id objc_msgSend_getAuthorizationContextOfNonZonalClient_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAuthorizationContextOfNonZonalClient:withReply:");
}

id objc_msgSend_getBasicInfo(void *a1, const char *a2, ...)
{
  return _[a1 getBasicInfo];
}

id objc_msgSend_getBeaconRegion(void *a1, const char *a2, ...)
{
  return _[a1 getBeaconRegion];
}

id objc_msgSend_getBiasFitWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBiasFitWithReply:");
}

id objc_msgSend_getBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBoutMetrics:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCKSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _[a1 getCKSyncEngineMetadata];
}

id objc_msgSend_getCLAvengerScannerPolicyPlatformType(void *a1, const char *a2, ...)
{
  return _[a1 getCLAvengerScannerPolicyPlatformType];
}

id objc_msgSend_getCallIDFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCallIDFromDict:");
}

id objc_msgSend_getClientDeviceMatchingDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientDeviceMatchingDict:");
}

id objc_msgSend_getClientDeviceMatchingHIDDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientDeviceMatchingHIDDevice:");
}

id objc_msgSend_getClientManagerInternalStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientManagerInternalStateWithReply:");
}

id objc_msgSend_getConnection(void *a1, const char *a2, ...)
{
  return _[a1 getConnection];
}

id objc_msgSend_getCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentLocation];
}

id objc_msgSend_getDbDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDbDetails:");
}

id objc_msgSend_getDerivedKeyWithLength_secretData_additionalInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDerivedKeyWithLength:secretData:additionalInfo:");
}

id objc_msgSend_getECIESEncryptedData_key_sharedInfo_prependKeyFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getECIESEncryptedData:key:sharedInfo:prependKeyFingerprint:");
}

id objc_msgSend_getEffectiveClientName_bundlePath_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEffectiveClientName:bundlePath:name:");
}

id objc_msgSend_getElevationThresholdProxyMap(void *a1, const char *a2, ...)
{
  return _[a1 getElevationThresholdProxyMap];
}

id objc_msgSend_getEnclosureMaterial(void *a1, const char *a2, ...)
{
  return _[a1 getEnclosureMaterial];
}

id objc_msgSend_getEstimatedMeanSeaLevelPressure(void *a1, const char *a2, ...)
{
  return _[a1 getEstimatedMeanSeaLevelPressure];
}

id objc_msgSend_getFamiliarityEventFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFamiliarityEventFromIndex:");
}

id objc_msgSend_getFamiliarityIndexForVisit_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFamiliarityIndexForVisit:withReply:");
}

id objc_msgSend_getFencesForBundleID_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFencesForBundleID:withReply:");
}

id objc_msgSend_getFlightOfStairsIn24Hr(void *a1, const char *a2, ...)
{
  return _[a1 getFlightOfStairsIn24Hr];
}

id objc_msgSend_getHealthColdStorageDbCleanupActivityInterval(void *a1, const char *a2, ...)
{
  return _[a1 getHealthColdStorageDbCleanupActivityInterval];
}

id objc_msgSend_getHidDeviceFromEnumeratedDevicesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHidDeviceFromEnumeratedDevicesMatching:");
}

id objc_msgSend_getHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_andCompletionBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:");
}

id objc_msgSend_getIncidentalUseModeForClient_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIncidentalUseModeForClient:withReply:");
}

id objc_msgSend_getIndexInHealthKitSamples_forSessionAttributes_withStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIndexInHealthKitSamples:forSessionAttributes:withStartIndex:");
}

id objc_msgSend_getInitialTransitionStates(void *a1, const char *a2, ...)
{
  return _[a1 getInitialTransitionStates];
}

id objc_msgSend_getIntersiloDelegate(void *a1, const char *a2, ...)
{
  return _[a1 getIntersiloDelegate];
}

id objc_msgSend_getKVStoreDictionary(void *a1, const char *a2, ...)
{
  return _[a1 getKVStoreDictionary];
}

id objc_msgSend_getKeyExternalRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKeyExternalRepresentation:");
}

id objc_msgSend_getKeyFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKeyFingerprint:");
}

id objc_msgSend_getLastAltitude(void *a1, const char *a2, ...)
{
  return _[a1 getLastAltitude];
}

id objc_msgSend_getLastAltitudeAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 getLastAltitudeAccuracy];
}

id objc_msgSend_getLastAltitudeTime(void *a1, const char *a2, ...)
{
  return _[a1 getLastAltitudeTime];
}

id objc_msgSend_getLastPressureSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastPressureSample:");
}

id objc_msgSend_getLocationForBundleID_orBundlePath_dynamicAccuracyReductionEnabled_allowsAlteredAccessoryLocations_replyBlock_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "getLocationForBundleID:orBundlePath:dynamicAccuracyReductionEnabled:allowsAlteredAccessoryLocations:replyBlock:");
}

id objc_msgSend_getLocationSampleAltitudeAndUncertainty_andRefAltitude_andRefUncertainty_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationSampleAltitudeAndUncertainty:andRefAltitude:andRefUncertainty:");
}

id objc_msgSend_getLocationsOfInterestFetchTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 getLocationsOfInterestFetchTimeInterval];
}

id objc_msgSend_getMeanSeaLevelArrayCount(void *a1, const char *a2, ...)
{
  return _[a1 getMeanSeaLevelArrayCount];
}

id objc_msgSend_getMonitoringRecordToNotifyClient(void *a1, const char *a2, ...)
{
  return _[a1 getMonitoringRecordToNotifyClient];
}

id objc_msgSend_getMslpDriftRate_withLastMslp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMslpDriftRate:withLastMslp:");
}

id objc_msgSend_getNumberOfInputApsUsedInWifiTileForCoordinate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNumberOfInputApsUsedInWifiTileForCoordinate:withReply:");
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return _[a1 getPairedDevices];
}

id objc_msgSend_getPartnerIDFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPartnerIDFromDict:");
}

id objc_msgSend_getPedometerBinsAndHistoryWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPedometerBinsAndHistoryWithReply:");
}

id objc_msgSend_getPedometerCalibrationBins_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPedometerCalibrationBins:withReply:");
}

id objc_msgSend_getPowerAssertionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 getPowerAssertionIdentifier];
}

id objc_msgSend_getPredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPredictedWalkDistanceBout:");
}

id objc_msgSend_getRandomBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRandomBytes:");
}

id objc_msgSend_getRavenSolutionAtMCTime_WithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRavenSolutionAtMCTime:WithReply:");
}

id objc_msgSend_getRavenSolutionWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRavenSolutionWithReply:");
}

id objc_msgSend_getRequestDict(void *a1, const char *a2, ...)
{
  return _[a1 getRequestDict];
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getResponseDataDictionary(void *a1, const char *a2, ...)
{
  return _[a1 getResponseDataDictionary];
}

id objc_msgSend_getSampleCount(void *a1, const char *a2, ...)
{
  return _[a1 getSampleCount];
}

id objc_msgSend_getSessionIDWithPhoneNumber_sessionStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSessionIDWithPhoneNumber:sessionStartTime:");
}

id objc_msgSend_getSessionStartTimeFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSessionStartTimeFromDict:");
}

id objc_msgSend_getSharedInfoPrefixFromSessionID_partnerID_partnerAdrPublicKeyData_deviceSessionPrivateKey_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:");
}

id objc_msgSend_getSixMinuteWalkDistancePrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSixMinuteWalkDistancePrediction:");
}

id objc_msgSend_getStartLocation(void *a1, const char *a2, ...)
{
  return _[a1 getStartLocation];
}

id objc_msgSend_getStateSummary(void *a1, const char *a2, ...)
{
  return _[a1 getStateSummary];
}

id objc_msgSend_getStoreURLFromDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStoreURLFromDirectory:");
}

id objc_msgSend_getStoredVisit_betweenStartTime_andEndTime_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStoredVisit:betweenStartTime:andEndTime:withCompletionBlock:");
}

id objc_msgSend_getStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStrideCalEntry:");
}

id objc_msgSend_getStringSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStringSessionId:");
}

id objc_msgSend_getSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _[a1 getSyncEngineMetadata];
}

id objc_msgSend_getSynchronousRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 getSynchronousRemoteObjectProxy];
}

id objc_msgSend_getSysdiagnoseOutputFilename(void *a1, const char *a2, ...)
{
  return _[a1 getSysdiagnoseOutputFilename];
}

id objc_msgSend_getSysdiagnoseOutputPath(void *a1, const char *a2, ...)
{
  return _[a1 getSysdiagnoseOutputPath];
}

id objc_msgSend_getSystemFieldsFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSystemFieldsFromCKRecord:");
}

id objc_msgSend_getTotalDBSizeInMB(void *a1, const char *a2, ...)
{
  return _[a1 getTotalDBSizeInMB];
}

id objc_msgSend_getTrackLengthSecondsForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTrackLengthSecondsForSource:");
}

id objc_msgSend_getTravelVelocity_withCurrLocation_andNextLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTravelVelocity:withCurrLocation:andNextLocation:");
}

id objc_msgSend_getUUID(void *a1, const char *a2, ...)
{
  return _[a1 getUUID];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getUserRecordIDName(void *a1, const char *a2, ...)
{
  return _[a1 getUserRecordIDName];
}

id objc_msgSend_getWalkingSpeedStrideCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWalkingSpeedStrideCal:");
}

id objc_msgSend_gnssOdometerInfo(void *a1, const char *a2, ...)
{
  return _[a1 gnssOdometerInfo];
}

id objc_msgSend_goodSurfaceCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "goodSurfaceCalibration:");
}

id objc_msgSend_gpsLocationBuffer(void *a1, const char *a2, ...)
{
  return _[a1 gpsLocationBuffer];
}

id objc_msgSend_gpsLocationBufferFiltered(void *a1, const char *a2, ...)
{
  return _[a1 gpsLocationBufferFiltered];
}

id objc_msgSend_gpsOdometerBuffer(void *a1, const char *a2, ...)
{
  return _[a1 gpsOdometerBuffer];
}

id objc_msgSend_gpsSource(void *a1, const char *a2, ...)
{
  return _[a1 gpsSource];
}

id objc_msgSend_grade(void *a1, const char *a2, ...)
{
  return _[a1 grade];
}

id objc_msgSend_gradeMean(void *a1, const char *a2, ...)
{
  return _[a1 gradeMean];
}

id objc_msgSend_gradeType(void *a1, const char *a2, ...)
{
  return _[a1 gradeType];
}

id objc_msgSend_gradeVariance(void *a1, const char *a2, ...)
{
  return _[a1 gradeVariance];
}

id objc_msgSend_gradient(void *a1, const char *a2, ...)
{
  return _[a1 gradient];
}

id objc_msgSend_gradientValidity(void *a1, const char *a2, ...)
{
  return _[a1 gradientValidity];
}

id objc_msgSend_groundAltitude(void *a1, const char *a2, ...)
{
  return _[a1 groundAltitude];
}

id objc_msgSend_groundAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 groundAltitudeUncertainty];
}

id objc_msgSend_guidanceLevel(void *a1, const char *a2, ...)
{
  return _[a1 guidanceLevel];
}

id objc_msgSend_gyroDataFromDate_toDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gyroDataFromDate:toDate:");
}

id objc_msgSend_handleBoutResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBoutResults:");
}

id objc_msgSend_handleEntryExitDelegateCallbackForRegion_withState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEntryExitDelegateCallbackForRegion:withState:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFetchedInputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedInputRecord:");
}

id objc_msgSend_handleFetchedOutputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedOutputRecord:");
}

id objc_msgSend_handleFetchedRecordDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedRecordDeletion:");
}

id objc_msgSend_handleFetchedRecordModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedRecordModification:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleForPredicate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleForPredicate:error:");
}

id objc_msgSend_handleFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFoundDevice:");
}

id objc_msgSend_handleLocationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLocationData:");
}

id objc_msgSend_handleMessageError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageError:");
}

id objc_msgSend_handleMessageSendError_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageSendError:identifier:");
}

id objc_msgSend_handleMessageSendSuccessForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageSendSuccessForIdentifier:");
}

id objc_msgSend_handleNewLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNewLocation:");
}

id objc_msgSend_handleOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOdometer:");
}

id objc_msgSend_handlePair(void *a1, const char *a2, ...)
{
  return _[a1 handlePair];
}

id objc_msgSend_handleProvisionalIntermediationForService_forClientKey_at_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleProvisionalIntermediationForService:forClientKey:at:withReply:");
}

id objc_msgSend_handlePublisherResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePublisherResponse:");
}

id objc_msgSend_handleRetryHealthKitDeleteSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRetryHealthKitDeleteSamples:");
}

id objc_msgSend_handleServerRecordChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleServerRecordChanged:");
}

id objc_msgSend_handleUnknownItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnknownItem:");
}

id objc_msgSend_handleUnpair(void *a1, const char *a2, ...)
{
  return _[a1 handleUnpair];
}

id objc_msgSend_handleZoneDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZoneDeleted:");
}

id objc_msgSend_handleZoneNotFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZoneNotFound:");
}

id objc_msgSend_handleZonePurge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZonePurge:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _[a1 handler];
}

id objc_msgSend_hardwareType(void *a1, const char *a2, ...)
{
  return _[a1 hardwareType];
}

id objc_msgSend_hasActiveAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveAggressiveScan];
}

id objc_msgSend_hasActiveBTFindingScan(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveBTFindingScan];
}

id objc_msgSend_hasAltitude(void *a1, const char *a2, ...)
{
  return _[a1 hasAltitude];
}

id objc_msgSend_hasArfcn(void *a1, const char *a2, ...)
{
  return _[a1 hasArfcn];
}

id objc_msgSend_hasArrivalDate(void *a1, const char *a2, ...)
{
  return _[a1 hasArrivalDate];
}

id objc_msgSend_hasBandclass(void *a1, const char *a2, ...)
{
  return _[a1 hasBandclass];
}

id objc_msgSend_hasBsid(void *a1, const char *a2, ...)
{
  return _[a1 hasBsid];
}

id objc_msgSend_hasBytesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 hasBytesAvailable];
}

id objc_msgSend_hasCellID(void *a1, const char *a2, ...)
{
  return _[a1 hasCellID];
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_hasChannel(void *a1, const char *a2, ...)
{
  return _[a1 hasChannel];
}

id objc_msgSend_hasConfidence(void *a1, const char *a2, ...)
{
  return _[a1 hasConfidence];
}

id objc_msgSend_hasCoordinate(void *a1, const char *a2, ...)
{
  return _[a1 hasCoordinate];
}

id objc_msgSend_hasDeltaDistance(void *a1, const char *a2, ...)
{
  return _[a1 hasDeltaDistance];
}

id objc_msgSend_hasDeltaDistanceAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 hasDeltaDistanceAccuracy];
}

id objc_msgSend_hasDepartureDate(void *a1, const char *a2, ...)
{
  return _[a1 hasDepartureDate];
}

id objc_msgSend_hasDestination(void *a1, const char *a2, ...)
{
  return _[a1 hasDestination];
}

id objc_msgSend_hasDestinationName(void *a1, const char *a2, ...)
{
  return _[a1 hasDestinationName];
}

id objc_msgSend_hasEstimate(void *a1, const char *a2, ...)
{
  return _[a1 hasEstimate];
}

id objc_msgSend_hasExecutedScheduleFromCellularConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasExecutedScheduleFromCellularConnectivity];
}

id objc_msgSend_hasExecutedScheduleFromWifiConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasExecutedScheduleFromWifiConnectivity];
}

id objc_msgSend_hasExpirationAgeSecs(void *a1, const char *a2, ...)
{
  return _[a1 hasExpirationAgeSecs];
}

id objc_msgSend_hasGPS(void *a1, const char *a2, ...)
{
  return _[a1 hasGPS];
}

id objc_msgSend_hasGenerationTimeSecs(void *a1, const char *a2, ...)
{
  return _[a1 hasGenerationTimeSecs];
}

id objc_msgSend_hasGroundAltitude(void *a1, const char *a2, ...)
{
  return _[a1 hasGroundAltitude];
}

id objc_msgSend_hasGroundAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 hasGroundAltitudeUncertainty];
}

id objc_msgSend_hasGuidanceLevel(void *a1, const char *a2, ...)
{
  return _[a1 hasGuidanceLevel];
}

id objc_msgSend_hasInfoMask(void *a1, const char *a2, ...)
{
  return _[a1 hasInfoMask];
}

id objc_msgSend_hasIsAllowOverCellular(void *a1, const char *a2, ...)
{
  return _[a1 hasIsAllowOverCellular];
}

id objc_msgSend_hasLineID(void *a1, const char *a2, ...)
{
  return _[a1 hasLineID];
}

id objc_msgSend_hasLocation(void *a1, const char *a2, ...)
{
  return _[a1 hasLocation];
}

id objc_msgSend_hasMaxAbsSlope(void *a1, const char *a2, ...)
{
  return _[a1 hasMaxAbsSlope];
}

id objc_msgSend_hasMcc(void *a1, const char *a2, ...)
{
  return _[a1 hasMcc];
}

id objc_msgSend_hasMnc(void *a1, const char *a2, ...)
{
  return _[a1 hasMnc];
}

id objc_msgSend_hasMoreData(void *a1, const char *a2, ...)
{
  return _[a1 hasMoreData];
}

id objc_msgSend_hasNavigationState(void *a1, const char *a2, ...)
{
  return _[a1 hasNavigationState];
}

id objc_msgSend_hasNid(void *a1, const char *a2, ...)
{
  return _[a1 hasNid];
}

id objc_msgSend_hasNorthWestLatitude(void *a1, const char *a2, ...)
{
  return _[a1 hasNorthWestLatitude];
}

id objc_msgSend_hasNorthWestLongitude(void *a1, const char *a2, ...)
{
  return _[a1 hasNorthWestLongitude];
}

id objc_msgSend_hasNrarfcn(void *a1, const char *a2, ...)
{
  return _[a1 hasNrarfcn];
}

id objc_msgSend_hasNumZaxisHarvestTraces(void *a1, const char *a2, ...)
{
  return _[a1 hasNumZaxisHarvestTraces];
}

id objc_msgSend_hasOdometer(void *a1, const char *a2, ...)
{
  return _[a1 hasOdometer];
}

id objc_msgSend_hasOrigin(void *a1, const char *a2, ...)
{
  return _[a1 hasOrigin];
}

id objc_msgSend_hasPid(void *a1, const char *a2, ...)
{
  return _[a1 hasPid];
}

id objc_msgSend_hasPnoffset(void *a1, const char *a2, ...)
{
  return _[a1 hasPnoffset];
}

id objc_msgSend_hasPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 hasPowerAssertion];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasPressureChangeFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPressureChangeFrom:to:");
}

id objc_msgSend_hasPsc(void *a1, const char *a2, ...)
{
  return _[a1 hasPsc];
}

id objc_msgSend_hasRawCoordinateLatitude(void *a1, const char *a2, ...)
{
  return _[a1 hasRawCoordinateLatitude];
}

id objc_msgSend_hasRawCoordinateLongitude(void *a1, const char *a2, ...)
{
  return _[a1 hasRawCoordinateLongitude];
}

id objc_msgSend_hasReach(void *a1, const char *a2, ...)
{
  return _[a1 hasReach];
}

id objc_msgSend_hasRegisteredForCellularConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasRegisteredForCellularConnectivity];
}

id objc_msgSend_hasRegisteredForWifiConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 hasRegisteredForWifiConnectivity];
}

id objc_msgSend_hasRouteSharingPolicyLongFormVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRouteSharingPolicyLongFormVideo:");
}

id objc_msgSend_hasScheduledArrival(void *a1, const char *a2, ...)
{
  return _[a1 hasScheduledArrival];
}

id objc_msgSend_hasScheduledDeparture(void *a1, const char *a2, ...)
{
  return _[a1 hasScheduledDeparture];
}

id objc_msgSend_hasScore(void *a1, const char *a2, ...)
{
  return _[a1 hasScore];
}

id objc_msgSend_hasSessionAttributes(void *a1, const char *a2, ...)
{
  return _[a1 hasSessionAttributes];
}

id objc_msgSend_hasSid(void *a1, const char *a2, ...)
{
  return _[a1 hasSid];
}

id objc_msgSend_hasSlope(void *a1, const char *a2, ...)
{
  return _[a1 hasSlope];
}

id objc_msgSend_hasSouthEastLatitude(void *a1, const char *a2, ...)
{
  return _[a1 hasSouthEastLatitude];
}

id objc_msgSend_hasSouthEastLongitude(void *a1, const char *a2, ...)
{
  return _[a1 hasSouthEastLongitude];
}

id objc_msgSend_hasStartTime(void *a1, const char *a2, ...)
{
  return _[a1 hasStartTime];
}

id objc_msgSend_hasStopFrom(void *a1, const char *a2, ...)
{
  return _[a1 hasStopFrom];
}

id objc_msgSend_hasStopID(void *a1, const char *a2, ...)
{
  return _[a1 hasStopID];
}

id objc_msgSend_hasStopTime(void *a1, const char *a2, ...)
{
  return _[a1 hasStopTime];
}

id objc_msgSend_hasStopTo(void *a1, const char *a2, ...)
{
  return _[a1 hasStopTo];
}

id objc_msgSend_hasStrideCal(void *a1, const char *a2, ...)
{
  return _[a1 hasStrideCal];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTacID(void *a1, const char *a2, ...)
{
  return _[a1 hasTacID];
}

id objc_msgSend_hasTerrainElevation(void *a1, const char *a2, ...)
{
  return _[a1 hasTerrainElevation];
}

id objc_msgSend_hasTileType(void *a1, const char *a2, ...)
{
  return _[a1 hasTileType];
}

id objc_msgSend_hasTileX(void *a1, const char *a2, ...)
{
  return _[a1 hasTileX];
}

id objc_msgSend_hasTileY(void *a1, const char *a2, ...)
{
  return _[a1 hasTileY];
}

id objc_msgSend_hasTimestampGps(void *a1, const char *a2, ...)
{
  return _[a1 hasTimestampGps];
}

id objc_msgSend_hasTrackedTransportType(void *a1, const char *a2, ...)
{
  return _[a1 hasTrackedTransportType];
}

id objc_msgSend_hasTransportType(void *a1, const char *a2, ...)
{
  return _[a1 hasTransportType];
}

id objc_msgSend_hasTravelTime(void *a1, const char *a2, ...)
{
  return _[a1 hasTravelTime];
}

id objc_msgSend_hasTropicalSavannaBranchCount(void *a1, const char *a2, ...)
{
  return _[a1 hasTropicalSavannaBranchCount];
}

id objc_msgSend_hasTropicalSavannaProximity(void *a1, const char *a2, ...)
{
  return _[a1 hasTropicalSavannaProximity];
}

id objc_msgSend_hasTropicalSavannaTreeId(void *a1, const char *a2, ...)
{
  return _[a1 hasTropicalSavannaTreeId];
}

id objc_msgSend_hasUarfcn(void *a1, const char *a2, ...)
{
  return _[a1 hasUarfcn];
}

id objc_msgSend_hasValidData(void *a1, const char *a2, ...)
{
  return _[a1 hasValidData];
}

id objc_msgSend_hasValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValueForKey:");
}

id objc_msgSend_hasValueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValueForKey:atKeyPath:");
}

id objc_msgSend_hasVersion(void *a1, const char *a2, ...)
{
  return _[a1 hasVersion];
}

id objc_msgSend_hasVerticalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 hasVerticalAccuracy];
}

id objc_msgSend_hasZoneid(void *a1, const char *a2, ...)
{
  return _[a1 hasZoneid];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_hidDevice(void *a1, const char *a2, ...)
{
  return _[a1 hidDevice];
}

id objc_msgSend_homeArchive(void *a1, const char *a2, ...)
{
  return _[a1 homeArchive];
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 horizontalAccuracy];
}

id objc_msgSend_horizontalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 horizontalUncertainty];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return _[a1 hour];
}

id objc_msgSend_hr(void *a1, const char *a2, ...)
{
  return _[a1 hr];
}

id objc_msgSend_hrCadenceAgreementMean(void *a1, const char *a2, ...)
{
  return _[a1 hrCadenceAgreementMean];
}

id objc_msgSend_hrCadenceAgreementVariance(void *a1, const char *a2, ...)
{
  return _[a1 hrCadenceAgreementVariance];
}

id objc_msgSend_hrConfidence(void *a1, const char *a2, ...)
{
  return _[a1 hrConfidence];
}

id objc_msgSend_hrConfidenceMean(void *a1, const char *a2, ...)
{
  return _[a1 hrConfidenceMean];
}

id objc_msgSend_hrConfidenceVariance(void *a1, const char *a2, ...)
{
  return _[a1 hrConfidenceVariance];
}

id objc_msgSend_hrMax(void *a1, const char *a2, ...)
{
  return _[a1 hrMax];
}

id objc_msgSend_hrMean(void *a1, const char *a2, ...)
{
  return _[a1 hrMean];
}

id objc_msgSend_hrMin(void *a1, const char *a2, ...)
{
  return _[a1 hrMin];
}

id objc_msgSend_hrMinAdjusted(void *a1, const char *a2, ...)
{
  return _[a1 hrMinAdjusted];
}

id objc_msgSend_hrRecovery(void *a1, const char *a2, ...)
{
  return _[a1 hrRecovery];
}

id objc_msgSend_hrRecoveryReference(void *a1, const char *a2, ...)
{
  return _[a1 hrRecoveryReference];
}

id objc_msgSend_hrTime(void *a1, const char *a2, ...)
{
  return _[a1 hrTime];
}

id objc_msgSend_hrVariance(void *a1, const char *a2, ...)
{
  return _[a1 hrVariance];
}

id objc_msgSend_iCloudManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 iCloudManagedAppleID];
}

id objc_msgSend_iOSSourceVersionNewEnough_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iOSSourceVersionNewEnough:");
}

id objc_msgSend_iTunesManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 iTunesManagedAppleID];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierWithPid:");
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceID];
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceIdentifier];
}

id objc_msgSend_idsOptions(void *a1, const char *a2, ...)
{
  return _[a1 idsOptions];
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return _[a1 idsService];
}

id objc_msgSend_idsStatus(void *a1, const char *a2, ...)
{
  return _[a1 idsStatus];
}

id objc_msgSend_immutableData(void *a1, const char *a2, ...)
{
  return _[a1 immutableData];
}

id objc_msgSend_inOutdoorPedestrianSession(void *a1, const char *a2, ...)
{
  return _[a1 inOutdoorPedestrianSession];
}

id objc_msgSend_inOutdoorWorkout(void *a1, const char *a2, ...)
{
  return _[a1 inOutdoorWorkout];
}

id objc_msgSend_inUseAssertionInvalidatedDueToWatchConnectivityForClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseAssertionInvalidatedDueToWatchConnectivityForClientKey:");
}

id objc_msgSend_inUseLevel(void *a1, const char *a2, ...)
{
  return _[a1 inUseLevel];
}

id objc_msgSend_inUseLevelIsAtLeast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseLevelIsAtLeast:");
}

id objc_msgSend_inVisitStatus(void *a1, const char *a2, ...)
{
  return _[a1 inVisitStatus];
}

id objc_msgSend_inactiveSubArchives(void *a1, const char *a2, ...)
{
  return _[a1 inactiveSubArchives];
}

id objc_msgSend_includeRegionalApps(void *a1, const char *a2, ...)
{
  return _[a1 includeRegionalApps];
}

id objc_msgSend_incrementAttributionCountForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementAttributionCountForServiceType:");
}

id objc_msgSend_incrementCountBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementCountBy:");
}

id objc_msgSend_incrementTowardsTarget_andCurrent_withIncrement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementTowardsTarget:andCurrent:withIncrement:");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _[a1 index];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_inertialSamples(void *a1, const char *a2, ...)
{
  return _[a1 inertialSamples];
}

id objc_msgSend_infoMask(void *a1, const char *a2, ...)
{
  return _[a1 infoMask];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initAllDayContextManagers(void *a1, const char *a2, ...)
{
  return _[a1 initAllDayContextManagers];
}

id objc_msgSend_initAnalyticsCache(void *a1, const char *a2, ...)
{
  return _[a1 initAnalyticsCache];
}

id objc_msgSend_initAnalyticsTimer(void *a1, const char *a2, ...)
{
  return _[a1 initAnalyticsTimer];
}

id objc_msgSend_initCentroidDatabase(void *a1, const char *a2, ...)
{
  return _[a1 initCentroidDatabase];
}

id objc_msgSend_initCentroidDbAndMetadataDb(void *a1, const char *a2, ...)
{
  return _[a1 initCentroidDbAndMetadataDb];
}

id objc_msgSend_initContextManagersForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initContextManagersForNotification:");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initFromClientCondition_clientKeyPath_authorizationContext_universe_identifier_callbackHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:callbackHandler:");
}

id objc_msgSend_initFromClientCondition_clientKeyPath_authorizationContext_universe_identifier_removePersistingFenceFromMonitoring_callbackHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:removePersistingFenceFromMonit oring:callbackHandler:");
}

id objc_msgSend_initInSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInSilo:");
}

id objc_msgSend_initInSilo_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInSilo:withIdentifier:");
}

id objc_msgSend_initInSilo_withIdentifier_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInSilo:withIdentifier:state:");
}

id objc_msgSend_initInUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:");
}

id objc_msgSend_initInUniverse_andIdentifier_andRadiusInMeters_andCallback_andStatusCallback_andErrorCallback_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initInUniverse:andIdentifier:andRadiusInMeters:andCallback:andStatusCallback:andErrorCallback:");
}

id objc_msgSend_initInUniverse_stepCountDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:stepCountDb:");
}

id objc_msgSend_initInUniverse_withDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:withDelegate:");
}

id objc_msgSend_initNearbyAllowedWithCenter_radius_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initNearbyAllowedWithCenter:radius:identifier:");
}

id objc_msgSend_initOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initOnQueue:");
}

id objc_msgSend_initRecordWithCondition_options_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRecordWithCondition:options:event:");
}

id objc_msgSend_initRecordWithMonitoringRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRecordWithMonitoringRecord:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initToDirectory_prefix_rotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initToDirectory:prefix:rotation:");
}

id objc_msgSend_initToFileAtPath_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initToFileAtPath:append:");
}

id objc_msgSend_initToMemory(void *a1, const char *a2, ...)
{
  return _[a1 initToMemory];
}

id objc_msgSend_initWithAbsoluteTimeStamp_clientBundleIdentifier_maxProbabilityLabelIdentifier_maxProbability_probabilityVector_numDevicesVector_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithAbsoluteTimeStamp:clientBundleIdentifier:maxProbabilityLabelIdentifier:maxProbability:probabilityVect or:numDevicesVector:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_channel_didCauseWake_detailsBitmask_protocolID_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithAddress:advertisementData:status:reserved:rssi:scanDate:channel:didCauseWake:detailsBitmask:protocolID:");
}

id objc_msgSend_initWithAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAltitude:");
}

id objc_msgSend_initWithAnalyticsEvent_binPeriod_atCurrentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsEvent:binPeriod:atCurrentTime:");
}

id objc_msgSend_initWithAppMonitorProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppMonitorProxy:");
}

id objc_msgSend_initWithApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationBundleIdentifier:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAscending_confidence_dateInterval_labelVisit_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAscending:confidence:dateInterval:labelVisit:limit:");
}

id objc_msgSend_initWithAscending_confidence_dateInterval_labelVisit_limit_sources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAscending:confidence:dateInterval:labelVisit:limit:sources:");
}

id objc_msgSend_initWithAscending_confidence_dateInterval_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAscending:confidence:dateInterval:limit:");
}

id objc_msgSend_initWithAttributedEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedEntity:");
}

id objc_msgSend_initWithAttributionId_andTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributionId:andTimer:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBatchedSensorSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBatchedSensorSubscription:");
}

id objc_msgSend_initWithBegin_end_state_kValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBegin:end:state:kValue:");
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBool:");
}

id objc_msgSend_initWithBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBoutMetrics:");
}

id objc_msgSend_initWithBoutMetricsRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBoutMetricsRecorderDb:");
}

id objc_msgSend_initWithBundleIDs_states_elevatedPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIDs:states:elevatedPriority:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:error:");
}

id objc_msgSend_initWithBundleLocationProvider_inSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleLocationProvider:inSilo:");
}

id objc_msgSend_initWithBundlePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundlePath:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_deallocator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:deallocator:");
}

id objc_msgSend_initWithCLMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLMotionActivity:");
}

id objc_msgSend_initWithCLSWOLFSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLSWOLFSummary:");
}

id objc_msgSend_initWithCLStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLStrideCalEntry:");
}

id objc_msgSend_initWithCLWorkoutMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLWorkoutMets:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCalibrationTracks_rawSpeedToKValueBins_stepCadenceToStrideLengthBins_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalibrationTracks:rawSpeedToKValueBins:stepCadenceToStrideLengthBins:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCenter_radius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCenter:radius:");
}

id objc_msgSend_initWithCenter_radius_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCenter:radius:identifier:");
}

id objc_msgSend_initWithClassifier_rootDirectory_basename_requestCode_itemCountThresholdForAutoCleanUp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClassifier:rootDirectory:basename:requestCode:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_initWithClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:");
}

id objc_msgSend_initWithClient_identifier_atTime_atMonotonicTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:identifier:atTime:atMonotonicTime:");
}

id objc_msgSend_initWithClient_withIdentifier_usingReferenceFrame_atMachContinuousTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:withIdentifier:usingReferenceFrame:atMachContinuousTime:");
}

id objc_msgSend_initWithClientCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientCoordinate:");
}

id objc_msgSend_initWithClientLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLocation:");
}

id objc_msgSend_initWithClientLocation_clientLocationPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLocation:clientLocationPrivate:");
}

id objc_msgSend_initWithClientLocation_coarseMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLocation:coarseMetaData:");
}

id objc_msgSend_initWithClientManagerPointer_andUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientManagerPointer:andUniverse:");
}

id objc_msgSend_initWithClientMonitoringRecord_clientKeyPath_authorizationContext_universe_identifier_initForStopMonitoring_callbackHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithClientMonitoringRecord:clientKeyPath:authorizationContext:universe:identifier:initForStopMonitoring:callbackHandler:");
}

id objc_msgSend_initWithCloseDeviceList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloseDeviceList:");
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoder:");
}

id objc_msgSend_initWithColdStorageManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithColdStorageManager:");
}

id objc_msgSend_initWithCompanionNotifierCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCompanionNotifierCompanion:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithConfidenceReasonEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfidenceReasonEnum:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConfiguration_clientKeyPath_authorizationContext_universe_hasClassCAccess_callbackHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithConfiguration:clientKeyPath:authorizationContext:universe:hasClassCAccess:callbackHandler:");
}

id objc_msgSend_initWithConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionState:");
}

id objc_msgSend_initWithContainerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:");
}

id objc_msgSend_initWithContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContextManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextManager:");
}

id objc_msgSend_initWithContextManager_andUniverse_andDelegate_andBuffers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextManager:andUniverse:andDelegate:andBuffers:");
}

id objc_msgSend_initWithContextType_forNotification_startTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextType:forNotification:startTime:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:");
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:");
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_placeInference_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:");
}

id objc_msgSend_initWithDaemonClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonClient:");
}

id objc_msgSend_initWithDaemonLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonLocation:");
}

id objc_msgSend_initWithDaemonLocationPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonLocationPrivate:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataType:");
}

id objc_msgSend_initWithDatabase_dataSource_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabase:dataSource:metadata:");
}

id objc_msgSend_initWithDatabase_stateSerialization_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabase:stateSerialization:delegate:");
}

id objc_msgSend_initWithDate_distance_averageSpeed_verticalDescent_runCount_maximumSpeed_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:distance:averageSpeed:verticalDescent:runCount:maximumSpeed:");
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:");
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_type_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:type:");
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_type_downsampleRequired_smoothingErrorThreshold_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:type:downsampleRequired:smoothingErrorThreshold:");
}

id objc_msgSend_initWithDateInterval_lookbackInterval_spatialGranularity_referenceLocation_referenceLocationSummary_distance_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDateInterval:lookbackInterval:spatialGranularity:referenceLocation:referenceLocationSummary:distance:");
}

id objc_msgSend_initWithDefaultDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDefaultDirectories:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_andUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:andUniverse:");
}

id objc_msgSend_initWithDelegate_centralManager_optedIn_reconciler_queue_powerAssertionDelegate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:centralManager:optedIn:reconciler:queue:powerAssertionDelegate:");
}

id objc_msgSend_initWithDelegate_platformType_supportsPerTypeDuplicateFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:platformType:supportsPerTypeDuplicateFilter:");
}

id objc_msgSend_initWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:");
}

id objc_msgSend_initWithDelegate_queue_matching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:matching:");
}

id objc_msgSend_initWithDelegate_queue_optedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:optedIn:");
}

id objc_msgSend_initWithDelegate_queue_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:options:");
}

id objc_msgSend_initWithDelegate_withSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:withSilo:");
}

id objc_msgSend_initWithDeltaDistance_startDate_endDate_accuracy_rawSpeed_gpsSpeedAccuracy_timestampGps_deltaGroundAltitude_groundAltitudeUncertainty_originDevice_slope_maxAbsSlope_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:g roundAltitudeUncertainty:originDevice:slope:maxAbsSlope:");
}

id objc_msgSend_initWithDeltaPositionX_deltaPositionY_deltaPositionZ_deltaVelocityX_deltaVelocityY_deltaVelocityZ_quaternionX_quaternionY_quaternionZ_quaternionW_rotationArbitraryToTrueNorth_staticFlag_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDeltaPositionX:deltaPositionY:deltaPositionZ:deltaVelocityX:deltaVelocityY:deltaVelocityZ:quaternionX :quaternionY:quaternionZ:quaternionW:rotationArbitraryToTrueNorth:staticFlag:timestamp:");
}

id objc_msgSend_initWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDescription:");
}

id objc_msgSend_initWithDeviceIdentifier_uwbRange_bleRSSI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceIdentifier:uwbRange:bleRSSI:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:");
}

id objc_msgSend_initWithDirectory_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_initWithDirectory_requestCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:requestCode:");
}

id objc_msgSend_initWithDirectory_requestCode_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:requestCode:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_initWithDistance_inUniverse_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDistance:inUniverse:handler:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDomain_maxProbabilityMicroLocationIdentifier_maxProbability_probabilityVector_isStable_numDevicesVector_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDomain:maxProbabilityMicroLocationIdentifier:maxProbability:probabilityVector:isStable:numDevicesVector:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithEffectiveBundlePath_delegate_onQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffectiveBundlePath:delegate:onQueue:");
}

id objc_msgSend_initWithElevation_dateInterval_elevationUncertainty_estimationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElevation:dateInterval:elevationUncertainty:estimationStatus:");
}

id objc_msgSend_initWithElevationGradeEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElevationGradeEntry:");
}

id objc_msgSend_initWithElevationSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElevationSubscription:");
}

id objc_msgSend_initWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityName:");
}

id objc_msgSend_initWithEventDate_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventDate:type:");
}

id objc_msgSend_initWithEventType_withDescription_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventType:withDescription:withError:");
}

id objc_msgSend_initWithExecutableIdentity_website_systemService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExecutableIdentity:website:systemService:");
}

id objc_msgSend_initWithExecutablePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExecutablePath:");
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:target:attributes:");
}

id objc_msgSend_initWithExportDatabaseTablesResult_requestIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExportDatabaseTablesResult:requestIdentifier:error:");
}

id objc_msgSend_initWithExportDir_fileName_sandboxExtensionTok_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExportDir:fileName:sandboxExtensionTok:");
}

id objc_msgSend_initWithFenceMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFenceMonitor:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFidelityPolicy_locations_accessPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFidelityPolicy:locations:accessPoints:");
}

id objc_msgSend_initWithFidelityPolicy_locations_accessPoints_clientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFidelityPolicy:locations:accessPoints:clientIdentifier:");
}

id objc_msgSend_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:");
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:closeOnDealloc:");
}

id objc_msgSend_initWithFilename_withDataProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilename:withDataProtectionClass:");
}

id objc_msgSend_initWithFilteredElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilteredElevation:");
}

id objc_msgSend_initWithFingerprintErrorEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFingerprintErrorEnum:");
}

id objc_msgSend_initWithFireTime_timeInterval_serviceIdentifier_wakeDevice_clTimer_silo_minimumEarlyFireProportion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:");
}

id objc_msgSend_initWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFloat:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithGEOCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGEOCoordinate:");
}

id objc_msgSend_initWithGaitMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGaitMetrics:");
}

id objc_msgSend_initWithHRRecoveryInputHR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHRRecoveryInputHR:");
}

id objc_msgSend_initWithHRRecoveryInputWR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHRRecoveryInputWR:");
}

id objc_msgSend_initWithHRRecoverySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHRRecoverySession:");
}

id objc_msgSend_initWithHarvesterExternal_andSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHarvesterExternal:andSilo:");
}

id objc_msgSend_initWithHidDevice_matchingDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHidDevice:matchingDict:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_andType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:andType:");
}

id objc_msgSend_initWithIdentifier_keyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:keyType:");
}

id objc_msgSend_initWithIdentifier_refinement_state_date_diagnostics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:refinement:state:date:diagnostics:");
}

id objc_msgSend_initWithIdentifier_targetQueue_waking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:targetQueue:waking:");
}

id objc_msgSend_initWithInUseLevel_registrationResult_transientAwareRegistrationResult_serviceMaskTuple_diagnosticMask_authorizedForWidgetUpdates_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:author izedForWidgetUpdates:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithInternalName_binPeriod_aggregationPeriod_atCurrentTime_andSubmit_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:");
}

id objc_msgSend_initWithKeyPointerFunctions_valuePointerFunctions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:");
}

id objc_msgSend_initWithLabelIdentifier_probability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLabelIdentifier:probability:");
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLatitude:longitude:");
}

id objc_msgSend_initWithLatitude_longitude_horizontalUncertainty_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLatitude:longitude:horizontalUncertainty:date:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithLocation_addressDictionary_region_areasOfInterest_mapItemSource_geoMapItemHandle_category_meCardAddress_muid_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:category:meCardAddress:muid:");
}

id objc_msgSend_initWithLocation_addressDictionary_region_areasOfInterest_mapItemSource_geoMapItemHandle_meCardAddress_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:meCardAddress:");
}

id objc_msgSend_initWithLocationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocationController:");
}

id objc_msgSend_initWithLocationTypeEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocationTypeEnum:");
}

id objc_msgSend_initWithLoiLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLoiLocationProvider:");
}

id objc_msgSend_initWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLong:");
}

id objc_msgSend_initWithMac_rssi_channel_age_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMac:rssi:channel:age:date:");
}

id objc_msgSend_initWithMacAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMacAddress:");
}

id objc_msgSend_initWithMacAddress_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMacAddress:timestamp:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithMagneticAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMagneticAccessory:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithMediator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMediator:");
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_diskPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMemoryCapacity:diskCapacity:diskPath:");
}

id objc_msgSend_initWithMiLoConnectionSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMiLoConnectionSubscription:");
}

id objc_msgSend_initWithMicroLocationIdentifier_probability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMicroLocationIdentifier:probability:");
}

id objc_msgSend_initWithMicroLocationNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMicroLocationNotifier:");
}

id objc_msgSend_initWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMode:");
}

id objc_msgSend_initWithMonitorGpsExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonitorGpsExternal:");
}

id objc_msgSend_initWithMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionActivity:");
}

id objc_msgSend_initWithMotionActivity_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionActivity:endDate:");
}

id objc_msgSend_initWithMotionAlarmSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionAlarmSubscription:");
}

id objc_msgSend_initWithMotionLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionLogger:");
}

id objc_msgSend_initWithMovedBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMovedBuffer:");
}

id objc_msgSend_initWithNSDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNSDictionary:");
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:managedObjectModel:");
}

id objc_msgSend_initWithName_type_duration_repeats_alarmId_bundleId_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:type:duration:repeats:alarmId:bundleId:state:");
}

id objc_msgSend_initWithNumClustersLearnedInModel_numRecordingTriggersAtCurrentLOI_numInputValidFingerprints_numInputValidFingerprintsLabeled_numInputValidFingerprintsUnlabeled_numFingerprintsBeforePruning_numFingerprintsAfterPruning_numWiFiAccessPoints_numBLESources_numUWBSources_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithNumClustersLearnedInModel:numRecordingTriggersAtCurrentLOI:numInputValidFingerprints:numInputValidFin gerprintsLabeled:numInputValidFingerprintsUnlabeled:numFingerprintsBeforePruning:numFingerprintsAfterPruning: numWiFiAccessPoints:numBLESources:numUWBSources:");
}

id objc_msgSend_initWithNumInflightUploads_maxUploadFileSizeMB_maxUploadQuotaMB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumInflightUploads:maxUploadFileSizeMB:maxUploadQuotaMB:");
}

id objc_msgSend_initWithNumWiFiAccessPoints_numBLESources_numUWBSources_requestIdentifier_errors_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumWiFiAccessPoints:numBLESources:numUWBSources:requestIdentifier:errors:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOdometerEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOdometerEntry:");
}

id objc_msgSend_initWithOdometerSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOdometerSubscription:");
}

id objc_msgSend_initWithOnBodyResult_confidence_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOnBodyResult:confidence:timestamp:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithOverviewId_workouts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOverviewId:workouts:");
}

id objc_msgSend_initWithPayload_requestTypeCode_endpoint_headers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:requestTypeCode:endpoint:headers:");
}

id objc_msgSend_initWithPedestrianFenceClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPedestrianFenceClient:");
}

id objc_msgSend_initWithPendingChanges_recordProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPendingChanges:recordProvider:");
}

id objc_msgSend_initWithPlaceIdentifier_score_confidence_placeMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaceIdentifier:score:confidence:placeMetadata:");
}

id objc_msgSend_initWithPlacePredictions_locationSimilarityList_closeDeviceList_error_requestIdentifier_predictionTime_confidence_placeConfidenceReasons_localizationFingerprintMetaInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithPlacePredictions:locationSimilarityList:closeDeviceList:error:requestIdentifier:predictionTime:confid ence:placeConfidenceReasons:localizationFingerprintMetaInfo:");
}

id objc_msgSend_initWithPlaces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaces:");
}

id objc_msgSend_initWithPlaces_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaces:serviceType:");
}

id objc_msgSend_initWithPredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredictedWalkDistanceBout:");
}

id objc_msgSend_initWithPredictedWalkDistanceBoutEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredictedWalkDistanceBoutEntry:");
}

id objc_msgSend_initWithPredictedWalkDistanceBoutRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredictedWalkDistanceBoutRecorderDb:");
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:");
}

id objc_msgSend_initWithProtobufData_type_isResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtobufData:type:isResponse:");
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProvider:");
}

id objc_msgSend_initWithProximityUUID_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximityUUID:identifier:");
}

id objc_msgSend_initWithProximityUUID_major_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximityUUID:major:identifier:");
}

id objc_msgSend_initWithProximityUUID_major_minor_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximityUUID:major:minor:identifier:");
}

id objc_msgSend_initWithQuality_andReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuality:andReasons:");
}

id objc_msgSend_initWithQualityReasonEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQualityReasonEnum:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_andController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:andController:");
}

id objc_msgSend_initWithQueue_canDownloadOverCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:canDownloadOverCellular:");
}

id objc_msgSend_initWithRadius_radialDisplacement_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRadius:radialDisplacement:duration:");
}

id objc_msgSend_initWithRecordID_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:type:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRequester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequester:");
}

id objc_msgSend_initWithRootDirectory_classifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootDirectory:classifier:");
}

id objc_msgSend_initWithSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSample:");
}

id objc_msgSend_initWithService_priority_asMasterStore_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:priority:asMasterStore:options:");
}

id objc_msgSend_initWithServiceIdentifier_serviceType_locationTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceIdentifier:serviceType:locationTypes:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceState_suspendReasons_serviceDescriptor_currentLocationOfInterestUuid_currentLocationOfInterestType_error_serviceQualityInfo_places_metaInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithServiceState:suspendReasons:serviceDescriptor:currentLocationOfInterestUuid:currentLocationOfInterest Type:error:serviceQualityInfo:places:metaInfo:");
}

id objc_msgSend_initWithSessionId_locationType_poolLength_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionId:locationType:poolLength:startDate:endDate:");
}

id objc_msgSend_initWithSessionId_type_locationType_mode_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionId:type:locationType:mode:startDate:endDate:");
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSet:");
}

id objc_msgSend_initWithSignificantElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSignificantElevation:");
}

id objc_msgSend_initWithSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:");
}

id objc_msgSend_initWithSilo_provider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:provider:");
}

id objc_msgSend_initWithSilo_vendor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:vendor:");
}

id objc_msgSend_initWithSkiEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSkiEntry:");
}

id objc_msgSend_initWithSpeeds_speedUB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSpeeds:speedUB:");
}

id objc_msgSend_initWithSpringEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSpringEntry:");
}

id objc_msgSend_initWithStart_stop_distanceGps_distanceRawPed_steps_gpsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStart:stop:distanceGps:distanceRawPed:steps:gpsSource:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithStartDate_endDate_steps_distance_floorsAscended_floorsDescended_recordID_currentPace_currentCadence_firstStepTime_activeTime_sourceId_isOdometerDistance_isOdometerPace_pushes_workoutType_elevationAscended_elevationDescended_distanceSource_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:f irstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:eleva tionDescended:distanceSource:");
}

id objc_msgSend_initWithStartDate_firedDate_alarmType_didWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:firedDate:alarmType:didWake:");
}

id objc_msgSend_initWithStartDate_recordId_activityType_mets_natalies_basalNatalies_sourceId_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:recordId:activityType:mets:natalies:basalNatalies:sourceId:");
}

id objc_msgSend_initWithStartDate_recordId_sourceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:recordId:sourceId:");
}

id objc_msgSend_initWithStartDate_type_confidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:type:confidence:");
}

id objc_msgSend_initWithStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartTime:");
}

id objc_msgSend_initWithState_startTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:startTime:");
}

id objc_msgSend_initWithState_workout_entryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:workout:entryDate:");
}

id objc_msgSend_initWithStatus_startDate_endDate_meanDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatus:startDate:endDate:meanDelta:");
}

id objc_msgSend_initWithStepCountSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStepCountSubscription:");
}

id objc_msgSend_initWithStepEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStepEntry:");
}

id objc_msgSend_initWithStoreIdentifier_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreIdentifier:type:");
}

id objc_msgSend_initWithStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStrideCalEntry:");
}

id objc_msgSend_initWithStrideCalRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStrideCalRecorderDb:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscription:");
}

id objc_msgSend_initWithSuspendReasonEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuspendReasonEnum:");
}

id objc_msgSend_initWithSwimEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSwimEntry:");
}

id objc_msgSend_initWithSyncManager_silo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSyncManager:silo:");
}

id objc_msgSend_initWithTechnology_numDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTechnology:numDevices:");
}

id objc_msgSend_initWithTestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestMode:");
}

id objc_msgSend_initWithTime_andEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTime:andEvent:");
}

id objc_msgSend_initWithTime_dataPeriodSec_deltaCourseRad_deltaSpeedMps_deltaCourseVarRad2_deltaSpeedVarMps2_deltaCourseSpeedCovarRadMps_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithTime:dataPeriodSec:deltaCourseRad:deltaSpeedMps:deltaCourseVarRad2:deltaSpeedVarMps2:deltaCourseSpeedCovarRadMps:");
}

id objc_msgSend_initWithTimeInterval_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:");
}

id objc_msgSend_initWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:sinceDate:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_initWithTimeRange_vehicleName_vehicleModelName_vehicleBluetoothAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeRange:vehicleName:vehicleModelName:vehicleBluetoothAddress:");
}

id objc_msgSend_initWithTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:");
}

id objc_msgSend_initWithTimestamp_RSSI_uuid_ipv4_channel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:RSSI:uuid:ipv4:channel:");
}

id objc_msgSend_initWithTimestamp_illumination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:illumination:");
}

id objc_msgSend_initWithTimestamp_intensity_intensityCalDelta_intensityBaselineDelta_ambient_pocketProbability_baselineConfidence_rxNtcC_scanFlags_pocketFlag_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithTimestamp:intensity:intensityCalDelta:intensityBaselineDelta:ambient:pocketProbability:baselineConfid ence:rxNtcC:scanFlags:pocketFlag:");
}

id objc_msgSend_initWithTimestamp_machContinuousTimestamp_sampleInterval_deltaPosition_deltaVelocity_quaternion_referenceFrameContinuity_referenceFrame_staticFlag_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithTimestamp:machContinuousTimestamp:sampleInterval:deltaPosition:deltaVelocity:quaternion:referenceFram eContinuity:referenceFrame:staticFlag:");
}

id objc_msgSend_initWithTrack_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrack:session:");
}

id objc_msgSend_initWithTrigger_duration_onQueue_forClient_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrigger:duration:onQueue:forClient:withHandler:");
}

id objc_msgSend_initWithTrigger_duration_onQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrigger:duration:onQueue:withHandler:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithType_dataCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:dataCollection:");
}

id objc_msgSend_initWithURL_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:delegate:queue:");
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:error:");
}

id objc_msgSend_initWithURL_useCloudKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:useCloudKit:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:");
}

id objc_msgSend_initWithUUID_major_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:major:");
}

id objc_msgSend_initWithUUID_major_minor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:major:minor:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:");
}

id objc_msgSend_initWithUniverse_andDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:andDelegate:");
}

id objc_msgSend_initWithUniverse_andStateMachine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:andStateMachine:");
}

id objc_msgSend_initWithUniverse_buffers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:buffers:");
}

id objc_msgSend_initWithUniverse_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:delegate:");
}

id objc_msgSend_initWithUniverse_delegate_buffers_contextManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:delegate:buffers:contextManager:");
}

id objc_msgSend_initWithUniverse_delegate_withBuffer_withSourceAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:delegate:withBuffer:withSourceAggregator:");
}

id objc_msgSend_initWithUniverse_pendingRequestsCB_streamingRequestCB_uploadRequestCB_streamingEndCB_uploadListCB_handleResponseCB_mitigationsCB_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithUniverse:pendingRequestsCB:streamingRequestCB:uploadRequestCB:streamingEndCB:uploadListCB:handleRespo nseCB:mitigationsCB:");
}

id objc_msgSend_initWithUniverse_serviceCompletionCB_getMitigationCB_getUploadConfigCB_errorCB_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:serviceCompletionCB:getMitigationCB:getUploadConfigCB:errorCB:");
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedShort:");
}

id objc_msgSend_initWithUserType_placeType_placemark_referenceLocation_confidence_preferredName_loiIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:");
}

id objc_msgSend_initWithValue_dirty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:dirty:");
}

id objc_msgSend_initWithValueOut_begin_end_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValueOut:begin:end:state:");
}

id objc_msgSend_initWithVehicleStateNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVehicleStateNotifier:");
}

id objc_msgSend_initWithVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVisit:");
}

id objc_msgSend_initWithWalkingSpeedCalRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWalkingSpeedCalRecorderDb:");
}

id objc_msgSend_initWithWalkingSpeedStrideCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWalkingSpeedStrideCal:");
}

id objc_msgSend_initWithWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindowSize:");
}

id objc_msgSend_initWithWindowSize_andCadence_andVerticalAccuracyThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindowSize:andCadence:andVerticalAccuracyThreshold:");
}

id objc_msgSend_initWithWorkoutDistanceMeasures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkoutDistanceMeasures:");
}

id objc_msgSend_initWithWorkoutSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkoutSubscription:");
}

id objc_msgSend_initWithX_Y_Z_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithX:Y:Z:");
}

id objc_msgSend_initWithX_Y_Z_W_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithX:Y:Z:W:");
}

id objc_msgSend_initWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZone:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_initializeClientRequestsViewsWithZeroValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeClientRequestsViewsWithZeroValues:");
}

id objc_msgSend_initializeCloudKitSchemaWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeCloudKitSchemaWithOptions:error:");
}

id objc_msgSend_initializeKeychainItemWithIdentifier_keyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeKeychainItemWithIdentifier:keyType:");
}

id objc_msgSend_initializeModeTransitions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeModeTransitions:");
}

id objc_msgSend_initializeScanTypeChangeViewsWithZeroValues(void *a1, const char *a2, ...)
{
  return _[a1 initializeScanTypeChangeViewsWithZeroValues];
}

id objc_msgSend_initializeSyncEngine(void *a1, const char *a2, ...)
{
  return _[a1 initializeSyncEngine];
}

id objc_msgSend_initializeTheSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeTheSettings:");
}

id objc_msgSend_initializeThresholds(void *a1, const char *a2, ...)
{
  return _[a1 initializeThresholds];
}

id objc_msgSend_initializeThresholdsGivenAltitude_andAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeThresholdsGivenAltitude:andAccuracy:");
}

id objc_msgSend_inlandWater(void *a1, const char *a2, ...)
{
  return _[a1 inlandWater];
}

id objc_msgSend_inputReportForDevice_report_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputReportForDevice:report:length:");
}

id objc_msgSend_inputStreamWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputStreamWithURL:");
}

id objc_msgSend_inputs(void *a1, const char *a2, ...)
{
  return _[a1 inputs];
}

id objc_msgSend_inputsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputsAtIndex:");
}

id objc_msgSend_inputsCount(void *a1, const char *a2, ...)
{
  return _[a1 inputsCount];
}

id objc_msgSend_insertClient_withThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertClient:withThreshold:");
}

id objc_msgSend_insertFence_inSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertFence:inSession:");
}

id objc_msgSend_installFenceWithCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installFenceWithCenter:");
}

id objc_msgSend_installedEducationProfile(void *a1, const char *a2, ...)
{
  return _[a1 installedEducationProfile];
}

id objc_msgSend_installedProfileIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 installedProfileIdentifiers];
}

id objc_msgSend_installedProfileWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedProfileWithIdentifier:");
}

id objc_msgSend_installedRegion(void *a1, const char *a2, ...)
{
  return _[a1 installedRegion];
}

id objc_msgSend_instancesRespondToSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instancesRespondToSelector:");
}

id objc_msgSend_intForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_intForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForKey:defaultValue:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interestForClientKey_outInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestForClientKey:outInterest:");
}

id objc_msgSend_interestTypeForClientKey_outType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestTypeForClientKey:outType:");
}

id objc_msgSend_interestZones(void *a1, const char *a2, ...)
{
  return _[a1 interestZones];
}

id objc_msgSend_interestZonesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestZonesAtIndex:");
}

id objc_msgSend_interestZonesCount(void *a1, const char *a2, ...)
{
  return _[a1 interestZonesCount];
}

id objc_msgSend_interestedPartyIso3166CountryCodes2(void *a1, const char *a2, ...)
{
  return _[a1 interestedPartyIso3166CountryCodes2];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalRoadName(void *a1, const char *a2, ...)
{
  return _[a1 internalRoadName];
}

id objc_msgSend_interpPressure(void *a1, const char *a2, ...)
{
  return _[a1 interpPressure];
}

id objc_msgSend_interpolateWithStartTime_andStartValue_andEndTime_andEndValue_atTargetTime_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interpolateWithStartTime:andStartValue:andEndTime:andEndValue:atTargetTime:");
}

id objc_msgSend_intersectsDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectsDateInterval:");
}

id objc_msgSend_intervalTimer(void *a1, const char *a2, ...)
{
  return _[a1 intervalTimer];
}

id objc_msgSend_invalid(void *a1, const char *a2, ...)
{
  return _[a1 invalid];
}

id objc_msgSend_invalidGradePercentage(void *a1, const char *a2, ...)
{
  return _[a1 invalidGradePercentage];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate:");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_invalidateAndReleaseProbeClients(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndReleaseProbeClients];
}

id objc_msgSend_invalidateFetchPlaceInferenceTimer(void *a1, const char *a2, ...)
{
  return _[a1 invalidateFetchPlaceInferenceTimer];
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_ipv4(void *a1, const char *a2, ...)
{
  return _[a1 ipv4];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isActiveSubArchive(void *a1, const char *a2, ...)
{
  return _[a1 isActiveSubArchive];
}

id objc_msgSend_isAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 isAdvertising];
}

id objc_msgSend_isAggressiveLongScanning(void *a1, const char *a2, ...)
{
  return _[a1 isAggressiveLongScanning];
}

id objc_msgSend_isAggressiveScanning(void *a1, const char *a2, ...)
{
  return _[a1 isAggressiveScanning];
}

id objc_msgSend_isAllowOverCellular(void *a1, const char *a2, ...)
{
  return _[a1 isAllowOverCellular];
}

id objc_msgSend_isAnySessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isAnySessionActive];
}

id objc_msgSend_isApple(void *a1, const char *a2, ...)
{
  return _[a1 isApple];
}

id objc_msgSend_isApplePersonalHotspot(void *a1, const char *a2, ...)
{
  return _[a1 isApplePersonalHotspot];
}

id objc_msgSend_isAuthLimited(void *a1, const char *a2, ...)
{
  return _[a1 isAuthLimited];
}

id objc_msgSend_isAuthSharingSubIdentity(void *a1, const char *a2, ...)
{
  return _[a1 isAuthSharingSubIdentity];
}

id objc_msgSend_isAuthorized(void *a1, const char *a2, ...)
{
  return _[a1 isAuthorized];
}

id objc_msgSend_isAuthorizedForLocation(void *a1, const char *a2, ...)
{
  return _[a1 isAuthorizedForLocation];
}

id objc_msgSend_isAuthorizedForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorizedForServiceType:");
}

id objc_msgSend_isAuthorizedForServiceTypeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorizedForServiceTypeMask:");
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAvailable];
}

id objc_msgSend_isBin_sameActivityAsBin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBin:sameActivityAsBin:");
}

id objc_msgSend_isBinaryLogging(void *a1, const char *a2, ...)
{
  return _[a1 isBinaryLogging];
}

id objc_msgSend_isBridge(void *a1, const char *a2, ...)
{
  return _[a1 isBridge];
}

id objc_msgSend_isCalibrationAvailableForStepCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCalibrationAvailableForStepCadence:");
}

id objc_msgSend_isCalibrationConvergedStdForBinWithSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCalibrationConvergedStdForBinWithSpeed:");
}

id objc_msgSend_isCentroidDatabaseValid(void *a1, const char *a2, ...)
{
  return _[a1 isCentroidDatabaseValid];
}

id objc_msgSend_isClientActivityTypeAirborneActive(void *a1, const char *a2, ...)
{
  return _[a1 isClientActivityTypeAirborneActive];
}

id objc_msgSend_isClientActivityTypeFitnessActive(void *a1, const char *a2, ...)
{
  return _[a1 isClientActivityTypeFitnessActive];
}

id objc_msgSend_isClientWithKeyInterested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClientWithKeyInterested:");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDate:inSameDayAsDate:");
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultPairedDevice];
}

id objc_msgSend_isDefaultScanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultScanType:");
}

id objc_msgSend_isDeparture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeparture:");
}

id objc_msgSend_isDeviceSatellitePaired(void *a1, const char *a2, ...)
{
  return _[a1 isDeviceSatellitePaired];
}

id objc_msgSend_isDisputed(void *a1, const char *a2, ...)
{
  return _[a1 isDisputed];
}

id objc_msgSend_isDrivable(void *a1, const char *a2, ...)
{
  return _[a1 isDrivable];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEntry:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDateInterval:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isGeoFenceAuthorizedAndPossible(void *a1, const char *a2, ...)
{
  return _[a1 isGeoFenceAuthorizedAndPossible];
}

id objc_msgSend_isHealthDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isHealthDataSubmissionAllowed];
}

id objc_msgSend_isIHAAuthorized(void *a1, const char *a2, ...)
{
  return _[a1 isIHAAuthorized];
}

id objc_msgSend_isInDisputedArea(void *a1, const char *a2, ...)
{
  return _[a1 isInDisputedArea];
}

id objc_msgSend_isInEmegencyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInEmegencyState:");
}

id objc_msgSend_isInIndia(void *a1, const char *a2, ...)
{
  return _[a1 isInIndia];
}

id objc_msgSend_isInOutdoorWorkout(void *a1, const char *a2, ...)
{
  return _[a1 isInOutdoorWorkout];
}

id objc_msgSend_isInOutdoorWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInOutdoorWorkout:");
}

id objc_msgSend_isInVisit(void *a1, const char *a2, ...)
{
  return _[a1 isInVisit];
}

id objc_msgSend_isInitialCache(void *a1, const char *a2, ...)
{
  return _[a1 isInitialCache];
}

id objc_msgSend_isInsideSanctionedFloorTransitionPolygon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInsideSanctionedFloorTransitionPolygon:");
}

id objc_msgSend_isInsideSanctionedPolygon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInsideSanctionedPolygon:");
}

id objc_msgSend_isKeyPathRegisteredSystemService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyPathRegisteredSystemService:");
}

id objc_msgSend_isLegacyAggressiveOrDefaultScanning(void *a1, const char *a2, ...)
{
  return _[a1 isLegacyAggressiveOrDefaultScanning];
}

id objc_msgSend_isLegacyAggressiveScanning(void *a1, const char *a2, ...)
{
  return _[a1 isLegacyAggressiveScanning];
}

id objc_msgSend_isLocationShiftRequiredForCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationShiftRequiredForCoordinate:");
}

id objc_msgSend_isLocationUsefulForCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationUsefulForCalibration:");
}

id objc_msgSend_isLoggingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isLoggingEnabled];
}

id objc_msgSend_isLowLatency(void *a1, const char *a2, ...)
{
  return _[a1 isLowLatency];
}

id objc_msgSend_isMeasurement(void *a1, const char *a2, ...)
{
  return _[a1 isMeasurement];
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMessageOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMessageOfType:");
}

id objc_msgSend_isMetadataDatabaseValid(void *a1, const char *a2, ...)
{
  return _[a1 isMetadataDatabaseValid];
}

id objc_msgSend_isModified(void *a1, const char *a2, ...)
{
  return _[a1 isModified];
}

id objc_msgSend_isMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 isMonitoring];
}

id objc_msgSend_isMonitoringAvailableForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMonitoringAvailableForClass:");
}

id objc_msgSend_isNearOwner(void *a1, const char *a2, ...)
{
  return _[a1 isNearOwner];
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return _[a1 isNearby];
}

id objc_msgSend_isNonProvisionallyAuthorizedForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonProvisionallyAuthorizedForServiceType:");
}

id objc_msgSend_isNonProvisionallyAuthorizedForServiceTypeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonProvisionallyAuthorizedForServiceTypeMask:");
}

id objc_msgSend_isNotificationSupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNotificationSupported:");
}

id objc_msgSend_isOnTileBorder(void *a1, const char *a2, ...)
{
  return _[a1 isOnTileBorder];
}

id objc_msgSend_isPaired(void *a1, const char *a2, ...)
{
  return _[a1 isPaired];
}

id objc_msgSend_isPosh(void *a1, const char *a2, ...)
{
  return _[a1 isPosh];
}

id objc_msgSend_isProactiveLocationSession(void *a1, const char *a2, ...)
{
  return _[a1 isProactiveLocationSession];
}

id objc_msgSend_isQueryValidWithStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isQueryValidWithStartTime:andEndTime:");
}

id objc_msgSend_isRail(void *a1, const char *a2, ...)
{
  return _[a1 isRail];
}

id objc_msgSend_isRawSpeedRun_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRawSpeedRun:");
}

id objc_msgSend_isRawSpeedValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRawSpeedValid:");
}

id objc_msgSend_isReadyToVacuumEncryptionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReadyToVacuumEncryptionClass:");
}

id objc_msgSend_isRecording(void *a1, const char *a2, ...)
{
  return _[a1 isRecording];
}

id objc_msgSend_isRefDataAvailableBetweenStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRefDataAvailableBetweenStartTime:andEndTime:");
}

id objc_msgSend_isRoadPedestrianNavigable(void *a1, const char *a2, ...)
{
  return _[a1 isRoadPedestrianNavigable];
}

id objc_msgSend_isRunCalibrationAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isRunCalibrationAvailable];
}

id objc_msgSend_isRunningStateInWindow(void *a1, const char *a2, ...)
{
  return _[a1 isRunningStateInWindow];
}

id objc_msgSend_isSafetyDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isSafetyDataSubmissionAllowed];
}

id objc_msgSend_isScanning(void *a1, const char *a2, ...)
{
  return _[a1 isScanning];
}

id objc_msgSend_isServiceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isServiceEnabled:");
}

id objc_msgSend_isServiceRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isServiceRunning:");
}

id objc_msgSend_isSimulatedBySoftware(void *a1, const char *a2, ...)
{
  return _[a1 isSimulatedBySoftware];
}

id objc_msgSend_isStarting(void *a1, const char *a2, ...)
{
  return _[a1 isStarting];
}

id objc_msgSend_isStepLengthValid(void *a1, const char *a2, ...)
{
  return _[a1 isStepLengthValid];
}

id objc_msgSend_isString_prefixedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isString:prefixedBy:");
}

id objc_msgSend_isStroller(void *a1, const char *a2, ...)
{
  return _[a1 isStroller];
}

id objc_msgSend_isSubscribedForMotion(void *a1, const char *a2, ...)
{
  return _[a1 isSubscribedForMotion];
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return _[a1 isSupervised];
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _[a1 isSupported];
}

id objc_msgSend_isSupportedForDerivedSpeedEstimate(void *a1, const char *a2, ...)
{
  return _[a1 isSupportedForDerivedSpeedEstimate];
}

id objc_msgSend_isTestingEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 isTestingEnvironment];
}

id objc_msgSend_isTunnel(void *a1, const char *a2, ...)
{
  return _[a1 isTunnel];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidCKP(void *a1, const char *a2, ...)
{
  return _[a1 isValidCKP];
}

id objc_msgSend_isValidMslp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidMslp:");
}

id objc_msgSend_isValueInRun_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValueInRun:");
}

id objc_msgSend_isWalkCalibrationAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isWalkCalibrationAvailable];
}

id objc_msgSend_isWalkingSpeedValid(void *a1, const char *a2, ...)
{
  return _[a1 isWalkingSpeedValid];
}

id objc_msgSend_isWalkingSteadinessAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isWalkingSteadinessAvailable];
}

id objc_msgSend_isWaterStateON(void *a1, const char *a2, ...)
{
  return _[a1 isWaterStateON];
}

id objc_msgSend_isWheelchairDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isWheelchairDataSubmissionAllowed];
}

id objc_msgSend_isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode_withCurrentSetting_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:");
}

id objc_msgSend_isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode_withCurrentSetting_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:");
}

id objc_msgSend_isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired_isInMoveTimeMode_withCurrentSetting_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired:isInMoveTimeMode:withCurrentSetting:");
}

id objc_msgSend_iso3166CountryCode2(void *a1, const char *a2, ...)
{
  return _[a1 iso3166CountryCode2];
}

id objc_msgSend_iterateAllAnchorKeyPathsWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateAllAnchorKeyPathsWithBlock:");
}

id objc_msgSend_iterateIdentitiesRelatedToKeyPath_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateIdentitiesRelatedToKeyPath:withBlock:");
}

id objc_msgSend_iterateSecondaryData_forField_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateSecondaryData:forField:withHandler:");
}

id objc_msgSend_iterateSubArchivesWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateSubArchivesWithHandler:");
}

id objc_msgSend_jacksonData(void *a1, const char *a2, ...)
{
  return _[a1 jacksonData];
}

id objc_msgSend_jsonObject(void *a1, const char *a2, ...)
{
  return _[a1 jsonObject];
}

id objc_msgSend_junctionIndex(void *a1, const char *a2, ...)
{
  return _[a1 junctionIndex];
}

id objc_msgSend_kValue(void *a1, const char *a2, ...)
{
  return _[a1 kValue];
}

id objc_msgSend_kValueForRawSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kValueForRawSpeed:");
}

id objc_msgSend_keyForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyForClient:");
}

id objc_msgSend_keyPath_sharesAuthWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyPath:sharesAuthWithKeyPath:");
}

id objc_msgSend_keychainItemData(void *a1, const char *a2, ...)
{
  return _[a1 keychainItemData];
}

id objc_msgSend_kvStore(void *a1, const char *a2, ...)
{
  return _[a1 kvStore];
}

id objc_msgSend_lacID(void *a1, const char *a2, ...)
{
  return _[a1 lacID];
}

id objc_msgSend_lambda(void *a1, const char *a2, ...)
{
  return _[a1 lambda];
}

id objc_msgSend_laneCount(void *a1, const char *a2, ...)
{
  return _[a1 laneCount];
}

id objc_msgSend_lastCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 lastCountryCode];
}

id objc_msgSend_lastEvent(void *a1, const char *a2, ...)
{
  return _[a1 lastEvent];
}

id objc_msgSend_lastExitContext(void *a1, const char *a2, ...)
{
  return _[a1 lastExitContext];
}

id objc_msgSend_lastHKUpdate(void *a1, const char *a2, ...)
{
  return _[a1 lastHKUpdate];
}

id objc_msgSend_lastKnownIndoorOutdoorStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKnownIndoorOutdoorStateWithReply:");
}

id objc_msgSend_lastKnownMotionState(void *a1, const char *a2, ...)
{
  return _[a1 lastKnownMotionState];
}

id objc_msgSend_lastLocation(void *a1, const char *a2, ...)
{
  return _[a1 lastLocation];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastOdometer(void *a1, const char *a2, ...)
{
  return _[a1 lastOdometer];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastProcessedTime(void *a1, const char *a2, ...)
{
  return _[a1 lastProcessedTime];
}

id objc_msgSend_lastScanBufferEmptyDate(void *a1, const char *a2, ...)
{
  return _[a1 lastScanBufferEmptyDate];
}

id objc_msgSend_lastStepTime(void *a1, const char *a2, ...)
{
  return _[a1 lastStepTime];
}

id objc_msgSend_lastUpdateTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdateTime];
}

id objc_msgSend_lastUpdated(void *a1, const char *a2, ...)
{
  return _[a1 lastUpdated];
}

id objc_msgSend_lat(void *a1, const char *a2, ...)
{
  return _[a1 lat];
}

id objc_msgSend_latLng(void *a1, const char *a2, ...)
{
  return _[a1 latLng];
}

id objc_msgSend_latestAbsoluteAltitude(void *a1, const char *a2, ...)
{
  return _[a1 latestAbsoluteAltitude];
}

id objc_msgSend_latestData(void *a1, const char *a2, ...)
{
  return _[a1 latestData];
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return _[a1 latitude];
}

id objc_msgSend_launchApplication_requiringAuthForServiceMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchApplication:requiringAuthForServiceMask:");
}

id objc_msgSend_launchDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchDaemon:");
}

id objc_msgSend_launchReason(void *a1, const char *a2, ...)
{
  return _[a1 launchReason];
}

id objc_msgSend_launchRemoteApplication_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchRemoteApplication:withReply:");
}

id objc_msgSend_launchWatchApplicationForCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchWatchApplicationForCompanion:");
}

id objc_msgSend_ledgerFile(void *a1, const char *a2, ...)
{
  return _[a1 ledgerFile];
}

id objc_msgSend_ledgerName(void *a1, const char *a2, ...)
{
  return _[a1 ledgerName];
}

id objc_msgSend_ledgerVersionNumber(void *a1, const char *a2, ...)
{
  return _[a1 ledgerVersionNumber];
}

id objc_msgSend_leechClients(void *a1, const char *a2, ...)
{
  return _[a1 leechClients];
}

id objc_msgSend_leeching(void *a1, const char *a2, ...)
{
  return _[a1 leeching];
}

id objc_msgSend_legacyClientKey(void *a1, const char *a2, ...)
{
  return _[a1 legacyClientKey];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _[a1 level];
}

id objc_msgSend_limitStart_andEnd_maxDuration_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "limitStart:andEnd:maxDuration:from:");
}

id objc_msgSend_limitingCKP(void *a1, const char *a2, ...)
{
  return _[a1 limitingCKP];
}

id objc_msgSend_lineID(void *a1, const char *a2, ...)
{
  return _[a1 lineID];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedDevicesWithRelationship:");
}

id objc_msgSend_listenForStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenForStatus:");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _[a1 listener];
}

id objc_msgSend_lng(void *a1, const char *a2, ...)
{
  return _[a1 lng];
}

id objc_msgSend_loadLastAWDTimestamps(void *a1, const char *a2, ...)
{
  return _[a1 loadLastAWDTimestamps];
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPersistentStoresWithCompletionHandler:");
}

id objc_msgSend_loadWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadWithCompletionBlock:");
}

id objc_msgSend_loadWithCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadWithCoordinator:");
}

id objc_msgSend_locManager(void *a1, const char *a2, ...)
{
  return _[a1 locManager];
}

id objc_msgSend_localDevice(void *a1, const char *a2, ...)
{
  return _[a1 localDevice];
}

id objc_msgSend_localSecondsIntoDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localSecondsIntoDay:");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _[a1 localTimeZone];
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _[a1 locality];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 localizedFailureReason];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNameWithPreferredLocalizations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedNameWithPreferredLocalizations:");
}

id objc_msgSend_localizedStringFromDate_dateStyle_timeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromDate:dateStyle:timeStyle:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationFingerprintAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationFingerprintAtIndex:");
}

id objc_msgSend_locationFingerprintsCount(void *a1, const char *a2, ...)
{
  return _[a1 locationFingerprintsCount];
}

id objc_msgSend_locationIsUsable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationIsUsable:");
}

id objc_msgSend_locationProvider(void *a1, const char *a2, ...)
{
  return _[a1 locationProvider];
}

id objc_msgSend_locationRestricted(void *a1, const char *a2, ...)
{
  return _[a1 locationRestricted];
}

id objc_msgSend_locationServicesEnabledStatus(void *a1, const char *a2, ...)
{
  return _[a1 locationServicesEnabledStatus];
}

id objc_msgSend_locationState(void *a1, const char *a2, ...)
{
  return _[a1 locationState];
}

id objc_msgSend_locationType(void *a1, const char *a2, ...)
{
  return _[a1 locationType];
}

id objc_msgSend_locationUpdatesIncludeMotionState(void *a1, const char *a2, ...)
{
  return _[a1 locationUpdatesIncludeMotionState];
}

id objc_msgSend_locations(void *a1, const char *a2, ...)
{
  return _[a1 locations];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockState(void *a1, const char *a2, ...)
{
  return _[a1 lockState];
}

id objc_msgSend_logAccel800_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAccel800:");
}

id objc_msgSend_logAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAnalytics:");
}

id objc_msgSend_logBins(void *a1, const char *a2, ...)
{
  return _[a1 logBins];
}

id objc_msgSend_logData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logData:");
}

id objc_msgSend_logDeviceMotion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logDeviceMotion:");
}

id objc_msgSend_logFalsePositiveSuppressionFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logFalsePositiveSuppressionFeatures:");
}

id objc_msgSend_logGyro200_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logGyro200:");
}

id objc_msgSend_logHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logHeartRate:");
}

id objc_msgSend_logImpactEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logImpactEvent:");
}

id objc_msgSend_logImpactEventState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logImpactEventState:");
}

id objc_msgSend_logImpactSensorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logImpactSensorData:");
}

id objc_msgSend_logLatencyMetricsInternal(void *a1, const char *a2, ...)
{
  return _[a1 logLatencyMetricsInternal];
}

id objc_msgSend_logOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logOdometer:");
}

id objc_msgSend_logPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logPressure:");
}

id objc_msgSend_logRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logRoute:");
}

id objc_msgSend_logState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logState:");
}

id objc_msgSend_logSuppressionFeartures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSuppressionFeartures:");
}

id objc_msgSend_logToCA(void *a1, const char *a2, ...)
{
  return _[a1 logToCA];
}

id objc_msgSend_logTransitRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logTransitRoute:");
}

id objc_msgSend_loggerDataTypeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggerDataTypeFrom:");
}

id objc_msgSend_loggerDataTypeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggerDataTypeString:");
}

id objc_msgSend_loiIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 loiIdentifier];
}

id objc_msgSend_loiType(void *a1, const char *a2, ...)
{
  return _[a1 loiType];
}

id objc_msgSend_lon(void *a1, const char *a2, ...)
{
  return _[a1 lon];
}

id objc_msgSend_longAggressiveScanCoexImpactedDuration(void *a1, const char *a2, ...)
{
  return _[a1 longAggressiveScanCoexImpactedDuration];
}

id objc_msgSend_longAggressiveScanNonCoexImpactedDuration(void *a1, const char *a2, ...)
{
  return _[a1 longAggressiveScanNonCoexImpactedDuration];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_longitude(void *a1, const char *a2, ...)
{
  return _[a1 longitude];
}

id objc_msgSend_lowConfidenceVisitLeechClients(void *a1, const char *a2, ...)
{
  return _[a1 lowConfidenceVisitLeechClients];
}

id objc_msgSend_lowerQuartile(void *a1, const char *a2, ...)
{
  return _[a1 lowerQuartile];
}

id objc_msgSend_lteCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lteCellTowerAtIndex:");
}

id objc_msgSend_lteCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 lteCellTowers];
}

id objc_msgSend_lteCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 lteCellTowersCount];
}

id objc_msgSend_mac(void *a1, const char *a2, ...)
{
  return _[a1 mac];
}

id objc_msgSend_macAddress(void *a1, const char *a2, ...)
{
  return _[a1 macAddress];
}

id objc_msgSend_macID(void *a1, const char *a2, ...)
{
  return _[a1 macID];
}

id objc_msgSend_macModesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macModesAtIndex:");
}

id objc_msgSend_macModesCount(void *a1, const char *a2, ...)
{
  return _[a1 macModesCount];
}

id objc_msgSend_macOSSourceVersionNewEnough_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macOSSourceVersionNewEnough:");
}

id objc_msgSend_macs(void *a1, const char *a2, ...)
{
  return _[a1 macs];
}

id objc_msgSend_macsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macsAtIndex:");
}

id objc_msgSend_macsCount(void *a1, const char *a2, ...)
{
  return _[a1 macsCount];
}

id objc_msgSend_main(void *a1, const char *a2, ...)
{
  return _[a1 main];
}

id objc_msgSend_mainArchive(void *a1, const char *a2, ...)
{
  return _[a1 mainArchive];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_major(void *a1, const char *a2, ...)
{
  return _[a1 major];
}

id objc_msgSend_makeSafeAbsoluteElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeSafeAbsoluteElevation:");
}

id objc_msgSend_makeSafeCFAbsoluteTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeSafeCFAbsoluteTime:");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectContext];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return _[a1 manufacturer];
}

id objc_msgSend_mapItem(void *a1, const char *a2, ...)
{
  return _[a1 mapItem];
}

id objc_msgSend_mappedDataByDestructivelyCombiningPrimaryAndSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 mappedDataByDestructivelyCombiningPrimaryAndSecondaryData];
}

id objc_msgSend_mappedSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 mappedSecondaryData];
}

id objc_msgSend_markClientEmergencyEnablementTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markClientEmergencyEnablementTransition:");
}

id objc_msgSend_markClientEmergencyEnablementTransition_shouldOverrideDeauthorization_forBeneficiary_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:");
}

id objc_msgSend_markClientTemporaryAuthorizationGranted_forClientKey_andAuditToken_byLocationButton_voiceInteractionEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "markClientTemporaryAuthorizationGranted:forClientKey:andAuditToken:byLocationButton:voiceInteractionEnabled:");
}

id objc_msgSend_markModifiedClean(void *a1, const char *a2, ...)
{
  return _[a1 markModifiedClean];
}

id objc_msgSend_markModifiedDirty(void *a1, const char *a2, ...)
{
  return _[a1 markModifiedDirty];
}

id objc_msgSend_markReceivingLocationInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markReceivingLocationInformation:");
}

id objc_msgSend_markTemporaryPreciseAuthorizationGranted_forClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markTemporaryPreciseAuthorizationGranted:forClientKey:");
}

id objc_msgSend_markXpcActivityDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markXpcActivityDone:");
}

id objc_msgSend_markets(void *a1, const char *a2, ...)
{
  return _[a1 markets];
}

id objc_msgSend_marketsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marketsAtIndex:");
}

id objc_msgSend_marketsCount(void *a1, const char *a2, ...)
{
  return _[a1 marketsCount];
}

id objc_msgSend_marqueeAppsOnly(void *a1, const char *a2, ...)
{
  return _[a1 marqueeAppsOnly];
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesInString:options:range:");
}

id objc_msgSend_matching(void *a1, const char *a2, ...)
{
  return _[a1 matching];
}

id objc_msgSend_maxAbsSlope(void *a1, const char *a2, ...)
{
  return _[a1 maxAbsSlope];
}

id objc_msgSend_maxBaseHeight(void *a1, const char *a2, ...)
{
  return _[a1 maxBaseHeight];
}

id objc_msgSend_maxExerciseMinuteDataEntries(void *a1, const char *a2, ...)
{
  return _[a1 maxExerciseMinuteDataEntries];
}

id objc_msgSend_maxNatalieEntries(void *a1, const char *a2, ...)
{
  return _[a1 maxNatalieEntries];
}

id objc_msgSend_maxPedometerEntries(void *a1, const char *a2, ...)
{
  return _[a1 maxPedometerEntries];
}

id objc_msgSend_maxPressure(void *a1, const char *a2, ...)
{
  return _[a1 maxPressure];
}

id objc_msgSend_maximumCountryLocationChangeAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 maximumCountryLocationChangeAccuracy];
}

id objc_msgSend_maximumCountryLocationChangeSpeed(void *a1, const char *a2, ...)
{
  return _[a1 maximumCountryLocationChangeSpeed];
}

id objc_msgSend_mcc(void *a1, const char *a2, ...)
{
  return _[a1 mcc];
}

id objc_msgSend_meCardMapItem(void *a1, const char *a2, ...)
{
  return _[a1 meCardMapItem];
}

id objc_msgSend_meCardString(void *a1, const char *a2, ...)
{
  return _[a1 meCardString];
}

id objc_msgSend_mean(void *a1, const char *a2, ...)
{
  return _[a1 mean];
}

id objc_msgSend_meanMaxMets(void *a1, const char *a2, ...)
{
  return _[a1 meanMaxMets];
}

id objc_msgSend_meanPaceFinalFused(void *a1, const char *a2, ...)
{
  return _[a1 meanPaceFinalFused];
}

id objc_msgSend_meanPaceStepCount(void *a1, const char *a2, ...)
{
  return _[a1 meanPaceStepCount];
}

id objc_msgSend_meanSeaLevelPressure(void *a1, const char *a2, ...)
{
  return _[a1 meanSeaLevelPressure];
}

id objc_msgSend_mecardAddress(void *a1, const char *a2, ...)
{
  return _[a1 mecardAddress];
}

id objc_msgSend_mediaList(void *a1, const char *a2, ...)
{
  return _[a1 mediaList];
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return _[a1 mediaType];
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "member:");
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeIntoDaemonLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeIntoDaemonLocation:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageFailedToSend_withError_recoverable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageFailedToSend:withError:recoverable:");
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _[a1 messageType];
}

id objc_msgSend_messagesWaitingForAck(void *a1, const char *a2, ...)
{
  return _[a1 messagesWaitingForAck];
}

id objc_msgSend_metSource(void *a1, const char *a2, ...)
{
  return _[a1 metSource];
}

id objc_msgSend_meta(void *a1, const char *a2, ...)
{
  return _[a1 meta];
}

id objc_msgSend_metaIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 metaIdentifier];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_mets(void *a1, const char *a2, ...)
{
  return _[a1 mets];
}

id objc_msgSend_migrateClientInterestData(void *a1, const char *a2, ...)
{
  return _[a1 migrateClientInterestData];
}

id objc_msgSend_migrateDictionaryAtKeyPath_toKeyPath_forceMigrationOnAuthCollision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateDictionaryAtKeyPath:toKeyPath:forceMigrationOnAuthCollision:");
}

id objc_msgSend_migrationVersionNumber(void *a1, const char *a2, ...)
{
  return _[a1 migrationVersionNumber];
}

id objc_msgSend_minBaseHeight(void *a1, const char *a2, ...)
{
  return _[a1 minBaseHeight];
}

id objc_msgSend_minPressure(void *a1, const char *a2, ...)
{
  return _[a1 minPressure];
}

id objc_msgSend_minimumConfidence(void *a1, const char *a2, ...)
{
  return _[a1 minimumConfidence];
}

id objc_msgSend_minimumMoveDistance(void *a1, const char *a2, ...)
{
  return _[a1 minimumMoveDistance];
}

id objc_msgSend_minor(void *a1, const char *a2, ...)
{
  return _[a1 minor];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return _[a1 minute];
}

id objc_msgSend_mnc(void *a1, const char *a2, ...)
{
  return _[a1 mnc];
}

id objc_msgSend_mobileCrashReporterPath(void *a1, const char *a2, ...)
{
  return _[a1 mobileCrashReporterPath];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modeIndicator(void *a1, const char *a2, ...)
{
  return _[a1 modeIndicator];
}

id objc_msgSend_modeSemanticType(void *a1, const char *a2, ...)
{
  return _[a1 modeSemanticType];
}

id objc_msgSend_modeUpdateReason(void *a1, const char *a2, ...)
{
  return _[a1 modeUpdateReason];
}

id objc_msgSend_modeUpdateSource(void *a1, const char *a2, ...)
{
  return _[a1 modeUpdateSource];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 modelIdentifier];
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return _[a1 modelNumber];
}

id objc_msgSend_modesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modesAtIndex:");
}

id objc_msgSend_modesCount(void *a1, const char *a2, ...)
{
  return _[a1 modesCount];
}

id objc_msgSend_modifications(void *a1, const char *a2, ...)
{
  return _[a1 modifications];
}

id objc_msgSend_monitorKinesiasExpiration(void *a1, const char *a2, ...)
{
  return _[a1 monitorKinesiasExpiration];
}

id objc_msgSend_monitorKinesiasStart(void *a1, const char *a2, ...)
{
  return _[a1 monitorKinesiasStart];
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_monitoredIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 monitoredIdentifier];
}

id objc_msgSend_monitoring(void *a1, const char *a2, ...)
{
  return _[a1 monitoring];
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return _[a1 month];
}

id objc_msgSend_mostRecentLocation(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentLocation];
}

id objc_msgSend_motionActivity(void *a1, const char *a2, ...)
{
  return _[a1 motionActivity];
}

id objc_msgSend_motionAlarmActive(void *a1, const char *a2, ...)
{
  return _[a1 motionAlarmActive];
}

id objc_msgSend_motionAlarmClients(void *a1, const char *a2, ...)
{
  return _[a1 motionAlarmClients];
}

id objc_msgSend_motionAlarmSubscription(void *a1, const char *a2, ...)
{
  return _[a1 motionAlarmSubscription];
}

id objc_msgSend_motionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionEvent:");
}

id objc_msgSend_motionVehicleConnected(void *a1, const char *a2, ...)
{
  return _[a1 motionVehicleConnected];
}

id objc_msgSend_motionVehicleConnectedStateChanged(void *a1, const char *a2, ...)
{
  return _[a1 motionVehicleConnectedStateChanged];
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_muid(void *a1, const char *a2, ...)
{
  return _[a1 muid];
}

id objc_msgSend_mungedUsageDataForPotentiallyOldUsageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mungedUsageDataForPotentiallyOldUsageData:");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForClient:");
}

id objc_msgSend_navigationState(void *a1, const char *a2, ...)
{
  return _[a1 navigationState];
}

id objc_msgSend_nearDepthLimitThreshold(void *a1, const char *a2, ...)
{
  return _[a1 nearDepthLimitThreshold];
}

id objc_msgSend_nearbyDeviceListener(void *a1, const char *a2, ...)
{
  return _[a1 nearbyDeviceListener];
}

id objc_msgSend_nearbyInfoV2DecryptedFlags(void *a1, const char *a2, ...)
{
  return _[a1 nearbyInfoV2DecryptedFlags];
}

id objc_msgSend_nearbyPairUniqueID(void *a1, const char *a2, ...)
{
  return _[a1 nearbyPairUniqueID];
}

id objc_msgSend_nestedBundlePath(void *a1, const char *a2, ...)
{
  return _[a1 nestedBundlePath];
}

id objc_msgSend_newAssertionForBundle_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAssertionForBundle:withReason:");
}

id objc_msgSend_newAssertionWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAssertionWithReason:");
}

id objc_msgSend_newMitigationDict(void *a1, const char *a2, ...)
{
  return _[a1 newMitigationDict];
}

id objc_msgSend_newMitigationFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newMitigationFromDict:");
}

id objc_msgSend_newSharedVendorUniverseWithSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSharedVendorUniverseWithSilo:");
}

id objc_msgSend_newStreamingAllowed(void *a1, const char *a2, ...)
{
  return _[a1 newStreamingAllowed];
}

id objc_msgSend_newTimer(void *a1, const char *a2, ...)
{
  return _[a1 newTimer];
}

id objc_msgSend_newUploadAllowed(void *a1, const char *a2, ...)
{
  return _[a1 newUploadAllowed];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_nextFireDelay(void *a1, const char *a2, ...)
{
  return _[a1 nextFireDelay];
}

id objc_msgSend_nextFireTime(void *a1, const char *a2, ...)
{
  return _[a1 nextFireTime];
}

id objc_msgSend_nid(void *a1, const char *a2, ...)
{
  return _[a1 nid];
}

id objc_msgSend_northWestLatitude(void *a1, const char *a2, ...)
{
  return _[a1 northWestLatitude];
}

id objc_msgSend_northWestLongitude(void *a1, const char *a2, ...)
{
  return _[a1 northWestLongitude];
}

id objc_msgSend_notificationAcknowledged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationAcknowledged:");
}

id objc_msgSend_notifier(void *a1, const char *a2, ...)
{
  return _[a1 notifier];
}

id objc_msgSend_notifierClientNumForCoparty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifierClientNumForCoparty:");
}

id objc_msgSend_notifyClientsAggressiveScanEnded(void *a1, const char *a2, ...)
{
  return _[a1 notifyClientsAggressiveScanEnded];
}

id objc_msgSend_notifyClientsOfVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyClientsOfVisit:");
}

id objc_msgSend_notifyFromLastInfo(void *a1, const char *a2, ...)
{
  return _[a1 notifyFromLastInfo];
}

id objc_msgSend_notifyHKUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyHKUpdates:");
}

id objc_msgSend_notifyMigrationPerformed(void *a1, const char *a2, ...)
{
  return _[a1 notifyMigrationPerformed];
}

id objc_msgSend_notifyMitigationNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyMitigationNeeded:");
}

id objc_msgSend_notifyNewRequestAvailable(void *a1, const char *a2, ...)
{
  return _[a1 notifyNewRequestAvailable];
}

id objc_msgSend_notifyPassKitPayment_transaction_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPassKitPayment:transaction:info:");
}

id objc_msgSend_notifyWhenCacheIsPopulatedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyWhenCacheIsPopulatedWithReply:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_nr5GCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nr5GCellTowerAtIndex:");
}

id objc_msgSend_nr5GCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 nr5GCellTowers];
}

id objc_msgSend_nr5GCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 nr5GCellTowersCount];
}

id objc_msgSend_nrarfcn(void *a1, const char *a2, ...)
{
  return _[a1 nrarfcn];
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return _[a1 nsuuid];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_nullClientKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 nullClientKeyPath];
}

id objc_msgSend_numDuplicateMediaSelections(void *a1, const char *a2, ...)
{
  return _[a1 numDuplicateMediaSelections];
}

id objc_msgSend_numMediaSelectIterations(void *a1, const char *a2, ...)
{
  return _[a1 numMediaSelectIterations];
}

id objc_msgSend_numWorkoutsContrToEstimate(void *a1, const char *a2, ...)
{
  return _[a1 numWorkoutsContrToEstimate];
}

id objc_msgSend_numZaxisHarvestTraces(void *a1, const char *a2, ...)
{
  return _[a1 numZaxisHarvestTraces];
}

id objc_msgSend_numberOfRebaseBtwRefresh(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRebaseBtwRefresh];
}

id objc_msgSend_numberOfSteps(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSteps];
}

id objc_msgSend_numberOfSurroundingCdmaCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingCdmaCells];
}

id objc_msgSend_numberOfSurroundingCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingCells];
}

id objc_msgSend_numberOfSurroundingLteCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingLteCells];
}

id objc_msgSend_numberOfSurroundingNr5GCells(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingNr5GCells];
}

id objc_msgSend_numberOfSurroundingWifis(void *a1, const char *a2, ...)
{
  return _[a1 numberOfSurroundingWifis];
}

id objc_msgSend_numberOfTrackEndedBtwRefresh(void *a1, const char *a2, ...)
{
  return _[a1 numberOfTrackEndedBtwRefresh];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForInfoDictionaryKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_observedTransitAccessPointsCache(void *a1, const char *a2, ...)
{
  return _[a1 observedTransitAccessPointsCache];
}

id objc_msgSend_ocean(void *a1, const char *a2, ...)
{
  return _[a1 ocean];
}

id objc_msgSend_odometer(void *a1, const char *a2, ...)
{
  return _[a1 odometer];
}

id objc_msgSend_odometerTarget(void *a1, const char *a2, ...)
{
  return _[a1 odometerTarget];
}

id objc_msgSend_odometryClient_requestInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "odometryClient:requestInterval:");
}

id objc_msgSend_odometryClient_requestInterval_sequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "odometryClient:requestInterval:sequenceNumber:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _[a1 offset];
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return _[a1 offsetInFile];
}

id objc_msgSend_onAbsoluteAltitudeUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAbsoluteAltitudeUpdate:");
}

id objc_msgSend_onAddBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAddBout:");
}

id objc_msgSend_onAdvertisementBufferEmptied(void *a1, const char *a2, ...)
{
  return _[a1 onAdvertisementBufferEmptied];
}

id objc_msgSend_onAggressiveScanEnded(void *a1, const char *a2, ...)
{
  return _[a1 onAggressiveScanEnded];
}

id objc_msgSend_onAggressiveScanStarted(void *a1, const char *a2, ...)
{
  return _[a1 onAggressiveScanStarted];
}

id objc_msgSend_onAppMonitorNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAppMonitorNotification:data:");
}

id objc_msgSend_onApplicationStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onApplicationStateChange:");
}

id objc_msgSend_onApplicationStateMonitor_didUpdate_forProcess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onApplicationStateMonitor:didUpdate:forProcess:");
}

id objc_msgSend_onAvengerAdvertisement_reconciledInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAvengerAdvertisement:reconciledInformation:");
}

id objc_msgSend_onBackgroundInertialOdometryState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBackgroundInertialOdometryState:");
}

id objc_msgSend_onBarometerCalibrationNotification_track_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBarometerCalibrationNotification:track:data:");
}

id objc_msgSend_onBatchedAccelerometerData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBatchedAccelerometerData:");
}

id objc_msgSend_onBatchedDeviceMotionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBatchedDeviceMotionData:");
}

id objc_msgSend_onCLEmergencyEnablementAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCLEmergencyEnablementAssertion:");
}

id objc_msgSend_onCalorieAggregationActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCalorieAggregationActivity:");
}

id objc_msgSend_onCapabilityChange(void *a1, const char *a2, ...)
{
  return _[a1 onCapabilityChange];
}

id objc_msgSend_onCardioChangeEvent(void *a1, const char *a2, ...)
{
  return _[a1 onCardioChangeEvent];
}

id objc_msgSend_onChangeEstimationActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onChangeEstimationActivity:");
}

id objc_msgSend_onCharger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCharger:");
}

id objc_msgSend_onClassATimerActivity_withAlarmId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onClassATimerActivity:withAlarmId:");
}

id objc_msgSend_onClientManagerNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onClientManagerNotification:data:");
}

id objc_msgSend_onCompanionConnectionNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompanionConnectionNotification:data:");
}

id objc_msgSend_onCompanionNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompanionNotification:data:");
}

id objc_msgSend_onCompanionRelativeElevationUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompanionRelativeElevationUpdate:");
}

id objc_msgSend_onConditionUpdateCallbackHandler(void *a1, const char *a2, ...)
{
  return _[a1 onConditionUpdateCallbackHandler];
}

id objc_msgSend_onCyclingDistanceUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCyclingDistanceUpdate:");
}

id objc_msgSend_onDaemonStatusNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDaemonStatusNotification:data:");
}

id objc_msgSend_onDailyAggregateFeatureComputeActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDailyAggregateFeatureComputeActivity:");
}

id objc_msgSend_onDataCollectionRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDataCollectionRequested:");
}

id objc_msgSend_onDbCleanupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDbCleanupActivity:");
}

id objc_msgSend_onDeepSubmersion_withStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDeepSubmersion:withStateChanged:");
}

id objc_msgSend_onElevationThresold_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onElevationThresold:direction:");
}

id objc_msgSend_onEnableEasySubmersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onEnableEasySubmersion:");
}

id objc_msgSend_onFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 onFirstUnlock];
}

id objc_msgSend_onForcedLocationNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onForcedLocationNotification:data:");
}

id objc_msgSend_onForcedLocationNotificationSub_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onForcedLocationNotificationSub:data:");
}

id objc_msgSend_onHRRecoveryEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onHRRecoveryEstimate:");
}

id objc_msgSend_onHRRecoveryRegisterHRNotification(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoveryRegisterHRNotification];
}

id objc_msgSend_onHRRecoverySessionEnd(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoverySessionEnd];
}

id objc_msgSend_onHRRecoverySessionStart(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoverySessionStart];
}

id objc_msgSend_onHRRecoveryUnregisterHRNotification(void *a1, const char *a2, ...)
{
  return _[a1 onHRRecoveryUnregisterHRNotification];
}

id objc_msgSend_onIntervalTimerCreateEventAndIncrementPacket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onIntervalTimerCreateEventAndIncrementPacket:");
}

id objc_msgSend_onLeechedNotification_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLeechedNotification:withData:");
}

id objc_msgSend_onLocationNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLocationNotification:data:");
}

id objc_msgSend_onLowConfidenceVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLowConfidenceVisit:");
}

id objc_msgSend_onMiLoConnectionStatusEventUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoConnectionStatusEventUpdate:");
}

id objc_msgSend_onMiLoDebugResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoDebugResponse:");
}

id objc_msgSend_onMiLoGenericEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoGenericEvent:");
}

id objc_msgSend_onMiLoObservationMetaInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoObservationMetaInfo:");
}

id objc_msgSend_onMiLoPredictionEventUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoPredictionEventUpdate:");
}

id objc_msgSend_onMiLoServiceEventUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoServiceEventUpdate:");
}

id objc_msgSend_onMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityBoutMetrics:");
}

id objc_msgSend_onMobilityClassificationActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityClassificationActivity:");
}

id objc_msgSend_onMobilityCompanionSyncActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityCompanionSyncActivity:");
}

id objc_msgSend_onMobilityProcessBoutsActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityProcessBoutsActivity:");
}

id objc_msgSend_onMotionActivityNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionActivityNotification:data:");
}

id objc_msgSend_onMotionStateMediatorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateMediatorData:");
}

id objc_msgSend_onMotionStateMediatorNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateMediatorNotification:data:");
}

id objc_msgSend_onMotionStateNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateNotification:data:");
}

id objc_msgSend_onMotionStateObserverNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateObserverNotification:data:");
}

id objc_msgSend_onNoMovementControllerEnablement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onNoMovementControllerEnablement:");
}

id objc_msgSend_onNotSubmerged(void *a1, const char *a2, ...)
{
  return _[a1 onNotSubmerged];
}

id objc_msgSend_onNotification_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onNotification:withData:");
}

id objc_msgSend_onObjectDiscoveryUpdatedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onObjectDiscoveryUpdatedState:");
}

id objc_msgSend_onOdometerNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onOdometerNotification:data:");
}

id objc_msgSend_onOutdoorUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onOutdoorUpdate:");
}

id objc_msgSend_onP6MWDActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onP6MWDActivity:");
}

id objc_msgSend_onResultAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onResultAvailable:");
}

id objc_msgSend_onRetrocomputePreprocessingActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetrocomputePreprocessingActivity:");
}

id objc_msgSend_onRetrocomputeStatusUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetrocomputeStatusUpdate:");
}

id objc_msgSend_onRetryHealthKitDeleteSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetryHealthKitDeleteSamples:");
}

id objc_msgSend_onRetryTriggerRetrocompute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetryTriggerRetrocompute:");
}

id objc_msgSend_onScenarioTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onScenarioTrigger:");
}

id objc_msgSend_onScheduledTileDownloadWithReachabilityRequirement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onScheduledTileDownloadWithReachabilityRequirement:");
}

id objc_msgSend_onShallowSubmersion_withStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onShallowSubmersion:withStateChanged:");
}

id objc_msgSend_onSignificantLocationVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSignificantLocationVisit:");
}

id objc_msgSend_onStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStateUpdate:");
}

id objc_msgSend_onStatusBarIconChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStatusBarIconChange:");
}

id objc_msgSend_onStatusBarIconChangeInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStatusBarIconChangeInternal:");
}

id objc_msgSend_onStepNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStepNotification:data:");
}

id objc_msgSend_onSubmersionMeasurementUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSubmersionMeasurementUpdate:");
}

id objc_msgSend_onSubmersionStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSubmersionStateUpdate:");
}

id objc_msgSend_onSyncActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSyncActivity:");
}

id objc_msgSend_onTelephonyNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTelephonyNotification:data:");
}

id objc_msgSend_onTileWasDownloadedNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTileWasDownloadedNotification:data:");
}

id objc_msgSend_onTransitStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTransitStateUpdate:");
}

id objc_msgSend_onUsageMetricsEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onUsageMetricsEvent:");
}

id objc_msgSend_onVdrNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onVdrNotification:data:");
}

id objc_msgSend_onVehicularState(void *a1, const char *a2, ...)
{
  return _[a1 onVehicularState];
}

id objc_msgSend_onVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onVisit:");
}

id objc_msgSend_onWalkingSteadinessClassification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWalkingSteadinessClassification:");
}

id objc_msgSend_onWifiServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWifiServiceNotification:data:");
}

id objc_msgSend_onWorkoutEffortScoreUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWorkoutEffortScoreUpdate:");
}

id objc_msgSend_onWorkoutSessionUpdate_withOverview_andPriors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWorkoutSessionUpdate:withOverview:andPriors:");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersion];
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersionString];
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_optedIn(void *a1, const char *a2, ...)
{
  return _[a1 optedIn];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_originDeviceToGpsSource_locationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originDeviceToGpsSource:locationType:");
}

id objc_msgSend_originalRequest(void *a1, const char *a2, ...)
{
  return _[a1 originalRequest];
}

id objc_msgSend_outOfSession(void *a1, const char *a2, ...)
{
  return _[a1 outOfSession];
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 outgoingResponseIdentifier];
}

id objc_msgSend_outputDeviceIDs(void *a1, const char *a2, ...)
{
  return _[a1 outputDeviceIDs];
}

id objc_msgSend_overviewId(void *a1, const char *a2, ...)
{
  return _[a1 overviewId];
}

id objc_msgSend_pace(void *a1, const char *a2, ...)
{
  return _[a1 pace];
}

id objc_msgSend_packageMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packageMessage:");
}

id objc_msgSend_pairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 pairedDevice];
}

id objc_msgSend_pairedDeviceID(void *a1, const char *a2, ...)
{
  return _[a1 pairedDeviceID];
}

id objc_msgSend_pairedDeviceLastSeenTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 pairedDeviceLastSeenTimestamp];
}

id objc_msgSend_pairingID(void *a1, const char *a2, ...)
{
  return _[a1 pairingID];
}

id objc_msgSend_parseAndNotifyDelegateOnDiscoveredPeripheral_RSSI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseAndNotifyDelegateOnDiscoveredPeripheral:RSSI:");
}

id objc_msgSend_partnerID(void *a1, const char *a2, ...)
{
  return _[a1 partnerID];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _[a1 pathComponents];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForDate_withBasePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForDate:withBasePath:");
}

id objc_msgSend_pathForPrimaryData(void *a1, const char *a2, ...)
{
  return _[a1 pathForPrimaryData];
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathForSecondaryData(void *a1, const char *a2, ...)
{
  return _[a1 pathForSecondaryData];
}

id objc_msgSend_pathInfoWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathInfoWithURL:");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pauseEvent_bounce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseEvent_bounce");
}

id objc_msgSend_pauseResetAndFreeRavenSupervisorWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseResetAndFreeRavenSupervisorWithCompletion:");
}

id objc_msgSend_pauseWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseWorkout:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_payloads(void *a1, const char *a2, ...)
{
  return _[a1 payloads];
}

id objc_msgSend_peakHR(void *a1, const char *a2, ...)
{
  return _[a1 peakHR];
}

id objc_msgSend_pedometerArmConstrainedState(void *a1, const char *a2, ...)
{
  return _[a1 pedometerArmConstrainedState];
}

id objc_msgSend_pedometerBuffer(void *a1, const char *a2, ...)
{
  return _[a1 pedometerBuffer];
}

id objc_msgSend_pendingRecordZoneChanges(void *a1, const char *a2, ...)
{
  return _[a1 pendingRecordZoneChanges];
}

id objc_msgSend_percentageRemoteGPSSource(void *a1, const char *a2, ...)
{
  return _[a1 percentageRemoteGPSSource];
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performBlockWhenArmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockWhenArmed:");
}

id objc_msgSend_performDbCleanUpOnActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performDbCleanUpOnActivity:");
}

id objc_msgSend_performFullSystemServiceSetup(void *a1, const char *a2, ...)
{
  return _[a1 performFullSystemServiceSetup];
}

id objc_msgSend_performMigration(void *a1, const char *a2, ...)
{
  return _[a1 performMigration];
}

id objc_msgSend_performMigrationWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithReply:");
}

id objc_msgSend_performNotOptedInBOMScan(void *a1, const char *a2, ...)
{
  return _[a1 performNotOptedInBOMScan];
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performSyncWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSyncWithCompletion:activity:");
}

id objc_msgSend_periodIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "periodIndex:");
}

id objc_msgSend_peripheralDataWithMeasuredPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheralDataWithMeasuredPower:");
}

id objc_msgSend_persist(void *a1, const char *a2, ...)
{
  return _[a1 persist];
}

id objc_msgSend_persistAnalyticsCache(void *a1, const char *a2, ...)
{
  return _[a1 persistAnalyticsCache];
}

id objc_msgSend_persistLostEstimateToStagingTables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistLostEstimateToStagingTables:");
}

id objc_msgSend_persistRetrocomputeResultsToStagingTables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistRetrocomputeResultsToStagingTables:");
}

id objc_msgSend_persistenceUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 persistenceUnavailable];
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreCoordinator];
}

id objc_msgSend_persistentStoreDescription(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreDescription];
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return _[a1 persistentStores];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_placeInference(void *a1, const char *a2, ...)
{
  return _[a1 placeInference];
}

id objc_msgSend_placeType(void *a1, const char *a2, ...)
{
  return _[a1 placeType];
}

id objc_msgSend_placemark(void *a1, const char *a2, ...)
{
  return _[a1 placemark];
}

id objc_msgSend_pnoffset(void *a1, const char *a2, ...)
{
  return _[a1 pnoffset];
}

id objc_msgSend_pointCount(void *a1, const char *a2, ...)
{
  return _[a1 pointCount];
}

id objc_msgSend_poolLength(void *a1, const char *a2, ...)
{
  return _[a1 poolLength];
}

id objc_msgSend_possibleStops(void *a1, const char *a2, ...)
{
  return _[a1 possibleStops];
}

id objc_msgSend_postalCode(void *a1, const char *a2, ...)
{
  return _[a1 postalCode];
}

id objc_msgSend_power(void *a1, const char *a2, ...)
{
  return _[a1 power];
}

id objc_msgSend_precipitationType(void *a1, const char *a2, ...)
{
  return _[a1 precipitationType];
}

id objc_msgSend_precision(void *a1, const char *a2, ...)
{
  return _[a1 precision];
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingBundleIdentifier:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return _[a1 preferredLanguages];
}

id objc_msgSend_preferredName(void *a1, const char *a2, ...)
{
  return _[a1 preferredName];
}

id objc_msgSend_pressure(void *a1, const char *a2, ...)
{
  return _[a1 pressure];
}

id objc_msgSend_pressureMeasurement(void *a1, const char *a2, ...)
{
  return _[a1 pressureMeasurement];
}

id objc_msgSend_prevLoc(void *a1, const char *a2, ...)
{
  return _[a1 prevLoc];
}

id objc_msgSend_previousCountries(void *a1, const char *a2, ...)
{
  return _[a1 previousCountries];
}

id objc_msgSend_previousCountryCodeTimeStamp(void *a1, const char *a2, ...)
{
  return _[a1 previousCountryCodeTimeStamp];
}

id objc_msgSend_previousLocation(void *a1, const char *a2, ...)
{
  return _[a1 previousLocation];
}

id objc_msgSend_primaryDataSize(void *a1, const char *a2, ...)
{
  return _[a1 primaryDataSize];
}

id objc_msgSend_primaryKeyPathForAuthLimitedKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryKeyPathForAuthLimitedKeyPath:");
}

id objc_msgSend_printMeanSeaLevelPressureArray_withPrePhrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printMeanSeaLevelPressureArray:withPrePhrase:");
}

id objc_msgSend_printMeanSeaLevelPressureElement_withPrePhrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printMeanSeaLevelPressureElement:withPrePhrase:");
}

id objc_msgSend_prior(void *a1, const char *a2, ...)
{
  return _[a1 prior];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _[a1 privateCloudDatabase];
}

id objc_msgSend_probeClients(void *a1, const char *a2, ...)
{
  return _[a1 probeClients];
}

id objc_msgSend_processActiveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processActiveScan:");
}

id objc_msgSend_processCells_inRange_timeReceived_requestType_tag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processCells:inRange:timeReceived:requestType:tag:");
}

id objc_msgSend_processDataWithMaxDuration_endTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processDataWithMaxDuration:endTime:");
}

id objc_msgSend_processEventTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEventTime:");
}

id objc_msgSend_processEventTimes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEventTimes:");
}

id objc_msgSend_processEventsForTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEventsForTime:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processMediaForRequestID_callUUID_uploadURL_sharedInfoPrefix_combinedSecret_token_mediaList_mitigation_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:");
}

id objc_msgSend_processMediaServicesEndOfExtendedSessionNotification(void *a1, const char *a2, ...)
{
  return _[a1 processMediaServicesEndOfExtendedSessionNotification];
}

id objc_msgSend_processMediaServicesForRequestID_callUUID_uploadURL_sharedInfoPrefix_combinedSecret_token_mediaList_mitigation_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "processMediaServicesForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:");
}

id objc_msgSend_processMediaServicesMitigations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaServicesMitigations:");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processNextIntervalWithRemainingDurationToProcess_endTime_updateCanContinue_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processNextIntervalWithRemainingDurationToProcess:endTime:updateCanContinue:");
}

id objc_msgSend_processScanCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processScanCache:");
}

id objc_msgSend_processScdmaCells_inRange_timeReceived_requestType_tag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processScdmaCells:inRange:timeReceived:requestType:tag:");
}

id objc_msgSend_processSingleFenceAnalyticsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSingleFenceAnalyticsData:");
}

id objc_msgSend_processWireless_inRange_timeReceived_requestType_tag_surroundingWifiBands_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processWireless:inRange:timeReceived:requestType:tag:surroundingWifiBands:");
}

id objc_msgSend_processingCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 processingCellTowers];
}

id objc_msgSend_processingWirelessAPs(void *a1, const char *a2, ...)
{
  return _[a1 processingWirelessAPs];
}

id objc_msgSend_programEntryScanNetworks_andExitScanNetworks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "programEntryScanNetworks:andExitScanNetworks:");
}

id objc_msgSend_promoteStagingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promoteStagingData:");
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _[a1 protectionSpace];
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 protocolVersion];
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _[a1 provider];
}

id objc_msgSend_provisionalServiceMask(void *a1, const char *a2, ...)
{
  return _[a1 provisionalServiceMask];
}

id objc_msgSend_proximityUUID(void *a1, const char *a2, ...)
{
  return _[a1 proximityUUID];
}

id objc_msgSend_proxy(void *a1, const char *a2, ...)
{
  return _[a1 proxy];
}

id objc_msgSend_proxyForRecipientObject_inSilo_recipientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForRecipientObject:inSilo:recipientName:");
}

id objc_msgSend_proxyForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForService:");
}

id objc_msgSend_proxyForService_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForService:forClient:");
}

id objc_msgSend_pruneAndGetSecondaryDataOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneAndGetSecondaryDataOlderThan:");
}

id objc_msgSend_pruneSecondaryDataOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneSecondaryDataOlderThan:");
}

id objc_msgSend_psapID(void *a1, const char *a2, ...)
{
  return _[a1 psapID];
}

id objc_msgSend_psc(void *a1, const char *a2, ...)
{
  return _[a1 psc];
}

id objc_msgSend_publishDataFiles_metadata_startDate_endDate_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publishDataFiles:metadata:startDate:endDate:settings:");
}

id objc_msgSend_publishRecording(void *a1, const char *a2, ...)
{
  return _[a1 publishRecording];
}

id objc_msgSend_publisher(void *a1, const char *a2, ...)
{
  return _[a1 publisher];
}

id objc_msgSend_purgeAllMicroLocationData(void *a1, const char *a2, ...)
{
  return _[a1 purgeAllMicroLocationData];
}

id objc_msgSend_purgeMicroLocationSemiSupervisedDataForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeMicroLocationSemiSupervisedDataForClient:");
}

id objc_msgSend_purgeOlderRecords(void *a1, const char *a2, ...)
{
  return _[a1 purgeOlderRecords];
}

id objc_msgSend_purgeRecordsWithDistanceLargerThanThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeRecordsWithDistanceLargerThanThreshold:");
}

id objc_msgSend_pushElevationsFromTime_toTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushElevationsFromTime:toTime:");
}

id objc_msgSend_quaternionW(void *a1, const char *a2, ...)
{
  return _[a1 quaternionW];
}

id objc_msgSend_quaternionX(void *a1, const char *a2, ...)
{
  return _[a1 quaternionX];
}

id objc_msgSend_quaternionY(void *a1, const char *a2, ...)
{
  return _[a1 quaternionY];
}

id objc_msgSend_quaternionZ(void *a1, const char *a2, ...)
{
  return _[a1 quaternionZ];
}

id objc_msgSend_queryActivityStartingFromDate_toDate_toQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryActivityStartingFromDate:toDate:toQueue:withHandler:");
}

id objc_msgSend_queryActivityWithAttribute_fromDate_toDate_toQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryActivityWithAttribute:fromDate:toDate:toQueue:withHandler:");
}

id objc_msgSend_queryForTransitionEvents(void *a1, const char *a2, ...)
{
  return _[a1 queryForTransitionEvents];
}

id objc_msgSend_queryHealthKitWithGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryHealthKitWithGroup:");
}

id objc_msgSend_queryMetMinutesInTimeRange_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMetMinutesInTimeRange:withReply:");
}

id objc_msgSend_queryMiloConnectionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMiloConnectionStatus:");
}

id objc_msgSend_queryMotionStatesWithStartTime_endTime_isFromInternalClient_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMotionStatesWithStartTime:endTime:isFromInternalClient:withReply:");
}

id objc_msgSend_queryServicesForClient_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryServicesForClient:withConnectionToken:forUser:");
}

id objc_msgSend_querySessionSWOLF_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySessionSWOLF:withReply:");
}

id objc_msgSend_querySignificantElevationDeltaFromDate_toDate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySignificantElevationDeltaFromDate:toDate:withReply:");
}

id objc_msgSend_querySinceRecord_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySinceRecord:withReply:");
}

id objc_msgSend_queryUsingRecord_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUsingRecord:withReply:");
}

id objc_msgSend_queryVO2MaxInputsFromRecord_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryVO2MaxInputsFromRecord:withReply:");
}

id objc_msgSend_queryVO2MaxRetrocomputeStatusWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryVO2MaxRetrocomputeStatusWithReply:");
}

id objc_msgSend_queryWorkoutMets_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWorkoutMets:withReply:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_quitForcedLocationState(void *a1, const char *a2, ...)
{
  return _[a1 quitForcedLocationState];
}

id objc_msgSend_radialDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 radialDisplacement];
}

id objc_msgSend_radius(void *a1, const char *a2, ...)
{
  return _[a1 radius];
}

id objc_msgSend_radiusMeters(void *a1, const char *a2, ...)
{
  return _[a1 radiusMeters];
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return _[a1 raise];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rampType(void *a1, const char *a2, ...)
{
  return _[a1 rampType];
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return _[a1 range];
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rapportDiscoveryLink(void *a1, const char *a2, ...)
{
  return _[a1 rapportDiscoveryLink];
}

id objc_msgSend_rapportLink(void *a1, const char *a2, ...)
{
  return _[a1 rapportLink];
}

id objc_msgSend_rapportLinkActive(void *a1, const char *a2, ...)
{
  return _[a1 rapportLinkActive];
}

id objc_msgSend_rapportStreamingLink(void *a1, const char *a2, ...)
{
  return _[a1 rapportStreamingLink];
}

id objc_msgSend_rat(void *a1, const char *a2, ...)
{
  return _[a1 rat];
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _[a1 rate];
}

id objc_msgSend_rawCoordinateLatitude(void *a1, const char *a2, ...)
{
  return _[a1 rawCoordinateLatitude];
}

id objc_msgSend_rawCoordinateLongitude(void *a1, const char *a2, ...)
{
  return _[a1 rawCoordinateLongitude];
}

id objc_msgSend_rawMotionActivity(void *a1, const char *a2, ...)
{
  return _[a1 rawMotionActivity];
}

id objc_msgSend_reInitializeDatabasesAndSyncEngineIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 reInitializeDatabasesAndSyncEngineIfNeeded];
}

id objc_msgSend_reach(void *a1, const char *a2, ...)
{
  return _[a1 reach];
}

id objc_msgSend_reachability(void *a1, const char *a2, ...)
{
  return _[a1 reachability];
}

id objc_msgSend_read_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "read:maxLength:");
}

id objc_msgSend_readConditionsFromFile(void *a1, const char *a2, ...)
{
  return _[a1 readConditionsFromFile];
}

id objc_msgSend_readData(void *a1, const char *a2, ...)
{
  return _[a1 readData];
}

id objc_msgSend_readDataOfLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataOfLength:");
}

id objc_msgSend_readFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readFrom:");
}

id objc_msgSend_readTag_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readTag:type:");
}

id objc_msgSend_readonlyStoreAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readonlyStoreAtKeyPath:");
}

id objc_msgSend_readyToFilter(void *a1, const char *a2, ...)
{
  return _[a1 readyToFilter];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_rebaseSignificantElevationWithEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rebaseSignificantElevationWithEndTime:");
}

id objc_msgSend_receiveColdStorageDataUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveColdStorageDataUpdate:");
}

id objc_msgSend_receiveMobilityDataFromCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveMobilityDataFromCompanion:");
}

id objc_msgSend_receivePredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivePredictedWalkDistanceBout:");
}

id objc_msgSend_receiveVO2MaxCloudKitDailyStatsFromWatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveVO2MaxCloudKitDailyStatsFromWatch:");
}

id objc_msgSend_receiveWorkoutDistanceAnalyticsMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveWorkoutDistanceAnalyticsMessage:");
}

id objc_msgSend_receivedMessageHandler(void *a1, const char *a2, ...)
{
  return _[a1 receivedMessageHandler];
}

id objc_msgSend_receivedTimeToAcceptTime(void *a1, const char *a2, ...)
{
  return _[a1 receivedTimeToAcceptTime];
}

id objc_msgSend_receivedTimeToFirstUserResponse(void *a1, const char *a2, ...)
{
  return _[a1 receivedTimeToFirstUserResponse];
}

id objc_msgSend_recentVisits(void *a1, const char *a2, ...)
{
  return _[a1 recentVisits];
}

id objc_msgSend_reconciler(void *a1, const char *a2, ...)
{
  return _[a1 reconciler];
}

id objc_msgSend_reconfigureRavenIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 reconfigureRavenIfNeeded];
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _[a1 record];
}

id objc_msgSend_recordChangeTag(void *a1, const char *a2, ...)
{
  return _[a1 recordChangeTag];
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordIDsToDelete(void *a1, const char *a2, ...)
{
  return _[a1 recordIDsToDelete];
}

id objc_msgSend_recordId(void *a1, const char *a2, ...)
{
  return _[a1 recordId];
}

id objc_msgSend_recordIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 recordIdentifier];
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _[a1 recordName];
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _[a1 recordType];
}

id objc_msgSend_recordWeatherData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWeatherData:");
}

id objc_msgSend_recordZone(void *a1, const char *a2, ...)
{
  return _[a1 recordZone];
}

id objc_msgSend_recordingURLs(void *a1, const char *a2, ...)
{
  return _[a1 recordingURLs];
}

id objc_msgSend_recordsToSave(void *a1, const char *a2, ...)
{
  return _[a1 recordsToSave];
}

id objc_msgSend_recoveryOnsetTime(void *a1, const char *a2, ...)
{
  return _[a1 recoveryOnsetTime];
}

id objc_msgSend_recoverySession(void *a1, const char *a2, ...)
{
  return _[a1 recoverySession];
}

id objc_msgSend_reduceAccuracy_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reduceAccuracy:withReply:");
}

id objc_msgSend_reevaluateMotionSubscription(void *a1, const char *a2, ...)
{
  return _[a1 reevaluateMotionSubscription];
}

id objc_msgSend_referenceFrame(void *a1, const char *a2, ...)
{
  return _[a1 referenceFrame];
}

id objc_msgSend_referenceLocation(void *a1, const char *a2, ...)
{
  return _[a1 referenceLocation];
}

id objc_msgSend_refillAwaitingMonitoringConditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refillAwaitingMonitoringConditions:");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _[a1 refresh];
}

id objc_msgSend_refreshHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:");
}

id objc_msgSend_refreshMetrics(void *a1, const char *a2, ...)
{
  return _[a1 refreshMetrics];
}

id objc_msgSend_refreshSettings(void *a1, const char *a2, ...)
{
  return _[a1 refreshSettings];
}

id objc_msgSend_regionCenterLocation(void *a1, const char *a2, ...)
{
  return _[a1 regionCenterLocation];
}

id objc_msgSend_regionChangeCallback(void *a1, const char *a2, ...)
{
  return _[a1 regionChangeCallback];
}

id objc_msgSend_regionId(void *a1, const char *a2, ...)
{
  return _[a1 regionId];
}

id objc_msgSend_register_forNotification_registrationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "register:forNotification:registrationInfo:");
}

id objc_msgSend_registerAlarm_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAlarm:withReply:");
}

id objc_msgSend_registerAndRunXPCActivity_withActivityIdentifier_andDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAndRunXPCActivity:withActivityIdentifier:andDescription:");
}

id objc_msgSend_registerCircularInterestZoneForClientKey_withId_latitude_longitude_serviceMaskOperator_provenanceType_radius_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "registerCircularInterestZoneForClientKey:withId:latitude:longitude:serviceMaskOperator:provenanceType:radius:withReply:");
}

id objc_msgSend_registerClient_adapter_systemClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:adapter:systemClient:");
}

id objc_msgSend_registerClient_forElevationThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:forElevationThreshold:");
}

id objc_msgSend_registerClient_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:forNotification:");
}

id objc_msgSend_registerClient_fromAuthSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:fromAuthSync:");
}

id objc_msgSend_registerDailyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDailyBlock:");
}

id objc_msgSend_registerDatabaseAtURL_tableName_isClassB_sourceDevice_cloudKitDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDatabaseAtURL:tableName:isClassB:sourceDevice:cloudKitDelegate:");
}

id objc_msgSend_registerDelegate_inSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDelegate:inSilo:");
}

id objc_msgSend_registerDelegate_withFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDelegate:withFilter:");
}

id objc_msgSend_registerEventID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerEventID:options:handler:");
}

id objc_msgSend_registerForAlgorithmSources(void *a1, const char *a2, ...)
{
  return _[a1 registerForAlgorithmSources];
}

id objc_msgSend_registerForAppMonitorNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForAppMonitorNotification];
}

id objc_msgSend_registerForAvengerScanner(void *a1, const char *a2, ...)
{
  return _[a1 registerForAvengerScanner];
}

id objc_msgSend_registerForCyclingWorkoutDistanceUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCyclingWorkoutDistanceUpdates:");
}

id objc_msgSend_registerForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForData:");
}

id objc_msgSend_registerForDeviceMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDeviceMatching:");
}

id objc_msgSend_registerForDevicesMatching_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDevicesMatching:options:");
}

id objc_msgSend_registerForHKNanoLifestylePrivacyPreferencesChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForHKNanoLifestylePrivacyPreferencesChangedNotification];
}

id objc_msgSend_registerForMiloPredictionEventUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMiloPredictionEventUpdates:");
}

id objc_msgSend_registerForMiloServiceEventUpdatesForClient_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMiloServiceEventUpdatesForClient:withToken:");
}

id objc_msgSend_registerForMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMobilityBoutMetrics:");
}

id objc_msgSend_registerForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 registerForNotifications];
}

id objc_msgSend_registerForPushToken_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForPushToken:completion:");
}

id objc_msgSend_registerForRetrocomputeStatusUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForRetrocomputeStatusUpdates:");
}

id objc_msgSend_registerForStateUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForStateUpdates:");
}

id objc_msgSend_registerForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForUpdates:");
}

id objc_msgSend_registerForVehicleStateNotification(void *a1, const char *a2, ...)
{
  return _[a1 registerForVehicleStateNotification];
}

id objc_msgSend_registerForWalkingSteadiness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWalkingSteadiness:");
}

id objc_msgSend_registerForWeatherUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWeatherUpdates:");
}

id objc_msgSend_registerForWifiScanResultsWithQueue_error_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWifiScanResultsWithQueue:error:callback:");
}

id objc_msgSend_registerForWorkoutSessionUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWorkoutSessionUpdates:");
}

id objc_msgSend_registerForZoneChangesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForZoneChangesMatching:");
}

id objc_msgSend_registerPaths_forBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPaths:forBundleID:completionHandler:");
}

id objc_msgSend_registerPhenolicInterestZoneForClientKey_withId_phenolicLocation_serviceMaskOperator_provenanceType_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "registerPhenolicInterestZoneForClientKey:withId:phenolicLocation:serviceMaskOperator:provenanceType:withReply:");
}

id objc_msgSend_registerRequestHandlers(void *a1, const char *a2, ...)
{
  return _[a1 registerRequestHandlers];
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_registerSmartCoverStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSmartCoverStateObserver:");
}

id objc_msgSend_registerStrideCalDbForColdStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerStrideCalDbForColdStorage:");
}

id objc_msgSend_registerSubIdentity_withType_forAnchorKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSubIdentity:withType:forAnchorKeyPath:");
}

id objc_msgSend_registeredFiles(void *a1, const char *a2, ...)
{
  return _[a1 registeredFiles];
}

id objc_msgSend_registeredKeyPathForClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredKeyPathForClientIdentifier:");
}

id objc_msgSend_registeredXPCTaskElevationProfile(void *a1, const char *a2, ...)
{
  return _[a1 registeredXPCTaskElevationProfile];
}

id objc_msgSend_registeredXPCTaskMSLP(void *a1, const char *a2, ...)
{
  return _[a1 registeredXPCTaskMSLP];
}

id objc_msgSend_registrationResult(void *a1, const char *a2, ...)
{
  return _[a1 registrationResult];
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_regulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _[a1 regulatoryDomainEstimates];
}

id objc_msgSend_relationship(void *a1, const char *a2, ...)
{
  return _[a1 relationship];
}

id objc_msgSend_releaseAccuracyEnablementAssertionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseAccuracyEnablementAssertionForClient:");
}

id objc_msgSend_releaseAllContextManagers(void *a1, const char *a2, ...)
{
  return _[a1 releaseAllContextManagers];
}

id objc_msgSend_releaseAndClearManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseAndClearManager:");
}

id objc_msgSend_releaseAssertion(void *a1, const char *a2, ...)
{
  return _[a1 releaseAssertion];
}

id objc_msgSend_releaseBlocks(void *a1, const char *a2, ...)
{
  return _[a1 releaseBlocks];
}

id objc_msgSend_releaseContextManagersForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseContextManagersForNotification:");
}

id objc_msgSend_releaseData(void *a1, const char *a2, ...)
{
  return _[a1 releaseData];
}

id objc_msgSend_releaseMapHelperServiceOSTransaction(void *a1, const char *a2, ...)
{
  return _[a1 releaseMapHelperServiceOSTransaction];
}

id objc_msgSend_releaseOSTransaction(void *a1, const char *a2, ...)
{
  return _[a1 releaseOSTransaction];
}

id objc_msgSend_releasePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 releasePowerAssertion];
}

id objc_msgSend_releasePowerAssertions(void *a1, const char *a2, ...)
{
  return _[a1 releasePowerAssertions];
}

id objc_msgSend_remainingBOMScans(void *a1, const char *a2, ...)
{
  return _[a1 remainingBOMScans];
}

id objc_msgSend_remoteDeviceMotionUpdate_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDeviceMotionUpdate:atTime:");
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectInterface];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _[a1 remoteObjectProxy];
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteTimeout(void *a1, const char *a2, ...)
{
  return _[a1 remoteTimeout];
}

id objc_msgSend_removeAllDiscoveryTypes(void *a1, const char *a2, ...)
{
  return _[a1 removeAllDiscoveryTypes];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAttribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAttribution:");
}

id objc_msgSend_removeClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeClient:");
}

id objc_msgSend_removeClient_prepareSessionEndForSessionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeClient:prepareSessionEndForSessionType:");
}

id objc_msgSend_removeConditionsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConditionsWithIdentifiers:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeDictionaryAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDictionaryAtKeyPath:");
}

id objc_msgSend_removeFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFence:");
}

id objc_msgSend_removeGeofenceWithRegionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGeofenceWithRegionId:");
}

id objc_msgSend_removeGeofencesNearLocationWithLatitude_andLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGeofencesNearLocationWithLatitude:andLongitude:");
}

id objc_msgSend_removeInterestForClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeInterestForClientKey:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeLingeringEntriesAtPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLingeringEntriesAtPeriod:");
}

id objc_msgSend_removeMonitoredRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMonitoredRegion:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOldVisits(void *a1, const char *a2, ...)
{
  return _[a1 removeOldVisits];
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePersistentStore:error:");
}

id objc_msgSend_removeRecordFromMonitoringWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRecordFromMonitoringWithIdentifier:");
}

id objc_msgSend_removeResponseListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeResponseListener:");
}

id objc_msgSend_removeRhythmicGnssClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRhythmicGnssClient:");
}

id objc_msgSend_removeValueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeValueForKey:atKeyPath:");
}

id objc_msgSend_repeats(void *a1, const char *a2, ...)
{
  return _[a1 repeats];
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_reportLocationUtilityEvent_atDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportLocationUtilityEvent:atDate:");
}

id objc_msgSend_requestAnchorValueStatisticsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAnchorValueStatisticsWithReply:");
}

id objc_msgSend_requestArchivesForHarvester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestArchivesForHarvester:");
}

id objc_msgSend_requestCode(void *a1, const char *a2, ...)
{
  return _[a1 requestCode];
}

id objc_msgSend_requestConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 requestConfiguration];
}

id objc_msgSend_requestCurrentMicroLocationForClient_withAdditionalInformation_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCurrentMicroLocationForClient:withAdditionalInformation:withReply:");
}

id objc_msgSend_requestDate(void *a1, const char *a2, ...)
{
  return _[a1 requestDate];
}

id objc_msgSend_requestExportMiLoDatabaseTablesFromClient_withRequestIdentifier_connectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestExportMiLoDatabaseTablesFromClient:withRequestIdentifier:connectionToken:");
}

id objc_msgSend_requestForSchedulingTileDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestForSchedulingTileDownload:");
}

id objc_msgSend_requestFullResync(void *a1, const char *a2, ...)
{
  return _[a1 requestFullResync];
}

id objc_msgSend_requestGuidanceState(void *a1, const char *a2, ...)
{
  return _[a1 requestGuidanceState];
}

id objc_msgSend_requestLabelObservationsForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_betweenStartDate_endDate_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestLabelObservationsForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:betweenStar tDate:endDate:withConnectionToken:");
}

id objc_msgSend_requestLabelSingleObservationForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_withObservationRequestIdentifier_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestLabelSingleObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withOb servationRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestLocation(void *a1, const char *a2, ...)
{
  return _[a1 requestLocation];
}

id objc_msgSend_requestLocationUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLocationUpdateWithParameters:");
}

id objc_msgSend_requestLocationWithDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLocationWithDesiredAccuracy:");
}

id objc_msgSend_requestMicroLocationLearningForClient_withServiceIdentifier_withRequestIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMicroLocationLearningForClient:withServiceIdentifier:withRequestIdentifier:");
}

id objc_msgSend_requestMicroLocationLearningForClient_Legacy_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMicroLocationLearningForClient_Legacy:withReply:");
}

id objc_msgSend_requestMicroLocationRecordingScanForClient_withAdditionalInformation_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMicroLocationRecordingScanForClient:withAdditionalInformation:withReply:");
}

id objc_msgSend_requestObservationForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withConnectionToken:");
}

id objc_msgSend_requestPurgeAllMiLoDataFromClient_withRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestPurgeAllMiLoDataFromClient:withRequestIdentifier:");
}

id objc_msgSend_requestQ(void *a1, const char *a2, ...)
{
  return _[a1 requestQ];
}

id objc_msgSend_requestReceivedTime(void *a1, const char *a2, ...)
{
  return _[a1 requestReceivedTime];
}

id objc_msgSend_requestRegionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRegionState:");
}

id objc_msgSend_requestRemoveCustomLoiWithServiceIdentifier_withRequestIdentifier_withLoiIdentifier_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestRemoveCustomLoiWithServiceIdentifier:withRequestIdentifier:withLoiIdentifier:withConnectionToken:");
}

id objc_msgSend_requestRemoveLabelsForClient_withServiceIdentifier_withRequestIdentifier_withLabels_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestRemoveLabelsForClient:withServiceIdentifier:withRequestIdentifier:withLabels:withConnectionToken:");
}

id objc_msgSend_requestRouteSummary(void *a1, const char *a2, ...)
{
  return _[a1 requestRouteSummary];
}

id objc_msgSend_requestSingleShotMiLoPredictionForClient_withServiceIdentifier_withRequestIdentifier_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestSingleShotMiLoPredictionForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestStartUpdatingMicroLocationForClient_withServiceIdentifier_withRequestIdentifier_withConfiguration_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestStartUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConfiguration:with ConnectionToken:");
}

id objc_msgSend_requestStatusAtFirstUserResponse(void *a1, const char *a2, ...)
{
  return _[a1 requestStatusAtFirstUserResponse];
}

id objc_msgSend_requestStopUpdatingMicroLocationForClient_withServiceIdentifier_withRequestIdentifier_withConnectionToken_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "requestStopUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestTileDownloadByType_lat_lon_seckey_details_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTileDownloadByType:lat:lon:seckey:details:");
}

id objc_msgSend_requestTileDownloadByType_path_details_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTileDownloadByType:path:details:");
}

id objc_msgSend_requestTileDownloadForLat_lon_details_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTileDownloadForLat:lon:details:");
}

id objc_msgSend_requestTransitSummary(void *a1, const char *a2, ...)
{
  return _[a1 requestTransitSummary];
}

id objc_msgSend_requestTransitionToLocationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTransitionToLocationState:");
}

id objc_msgSend_requestTransmissionTime(void *a1, const char *a2, ...)
{
  return _[a1 requestTransmissionTime];
}

id objc_msgSend_requestTypeCode(void *a1, const char *a2, ...)
{
  return _[a1 requestTypeCode];
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestedScanType(void *a1, const char *a2, ...)
{
  return _[a1 requestedScanType];
}

id objc_msgSend_requiresSecureCoding(void *a1, const char *a2, ...)
{
  return _[a1 requiresSecureCoding];
}

id objc_msgSend_rereadConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rereadConfiguration:");
}

id objc_msgSend_reschedule(void *a1, const char *a2, ...)
{
  return _[a1 reschedule];
}

id objc_msgSend_resendMotionStateTimer(void *a1, const char *a2, ...)
{
  return _[a1 resendMotionStateTimer];
}

id objc_msgSend_resendTimer(void *a1, const char *a2, ...)
{
  return _[a1 resendTimer];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_reset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset:");
}

id objc_msgSend_resetAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 resetAnalytics];
}

id objc_msgSend_resetAnalyticsCache(void *a1, const char *a2, ...)
{
  return _[a1 resetAnalyticsCache];
}

id objc_msgSend_resetBOMScanIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 resetBOMScanIfNeeded];
}

id objc_msgSend_resetBodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 resetBodyMetrics];
}

id objc_msgSend_resetBytesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetBytesInRange:");
}

id objc_msgSend_resetCardioChangeEstimationActivity_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCardioChangeEstimationActivity:withDelay:");
}

id objc_msgSend_resetClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetClient:");
}

id objc_msgSend_resetClients(void *a1, const char *a2, ...)
{
  return _[a1 resetClients];
}

id objc_msgSend_resetControlPlaneStatus(void *a1, const char *a2, ...)
{
  return _[a1 resetControlPlaneStatus];
}

id objc_msgSend_resetCoreAnalyticsTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetCoreAnalyticsTimer];
}

id objc_msgSend_resetDaemonPartOfCondition(void *a1, const char *a2, ...)
{
  return _[a1 resetDaemonPartOfCondition];
}

id objc_msgSend_resetDailyStats(void *a1, const char *a2, ...)
{
  return _[a1 resetDailyStats];
}

id objc_msgSend_resetInVisitRebasedMslp(void *a1, const char *a2, ...)
{
  return _[a1 resetInVisitRebasedMslp];
}

id objc_msgSend_resetKeychainItem(void *a1, const char *a2, ...)
{
  return _[a1 resetKeychainItem];
}

id objc_msgSend_resetNotificationConsumedForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetNotificationConsumedForIdentifier:");
}

id objc_msgSend_resetRetryCounters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetRetryCounters:");
}

id objc_msgSend_resetStoredCalibrations(void *a1, const char *a2, ...)
{
  return _[a1 resetStoredCalibrations];
}

id objc_msgSend_resetSyncActivity_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncActivity:withDelay:");
}

id objc_msgSend_resetUserProfileForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetUserProfileForKeys:");
}

id objc_msgSend_resetWeeklyRiskModuleComputeTime(void *a1, const char *a2, ...)
{
  return _[a1 resetWeeklyRiskModuleComputeTime];
}

id objc_msgSend_resolveNewScanTypeWithNewContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveNewScanTypeWithNewContext:");
}

id objc_msgSend_restrictedMode(void *a1, const char *a2, ...)
{
  return _[a1 restrictedMode];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume:");
}

id objc_msgSend_resumeAfterPendingStepCountNotifications(void *a1, const char *a2, ...)
{
  return _[a1 resumeAfterPendingStepCountNotifications];
}

id objc_msgSend_resumeEvent_bounce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeEvent_bounce");
}

id objc_msgSend_resumeWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeWorkout:");
}

id objc_msgSend_retireClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retireClient:");
}

id objc_msgSend_retireServiceWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retireServiceWithName:");
}

id objc_msgSend_retrieveBiasInfo(void *a1, const char *a2, ...)
{
  return _[a1 retrieveBiasInfo];
}

id objc_msgSend_retrieveCachedSubmersionState(void *a1, const char *a2, ...)
{
  return _[a1 retrieveCachedSubmersionState];
}

id objc_msgSend_retrieveCachedSurfacePressure(void *a1, const char *a2, ...)
{
  return _[a1 retrieveCachedSurfacePressure];
}

id objc_msgSend_retrieveLastPushedTime(void *a1, const char *a2, ...)
{
  return _[a1 retrieveLastPushedTime];
}

id objc_msgSend_retrieveMeanSeaLevelPressureEstimatorState(void *a1, const char *a2, ...)
{
  return _[a1 retrieveMeanSeaLevelPressureEstimatorState];
}

id objc_msgSend_retrieveSupportedResources_subKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveSupportedResources:subKey:completion:");
}

id objc_msgSend_retrieveSymmetricKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveSymmetricKey:");
}

id objc_msgSend_retrocomputeSession_withHealthKitSample_withRetrocomputeHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:");
}

id objc_msgSend_retrocomputeStatusClients(void *a1, const char *a2, ...)
{
  return _[a1 retrocomputeStatusClients];
}

id objc_msgSend_retryActivityForEncryptionClass_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryActivityForEncryptionClass:reason:");
}

id objc_msgSend_retryHealthKitDeleteSamples(void *a1, const char *a2, ...)
{
  return _[a1 retryHealthKitDeleteSamples];
}

id objc_msgSend_retryTriggerRetrocompute(void *a1, const char *a2, ...)
{
  return _[a1 retryTriggerRetrocompute];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_revertToUnknownTimer(void *a1, const char *a2, ...)
{
  return _[a1 revertToUnknownTimer];
}

id objc_msgSend_roadClass(void *a1, const char *a2, ...)
{
  return _[a1 roadClass];
}

id objc_msgSend_roadID(void *a1, const char *a2, ...)
{
  return _[a1 roadID];
}

id objc_msgSend_rotateArbitraryToTrueNorth(void *a1, const char *a2, ...)
{
  return _[a1 rotateArbitraryToTrueNorth];
}

id objc_msgSend_rotateSecondaryFile(void *a1, const char *a2, ...)
{
  return _[a1 rotateSecondaryFile];
}

id objc_msgSend_rotationRate(void *a1, const char *a2, ...)
{
  return _[a1 rotationRate];
}

id objc_msgSend_routineManager(void *a1, const char *a2, ...)
{
  return _[a1 routineManager];
}

id objc_msgSend_routineMonitor(void *a1, const char *a2, ...)
{
  return _[a1 routineMonitor];
}

id objc_msgSend_rowingModel(void *a1, const char *a2, ...)
{
  return _[a1 rowingModel];
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return _[a1 rssi];
}

id objc_msgSend_sampleShouldBeWrittenToHK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleShouldBeWrittenToHK:");
}

id objc_msgSend_saveBiasInfo(void *a1, const char *a2, ...)
{
  return _[a1 saveBiasInfo];
}

id objc_msgSend_saveCachedSubmersionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCachedSubmersionState:");
}

id objc_msgSend_saveCachedSurfacePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCachedSurfacePressure:");
}

id objc_msgSend_saveCurrentSyncProgress(void *a1, const char *a2, ...)
{
  return _[a1 saveCurrentSyncProgress];
}

id objc_msgSend_saveFeaturesToCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveFeaturesToCache:");
}

id objc_msgSend_saveInVisitRebasedMslpToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveInVisitRebasedMslpToPlist];
}

id objc_msgSend_saveInVisitStateToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveInVisitStateToPlist];
}

id objc_msgSend_saveInputsAndOutputsForSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveInputsAndOutputsForSessionId:");
}

id objc_msgSend_saveLastPushedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveLastPushedTime:");
}

id objc_msgSend_saveMeanSeaLevelPressureArrayToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveMeanSeaLevelPressureArrayToPlist];
}

id objc_msgSend_saveRecentMeanSeaLevelPressureArrayToPlist(void *a1, const char *a2, ...)
{
  return _[a1 saveRecentMeanSeaLevelPressureArrayToPlist];
}

id objc_msgSend_saveRetrocomputedOutputs(void *a1, const char *a2, ...)
{
  return _[a1 saveRetrocomputedOutputs];
}

id objc_msgSend_saveStagingOutputToHealthKit_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveStagingOutputToHealthKit:activity:");
}

id objc_msgSend_savedRecords(void *a1, const char *a2, ...)
{
  return _[a1 savedRecords];
}

id objc_msgSend_savedZones(void *a1, const char *a2, ...)
{
  return _[a1 savedZones];
}

id objc_msgSend_scanDeliveryDelayTimer(void *a1, const char *a2, ...)
{
  return _[a1 scanDeliveryDelayTimer];
}

id objc_msgSend_scanEvents_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanEvents:atTime:");
}

id objc_msgSend_scanForPeripheralsWithServices_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanForPeripheralsWithServices:options:completion:");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scanTimer(void *a1, const char *a2, ...)
{
  return _[a1 scanTimer];
}

id objc_msgSend_scanTypeUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanTypeUpdated:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scdmaCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scdmaCellTowerAtIndex:");
}

id objc_msgSend_scdmaCellTowers(void *a1, const char *a2, ...)
{
  return _[a1 scdmaCellTowers];
}

id objc_msgSend_scdmaCellTowersCount(void *a1, const char *a2, ...)
{
  return _[a1 scdmaCellTowersCount];
}

id objc_msgSend_scenarioTriggerClients(void *a1, const char *a2, ...)
{
  return _[a1 scenarioTriggerClients];
}

id objc_msgSend_scheduleBackgroundTask(void *a1, const char *a2, ...)
{
  return _[a1 scheduleBackgroundTask];
}

id objc_msgSend_scheduleChangeEstimation(void *a1, const char *a2, ...)
{
  return _[a1 scheduleChangeEstimation];
}

id objc_msgSend_scheduleDailyAggregateFeatureCompute(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDailyAggregateFeatureCompute];
}

id objc_msgSend_scheduleDailyResetBOMScan(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDailyResetBOMScan];
}

id objc_msgSend_scheduleDownloadsWithCellularConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDownloadsWithCellularConnectivity];
}

id objc_msgSend_scheduleDownloadsWithWifiConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 scheduleDownloadsWithWifiConnectivity];
}

id objc_msgSend_scheduleEstimate(void *a1, const char *a2, ...)
{
  return _[a1 scheduleEstimate];
}

id objc_msgSend_scheduleInRunLoop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInRunLoop:");
}

id objc_msgSend_scheduleRetrocomputePreprocessing(void *a1, const char *a2, ...)
{
  return _[a1 scheduleRetrocomputePreprocessing];
}

id objc_msgSend_scheduleWeeklyRiskModelCompute(void *a1, const char *a2, ...)
{
  return _[a1 scheduleWeeklyRiskModelCompute];
}

id objc_msgSend_scheduledArrival(void *a1, const char *a2, ...)
{
  return _[a1 scheduledArrival];
}

id objc_msgSend_scheduledDeparture(void *a1, const char *a2, ...)
{
  return _[a1 scheduledDeparture];
}

id objc_msgSend_scheduledLinks(void *a1, const char *a2, ...)
{
  return _[a1 scheduledLinks];
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return _[a1 score];
}

id objc_msgSend_secItemFormatToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secItemFormatToDictionary:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_secondaryDataSize(void *a1, const char *a2, ...)
{
  return _[a1 secondaryDataSize];
}

id objc_msgSend_secondaryFileHandle(void *a1, const char *a2, ...)
{
  return _[a1 secondaryFileHandle];
}

id objc_msgSend_secondaryFileURLs(void *a1, const char *a2, ...)
{
  return _[a1 secondaryFileURLs];
}

id objc_msgSend_secondsFromGMT(void *a1, const char *a2, ...)
{
  return _[a1 secondsFromGMT];
}

id objc_msgSend_secondsFromGMTForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsFromGMTForDate:");
}

id objc_msgSend_sections(void *a1, const char *a2, ...)
{
  return _[a1 sections];
}

id objc_msgSend_sedentaryAlarmData(void *a1, const char *a2, ...)
{
  return _[a1 sedentaryAlarmData];
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return _[a1 seekToEndOfFile];
}

id objc_msgSend_selectModels(void *a1, const char *a2, ...)
{
  return _[a1 selectModels];
}

id objc_msgSend_selectReferenceWithReference_withBaroElevation_betweenStartTime_andEndTime_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectReferenceWithReference:withBaroElevation:betweenStartTime:andEndTime:");
}

id objc_msgSend_semanticModeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 semanticModeIdentifier];
}

id objc_msgSend_sendAliveAgainMessage(void *a1, const char *a2, ...)
{
  return _[a1 sendAliveAgainMessage];
}

id objc_msgSend_sendAllUsageSyncData(void *a1, const char *a2, ...)
{
  return _[a1 sendAllUsageSyncData];
}

id objc_msgSend_sendAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 sendAnalytics];
}

id objc_msgSend_sendAnalyticsBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsBoutMetrics:");
}

id objc_msgSend_sendAnalyticsEventForId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsEventForId:");
}

id objc_msgSend_sendAnalyticsEventWithXpcTaskWaitingTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsEventWithXpcTaskWaitingTime:");
}

id objc_msgSend_sendAnalyticsForAllReadySessions(void *a1, const char *a2, ...)
{
  return _[a1 sendAnalyticsForAllReadySessions];
}

id objc_msgSend_sendAnalyticsSteadinessResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsSteadinessResult:");
}

id objc_msgSend_sendBufferedScanNotifications(void *a1, const char *a2, ...)
{
  return _[a1 sendBufferedScanNotifications];
}

id objc_msgSend_sendCAMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCAMetric:");
}

id objc_msgSend_sendClientRegisterAnalyticsWithCurrentUncertainty_andTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendClientRegisterAnalyticsWithCurrentUncertainty:andTime:");
}

id objc_msgSend_sendCompanionData_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCompanionData:activity:");
}

id objc_msgSend_sendCompanionSyncAnalyticsWithMsgSize_isSuccess_isActivityDeferred_isActivityValid_isWatchPaired_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendCompanionSyncAnalyticsWithMsgSize:isSuccess:isActivityDeferred:isActivityValid:isWatchPaired:");
}

id objc_msgSend_sendCoreAnalyticsEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCoreAnalyticsEvent:");
}

id objc_msgSend_sendData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:metaData:start:end:");
}

id objc_msgSend_sendDistancePercentageCoreAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 sendDistancePercentageCoreAnalytics];
}

id objc_msgSend_sendElevationsFromEstimates_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendElevationsFromEstimates:withCompletionBlock:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendEventID_event_destinationID_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEventID:event:destinationID:options:completion:");
}

id objc_msgSend_sendGPSCoreAnalyticsAndUpdateTime(void *a1, const char *a2, ...)
{
  return _[a1 sendGPSCoreAnalyticsAndUpdateTime];
}

id objc_msgSend_sendGlobalAuthStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGlobalAuthStatus:");
}

id objc_msgSend_sendInVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendInVisit:");
}

id objc_msgSend_sendLocations(void *a1, const char *a2, ...)
{
  return _[a1 sendLocations];
}

id objc_msgSend_sendLocationsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLocationsWithReply:");
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:");
}

id objc_msgSend_sendMessage_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendMessage_type_priority_fireAndForget_encrypt_bypassConnectionCheck_timeout_nonWaking_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:nonWaking:completionHandler:");
}

id objc_msgSend_sendMessage_withReplyClassesSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:withReplyClassesSync:");
}

id objc_msgSend_sendMessageWithMessageType_dataPayload_priority_idsOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithMessageType:dataPayload:priority:idsOptions:");
}

id objc_msgSend_sendMonitorUpdateForDevice_added_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMonitorUpdateForDevice:added:");
}

id objc_msgSend_sendMotionAlarmRequest(void *a1, const char *a2, ...)
{
  return _[a1 sendMotionAlarmRequest];
}

id objc_msgSend_sendMotionState(void *a1, const char *a2, ...)
{
  return _[a1 sendMotionState];
}

id objc_msgSend_sendNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotification:");
}

id objc_msgSend_sendProtobuf_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProtobuf:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendRebaseAnalyticsWithAltitudeError_andUncertainty_andRefUncertainty_andDemAvailable_andWorkout_andReferenceSource_andCorrection_andDistance_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendRebaseAnalyticsWithAltitudeError:andUncertainty:andRefUncertainty:andDemAvailable:andWorkout:andReference Source:andCorrection:andDistance:");
}

id objc_msgSend_sendRequestID_request_destinationID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:destinationID:options:responseHandler:");
}

id objc_msgSend_sendRetroComputeAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 sendRetroComputeAnalytics];
}

id objc_msgSend_sendSimulatedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSimulatedLocation:");
}

id objc_msgSend_sendSimulatedLocationUnavailable(void *a1, const char *a2, ...)
{
  return _[a1 sendSimulatedLocationUnavailable];
}

id objc_msgSend_sendStatusForFences_setBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendStatusForFences:setBefore:");
}

id objc_msgSend_sendSurfacePressureToAOP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSurfacePressureToAOP:");
}

id objc_msgSend_sendTrackAndScheduleNextTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTrackAndScheduleNextTick:");
}

id objc_msgSend_sendTrackFrom_to_location_horrUnc_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTrackFrom:to:location:horrUnc:type:");
}

id objc_msgSend_sendUpdateToRDIfAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendUpdateToRDIfAllowed:");
}

id objc_msgSend_sendVisitExitAnalyticsWithDuration_andRebaseEvent_andUncertaintyAtEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVisitExitAnalyticsWithDuration:andRebaseEvent:andUncertaintyAtEntry:");
}

id objc_msgSend_sendVisitExitWifiImprovementAnalyticsEventWithDuration_uncertaintyAtVisitEntry_uncertaintyAtVisitExit_timeDiffBtwArrivalAndLastRebase_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendVisitExitWifiImprovementAnalyticsEventWithDuration:uncertaintyAtVisitEntry:uncertaintyAtVisitExit:timeDif fBtwArrivalAndLastRebase:");
}

id objc_msgSend_sendVisitsToClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVisitsToClient:");
}

id objc_msgSend_sensorRecorder(void *a1, const char *a2, ...)
{
  return _[a1 sensorRecorder];
}

id objc_msgSend_sentDatabaseChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 sentDatabaseChangesEvent];
}

id objc_msgSend_sentRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 sentRecordZoneChangesEvent];
}

id objc_msgSend_sentRefreshMslpAnalyticsWithAltitudeCorrection_uncertaintyBeforeCurrentRefresh_uncertaintyAfterCurrentRefresh_refreshDuration_xpcWaitingTime_timeDiffBtwRefresh_pressureDelta_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sentRefreshMslpAnalyticsWithAltitudeCorrection:uncertaintyBeforeCurrentRefresh:uncertaintyAfterCurrentRefresh :refreshDuration:xpcWaitingTime:timeDiffBtwRefresh:pressureDelta:");
}

id objc_msgSend_serializeMeta_toData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeMeta:toData:");
}

id objc_msgSend_serialized(void *a1, const char *a2, ...)
{
  return _[a1 serialized];
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return _[a1 serverTrust];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_service_nearbyDevicesChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service:nearbyDevicesChanged:");
}

id objc_msgSend_serviceTypeMask(void *a1, const char *a2, ...)
{
  return _[a1 serviceTypeMask];
}

id objc_msgSend_serviceWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWithIdentifier:completion:");
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _[a1 services];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionAttributes(void *a1, const char *a2, ...)
{
  return _[a1 sessionAttributes];
}

id objc_msgSend_sessionEndPowerLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionEndPowerLog:");
}

id objc_msgSend_sessionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionForClient:");
}

id objc_msgSend_sessionForFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionForFence:");
}

id objc_msgSend_sessionHrRecovery(void *a1, const char *a2, ...)
{
  return _[a1 sessionHrRecovery];
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return _[a1 sessionID];
}

id objc_msgSend_sessionId(void *a1, const char *a2, ...)
{
  return _[a1 sessionId];
}

id objc_msgSend_sessionMetadata(void *a1, const char *a2, ...)
{
  return _[a1 sessionMetadata];
}

id objc_msgSend_sessionStatusReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStatusReport:");
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return _[a1 sessionType];
}

id objc_msgSend_sessionVo2Max(void *a1, const char *a2, ...)
{
  return _[a1 sessionVo2Max];
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAccelSampleRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelSampleRate:");
}

id objc_msgSend_setAccessoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryName:");
}

id objc_msgSend_setAccessoryUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryUUID:");
}

id objc_msgSend_setAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccuracy:");
}

id objc_msgSend_setActionSetName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionSetName:");
}

id objc_msgSend_setActionSetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionSetType:");
}

id objc_msgSend_setActionSetUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionSetUUID:");
}

id objc_msgSend_setActiveAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveAccessory:");
}

id objc_msgSend_setActiveClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveClients:");
}

id objc_msgSend_setActiveDeviceNearbyStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveDeviceNearbyStatus:");
}

id objc_msgSend_setActiveDisplayModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveDisplayModes:");
}

id objc_msgSend_setActiveRequestCleanupTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveRequestCleanupTimer:");
}

id objc_msgSend_setActiveRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveRequests:");
}

id objc_msgSend_setActiveVo2maxOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveVo2maxOverride:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setActivityAsDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityAsDone:");
}

id objc_msgSend_setActivityDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityDuration:");
}

id objc_msgSend_setActivityOverrideMsg_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityOverrideMsg:");
}

id objc_msgSend_setActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityType:");
}

id objc_msgSend_setAdamId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdamId:");
}

id objc_msgSend_setAdaptedNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptedNotifier:");
}

id objc_msgSend_setAdapter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdapter:");
}

id objc_msgSend_setAdvertiseRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertiseRate:");
}

id objc_msgSend_setAdvertiser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertiser:");
}

id objc_msgSend_setAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAge:");
}

id objc_msgSend_setAgeRating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgeRating:");
}

id objc_msgSend_setAirplaneMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirplaneMode:");
}

id objc_msgSend_setAirplaySolo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirplaySolo:");
}

id objc_msgSend_setAlarmId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlarmId:");
}

id objc_msgSend_setAlgorithmVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlgorithmVersion:");
}

id objc_msgSend_setAliveAgainThrottleTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAliveAgainThrottleTimer:");
}

id objc_msgSend_setAllDayHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDayHeartRate:");
}

id objc_msgSend_setAllowNetworkTileLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowNetworkTileLoad:");
}

id objc_msgSend_setAllowStaleData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowStaleData:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAlternateIdentitiesMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateIdentitiesMap:");
}

id objc_msgSend_setAltimeterReleaseTimer(void *a1, const char *a2, ...)
{
  return _[a1 setAltimeterReleaseTimer];
}

id objc_msgSend_setAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltitude:");
}

id objc_msgSend_setAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsManager:");
}

id objc_msgSend_setApHarvestCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApHarvestCount:");
}

id objc_msgSend_setAppBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBundleId:");
}

id objc_msgSend_setApsConnectionMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsConnectionMachServiceName:");
}

id objc_msgSend_setApsMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsMachServiceName:");
}

id objc_msgSend_setArchive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArchive:");
}

id objc_msgSend_setArmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArmed:");
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:");
}

id objc_msgSend_setArray_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:forKey:");
}

id objc_msgSend_setArray_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:forKey:atKeyPath:");
}

id objc_msgSend_setAssociatedTo2GHzWiFi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedTo2GHzWiFi:");
}

id objc_msgSend_setAttitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttitude:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionIdentifier:");
}

id objc_msgSend_setAttributionTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionTimer:");
}

id objc_msgSend_setAuthMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthMask:");
}

id objc_msgSend_setAuthStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthStatus:");
}

id objc_msgSend_setAuthorizationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizationContext:");
}

id objc_msgSend_setAuthorized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorized:");
}

id objc_msgSend_setAverageSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAverageSpeed:");
}

id objc_msgSend_setBackgrounded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgrounded:");
}

id objc_msgSend_setBandclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBandclass:");
}

id objc_msgSend_setBatteryData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryData:");
}

id objc_msgSend_setBatterySaverModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatterySaverModeEnabled:");
}

id objc_msgSend_setBetaBlockerUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBetaBlockerUse:");
}

id objc_msgSend_setBiasInMeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBiasInMeters:");
}

id objc_msgSend_setBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBins:");
}

id objc_msgSend_setBleScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScanRate:");
}

id objc_msgSend_setBodyMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBodyMetrics:");
}

id objc_msgSend_setBomScanEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBomScanEnabled:");
}

id objc_msgSend_setBool_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:atKeyPath:");
}

id objc_msgSend_setBoutClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoutClients:");
}

id objc_msgSend_setBsid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBsid:");
}

id objc_msgSend_setBufferedDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBufferedDevices:");
}

id objc_msgSend_setBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleId:");
}

id objc_msgSend_setBundleIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIds:");
}

id objc_msgSend_setCachedPlaceInferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedPlaceInferences:");
}

id objc_msgSend_setCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCadence:");
}

id objc_msgSend_setCadenceMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCadenceMean:");
}

id objc_msgSend_setCalTrackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalTrackHandler:");
}

id objc_msgSend_setCalibrationTrackCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalibrationTrackCallback:");
}

id objc_msgSend_setCallbackAdapter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbackAdapter:");
}

id objc_msgSend_setCallbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbackHandler:");
}

id objc_msgSend_setCalorieData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalorieData:");
}

id objc_msgSend_setCalorieDataDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalorieDataDeprecated:");
}

id objc_msgSend_setCapabilityChangeClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapabilityChangeClients:");
}

id objc_msgSend_setCdmaCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCdmaCellTowers:");
}

id objc_msgSend_setCdmaEvdoTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCdmaEvdoTowers:");
}

id objc_msgSend_setCellID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellID:");
}

id objc_msgSend_setCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellTowers:");
}

id objc_msgSend_setChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeType:");
}

id objc_msgSend_setChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannel:");
}

id objc_msgSend_setCharacteristicType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristicType:");
}

id objc_msgSend_setChoreaDetectionService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChoreaDetectionService:");
}

id objc_msgSend_setCkp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkp:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClearClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClearClient:");
}

id objc_msgSend_setClientActivityTypeAirborneActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientActivityTypeAirborneActive:");
}

id objc_msgSend_setClientActivityTypeFitnessActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientActivityTypeFitnessActive:");
}

id objc_msgSend_setClientAuthDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientAuthDate:");
}

id objc_msgSend_setClientAuthorization_zoneIdentifier_subIdentityIdentifier_status_correctiveCompensation_mayIncreaseAuth_entity_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "setClientAuthorization:zoneIdentifier:subIdentityIdentifier:status:correctiveCompensation:mayIncreaseAuth:entity:");
}

id objc_msgSend_setClientAuthorizationCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientAuthorizationCache:");
}

id objc_msgSend_setClientBackgroundIndicator_enabled_entity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientBackgroundIndicator:enabled:entity:");
}

id objc_msgSend_setClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientIdentifier:");
}

id objc_msgSend_setClientInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientInterest:");
}

id objc_msgSend_setClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientKey:");
}

id objc_msgSend_setClientKeyToAuthContextMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientKeyToAuthContextMap:");
}

id objc_msgSend_setClientKeyToClientInfoMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientKeyToClientInfoMap:");
}

id objc_msgSend_setClientManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientManager:");
}

id objc_msgSend_setClientMapMatchingActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientMapMatchingActive:");
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientName:");
}

id objc_msgSend_setClientRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientRegistry:");
}

id objc_msgSend_setClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:");
}

id objc_msgSend_setClients_significantLocationChangeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:significantLocationChangeTo:");
}

id objc_msgSend_setClients_significantLocationVisitTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:significantLocationVisitTo:");
}

id objc_msgSend_setClientsAuthorizationMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientsAuthorizationMap:");
}

id objc_msgSend_setClientsInSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientsInSession:");
}

id objc_msgSend_setCloudKitContainerOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitContainerOptions:");
}

id objc_msgSend_setCoarseElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoarseElevation:");
}

id objc_msgSend_setCoarseElevationDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoarseElevationDeprecated:");
}

id objc_msgSend_setCompanionSyncActivityAsDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompanionSyncActivityAsDone:");
}

id objc_msgSend_setConditionLimitExceeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConditionLimitExceeded:");
}

id objc_msgSend_setConditionUnsupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConditionUnsupported:");
}

id objc_msgSend_setConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfidence:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionStatus:");
}

id objc_msgSend_setConnectionUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionUpdateHandler:");
}

id objc_msgSend_setContainerOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerOptions:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setController:");
}

id objc_msgSend_setCorrectiveCompensationMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCorrectiveCompensationMask:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountryCode:");
}

id objc_msgSend_setCourse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCourse:");
}

id objc_msgSend_setCourseAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCourseAccuracy:");
}

id objc_msgSend_setCppObjectPtr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCppObjectPtr:");
}

id objc_msgSend_setCumulativeStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCumulativeStartTime:");
}

id objc_msgSend_setCurrentEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentEstimate:");
}

id objc_msgSend_setCurrentGranularity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentGranularity:");
}

id objc_msgSend_setCurrentLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLatitude:");
}

id objc_msgSend_setCurrentLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLongitude:");
}

id objc_msgSend_setCurrentSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSpeed:");
}

id objc_msgSend_setCurrentState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentState:");
}

id objc_msgSend_setCurrentVisitHorizontalUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentVisitHorizontalUncertainty:");
}

id objc_msgSend_setCurrentVisitLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentVisitLocation:");
}

id objc_msgSend_setCurrentWPState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWPState:");
}

id objc_msgSend_setCurrentWorkoutType_isManualTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWorkoutType:isManualTransition:");
}

id objc_msgSend_setCurrentlyScheduled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlyScheduled:");
}

id objc_msgSend_setDEPRECATEDFingerprints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDEPRECATEDFingerprints:");
}

id objc_msgSend_setDaemonCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemonCondition:");
}

id objc_msgSend_setDaemonEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemonEvent:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setData_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:forKey:atKeyPath:");
}

id objc_msgSend_setDataIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataIdentifier:");
}

id objc_msgSend_setDataPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataPayload:");
}

id objc_msgSend_setDataSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSize:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDeepestDepthForHK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeepestDepthForHK:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDelegateEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateEntityName:");
}

id objc_msgSend_setDeltaDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaDistance:");
}

id objc_msgSend_setDeltaDistanceAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaDistanceAccuracy:");
}

id objc_msgSend_setDeltaElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaElevation:");
}

id objc_msgSend_setDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDepth:");
}

id objc_msgSend_setDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredAccuracy:");
}

id objc_msgSend_setDesiredEnablementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredEnablementState:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDeviceFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFilter:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceMatching:");
}

id objc_msgSend_setDeviceNotificationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceNotificationHandler:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDictionary_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:forKey:atKeyPath:");
}

id objc_msgSend_setDidUpdateFireTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidUpdateFireTime:");
}

id objc_msgSend_setDidWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidWake:");
}

id objc_msgSend_setDimensionInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimensionInt:");
}

id objc_msgSend_setDirectionOfTravelAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectionOfTravelAssistance:");
}

id objc_msgSend_setDirty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirty:");
}

id objc_msgSend_setDisableSystemWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableSystemWaking:");
}

id objc_msgSend_setDisconnectHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectHandler:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistance:");
}

id objc_msgSend_setDistanceGps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceGps:");
}

id objc_msgSend_setDistanceRawPed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceRawPed:");
}

id objc_msgSend_setDominantMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDominantMotionActivity:");
}

id objc_msgSend_setDouble_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDouble:forKey:atKeyPath:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDurationInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurationInSeconds:");
}

id objc_msgSend_setE911Active_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setE911Active:");
}

id objc_msgSend_setEffectiveRadiusMetersIfInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffectiveRadiusMetersIfInstalled:");
}

id objc_msgSend_setElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevation:");
}

id objc_msgSend_setElevationAscended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevationAscended:");
}

id objc_msgSend_setElevationDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevationDeprecated:");
}

id objc_msgSend_setElevationDescended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevationDescended:");
}

id objc_msgSend_setEligibleForCalorimetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForCalorimetry:");
}

id objc_msgSend_setEligibleForDataCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForDataCollection:");
}

id objc_msgSend_setEligibleForHealthKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForHealthKit:");
}

id objc_msgSend_setEmergencyEnablementAssertionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmergencyEnablementAssertionActive:");
}

id objc_msgSend_setEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnd:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setEndowmentNamespaces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndowmentNamespaces:");
}

id objc_msgSend_setEndpointSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndpointSelector:");
}

id objc_msgSend_setEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntity:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorQueue:");
}

id objc_msgSend_setEstExitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstExitTime:");
}

id objc_msgSend_setEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimate:");
}

id objc_msgSend_setEstimatedHRRecoveryParam_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedHRRecoveryParam:");
}

id objc_msgSend_setEstimatedHRResponseParam_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedHRResponseParam:");
}

id objc_msgSend_setEstimatedMeanSeaLevelPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedMeanSeaLevelPressure:");
}

id objc_msgSend_setEstimatedUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedUncertainty:");
}

id objc_msgSend_setEstimatedVo2Max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedVo2Max:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setExerciseMinute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExerciseMinute:");
}

id objc_msgSend_setExitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitState:");
}

id objc_msgSend_setExitVisitTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitVisitTimestamp:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setF01_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setF01:");
}

id objc_msgSend_setFADR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFADR:");
}

id objc_msgSend_setFAggregateRecordsTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFAggregateRecordsTimer:");
}

id objc_msgSend_setFCovariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFCovariance:");
}

id objc_msgSend_setFEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFEndTime:");
}

id objc_msgSend_setFH_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFH:");
}

id objc_msgSend_setFIsRegisteredForTileDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFIsRegisteredForTileDownload:");
}

id objc_msgSend_setFLocationCoordinates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFLocationCoordinates:");
}

id objc_msgSend_setFLocationHorizontalUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFLocationHorizontalUncertainty:");
}

id objc_msgSend_setFNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFNextTrackStartTime:");
}

id objc_msgSend_setFNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFNotification:");
}

id objc_msgSend_setFP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFP:");
}

id objc_msgSend_setFPal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFPal:");
}

id objc_msgSend_setFQ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFQ:");
}

id objc_msgSend_setFSensorRecorderQueryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSensorRecorderQueryTimer:");
}

id objc_msgSend_setFSensorRecorderSubscribeTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSensorRecorderSubscribeTimer:");
}

id objc_msgSend_setFStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFStartTime:");
}

id objc_msgSend_setFState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFState:");
}

id objc_msgSend_setFType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFType:");
}

id objc_msgSend_setFeelsLikeTemperature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeelsLikeTemperature:");
}

id objc_msgSend_setFence(void *a1, const char *a2, ...)
{
  return _[a1 setFence];
}

id objc_msgSend_setFence_forClient_withRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFence:forClient:withRadius:");
}

id objc_msgSend_setFenceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceID:");
}

id objc_msgSend_setFenceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceIdentifier:");
}

id objc_msgSend_setFilteredPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredPressure:");
}

id objc_msgSend_setFilteredVo2Max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredVo2Max:");
}

id objc_msgSend_setFingerprints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerprints:");
}

id objc_msgSend_setFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinished:");
}

id objc_msgSend_setFireInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFireInterval:");
}

id objc_msgSend_setFiredTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFiredTime:");
}

id objc_msgSend_setFirstRefreshAfterVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstRefreshAfterVisit:");
}

id objc_msgSend_setFitnessTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFitnessTracking:");
}

id objc_msgSend_setFitnessTrackingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFitnessTrackingEnabled:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFlipNegativeTravelDirectionRoads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlipNegativeTravelDirectionRoads:");
}

id objc_msgSend_setFloorsAscended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFloorsAscended:");
}

id objc_msgSend_setFloorsDescended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFloorsDescended:");
}

id objc_msgSend_setFormatterBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFormatterBehavior:");
}

id objc_msgSend_setFullSessionTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullSessionTimeout:");
}

id objc_msgSend_setGender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGender:");
}

id objc_msgSend_setGeofenceAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeofenceAtLocation:");
}

id objc_msgSend_setGlobalConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalConfiguration:");
}

id objc_msgSend_setGpsAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsAltitude:");
}

id objc_msgSend_setGpsAssistantHasClients_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsAssistantHasClients:forNotification:");
}

id objc_msgSend_setGpsCourseAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsCourseAccuracy:");
}

id objc_msgSend_setGpsCourseRadians_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsCourseRadians:");
}

id objc_msgSend_setGpsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsSource:");
}

id objc_msgSend_setGpsSpeedAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsSpeedAccuracy:");
}

id objc_msgSend_setGrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGrade:");
}

id objc_msgSend_setGradeMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradeMean:");
}

id objc_msgSend_setGradeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradeType:");
}

id objc_msgSend_setGradeVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradeVariance:");
}

id objc_msgSend_setGradient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradient:");
}

id objc_msgSend_setGroundAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroundAltitude:");
}

id objc_msgSend_setGroundAltitudeUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroundAltitudeUncertainty:");
}

id objc_msgSend_setGymLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGymLocations:");
}

id objc_msgSend_setGyroSampleRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGyroSampleRate:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHardwareType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHardwareType:");
}

id objc_msgSend_setHarvestingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHarvestingEnabled:");
}

id objc_msgSend_setHasChangesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 setHasChangesAvailable];
}

id objc_msgSend_setHasExecutedScheduleFromCellularConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasExecutedScheduleFromCellularConnectivity:");
}

id objc_msgSend_setHasExecutedScheduleFromWifiConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasExecutedScheduleFromWifiConnectivity:");
}

id objc_msgSend_setHasGPS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasGPS:");
}

id objc_msgSend_setHasRegisteredForCellularConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRegisteredForCellularConnectivity:");
}

id objc_msgSend_setHasRegisteredForWifiConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRegisteredForWifiConnectivity:");
}

id objc_msgSend_setHasStrideCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasStrideCal:");
}

id objc_msgSend_setHashFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHashFunction:");
}

id objc_msgSend_setHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeartRate:");
}

id objc_msgSend_setHeightM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeightM:");
}

id objc_msgSend_setHeroAppRankInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeroAppRankInstalled:");
}

id objc_msgSend_setHeroAppRankUnInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeroAppRankUnInstalled:");
}

id objc_msgSend_setHgalCaptureMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHgalCaptureMode:");
}

id objc_msgSend_setHidDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidDevice:");
}

id objc_msgSend_setHintForRegionState_significantRegion_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHintForRegionState:significantRegion:withReply:");
}

id objc_msgSend_setHomeLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeLocations:");
}

id objc_msgSend_setHomeUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeUUID:");
}

id objc_msgSend_setHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalAccuracy:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setHourAmbiguity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHourAmbiguity:");
}

id objc_msgSend_setHr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHr:");
}

id objc_msgSend_setHrCadenceAgreementMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrCadenceAgreementMean:");
}

id objc_msgSend_setHrCadenceAgreementVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrCadenceAgreementVariance:");
}

id objc_msgSend_setHrConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrConfidence:");
}

id objc_msgSend_setHrConfidenceMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrConfidenceMean:");
}

id objc_msgSend_setHrConfidenceVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrConfidenceVariance:");
}

id objc_msgSend_setHrMax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrMax:");
}

id objc_msgSend_setHrMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrMean:");
}

id objc_msgSend_setHrMin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrMin:");
}

id objc_msgSend_setHrTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrTime:");
}

id objc_msgSend_setHrVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrVariance:");
}

id objc_msgSend_setHrmax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrmax:");
}

id objc_msgSend_setHrmin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrmin:");
}

id objc_msgSend_setHronset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHronset:");
}

id objc_msgSend_setHttpRequestHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHttpRequestHeaders:");
}

id objc_msgSend_setICloudManagedAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudManagedAppleID:");
}

id objc_msgSend_setITunesManagedAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setITunesManagedAppleID:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdsOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsOptions:");
}

id objc_msgSend_setIdsService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsService:");
}

id objc_msgSend_setIdsStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsStatus:");
}

id objc_msgSend_setInOutdoorWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInOutdoorWorkout:");
}

id objc_msgSend_setInVisitStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInVisitStatus:");
}

id objc_msgSend_setIncidentalUseMode_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncidentalUseMode:forClient:");
}

id objc_msgSend_setIncludeRegionalApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeRegionalApps:");
}

id objc_msgSend_setInertialSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInertialSamples:");
}

id objc_msgSend_setInputReportHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputReportHandler:");
}

id objc_msgSend_setInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputs:");
}

id objc_msgSend_setInstalledEducationProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledEducationProfile:");
}

id objc_msgSend_setInstalledRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledRegion:");
}

id objc_msgSend_setInt_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInt:forKey:");
}

id objc_msgSend_setInt_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInt:forKey:atKeyPath:");
}

id objc_msgSend_setInterestZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterestZones:");
}

id objc_msgSend_setInternalKeyMigrationComplete(void *a1, const char *a2, ...)
{
  return _[a1 setInternalKeyMigrationComplete];
}

id objc_msgSend_setInterpPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterpPressure:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setIntervalDistributions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalDistributions:");
}

id objc_msgSend_setIntervalTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalTimer:");
}

id objc_msgSend_setInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalid:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActive:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsInDisputedArea_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInDisputedArea:");
}

id objc_msgSend_setIsInitialCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInitialCache:");
}

id objc_msgSend_setIsMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMeasurement:");
}

id objc_msgSend_setIsMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMonitoring:");
}

id objc_msgSend_setIsMotorcycle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMotorcycle:");
}

id objc_msgSend_setIsNearby_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsNearby:");
}

id objc_msgSend_setIsProactiveLocationSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsProactiveLocationSession:");
}

id objc_msgSend_setIsStanding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsStanding:");
}

id objc_msgSend_setIsStroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsStroller:");
}

id objc_msgSend_setIsSubscribedForMotion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSubscribedForMotion:");
}

id objc_msgSend_setJacksonData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJacksonData:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKeychainItemData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeychainItemData:");
}

id objc_msgSend_setKvalue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKvalue:");
}

id objc_msgSend_setKvalueTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKvalueTrack:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLacID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLacID:");
}

id objc_msgSend_setLastCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastCountryCode:");
}

id objc_msgSend_setLastHKUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHKUpdate:");
}

id objc_msgSend_setLastKnownMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastKnownMotionState:");
}

id objc_msgSend_setLastLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLocation:");
}

id objc_msgSend_setLastLocationSettingsEventSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLocationSettingsEventSource:");
}

id objc_msgSend_setLastMonitoringState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMonitoringState:");
}

id objc_msgSend_setLastOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOdometer:");
}

id objc_msgSend_setLastProcessedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastProcessedTime:");
}

id objc_msgSend_setLastScanBufferEmptyDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastScanBufferEmptyDate:");
}

id objc_msgSend_setLastUpdateTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUpdateTime:");
}

id objc_msgSend_setLat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLat:");
}

id objc_msgSend_setLatestData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestData:");
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatitude:");
}

id objc_msgSend_setLaunchReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchReason:");
}

id objc_msgSend_setLedgerForType_domain_monitor_client_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLedgerForType:domain:monitor:client:path:");
}

id objc_msgSend_setLeechClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeechClients:");
}

id objc_msgSend_setLeeching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeeching:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:");
}

id objc_msgSend_setLocManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocManager:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setLocationButtonUseMode_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationButtonUseMode:forClient:");
}

id objc_msgSend_setLocationFingerprints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationFingerprints:");
}

id objc_msgSend_setLocationId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationId:");
}

id objc_msgSend_setLocationPushesActive_forAppBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationPushesActive:forAppBundleIdentifier:completion:");
}

id objc_msgSend_setLocationRestricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationRestricted:");
}

id objc_msgSend_setLocationServicesEnabledStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationServicesEnabledStatus:");
}

id objc_msgSend_setLocationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationType:");
}

id objc_msgSend_setLocationUpdatesIncludeMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationUpdatesIncludeMotionState:");
}

id objc_msgSend_setLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocations:");
}

id objc_msgSend_setLogRequestToFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogRequestToFile:");
}

id objc_msgSend_setLogResponseToFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogResponseToFile:");
}

id objc_msgSend_setLoggingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoggingEnabled:");
}

id objc_msgSend_setLoiType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoiType:");
}

id objc_msgSend_setLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLon:");
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongitude:");
}

id objc_msgSend_setLowConfidenceVisitLeechClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowConfidenceVisitLeechClients:");
}

id objc_msgSend_setLsest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLsest:");
}

id objc_msgSend_setLteCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLteCellTowers:");
}

id objc_msgSend_setMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMac:");
}

id objc_msgSend_setMacID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacID:");
}

id objc_msgSend_setMacModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacModes:");
}

id objc_msgSend_setMachineFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMachineFrequency:");
}

id objc_msgSend_setMacs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacs:");
}

id objc_msgSend_setMacsNotInALSDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacsNotInALSDatabase:");
}

id objc_msgSend_setMake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMake:");
}

id objc_msgSend_setManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManager:");
}

id objc_msgSend_setMapMatchedPositionAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMapMatchedPositionAssistance:");
}

id objc_msgSend_setMarkets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkets:");
}

id objc_msgSend_setMarqueeAppsOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarqueeAppsOnly:");
}

id objc_msgSend_setMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMatching:");
}

id objc_msgSend_setMaxAbsSlope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxAbsSlope:");
}

id objc_msgSend_setMaxConcurrentMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentMessages:");
}

id objc_msgSend_setMaxPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxPressure:");
}

id objc_msgSend_setMcc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMcc:");
}

id objc_msgSend_setMeCardMapItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeCardMapItem:");
}

id objc_msgSend_setMeCardString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeCardString:");
}

id objc_msgSend_setMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMean:");
}

id objc_msgSend_setMeanMaxMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeanMaxMets:");
}

id objc_msgSend_setMeanSeaLevelPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeanSeaLevelPressure:");
}

id objc_msgSend_setMeasurements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeasurements:");
}

id objc_msgSend_setMemoryCacheCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMemoryCacheCountLimit:");
}

id objc_msgSend_setMemoryCacheTotalCostLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMemoryCacheTotalCostLimit:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessage:");
}

id objc_msgSend_setMessageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageType:");
}

id objc_msgSend_setMessagesWaitingForAck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagesWaitingForAck:");
}

id objc_msgSend_setMetSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetSource:");
}

id objc_msgSend_setMeta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeta:");
}

id objc_msgSend_setMetricDimensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetricDimensions:");
}

id objc_msgSend_setMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMets:");
}

id objc_msgSend_setMetsFM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetsFM:");
}

id objc_msgSend_setMetsHR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetsHR:");
}

id objc_msgSend_setMetsWR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetsWR:");
}

id objc_msgSend_setMicroLocationLoiClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMicroLocationLoiClient:");
}

id objc_msgSend_setMigrationVersionNumber(void *a1, const char *a2, ...)
{
  return _[a1 setMigrationVersionNumber];
}

id objc_msgSend_setMinPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinPressure:");
}

id objc_msgSend_setMinimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumEarlyFireProportion:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMirroringDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMirroringDelegate:");
}

id objc_msgSend_setMnc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMnc:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModeIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModeIndicator:");
}

id objc_msgSend_setModeString(void *a1, const char *a2, ...)
{
  return _[a1 setModeString];
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonitoring:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setMostRecentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostRecentLocation:");
}

id objc_msgSend_setMotion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotion:");
}

id objc_msgSend_setMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionActivity:");
}

id objc_msgSend_setMotionAlarmActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionAlarmActive:");
}

id objc_msgSend_setMotionAlarmClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionAlarmClients:");
}

id objc_msgSend_setMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionState:");
}

id objc_msgSend_setMotionVehicleConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionVehicleConnected:");
}

id objc_msgSend_setMotionVehicleConnectedStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionVehicleConnectedStateChanged:");
}

id objc_msgSend_setMountedConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMountedConfidence:");
}

id objc_msgSend_setMountedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMountedState:");
}

id objc_msgSend_setNPairs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNPairs:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNatalieData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNatalieData:");
}

id objc_msgSend_setNatalieFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNatalieFeatures:");
}

id objc_msgSend_setNearbyInfoV2DecryptedFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyInfoV2DecryptedFlags:");
}

id objc_msgSend_setNearbyInfoV2Flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyInfoV2Flags:");
}

id objc_msgSend_setNearbyPairUniqueID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyPairUniqueID:");
}

id objc_msgSend_setNeedCellsTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedCellsTowers:");
}

id objc_msgSend_setNeedsToFetchChanges(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsToFetchChanges];
}

id objc_msgSend_setNextFireDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireDelay:");
}

id objc_msgSend_setNextFireDelay_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireDelay:interval:");
}

id objc_msgSend_setNextFireTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireTime:");
}

id objc_msgSend_setNextFireTime_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireTime:interval:");
}

id objc_msgSend_setNid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNid:");
}

id objc_msgSend_setNotifyOnEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyOnEntry:");
}

id objc_msgSend_setNotifyOnExit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyOnExit:");
}

id objc_msgSend_setNr5GCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNr5GCellTowers:");
}

id objc_msgSend_setNumWorkoutsContrToEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumWorkoutsContrToEstimate:");
}

id objc_msgSend_setNumberOfRebaseBtwRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfRebaseBtwRefresh:");
}

id objc_msgSend_setNumberOfSurroundingCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfSurroundingCells:");
}

id objc_msgSend_setNumberOfSurroundingWifis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfSurroundingWifis:");
}

id objc_msgSend_setNumberOfTrackEndedBtwRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfTrackEndedBtwRefresh:");
}

id objc_msgSend_setNwActivityDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNwActivityDomain:");
}

id objc_msgSend_setNwActivityLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNwActivityLabel:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObjectIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectIdentifier:");
}

id objc_msgSend_setObservedTransitAccessPointsCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObservedTransitAccessPointsCache:");
}

id objc_msgSend_setOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOdometer:");
}

id objc_msgSend_setOdometerTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOdometerTarget:");
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffset:");
}

id objc_msgSend_setOnConditionUpdateCallbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnConditionUpdateCallbackHandler:");
}

id objc_msgSend_setOobKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOobKeys:");
}

id objc_msgSend_setOperationMemoryThresholdBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationMemoryThresholdBytes:");
}

id objc_msgSend_setOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationType:");
}

id objc_msgSend_setOptedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptedIn:");
}

id objc_msgSend_setOption_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOption:forKey:");
}

id objc_msgSend_setOutputDeviceIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputDeviceIDs:");
}

id objc_msgSend_setOverrideAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideAction:");
}

id objc_msgSend_setPace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPace:");
}

id objc_msgSend_setPacebin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPacebin:");
}

id objc_msgSend_setPairedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDevice:");
}

id objc_msgSend_setPairedDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceID:");
}

id objc_msgSend_setPairedDeviceLastNearbyTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceLastNearbyTimestamp:");
}

id objc_msgSend_setPairedDeviceLastSeenTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceLastSeenTimestamp:");
}

id objc_msgSend_setPairedDeviceRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceRegistry:");
}

id objc_msgSend_setPairedModelId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedModelId:");
}

id objc_msgSend_setPal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPal:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPerMessageTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerMessageTimeout:");
}

id objc_msgSend_setPersistenceUnavailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistenceUnavailable:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPersistentStoreDescriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreDescriptions:");
}

id objc_msgSend_setPersistentStoreDictionary_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreDictionary:forClient:");
}

id objc_msgSend_setPnoffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPnoffset:");
}

id objc_msgSend_setPointCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointCount:");
}

id objc_msgSend_setPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPower:");
}

id objc_msgSend_setPowerSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerSource:");
}

id objc_msgSend_setPrecipitationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrecipitationType:");
}

id objc_msgSend_setPrecision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrecision:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicates:");
}

id objc_msgSend_setPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressure:");
}

id objc_msgSend_setPressureMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressureMeasurement:");
}

id objc_msgSend_setPrevLoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrevLoc:");
}

id objc_msgSend_setPreviousCumulativeDeltaIOSTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousCumulativeDeltaIOSTime:");
}

id objc_msgSend_setPrior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrior:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivateMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateMode:");
}

id objc_msgSend_setProductId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductId:");
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperties:");
}

id objc_msgSend_setProtobufAction_forIncomingRequestsOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtobufAction:forIncomingRequestsOfType:");
}

id objc_msgSend_setProtocolVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolVersion:");
}

id objc_msgSend_setProvenance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProvenance:");
}

id objc_msgSend_setProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProvider:");
}

id objc_msgSend_setProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxy:");
}

id objc_msgSend_setQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuality:");
}

id objc_msgSend_setRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadius:");
}

id objc_msgSend_setRadiusMeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadiusMeters:");
}

id objc_msgSend_setRapportStreamingLink_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRapportStreamingLink:");
}

id objc_msgSend_setRat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRat:");
}

id objc_msgSend_setRawCoordinateLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawCoordinateLatitude:");
}

id objc_msgSend_setRawCoordinateLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawCoordinateLongitude:");
}

id objc_msgSend_setRawGradeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawGradeType:");
}

id objc_msgSend_setRawMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawMotionActivity:");
}

id objc_msgSend_setRawSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawSpeed:");
}

id objc_msgSend_setRawSpeedToKValueBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawSpeedToKValueBins:");
}

id objc_msgSend_setReach_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReach:");
}

id objc_msgSend_setReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachability:");
}

id objc_msgSend_setReadyForSubmission(void *a1, const char *a2, ...)
{
  return _[a1 setReadyForSubmission];
}

id objc_msgSend_setRecentVisits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecentVisits:");
}

id objc_msgSend_setRecordId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordId:");
}

id objc_msgSend_setRecordIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordIdentifier:");
}

id objc_msgSend_setRecordingTriggerMap_outputPathBase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordingTriggerMap:outputPathBase:");
}

id objc_msgSend_setRecoverable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoverable:");
}

id objc_msgSend_setReferenceFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceFrame:");
}

id objc_msgSend_setRefinement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefinement:");
}

id objc_msgSend_setRegisteredBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegisteredBlock:");
}

id objc_msgSend_setRegisteredXPCTaskElevationProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegisteredXPCTaskElevationProfile:");
}

id objc_msgSend_setRegisteredXPCTaskMSLP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegisteredXPCTaskMSLP:");
}

id objc_msgSend_setRegularEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegularEntry:");
}

id objc_msgSend_setRelatedModes_atTime_startingWith_andTransitions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedModes:atTime:startingWith:andTransitions:");
}

id objc_msgSend_setRelevance_forInterestZoneWithId_registeredForClientKey_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelevance:forInterestZoneWithId:registeredForClientKey:withReply:");
}

id objc_msgSend_setRemainingBOMScansTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainingBOMScansTo:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setReport_payload_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReport:payload:length:");
}

id objc_msgSend_setReport_reportLength_withIdentifier_forType_error_timeout_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReport:reportLength:withIdentifier:forType:error:timeout:callback:");
}

id objc_msgSend_setRequestReceivedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestReceivedTime:");
}

id objc_msgSend_setRequestStatusAtFirstUserResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestStatusAtFirstUserResponse:");
}

id objc_msgSend_setRequestTransmissionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestTransmissionTime:");
}

id objc_msgSend_setRequestedScanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestedScanType:");
}

id objc_msgSend_setRequiresSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresSecureCoding:");
}

id objc_msgSend_setResendMotionStateTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResendMotionStateTimer:");
}

id objc_msgSend_setResendTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResendTimer:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setRestrictedMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestrictedMode:");
}

id objc_msgSend_setRetrocomputeStatusClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetrocomputeStatusClients:");
}

id objc_msgSend_setRetryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryTimer:");
}

id objc_msgSend_setRevertToUnknownTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRevertToUnknownTimer:");
}

id objc_msgSend_setRotationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotationInterval:");
}

id objc_msgSend_setRoutineMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoutineMonitor:");
}

id objc_msgSend_setRowingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRowingModel:");
}

id objc_msgSend_setScanDeliveryDelayTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanDeliveryDelayTimer:");
}

id objc_msgSend_setScdmaCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScdmaCellTowers:");
}

id objc_msgSend_setScenarioTriggerClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScenarioTriggerClients:");
}

id objc_msgSend_setSchoolLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchoolLocations:");
}

id objc_msgSend_setScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScore:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSecondaryFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryFileHandle:");
}

id objc_msgSend_setSecondaryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryPath:");
}

id objc_msgSend_setSectorid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectorid:");
}

id objc_msgSend_setSedentaryAlarmData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSedentaryAlarmData:");
}

id objc_msgSend_setSedentaryAlarmDataDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSedentaryAlarmDataDeprecated:");
}

id objc_msgSend_setSelectionFeatureValue_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionFeatureValue:value:");
}

id objc_msgSend_setSensorRecorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSensorRecorder:");
}

id objc_msgSend_setSerializer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerializer:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setServiceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceClass:");
}

id objc_msgSend_setServiceMaskOperator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceMaskOperator:");
}

id objc_msgSend_setServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceName:");
}

id objc_msgSend_setServiceReplacementMap_missBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceReplacementMap:missBehavior:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setServiceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceUUID:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setSessionAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionAttributes:");
}

id objc_msgSend_setSessionCatherineData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionCatherineData:");
}

id objc_msgSend_setSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionId:");
}

id objc_msgSend_setSessionMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionMetadata:");
}

id objc_msgSend_setSessionStalenessInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionStalenessInterval:");
}

id objc_msgSend_setSessionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionType:");
}

id objc_msgSend_setSessionVo2Max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionVo2Max:");
}

id objc_msgSend_setSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettings:");
}

id objc_msgSend_setSettingsChangeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettingsChangeHandler:");
}

id objc_msgSend_setSettingsDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettingsDictionary:");
}

id objc_msgSend_setSharedURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedURLCache:");
}

id objc_msgSend_setShouldAddStoreAsynchronously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAddStoreAsynchronously:");
}

id objc_msgSend_setShouldInferMappingModelAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldInferMappingModelAutomatically:");
}

id objc_msgSend_setShouldMigrateStoreAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldMigrateStoreAutomatically:");
}

id objc_msgSend_setSid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSid:");
}

id objc_msgSend_setSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSilo:");
}

id objc_msgSend_setSimulationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimulationEnabled:");
}

id objc_msgSend_setSlope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSlope:");
}

id objc_msgSend_setSmoothedGPSAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothedGPSAltitude:");
}

id objc_msgSend_setSmoothedGPSAltitudeUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothedGPSAltitudeUncertainty:");
}

id objc_msgSend_setSmoothingRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothingRequired:");
}

id objc_msgSend_setSoftwareBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoftwareBuild:");
}

id objc_msgSend_setSoftwareVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoftwareVersion:");
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSource:");
}

id objc_msgSend_setSpanLat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpanLat:");
}

id objc_msgSend_setSpanLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpanLon:");
}

id objc_msgSend_setSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeed:");
}

id objc_msgSend_setSpeedAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedAccuracy:");
}

id objc_msgSend_setSpeedMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedMean:");
}

id objc_msgSend_setSpeedVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedVariance:");
}

id objc_msgSend_setStairClimbingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStairClimbingModel:");
}

id objc_msgSend_setStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStart:");
}

id objc_msgSend_setStartAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartAt:");
}

id objc_msgSend_setStartScanningAwaitingResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartScanningAwaitingResponse:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateDescriptor:");
}

id objc_msgSend_setStateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateHandler:");
}

id objc_msgSend_setStationaryTimeInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStationaryTimeInSeconds:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStatusBarIconForEntityClass_visible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusBarIconForEntityClass:visible:");
}

id objc_msgSend_setStatusInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusInfo:");
}

id objc_msgSend_setSteadinessClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSteadinessClients:");
}

id objc_msgSend_setStepCadenceToStrideLengthBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepCadenceToStrideLengthBins:");
}

id objc_msgSend_setStepCountData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepCountData:");
}

id objc_msgSend_setSteps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSteps:");
}

id objc_msgSend_setStewieSupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStewieSupported:");
}

id objc_msgSend_setStopScanningAwaitingResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStopScanningAwaitingResponse:");
}

id objc_msgSend_setStopTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStopTime:");
}

id objc_msgSend_setStreamingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamingConnection:");
}

id objc_msgSend_setStrideCalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrideCalData:");
}

id objc_msgSend_setStrideCalDataDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrideCalDataDeprecated:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setString_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:forKey:atKeyPath:");
}

id objc_msgSend_setStrokeAmp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeAmp:");
}

id objc_msgSend_setStrokeFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeFrequency:");
}

id objc_msgSend_setStrokePower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokePower:");
}

id objc_msgSend_setSubmersionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubmersionState:");
}

id objc_msgSend_setSumest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSumest:");
}

id objc_msgSend_setSummaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummaries:");
}

id objc_msgSend_setSupervised_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupervised:");
}

id objc_msgSend_setSurfacePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurfacePressure:");
}

id objc_msgSend_setSystemServicesMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemServicesMap:");
}

id objc_msgSend_setTacID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTacID:");
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTag:");
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetQueue:");
}

id objc_msgSend_setTargetUserSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetUserSession:");
}

id objc_msgSend_setTemperature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemperature:");
}

id objc_msgSend_setTemperatureUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemperatureUncertainty:");
}

id objc_msgSend_setThermalLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThermalLevel:");
}

id objc_msgSend_setThermalPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThermalPressure:");
}

id objc_msgSend_setTiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTiles:");
}

id objc_msgSend_setTimeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeEnd:");
}

id objc_msgSend_setTimeEndGpsLocationSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeEndGpsLocationSegment:");
}

id objc_msgSend_setTimeFenceExit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeFenceExit:");
}

id objc_msgSend_setTimeFenceStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeFenceStart:");
}

id objc_msgSend_setTimeStampLastBeepOnMoveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStampLastBeepOnMoveScan:");
}

id objc_msgSend_setTimeStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStart:");
}

id objc_msgSend_setTimeStartGpsLocationSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStartGpsLocationSegment:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutInterval:");
}

id objc_msgSend_setTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutSeconds:");
}

id objc_msgSend_setTimerForGPSOff(void *a1, const char *a2, ...)
{
  return _[a1 setTimerForGPSOff];
}

id objc_msgSend_setTimerForWifiOff(void *a1, const char *a2, ...)
{
  return _[a1 setTimerForWifiOff];
}

id objc_msgSend_setTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimerWithInterval:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTimestampGps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestampGps:");
}

id objc_msgSend_setTimestampLastBOMDailyLimitResetDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestampLastBOMDailyLimitResetDate:");
}

id objc_msgSend_setTotalAdvertisementBuffersAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalAdvertisementBuffersAvailable:");
}

id objc_msgSend_setTouristApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouristApp:");
}

id objc_msgSend_setTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrack:");
}

id objc_msgSend_setTrackRunHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackRunHint:");
}

id objc_msgSend_setTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionAuthor:");
}

id objc_msgSend_setTremorDetectionService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTremorDetectionService:");
}

id objc_msgSend_setTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrigger:");
}

id objc_msgSend_setTriggerLocalizationScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerLocalizationScan:");
}

id objc_msgSend_setTriggerRecordingScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerRecordingScan:");
}

id objc_msgSend_setTripId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTripId:");
}

id objc_msgSend_setTripTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTripTimestamp:");
}

id objc_msgSend_setTropicalSavannaBranchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTropicalSavannaBranchCount:");
}

id objc_msgSend_setTropicalSavannaProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTropicalSavannaProximity:");
}

id objc_msgSend_setTropicalSavannaTreeId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTropicalSavannaTreeId:");
}

id objc_msgSend_setTruthMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTruthMets:");
}

id objc_msgSend_setTruthMetsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTruthMetsSource:");
}

id objc_msgSend_setTunnelBridgeAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTunnelBridgeAssistance:");
}

id objc_msgSend_setTunnelEndPointPositionAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTunnelEndPointPositionAssistance:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURL:");
}

id objc_msgSend_setUnacknowledgedMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnacknowledgedMessages:");
}

id objc_msgSend_setUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUncertainty:");
}

id objc_msgSend_setUncertaintyInMeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUncertaintyInMeters:");
}

id objc_msgSend_setUnderlyingDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingDictionary:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUndoManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUndoManager:");
}

id objc_msgSend_setUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUniverse:");
}

id objc_msgSend_setUpAggregationOnTimer(void *a1, const char *a2, ...)
{
  return _[a1 setUpAggregationOnTimer];
}

id objc_msgSend_setUpClassificationActivityWithDeferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpClassificationActivityWithDeferral:");
}

id objc_msgSend_setUpCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 setUpCloudKit];
}

id objc_msgSend_setUpGPSSubscriptionForSurfaceCal(void *a1, const char *a2, ...)
{
  return _[a1 setUpGPSSubscriptionForSurfaceCal];
}

id objc_msgSend_setUpMobilityCompanionSyncActivity(void *a1, const char *a2, ...)
{
  return _[a1 setUpMobilityCompanionSyncActivity];
}

id objc_msgSend_setUpProcessBoutsActivity(void *a1, const char *a2, ...)
{
  return _[a1 setUpProcessBoutsActivity];
}

id objc_msgSend_setUpSyncActivity(void *a1, const char *a2, ...)
{
  return _[a1 setUpSyncActivity];
}

id objc_msgSend_setUpdateCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateCount:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUpdateStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateStartTime:");
}

id objc_msgSend_setUpdater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdater:");
}

id objc_msgSend_setUpdating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdating:");
}

id objc_msgSend_setUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseCase:");
}

id objc_msgSend_setUseDeviceToDeviceEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseDeviceToDeviceEncryption:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUserHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserHeight:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInitiated:");
}

id objc_msgSend_setUserMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserMets:");
}

id objc_msgSend_setUserMetsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserMetsSource:");
}

id objc_msgSend_setUserProfile_merge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserProfile:merge:");
}

id objc_msgSend_setUserProfileFromCMNatalimeter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserProfileFromCMNatalimeter:");
}

id objc_msgSend_setUserRecordIDName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserRecordIDName:");
}

id objc_msgSend_setValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValid:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forPragmaNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forPragmaNamed:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVariance:");
}

id objc_msgSend_setVectorClocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVectorClocks:");
}

id objc_msgSend_setVehicleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVehicleType:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setVerticalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalAccuracy:");
}

id objc_msgSend_setVerticalSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalSpeed:");
}

id objc_msgSend_setViewInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewInformation:");
}

id objc_msgSend_setViewName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewName:");
}

id objc_msgSend_setViewUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewUUID:");
}

id objc_msgSend_setVisitClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisitClients:");
}

id objc_msgSend_setVisitDoubleTravelDirectionRoadsTwice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisitDoubleTravelDirectionRoadsTwice:");
}

id objc_msgSend_setVo2MaxModelSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2MaxModelSource:");
}

id objc_msgSend_setVo2Mean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2Mean:");
}

id objc_msgSend_setVo2Variance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2Variance:");
}

id objc_msgSend_setVo2max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2max:");
}

id objc_msgSend_setWaterTempCoefficients(void *a1, const char *a2, ...)
{
  return _[a1 setWaterTempCoefficients];
}

id objc_msgSend_setWaterTempEst_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaterTempEst:");
}

id objc_msgSend_setWaterTempUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaterTempUncertainty:");
}

id objc_msgSend_setWeatherEstimateInMeter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeatherEstimateInMeter:");
}

id objc_msgSend_setWeatherPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeatherPressure:");
}

id objc_msgSend_setWeightKG_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeightKG:");
}

id objc_msgSend_setWifi2GHzCriticalState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifi2GHzCriticalState:");
}

id objc_msgSend_setWifiAltitudeScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiAltitudeScale:");
}

id objc_msgSend_setWifiPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiPower:");
}

id objc_msgSend_setWirelessAPs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWirelessAPs:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setWorkLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkLocations:");
}

id objc_msgSend_setWorkingDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkingDirectory:");
}

id objc_msgSend_setWorkoutEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutEvent:");
}

id objc_msgSend_setWorkoutEventDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutEventDeprecated:");
}

id objc_msgSend_setWorkoutMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutMode:");
}

id objc_msgSend_setWorkoutSuggestedStopTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutSuggestedStopTimeout:");
}

id objc_msgSend_setWorkoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutType:");
}

id objc_msgSend_setWriter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWriter:");
}

id objc_msgSend_setXpcActivityCriteriaOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcActivityCriteriaOverrides:");
}

id objc_msgSend_setZoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneIdentifier:");
}

id objc_msgSend_setZoneType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneType:");
}

id objc_msgSend_setZoneid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneid:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _[a1 settings];
}

id objc_msgSend_settingsDictionary(void *a1, const char *a2, ...)
{
  return _[a1 settingsDictionary];
}

id objc_msgSend_settleToTemperatureFromStart_toStop_withCurrent_withDecrement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settleToTemperatureFromStart:toStop:withCurrent:withDecrement:");
}

id objc_msgSend_setupAltimeterReleaseTimer(void *a1, const char *a2, ...)
{
  return _[a1 setupAltimeterReleaseTimer];
}

id objc_msgSend_setupCLNotifiers(void *a1, const char *a2, ...)
{
  return _[a1 setupCLNotifiers];
}

id objc_msgSend_setupDaemonPartOfConditionWithAuthContext_clientKeyPath_universe_identifier_stopMonitoring_callbackHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "setupDaemonPartOfConditionWithAuthContext:clientKeyPath:universe:identifier:stopMonitoring:callbackHandler:");
}

id objc_msgSend_setupDbCleanupActivity(void *a1, const char *a2, ...)
{
  return _[a1 setupDbCleanupActivity];
}

id objc_msgSend_setupDictionary_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDictionary:atKeyPath:");
}

id objc_msgSend_setupListener(void *a1, const char *a2, ...)
{
  return _[a1 setupListener];
}

id objc_msgSend_setupListeners(void *a1, const char *a2, ...)
{
  return _[a1 setupListeners];
}

id objc_msgSend_setupManager(void *a1, const char *a2, ...)
{
  return _[a1 setupManager];
}

id objc_msgSend_setupModuleWriters(void *a1, const char *a2, ...)
{
  return _[a1 setupModuleWriters];
}

id objc_msgSend_setupService(void *a1, const char *a2, ...)
{
  return _[a1 setupService];
}

id objc_msgSend_setupSyncActivity(void *a1, const char *a2, ...)
{
  return _[a1 setupSyncActivity];
}

id objc_msgSend_setupTimers(void *a1, const char *a2, ...)
{
  return _[a1 setupTimers];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedClockManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedClockManager];
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 sharedConfiguration];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInterface(void *a1, const char *a2, ...)
{
  return _[a1 sharedInterface];
}

id objc_msgSend_shiftCoordinate_accuracy_shiftedCoordinate_shiftedAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:");
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _[a1 shortValue];
}

id objc_msgSend_shouldEnableGPSAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnableGPSAtTime:");
}

id objc_msgSend_shouldEnableWifiAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnableWifiAtTime:");
}

id objc_msgSend_shouldFetchLocationsOfInterest(void *a1, const char *a2, ...)
{
  return _[a1 shouldFetchLocationsOfInterest];
}

id objc_msgSend_shouldHoldPowerAssertionForScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHoldPowerAssertionForScan:");
}

id objc_msgSend_shouldKeepLocalDataOnAccountChange(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepLocalDataOnAccountChange];
}

id objc_msgSend_shouldLockoutNilr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldLockoutNilr:");
}

id objc_msgSend_shouldMigrate(void *a1, const char *a2, ...)
{
  return _[a1 shouldMigrate];
}

id objc_msgSend_shouldRunManager(void *a1, const char *a2, ...)
{
  return _[a1 shouldRunManager];
}

id objc_msgSend_shouldStartNewTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldStartNewTrack:");
}

id objc_msgSend_shouldStartSpecialScan(void *a1, const char *a2, ...)
{
  return _[a1 shouldStartSpecialScan];
}

id objc_msgSend_shouldSubmit_calibrationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSubmit:calibrationType:");
}

id objc_msgSend_shouldTriggerFloorTransitionHarvest_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldTriggerFloorTransitionHarvest:atTime:");
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_sid(void *a1, const char *a2, ...)
{
  return _[a1 sid];
}

id objc_msgSend_signalEnvironmentType(void *a1, const char *a2, ...)
{
  return _[a1 signalEnvironmentType];
}

id objc_msgSend_silo(void *a1, const char *a2, ...)
{
  return _[a1 silo];
}

id objc_msgSend_simplifiedLength_threshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simplifiedLength:threshold:");
}

id objc_msgSend_simulateBeaconWithProximityUUID_major_minor_eventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateBeaconWithProximityUUID:major:minor:eventType:");
}

id objc_msgSend_simulateEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateEvent:");
}

id objc_msgSend_simulateFenceWithBundleID_andFenceID_eventType_atLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateFenceWithBundleID:andFenceID:eventType:atLocation:");
}

id objc_msgSend_simulateMotionSensorDataForType_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateMotionSensorDataForType:payload:");
}

id objc_msgSend_simulateSignificantLocationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateSignificantLocationChange:");
}

id objc_msgSend_simulateTriggerWithDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateTriggerWithDelay:");
}

id objc_msgSend_simulateTriggerWithDelay_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateTriggerWithDelay:forMode:");
}

id objc_msgSend_simulateVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateVisit:");
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_sizeOfType(void *a1, const char *a2, ...)
{
  return _[a1 sizeOfType];
}

id objc_msgSend_skipUpdatingRegulatoryDomain(void *a1, const char *a2, ...)
{
  return _[a1 skipUpdatingRegulatoryDomain];
}

id objc_msgSend_slope(void *a1, const char *a2, ...)
{
  return _[a1 slope];
}

id objc_msgSend_snapLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapLocation:withReply:");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _[a1 source];
}

id objc_msgSend_sourceAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 sourceAccuracy];
}

id objc_msgSend_sourceId(void *a1, const char *a2, ...)
{
  return _[a1 sourceId];
}

id objc_msgSend_sourceInformation(void *a1, const char *a2, ...)
{
  return _[a1 sourceInformation];
}

id objc_msgSend_sourceUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceUpdated:");
}

id objc_msgSend_southEastLatitude(void *a1, const char *a2, ...)
{
  return _[a1 southEastLatitude];
}

id objc_msgSend_southEastLongitude(void *a1, const char *a2, ...)
{
  return _[a1 southEastLongitude];
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return _[a1 speed];
}

id objc_msgSend_speedCurrent(void *a1, const char *a2, ...)
{
  return _[a1 speedCurrent];
}

id objc_msgSend_speedInstant(void *a1, const char *a2, ...)
{
  return _[a1 speedInstant];
}

id objc_msgSend_speedLB(void *a1, const char *a2, ...)
{
  return _[a1 speedLB];
}

id objc_msgSend_speedLimit(void *a1, const char *a2, ...)
{
  return _[a1 speedLimit];
}

id objc_msgSend_speedLimitIsMPH(void *a1, const char *a2, ...)
{
  return _[a1 speedLimitIsMPH];
}

id objc_msgSend_speedMean(void *a1, const char *a2, ...)
{
  return _[a1 speedMean];
}

id objc_msgSend_speedUB(void *a1, const char *a2, ...)
{
  return _[a1 speedUB];
}

id objc_msgSend_speedVariance(void *a1, const char *a2, ...)
{
  return _[a1 speedVariance];
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return _[a1 ssid];
}

id objc_msgSend_stableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stableIdentifier];
}

id objc_msgSend_stairClimbingModel(void *a1, const char *a2, ...)
{
  return _[a1 stairClimbingModel];
}

id objc_msgSend_stalenessTime(void *a1, const char *a2, ...)
{
  return _[a1 stalenessTime];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_start_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start:");
}

id objc_msgSend_startAdvertising_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAdvertising:");
}

id objc_msgSend_startAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 startAggressiveScan];
}

id objc_msgSend_startAt(void *a1, const char *a2, ...)
{
  return _[a1 startAt];
}

id objc_msgSend_startAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAt:");
}

id objc_msgSend_startBTFindingScan(void *a1, const char *a2, ...)
{
  return _[a1 startBTFindingScan];
}

id objc_msgSend_startBackgroundInertialOdometryUpdatesForClient_withIdentifier_usingReferenceFrame_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBackgroundInertialOdometryUpdatesForClient:withIdentifier:usingReferenceFrame:");
}

id objc_msgSend_startBuffering(void *a1, const char *a2, ...)
{
  return _[a1 startBuffering];
}

id objc_msgSend_startCoexFriendlyAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 startCoexFriendlyAggressiveScan];
}

id objc_msgSend_startConnectionlessScanningWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConnectionlessScanningWithData:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDem(void *a1, const char *a2, ...)
{
  return _[a1 startDem];
}

id objc_msgSend_startElevationSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startElevationSpectatorUpdates];
}

id objc_msgSend_startElevationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startElevationUpdates];
}

id objc_msgSend_startFactoryGYTT(void *a1, const char *a2, ...)
{
  return _[a1 startFactoryGYTT];
}

id objc_msgSend_startGeoFenceWithRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startGeoFenceWithRadius:");
}

id objc_msgSend_startGpsOdometerSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startGpsOdometerSpectatorUpdates];
}

id objc_msgSend_startGpsOdometerUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startGpsOdometerUpdates];
}

id objc_msgSend_startHKCollector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startHKCollector:");
}

id objc_msgSend_startHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 startHawkeyeLowEnergyScan];
}

id objc_msgSend_startJunction(void *a1, const char *a2, ...)
{
  return _[a1 startJunction];
}

id objc_msgSend_startLeechingLocation(void *a1, const char *a2, ...)
{
  return _[a1 startLeechingLocation];
}

id objc_msgSend_startLeechingLowConfidenceVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingLowConfidenceVisitsForClient:");
}

id objc_msgSend_startLeechingLowConfidenceVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingLowConfidenceVisitsWithHandler:");
}

id objc_msgSend_startLeechingVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingVisitsForClient:");
}

id objc_msgSend_startLeechingVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingVisitsWithHandler:");
}

id objc_msgSend_startLocationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startLocationUpdates];
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 startMonitoring];
}

id objc_msgSend_startMonitoringAvengerAdvertisementsForClient_clientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringAvengerAdvertisementsForClient:clientName:");
}

id objc_msgSend_startMonitoringCapabilityChangeForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringCapabilityChangeForClient:");
}

id objc_msgSend_startMonitoringEmergencyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringEmergencyState:");
}

id objc_msgSend_startMonitoringForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringForRegion:");
}

id objc_msgSend_startMonitoringPlaceInferencesForCache(void *a1, const char *a2, ...)
{
  return _[a1 startMonitoringPlaceInferencesForCache];
}

id objc_msgSend_startMonitoringPlaceInferencesWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringPlaceInferencesWithOptions:handler:");
}

id objc_msgSend_startMonitoringScenarioTriggerOfType_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringScenarioTriggerOfType:forClient:");
}

id objc_msgSend_startMonitoringScenarioTriggerOfType_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringScenarioTriggerOfType:withHandler:");
}

id objc_msgSend_startMonitoringTransitStateForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringTransitStateForClient:");
}

id objc_msgSend_startMonitoringVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringVisitsForClient:");
}

id objc_msgSend_startMonitoringVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringVisitsWithHandler:");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startScan(void *a1, const char *a2, ...)
{
  return _[a1 startScan];
}

id objc_msgSend_startScanForBeaconTypes_updateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanForBeaconTypes:updateHandler:");
}

id objc_msgSend_startScanningAwaitingResponse(void *a1, const char *a2, ...)
{
  return _[a1 startScanningAwaitingResponse];
}

id objc_msgSend_startScanningWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningWithOptions:");
}

id objc_msgSend_startScanningWithUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningWithUseCase:");
}

id objc_msgSend_startScanningWithUseCase_isScanUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningWithUseCase:isScanUpgrade:");
}

id objc_msgSend_startSession(void *a1, const char *a2, ...)
{
  return _[a1 startSession];
}

id objc_msgSend_startSessionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionForClient:");
}

id objc_msgSend_startSessionForClient_sequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionForClient:sequenceNumber:");
}

id objc_msgSend_startSessionForClient_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionForClient:withIdentifier:");
}

id objc_msgSend_startSessionMetricsWithTime_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionMetricsWithTime:session:");
}

id objc_msgSend_startSubmersionPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 startSubmersionPowerAssertion];
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _[a1 startTime];
}

id objc_msgSend_startTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTrack:");
}

id objc_msgSend_startTrackingZone_forStates_transitionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTrackingZone:forStates:transitionHandler:");
}

id objc_msgSend_startUpdates(void *a1, const char *a2, ...)
{
  return _[a1 startUpdates];
}

id objc_msgSend_startUpdatesforAnalyzer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdatesforAnalyzer:");
}

id objc_msgSend_startUpdatingLocation(void *a1, const char *a2, ...)
{
  return _[a1 startUpdatingLocation];
}

id objc_msgSend_startVisitMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 startVisitMonitoring];
}

id objc_msgSend_startWatchAdvertisementBufferScan(void *a1, const char *a2, ...)
{
  return _[a1 startWatchAdvertisementBufferScan];
}

id objc_msgSend_startWsbClient(void *a1, const char *a2, ...)
{
  return _[a1 startWsbClient];
}

id objc_msgSend_startedAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 startedAggressiveDiscoveryScan];
}

id objc_msgSend_startedBTFindingDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 startedBTFindingDiscoveryScan];
}

id objc_msgSend_startedHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 startedHawkeyeLowEnergyScan];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateFromDepth_forceSubmersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateFromDepth:forceSubmersion:");
}

id objc_msgSend_stateHandler(void *a1, const char *a2, ...)
{
  return _[a1 stateHandler];
}

id objc_msgSend_stateSerialization(void *a1, const char *a2, ...)
{
  return _[a1 stateSerialization];
}

id objc_msgSend_stateUpdateEvent(void *a1, const char *a2, ...)
{
  return _[a1 stateUpdateEvent];
}

id objc_msgSend_staticFlag(void *a1, const char *a2, ...)
{
  return _[a1 staticFlag];
}

id objc_msgSend_stationaryTimeInSeconds(void *a1, const char *a2, ...)
{
  return _[a1 stationaryTimeInSeconds];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _[a1 statusFlags];
}

id objc_msgSend_statusInfo(void *a1, const char *a2, ...)
{
  return _[a1 statusInfo];
}

id objc_msgSend_steadinessClients(void *a1, const char *a2, ...)
{
  return _[a1 steadinessClients];
}

id objc_msgSend_steadyStateHR(void *a1, const char *a2, ...)
{
  return _[a1 steadyStateHR];
}

id objc_msgSend_stepCadenceCurrent(void *a1, const char *a2, ...)
{
  return _[a1 stepCadenceCurrent];
}

id objc_msgSend_stepCount(void *a1, const char *a2, ...)
{
  return _[a1 stepCount];
}

id objc_msgSend_stepCountData(void *a1, const char *a2, ...)
{
  return _[a1 stepCountData];
}

id objc_msgSend_stepCountElevationNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepCountElevationNotification:");
}

id objc_msgSend_stepCountGPS(void *a1, const char *a2, ...)
{
  return _[a1 stepCountGPS];
}

id objc_msgSend_stepLength(void *a1, const char *a2, ...)
{
  return _[a1 stepLength];
}

id objc_msgSend_steps(void *a1, const char *a2, ...)
{
  return _[a1 steps];
}

id objc_msgSend_stepsInWindow(void *a1, const char *a2, ...)
{
  return _[a1 stepsInWindow];
}

id objc_msgSend_stewieSupported(void *a1, const char *a2, ...)
{
  return _[a1 stewieSupported];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return _[a1 stopAdvertising];
}

id objc_msgSend_stopAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 stopAggressiveScan];
}

id objc_msgSend_stopBTFindingScan(void *a1, const char *a2, ...)
{
  return _[a1 stopBTFindingScan];
}

id objc_msgSend_stopBackgroundInertialOdometryUpdatesForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopBackgroundInertialOdometryUpdatesForClient:");
}

id objc_msgSend_stopCircularZoneMonitoringForClient_withZoneId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopCircularZoneMonitoringForClient:withZoneId:");
}

id objc_msgSend_stopCoexFriendlyAggressiveScan(void *a1, const char *a2, ...)
{
  return _[a1 stopCoexFriendlyAggressiveScan];
}

id objc_msgSend_stopConnectionlessScanningWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopConnectionlessScanningWithData:");
}

id objc_msgSend_stopDem(void *a1, const char *a2, ...)
{
  return _[a1 stopDem];
}

id objc_msgSend_stopElevationSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopElevationSpectatorUpdates];
}

id objc_msgSend_stopElevationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopElevationUpdates];
}

id objc_msgSend_stopFrom(void *a1, const char *a2, ...)
{
  return _[a1 stopFrom];
}

id objc_msgSend_stopGeoFence(void *a1, const char *a2, ...)
{
  return _[a1 stopGeoFence];
}

id objc_msgSend_stopGpsOdometerSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopGpsOdometerSpectatorUpdates];
}

id objc_msgSend_stopGpsOdometerUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopGpsOdometerUpdates];
}

id objc_msgSend_stopHKCollector(void *a1, const char *a2, ...)
{
  return _[a1 stopHKCollector];
}

id objc_msgSend_stopID(void *a1, const char *a2, ...)
{
  return _[a1 stopID];
}

id objc_msgSend_stopLeechingLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopLeechingLocation];
}

id objc_msgSend_stopLeechingLowConfidenceVisits(void *a1, const char *a2, ...)
{
  return _[a1 stopLeechingLowConfidenceVisits];
}

id objc_msgSend_stopLeechingLowConfidenceVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingLowConfidenceVisitsForClient:");
}

id objc_msgSend_stopLeechingVisits(void *a1, const char *a2, ...)
{
  return _[a1 stopLeechingVisits];
}

id objc_msgSend_stopLeechingVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingVisitsForClient:");
}

id objc_msgSend_stopListeningForForScheduledTileDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopListeningForForScheduledTileDownload:");
}

id objc_msgSend_stopLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopLocation];
}

id objc_msgSend_stopLocationUpdates(void *a1, const char *a2, ...)
{
  return _[a1 stopLocationUpdates];
}

id objc_msgSend_stopLogging(void *a1, const char *a2, ...)
{
  return _[a1 stopLogging];
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoring];
}

id objc_msgSend_stopMonitoringAllConditions(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoringAllConditions];
}

id objc_msgSend_stopMonitoringAvengerAdvertisementsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringAvengerAdvertisementsForClient:");
}

id objc_msgSend_stopMonitoringCapabilityChangeForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringCapabilityChangeForClient:");
}

id objc_msgSend_stopMonitoringEmergencyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringEmergencyState:");
}

id objc_msgSend_stopMonitoringForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringForClient:");
}

id objc_msgSend_stopMonitoringForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringForRegion:");
}

id objc_msgSend_stopMonitoringHomeKitAccessoryForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringHomeKitAccessoryForClient:");
}

id objc_msgSend_stopMonitoringHomeKitSceneForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringHomeKitSceneForClient:");
}

id objc_msgSend_stopMonitoringNowPlayingForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringNowPlayingForClient:");
}

id objc_msgSend_stopMonitoringPlaceInferences(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoringPlaceInferences];
}

id objc_msgSend_stopMonitoringScenarioTriggerOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringScenarioTriggerOfType:");
}

id objc_msgSend_stopMonitoringScenarioTriggerOfType_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringScenarioTriggerOfType:forClient:");
}

id objc_msgSend_stopMonitoringTransitStateForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringTransitStateForClient:");
}

id objc_msgSend_stopMonitoringVisits(void *a1, const char *a2, ...)
{
  return _[a1 stopMonitoringVisits];
}

id objc_msgSend_stopMonitoringVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringVisitsForClient:");
}

id objc_msgSend_stopMotionAlarm(void *a1, const char *a2, ...)
{
  return _[a1 stopMotionAlarm];
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return _[a1 stopScan];
}

id objc_msgSend_stopScanning(void *a1, const char *a2, ...)
{
  return _[a1 stopScanning];
}

id objc_msgSend_stopScanningAwaitingResponse(void *a1, const char *a2, ...)
{
  return _[a1 stopScanningAwaitingResponse];
}

id objc_msgSend_stopScanningForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopScanningForType:");
}

id objc_msgSend_stopSyncing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSyncing:");
}

id objc_msgSend_stopTime(void *a1, const char *a2, ...)
{
  return _[a1 stopTime];
}

id objc_msgSend_stopTo(void *a1, const char *a2, ...)
{
  return _[a1 stopTo];
}

id objc_msgSend_stopTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrack:");
}

id objc_msgSend_stopTrackingZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrackingZone:");
}

id objc_msgSend_stopTrackingZones(void *a1, const char *a2, ...)
{
  return _[a1 stopTrackingZones];
}

id objc_msgSend_stopUpdatingLocation(void *a1, const char *a2, ...)
{
  return _[a1 stopUpdatingLocation];
}

id objc_msgSend_stopWatchAdvertisementBufferScan(void *a1, const char *a2, ...)
{
  return _[a1 stopWatchAdvertisementBufferScan];
}

id objc_msgSend_stoppedAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 stoppedAggressiveDiscoveryScan];
}

id objc_msgSend_stoppedBTFindingDiscoveryScan(void *a1, const char *a2, ...)
{
  return _[a1 stoppedBTFindingDiscoveryScan];
}

id objc_msgSend_stoppedHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _[a1 stoppedHawkeyeLowEnergyScan];
}

id objc_msgSend_storeFrontIdentifierPromise(void *a1, const char *a2, ...)
{
  return _[a1 storeFrontIdentifierPromise];
}

id objc_msgSend_storeLastAWDTimestamps(void *a1, const char *a2, ...)
{
  return _[a1 storeLastAWDTimestamps];
}

id objc_msgSend_storeWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeWithDictionary:");
}

id objc_msgSend_streamingConnection(void *a1, const char *a2, ...)
{
  return _[a1 streamingConnection];
}

id objc_msgSend_strideCalData(void *a1, const char *a2, ...)
{
  return _[a1 strideCalData];
}

id objc_msgSend_strideCalibrationDatabase_didInsertEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideCalibrationDatabase:didInsertEntry:");
}

id objc_msgSend_strideCalibratorSetSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideCalibratorSetSession:");
}

id objc_msgSend_strideLengthForStepCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideLengthForStepCadence:");
}

id objc_msgSend_strideLengthFromStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideLengthFromStartDate:endDate:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingSymlinksInPath];
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_subAdministrativeArea(void *a1, const char *a2, ...)
{
  return _[a1 subAdministrativeArea];
}

id objc_msgSend_subIdentityId(void *a1, const char *a2, ...)
{
  return _[a1 subIdentityId];
}

id objc_msgSend_subIdentityIdWithType(void *a1, const char *a2, ...)
{
  return _[a1 subIdentityIdWithType];
}

id objc_msgSend_subIdentityType(void *a1, const char *a2, ...)
{
  return _[a1 subIdentityType];
}

id objc_msgSend_subLocality(void *a1, const char *a2, ...)
{
  return _[a1 subLocality];
}

id objc_msgSend_subThoroughfare(void *a1, const char *a2, ...)
{
  return _[a1 subThoroughfare];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submersionMeasurementUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submersionMeasurementUpdate:");
}

id objc_msgSend_submersionState(void *a1, const char *a2, ...)
{
  return _[a1 submersionState];
}

id objc_msgSend_submersionStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 submersionStateMachine];
}

id objc_msgSend_submersionStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submersionStateUpdate:");
}

id objc_msgSend_submitAWDMetric(void *a1, const char *a2, ...)
{
  return _[a1 submitAWDMetric];
}

id objc_msgSend_submitBOMMetricsBoot(void *a1, const char *a2, ...)
{
  return _[a1 submitBOMMetricsBoot];
}

id objc_msgSend_submitBOMMetricsScansCompleted_andTimeSinceLastDisable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitBOMMetricsScansCompleted:andTimeSinceLastDisable:");
}

id objc_msgSend_submitBufferEmptyAnalyticsCounts_numNOApplePosh_numNONonApplePosh_numWildAppleType18_numWildApplePosh_numWildNonApplePosh_totalNearOwnerAdv_totalWildAdv_timeSinceLastBufferEmpty_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "submitBufferEmptyAnalyticsCounts:numNOApplePosh:numNONonApplePosh:numWildAppleType18:numWildApplePosh:numWild NonApplePosh:totalNearOwnerAdv:totalWildAdv:timeSinceLastBufferEmpty:");
}

id objc_msgSend_submitClientRequestsEvent_client_scanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitClientRequestsEvent:client:scanType:");
}

id objc_msgSend_submitEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEvent:");
}

id objc_msgSend_submitFalseDetectionMetricsWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitFalseDetectionMetricsWithType:");
}

id objc_msgSend_submitIntervalMetricsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitIntervalMetricsForEvent:");
}

id objc_msgSend_submitLatencyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 submitLatencyMetrics];
}

id objc_msgSend_submitMetricsIfPossible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitMetricsIfPossible:");
}

id objc_msgSend_submitModeMetricsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitModeMetricsForEvent:");
}

id objc_msgSend_submitPercentageMetricsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitPercentageMetricsForEvent:");
}

id objc_msgSend_submitScanTypeChangeEvent_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitScanTypeChangeEvent:type:");
}

id objc_msgSend_subpathsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subpathsAtPath:");
}

id objc_msgSend_subscribeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeOn:");
}

id objc_msgSend_subscription(void *a1, const char *a2, ...)
{
  return _[a1 subscription];
}

id objc_msgSend_subscriptionType(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionType];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_summaries(void *a1, const char *a2, ...)
{
  return _[a1 summaries];
}

id objc_msgSend_summariesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summariesAtIndex:");
}

id objc_msgSend_summariesCount(void *a1, const char *a2, ...)
{
  return _[a1 summariesCount];
}

id objc_msgSend_supervised(void *a1, const char *a2, ...)
{
  return _[a1 supervised];
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeviceToDeviceEncryption];
}

id objc_msgSend_surfacePressure(void *a1, const char *a2, ...)
{
  return _[a1 surfacePressure];
}

id objc_msgSend_surroundingWifiBands(void *a1, const char *a2, ...)
{
  return _[a1 surroundingWifiBands];
}

id objc_msgSend_surroundingWifiBandsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "surroundingWifiBandsAtIndex:");
}

id objc_msgSend_surroundingWifiBandsCount(void *a1, const char *a2, ...)
{
  return _[a1 surroundingWifiBandsCount];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _[a1 suspend];
}

id objc_msgSend_swimWorkoutInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "swimWorkoutInstance:");
}

id objc_msgSend_sync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sync:");
}

id objc_msgSend_syncCoordinatorWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncCoordinatorWithServiceName:");
}

id objc_msgSend_syncDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 syncDidComplete];
}

id objc_msgSend_syncKey(void *a1, const char *a2, ...)
{
  return _[a1 syncKey];
}

id objc_msgSend_syncRestriction(void *a1, const char *a2, ...)
{
  return _[a1 syncRestriction];
}

id objc_msgSend_syncSessionType(void *a1, const char *a2, ...)
{
  return _[a1 syncSessionType];
}

id objc_msgSend_syncgetActiveCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActiveCall:");
}

id objc_msgSend_syncgetActiveGnssBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActiveGnssBands:");
}

id objc_msgSend_syncgetActiveTechs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActiveTechs:");
}

id objc_msgSend_syncgetActivityOverride(void *a1, const char *a2, ...)
{
  return _[a1 syncgetActivityOverride];
}

id objc_msgSend_syncgetAddFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAddFence:");
}

id objc_msgSend_syncgetAddProximityZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAddProximityZone:");
}

id objc_msgSend_syncgetAirplaneMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAirplaneMode:");
}

id objc_msgSend_syncgetAltitude_rel_undulation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAltitude:rel:undulation:");
}

id objc_msgSend_syncgetAppAvailabilityForLocation_radius_searchContext_availabilityList_includeRegionalApps_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "syncgetAppAvailabilityForLocation:radius:searchContext:availabilityList:includeRegionalApps:");
}

id objc_msgSend_syncgetApplyArchivedAuthorizationDecisionsAndDie_unlessTokenMatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetApplyArchivedAuthorizationDecisionsAndDie:unlessTokenMatches:");
}

id objc_msgSend_syncgetArchivedAuthorizationDecisions(void *a1, const char *a2, ...)
{
  return _[a1 syncgetArchivedAuthorizationDecisions];
}

id objc_msgSend_syncgetAssociatedNetwork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAssociatedNetwork:");
}

id objc_msgSend_syncgetAuthorizationContextIfClientIsNonZonal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAuthorizationContextIfClientIsNonZonal:");
}

id objc_msgSend_syncgetBestMatchLocation_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetBestMatchLocation:forCell:");
}

id objc_msgSend_syncgetBiasFit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetBiasFit:");
}

id objc_msgSend_syncgetCanBundle_performFenceOperationFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCanBundle:performFenceOperationFor:");
}

id objc_msgSend_syncgetClientEffectiveRegistrationResultWithTransientAwareness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetClientEffectiveRegistrationResultWithTransientAwareness:");
}

id objc_msgSend_syncgetControlPlaneStatusReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetControlPlaneStatusReport:");
}

id objc_msgSend_syncgetCopyClients(void *a1, const char *a2, ...)
{
  return _[a1 syncgetCopyClients];
}

id objc_msgSend_syncgetCopyRawSpeedToKValueBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetCopyRawSpeedToKValueBins];
}

id objc_msgSend_syncgetCopyStepCadenceToStrideLengthBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetCopyStepCadenceToStrideLengthBins];
}

id objc_msgSend_syncgetDataAvailability(void *a1, const char *a2, ...)
{
  return _[a1 syncgetDataAvailability];
}

id objc_msgSend_syncgetDbUUID(void *a1, const char *a2, ...)
{
  return _[a1 syncgetDbUUID];
}

id objc_msgSend_syncgetDeleteTileFile_atPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDeleteTileFile:atPath:");
}

id objc_msgSend_syncgetDeviceUnlockedSinceFirstBoot(void *a1, const char *a2, ...)
{
  return _[a1 syncgetDeviceUnlockedSinceFirstBoot];
}

id objc_msgSend_syncgetDoSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDoSync:");
}

id objc_msgSend_syncgetEnabled(void *a1, const char *a2, ...)
{
  return _[a1 syncgetEnabled];
}

id objc_msgSend_syncgetFences_forBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFences:forBundle:");
}

id objc_msgSend_syncgetFences_forBundle_onBehalfOf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFences:forBundle:onBehalfOf:");
}

id objc_msgSend_syncgetFences_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFences:forKey:");
}

id objc_msgSend_syncgetFetchColdStorageConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 syncgetFetchColdStorageConfiguration];
}

id objc_msgSend_syncgetForegroundApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetForegroundApp:");
}

id objc_msgSend_syncgetHasLingerClients(void *a1, const char *a2, ...)
{
  return _[a1 syncgetHasLingerClients];
}

id objc_msgSend_syncgetHasMonitoredFences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetHasMonitoredFences:");
}

id objc_msgSend_syncgetHasMonitoredRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetHasMonitoredRegions:");
}

id objc_msgSend_syncgetIconState(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIconState];
}

id objc_msgSend_syncgetInsertWithBias_variance_temperature_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetInsertWithBias:variance:temperature:timestamp:");
}

id objc_msgSend_syncgetIsApplicationInstalledLocally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsApplicationInstalledLocally:");
}

id objc_msgSend_syncgetIsRegisteredOnCell(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsRegisteredOnCell];
}

id objc_msgSend_syncgetIsSleeping(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsSleeping];
}

id objc_msgSend_syncgetIsStrideCalibrationConvergedMedianForSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsStrideCalibrationConvergedMedianForSpeed:");
}

id objc_msgSend_syncgetIsTimerArmed(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsTimerArmed];
}

id objc_msgSend_syncgetIsTracking(void *a1, const char *a2, ...)
{
  return _[a1 syncgetIsTracking];
}

id objc_msgSend_syncgetLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetLocation:");
}

id objc_msgSend_syncgetLocationClientKeys(void *a1, const char *a2, ...)
{
  return _[a1 syncgetLocationClientKeys];
}

id objc_msgSend_syncgetLocationPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetLocationPrivate:");
}

id objc_msgSend_syncgetMicroLocationInternalVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetMicroLocationInternalVersion:");
}

id objc_msgSend_syncgetMonitoredRegions_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetMonitoredRegions:forClient:");
}

id objc_msgSend_syncgetName(void *a1, const char *a2, ...)
{
  return _[a1 syncgetName];
}

id objc_msgSend_syncgetNonFactoryRoundCount(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNonFactoryRoundCount];
}

id objc_msgSend_syncgetNonSystemLocationClientKey(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNonSystemLocationClientKey];
}

id objc_msgSend_syncgetNonSystemLocationClientKeys(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNonSystemLocationClientKeys];
}

id objc_msgSend_syncgetNumTemperatures(void *a1, const char *a2, ...)
{
  return _[a1 syncgetNumTemperatures];
}

id objc_msgSend_syncgetQueryExerciseMinuteDataSince_records_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryExerciseMinuteDataSince:records:");
}

id objc_msgSend_syncgetQueryLocationsForCells_useCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryLocationsForCells:useCache:");
}

id objc_msgSend_syncgetQueryNatalieDataSince_records_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryNatalieDataSince:records:");
}

id objc_msgSend_syncgetQueryNearbys_forFenceKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryNearbys:forFenceKeys:");
}

id objc_msgSend_syncgetQueryPedometerDataSince_withResponseArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryPedometerDataSince:withResponseArray:");
}

id objc_msgSend_syncgetQueryStartTime_andStopTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryStartTime:andStopTime:");
}

id objc_msgSend_syncgetRawSpeedToKValueDefaultBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetRawSpeedToKValueDefaultBins];
}

id objc_msgSend_syncgetReachability(void *a1, const char *a2, ...)
{
  return _[a1 syncgetReachability];
}

id objc_msgSend_syncgetReferenceTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetReferenceTime:");
}

id objc_msgSend_syncgetRefreshCellMonitor(void *a1, const char *a2, ...)
{
  return _[a1 syncgetRefreshCellMonitor];
}

id objc_msgSend_syncgetRegisterPowerKeepAlive_client_dbgMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRegisterPowerKeepAlive:client:dbgMessage:");
}

id objc_msgSend_syncgetRegistrationResultToAuthorizationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRegistrationResultToAuthorizationStatus:");
}

id objc_msgSend_syncgetRemoveFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRemoveFence:");
}

id objc_msgSend_syncgetRemoveProximityZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRemoveProximityZone:");
}

id objc_msgSend_syncgetResultReady_ForAnalyzer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetResultReady:ForAnalyzer:");
}

id objc_msgSend_syncgetScanResult(void *a1, const char *a2, ...)
{
  return _[a1 syncgetScanResult];
}

id objc_msgSend_syncgetSedentaryAlarmData_since_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetSedentaryAlarmData:since:");
}

id objc_msgSend_syncgetServingCells_addNeighborCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetServingCells:addNeighborCells:");
}

id objc_msgSend_syncgetSetLocationServicesEnabledStatically_withEventSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetSetLocationServicesEnabledStatically:withEventSource:");
}

id objc_msgSend_syncgetStartScanWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartScanWithParameters:");
}

id objc_msgSend_syncgetStartScanWithType_lowPriority_lowLatency_passive_requester_channels_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartScanWithType:lowPriority:lowLatency:passive:requester:channels:");
}

id objc_msgSend_syncgetStartScanWithType_lowPriority_passive_requester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartScanWithType:lowPriority:passive:requester:");
}

id objc_msgSend_syncgetStartTimerForClient_andOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartTimerForClient:andOptions:");
}

id objc_msgSend_syncgetStartTracking(void *a1, const char *a2, ...)
{
  return _[a1 syncgetStartTracking];
}

id objc_msgSend_syncgetStatusBarIconForEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStatusBarIconForEntityClass:");
}

id objc_msgSend_syncgetStepCadenceToStrideLengthDefaultBins(void *a1, const char *a2, ...)
{
  return _[a1 syncgetStepCadenceToStrideLengthDefaultBins];
}

id objc_msgSend_syncgetStopTimerForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStopTimerForClient:");
}

id objc_msgSend_syncgetStopTracking(void *a1, const char *a2, ...)
{
  return _[a1 syncgetStopTracking];
}

id objc_msgSend_syncgetSupportsMiniCalibration(void *a1, const char *a2, ...)
{
  return _[a1 syncgetSupportsMiniCalibration];
}

id objc_msgSend_syncgetTileFilePath_latitude_longitude_isFileAccessible_isTileNotExistingOnServer_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:");
}

id objc_msgSend_syncgetTransitMacAddressesAmong_nearLatitude_longitude_resultMacAddresses_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetTransitMacAddressesAmong:nearLatitude:longitude:resultMacAddresses:");
}

id objc_msgSend_syncgetUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 syncgetUserProfile];
}

id objc_msgSend_syncgetUserProfileInternal(void *a1, const char *a2, ...)
{
  return _[a1 syncgetUserProfileInternal];
}

id objc_msgSend_syncgetWipeDatabase(void *a1, const char *a2, ...)
{
  return _[a1 syncgetWipeDatabase];
}

id objc_msgSend_syncgetZaxisStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetZaxisStats:");
}

id objc_msgSend_syncget_prepareSessionEndForSessionType_atEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncget_prepareSessionEndForSessionType:atEndTime:");
}

id objc_msgSend_syncgetadvertiseSelfAsBeaconForRegion_power_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetadvertiseSelfAsBeaconForRegion:power:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_systemCoexImpact_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemCoexImpact:toState:");
}

id objc_msgSend_systemConnectivity_isConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemConnectivity:isConnected:");
}

id objc_msgSend_systemMetricHeartbeat(void *a1, const char *a2, ...)
{
  return _[a1 systemMetricHeartbeat];
}

id objc_msgSend_systemServicesMap(void *a1, const char *a2, ...)
{
  return _[a1 systemServicesMap];
}

id objc_msgSend_systemWaking_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemWaking:atTime:");
}

id objc_msgSend_systemWillSleep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemWillSleep:");
}

id objc_msgSend_tacID(void *a1, const char *a2, ...)
{
  return _[a1 tacID];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_takeAccuracyEnablementAssertionForClient_withDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeAccuracyEnablementAssertionForClient:withDesiredAccuracy:");
}

id objc_msgSend_takeAssertion(void *a1, const char *a2, ...)
{
  return _[a1 takeAssertion];
}

id objc_msgSend_takeInUseAssertionForClientKey_reason_assertionLevel_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeInUseAssertionForClientKey:reason:assertionLevel:withReply:");
}

id objc_msgSend_takePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 takePowerAssertion];
}

id objc_msgSend_targetPressure(void *a1, const char *a2, ...)
{
  return _[a1 targetPressure];
}

id objc_msgSend_targetWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetWithPid:");
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 taskIdentifier];
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return _[a1 taskState];
}

id objc_msgSend_tearDownLocationAuthPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownLocationAuthPrompt:");
}

id objc_msgSend_teardownCLNotifiers(void *a1, const char *a2, ...)
{
  return _[a1 teardownCLNotifiers];
}

id objc_msgSend_teardownClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownClient:");
}

id objc_msgSend_teardownListeners(void *a1, const char *a2, ...)
{
  return _[a1 teardownListeners];
}

id objc_msgSend_teardownManager(void *a1, const char *a2, ...)
{
  return _[a1 teardownManager];
}

id objc_msgSend_teardownService(void *a1, const char *a2, ...)
{
  return _[a1 teardownService];
}

id objc_msgSend_teardownTimers(void *a1, const char *a2, ...)
{
  return _[a1 teardownTimers];
}

id objc_msgSend_temperature(void *a1, const char *a2, ...)
{
  return _[a1 temperature];
}

id objc_msgSend_temperatureUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 temperatureUncertainty];
}

id objc_msgSend_terrainElevation(void *a1, const char *a2, ...)
{
  return _[a1 terrainElevation];
}

id objc_msgSend_testMode(void *a1, const char *a2, ...)
{
  return _[a1 testMode];
}

id objc_msgSend_thermalLevel(void *a1, const char *a2, ...)
{
  return _[a1 thermalLevel];
}

id objc_msgSend_thermalPressure(void *a1, const char *a2, ...)
{
  return _[a1 thermalPressure];
}

id objc_msgSend_thoroughfare(void *a1, const char *a2, ...)
{
  return _[a1 thoroughfare];
}

id objc_msgSend_thresholdBoundsForElevation_andAccuracy_upperBound_lowerBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thresholdBoundsForElevation:andAccuracy:upperBound:lowerBound:");
}

id objc_msgSend_thresholdUpdated_initialized_above_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thresholdUpdated:initialized:above:");
}

id objc_msgSend_tick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tick:");
}

id objc_msgSend_tickleArrow(void *a1, const char *a2, ...)
{
  return _[a1 tickleArrow];
}

id objc_msgSend_tileSetStyle(void *a1, const char *a2, ...)
{
  return _[a1 tileSetStyle];
}

id objc_msgSend_tileType(void *a1, const char *a2, ...)
{
  return _[a1 tileType];
}

id objc_msgSend_tileX(void *a1, const char *a2, ...)
{
  return _[a1 tileX];
}

id objc_msgSend_tileY(void *a1, const char *a2, ...)
{
  return _[a1 tileY];
}

id objc_msgSend_tiles(void *a1, const char *a2, ...)
{
  return _[a1 tiles];
}

id objc_msgSend_tilesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tilesAtIndex:");
}

id objc_msgSend_tilesCount(void *a1, const char *a2, ...)
{
  return _[a1 tilesCount];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeBetweenHKUpdates(void *a1, const char *a2, ...)
{
  return _[a1 timeBetweenHKUpdates];
}

id objc_msgSend_timeEnd(void *a1, const char *a2, ...)
{
  return _[a1 timeEnd];
}

id objc_msgSend_timeEndGpsLocationSegment(void *a1, const char *a2, ...)
{
  return _[a1 timeEndGpsLocationSegment];
}

id objc_msgSend_timeFenceExit(void *a1, const char *a2, ...)
{
  return _[a1 timeFenceExit];
}

id objc_msgSend_timeFenceStart(void *a1, const char *a2, ...)
{
  return _[a1 timeFenceStart];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeRange(void *a1, const char *a2, ...)
{
  return _[a1 timeRange];
}

id objc_msgSend_timeStart(void *a1, const char *a2, ...)
{
  return _[a1 timeStart];
}

id objc_msgSend_timeStartGpsLocationSegment(void *a1, const char *a2, ...)
{
  return _[a1 timeStartGpsLocationSegment];
}

id objc_msgSend_timeToActiveGiveup(void *a1, const char *a2, ...)
{
  return _[a1 timeToActiveGiveup];
}

id objc_msgSend_timeToRequestCheapActiveLocation(void *a1, const char *a2, ...)
{
  return _[a1 timeToRequestCheapActiveLocation];
}

id objc_msgSend_timeToUnknown(void *a1, const char *a2, ...)
{
  return _[a1 timeToUnknown];
}

id objc_msgSend_timeUserGetCloseToVisitLocation(void *a1, const char *a2, ...)
{
  return _[a1 timeUserGetCloseToVisitLocation];
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timeZoneWithAbbreviation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneWithAbbreviation:");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _[a1 timer];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_timestampGps(void *a1, const char *a2, ...)
{
  return _[a1 timestampGps];
}

id objc_msgSend_timestampOfLastBOMDailyLimitResetDate(void *a1, const char *a2, ...)
{
  return _[a1 timestampOfLastBOMDailyLimitResetDate];
}

id objc_msgSend_timestampOfLastBeepOnMoveScanDate(void *a1, const char *a2, ...)
{
  return _[a1 timestampOfLastBeepOnMoveScanDate];
}

id objc_msgSend_toCLEEDRequestType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toCLEEDRequestType:");
}

id objc_msgSend_toNSDictionary(void *a1, const char *a2, ...)
{
  return _[a1 toNSDictionary];
}

id objc_msgSend_toggleIntervalTimer(void *a1, const char *a2, ...)
{
  return _[a1 toggleIntervalTimer];
}

id objc_msgSend_toggleLocationUpdates_inFitnessSession_inAirborneSession_emergencyEnablementAssertionActive_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "toggleLocationUpdates:inFitnessSession:inAirborneSession:emergencyEnablementAssertionActive:");
}

id objc_msgSend_toggleManagerBySettingFlag_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleManagerBySettingFlag:toState:");
}

id objc_msgSend_toggleSession(void *a1, const char *a2, ...)
{
  return _[a1 toggleSession];
}

id objc_msgSend_toggleUpdates(void *a1, const char *a2, ...)
{
  return _[a1 toggleUpdates];
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_topHeight(void *a1, const char *a2, ...)
{
  return _[a1 topHeight];
}

id objc_msgSend_totalAttributionCount(void *a1, const char *a2, ...)
{
  return _[a1 totalAttributionCount];
}

id objc_msgSend_totalCountIncludingAllSubArchives(void *a1, const char *a2, ...)
{
  return _[a1 totalCountIncludingAllSubArchives];
}

id objc_msgSend_totalDistanceFused(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceFused];
}

id objc_msgSend_totalDistanceOdometer(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceOdometer];
}

id objc_msgSend_totalDistanceStepCount(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceStepCount];
}

id objc_msgSend_totalDistanceStepCountMobility(void *a1, const char *a2, ...)
{
  return _[a1 totalDistanceStepCountMobility];
}

id objc_msgSend_totalSecondaryPointsUnderAllSubArchives(void *a1, const char *a2, ...)
{
  return _[a1 totalSecondaryPointsUnderAllSubArchives];
}

id objc_msgSend_totalStepCount(void *a1, const char *a2, ...)
{
  return _[a1 totalStepCount];
}

id objc_msgSend_touristApp(void *a1, const char *a2, ...)
{
  return _[a1 touristApp];
}

id objc_msgSend_track(void *a1, const char *a2, ...)
{
  return _[a1 track];
}

id objc_msgSend_trackedTransportType(void *a1, const char *a2, ...)
{
  return _[a1 trackedTransportType];
}

id objc_msgSend_transientAwareRegistrationResult(void *a1, const char *a2, ...)
{
  return _[a1 transientAwareRegistrationResult];
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return _[a1 transportType];
}

id objc_msgSend_travelDirection(void *a1, const char *a2, ...)
{
  return _[a1 travelDirection];
}

id objc_msgSend_travelTime(void *a1, const char *a2, ...)
{
  return _[a1 travelTime];
}

id objc_msgSend_tremorDetectionService(void *a1, const char *a2, ...)
{
  return _[a1 tremorDetectionService];
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _[a1 trigger];
}

id objc_msgSend_trigger_metaData_start_end_response_resolution_isNearFall_isFallSubmissionAllowed_isNearFallSubmissionAllowed_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "trigger:metaData:start:end:response:resolution:isNearFall:isFallSubmissionAllowed:isNearFallSubmissionAllowed:");
}

id objc_msgSend_triggerAnalyticsCollect(void *a1, const char *a2, ...)
{
  return _[a1 triggerAnalyticsCollect];
}

id objc_msgSend_triggerClearAppClipAuthorizationIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 triggerClearAppClipAuthorizationIfNecessary];
}

id objc_msgSend_triggerMetricHeartbeatNotification(void *a1, const char *a2, ...)
{
  return _[a1 triggerMetricHeartbeatNotification];
}

id objc_msgSend_triggerRetrocomputeWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerRetrocomputeWithReply:");
}

id objc_msgSend_triggerWorkoutLocationEventForTesting_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWorkoutLocationEventForTesting:withReply:");
}

id objc_msgSend_tripId(void *a1, const char *a2, ...)
{
  return _[a1 tripId];
}

id objc_msgSend_tripTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 tripTimestamp];
}

id objc_msgSend_tropicalSavannaBranchCount(void *a1, const char *a2, ...)
{
  return _[a1 tropicalSavannaBranchCount];
}

id objc_msgSend_tropicalSavannaProximity(void *a1, const char *a2, ...)
{
  return _[a1 tropicalSavannaProximity];
}

id objc_msgSend_tropicalSavannaTreeId(void *a1, const char *a2, ...)
{
  return _[a1 tropicalSavannaTreeId];
}

id objc_msgSend_trustedTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 trustedTimestamp];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeSource(void *a1, const char *a2, ...)
{
  return _[a1 typeSource];
}

id objc_msgSend_uarfcn(void *a1, const char *a2, ...)
{
  return _[a1 uarfcn];
}

id objc_msgSend_unacknowledgedMessages(void *a1, const char *a2, ...)
{
  return _[a1 unacknowledgedMessages];
}

id objc_msgSend_unarchivedArrayOfObjectsOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedArrayOfObjectsOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uncertainty(void *a1, const char *a2, ...)
{
  return _[a1 uncertainty];
}

id objc_msgSend_uncertaintyInMeters(void *a1, const char *a2, ...)
{
  return _[a1 uncertaintyInMeters];
}

id objc_msgSend_underlyingDictionary(void *a1, const char *a2, ...)
{
  return _[a1 underlyingDictionary];
}

id objc_msgSend_underlyingQueue(void *a1, const char *a2, ...)
{
  return _[a1 underlyingQueue];
}

id objc_msgSend_uninstallCurrentFence(void *a1, const char *a2, ...)
{
  return _[a1 uninstallCurrentFence];
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIDOverride];
}

id objc_msgSend_universe(void *a1, const char *a2, ...)
{
  return _[a1 universe];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unregister_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregister:forNotification:");
}

id objc_msgSend_unregisterAlarm_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterAlarm:withReply:");
}

id objc_msgSend_unregisterAllDeviceChanges(void *a1, const char *a2, ...)
{
  return _[a1 unregisterAllDeviceChanges];
}

id objc_msgSend_unregisterAllLocationNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterAllLocationNotifications];
}

id objc_msgSend_unregisterAllZoneChanges(void *a1, const char *a2, ...)
{
  return _[a1 unregisterAllZoneChanges];
}

id objc_msgSend_unregisterClient_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:forNotification:");
}

id objc_msgSend_unregisterClient_systemClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:systemClient:");
}

id objc_msgSend_unregisterForAlgorithmSources(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForAlgorithmSources];
}

id objc_msgSend_unregisterForAppMonitorNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForAppMonitorNotification];
}

id objc_msgSend_unregisterForAvengerScanner(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForAvengerScanner];
}

id objc_msgSend_unregisterForCyclingWorkoutDistanceUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForCyclingWorkoutDistanceUpdates:");
}

id objc_msgSend_unregisterForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForData:");
}

id objc_msgSend_unregisterForDeviceMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDeviceMatching:");
}

id objc_msgSend_unregisterForHKNanoLifestylePrivacyPreferencesChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForHKNanoLifestylePrivacyPreferencesChangedNotification];
}

id objc_msgSend_unregisterForMiloPredictionEventUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMiloPredictionEventUpdates:");
}

id objc_msgSend_unregisterForMiloServiceEventUpdatesForClient_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMiloServiceEventUpdatesForClient:withToken:");
}

id objc_msgSend_unregisterForMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMobilityBoutMetrics:");
}

id objc_msgSend_unregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForNotifications];
}

id objc_msgSend_unregisterForRetrocomputeStatusUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForRetrocomputeStatusUpdates:");
}

id objc_msgSend_unregisterForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForUpdates:");
}

id objc_msgSend_unregisterForVehicleStateNotification(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForVehicleStateNotification];
}

id objc_msgSend_unregisterForWeatherUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForWeatherUpdates:");
}

id objc_msgSend_unregisterForWorkoutSessionUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForWorkoutSessionUpdates:");
}

id objc_msgSend_unregisterForZoneChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForZoneChanges:");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_updateAdjacentBin_withAlpha_valueOut_nativeBin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAdjacentBin:withAlpha:valueOut:nativeBin:");
}

id objc_msgSend_updateAnalyticsWithAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAnalyticsWithAltitude:");
}

id objc_msgSend_updateAuthorizationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthorizationContext:");
}

id objc_msgSend_updateBiasUncertaintyWithAbsSigElevation_withCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBiasUncertaintyWithAbsSigElevation:withCompanion:");
}

id objc_msgSend_updateBiasUncertaintyWithPressure_andTime_andLat_andLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBiasUncertaintyWithPressure:andTime:andLat:andLon:");
}

id objc_msgSend_updateBinsWithTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBinsWithTrack:");
}

id objc_msgSend_updateBinsWithValueOut_valueIn_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBinsWithValueOut:valueIn:alpha:");
}

id objc_msgSend_updateBypassParameters(void *a1, const char *a2, ...)
{
  return _[a1 updateBypassParameters];
}

id objc_msgSend_updateCalibrationBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCalibrationBins:");
}

id objc_msgSend_updateCallbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCallbackHandler:");
}

id objc_msgSend_updateClientEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientEvent:");
}

id objc_msgSend_updateClientEvent_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientEvent:forIdentifier:");
}

id objc_msgSend_updateClientsSubmersionMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsSubmersionMeasurement:");
}

id objc_msgSend_updateClientsSubmersionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsSubmersionState:");
}

id objc_msgSend_updateClientsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsWithDictionary:");
}

id objc_msgSend_updateCompanionConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCompanionConnected:");
}

id objc_msgSend_updateComputeDemFlatnessMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateComputeDemFlatnessMetric:");
}

id objc_msgSend_updateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContext:");
}

id objc_msgSend_updateCount(void *a1, const char *a2, ...)
{
  return _[a1 updateCount];
}

id objc_msgSend_updateCurrentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCurrentLocation:");
}

id objc_msgSend_updateCyclingWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCyclingWorkout:");
}

id objc_msgSend_updateDaemonEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDaemonEvent:");
}

id objc_msgSend_updateDaemonEvent_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDaemonEvent:forIdentifier:");
}

id objc_msgSend_updateDesiredFireTimeToHour_minute_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDesiredFireTimeToHour:minute:second:");
}

id objc_msgSend_updateDeviceConnectionState_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDeviceConnectionState:state:");
}

id objc_msgSend_updateDiagnosticMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDiagnosticMask:");
}

id objc_msgSend_updateDurationInformationForCA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDurationInformationForCA:");
}

id objc_msgSend_updateElevationBiasBetweenStartTime_andEndTime_andNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateElevationBiasBetweenStartTime:andEndTime:andNextTrackStartTime:");
}

id objc_msgSend_updateElevationBiasUnderDEMOrLatchedHighBetweenStartTime_andEndTime_andNextTrackStartTime_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateElevationBiasUnderDEMOrLatchedHighBetweenStartTime:andEndTime:andNextTrackStartTime:");
}

id objc_msgSend_updateEndpoint_withKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEndpoint:withKey:");
}

id objc_msgSend_updateEntryDistanceAndPace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEntryDistanceAndPace:");
}

id objc_msgSend_updateEstimatedWeatherWithCumulativeAscendingDelta_andDescendingDelta_andIosTimestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEstimatedWeatherWithCumulativeAscendingDelta:andDescendingDelta:andIosTimestamp:");
}

id objc_msgSend_updateEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEvent:");
}

id objc_msgSend_updateEvent_bounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEvent_bounce:");
}

id objc_msgSend_updateGpsLocationBuffer_gpsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGpsLocationBuffer:gpsSource:");
}

id objc_msgSend_updateGpsOdometerBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGpsOdometerBuffer:");
}

id objc_msgSend_updateGradient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGradient:");
}

id objc_msgSend_updateHandler(void *a1, const char *a2, ...)
{
  return _[a1 updateHandler];
}

id objc_msgSend_updateHistoricalMslpArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHistoricalMslpArray:");
}

id objc_msgSend_updateHistoricalMslpArray_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHistoricalMslpArray:from:");
}

id objc_msgSend_updateICloudManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 updateICloudManagedAppleID];
}

id objc_msgSend_updateIDSStatus(void *a1, const char *a2, ...)
{
  return _[a1 updateIDSStatus];
}

id objc_msgSend_updateIDSStatusAndNotify(void *a1, const char *a2, ...)
{
  return _[a1 updateIDSStatusAndNotify];
}

id objc_msgSend_updateITunesManagedAppleID(void *a1, const char *a2, ...)
{
  return _[a1 updateITunesManagedAppleID];
}

id objc_msgSend_updateInitializedThresholdsWithAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInitializedThresholdsWithAltitude:");
}

id objc_msgSend_updateInputSystemFields_inputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInputSystemFields:inputRecord:");
}

id objc_msgSend_updateInstalledEducationProfile(void *a1, const char *a2, ...)
{
  return _[a1 updateInstalledEducationProfile];
}

id objc_msgSend_updateLastSampleInMeanSeaLevelPressureArray(void *a1, const char *a2, ...)
{
  return _[a1 updateLastSampleInMeanSeaLevelPressureArray];
}

id objc_msgSend_updateLocationAuthorization(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationAuthorization];
}

id objc_msgSend_updateLocationDictionaryCachedCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationDictionaryCachedCapabilities];
}

id objc_msgSend_updateLocationUnknown(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationUnknown];
}

id objc_msgSend_updateLocationsOfInterestFetchTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 updateLocationsOfInterestFetchTimestamp];
}

id objc_msgSend_updateLoiInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLoiInfo:");
}

id objc_msgSend_updateMetadata(void *a1, const char *a2, ...)
{
  return _[a1 updateMetadata];
}

id objc_msgSend_updateMonitoringState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMonitoringState:");
}

id objc_msgSend_updateNativeBin_withAlpha_valueOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNativeBin:withAlpha:valueOut:");
}

id objc_msgSend_updateNearbyStatusWithCompanionLinkDevice_didConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNearbyStatusWithCompanionLinkDevice:didConnect:");
}

id objc_msgSend_updateNearbyStatusWithDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNearbyStatusWithDevices:");
}

id objc_msgSend_updateNextFireTime(void *a1, const char *a2, ...)
{
  return _[a1 updateNextFireTime];
}

id objc_msgSend_updateOutputSystemFields_outputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOutputSystemFields:outputRecord:");
}

id objc_msgSend_updatePedometerBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePedometerBuffer:");
}

id objc_msgSend_updatePhoneWorkoutElevationSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePhoneWorkoutElevationSubscription:");
}

id objc_msgSend_updatePillButtonChoiceForOutstandingPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePillButtonChoiceForOutstandingPrompt:");
}

id objc_msgSend_updatePressureUncertaintyWithPressure_andTime_andLat_andLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePressureUncertaintyWithPressure:andTime:andLat:andLon:");
}

id objc_msgSend_updatePromptedLatitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePromptedLatitude:longitude:");
}

id objc_msgSend_updateRegulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _[a1 updateRegulatoryDomainEstimates];
}

id objc_msgSend_updateRelatedModesTo_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRelatedModesTo:atTime:");
}

id objc_msgSend_updateRelativePressureCalibration(void *a1, const char *a2, ...)
{
  return _[a1 updateRelativePressureCalibration];
}

id objc_msgSend_updateRequestWithMediaItemList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRequestWithMediaItemList:");
}

id objc_msgSend_updateRetrocomputeHistory_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeHistory:withResult:");
}

id objc_msgSend_updateRetrocomputeHistoryPostProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeHistoryPostProcessing:");
}

id objc_msgSend_updateRetrocomputeLastTimestampToHealthKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeLastTimestampToHealthKit:");
}

id objc_msgSend_updateRetrocomputeStatus_unavailableReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeStatus:unavailableReasons:");
}

id objc_msgSend_updateSensorRecorderSubscription(void *a1, const char *a2, ...)
{
  return _[a1 updateSensorRecorderSubscription];
}

id objc_msgSend_updateSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSession:");
}

id objc_msgSend_updateStartTime(void *a1, const char *a2, ...)
{
  return _[a1 updateStartTime];
}

id objc_msgSend_updateStatusBarLabel(void *a1, const char *a2, ...)
{
  return _[a1 updateStatusBarLabel];
}

id objc_msgSend_updateStrideLengthRun(void *a1, const char *a2, ...)
{
  return _[a1 updateStrideLengthRun];
}

id objc_msgSend_updateStrideLengthStepCadenceWalk(void *a1, const char *a2, ...)
{
  return _[a1 updateStrideLengthStepCadenceWalk];
}

id objc_msgSend_updateSubmersionStateFromAOPState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubmersionStateFromAOPState:");
}

id objc_msgSend_updateSubmersionStateFromMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubmersionStateFromMeasurement:");
}

id objc_msgSend_updateSupervised(void *a1, const char *a2, ...)
{
  return _[a1 updateSupervised];
}

id objc_msgSend_updateSurfaceCalWithSource_andPressureQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSurfaceCalWithSource:andPressureQueue:");
}

id objc_msgSend_updateSystemLoiType_isEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSystemLoiType:isEntry:");
}

id objc_msgSend_updateTargetDemoDepth(void *a1, const char *a2, ...)
{
  return _[a1 updateTargetDemoDepth];
}

id objc_msgSend_updateTimer(void *a1, const char *a2, ...)
{
  return _[a1 updateTimer];
}

id objc_msgSend_updateToCurrentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateToCurrentTime:");
}

id objc_msgSend_updateUncertinatyAndSendCurrentEstimateMslpFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUncertinatyAndSendCurrentEstimateMslpFrom:");
}

id objc_msgSend_updateUserHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserHeight:");
}

id objc_msgSend_updateVisitState_arrivalTime_departureTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVisitState:arrivalTime:departureTime:");
}

id objc_msgSend_updateVolatileData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVolatileData:completion:");
}

id objc_msgSend_updateWetState(void *a1, const char *a2, ...)
{
  return _[a1 updateWetState];
}

id objc_msgSend_updateWithAltitude_andAccuracy_upperBound_lowerBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithAltitude:andAccuracy:upperBound:lowerBound:");
}

id objc_msgSend_updateWithTDot_andTempMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithTDot:andTempMeasurement:");
}

id objc_msgSend_updateWorkoutReminderMuteSetting_mute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWorkoutReminderMuteSetting:mute:");
}

id objc_msgSend_updateWsbClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWsbClient:");
}

id objc_msgSend_updater(void *a1, const char *a2, ...)
{
  return _[a1 updater];
}

id objc_msgSend_updating(void *a1, const char *a2, ...)
{
  return _[a1 updating];
}

id objc_msgSend_updatingHK(void *a1, const char *a2, ...)
{
  return _[a1 updatingHK];
}

id objc_msgSend_updatingSurfacePressure(void *a1, const char *a2, ...)
{
  return _[a1 updatingSurfacePressure];
}

id objc_msgSend_uploadMigitation(void *a1, const char *a2, ...)
{
  return _[a1 uploadMigitation];
}

id objc_msgSend_uploadPayloadSize(void *a1, const char *a2, ...)
{
  return _[a1 uploadPayloadSize];
}

id objc_msgSend_uploadTaskWithRequest_fromData_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadTaskWithRequest:fromData:completionHandler:");
}

id objc_msgSend_uploadURL(void *a1, const char *a2, ...)
{
  return _[a1 uploadURL];
}

id objc_msgSend_upperQuartile(void *a1, const char *a2, ...)
{
  return _[a1 upperQuartile];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_userDismissedWorkoutAlert(void *a1, const char *a2, ...)
{
  return _[a1 userDismissedWorkoutAlert];
}

id objc_msgSend_userFocusComputedMode(void *a1, const char *a2, ...)
{
  return _[a1 userFocusComputedMode];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userMets(void *a1, const char *a2, ...)
{
  return _[a1 userMets];
}

id objc_msgSend_userMetsSource(void *a1, const char *a2, ...)
{
  return _[a1 userMetsSource];
}

id objc_msgSend_userName(void *a1, const char *a2, ...)
{
  return _[a1 userName];
}

id objc_msgSend_userType(void *a1, const char *a2, ...)
{
  return _[a1 userType];
}

id objc_msgSend_userTypeSource(void *a1, const char *a2, ...)
{
  return _[a1 userTypeSource];
}

id objc_msgSend_userlessClientKeyPath(void *a1, const char *a2, ...)
{
  return _[a1 userlessClientKeyPath];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_valid(void *a1, const char *a2, ...)
{
  return _[a1 valid];
}

id objc_msgSend_validateAccount(void *a1, const char *a2, ...)
{
  return _[a1 validateAccount];
}

id objc_msgSend_validateBodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 validateBodyMetrics];
}

id objc_msgSend_validateClientMonitoringRecordsByIdenitifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateClientMonitoringRecordsByIdenitifier:");
}

id objc_msgSend_validateRemoteDeviceForStreaming_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateRemoteDeviceForStreaming:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForHTTPHeaderField:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valueOut(void *a1, const char *a2, ...)
{
  return _[a1 valueOut];
}

id objc_msgSend_valueOutForValueIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueOutForValueIn:");
}

id objc_msgSend_variance(void *a1, const char *a2, ...)
{
  return _[a1 variance];
}

id objc_msgSend_vectorClocksAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vectorClocksAtIndex:");
}

id objc_msgSend_vectorClocksCount(void *a1, const char *a2, ...)
{
  return _[a1 vectorClocksCount];
}

id objc_msgSend_vehicleBluetoothAddress(void *a1, const char *a2, ...)
{
  return _[a1 vehicleBluetoothAddress];
}

id objc_msgSend_vehicleModelName(void *a1, const char *a2, ...)
{
  return _[a1 vehicleModelName];
}

id objc_msgSend_vehicleName(void *a1, const char *a2, ...)
{
  return _[a1 vehicleName];
}

id objc_msgSend_vehicularHints(void *a1, const char *a2, ...)
{
  return _[a1 vehicularHints];
}

id objc_msgSend_vehicularState(void *a1, const char *a2, ...)
{
  return _[a1 vehicularState];
}

id objc_msgSend_vendor(void *a1, const char *a2, ...)
{
  return _[a1 vendor];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_versionIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 versionIdentifiers];
}

id objc_msgSend_verticalAccuracy(void *a1, const char *a2, ...)
{
  return _[a1 verticalAccuracy];
}

id objc_msgSend_verticalUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 verticalUncertainty];
}

id objc_msgSend_visitClients(void *a1, const char *a2, ...)
{
  return _[a1 visitClients];
}

id objc_msgSend_visitEvent_withFamiliarityIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visitEvent:withFamiliarityIndex:");
}

id objc_msgSend_visits(void *a1, const char *a2, ...)
{
  return _[a1 visits];
}

id objc_msgSend_vo2MaxModelSource(void *a1, const char *a2, ...)
{
  return _[a1 vo2MaxModelSource];
}

id objc_msgSend_vo2Mean(void *a1, const char *a2, ...)
{
  return _[a1 vo2Mean];
}

id objc_msgSend_vo2Variance(void *a1, const char *a2, ...)
{
  return _[a1 vo2Variance];
}

id objc_msgSend_wakeUpLaunchdManagedClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakeUpLaunchdManagedClient:");
}

id objc_msgSend_walkBinCount(void *a1, const char *a2, ...)
{
  return _[a1 walkBinCount];
}

id objc_msgSend_walkableSide(void *a1, const char *a2, ...)
{
  return _[a1 walkableSide];
}

id objc_msgSend_walkingSpeed(void *a1, const char *a2, ...)
{
  return _[a1 walkingSpeed];
}

id objc_msgSend_waterTempEst(void *a1, const char *a2, ...)
{
  return _[a1 waterTempEst];
}

id objc_msgSend_waterTempUncertainty(void *a1, const char *a2, ...)
{
  return _[a1 waterTempUncertainty];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_weatherEstimateInMeter(void *a1, const char *a2, ...)
{
  return _[a1 weatherEstimateInMeter];
}

id objc_msgSend_weatherPressure(void *a1, const char *a2, ...)
{
  return _[a1 weatherPressure];
}

id objc_msgSend_website(void *a1, const char *a2, ...)
{
  return _[a1 website];
}

id objc_msgSend_wetStateUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wetStateUpdated:");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_wifi2GHzCriticalState(void *a1, const char *a2, ...)
{
  return _[a1 wifi2GHzCriticalState];
}

id objc_msgSend_wifiBands(void *a1, const char *a2, ...)
{
  return _[a1 wifiBands];
}

id objc_msgSend_wifiBandsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiBandsAtIndex:");
}

id objc_msgSend_wifiBandsCount(void *a1, const char *a2, ...)
{
  return _[a1 wifiBandsCount];
}

id objc_msgSend_willFetchRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 willFetchRecordZoneChangesEvent];
}

id objc_msgSend_willSendChangesEvent(void *a1, const char *a2, ...)
{
  return _[a1 willSendChangesEvent];
}

id objc_msgSend_wirelessAPAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wirelessAPAtIndex:");
}

id objc_msgSend_wirelessAPs(void *a1, const char *a2, ...)
{
  return _[a1 wirelessAPs];
}

id objc_msgSend_wirelessAPsCount(void *a1, const char *a2, ...)
{
  return _[a1 wirelessAPsCount];
}

id objc_msgSend_withClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "withClients:");
}

id objc_msgSend_workArchive(void *a1, const char *a2, ...)
{
  return _[a1 workArchive];
}

id objc_msgSend_workQ(void *a1, const char *a2, ...)
{
  return _[a1 workQ];
}

id objc_msgSend_workingDirectoryHasSufficientFreeSpace(void *a1, const char *a2, ...)
{
  return _[a1 workingDirectoryHasSufficientFreeSpace];
}

id objc_msgSend_workoutEvent(void *a1, const char *a2, ...)
{
  return _[a1 workoutEvent];
}

id objc_msgSend_workoutIsTypeRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutIsTypeRunning:");
}

id objc_msgSend_workoutIsTypeWalking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutIsTypeWalking:");
}

id objc_msgSend_workoutLocationTypeFromCMWorkoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutLocationTypeFromCMWorkoutType:");
}

id objc_msgSend_workoutName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutName:");
}

id objc_msgSend_workoutSessionId(void *a1, const char *a2, ...)
{
  return _[a1 workoutSessionId];
}

id objc_msgSend_workoutSnapshotWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutSnapshotWithReply:");
}

id objc_msgSend_workoutType(void *a1, const char *a2, ...)
{
  return _[a1 workoutType];
}

id objc_msgSend_workouts(void *a1, const char *a2, ...)
{
  return _[a1 workouts];
}

id objc_msgSend_writeAnomalyInfoToFileWithLastFallEvent_writeMask_fallNotifierConfig_stateLogger_statsLogger_sensorsLogger_pressureLogger_heartRateLogger_wristStateLogger_odometerLogger_falsePositiveSuppressionFeaturesLogger_hgalLogger_logDirectory_logFilePrefix_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pr essureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogge r:logDirectory:logFilePrefix:");
}

id objc_msgSend_writeBigEndianFixed16_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBigEndianFixed16:");
}

id objc_msgSend_writeBigEndianFixed32_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBigEndianFixed32:");
}

id objc_msgSend_writeBigEndianShortThenString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBigEndianShortThenString:");
}

id objc_msgSend_writeBodyMetrics(void *a1, const char *a2, ...)
{
  return _[a1 writeBodyMetrics];
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:");
}

id objc_msgSend_writeData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:error:");
}

id objc_msgSend_writeData_forTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:forTag:");
}

id objc_msgSend_writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp:");
}

id objc_msgSend_writeJSONObject_toStream_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeJSONObject:toStream:options:error:");
}

id objc_msgSend_writeMeta_toHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeMeta:toHandle:");
}

id objc_msgSend_writeOtherFallLoggerData_otherLoggerDirectory_otherLoggerFilePrefix_destinationLogger_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeOtherFallLoggerData:otherLoggerDirectory:otherLoggerFilePrefix:destinationLogger:");
}

id objc_msgSend_writeSecondaryObject_toField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSecondaryObject:toField:");
}

id objc_msgSend_writeSteadinessEvent_startDate_endDate_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSteadinessEvent:startDate:endDate:source:");
}

id objc_msgSend_writeStrideCalBins(void *a1, const char *a2, ...)
{
  return _[a1 writeStrideCalBins];
}

id objc_msgSend_writeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeTo:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToHealthKitAppleWalkingSteadiness_startDate_endDate_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:");
}

id objc_msgSend_writeToHealthKitType_value_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitType:value:startDate:endDate:");
}

id objc_msgSend_writeToHealthKitType_value_startDate_endDate_deviceSide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitType:value:startDate:endDate:deviceSide:");
}

id objc_msgSend_writeToHealthRunningGroundContactTime_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningGroundContactTime:startDate:endDate:");
}

id objc_msgSend_writeToHealthRunningPower_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningPower:startDate:endDate:");
}

id objc_msgSend_writeToHealthRunningSpeed_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningSpeed:startDate:endDate:");
}

id objc_msgSend_writeToHealthRunningStrideLength_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningStrideLength:startDate:endDate:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeWatchOrientation(void *a1, const char *a2, ...)
{
  return _[a1 writeWatchOrientation];
}

id objc_msgSend_writeWorkoutEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeWorkoutEvent:");
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return _[a1 year];
}

id objc_msgSend_zipperedStoredLocationsBetweenStartTime_endTime_apartFromEachOther_lyingWithinTimeIntervals_custeredWithVisits_withReply_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "zipperedStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:custeredWithVisits:withReply:");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIDForZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDForZoneName:");
}

id objc_msgSend_zoneIDs(void *a1, const char *a2, ...)
{
  return _[a1 zoneIDs];
}

id objc_msgSend_zoneId(void *a1, const char *a2, ...)
{
  return _[a1 zoneId];
}

id objc_msgSend_zoneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 zoneIdentifier];
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _[a1 zoneName];
}

id objc_msgSend_zoneid(void *a1, const char *a2, ...)
{
  return _[a1 zoneid];
}